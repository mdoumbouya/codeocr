[{"image_id": 0, "image_height": 4032, "image_width": 2268, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 1672.0, "y": 609.0, "w": -4.0, "h": 0.0, "line_num": 1, "text": "num = int (input (\"Enter a number: \")"}, {"x": 1527.0, "y": 675.0, "w": 11.0, "h": 2.0, "line_num": 2, "text": "Ans =1"}, {"x": 1390.0, "y": 620.0, "w": 2.0, "h": 0.0, "line_num": 3, "text": "while num > 1 :"}, {"x": 1241.0, "y": 778.0, "w": -9.0, "h": 0.0, "line_num": 4, "text": "Ans * = num"}, {"x": 1065.0, "y": 797.0, "w": 23.0, "h": 0.0, "line_num": 5, "text": "num -= 1"}, {"x": 948.0, "y": 604.0, "w": 9.0, "h": 0.0, "line_num": 6, "text": "return Ans"}], "ir_algo_name": "none", "ir_algo_output_code": "num = int (input (\"Enter a number: \")\nAns =1\nwhile num > 1 :\nAns * = num\nnum -= 1\nreturn Ans", "ir_algo_output_edit_distance": 15, "prompting_method": "none", "lm_post_processed_code": "num = int (input (\"Enter a number: \")\nAns =1\nwhile num > 1 :\nAns * = num\nnum -= 1\nreturn Ans", "lm_post_processed_edit_distance": 15}, {"image_id": 0, "image_height": 4032, "image_width": 2268, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 1672.0, "y": 609.0, "w": -4.0, "h": 0.0, "line_num": 1, "text": "num = int (input (\"Enter a number: \")"}, {"x": 1527.0, "y": 675.0, "w": 11.0, "h": 2.0, "line_num": 2, "text": "Ans =1"}, {"x": 1390.0, "y": 620.0, "w": 2.0, "h": 0.0, "line_num": 3, "text": "while num > 1 :"}, {"x": 1241.0, "y": 778.0, "w": -9.0, "h": 0.0, "line_num": 4, "text": "Ans * = num"}, {"x": 1065.0, "y": 797.0, "w": 23.0, "h": 0.0, "line_num": 5, "text": "num -= 1"}, {"x": 948.0, "y": 604.0, "w": 9.0, "h": 0.0, "line_num": 6, "text": "return Ans"}], "ir_algo_name": "none", "ir_algo_output_code": "num = int (input (\"Enter a number: \")\nAns =1\nwhile num > 1 :\nAns * = num\nnum -= 1\nreturn Ans", "ir_algo_output_edit_distance": 15, "prompting_method": "cot-test1", "lm_post_processed_code": "num = int(input(\"Enter a number: \"))\nAns =1\nwhile num > 1 :\nAns *= num\nnum -= 1\nreturn Ans\n", "lm_post_processed_edit_distance": 10}, {"image_id": 0, "image_height": 4032, "image_width": 2268, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 1672.0, "y": 609.0, "w": -4.0, "h": 0.0, "line_num": 1, "text": "num = int (input (\"Enter a number: \")"}, {"x": 1527.0, "y": 675.0, "w": 11.0, "h": 2.0, "line_num": 2, "text": "Ans =1"}, {"x": 1390.0, "y": 620.0, "w": 2.0, "h": 0.0, "line_num": 3, "text": "while num > 1 :"}, {"x": 1241.0, "y": 778.0, "w": -9.0, "h": 0.0, "line_num": 4, "text": "Ans * = num"}, {"x": 1065.0, "y": 797.0, "w": 23.0, "h": 0.0, "line_num": 5, "text": "num -= 1"}, {"x": 948.0, "y": 604.0, "w": 9.0, "h": 0.0, "line_num": 6, "text": "return Ans"}], "ir_algo_name": "none", "ir_algo_output_code": "num = int (input (\"Enter a number: \")\nAns =1\nwhile num > 1 :\nAns * = num\nnum -= 1\nreturn Ans", "ir_algo_output_edit_distance": 15, "prompting_method": "cot-test5", "lm_post_processed_code": "num = int(input(\"Enter a number: \"))\nAns = 1\nwhile num > 1 :\n    Ans *= num\n    num -= 1\nreturn Ans\n", "lm_post_processed_edit_distance": 1}, {"image_id": 0, "image_height": 4032, "image_width": 2268, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 1672.0, "y": 609.0, "w": -4.0, "h": 0.0, "line_num": 1, "text": "num = int (input (\"Enter a number: \")"}, {"x": 1527.0, "y": 675.0, "w": 11.0, "h": 2.0, "line_num": 2, "text": "Ans =1"}, {"x": 1390.0, "y": 620.0, "w": 2.0, "h": 0.0, "line_num": 3, "text": "while num > 1 :"}, {"x": 1241.0, "y": 778.0, "w": -9.0, "h": 0.0, "line_num": 4, "text": "Ans * = num"}, {"x": 1065.0, "y": 797.0, "w": 23.0, "h": 0.0, "line_num": 5, "text": "num -= 1"}, {"x": 948.0, "y": 604.0, "w": 9.0, "h": 0.0, "line_num": 6, "text": "return Ans"}], "ir_algo_name": "none", "ir_algo_output_code": "num = int (input (\"Enter a number: \")\nAns =1\nwhile num > 1 :\nAns * = num\nnum -= 1\nreturn Ans", "ir_algo_output_edit_distance": 15, "prompting_method": "simple-test2", "lm_post_processed_code": "num = int(input(\"Enter a number: \"))\nAns = 1\nwhile num > 1:\n    Ans *= num\n    num -= 1\nreturn Ans\n", "lm_post_processed_edit_distance": 0}, {"image_id": 0, "image_height": 4032, "image_width": 2268, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 1672.0, "y": 609.0, "w": -4.0, "h": 0.0, "line_num": 1, "text": "num = int (input (\"Enter a number: \")"}, {"x": 1527.0, "y": 675.0, "w": 11.0, "h": 2.0, "line_num": 2, "text": "Ans =1"}, {"x": 1390.0, "y": 620.0, "w": 2.0, "h": 0.0, "line_num": 3, "text": "while num > 1 :"}, {"x": 1241.0, "y": 778.0, "w": -9.0, "h": 0.0, "line_num": 4, "text": "Ans * = num"}, {"x": 1065.0, "y": 797.0, "w": 23.0, "h": 0.0, "line_num": 5, "text": "num -= 1"}, {"x": 948.0, "y": 604.0, "w": 9.0, "h": 0.0, "line_num": 6, "text": "return Ans"}], "ir_algo_name": "none", "ir_algo_output_code": "num = int (input (\"Enter a number: \")\nAns =1\nwhile num > 1 :\nAns * = num\nnum -= 1\nreturn Ans", "ir_algo_output_edit_distance": 15, "prompting_method": "simple-test3", "lm_post_processed_code": "num = int(input(\"Enter a number: \"))\nAns = 1\nwhile num > 1:\n    Ans *= num\n    num -= 1\nreturn Ans\n", "lm_post_processed_edit_distance": 0}, {"image_id": 0, "image_height": 4032, "image_width": 2268, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 1672.0, "y": 609.0, "w": -4.0, "h": 0.0, "line_num": 1, "text": "num = int (input (\"Enter a number: \")"}, {"x": 1527.0, "y": 675.0, "w": 11.0, "h": 2.0, "line_num": 2, "text": "Ans =1"}, {"x": 1390.0, "y": 620.0, "w": 2.0, "h": 0.0, "line_num": 3, "text": "while num > 1 :"}, {"x": 1241.0, "y": 778.0, "w": -9.0, "h": 0.0, "line_num": 4, "text": "Ans * = num"}, {"x": 1065.0, "y": 797.0, "w": 23.0, "h": 0.0, "line_num": 5, "text": "num -= 1"}, {"x": 948.0, "y": 604.0, "w": 9.0, "h": 0.0, "line_num": 6, "text": "return Ans"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 0.5, "ir_algo_output_code": "                    num = int (input (\"Enter a number: \")\n                Ans =1\n            while num > 1 :\n        Ans * = num\n    num -= 1\nreturn Ans\n", "ir_algo_output_indented_lines": [{"x": 1672.0, "y": 609.0, "w": -4.0, "h": 0.0, "line_num": 1, "text": "num = int (input (\"Enter a number: \")", "cluster_label": 0, "indentation": 5}, {"x": 1527.0, "y": 675.0, "w": 11.0, "h": 2.0, "line_num": 2, "text": "Ans =1", "cluster_label": 1, "indentation": 4}, {"x": 1390.0, "y": 620.0, "w": 2.0, "h": 0.0, "line_num": 3, "text": "while num > 1 :", "cluster_label": 2, "indentation": 3}, {"x": 1241.0, "y": 778.0, "w": -9.0, "h": 0.0, "line_num": 4, "text": "Ans * = num", "cluster_label": 3, "indentation": 2}, {"x": 1065.0, "y": 797.0, "w": 23.0, "h": 0.0, "line_num": 5, "text": "num -= 1", "cluster_label": 4, "indentation": 1}, {"x": 948.0, "y": 604.0, "w": 9.0, "h": 0.0, "line_num": 6, "text": "return Ans", "cluster_label": 5, "indentation": 0}], "ir_algo_output_edit_distance": 58, "prompting_method": "none", "lm_post_processed_code": "                    num = int (input (\"Enter a number: \")\n                Ans =1\n            while num > 1 :\n        Ans * = num\n    num -= 1\nreturn Ans\n", "lm_post_processed_edit_distance": 58}, {"image_id": 0, "image_height": 4032, "image_width": 2268, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 1672.0, "y": 609.0, "w": -4.0, "h": 0.0, "line_num": 1, "text": "num = int (input (\"Enter a number: \")"}, {"x": 1527.0, "y": 675.0, "w": 11.0, "h": 2.0, "line_num": 2, "text": "Ans =1"}, {"x": 1390.0, "y": 620.0, "w": 2.0, "h": 0.0, "line_num": 3, "text": "while num > 1 :"}, {"x": 1241.0, "y": 778.0, "w": -9.0, "h": 0.0, "line_num": 4, "text": "Ans * = num"}, {"x": 1065.0, "y": 797.0, "w": 23.0, "h": 0.0, "line_num": 5, "text": "num -= 1"}, {"x": 948.0, "y": 604.0, "w": 9.0, "h": 0.0, "line_num": 6, "text": "return Ans"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 0.5, "ir_algo_output_code": "                    num = int (input (\"Enter a number: \")\n                Ans =1\n            while num > 1 :\n        Ans * = num\n    num -= 1\nreturn Ans\n", "ir_algo_output_indented_lines": [{"x": 1672.0, "y": 609.0, "w": -4.0, "h": 0.0, "line_num": 1, "text": "num = int (input (\"Enter a number: \")", "cluster_label": 0, "indentation": 5}, {"x": 1527.0, "y": 675.0, "w": 11.0, "h": 2.0, "line_num": 2, "text": "Ans =1", "cluster_label": 1, "indentation": 4}, {"x": 1390.0, "y": 620.0, "w": 2.0, "h": 0.0, "line_num": 3, "text": "while num > 1 :", "cluster_label": 2, "indentation": 3}, {"x": 1241.0, "y": 778.0, "w": -9.0, "h": 0.0, "line_num": 4, "text": "Ans * = num", "cluster_label": 3, "indentation": 2}, {"x": 1065.0, "y": 797.0, "w": 23.0, "h": 0.0, "line_num": 5, "text": "num -= 1", "cluster_label": 4, "indentation": 1}, {"x": 948.0, "y": 604.0, "w": 9.0, "h": 0.0, "line_num": 6, "text": "return Ans", "cluster_label": 5, "indentation": 0}], "ir_algo_output_edit_distance": 58, "prompting_method": "cot-test1", "lm_post_processed_code": "num = int(input(\"Enter a number: \"))\n                Ans = 1\n            while num > 1 :\n        Ans *= num\n    num -= 1\nreturn Ans\n", "lm_post_processed_edit_distance": 33}, {"image_id": 0, "image_height": 4032, "image_width": 2268, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 1672.0, "y": 609.0, "w": -4.0, "h": 0.0, "line_num": 1, "text": "num = int (input (\"Enter a number: \")"}, {"x": 1527.0, "y": 675.0, "w": 11.0, "h": 2.0, "line_num": 2, "text": "Ans =1"}, {"x": 1390.0, "y": 620.0, "w": 2.0, "h": 0.0, "line_num": 3, "text": "while num > 1 :"}, {"x": 1241.0, "y": 778.0, "w": -9.0, "h": 0.0, "line_num": 4, "text": "Ans * = num"}, {"x": 1065.0, "y": 797.0, "w": 23.0, "h": 0.0, "line_num": 5, "text": "num -= 1"}, {"x": 948.0, "y": 604.0, "w": 9.0, "h": 0.0, "line_num": 6, "text": "return Ans"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 0.5, "ir_algo_output_code": "                    num = int (input (\"Enter a number: \")\n                Ans =1\n            while num > 1 :\n        Ans * = num\n    num -= 1\nreturn Ans\n", "ir_algo_output_indented_lines": [{"x": 1672.0, "y": 609.0, "w": -4.0, "h": 0.0, "line_num": 1, "text": "num = int (input (\"Enter a number: \")", "cluster_label": 0, "indentation": 5}, {"x": 1527.0, "y": 675.0, "w": 11.0, "h": 2.0, "line_num": 2, "text": "Ans =1", "cluster_label": 1, "indentation": 4}, {"x": 1390.0, "y": 620.0, "w": 2.0, "h": 0.0, "line_num": 3, "text": "while num > 1 :", "cluster_label": 2, "indentation": 3}, {"x": 1241.0, "y": 778.0, "w": -9.0, "h": 0.0, "line_num": 4, "text": "Ans * = num", "cluster_label": 3, "indentation": 2}, {"x": 1065.0, "y": 797.0, "w": 23.0, "h": 0.0, "line_num": 5, "text": "num -= 1", "cluster_label": 4, "indentation": 1}, {"x": 948.0, "y": 604.0, "w": 9.0, "h": 0.0, "line_num": 6, "text": "return Ans", "cluster_label": 5, "indentation": 0}], "ir_algo_output_edit_distance": 58, "prompting_method": "cot-test5", "lm_post_processed_code": "num = int (input (\"Enter a number: \"))\nAns =1\nwhile num > 1 :\n    Ans *= num\nnum -= 1\nreturn Ans\n", "lm_post_processed_edit_distance": 8}, {"image_id": 0, "image_height": 4032, "image_width": 2268, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 1672.0, "y": 609.0, "w": -4.0, "h": 0.0, "line_num": 1, "text": "num = int (input (\"Enter a number: \")"}, {"x": 1527.0, "y": 675.0, "w": 11.0, "h": 2.0, "line_num": 2, "text": "Ans =1"}, {"x": 1390.0, "y": 620.0, "w": 2.0, "h": 0.0, "line_num": 3, "text": "while num > 1 :"}, {"x": 1241.0, "y": 778.0, "w": -9.0, "h": 0.0, "line_num": 4, "text": "Ans * = num"}, {"x": 1065.0, "y": 797.0, "w": 23.0, "h": 0.0, "line_num": 5, "text": "num -= 1"}, {"x": 948.0, "y": 604.0, "w": 9.0, "h": 0.0, "line_num": 6, "text": "return Ans"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 0.5, "ir_algo_output_code": "                    num = int (input (\"Enter a number: \")\n                Ans =1\n            while num > 1 :\n        Ans * = num\n    num -= 1\nreturn Ans\n", "ir_algo_output_indented_lines": [{"x": 1672.0, "y": 609.0, "w": -4.0, "h": 0.0, "line_num": 1, "text": "num = int (input (\"Enter a number: \")", "cluster_label": 0, "indentation": 5}, {"x": 1527.0, "y": 675.0, "w": 11.0, "h": 2.0, "line_num": 2, "text": "Ans =1", "cluster_label": 1, "indentation": 4}, {"x": 1390.0, "y": 620.0, "w": 2.0, "h": 0.0, "line_num": 3, "text": "while num > 1 :", "cluster_label": 2, "indentation": 3}, {"x": 1241.0, "y": 778.0, "w": -9.0, "h": 0.0, "line_num": 4, "text": "Ans * = num", "cluster_label": 3, "indentation": 2}, {"x": 1065.0, "y": 797.0, "w": 23.0, "h": 0.0, "line_num": 5, "text": "num -= 1", "cluster_label": 4, "indentation": 1}, {"x": 948.0, "y": 604.0, "w": 9.0, "h": 0.0, "line_num": 6, "text": "return Ans", "cluster_label": 5, "indentation": 0}], "ir_algo_output_edit_distance": 58, "prompting_method": "simple-test2", "lm_post_processed_code": "num = int(input(\"Enter a number: \"))\nAns = 1\nwhile num > 1:\n    Ans *= num\n    num -= 1\nreturn Ans\n", "lm_post_processed_edit_distance": 0}, {"image_id": 0, "image_height": 4032, "image_width": 2268, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 1672.0, "y": 609.0, "w": -4.0, "h": 0.0, "line_num": 1, "text": "num = int (input (\"Enter a number: \")"}, {"x": 1527.0, "y": 675.0, "w": 11.0, "h": 2.0, "line_num": 2, "text": "Ans =1"}, {"x": 1390.0, "y": 620.0, "w": 2.0, "h": 0.0, "line_num": 3, "text": "while num > 1 :"}, {"x": 1241.0, "y": 778.0, "w": -9.0, "h": 0.0, "line_num": 4, "text": "Ans * = num"}, {"x": 1065.0, "y": 797.0, "w": 23.0, "h": 0.0, "line_num": 5, "text": "num -= 1"}, {"x": 948.0, "y": 604.0, "w": 9.0, "h": 0.0, "line_num": 6, "text": "return Ans"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 0.5, "ir_algo_output_code": "                    num = int (input (\"Enter a number: \")\n                Ans =1\n            while num > 1 :\n        Ans * = num\n    num -= 1\nreturn Ans\n", "ir_algo_output_indented_lines": [{"x": 1672.0, "y": 609.0, "w": -4.0, "h": 0.0, "line_num": 1, "text": "num = int (input (\"Enter a number: \")", "cluster_label": 0, "indentation": 5}, {"x": 1527.0, "y": 675.0, "w": 11.0, "h": 2.0, "line_num": 2, "text": "Ans =1", "cluster_label": 1, "indentation": 4}, {"x": 1390.0, "y": 620.0, "w": 2.0, "h": 0.0, "line_num": 3, "text": "while num > 1 :", "cluster_label": 2, "indentation": 3}, {"x": 1241.0, "y": 778.0, "w": -9.0, "h": 0.0, "line_num": 4, "text": "Ans * = num", "cluster_label": 3, "indentation": 2}, {"x": 1065.0, "y": 797.0, "w": 23.0, "h": 0.0, "line_num": 5, "text": "num -= 1", "cluster_label": 4, "indentation": 1}, {"x": 948.0, "y": 604.0, "w": 9.0, "h": 0.0, "line_num": 6, "text": "return Ans", "cluster_label": 5, "indentation": 0}], "ir_algo_output_edit_distance": 58, "prompting_method": "simple-test3", "lm_post_processed_code": "num = int(input(\"Enter a number: \"))\nAns = 1\nwhile num > 1 :\n    Ans *= num\n    num -= 1\nreturn Ans\n", "lm_post_processed_edit_distance": 1}, {"image_id": 0, "image_height": 4032, "image_width": 2268, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 1672.0, "y": 609.0, "w": -4.0, "h": 0.0, "line_num": 1, "text": "num = int (input (\"Enter a number: \")"}, {"x": 1527.0, "y": 675.0, "w": 11.0, "h": 2.0, "line_num": 2, "text": "Ans =1"}, {"x": 1390.0, "y": 620.0, "w": 2.0, "h": 0.0, "line_num": 3, "text": "while num > 1 :"}, {"x": 1241.0, "y": 778.0, "w": -9.0, "h": 0.0, "line_num": 4, "text": "Ans * = num"}, {"x": 1065.0, "y": 797.0, "w": 23.0, "h": 0.0, "line_num": 5, "text": "num -= 1"}, {"x": 948.0, "y": 604.0, "w": 9.0, "h": 0.0, "line_num": 6, "text": "return Ans"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "num = int (input (\"Enter a number: \")\nAns =1\nwhile num > 1 :\nAns * = num\nnum -= 1\nreturn Ans\n", "ir_algo_output_indented_lines": [{"x": 1672.0, "y": 609.0, "w": -4.0, "h": 0.0, "line_num": 1, "text": "num = int (input (\"Enter a number: \")", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 1527.0, "y": 675.0, "w": 11.0, "h": 2.0, "line_num": 2, "text": "Ans =1", "delta": -145.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1390.0, "y": 620.0, "w": 2.0, "h": 0.0, "line_num": 3, "text": "while num > 1 :", "delta": -137.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1241.0, "y": 778.0, "w": -9.0, "h": 0.0, "line_num": 4, "text": "Ans * = num", "delta": -149.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1065.0, "y": 797.0, "w": 23.0, "h": 0.0, "line_num": 5, "text": "num -= 1", "delta": -176.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 948.0, "y": 604.0, "w": 9.0, "h": 0.0, "line_num": 6, "text": "return Ans", "delta": -117.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 14, "prompting_method": "none", "lm_post_processed_code": "num = int (input (\"Enter a number: \")\nAns =1\nwhile num > 1 :\nAns * = num\nnum -= 1\nreturn Ans\n", "lm_post_processed_edit_distance": 14}, {"image_id": 0, "image_height": 4032, "image_width": 2268, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 1672.0, "y": 609.0, "w": -4.0, "h": 0.0, "line_num": 1, "text": "num = int (input (\"Enter a number: \")"}, {"x": 1527.0, "y": 675.0, "w": 11.0, "h": 2.0, "line_num": 2, "text": "Ans =1"}, {"x": 1390.0, "y": 620.0, "w": 2.0, "h": 0.0, "line_num": 3, "text": "while num > 1 :"}, {"x": 1241.0, "y": 778.0, "w": -9.0, "h": 0.0, "line_num": 4, "text": "Ans * = num"}, {"x": 1065.0, "y": 797.0, "w": 23.0, "h": 0.0, "line_num": 5, "text": "num -= 1"}, {"x": 948.0, "y": 604.0, "w": 9.0, "h": 0.0, "line_num": 6, "text": "return Ans"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "num = int (input (\"Enter a number: \")\nAns =1\nwhile num > 1 :\nAns * = num\nnum -= 1\nreturn Ans\n", "ir_algo_output_indented_lines": [{"x": 1672.0, "y": 609.0, "w": -4.0, "h": 0.0, "line_num": 1, "text": "num = int (input (\"Enter a number: \")", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 1527.0, "y": 675.0, "w": 11.0, "h": 2.0, "line_num": 2, "text": "Ans =1", "delta": -145.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1390.0, "y": 620.0, "w": 2.0, "h": 0.0, "line_num": 3, "text": "while num > 1 :", "delta": -137.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1241.0, "y": 778.0, "w": -9.0, "h": 0.0, "line_num": 4, "text": "Ans * = num", "delta": -149.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1065.0, "y": 797.0, "w": 23.0, "h": 0.0, "line_num": 5, "text": "num -= 1", "delta": -176.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 948.0, "y": 604.0, "w": 9.0, "h": 0.0, "line_num": 6, "text": "return Ans", "delta": -117.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 14, "prompting_method": "cot-test1", "lm_post_processed_code": "num = int (input (\"Enter a number: \")\nAns =1\nwhile num > 1 :\nAns *= num\nnum -= 1\nreturn Ans\n", "lm_post_processed_edit_distance": 13}, {"image_id": 0, "image_height": 4032, "image_width": 2268, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 1672.0, "y": 609.0, "w": -4.0, "h": 0.0, "line_num": 1, "text": "num = int (input (\"Enter a number: \")"}, {"x": 1527.0, "y": 675.0, "w": 11.0, "h": 2.0, "line_num": 2, "text": "Ans =1"}, {"x": 1390.0, "y": 620.0, "w": 2.0, "h": 0.0, "line_num": 3, "text": "while num > 1 :"}, {"x": 1241.0, "y": 778.0, "w": -9.0, "h": 0.0, "line_num": 4, "text": "Ans * = num"}, {"x": 1065.0, "y": 797.0, "w": 23.0, "h": 0.0, "line_num": 5, "text": "num -= 1"}, {"x": 948.0, "y": 604.0, "w": 9.0, "h": 0.0, "line_num": 6, "text": "return Ans"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "num = int (input (\"Enter a number: \")\nAns =1\nwhile num > 1 :\nAns * = num\nnum -= 1\nreturn Ans\n", "ir_algo_output_indented_lines": [{"x": 1672.0, "y": 609.0, "w": -4.0, "h": 0.0, "line_num": 1, "text": "num = int (input (\"Enter a number: \")", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 1527.0, "y": 675.0, "w": 11.0, "h": 2.0, "line_num": 2, "text": "Ans =1", "delta": -145.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1390.0, "y": 620.0, "w": 2.0, "h": 0.0, "line_num": 3, "text": "while num > 1 :", "delta": -137.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1241.0, "y": 778.0, "w": -9.0, "h": 0.0, "line_num": 4, "text": "Ans * = num", "delta": -149.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1065.0, "y": 797.0, "w": 23.0, "h": 0.0, "line_num": 5, "text": "num -= 1", "delta": -176.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 948.0, "y": 604.0, "w": 9.0, "h": 0.0, "line_num": 6, "text": "return Ans", "delta": -117.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 14, "prompting_method": "cot-test5", "lm_post_processed_code": "num = int(input(\"Enter a number: \"))\nAns = 1\nwhile num > 1 :\nAns *= num\nnum -= 1\nreturn Ans\n", "lm_post_processed_edit_distance": 9}, {"image_id": 0, "image_height": 4032, "image_width": 2268, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 1672.0, "y": 609.0, "w": -4.0, "h": 0.0, "line_num": 1, "text": "num = int (input (\"Enter a number: \")"}, {"x": 1527.0, "y": 675.0, "w": 11.0, "h": 2.0, "line_num": 2, "text": "Ans =1"}, {"x": 1390.0, "y": 620.0, "w": 2.0, "h": 0.0, "line_num": 3, "text": "while num > 1 :"}, {"x": 1241.0, "y": 778.0, "w": -9.0, "h": 0.0, "line_num": 4, "text": "Ans * = num"}, {"x": 1065.0, "y": 797.0, "w": 23.0, "h": 0.0, "line_num": 5, "text": "num -= 1"}, {"x": 948.0, "y": 604.0, "w": 9.0, "h": 0.0, "line_num": 6, "text": "return Ans"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "num = int (input (\"Enter a number: \")\nAns =1\nwhile num > 1 :\nAns * = num\nnum -= 1\nreturn Ans\n", "ir_algo_output_indented_lines": [{"x": 1672.0, "y": 609.0, "w": -4.0, "h": 0.0, "line_num": 1, "text": "num = int (input (\"Enter a number: \")", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 1527.0, "y": 675.0, "w": 11.0, "h": 2.0, "line_num": 2, "text": "Ans =1", "delta": -145.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1390.0, "y": 620.0, "w": 2.0, "h": 0.0, "line_num": 3, "text": "while num > 1 :", "delta": -137.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1241.0, "y": 778.0, "w": -9.0, "h": 0.0, "line_num": 4, "text": "Ans * = num", "delta": -149.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1065.0, "y": 797.0, "w": 23.0, "h": 0.0, "line_num": 5, "text": "num -= 1", "delta": -176.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 948.0, "y": 604.0, "w": 9.0, "h": 0.0, "line_num": 6, "text": "return Ans", "delta": -117.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 14, "prompting_method": "simple-test2", "lm_post_processed_code": "num = int(input(\"Enter a number: \"))\nAns = 1\nwhile num > 1:\n    Ans *= num\n    num -= 1\nreturn Ans\n", "lm_post_processed_edit_distance": 0}, {"image_id": 0, "image_height": 4032, "image_width": 2268, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 1672.0, "y": 609.0, "w": -4.0, "h": 0.0, "line_num": 1, "text": "num = int (input (\"Enter a number: \")"}, {"x": 1527.0, "y": 675.0, "w": 11.0, "h": 2.0, "line_num": 2, "text": "Ans =1"}, {"x": 1390.0, "y": 620.0, "w": 2.0, "h": 0.0, "line_num": 3, "text": "while num > 1 :"}, {"x": 1241.0, "y": 778.0, "w": -9.0, "h": 0.0, "line_num": 4, "text": "Ans * = num"}, {"x": 1065.0, "y": 797.0, "w": 23.0, "h": 0.0, "line_num": 5, "text": "num -= 1"}, {"x": 948.0, "y": 604.0, "w": 9.0, "h": 0.0, "line_num": 6, "text": "return Ans"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "num = int (input (\"Enter a number: \")\nAns =1\nwhile num > 1 :\nAns * = num\nnum -= 1\nreturn Ans\n", "ir_algo_output_indented_lines": [{"x": 1672.0, "y": 609.0, "w": -4.0, "h": 0.0, "line_num": 1, "text": "num = int (input (\"Enter a number: \")", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 1527.0, "y": 675.0, "w": 11.0, "h": 2.0, "line_num": 2, "text": "Ans =1", "delta": -145.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1390.0, "y": 620.0, "w": 2.0, "h": 0.0, "line_num": 3, "text": "while num > 1 :", "delta": -137.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1241.0, "y": 778.0, "w": -9.0, "h": 0.0, "line_num": 4, "text": "Ans * = num", "delta": -149.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1065.0, "y": 797.0, "w": 23.0, "h": 0.0, "line_num": 5, "text": "num -= 1", "delta": -176.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 948.0, "y": 604.0, "w": 9.0, "h": 0.0, "line_num": 6, "text": "return Ans", "delta": -117.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 14, "prompting_method": "simple-test3", "lm_post_processed_code": "num = int(input(\"Enter a number: \"))\nAns = 1\nwhile num > 1:\n    Ans *= num\n    num -= 1\nreturn Ans\n", "lm_post_processed_edit_distance": 0}, {"image_id": 2, "image_height": 1098, "image_width": 1280, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 118.0, "w": 301.0, "h": 30.0, "line_num": 1, "text": "def main ( ) :"}, {"x": 227.0, "y": 157.0, "w": 128.0, "h": 32.0, "line_num": 2, "text": "Himput"}, {"x": 233.0, "y": 199.0, "w": 836.0, "h": 35.0, "line_num": 3, "text": "my_ word = input( Enter The original word: 7"}, {"x": 218.0, "y": 267.0, "w": 291.0, "h": 36.0, "line_num": 4, "text": "#Function calling"}, {"x": 244.0, "y": 318.0, "w": 710.0, "h": 31.0, "line_num": 5, "text": "reversed- word = reverse (my-word )"}, {"x": 243.0, "y": 354.0, "w": 974.0, "h": 35.0, "line_num": 6, "text": "Print ( The reversed word is (+) \" +\"\"+reversed-wordt\""}, {"x": 135.0, "y": 424.0, "w": 293.0, "h": 35.0, "line_num": 7, "text": "# Helpen- Function"}, {"x": 155.0, "y": 468.0, "w": 393.0, "h": 33.0, "line_num": 8, "text": "def severse (word) :"}, {"x": 269.0, "y": 507.0, "w": 281.0, "h": 34.0, "line_num": 9, "text": "# reversed-word"}, {"x": 296.0, "y": 552.0, "w": 282.0, "h": 28.0, "line_num": 10, "text": "mew-word = \"\""}, {"x": 262.0, "y": 584.0, "w": 258.0, "h": 33.0, "line_num": 11, "text": "A chent by chan-"}, {"x": 298.0, "y": 626.0, "w": 368.0, "h": 31.0, "line_num": 12, "text": "For- chan- in word :"}, {"x": 375.0, "y": 666.0, "w": 562.0, "h": 31.0, "line_num": 13, "text": "new-word = Char + new-word"}, {"x": 297.0, "y": 702.0, "w": 154.0, "h": 28.0, "line_num": 14, "text": "# return"}, {"x": 302.0, "y": 742.0, "w": 322.0, "h": 30.0, "line_num": 15, "text": "return new-word"}, {"x": 163.0, "y": 857.0, "w": 40.0, "h": 30.0, "line_num": 16, "text": "if"}, {"x": 249.0, "y": 862.0, "w": 174.0, "h": 34.0, "line_num": 17, "text": "name_"}, {"x": 426.0, "y": 864.0, "w": 78.0, "h": 25.0, "line_num": 18, "text": "=="}, {"x": 502.0, "y": 854.0, "w": 233.0, "h": 39.0, "line_num": 19, "text": "main1 :"}, {"x": 253.0, "y": 903.0, "w": 156.0, "h": 25.0, "line_num": 20, "text": "main ()"}], "ir_algo_name": "none", "ir_algo_output_code": "def main ( ) :\nHimput\nmy_ word = input( Enter The original word: 7\n#Function calling\nreversed- word = reverse (my-word )\nPrint ( The reversed word is (+) \" +\"\"+reversed-wordt\"\n# Helpen- Function\ndef severse (word) :\n# reversed-word\nmew-word = \"\"\nA chent by chan-\nFor- chan- in word :\nnew-word = Char + new-word\n# return\nreturn new-word\nif\nname_\n==\nmain1 :\nmain ()", "ir_algo_output_edit_distance": 132, "prompting_method": "none", "lm_post_processed_code": "def main ( ) :\nHimput\nmy_ word = input( Enter The original word: 7\n#Function calling\nreversed- word = reverse (my-word )\nPrint ( The reversed word is (+) \" +\"\"+reversed-wordt\"\n# Helpen- Function\ndef severse (word) :\n# reversed-word\nmew-word = \"\"\nA chent by chan-\nFor- chan- in word :\nnew-word = Char + new-word\n# return\nreturn new-word\nif\nname_\n==\nmain1 :\nmain ()", "lm_post_processed_edit_distance": 132}, {"image_id": 2, "image_height": 1098, "image_width": 1280, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 118.0, "w": 301.0, "h": 30.0, "line_num": 1, "text": "def main ( ) :"}, {"x": 227.0, "y": 157.0, "w": 128.0, "h": 32.0, "line_num": 2, "text": "Himput"}, {"x": 233.0, "y": 199.0, "w": 836.0, "h": 35.0, "line_num": 3, "text": "my_ word = input( Enter The original word: 7"}, {"x": 218.0, "y": 267.0, "w": 291.0, "h": 36.0, "line_num": 4, "text": "#Function calling"}, {"x": 244.0, "y": 318.0, "w": 710.0, "h": 31.0, "line_num": 5, "text": "reversed- word = reverse (my-word )"}, {"x": 243.0, "y": 354.0, "w": 974.0, "h": 35.0, "line_num": 6, "text": "Print ( The reversed word is (+) \" +\"\"+reversed-wordt\""}, {"x": 135.0, "y": 424.0, "w": 293.0, "h": 35.0, "line_num": 7, "text": "# Helpen- Function"}, {"x": 155.0, "y": 468.0, "w": 393.0, "h": 33.0, "line_num": 8, "text": "def severse (word) :"}, {"x": 269.0, "y": 507.0, "w": 281.0, "h": 34.0, "line_num": 9, "text": "# reversed-word"}, {"x": 296.0, "y": 552.0, "w": 282.0, "h": 28.0, "line_num": 10, "text": "mew-word = \"\""}, {"x": 262.0, "y": 584.0, "w": 258.0, "h": 33.0, "line_num": 11, "text": "A chent by chan-"}, {"x": 298.0, "y": 626.0, "w": 368.0, "h": 31.0, "line_num": 12, "text": "For- chan- in word :"}, {"x": 375.0, "y": 666.0, "w": 562.0, "h": 31.0, "line_num": 13, "text": "new-word = Char + new-word"}, {"x": 297.0, "y": 702.0, "w": 154.0, "h": 28.0, "line_num": 14, "text": "# return"}, {"x": 302.0, "y": 742.0, "w": 322.0, "h": 30.0, "line_num": 15, "text": "return new-word"}, {"x": 163.0, "y": 857.0, "w": 40.0, "h": 30.0, "line_num": 16, "text": "if"}, {"x": 249.0, "y": 862.0, "w": 174.0, "h": 34.0, "line_num": 17, "text": "name_"}, {"x": 426.0, "y": 864.0, "w": 78.0, "h": 25.0, "line_num": 18, "text": "=="}, {"x": 502.0, "y": 854.0, "w": 233.0, "h": 39.0, "line_num": 19, "text": "main1 :"}, {"x": 253.0, "y": 903.0, "w": 156.0, "h": 25.0, "line_num": 20, "text": "main ()"}], "ir_algo_name": "none", "ir_algo_output_code": "def main ( ) :\nHimput\nmy_ word = input( Enter The original word: 7\n#Function calling\nreversed- word = reverse (my-word )\nPrint ( The reversed word is (+) \" +\"\"+reversed-wordt\"\n# Helpen- Function\ndef severse (word) :\n# reversed-word\nmew-word = \"\"\nA chent by chan-\nFor- chan- in word :\nnew-word = Char + new-word\n# return\nreturn new-word\nif\nname_\n==\nmain1 :\nmain ()", "ir_algo_output_edit_distance": 132, "prompting_method": "cot-test1", "lm_post_processed_code": "def main ( ) :\nmy_word = input(\"Enter The original word: \")\n#Function calling\nreversed_word = reverse (my_word)\nPrint (\"The reversed word is: \" + reversed_word)\n# Helper Function\n\ndef reverse (word) :\n# reversed-word\nnew_word = \"\"\n# char by char\nfor char in word :\nnew_word = char + new_word\n# return\nreturn new_word\nif __name__ == \"__main__\" :\nmain ()\n", "lm_post_processed_edit_distance": 95}, {"image_id": 2, "image_height": 1098, "image_width": 1280, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 118.0, "w": 301.0, "h": 30.0, "line_num": 1, "text": "def main ( ) :"}, {"x": 227.0, "y": 157.0, "w": 128.0, "h": 32.0, "line_num": 2, "text": "Himput"}, {"x": 233.0, "y": 199.0, "w": 836.0, "h": 35.0, "line_num": 3, "text": "my_ word = input( Enter The original word: 7"}, {"x": 218.0, "y": 267.0, "w": 291.0, "h": 36.0, "line_num": 4, "text": "#Function calling"}, {"x": 244.0, "y": 318.0, "w": 710.0, "h": 31.0, "line_num": 5, "text": "reversed- word = reverse (my-word )"}, {"x": 243.0, "y": 354.0, "w": 974.0, "h": 35.0, "line_num": 6, "text": "Print ( The reversed word is (+) \" +\"\"+reversed-wordt\""}, {"x": 135.0, "y": 424.0, "w": 293.0, "h": 35.0, "line_num": 7, "text": "# Helpen- Function"}, {"x": 155.0, "y": 468.0, "w": 393.0, "h": 33.0, "line_num": 8, "text": "def severse (word) :"}, {"x": 269.0, "y": 507.0, "w": 281.0, "h": 34.0, "line_num": 9, "text": "# reversed-word"}, {"x": 296.0, "y": 552.0, "w": 282.0, "h": 28.0, "line_num": 10, "text": "mew-word = \"\""}, {"x": 262.0, "y": 584.0, "w": 258.0, "h": 33.0, "line_num": 11, "text": "A chent by chan-"}, {"x": 298.0, "y": 626.0, "w": 368.0, "h": 31.0, "line_num": 12, "text": "For- chan- in word :"}, {"x": 375.0, "y": 666.0, "w": 562.0, "h": 31.0, "line_num": 13, "text": "new-word = Char + new-word"}, {"x": 297.0, "y": 702.0, "w": 154.0, "h": 28.0, "line_num": 14, "text": "# return"}, {"x": 302.0, "y": 742.0, "w": 322.0, "h": 30.0, "line_num": 15, "text": "return new-word"}, {"x": 163.0, "y": 857.0, "w": 40.0, "h": 30.0, "line_num": 16, "text": "if"}, {"x": 249.0, "y": 862.0, "w": 174.0, "h": 34.0, "line_num": 17, "text": "name_"}, {"x": 426.0, "y": 864.0, "w": 78.0, "h": 25.0, "line_num": 18, "text": "=="}, {"x": 502.0, "y": 854.0, "w": 233.0, "h": 39.0, "line_num": 19, "text": "main1 :"}, {"x": 253.0, "y": 903.0, "w": 156.0, "h": 25.0, "line_num": 20, "text": "main ()"}], "ir_algo_name": "none", "ir_algo_output_code": "def main ( ) :\nHimput\nmy_ word = input( Enter The original word: 7\n#Function calling\nreversed- word = reverse (my-word )\nPrint ( The reversed word is (+) \" +\"\"+reversed-wordt\"\n# Helpen- Function\ndef severse (word) :\n# reversed-word\nmew-word = \"\"\nA chent by chan-\nFor- chan- in word :\nnew-word = Char + new-word\n# return\nreturn new-word\nif\nname_\n==\nmain1 :\nmain ()", "ir_algo_output_edit_distance": 132, "prompting_method": "cot-test5", "lm_post_processed_code": "def main ( ) :\n    my_word = input(\"Enter The original word: \")\n    #Function calling\n    reversed_word = reverse(my_word)\n    Print(\"The reversed word is: \" + reversed_word)\n    # Helper Function\n\ndef reverse(word) :\n    # reversed-word\n    new_word = \"\"\n    # char by char\n    for char in word :\n        new_word = char + new_word\n    # return\n    return new_word\nif __name__ == \"__main__\" :\n    main ()\n", "lm_post_processed_edit_distance": 41}, {"image_id": 2, "image_height": 1098, "image_width": 1280, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 118.0, "w": 301.0, "h": 30.0, "line_num": 1, "text": "def main ( ) :"}, {"x": 227.0, "y": 157.0, "w": 128.0, "h": 32.0, "line_num": 2, "text": "Himput"}, {"x": 233.0, "y": 199.0, "w": 836.0, "h": 35.0, "line_num": 3, "text": "my_ word = input( Enter The original word: 7"}, {"x": 218.0, "y": 267.0, "w": 291.0, "h": 36.0, "line_num": 4, "text": "#Function calling"}, {"x": 244.0, "y": 318.0, "w": 710.0, "h": 31.0, "line_num": 5, "text": "reversed- word = reverse (my-word )"}, {"x": 243.0, "y": 354.0, "w": 974.0, "h": 35.0, "line_num": 6, "text": "Print ( The reversed word is (+) \" +\"\"+reversed-wordt\""}, {"x": 135.0, "y": 424.0, "w": 293.0, "h": 35.0, "line_num": 7, "text": "# Helpen- Function"}, {"x": 155.0, "y": 468.0, "w": 393.0, "h": 33.0, "line_num": 8, "text": "def severse (word) :"}, {"x": 269.0, "y": 507.0, "w": 281.0, "h": 34.0, "line_num": 9, "text": "# reversed-word"}, {"x": 296.0, "y": 552.0, "w": 282.0, "h": 28.0, "line_num": 10, "text": "mew-word = \"\""}, {"x": 262.0, "y": 584.0, "w": 258.0, "h": 33.0, "line_num": 11, "text": "A chent by chan-"}, {"x": 298.0, "y": 626.0, "w": 368.0, "h": 31.0, "line_num": 12, "text": "For- chan- in word :"}, {"x": 375.0, "y": 666.0, "w": 562.0, "h": 31.0, "line_num": 13, "text": "new-word = Char + new-word"}, {"x": 297.0, "y": 702.0, "w": 154.0, "h": 28.0, "line_num": 14, "text": "# return"}, {"x": 302.0, "y": 742.0, "w": 322.0, "h": 30.0, "line_num": 15, "text": "return new-word"}, {"x": 163.0, "y": 857.0, "w": 40.0, "h": 30.0, "line_num": 16, "text": "if"}, {"x": 249.0, "y": 862.0, "w": 174.0, "h": 34.0, "line_num": 17, "text": "name_"}, {"x": 426.0, "y": 864.0, "w": 78.0, "h": 25.0, "line_num": 18, "text": "=="}, {"x": 502.0, "y": 854.0, "w": 233.0, "h": 39.0, "line_num": 19, "text": "main1 :"}, {"x": 253.0, "y": 903.0, "w": 156.0, "h": 25.0, "line_num": 20, "text": "main ()"}], "ir_algo_name": "none", "ir_algo_output_code": "def main ( ) :\nHimput\nmy_ word = input( Enter The original word: 7\n#Function calling\nreversed- word = reverse (my-word )\nPrint ( The reversed word is (+) \" +\"\"+reversed-wordt\"\n# Helpen- Function\ndef severse (word) :\n# reversed-word\nmew-word = \"\"\nA chent by chan-\nFor- chan- in word :\nnew-word = Char + new-word\n# return\nreturn new-word\nif\nname_\n==\nmain1 :\nmain ()", "ir_algo_output_edit_distance": 132, "prompting_method": "simple-test2", "lm_post_processed_code": "def main():\n    my_word = input(\"Enter The original word: \")\n    #Function calling\n    reversed_word = reverse(my_word)\n    print(\"The reversed word is: \" + reversed_word)\n# Helper Function\n\ndef reverse(word):\n    # reversed-word\n    new_word = \"\"\n    for char in word:\n        new_word = char + new_word\n    # return\n    return new_word\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 53}, {"image_id": 2, "image_height": 1098, "image_width": 1280, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 118.0, "w": 301.0, "h": 30.0, "line_num": 1, "text": "def main ( ) :"}, {"x": 227.0, "y": 157.0, "w": 128.0, "h": 32.0, "line_num": 2, "text": "Himput"}, {"x": 233.0, "y": 199.0, "w": 836.0, "h": 35.0, "line_num": 3, "text": "my_ word = input( Enter The original word: 7"}, {"x": 218.0, "y": 267.0, "w": 291.0, "h": 36.0, "line_num": 4, "text": "#Function calling"}, {"x": 244.0, "y": 318.0, "w": 710.0, "h": 31.0, "line_num": 5, "text": "reversed- word = reverse (my-word )"}, {"x": 243.0, "y": 354.0, "w": 974.0, "h": 35.0, "line_num": 6, "text": "Print ( The reversed word is (+) \" +\"\"+reversed-wordt\""}, {"x": 135.0, "y": 424.0, "w": 293.0, "h": 35.0, "line_num": 7, "text": "# Helpen- Function"}, {"x": 155.0, "y": 468.0, "w": 393.0, "h": 33.0, "line_num": 8, "text": "def severse (word) :"}, {"x": 269.0, "y": 507.0, "w": 281.0, "h": 34.0, "line_num": 9, "text": "# reversed-word"}, {"x": 296.0, "y": 552.0, "w": 282.0, "h": 28.0, "line_num": 10, "text": "mew-word = \"\""}, {"x": 262.0, "y": 584.0, "w": 258.0, "h": 33.0, "line_num": 11, "text": "A chent by chan-"}, {"x": 298.0, "y": 626.0, "w": 368.0, "h": 31.0, "line_num": 12, "text": "For- chan- in word :"}, {"x": 375.0, "y": 666.0, "w": 562.0, "h": 31.0, "line_num": 13, "text": "new-word = Char + new-word"}, {"x": 297.0, "y": 702.0, "w": 154.0, "h": 28.0, "line_num": 14, "text": "# return"}, {"x": 302.0, "y": 742.0, "w": 322.0, "h": 30.0, "line_num": 15, "text": "return new-word"}, {"x": 163.0, "y": 857.0, "w": 40.0, "h": 30.0, "line_num": 16, "text": "if"}, {"x": 249.0, "y": 862.0, "w": 174.0, "h": 34.0, "line_num": 17, "text": "name_"}, {"x": 426.0, "y": 864.0, "w": 78.0, "h": 25.0, "line_num": 18, "text": "=="}, {"x": 502.0, "y": 854.0, "w": 233.0, "h": 39.0, "line_num": 19, "text": "main1 :"}, {"x": 253.0, "y": 903.0, "w": 156.0, "h": 25.0, "line_num": 20, "text": "main ()"}], "ir_algo_name": "none", "ir_algo_output_code": "def main ( ) :\nHimput\nmy_ word = input( Enter The original word: 7\n#Function calling\nreversed- word = reverse (my-word )\nPrint ( The reversed word is (+) \" +\"\"+reversed-wordt\"\n# Helpen- Function\ndef severse (word) :\n# reversed-word\nmew-word = \"\"\nA chent by chan-\nFor- chan- in word :\nnew-word = Char + new-word\n# return\nreturn new-word\nif\nname_\n==\nmain1 :\nmain ()", "ir_algo_output_edit_distance": 132, "prompting_method": "simple-test3", "lm_post_processed_code": "def main():\n    my_word = input(\"Enter The original word: \")\n    #Function calling\n    reversed_word = reverse(my_word)\n    print(\"The reversed word is: \" + reversed_word)\n# Helper Function\n\ndef reverse(word):\n    # reversed-word\n    new_word = \"\"\n    # A char by char\n    for char in word:\n        new_word = char + new_word\n    # return\n    return new_word\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 36}, {"image_id": 2, "image_height": 1098, "image_width": 1280, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 118.0, "w": 301.0, "h": 30.0, "line_num": 1, "text": "def main ( ) :"}, {"x": 227.0, "y": 157.0, "w": 128.0, "h": 32.0, "line_num": 2, "text": "Himput"}, {"x": 233.0, "y": 199.0, "w": 836.0, "h": 35.0, "line_num": 3, "text": "my_ word = input( Enter The original word: 7"}, {"x": 218.0, "y": 267.0, "w": 291.0, "h": 36.0, "line_num": 4, "text": "#Function calling"}, {"x": 244.0, "y": 318.0, "w": 710.0, "h": 31.0, "line_num": 5, "text": "reversed- word = reverse (my-word )"}, {"x": 243.0, "y": 354.0, "w": 974.0, "h": 35.0, "line_num": 6, "text": "Print ( The reversed word is (+) \" +\"\"+reversed-wordt\""}, {"x": 135.0, "y": 424.0, "w": 293.0, "h": 35.0, "line_num": 7, "text": "# Helpen- Function"}, {"x": 155.0, "y": 468.0, "w": 393.0, "h": 33.0, "line_num": 8, "text": "def severse (word) :"}, {"x": 269.0, "y": 507.0, "w": 281.0, "h": 34.0, "line_num": 9, "text": "# reversed-word"}, {"x": 296.0, "y": 552.0, "w": 282.0, "h": 28.0, "line_num": 10, "text": "mew-word = \"\""}, {"x": 262.0, "y": 584.0, "w": 258.0, "h": 33.0, "line_num": 11, "text": "A chent by chan-"}, {"x": 298.0, "y": 626.0, "w": 368.0, "h": 31.0, "line_num": 12, "text": "For- chan- in word :"}, {"x": 375.0, "y": 666.0, "w": 562.0, "h": 31.0, "line_num": 13, "text": "new-word = Char + new-word"}, {"x": 297.0, "y": 702.0, "w": 154.0, "h": 28.0, "line_num": 14, "text": "# return"}, {"x": 302.0, "y": 742.0, "w": 322.0, "h": 30.0, "line_num": 15, "text": "return new-word"}, {"x": 163.0, "y": 857.0, "w": 40.0, "h": 30.0, "line_num": 16, "text": "if"}, {"x": 249.0, "y": 862.0, "w": 174.0, "h": 34.0, "line_num": 17, "text": "name_"}, {"x": 426.0, "y": 864.0, "w": 78.0, "h": 25.0, "line_num": 18, "text": "=="}, {"x": 502.0, "y": 854.0, "w": 233.0, "h": 39.0, "line_num": 19, "text": "main1 :"}, {"x": 253.0, "y": 903.0, "w": 156.0, "h": 25.0, "line_num": 20, "text": "main ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 47.625, "ir_algo_output_code": "def main ( ) :\n    Himput\n    my_ word = input( Enter The original word: 7\n    #Function calling\n    reversed- word = reverse (my-word )\n    Print ( The reversed word is (+) \" +\"\"+reversed-wordt\"\n# Helpen- Function\ndef severse (word) :\n    # reversed-word\n    mew-word = \"\"\n    A chent by chan-\n    For- chan- in word :\n        new-word = Char + new-word\n    # return\n    return new-word\nif\n    name_\n            ==\n                main1 :\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 155.0, "y": 118.0, "w": 301.0, "h": 30.0, "line_num": 1, "text": "def main ( ) :", "cluster_label": 1, "indentation": 0}, {"x": 227.0, "y": 157.0, "w": 128.0, "h": 32.0, "line_num": 2, "text": "Himput", "cluster_label": 0, "indentation": 1}, {"x": 233.0, "y": 199.0, "w": 836.0, "h": 35.0, "line_num": 3, "text": "my_ word = input( Enter The original word: 7", "cluster_label": 0, "indentation": 1}, {"x": 218.0, "y": 267.0, "w": 291.0, "h": 36.0, "line_num": 4, "text": "#Function calling", "cluster_label": 0, "indentation": 1}, {"x": 244.0, "y": 318.0, "w": 710.0, "h": 31.0, "line_num": 5, "text": "reversed- word = reverse (my-word )", "cluster_label": 0, "indentation": 1}, {"x": 243.0, "y": 354.0, "w": 974.0, "h": 35.0, "line_num": 6, "text": "Print ( The reversed word is (+) \" +\"\"+reversed-wordt\"", "cluster_label": 0, "indentation": 1}, {"x": 135.0, "y": 424.0, "w": 293.0, "h": 35.0, "line_num": 7, "text": "# Helpen- Function", "cluster_label": 1, "indentation": 0}, {"x": 155.0, "y": 468.0, "w": 393.0, "h": 33.0, "line_num": 8, "text": "def severse (word) :", "cluster_label": 1, "indentation": 0}, {"x": 269.0, "y": 507.0, "w": 281.0, "h": 34.0, "line_num": 9, "text": "# reversed-word", "cluster_label": 0, "indentation": 1}, {"x": 296.0, "y": 552.0, "w": 282.0, "h": 28.0, "line_num": 10, "text": "mew-word = \"\"", "cluster_label": 0, "indentation": 1}, {"x": 262.0, "y": 584.0, "w": 258.0, "h": 33.0, "line_num": 11, "text": "A chent by chan-", "cluster_label": 0, "indentation": 1}, {"x": 298.0, "y": 626.0, "w": 368.0, "h": 31.0, "line_num": 12, "text": "For- chan- in word :", "cluster_label": 0, "indentation": 1}, {"x": 375.0, "y": 666.0, "w": 562.0, "h": 31.0, "line_num": 13, "text": "new-word = Char + new-word", "cluster_label": 4, "indentation": 2}, {"x": 297.0, "y": 702.0, "w": 154.0, "h": 28.0, "line_num": 14, "text": "# return", "cluster_label": 0, "indentation": 1}, {"x": 302.0, "y": 742.0, "w": 322.0, "h": 30.0, "line_num": 15, "text": "return new-word", "cluster_label": 0, "indentation": 1}, {"x": 163.0, "y": 857.0, "w": 40.0, "h": 30.0, "line_num": 16, "text": "if", "cluster_label": 1, "indentation": 0}, {"x": 249.0, "y": 862.0, "w": 174.0, "h": 34.0, "line_num": 17, "text": "name_", "cluster_label": 0, "indentation": 1}, {"x": 426.0, "y": 864.0, "w": 78.0, "h": 25.0, "line_num": 18, "text": "==", "cluster_label": 3, "indentation": 3}, {"x": 502.0, "y": 854.0, "w": 233.0, "h": 39.0, "line_num": 19, "text": "main1 :", "cluster_label": 2, "indentation": 4}, {"x": 253.0, "y": 903.0, "w": 156.0, "h": 25.0, "line_num": 20, "text": "main ()", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 99, "prompting_method": "none", "lm_post_processed_code": "def main ( ) :\n    Himput\n    my_ word = input( Enter The original word: 7\n    #Function calling\n    reversed- word = reverse (my-word )\n    Print ( The reversed word is (+) \" +\"\"+reversed-wordt\"\n# Helpen- Function\ndef severse (word) :\n    # reversed-word\n    mew-word = \"\"\n    A chent by chan-\n    For- chan- in word :\n        new-word = Char + new-word\n    # return\n    return new-word\nif\n    name_\n            ==\n                main1 :\n    main ()\n", "lm_post_processed_edit_distance": 99}, {"image_id": 2, "image_height": 1098, "image_width": 1280, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 118.0, "w": 301.0, "h": 30.0, "line_num": 1, "text": "def main ( ) :"}, {"x": 227.0, "y": 157.0, "w": 128.0, "h": 32.0, "line_num": 2, "text": "Himput"}, {"x": 233.0, "y": 199.0, "w": 836.0, "h": 35.0, "line_num": 3, "text": "my_ word = input( Enter The original word: 7"}, {"x": 218.0, "y": 267.0, "w": 291.0, "h": 36.0, "line_num": 4, "text": "#Function calling"}, {"x": 244.0, "y": 318.0, "w": 710.0, "h": 31.0, "line_num": 5, "text": "reversed- word = reverse (my-word )"}, {"x": 243.0, "y": 354.0, "w": 974.0, "h": 35.0, "line_num": 6, "text": "Print ( The reversed word is (+) \" +\"\"+reversed-wordt\""}, {"x": 135.0, "y": 424.0, "w": 293.0, "h": 35.0, "line_num": 7, "text": "# Helpen- Function"}, {"x": 155.0, "y": 468.0, "w": 393.0, "h": 33.0, "line_num": 8, "text": "def severse (word) :"}, {"x": 269.0, "y": 507.0, "w": 281.0, "h": 34.0, "line_num": 9, "text": "# reversed-word"}, {"x": 296.0, "y": 552.0, "w": 282.0, "h": 28.0, "line_num": 10, "text": "mew-word = \"\""}, {"x": 262.0, "y": 584.0, "w": 258.0, "h": 33.0, "line_num": 11, "text": "A chent by chan-"}, {"x": 298.0, "y": 626.0, "w": 368.0, "h": 31.0, "line_num": 12, "text": "For- chan- in word :"}, {"x": 375.0, "y": 666.0, "w": 562.0, "h": 31.0, "line_num": 13, "text": "new-word = Char + new-word"}, {"x": 297.0, "y": 702.0, "w": 154.0, "h": 28.0, "line_num": 14, "text": "# return"}, {"x": 302.0, "y": 742.0, "w": 322.0, "h": 30.0, "line_num": 15, "text": "return new-word"}, {"x": 163.0, "y": 857.0, "w": 40.0, "h": 30.0, "line_num": 16, "text": "if"}, {"x": 249.0, "y": 862.0, "w": 174.0, "h": 34.0, "line_num": 17, "text": "name_"}, {"x": 426.0, "y": 864.0, "w": 78.0, "h": 25.0, "line_num": 18, "text": "=="}, {"x": 502.0, "y": 854.0, "w": 233.0, "h": 39.0, "line_num": 19, "text": "main1 :"}, {"x": 253.0, "y": 903.0, "w": 156.0, "h": 25.0, "line_num": 20, "text": "main ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 47.625, "ir_algo_output_code": "def main ( ) :\n    Himput\n    my_ word = input( Enter The original word: 7\n    #Function calling\n    reversed- word = reverse (my-word )\n    Print ( The reversed word is (+) \" +\"\"+reversed-wordt\"\n# Helpen- Function\ndef severse (word) :\n    # reversed-word\n    mew-word = \"\"\n    A chent by chan-\n    For- chan- in word :\n        new-word = Char + new-word\n    # return\n    return new-word\nif\n    name_\n            ==\n                main1 :\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 155.0, "y": 118.0, "w": 301.0, "h": 30.0, "line_num": 1, "text": "def main ( ) :", "cluster_label": 1, "indentation": 0}, {"x": 227.0, "y": 157.0, "w": 128.0, "h": 32.0, "line_num": 2, "text": "Himput", "cluster_label": 0, "indentation": 1}, {"x": 233.0, "y": 199.0, "w": 836.0, "h": 35.0, "line_num": 3, "text": "my_ word = input( Enter The original word: 7", "cluster_label": 0, "indentation": 1}, {"x": 218.0, "y": 267.0, "w": 291.0, "h": 36.0, "line_num": 4, "text": "#Function calling", "cluster_label": 0, "indentation": 1}, {"x": 244.0, "y": 318.0, "w": 710.0, "h": 31.0, "line_num": 5, "text": "reversed- word = reverse (my-word )", "cluster_label": 0, "indentation": 1}, {"x": 243.0, "y": 354.0, "w": 974.0, "h": 35.0, "line_num": 6, "text": "Print ( The reversed word is (+) \" +\"\"+reversed-wordt\"", "cluster_label": 0, "indentation": 1}, {"x": 135.0, "y": 424.0, "w": 293.0, "h": 35.0, "line_num": 7, "text": "# Helpen- Function", "cluster_label": 1, "indentation": 0}, {"x": 155.0, "y": 468.0, "w": 393.0, "h": 33.0, "line_num": 8, "text": "def severse (word) :", "cluster_label": 1, "indentation": 0}, {"x": 269.0, "y": 507.0, "w": 281.0, "h": 34.0, "line_num": 9, "text": "# reversed-word", "cluster_label": 0, "indentation": 1}, {"x": 296.0, "y": 552.0, "w": 282.0, "h": 28.0, "line_num": 10, "text": "mew-word = \"\"", "cluster_label": 0, "indentation": 1}, {"x": 262.0, "y": 584.0, "w": 258.0, "h": 33.0, "line_num": 11, "text": "A chent by chan-", "cluster_label": 0, "indentation": 1}, {"x": 298.0, "y": 626.0, "w": 368.0, "h": 31.0, "line_num": 12, "text": "For- chan- in word :", "cluster_label": 0, "indentation": 1}, {"x": 375.0, "y": 666.0, "w": 562.0, "h": 31.0, "line_num": 13, "text": "new-word = Char + new-word", "cluster_label": 4, "indentation": 2}, {"x": 297.0, "y": 702.0, "w": 154.0, "h": 28.0, "line_num": 14, "text": "# return", "cluster_label": 0, "indentation": 1}, {"x": 302.0, "y": 742.0, "w": 322.0, "h": 30.0, "line_num": 15, "text": "return new-word", "cluster_label": 0, "indentation": 1}, {"x": 163.0, "y": 857.0, "w": 40.0, "h": 30.0, "line_num": 16, "text": "if", "cluster_label": 1, "indentation": 0}, {"x": 249.0, "y": 862.0, "w": 174.0, "h": 34.0, "line_num": 17, "text": "name_", "cluster_label": 0, "indentation": 1}, {"x": 426.0, "y": 864.0, "w": 78.0, "h": 25.0, "line_num": 18, "text": "==", "cluster_label": 3, "indentation": 3}, {"x": 502.0, "y": 854.0, "w": 233.0, "h": 39.0, "line_num": 19, "text": "main1 :", "cluster_label": 2, "indentation": 4}, {"x": 253.0, "y": 903.0, "w": 156.0, "h": 25.0, "line_num": 20, "text": "main ()", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 99, "prompting_method": "cot-test1", "lm_post_processed_code": "def main ( ) :\n    # Input\n    my_word = input(\"Enter The original word: \")\n    # Function calling\n    reversed_word = reverse(my_word)\n    print(\"The reversed word is: \" + reversed_word)\n# Helper Function\n\ndef reverse(word) :\n    # reversed word\n    new_word = \"\"\n    # char by char\n    for char in word :\n        new_word = char + new_word\n    # return\n    return new_word\nif __name__ == \"main\" :\n    main ()\n", "lm_post_processed_edit_distance": 34}, {"image_id": 2, "image_height": 1098, "image_width": 1280, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 118.0, "w": 301.0, "h": 30.0, "line_num": 1, "text": "def main ( ) :"}, {"x": 227.0, "y": 157.0, "w": 128.0, "h": 32.0, "line_num": 2, "text": "Himput"}, {"x": 233.0, "y": 199.0, "w": 836.0, "h": 35.0, "line_num": 3, "text": "my_ word = input( Enter The original word: 7"}, {"x": 218.0, "y": 267.0, "w": 291.0, "h": 36.0, "line_num": 4, "text": "#Function calling"}, {"x": 244.0, "y": 318.0, "w": 710.0, "h": 31.0, "line_num": 5, "text": "reversed- word = reverse (my-word )"}, {"x": 243.0, "y": 354.0, "w": 974.0, "h": 35.0, "line_num": 6, "text": "Print ( The reversed word is (+) \" +\"\"+reversed-wordt\""}, {"x": 135.0, "y": 424.0, "w": 293.0, "h": 35.0, "line_num": 7, "text": "# Helpen- Function"}, {"x": 155.0, "y": 468.0, "w": 393.0, "h": 33.0, "line_num": 8, "text": "def severse (word) :"}, {"x": 269.0, "y": 507.0, "w": 281.0, "h": 34.0, "line_num": 9, "text": "# reversed-word"}, {"x": 296.0, "y": 552.0, "w": 282.0, "h": 28.0, "line_num": 10, "text": "mew-word = \"\""}, {"x": 262.0, "y": 584.0, "w": 258.0, "h": 33.0, "line_num": 11, "text": "A chent by chan-"}, {"x": 298.0, "y": 626.0, "w": 368.0, "h": 31.0, "line_num": 12, "text": "For- chan- in word :"}, {"x": 375.0, "y": 666.0, "w": 562.0, "h": 31.0, "line_num": 13, "text": "new-word = Char + new-word"}, {"x": 297.0, "y": 702.0, "w": 154.0, "h": 28.0, "line_num": 14, "text": "# return"}, {"x": 302.0, "y": 742.0, "w": 322.0, "h": 30.0, "line_num": 15, "text": "return new-word"}, {"x": 163.0, "y": 857.0, "w": 40.0, "h": 30.0, "line_num": 16, "text": "if"}, {"x": 249.0, "y": 862.0, "w": 174.0, "h": 34.0, "line_num": 17, "text": "name_"}, {"x": 426.0, "y": 864.0, "w": 78.0, "h": 25.0, "line_num": 18, "text": "=="}, {"x": 502.0, "y": 854.0, "w": 233.0, "h": 39.0, "line_num": 19, "text": "main1 :"}, {"x": 253.0, "y": 903.0, "w": 156.0, "h": 25.0, "line_num": 20, "text": "main ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 47.625, "ir_algo_output_code": "def main ( ) :\n    Himput\n    my_ word = input( Enter The original word: 7\n    #Function calling\n    reversed- word = reverse (my-word )\n    Print ( The reversed word is (+) \" +\"\"+reversed-wordt\"\n# Helpen- Function\ndef severse (word) :\n    # reversed-word\n    mew-word = \"\"\n    A chent by chan-\n    For- chan- in word :\n        new-word = Char + new-word\n    # return\n    return new-word\nif\n    name_\n            ==\n                main1 :\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 155.0, "y": 118.0, "w": 301.0, "h": 30.0, "line_num": 1, "text": "def main ( ) :", "cluster_label": 1, "indentation": 0}, {"x": 227.0, "y": 157.0, "w": 128.0, "h": 32.0, "line_num": 2, "text": "Himput", "cluster_label": 0, "indentation": 1}, {"x": 233.0, "y": 199.0, "w": 836.0, "h": 35.0, "line_num": 3, "text": "my_ word = input( Enter The original word: 7", "cluster_label": 0, "indentation": 1}, {"x": 218.0, "y": 267.0, "w": 291.0, "h": 36.0, "line_num": 4, "text": "#Function calling", "cluster_label": 0, "indentation": 1}, {"x": 244.0, "y": 318.0, "w": 710.0, "h": 31.0, "line_num": 5, "text": "reversed- word = reverse (my-word )", "cluster_label": 0, "indentation": 1}, {"x": 243.0, "y": 354.0, "w": 974.0, "h": 35.0, "line_num": 6, "text": "Print ( The reversed word is (+) \" +\"\"+reversed-wordt\"", "cluster_label": 0, "indentation": 1}, {"x": 135.0, "y": 424.0, "w": 293.0, "h": 35.0, "line_num": 7, "text": "# Helpen- Function", "cluster_label": 1, "indentation": 0}, {"x": 155.0, "y": 468.0, "w": 393.0, "h": 33.0, "line_num": 8, "text": "def severse (word) :", "cluster_label": 1, "indentation": 0}, {"x": 269.0, "y": 507.0, "w": 281.0, "h": 34.0, "line_num": 9, "text": "# reversed-word", "cluster_label": 0, "indentation": 1}, {"x": 296.0, "y": 552.0, "w": 282.0, "h": 28.0, "line_num": 10, "text": "mew-word = \"\"", "cluster_label": 0, "indentation": 1}, {"x": 262.0, "y": 584.0, "w": 258.0, "h": 33.0, "line_num": 11, "text": "A chent by chan-", "cluster_label": 0, "indentation": 1}, {"x": 298.0, "y": 626.0, "w": 368.0, "h": 31.0, "line_num": 12, "text": "For- chan- in word :", "cluster_label": 0, "indentation": 1}, {"x": 375.0, "y": 666.0, "w": 562.0, "h": 31.0, "line_num": 13, "text": "new-word = Char + new-word", "cluster_label": 4, "indentation": 2}, {"x": 297.0, "y": 702.0, "w": 154.0, "h": 28.0, "line_num": 14, "text": "# return", "cluster_label": 0, "indentation": 1}, {"x": 302.0, "y": 742.0, "w": 322.0, "h": 30.0, "line_num": 15, "text": "return new-word", "cluster_label": 0, "indentation": 1}, {"x": 163.0, "y": 857.0, "w": 40.0, "h": 30.0, "line_num": 16, "text": "if", "cluster_label": 1, "indentation": 0}, {"x": 249.0, "y": 862.0, "w": 174.0, "h": 34.0, "line_num": 17, "text": "name_", "cluster_label": 0, "indentation": 1}, {"x": 426.0, "y": 864.0, "w": 78.0, "h": 25.0, "line_num": 18, "text": "==", "cluster_label": 3, "indentation": 3}, {"x": 502.0, "y": 854.0, "w": 233.0, "h": 39.0, "line_num": 19, "text": "main1 :", "cluster_label": 2, "indentation": 4}, {"x": 253.0, "y": 903.0, "w": 156.0, "h": 25.0, "line_num": 20, "text": "main ()", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 99, "prompting_method": "cot-test5", "lm_post_processed_code": "def main ( ) :\n    # Input\n    my_word = input(\"Enter The original word: \")\n    # Function calling\n    reversed_word = reverse(my_word)\n    print(\"The reversed word is: \" + reversed_word)\n# Helper Function\n\ndef reverse(word) :\n    # reversed word\n    new_word = \"\"\n    # char by char\n    for char in word :\n        new_word = char + new_word\n    # return\n    return new_word\nif __name__ == \"main\" :\n    main ()\n", "lm_post_processed_edit_distance": 34}, {"image_id": 2, "image_height": 1098, "image_width": 1280, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 118.0, "w": 301.0, "h": 30.0, "line_num": 1, "text": "def main ( ) :"}, {"x": 227.0, "y": 157.0, "w": 128.0, "h": 32.0, "line_num": 2, "text": "Himput"}, {"x": 233.0, "y": 199.0, "w": 836.0, "h": 35.0, "line_num": 3, "text": "my_ word = input( Enter The original word: 7"}, {"x": 218.0, "y": 267.0, "w": 291.0, "h": 36.0, "line_num": 4, "text": "#Function calling"}, {"x": 244.0, "y": 318.0, "w": 710.0, "h": 31.0, "line_num": 5, "text": "reversed- word = reverse (my-word )"}, {"x": 243.0, "y": 354.0, "w": 974.0, "h": 35.0, "line_num": 6, "text": "Print ( The reversed word is (+) \" +\"\"+reversed-wordt\""}, {"x": 135.0, "y": 424.0, "w": 293.0, "h": 35.0, "line_num": 7, "text": "# Helpen- Function"}, {"x": 155.0, "y": 468.0, "w": 393.0, "h": 33.0, "line_num": 8, "text": "def severse (word) :"}, {"x": 269.0, "y": 507.0, "w": 281.0, "h": 34.0, "line_num": 9, "text": "# reversed-word"}, {"x": 296.0, "y": 552.0, "w": 282.0, "h": 28.0, "line_num": 10, "text": "mew-word = \"\""}, {"x": 262.0, "y": 584.0, "w": 258.0, "h": 33.0, "line_num": 11, "text": "A chent by chan-"}, {"x": 298.0, "y": 626.0, "w": 368.0, "h": 31.0, "line_num": 12, "text": "For- chan- in word :"}, {"x": 375.0, "y": 666.0, "w": 562.0, "h": 31.0, "line_num": 13, "text": "new-word = Char + new-word"}, {"x": 297.0, "y": 702.0, "w": 154.0, "h": 28.0, "line_num": 14, "text": "# return"}, {"x": 302.0, "y": 742.0, "w": 322.0, "h": 30.0, "line_num": 15, "text": "return new-word"}, {"x": 163.0, "y": 857.0, "w": 40.0, "h": 30.0, "line_num": 16, "text": "if"}, {"x": 249.0, "y": 862.0, "w": 174.0, "h": 34.0, "line_num": 17, "text": "name_"}, {"x": 426.0, "y": 864.0, "w": 78.0, "h": 25.0, "line_num": 18, "text": "=="}, {"x": 502.0, "y": 854.0, "w": 233.0, "h": 39.0, "line_num": 19, "text": "main1 :"}, {"x": 253.0, "y": 903.0, "w": 156.0, "h": 25.0, "line_num": 20, "text": "main ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 47.625, "ir_algo_output_code": "def main ( ) :\n    Himput\n    my_ word = input( Enter The original word: 7\n    #Function calling\n    reversed- word = reverse (my-word )\n    Print ( The reversed word is (+) \" +\"\"+reversed-wordt\"\n# Helpen- Function\ndef severse (word) :\n    # reversed-word\n    mew-word = \"\"\n    A chent by chan-\n    For- chan- in word :\n        new-word = Char + new-word\n    # return\n    return new-word\nif\n    name_\n            ==\n                main1 :\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 155.0, "y": 118.0, "w": 301.0, "h": 30.0, "line_num": 1, "text": "def main ( ) :", "cluster_label": 1, "indentation": 0}, {"x": 227.0, "y": 157.0, "w": 128.0, "h": 32.0, "line_num": 2, "text": "Himput", "cluster_label": 0, "indentation": 1}, {"x": 233.0, "y": 199.0, "w": 836.0, "h": 35.0, "line_num": 3, "text": "my_ word = input( Enter The original word: 7", "cluster_label": 0, "indentation": 1}, {"x": 218.0, "y": 267.0, "w": 291.0, "h": 36.0, "line_num": 4, "text": "#Function calling", "cluster_label": 0, "indentation": 1}, {"x": 244.0, "y": 318.0, "w": 710.0, "h": 31.0, "line_num": 5, "text": "reversed- word = reverse (my-word )", "cluster_label": 0, "indentation": 1}, {"x": 243.0, "y": 354.0, "w": 974.0, "h": 35.0, "line_num": 6, "text": "Print ( The reversed word is (+) \" +\"\"+reversed-wordt\"", "cluster_label": 0, "indentation": 1}, {"x": 135.0, "y": 424.0, "w": 293.0, "h": 35.0, "line_num": 7, "text": "# Helpen- Function", "cluster_label": 1, "indentation": 0}, {"x": 155.0, "y": 468.0, "w": 393.0, "h": 33.0, "line_num": 8, "text": "def severse (word) :", "cluster_label": 1, "indentation": 0}, {"x": 269.0, "y": 507.0, "w": 281.0, "h": 34.0, "line_num": 9, "text": "# reversed-word", "cluster_label": 0, "indentation": 1}, {"x": 296.0, "y": 552.0, "w": 282.0, "h": 28.0, "line_num": 10, "text": "mew-word = \"\"", "cluster_label": 0, "indentation": 1}, {"x": 262.0, "y": 584.0, "w": 258.0, "h": 33.0, "line_num": 11, "text": "A chent by chan-", "cluster_label": 0, "indentation": 1}, {"x": 298.0, "y": 626.0, "w": 368.0, "h": 31.0, "line_num": 12, "text": "For- chan- in word :", "cluster_label": 0, "indentation": 1}, {"x": 375.0, "y": 666.0, "w": 562.0, "h": 31.0, "line_num": 13, "text": "new-word = Char + new-word", "cluster_label": 4, "indentation": 2}, {"x": 297.0, "y": 702.0, "w": 154.0, "h": 28.0, "line_num": 14, "text": "# return", "cluster_label": 0, "indentation": 1}, {"x": 302.0, "y": 742.0, "w": 322.0, "h": 30.0, "line_num": 15, "text": "return new-word", "cluster_label": 0, "indentation": 1}, {"x": 163.0, "y": 857.0, "w": 40.0, "h": 30.0, "line_num": 16, "text": "if", "cluster_label": 1, "indentation": 0}, {"x": 249.0, "y": 862.0, "w": 174.0, "h": 34.0, "line_num": 17, "text": "name_", "cluster_label": 0, "indentation": 1}, {"x": 426.0, "y": 864.0, "w": 78.0, "h": 25.0, "line_num": 18, "text": "==", "cluster_label": 3, "indentation": 3}, {"x": 502.0, "y": 854.0, "w": 233.0, "h": 39.0, "line_num": 19, "text": "main1 :", "cluster_label": 2, "indentation": 4}, {"x": 253.0, "y": 903.0, "w": 156.0, "h": 25.0, "line_num": 20, "text": "main ()", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 99, "prompting_method": "simple-test2", "lm_post_processed_code": "def main():\n    my_word = input(\"Enter The original word: \")\n    #Function calling\n    reversed_word = reverse(my_word)\n    print(\"The reversed word is: \" + reversed_word)\n# Helper Function\n\ndef reverse(word):\n    # reversed-word\n    new_word = \"\"\n    # char by char\n    for char in word:\n        new_word = char + new_word\n    # return\n    return new_word\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 34}, {"image_id": 2, "image_height": 1098, "image_width": 1280, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 118.0, "w": 301.0, "h": 30.0, "line_num": 1, "text": "def main ( ) :"}, {"x": 227.0, "y": 157.0, "w": 128.0, "h": 32.0, "line_num": 2, "text": "Himput"}, {"x": 233.0, "y": 199.0, "w": 836.0, "h": 35.0, "line_num": 3, "text": "my_ word = input( Enter The original word: 7"}, {"x": 218.0, "y": 267.0, "w": 291.0, "h": 36.0, "line_num": 4, "text": "#Function calling"}, {"x": 244.0, "y": 318.0, "w": 710.0, "h": 31.0, "line_num": 5, "text": "reversed- word = reverse (my-word )"}, {"x": 243.0, "y": 354.0, "w": 974.0, "h": 35.0, "line_num": 6, "text": "Print ( The reversed word is (+) \" +\"\"+reversed-wordt\""}, {"x": 135.0, "y": 424.0, "w": 293.0, "h": 35.0, "line_num": 7, "text": "# Helpen- Function"}, {"x": 155.0, "y": 468.0, "w": 393.0, "h": 33.0, "line_num": 8, "text": "def severse (word) :"}, {"x": 269.0, "y": 507.0, "w": 281.0, "h": 34.0, "line_num": 9, "text": "# reversed-word"}, {"x": 296.0, "y": 552.0, "w": 282.0, "h": 28.0, "line_num": 10, "text": "mew-word = \"\""}, {"x": 262.0, "y": 584.0, "w": 258.0, "h": 33.0, "line_num": 11, "text": "A chent by chan-"}, {"x": 298.0, "y": 626.0, "w": 368.0, "h": 31.0, "line_num": 12, "text": "For- chan- in word :"}, {"x": 375.0, "y": 666.0, "w": 562.0, "h": 31.0, "line_num": 13, "text": "new-word = Char + new-word"}, {"x": 297.0, "y": 702.0, "w": 154.0, "h": 28.0, "line_num": 14, "text": "# return"}, {"x": 302.0, "y": 742.0, "w": 322.0, "h": 30.0, "line_num": 15, "text": "return new-word"}, {"x": 163.0, "y": 857.0, "w": 40.0, "h": 30.0, "line_num": 16, "text": "if"}, {"x": 249.0, "y": 862.0, "w": 174.0, "h": 34.0, "line_num": 17, "text": "name_"}, {"x": 426.0, "y": 864.0, "w": 78.0, "h": 25.0, "line_num": 18, "text": "=="}, {"x": 502.0, "y": 854.0, "w": 233.0, "h": 39.0, "line_num": 19, "text": "main1 :"}, {"x": 253.0, "y": 903.0, "w": 156.0, "h": 25.0, "line_num": 20, "text": "main ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 47.625, "ir_algo_output_code": "def main ( ) :\n    Himput\n    my_ word = input( Enter The original word: 7\n    #Function calling\n    reversed- word = reverse (my-word )\n    Print ( The reversed word is (+) \" +\"\"+reversed-wordt\"\n# Helpen- Function\ndef severse (word) :\n    # reversed-word\n    mew-word = \"\"\n    A chent by chan-\n    For- chan- in word :\n        new-word = Char + new-word\n    # return\n    return new-word\nif\n    name_\n            ==\n                main1 :\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 155.0, "y": 118.0, "w": 301.0, "h": 30.0, "line_num": 1, "text": "def main ( ) :", "cluster_label": 1, "indentation": 0}, {"x": 227.0, "y": 157.0, "w": 128.0, "h": 32.0, "line_num": 2, "text": "Himput", "cluster_label": 0, "indentation": 1}, {"x": 233.0, "y": 199.0, "w": 836.0, "h": 35.0, "line_num": 3, "text": "my_ word = input( Enter The original word: 7", "cluster_label": 0, "indentation": 1}, {"x": 218.0, "y": 267.0, "w": 291.0, "h": 36.0, "line_num": 4, "text": "#Function calling", "cluster_label": 0, "indentation": 1}, {"x": 244.0, "y": 318.0, "w": 710.0, "h": 31.0, "line_num": 5, "text": "reversed- word = reverse (my-word )", "cluster_label": 0, "indentation": 1}, {"x": 243.0, "y": 354.0, "w": 974.0, "h": 35.0, "line_num": 6, "text": "Print ( The reversed word is (+) \" +\"\"+reversed-wordt\"", "cluster_label": 0, "indentation": 1}, {"x": 135.0, "y": 424.0, "w": 293.0, "h": 35.0, "line_num": 7, "text": "# Helpen- Function", "cluster_label": 1, "indentation": 0}, {"x": 155.0, "y": 468.0, "w": 393.0, "h": 33.0, "line_num": 8, "text": "def severse (word) :", "cluster_label": 1, "indentation": 0}, {"x": 269.0, "y": 507.0, "w": 281.0, "h": 34.0, "line_num": 9, "text": "# reversed-word", "cluster_label": 0, "indentation": 1}, {"x": 296.0, "y": 552.0, "w": 282.0, "h": 28.0, "line_num": 10, "text": "mew-word = \"\"", "cluster_label": 0, "indentation": 1}, {"x": 262.0, "y": 584.0, "w": 258.0, "h": 33.0, "line_num": 11, "text": "A chent by chan-", "cluster_label": 0, "indentation": 1}, {"x": 298.0, "y": 626.0, "w": 368.0, "h": 31.0, "line_num": 12, "text": "For- chan- in word :", "cluster_label": 0, "indentation": 1}, {"x": 375.0, "y": 666.0, "w": 562.0, "h": 31.0, "line_num": 13, "text": "new-word = Char + new-word", "cluster_label": 4, "indentation": 2}, {"x": 297.0, "y": 702.0, "w": 154.0, "h": 28.0, "line_num": 14, "text": "# return", "cluster_label": 0, "indentation": 1}, {"x": 302.0, "y": 742.0, "w": 322.0, "h": 30.0, "line_num": 15, "text": "return new-word", "cluster_label": 0, "indentation": 1}, {"x": 163.0, "y": 857.0, "w": 40.0, "h": 30.0, "line_num": 16, "text": "if", "cluster_label": 1, "indentation": 0}, {"x": 249.0, "y": 862.0, "w": 174.0, "h": 34.0, "line_num": 17, "text": "name_", "cluster_label": 0, "indentation": 1}, {"x": 426.0, "y": 864.0, "w": 78.0, "h": 25.0, "line_num": 18, "text": "==", "cluster_label": 3, "indentation": 3}, {"x": 502.0, "y": 854.0, "w": 233.0, "h": 39.0, "line_num": 19, "text": "main1 :", "cluster_label": 2, "indentation": 4}, {"x": 253.0, "y": 903.0, "w": 156.0, "h": 25.0, "line_num": 20, "text": "main ()", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 99, "prompting_method": "simple-test3", "lm_post_processed_code": "def main():\n    # Input\n    my_word = input(\"Enter The original word: \")\n    # Function calling\n    reversed_word = reverse(my_word)\n    print(\"The reversed word is: \" + reversed_word)\n# Helper Function\n\ndef reverse(word):\n    # reversed-word\n    new_word = \"\"\n    # A char by char\n    for char in word:\n        new_word = char + new_word\n    # return\n    return new_word\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 24}, {"image_id": 2, "image_height": 1098, "image_width": 1280, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 118.0, "w": 301.0, "h": 30.0, "line_num": 1, "text": "def main ( ) :"}, {"x": 227.0, "y": 157.0, "w": 128.0, "h": 32.0, "line_num": 2, "text": "Himput"}, {"x": 233.0, "y": 199.0, "w": 836.0, "h": 35.0, "line_num": 3, "text": "my_ word = input( Enter The original word: 7"}, {"x": 218.0, "y": 267.0, "w": 291.0, "h": 36.0, "line_num": 4, "text": "#Function calling"}, {"x": 244.0, "y": 318.0, "w": 710.0, "h": 31.0, "line_num": 5, "text": "reversed- word = reverse (my-word )"}, {"x": 243.0, "y": 354.0, "w": 974.0, "h": 35.0, "line_num": 6, "text": "Print ( The reversed word is (+) \" +\"\"+reversed-wordt\""}, {"x": 135.0, "y": 424.0, "w": 293.0, "h": 35.0, "line_num": 7, "text": "# Helpen- Function"}, {"x": 155.0, "y": 468.0, "w": 393.0, "h": 33.0, "line_num": 8, "text": "def severse (word) :"}, {"x": 269.0, "y": 507.0, "w": 281.0, "h": 34.0, "line_num": 9, "text": "# reversed-word"}, {"x": 296.0, "y": 552.0, "w": 282.0, "h": 28.0, "line_num": 10, "text": "mew-word = \"\""}, {"x": 262.0, "y": 584.0, "w": 258.0, "h": 33.0, "line_num": 11, "text": "A chent by chan-"}, {"x": 298.0, "y": 626.0, "w": 368.0, "h": 31.0, "line_num": 12, "text": "For- chan- in word :"}, {"x": 375.0, "y": 666.0, "w": 562.0, "h": 31.0, "line_num": 13, "text": "new-word = Char + new-word"}, {"x": 297.0, "y": 702.0, "w": 154.0, "h": 28.0, "line_num": 14, "text": "# return"}, {"x": 302.0, "y": 742.0, "w": 322.0, "h": 30.0, "line_num": 15, "text": "return new-word"}, {"x": 163.0, "y": 857.0, "w": 40.0, "h": 30.0, "line_num": 16, "text": "if"}, {"x": 249.0, "y": 862.0, "w": 174.0, "h": 34.0, "line_num": 17, "text": "name_"}, {"x": 426.0, "y": 864.0, "w": 78.0, "h": 25.0, "line_num": 18, "text": "=="}, {"x": 502.0, "y": 854.0, "w": 233.0, "h": 39.0, "line_num": 19, "text": "main1 :"}, {"x": 253.0, "y": 903.0, "w": 156.0, "h": 25.0, "line_num": 20, "text": "main ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main ( ) :\n    Himput\n    my_ word = input( Enter The original word: 7\n    #Function calling\n    reversed- word = reverse (my-word )\n    Print ( The reversed word is (+) \" +\"\"+reversed-wordt\"\n# Helpen- Function\ndef severse (word) :\n    # reversed-word\n    mew-word = \"\"\n    A chent by chan-\n        For- chan- in word :\n            new-word = Char + new-word\n        # return\n        return new-word\nif\n    name_\n        ==\n            main1 :\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 155.0, "y": 118.0, "w": 301.0, "h": 30.0, "line_num": 1, "text": "def main ( ) :", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 227.0, "y": 157.0, "w": 128.0, "h": 32.0, "line_num": 2, "text": "Himput", "delta": 72.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 233.0, "y": 199.0, "w": 836.0, "h": 35.0, "line_num": 3, "text": "my_ word = input( Enter The original word: 7", "delta": 6.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 218.0, "y": 267.0, "w": 291.0, "h": 36.0, "line_num": 4, "text": "#Function calling", "delta": -15.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 244.0, "y": 318.0, "w": 710.0, "h": 31.0, "line_num": 5, "text": "reversed- word = reverse (my-word )", "delta": 26.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 243.0, "y": 354.0, "w": 974.0, "h": 35.0, "line_num": 6, "text": "Print ( The reversed word is (+) \" +\"\"+reversed-wordt\"", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 135.0, "y": 424.0, "w": 293.0, "h": 35.0, "line_num": 7, "text": "# Helpen- Function", "delta": -108.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 155.0, "y": 468.0, "w": 393.0, "h": 33.0, "line_num": 8, "text": "def severse (word) :", "delta": 20.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 269.0, "y": 507.0, "w": 281.0, "h": 34.0, "line_num": 9, "text": "# reversed-word", "delta": 114.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 296.0, "y": 552.0, "w": 282.0, "h": 28.0, "line_num": 10, "text": "mew-word = \"\"", "delta": 27.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 262.0, "y": 584.0, "w": 258.0, "h": 33.0, "line_num": 11, "text": "A chent by chan-", "delta": -34.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 298.0, "y": 626.0, "w": 368.0, "h": 31.0, "line_num": 12, "text": "For- chan- in word :", "delta": 36.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 375.0, "y": 666.0, "w": 562.0, "h": 31.0, "line_num": 13, "text": "new-word = Char + new-word", "delta": 77.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 297.0, "y": 702.0, "w": 154.0, "h": 28.0, "line_num": 14, "text": "# return", "delta": -78.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 302.0, "y": 742.0, "w": 322.0, "h": 30.0, "line_num": 15, "text": "return new-word", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 163.0, "y": 857.0, "w": 40.0, "h": 30.0, "line_num": 16, "text": "if", "delta": -139.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 249.0, "y": 862.0, "w": 174.0, "h": 34.0, "line_num": 17, "text": "name_", "delta": 86.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 426.0, "y": 864.0, "w": 78.0, "h": 25.0, "line_num": 18, "text": "==", "delta": 177.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 502.0, "y": 854.0, "w": 233.0, "h": 39.0, "line_num": 19, "text": "main1 :", "delta": 76.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 253.0, "y": 903.0, "w": 156.0, "h": 25.0, "line_num": 20, "text": "main ()", "delta": -249.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 107, "prompting_method": "none", "lm_post_processed_code": "def main ( ) :\n    Himput\n    my_ word = input( Enter The original word: 7\n    #Function calling\n    reversed- word = reverse (my-word )\n    Print ( The reversed word is (+) \" +\"\"+reversed-wordt\"\n# Helpen- Function\ndef severse (word) :\n    # reversed-word\n    mew-word = \"\"\n    A chent by chan-\n        For- chan- in word :\n            new-word = Char + new-word\n        # return\n        return new-word\nif\n    name_\n        ==\n            main1 :\n    main ()\n", "lm_post_processed_edit_distance": 107}, {"image_id": 2, "image_height": 1098, "image_width": 1280, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 118.0, "w": 301.0, "h": 30.0, "line_num": 1, "text": "def main ( ) :"}, {"x": 227.0, "y": 157.0, "w": 128.0, "h": 32.0, "line_num": 2, "text": "Himput"}, {"x": 233.0, "y": 199.0, "w": 836.0, "h": 35.0, "line_num": 3, "text": "my_ word = input( Enter The original word: 7"}, {"x": 218.0, "y": 267.0, "w": 291.0, "h": 36.0, "line_num": 4, "text": "#Function calling"}, {"x": 244.0, "y": 318.0, "w": 710.0, "h": 31.0, "line_num": 5, "text": "reversed- word = reverse (my-word )"}, {"x": 243.0, "y": 354.0, "w": 974.0, "h": 35.0, "line_num": 6, "text": "Print ( The reversed word is (+) \" +\"\"+reversed-wordt\""}, {"x": 135.0, "y": 424.0, "w": 293.0, "h": 35.0, "line_num": 7, "text": "# Helpen- Function"}, {"x": 155.0, "y": 468.0, "w": 393.0, "h": 33.0, "line_num": 8, "text": "def severse (word) :"}, {"x": 269.0, "y": 507.0, "w": 281.0, "h": 34.0, "line_num": 9, "text": "# reversed-word"}, {"x": 296.0, "y": 552.0, "w": 282.0, "h": 28.0, "line_num": 10, "text": "mew-word = \"\""}, {"x": 262.0, "y": 584.0, "w": 258.0, "h": 33.0, "line_num": 11, "text": "A chent by chan-"}, {"x": 298.0, "y": 626.0, "w": 368.0, "h": 31.0, "line_num": 12, "text": "For- chan- in word :"}, {"x": 375.0, "y": 666.0, "w": 562.0, "h": 31.0, "line_num": 13, "text": "new-word = Char + new-word"}, {"x": 297.0, "y": 702.0, "w": 154.0, "h": 28.0, "line_num": 14, "text": "# return"}, {"x": 302.0, "y": 742.0, "w": 322.0, "h": 30.0, "line_num": 15, "text": "return new-word"}, {"x": 163.0, "y": 857.0, "w": 40.0, "h": 30.0, "line_num": 16, "text": "if"}, {"x": 249.0, "y": 862.0, "w": 174.0, "h": 34.0, "line_num": 17, "text": "name_"}, {"x": 426.0, "y": 864.0, "w": 78.0, "h": 25.0, "line_num": 18, "text": "=="}, {"x": 502.0, "y": 854.0, "w": 233.0, "h": 39.0, "line_num": 19, "text": "main1 :"}, {"x": 253.0, "y": 903.0, "w": 156.0, "h": 25.0, "line_num": 20, "text": "main ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main ( ) :\n    Himput\n    my_ word = input( Enter The original word: 7\n    #Function calling\n    reversed- word = reverse (my-word )\n    Print ( The reversed word is (+) \" +\"\"+reversed-wordt\"\n# Helpen- Function\ndef severse (word) :\n    # reversed-word\n    mew-word = \"\"\n    A chent by chan-\n        For- chan- in word :\n            new-word = Char + new-word\n        # return\n        return new-word\nif\n    name_\n        ==\n            main1 :\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 155.0, "y": 118.0, "w": 301.0, "h": 30.0, "line_num": 1, "text": "def main ( ) :", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 227.0, "y": 157.0, "w": 128.0, "h": 32.0, "line_num": 2, "text": "Himput", "delta": 72.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 233.0, "y": 199.0, "w": 836.0, "h": 35.0, "line_num": 3, "text": "my_ word = input( Enter The original word: 7", "delta": 6.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 218.0, "y": 267.0, "w": 291.0, "h": 36.0, "line_num": 4, "text": "#Function calling", "delta": -15.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 244.0, "y": 318.0, "w": 710.0, "h": 31.0, "line_num": 5, "text": "reversed- word = reverse (my-word )", "delta": 26.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 243.0, "y": 354.0, "w": 974.0, "h": 35.0, "line_num": 6, "text": "Print ( The reversed word is (+) \" +\"\"+reversed-wordt\"", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 135.0, "y": 424.0, "w": 293.0, "h": 35.0, "line_num": 7, "text": "# Helpen- Function", "delta": -108.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 155.0, "y": 468.0, "w": 393.0, "h": 33.0, "line_num": 8, "text": "def severse (word) :", "delta": 20.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 269.0, "y": 507.0, "w": 281.0, "h": 34.0, "line_num": 9, "text": "# reversed-word", "delta": 114.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 296.0, "y": 552.0, "w": 282.0, "h": 28.0, "line_num": 10, "text": "mew-word = \"\"", "delta": 27.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 262.0, "y": 584.0, "w": 258.0, "h": 33.0, "line_num": 11, "text": "A chent by chan-", "delta": -34.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 298.0, "y": 626.0, "w": 368.0, "h": 31.0, "line_num": 12, "text": "For- chan- in word :", "delta": 36.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 375.0, "y": 666.0, "w": 562.0, "h": 31.0, "line_num": 13, "text": "new-word = Char + new-word", "delta": 77.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 297.0, "y": 702.0, "w": 154.0, "h": 28.0, "line_num": 14, "text": "# return", "delta": -78.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 302.0, "y": 742.0, "w": 322.0, "h": 30.0, "line_num": 15, "text": "return new-word", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 163.0, "y": 857.0, "w": 40.0, "h": 30.0, "line_num": 16, "text": "if", "delta": -139.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 249.0, "y": 862.0, "w": 174.0, "h": 34.0, "line_num": 17, "text": "name_", "delta": 86.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 426.0, "y": 864.0, "w": 78.0, "h": 25.0, "line_num": 18, "text": "==", "delta": 177.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 502.0, "y": 854.0, "w": 233.0, "h": 39.0, "line_num": 19, "text": "main1 :", "delta": 76.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 253.0, "y": 903.0, "w": 156.0, "h": 25.0, "line_num": 20, "text": "main ()", "delta": -249.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 107, "prompting_method": "cot-test1", "lm_post_processed_code": "def main ( ) :\n    # Input\n    my_word = input(\"Enter The original word: \")\n    # Function calling\n    reversed_word = reverse (my_word )\n    print (\"The reversed word is: \" + reversed_word)\n# Helper Function\n\ndef reverse (word) :\n    # reversed word\n    new_word = \"\"\n    # char by char\n    for char in word :\n        new_word = char + new_word\n    # return\n    return new_word\nif __name__ == \"main\" :\n    main ()\n", "lm_post_processed_edit_distance": 38}, {"image_id": 2, "image_height": 1098, "image_width": 1280, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 118.0, "w": 301.0, "h": 30.0, "line_num": 1, "text": "def main ( ) :"}, {"x": 227.0, "y": 157.0, "w": 128.0, "h": 32.0, "line_num": 2, "text": "Himput"}, {"x": 233.0, "y": 199.0, "w": 836.0, "h": 35.0, "line_num": 3, "text": "my_ word = input( Enter The original word: 7"}, {"x": 218.0, "y": 267.0, "w": 291.0, "h": 36.0, "line_num": 4, "text": "#Function calling"}, {"x": 244.0, "y": 318.0, "w": 710.0, "h": 31.0, "line_num": 5, "text": "reversed- word = reverse (my-word )"}, {"x": 243.0, "y": 354.0, "w": 974.0, "h": 35.0, "line_num": 6, "text": "Print ( The reversed word is (+) \" +\"\"+reversed-wordt\""}, {"x": 135.0, "y": 424.0, "w": 293.0, "h": 35.0, "line_num": 7, "text": "# Helpen- Function"}, {"x": 155.0, "y": 468.0, "w": 393.0, "h": 33.0, "line_num": 8, "text": "def severse (word) :"}, {"x": 269.0, "y": 507.0, "w": 281.0, "h": 34.0, "line_num": 9, "text": "# reversed-word"}, {"x": 296.0, "y": 552.0, "w": 282.0, "h": 28.0, "line_num": 10, "text": "mew-word = \"\""}, {"x": 262.0, "y": 584.0, "w": 258.0, "h": 33.0, "line_num": 11, "text": "A chent by chan-"}, {"x": 298.0, "y": 626.0, "w": 368.0, "h": 31.0, "line_num": 12, "text": "For- chan- in word :"}, {"x": 375.0, "y": 666.0, "w": 562.0, "h": 31.0, "line_num": 13, "text": "new-word = Char + new-word"}, {"x": 297.0, "y": 702.0, "w": 154.0, "h": 28.0, "line_num": 14, "text": "# return"}, {"x": 302.0, "y": 742.0, "w": 322.0, "h": 30.0, "line_num": 15, "text": "return new-word"}, {"x": 163.0, "y": 857.0, "w": 40.0, "h": 30.0, "line_num": 16, "text": "if"}, {"x": 249.0, "y": 862.0, "w": 174.0, "h": 34.0, "line_num": 17, "text": "name_"}, {"x": 426.0, "y": 864.0, "w": 78.0, "h": 25.0, "line_num": 18, "text": "=="}, {"x": 502.0, "y": 854.0, "w": 233.0, "h": 39.0, "line_num": 19, "text": "main1 :"}, {"x": 253.0, "y": 903.0, "w": 156.0, "h": 25.0, "line_num": 20, "text": "main ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main ( ) :\n    Himput\n    my_ word = input( Enter The original word: 7\n    #Function calling\n    reversed- word = reverse (my-word )\n    Print ( The reversed word is (+) \" +\"\"+reversed-wordt\"\n# Helpen- Function\ndef severse (word) :\n    # reversed-word\n    mew-word = \"\"\n    A chent by chan-\n        For- chan- in word :\n            new-word = Char + new-word\n        # return\n        return new-word\nif\n    name_\n        ==\n            main1 :\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 155.0, "y": 118.0, "w": 301.0, "h": 30.0, "line_num": 1, "text": "def main ( ) :", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 227.0, "y": 157.0, "w": 128.0, "h": 32.0, "line_num": 2, "text": "Himput", "delta": 72.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 233.0, "y": 199.0, "w": 836.0, "h": 35.0, "line_num": 3, "text": "my_ word = input( Enter The original word: 7", "delta": 6.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 218.0, "y": 267.0, "w": 291.0, "h": 36.0, "line_num": 4, "text": "#Function calling", "delta": -15.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 244.0, "y": 318.0, "w": 710.0, "h": 31.0, "line_num": 5, "text": "reversed- word = reverse (my-word )", "delta": 26.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 243.0, "y": 354.0, "w": 974.0, "h": 35.0, "line_num": 6, "text": "Print ( The reversed word is (+) \" +\"\"+reversed-wordt\"", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 135.0, "y": 424.0, "w": 293.0, "h": 35.0, "line_num": 7, "text": "# Helpen- Function", "delta": -108.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 155.0, "y": 468.0, "w": 393.0, "h": 33.0, "line_num": 8, "text": "def severse (word) :", "delta": 20.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 269.0, "y": 507.0, "w": 281.0, "h": 34.0, "line_num": 9, "text": "# reversed-word", "delta": 114.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 296.0, "y": 552.0, "w": 282.0, "h": 28.0, "line_num": 10, "text": "mew-word = \"\"", "delta": 27.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 262.0, "y": 584.0, "w": 258.0, "h": 33.0, "line_num": 11, "text": "A chent by chan-", "delta": -34.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 298.0, "y": 626.0, "w": 368.0, "h": 31.0, "line_num": 12, "text": "For- chan- in word :", "delta": 36.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 375.0, "y": 666.0, "w": 562.0, "h": 31.0, "line_num": 13, "text": "new-word = Char + new-word", "delta": 77.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 297.0, "y": 702.0, "w": 154.0, "h": 28.0, "line_num": 14, "text": "# return", "delta": -78.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 302.0, "y": 742.0, "w": 322.0, "h": 30.0, "line_num": 15, "text": "return new-word", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 163.0, "y": 857.0, "w": 40.0, "h": 30.0, "line_num": 16, "text": "if", "delta": -139.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 249.0, "y": 862.0, "w": 174.0, "h": 34.0, "line_num": 17, "text": "name_", "delta": 86.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 426.0, "y": 864.0, "w": 78.0, "h": 25.0, "line_num": 18, "text": "==", "delta": 177.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 502.0, "y": 854.0, "w": 233.0, "h": 39.0, "line_num": 19, "text": "main1 :", "delta": 76.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 253.0, "y": 903.0, "w": 156.0, "h": 25.0, "line_num": 20, "text": "main ()", "delta": -249.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 107, "prompting_method": "cot-test5", "lm_post_processed_code": "def main ( ) :\n    # Input\n    my_word = input(\"Enter The original word: \")\n    # Function calling\n    reversed_word = reverse(my_word)\n    print(\"The reversed word is: \" + reversed_word)\n# Helper Function\n\ndef reverse(word) :\n    # reversed word\n    new_word = \"\"\n    # char by char\n    for char in word :\n        new_word = char + new_word\n    # return\n    return new_word\nif __name__ == \"__main__\" :\n    main ()\n", "lm_post_processed_edit_distance": 30}, {"image_id": 2, "image_height": 1098, "image_width": 1280, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 118.0, "w": 301.0, "h": 30.0, "line_num": 1, "text": "def main ( ) :"}, {"x": 227.0, "y": 157.0, "w": 128.0, "h": 32.0, "line_num": 2, "text": "Himput"}, {"x": 233.0, "y": 199.0, "w": 836.0, "h": 35.0, "line_num": 3, "text": "my_ word = input( Enter The original word: 7"}, {"x": 218.0, "y": 267.0, "w": 291.0, "h": 36.0, "line_num": 4, "text": "#Function calling"}, {"x": 244.0, "y": 318.0, "w": 710.0, "h": 31.0, "line_num": 5, "text": "reversed- word = reverse (my-word )"}, {"x": 243.0, "y": 354.0, "w": 974.0, "h": 35.0, "line_num": 6, "text": "Print ( The reversed word is (+) \" +\"\"+reversed-wordt\""}, {"x": 135.0, "y": 424.0, "w": 293.0, "h": 35.0, "line_num": 7, "text": "# Helpen- Function"}, {"x": 155.0, "y": 468.0, "w": 393.0, "h": 33.0, "line_num": 8, "text": "def severse (word) :"}, {"x": 269.0, "y": 507.0, "w": 281.0, "h": 34.0, "line_num": 9, "text": "# reversed-word"}, {"x": 296.0, "y": 552.0, "w": 282.0, "h": 28.0, "line_num": 10, "text": "mew-word = \"\""}, {"x": 262.0, "y": 584.0, "w": 258.0, "h": 33.0, "line_num": 11, "text": "A chent by chan-"}, {"x": 298.0, "y": 626.0, "w": 368.0, "h": 31.0, "line_num": 12, "text": "For- chan- in word :"}, {"x": 375.0, "y": 666.0, "w": 562.0, "h": 31.0, "line_num": 13, "text": "new-word = Char + new-word"}, {"x": 297.0, "y": 702.0, "w": 154.0, "h": 28.0, "line_num": 14, "text": "# return"}, {"x": 302.0, "y": 742.0, "w": 322.0, "h": 30.0, "line_num": 15, "text": "return new-word"}, {"x": 163.0, "y": 857.0, "w": 40.0, "h": 30.0, "line_num": 16, "text": "if"}, {"x": 249.0, "y": 862.0, "w": 174.0, "h": 34.0, "line_num": 17, "text": "name_"}, {"x": 426.0, "y": 864.0, "w": 78.0, "h": 25.0, "line_num": 18, "text": "=="}, {"x": 502.0, "y": 854.0, "w": 233.0, "h": 39.0, "line_num": 19, "text": "main1 :"}, {"x": 253.0, "y": 903.0, "w": 156.0, "h": 25.0, "line_num": 20, "text": "main ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main ( ) :\n    Himput\n    my_ word = input( Enter The original word: 7\n    #Function calling\n    reversed- word = reverse (my-word )\n    Print ( The reversed word is (+) \" +\"\"+reversed-wordt\"\n# Helpen- Function\ndef severse (word) :\n    # reversed-word\n    mew-word = \"\"\n    A chent by chan-\n        For- chan- in word :\n            new-word = Char + new-word\n        # return\n        return new-word\nif\n    name_\n        ==\n            main1 :\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 155.0, "y": 118.0, "w": 301.0, "h": 30.0, "line_num": 1, "text": "def main ( ) :", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 227.0, "y": 157.0, "w": 128.0, "h": 32.0, "line_num": 2, "text": "Himput", "delta": 72.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 233.0, "y": 199.0, "w": 836.0, "h": 35.0, "line_num": 3, "text": "my_ word = input( Enter The original word: 7", "delta": 6.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 218.0, "y": 267.0, "w": 291.0, "h": 36.0, "line_num": 4, "text": "#Function calling", "delta": -15.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 244.0, "y": 318.0, "w": 710.0, "h": 31.0, "line_num": 5, "text": "reversed- word = reverse (my-word )", "delta": 26.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 243.0, "y": 354.0, "w": 974.0, "h": 35.0, "line_num": 6, "text": "Print ( The reversed word is (+) \" +\"\"+reversed-wordt\"", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 135.0, "y": 424.0, "w": 293.0, "h": 35.0, "line_num": 7, "text": "# Helpen- Function", "delta": -108.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 155.0, "y": 468.0, "w": 393.0, "h": 33.0, "line_num": 8, "text": "def severse (word) :", "delta": 20.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 269.0, "y": 507.0, "w": 281.0, "h": 34.0, "line_num": 9, "text": "# reversed-word", "delta": 114.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 296.0, "y": 552.0, "w": 282.0, "h": 28.0, "line_num": 10, "text": "mew-word = \"\"", "delta": 27.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 262.0, "y": 584.0, "w": 258.0, "h": 33.0, "line_num": 11, "text": "A chent by chan-", "delta": -34.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 298.0, "y": 626.0, "w": 368.0, "h": 31.0, "line_num": 12, "text": "For- chan- in word :", "delta": 36.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 375.0, "y": 666.0, "w": 562.0, "h": 31.0, "line_num": 13, "text": "new-word = Char + new-word", "delta": 77.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 297.0, "y": 702.0, "w": 154.0, "h": 28.0, "line_num": 14, "text": "# return", "delta": -78.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 302.0, "y": 742.0, "w": 322.0, "h": 30.0, "line_num": 15, "text": "return new-word", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 163.0, "y": 857.0, "w": 40.0, "h": 30.0, "line_num": 16, "text": "if", "delta": -139.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 249.0, "y": 862.0, "w": 174.0, "h": 34.0, "line_num": 17, "text": "name_", "delta": 86.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 426.0, "y": 864.0, "w": 78.0, "h": 25.0, "line_num": 18, "text": "==", "delta": 177.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 502.0, "y": 854.0, "w": 233.0, "h": 39.0, "line_num": 19, "text": "main1 :", "delta": 76.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 253.0, "y": 903.0, "w": 156.0, "h": 25.0, "line_num": 20, "text": "main ()", "delta": -249.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 107, "prompting_method": "simple-test2", "lm_post_processed_code": "def main():\n    my_word = input(\"Enter The original word: \")\n    #Function calling\n    reversed_word = reverse(my_word)\n    print(\"The reversed word is: \" + reversed_word)\n# Helper Function\n\ndef reverse(word):\n    # reversed-word\n    new_word = \"\"\n    # char by char\n    for char in word:\n        new_word = char + new_word\n    # return\n    return new_word\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 34}, {"image_id": 2, "image_height": 1098, "image_width": 1280, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 118.0, "w": 301.0, "h": 30.0, "line_num": 1, "text": "def main ( ) :"}, {"x": 227.0, "y": 157.0, "w": 128.0, "h": 32.0, "line_num": 2, "text": "Himput"}, {"x": 233.0, "y": 199.0, "w": 836.0, "h": 35.0, "line_num": 3, "text": "my_ word = input( Enter The original word: 7"}, {"x": 218.0, "y": 267.0, "w": 291.0, "h": 36.0, "line_num": 4, "text": "#Function calling"}, {"x": 244.0, "y": 318.0, "w": 710.0, "h": 31.0, "line_num": 5, "text": "reversed- word = reverse (my-word )"}, {"x": 243.0, "y": 354.0, "w": 974.0, "h": 35.0, "line_num": 6, "text": "Print ( The reversed word is (+) \" +\"\"+reversed-wordt\""}, {"x": 135.0, "y": 424.0, "w": 293.0, "h": 35.0, "line_num": 7, "text": "# Helpen- Function"}, {"x": 155.0, "y": 468.0, "w": 393.0, "h": 33.0, "line_num": 8, "text": "def severse (word) :"}, {"x": 269.0, "y": 507.0, "w": 281.0, "h": 34.0, "line_num": 9, "text": "# reversed-word"}, {"x": 296.0, "y": 552.0, "w": 282.0, "h": 28.0, "line_num": 10, "text": "mew-word = \"\""}, {"x": 262.0, "y": 584.0, "w": 258.0, "h": 33.0, "line_num": 11, "text": "A chent by chan-"}, {"x": 298.0, "y": 626.0, "w": 368.0, "h": 31.0, "line_num": 12, "text": "For- chan- in word :"}, {"x": 375.0, "y": 666.0, "w": 562.0, "h": 31.0, "line_num": 13, "text": "new-word = Char + new-word"}, {"x": 297.0, "y": 702.0, "w": 154.0, "h": 28.0, "line_num": 14, "text": "# return"}, {"x": 302.0, "y": 742.0, "w": 322.0, "h": 30.0, "line_num": 15, "text": "return new-word"}, {"x": 163.0, "y": 857.0, "w": 40.0, "h": 30.0, "line_num": 16, "text": "if"}, {"x": 249.0, "y": 862.0, "w": 174.0, "h": 34.0, "line_num": 17, "text": "name_"}, {"x": 426.0, "y": 864.0, "w": 78.0, "h": 25.0, "line_num": 18, "text": "=="}, {"x": 502.0, "y": 854.0, "w": 233.0, "h": 39.0, "line_num": 19, "text": "main1 :"}, {"x": 253.0, "y": 903.0, "w": 156.0, "h": 25.0, "line_num": 20, "text": "main ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main ( ) :\n    Himput\n    my_ word = input( Enter The original word: 7\n    #Function calling\n    reversed- word = reverse (my-word )\n    Print ( The reversed word is (+) \" +\"\"+reversed-wordt\"\n# Helpen- Function\ndef severse (word) :\n    # reversed-word\n    mew-word = \"\"\n    A chent by chan-\n        For- chan- in word :\n            new-word = Char + new-word\n        # return\n        return new-word\nif\n    name_\n        ==\n            main1 :\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 155.0, "y": 118.0, "w": 301.0, "h": 30.0, "line_num": 1, "text": "def main ( ) :", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 227.0, "y": 157.0, "w": 128.0, "h": 32.0, "line_num": 2, "text": "Himput", "delta": 72.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 233.0, "y": 199.0, "w": 836.0, "h": 35.0, "line_num": 3, "text": "my_ word = input( Enter The original word: 7", "delta": 6.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 218.0, "y": 267.0, "w": 291.0, "h": 36.0, "line_num": 4, "text": "#Function calling", "delta": -15.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 244.0, "y": 318.0, "w": 710.0, "h": 31.0, "line_num": 5, "text": "reversed- word = reverse (my-word )", "delta": 26.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 243.0, "y": 354.0, "w": 974.0, "h": 35.0, "line_num": 6, "text": "Print ( The reversed word is (+) \" +\"\"+reversed-wordt\"", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 135.0, "y": 424.0, "w": 293.0, "h": 35.0, "line_num": 7, "text": "# Helpen- Function", "delta": -108.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 155.0, "y": 468.0, "w": 393.0, "h": 33.0, "line_num": 8, "text": "def severse (word) :", "delta": 20.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 269.0, "y": 507.0, "w": 281.0, "h": 34.0, "line_num": 9, "text": "# reversed-word", "delta": 114.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 296.0, "y": 552.0, "w": 282.0, "h": 28.0, "line_num": 10, "text": "mew-word = \"\"", "delta": 27.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 262.0, "y": 584.0, "w": 258.0, "h": 33.0, "line_num": 11, "text": "A chent by chan-", "delta": -34.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 298.0, "y": 626.0, "w": 368.0, "h": 31.0, "line_num": 12, "text": "For- chan- in word :", "delta": 36.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 375.0, "y": 666.0, "w": 562.0, "h": 31.0, "line_num": 13, "text": "new-word = Char + new-word", "delta": 77.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 297.0, "y": 702.0, "w": 154.0, "h": 28.0, "line_num": 14, "text": "# return", "delta": -78.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 302.0, "y": 742.0, "w": 322.0, "h": 30.0, "line_num": 15, "text": "return new-word", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 163.0, "y": 857.0, "w": 40.0, "h": 30.0, "line_num": 16, "text": "if", "delta": -139.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 249.0, "y": 862.0, "w": 174.0, "h": 34.0, "line_num": 17, "text": "name_", "delta": 86.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 426.0, "y": 864.0, "w": 78.0, "h": 25.0, "line_num": 18, "text": "==", "delta": 177.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 502.0, "y": 854.0, "w": 233.0, "h": 39.0, "line_num": 19, "text": "main1 :", "delta": 76.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 253.0, "y": 903.0, "w": 156.0, "h": 25.0, "line_num": 20, "text": "main ()", "delta": -249.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 107, "prompting_method": "simple-test3", "lm_post_processed_code": "def main():\n    # Input\n    my_word = input(\"Enter The original word: \")\n    # Function calling\n    reversed_word = reverse(my_word)\n    print(\"The reversed word is: \" + reversed_word)\n# Helper Function\n\ndef reverse(word):\n    # reversed word\n    new_word = \"\"\n    # char by char\n    for char in word:\n        new_word = char + new_word\n    # return\n    return new_word\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 22}, {"image_id": 3, "image_height": 465, "image_width": 595, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 52.0, "y": 13.0, "w": 262.0, "h": 38.0, "line_num": 1, "text": "inpur-number ="}, {"x": 159.0, "y": 53.0, "w": 393.0, "h": 42.0, "line_num": 2, "text": "int(impur (Enter number)"}, {"x": 80.0, "y": 108.0, "w": 368.0, "h": 41.0, "line_num": 3, "text": "Val = inpur-number"}, {"x": 44.0, "y": 162.0, "w": 394.0, "h": 36.0, "line_num": 4, "text": "result = input-number"}, {"x": 68.0, "y": 208.0, "w": 299.0, "h": 38.0, "line_num": 5, "text": "While (val>1):"}, {"x": 156.0, "y": 259.0, "w": 89.0, "h": 34.0, "line_num": 6, "text": "val ="}, {"x": 316.0, "y": 244.0, "w": 164.0, "h": 48.0, "line_num": 7, "text": "Val -1"}, {"x": 118.0, "y": 308.0, "w": 15.0, "h": 25.0, "line_num": 8, "text": "L"}, {"x": 136.0, "y": 309.0, "w": 373.0, "h": 37.0, "line_num": 9, "text": "Result = result & val"}, {"x": 55.0, "y": 365.0, "w": 520.0, "h": 40.0, "line_num": 10, "text": "print ('factorial f& +shr(input-nale]"}, {"x": 240.0, "y": 410.0, "w": 265.0, "h": 45.0, "line_num": 11, "text": "+ spr (result))"}], "ir_algo_name": "none", "ir_algo_output_code": "inpur-number =\nint(impur (Enter number)\nVal = inpur-number\nresult = input-number\nWhile (val>1):\nval =\nVal -1\nL\nResult = result & val\nprint ('factorial f& +shr(input-nale]\n+ spr (result))", "ir_algo_output_edit_distance": 56, "prompting_method": "none", "lm_post_processed_code": "inpur-number =\nint(impur (Enter number)\nVal = inpur-number\nresult = input-number\nWhile (val>1):\nval =\nVal -1\nL\nResult = result & val\nprint ('factorial f& +shr(input-nale]\n+ spr (result))", "lm_post_processed_edit_distance": 56}, {"image_id": 3, "image_height": 465, "image_width": 595, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 52.0, "y": 13.0, "w": 262.0, "h": 38.0, "line_num": 1, "text": "inpur-number ="}, {"x": 159.0, "y": 53.0, "w": 393.0, "h": 42.0, "line_num": 2, "text": "int(impur (Enter number)"}, {"x": 80.0, "y": 108.0, "w": 368.0, "h": 41.0, "line_num": 3, "text": "Val = inpur-number"}, {"x": 44.0, "y": 162.0, "w": 394.0, "h": 36.0, "line_num": 4, "text": "result = input-number"}, {"x": 68.0, "y": 208.0, "w": 299.0, "h": 38.0, "line_num": 5, "text": "While (val>1):"}, {"x": 156.0, "y": 259.0, "w": 89.0, "h": 34.0, "line_num": 6, "text": "val ="}, {"x": 316.0, "y": 244.0, "w": 164.0, "h": 48.0, "line_num": 7, "text": "Val -1"}, {"x": 118.0, "y": 308.0, "w": 15.0, "h": 25.0, "line_num": 8, "text": "L"}, {"x": 136.0, "y": 309.0, "w": 373.0, "h": 37.0, "line_num": 9, "text": "Result = result & val"}, {"x": 55.0, "y": 365.0, "w": 520.0, "h": 40.0, "line_num": 10, "text": "print ('factorial f& +shr(input-nale]"}, {"x": 240.0, "y": 410.0, "w": 265.0, "h": 45.0, "line_num": 11, "text": "+ spr (result))"}], "ir_algo_name": "none", "ir_algo_output_code": "inpur-number =\nint(impur (Enter number)\nVal = inpur-number\nresult = input-number\nWhile (val>1):\nval =\nVal -1\nL\nResult = result & val\nprint ('factorial f& +shr(input-nale]\n+ spr (result))", "ir_algo_output_edit_distance": 56, "prompting_method": "cot-test1", "lm_post_processed_code": "input_number = int(input('Enter number'))\nval = input_number\nresult = input_number\nwhile (val>1):\nval = val -1\nresult = result & val\nprint ('factorial of ' + str(input_number) + str(result))\n", "lm_post_processed_edit_distance": 32}, {"image_id": 3, "image_height": 465, "image_width": 595, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 52.0, "y": 13.0, "w": 262.0, "h": 38.0, "line_num": 1, "text": "inpur-number ="}, {"x": 159.0, "y": 53.0, "w": 393.0, "h": 42.0, "line_num": 2, "text": "int(impur (Enter number)"}, {"x": 80.0, "y": 108.0, "w": 368.0, "h": 41.0, "line_num": 3, "text": "Val = inpur-number"}, {"x": 44.0, "y": 162.0, "w": 394.0, "h": 36.0, "line_num": 4, "text": "result = input-number"}, {"x": 68.0, "y": 208.0, "w": 299.0, "h": 38.0, "line_num": 5, "text": "While (val>1):"}, {"x": 156.0, "y": 259.0, "w": 89.0, "h": 34.0, "line_num": 6, "text": "val ="}, {"x": 316.0, "y": 244.0, "w": 164.0, "h": 48.0, "line_num": 7, "text": "Val -1"}, {"x": 118.0, "y": 308.0, "w": 15.0, "h": 25.0, "line_num": 8, "text": "L"}, {"x": 136.0, "y": 309.0, "w": 373.0, "h": 37.0, "line_num": 9, "text": "Result = result & val"}, {"x": 55.0, "y": 365.0, "w": 520.0, "h": 40.0, "line_num": 10, "text": "print ('factorial f& +shr(input-nale]"}, {"x": 240.0, "y": 410.0, "w": 265.0, "h": 45.0, "line_num": 11, "text": "+ spr (result))"}], "ir_algo_name": "none", "ir_algo_output_code": "inpur-number =\nint(impur (Enter number)\nVal = inpur-number\nresult = input-number\nWhile (val>1):\nval =\nVal -1\nL\nResult = result & val\nprint ('factorial f& +shr(input-nale]\n+ spr (result))", "ir_algo_output_edit_distance": 56, "prompting_method": "cot-test5", "lm_post_processed_code": "input_number = int(input('Enter number'))\nval = input_number\nresult = input_number\nwhile (val>1):\nval = val -1\nresult = result & val\nprint ('factorial of ' + str(input_number) + str(result))\n", "lm_post_processed_edit_distance": 32}, {"image_id": 3, "image_height": 465, "image_width": 595, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 52.0, "y": 13.0, "w": 262.0, "h": 38.0, "line_num": 1, "text": "inpur-number ="}, {"x": 159.0, "y": 53.0, "w": 393.0, "h": 42.0, "line_num": 2, "text": "int(impur (Enter number)"}, {"x": 80.0, "y": 108.0, "w": 368.0, "h": 41.0, "line_num": 3, "text": "Val = inpur-number"}, {"x": 44.0, "y": 162.0, "w": 394.0, "h": 36.0, "line_num": 4, "text": "result = input-number"}, {"x": 68.0, "y": 208.0, "w": 299.0, "h": 38.0, "line_num": 5, "text": "While (val>1):"}, {"x": 156.0, "y": 259.0, "w": 89.0, "h": 34.0, "line_num": 6, "text": "val ="}, {"x": 316.0, "y": 244.0, "w": 164.0, "h": 48.0, "line_num": 7, "text": "Val -1"}, {"x": 118.0, "y": 308.0, "w": 15.0, "h": 25.0, "line_num": 8, "text": "L"}, {"x": 136.0, "y": 309.0, "w": 373.0, "h": 37.0, "line_num": 9, "text": "Result = result & val"}, {"x": 55.0, "y": 365.0, "w": 520.0, "h": 40.0, "line_num": 10, "text": "print ('factorial f& +shr(input-nale]"}, {"x": 240.0, "y": 410.0, "w": 265.0, "h": 45.0, "line_num": 11, "text": "+ spr (result))"}], "ir_algo_name": "none", "ir_algo_output_code": "inpur-number =\nint(impur (Enter number)\nVal = inpur-number\nresult = input-number\nWhile (val>1):\nval =\nVal -1\nL\nResult = result & val\nprint ('factorial f& +shr(input-nale]\n+ spr (result))", "ir_algo_output_edit_distance": 56, "prompting_method": "simple-test2", "lm_post_processed_code": "input_number = int(input(\"Enter number\"))\nval = input_number\nresult = input_number\nwhile (val>1):\nval = val -1\nresult = result * val\nprint ('factorial of ' + str(input_number) + ' is ' + str(result))\n", "lm_post_processed_edit_distance": 23}, {"image_id": 3, "image_height": 465, "image_width": 595, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 52.0, "y": 13.0, "w": 262.0, "h": 38.0, "line_num": 1, "text": "inpur-number ="}, {"x": 159.0, "y": 53.0, "w": 393.0, "h": 42.0, "line_num": 2, "text": "int(impur (Enter number)"}, {"x": 80.0, "y": 108.0, "w": 368.0, "h": 41.0, "line_num": 3, "text": "Val = inpur-number"}, {"x": 44.0, "y": 162.0, "w": 394.0, "h": 36.0, "line_num": 4, "text": "result = input-number"}, {"x": 68.0, "y": 208.0, "w": 299.0, "h": 38.0, "line_num": 5, "text": "While (val>1):"}, {"x": 156.0, "y": 259.0, "w": 89.0, "h": 34.0, "line_num": 6, "text": "val ="}, {"x": 316.0, "y": 244.0, "w": 164.0, "h": 48.0, "line_num": 7, "text": "Val -1"}, {"x": 118.0, "y": 308.0, "w": 15.0, "h": 25.0, "line_num": 8, "text": "L"}, {"x": 136.0, "y": 309.0, "w": 373.0, "h": 37.0, "line_num": 9, "text": "Result = result & val"}, {"x": 55.0, "y": 365.0, "w": 520.0, "h": 40.0, "line_num": 10, "text": "print ('factorial f& +shr(input-nale]"}, {"x": 240.0, "y": 410.0, "w": 265.0, "h": 45.0, "line_num": 11, "text": "+ spr (result))"}], "ir_algo_name": "none", "ir_algo_output_code": "inpur-number =\nint(impur (Enter number)\nVal = inpur-number\nresult = input-number\nWhile (val>1):\nval =\nVal -1\nL\nResult = result & val\nprint ('factorial f& +shr(input-nale]\n+ spr (result))", "ir_algo_output_edit_distance": 56, "prompting_method": "simple-test3", "lm_post_processed_code": "input_number = int(input(\"Enter number\"))\nval = input_number\nresult = input_number\nwhile (val>1):\n    val = val -1\n    result = result & val\nprint ('factorial of ' + str(input_number) + str(result))\n", "lm_post_processed_edit_distance": 22}, {"image_id": 3, "image_height": 465, "image_width": 595, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 52.0, "y": 13.0, "w": 262.0, "h": 38.0, "line_num": 1, "text": "inpur-number ="}, {"x": 159.0, "y": 53.0, "w": 393.0, "h": 42.0, "line_num": 2, "text": "int(impur (Enter number)"}, {"x": 80.0, "y": 108.0, "w": 368.0, "h": 41.0, "line_num": 3, "text": "Val = inpur-number"}, {"x": 44.0, "y": 162.0, "w": 394.0, "h": 36.0, "line_num": 4, "text": "result = input-number"}, {"x": 68.0, "y": 208.0, "w": 299.0, "h": 38.0, "line_num": 5, "text": "While (val>1):"}, {"x": 156.0, "y": 259.0, "w": 89.0, "h": 34.0, "line_num": 6, "text": "val ="}, {"x": 316.0, "y": 244.0, "w": 164.0, "h": 48.0, "line_num": 7, "text": "Val -1"}, {"x": 118.0, "y": 308.0, "w": 15.0, "h": 25.0, "line_num": 8, "text": "L"}, {"x": 136.0, "y": 309.0, "w": 373.0, "h": 37.0, "line_num": 9, "text": "Result = result & val"}, {"x": 55.0, "y": 365.0, "w": 520.0, "h": 40.0, "line_num": 10, "text": "print ('factorial f& +shr(input-nale]"}, {"x": 240.0, "y": 410.0, "w": 265.0, "h": 45.0, "line_num": 11, "text": "+ spr (result))"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 57.81818181818182, "ir_algo_output_code": "inpur-number =\n    int(impur (Enter number)\nVal = inpur-number\nresult = input-number\nWhile (val>1):\n    val =\n            Val -1\n    L\n    Result = result & val\nprint ('factorial f& +shr(input-nale]\n        + spr (result))\n", "ir_algo_output_indented_lines": [{"x": 52.0, "y": 13.0, "w": 262.0, "h": 38.0, "line_num": 1, "text": "inpur-number =", "cluster_label": 0, "indentation": 0}, {"x": 159.0, "y": 53.0, "w": 393.0, "h": 42.0, "line_num": 2, "text": "int(impur (Enter number)", "cluster_label": 1, "indentation": 1}, {"x": 80.0, "y": 108.0, "w": 368.0, "h": 41.0, "line_num": 3, "text": "Val = inpur-number", "cluster_label": 0, "indentation": 0}, {"x": 44.0, "y": 162.0, "w": 394.0, "h": 36.0, "line_num": 4, "text": "result = input-number", "cluster_label": 0, "indentation": 0}, {"x": 68.0, "y": 208.0, "w": 299.0, "h": 38.0, "line_num": 5, "text": "While (val>1):", "cluster_label": 0, "indentation": 0}, {"x": 156.0, "y": 259.0, "w": 89.0, "h": 34.0, "line_num": 6, "text": "val =", "cluster_label": 1, "indentation": 1}, {"x": 316.0, "y": 244.0, "w": 164.0, "h": 48.0, "line_num": 7, "text": "Val -1", "cluster_label": 2, "indentation": 3}, {"x": 118.0, "y": 308.0, "w": 15.0, "h": 25.0, "line_num": 8, "text": "L", "cluster_label": 1, "indentation": 1}, {"x": 136.0, "y": 309.0, "w": 373.0, "h": 37.0, "line_num": 9, "text": "Result = result & val", "cluster_label": 1, "indentation": 1}, {"x": 55.0, "y": 365.0, "w": 520.0, "h": 40.0, "line_num": 10, "text": "print ('factorial f& +shr(input-nale]", "cluster_label": 0, "indentation": 0}, {"x": 240.0, "y": 410.0, "w": 265.0, "h": 45.0, "line_num": 11, "text": "+ spr (result))", "cluster_label": 3, "indentation": 2}], "ir_algo_output_edit_distance": 62, "prompting_method": "none", "lm_post_processed_code": "inpur-number =\n    int(impur (Enter number)\nVal = inpur-number\nresult = input-number\nWhile (val>1):\n    val =\n            Val -1\n    L\n    Result = result & val\nprint ('factorial f& +shr(input-nale]\n        + spr (result))\n", "lm_post_processed_edit_distance": 62}, {"image_id": 3, "image_height": 465, "image_width": 595, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 52.0, "y": 13.0, "w": 262.0, "h": 38.0, "line_num": 1, "text": "inpur-number ="}, {"x": 159.0, "y": 53.0, "w": 393.0, "h": 42.0, "line_num": 2, "text": "int(impur (Enter number)"}, {"x": 80.0, "y": 108.0, "w": 368.0, "h": 41.0, "line_num": 3, "text": "Val = inpur-number"}, {"x": 44.0, "y": 162.0, "w": 394.0, "h": 36.0, "line_num": 4, "text": "result = input-number"}, {"x": 68.0, "y": 208.0, "w": 299.0, "h": 38.0, "line_num": 5, "text": "While (val>1):"}, {"x": 156.0, "y": 259.0, "w": 89.0, "h": 34.0, "line_num": 6, "text": "val ="}, {"x": 316.0, "y": 244.0, "w": 164.0, "h": 48.0, "line_num": 7, "text": "Val -1"}, {"x": 118.0, "y": 308.0, "w": 15.0, "h": 25.0, "line_num": 8, "text": "L"}, {"x": 136.0, "y": 309.0, "w": 373.0, "h": 37.0, "line_num": 9, "text": "Result = result & val"}, {"x": 55.0, "y": 365.0, "w": 520.0, "h": 40.0, "line_num": 10, "text": "print ('factorial f& +shr(input-nale]"}, {"x": 240.0, "y": 410.0, "w": 265.0, "h": 45.0, "line_num": 11, "text": "+ spr (result))"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 57.81818181818182, "ir_algo_output_code": "inpur-number =\n    int(impur (Enter number)\nVal = inpur-number\nresult = input-number\nWhile (val>1):\n    val =\n            Val -1\n    L\n    Result = result & val\nprint ('factorial f& +shr(input-nale]\n        + spr (result))\n", "ir_algo_output_indented_lines": [{"x": 52.0, "y": 13.0, "w": 262.0, "h": 38.0, "line_num": 1, "text": "inpur-number =", "cluster_label": 0, "indentation": 0}, {"x": 159.0, "y": 53.0, "w": 393.0, "h": 42.0, "line_num": 2, "text": "int(impur (Enter number)", "cluster_label": 1, "indentation": 1}, {"x": 80.0, "y": 108.0, "w": 368.0, "h": 41.0, "line_num": 3, "text": "Val = inpur-number", "cluster_label": 0, "indentation": 0}, {"x": 44.0, "y": 162.0, "w": 394.0, "h": 36.0, "line_num": 4, "text": "result = input-number", "cluster_label": 0, "indentation": 0}, {"x": 68.0, "y": 208.0, "w": 299.0, "h": 38.0, "line_num": 5, "text": "While (val>1):", "cluster_label": 0, "indentation": 0}, {"x": 156.0, "y": 259.0, "w": 89.0, "h": 34.0, "line_num": 6, "text": "val =", "cluster_label": 1, "indentation": 1}, {"x": 316.0, "y": 244.0, "w": 164.0, "h": 48.0, "line_num": 7, "text": "Val -1", "cluster_label": 2, "indentation": 3}, {"x": 118.0, "y": 308.0, "w": 15.0, "h": 25.0, "line_num": 8, "text": "L", "cluster_label": 1, "indentation": 1}, {"x": 136.0, "y": 309.0, "w": 373.0, "h": 37.0, "line_num": 9, "text": "Result = result & val", "cluster_label": 1, "indentation": 1}, {"x": 55.0, "y": 365.0, "w": 520.0, "h": 40.0, "line_num": 10, "text": "print ('factorial f& +shr(input-nale]", "cluster_label": 0, "indentation": 0}, {"x": 240.0, "y": 410.0, "w": 265.0, "h": 45.0, "line_num": 11, "text": "+ spr (result))", "cluster_label": 3, "indentation": 2}], "ir_algo_output_edit_distance": 62, "prompting_method": "cot-test1", "lm_post_processed_code": "input_number =\n    int(input('Enter number'))\nval = input_number\nresult = input_number\nwhile (val>1):\n    val =\n            val -1\n    result = result & val\nprint ('factorial of ' + str(input_number)\n        + str(result))\n", "lm_post_processed_edit_distance": 38}, {"image_id": 3, "image_height": 465, "image_width": 595, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 52.0, "y": 13.0, "w": 262.0, "h": 38.0, "line_num": 1, "text": "inpur-number ="}, {"x": 159.0, "y": 53.0, "w": 393.0, "h": 42.0, "line_num": 2, "text": "int(impur (Enter number)"}, {"x": 80.0, "y": 108.0, "w": 368.0, "h": 41.0, "line_num": 3, "text": "Val = inpur-number"}, {"x": 44.0, "y": 162.0, "w": 394.0, "h": 36.0, "line_num": 4, "text": "result = input-number"}, {"x": 68.0, "y": 208.0, "w": 299.0, "h": 38.0, "line_num": 5, "text": "While (val>1):"}, {"x": 156.0, "y": 259.0, "w": 89.0, "h": 34.0, "line_num": 6, "text": "val ="}, {"x": 316.0, "y": 244.0, "w": 164.0, "h": 48.0, "line_num": 7, "text": "Val -1"}, {"x": 118.0, "y": 308.0, "w": 15.0, "h": 25.0, "line_num": 8, "text": "L"}, {"x": 136.0, "y": 309.0, "w": 373.0, "h": 37.0, "line_num": 9, "text": "Result = result & val"}, {"x": 55.0, "y": 365.0, "w": 520.0, "h": 40.0, "line_num": 10, "text": "print ('factorial f& +shr(input-nale]"}, {"x": 240.0, "y": 410.0, "w": 265.0, "h": 45.0, "line_num": 11, "text": "+ spr (result))"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 57.81818181818182, "ir_algo_output_code": "inpur-number =\n    int(impur (Enter number)\nVal = inpur-number\nresult = input-number\nWhile (val>1):\n    val =\n            Val -1\n    L\n    Result = result & val\nprint ('factorial f& +shr(input-nale]\n        + spr (result))\n", "ir_algo_output_indented_lines": [{"x": 52.0, "y": 13.0, "w": 262.0, "h": 38.0, "line_num": 1, "text": "inpur-number =", "cluster_label": 0, "indentation": 0}, {"x": 159.0, "y": 53.0, "w": 393.0, "h": 42.0, "line_num": 2, "text": "int(impur (Enter number)", "cluster_label": 1, "indentation": 1}, {"x": 80.0, "y": 108.0, "w": 368.0, "h": 41.0, "line_num": 3, "text": "Val = inpur-number", "cluster_label": 0, "indentation": 0}, {"x": 44.0, "y": 162.0, "w": 394.0, "h": 36.0, "line_num": 4, "text": "result = input-number", "cluster_label": 0, "indentation": 0}, {"x": 68.0, "y": 208.0, "w": 299.0, "h": 38.0, "line_num": 5, "text": "While (val>1):", "cluster_label": 0, "indentation": 0}, {"x": 156.0, "y": 259.0, "w": 89.0, "h": 34.0, "line_num": 6, "text": "val =", "cluster_label": 1, "indentation": 1}, {"x": 316.0, "y": 244.0, "w": 164.0, "h": 48.0, "line_num": 7, "text": "Val -1", "cluster_label": 2, "indentation": 3}, {"x": 118.0, "y": 308.0, "w": 15.0, "h": 25.0, "line_num": 8, "text": "L", "cluster_label": 1, "indentation": 1}, {"x": 136.0, "y": 309.0, "w": 373.0, "h": 37.0, "line_num": 9, "text": "Result = result & val", "cluster_label": 1, "indentation": 1}, {"x": 55.0, "y": 365.0, "w": 520.0, "h": 40.0, "line_num": 10, "text": "print ('factorial f& +shr(input-nale]", "cluster_label": 0, "indentation": 0}, {"x": 240.0, "y": 410.0, "w": 265.0, "h": 45.0, "line_num": 11, "text": "+ spr (result))", "cluster_label": 3, "indentation": 2}], "ir_algo_output_edit_distance": 62, "prompting_method": "cot-test5", "lm_post_processed_code": "input_number = \n    int(input('Enter number'))\nval = input_number\nresult = input_number\nwhile (val>1):\n    val = \n            val -1\n    result = result & val\nprint ('factorial of ' + str(input_number)\n        + str(result))\n", "lm_post_processed_edit_distance": 40}, {"image_id": 3, "image_height": 465, "image_width": 595, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 52.0, "y": 13.0, "w": 262.0, "h": 38.0, "line_num": 1, "text": "inpur-number ="}, {"x": 159.0, "y": 53.0, "w": 393.0, "h": 42.0, "line_num": 2, "text": "int(impur (Enter number)"}, {"x": 80.0, "y": 108.0, "w": 368.0, "h": 41.0, "line_num": 3, "text": "Val = inpur-number"}, {"x": 44.0, "y": 162.0, "w": 394.0, "h": 36.0, "line_num": 4, "text": "result = input-number"}, {"x": 68.0, "y": 208.0, "w": 299.0, "h": 38.0, "line_num": 5, "text": "While (val>1):"}, {"x": 156.0, "y": 259.0, "w": 89.0, "h": 34.0, "line_num": 6, "text": "val ="}, {"x": 316.0, "y": 244.0, "w": 164.0, "h": 48.0, "line_num": 7, "text": "Val -1"}, {"x": 118.0, "y": 308.0, "w": 15.0, "h": 25.0, "line_num": 8, "text": "L"}, {"x": 136.0, "y": 309.0, "w": 373.0, "h": 37.0, "line_num": 9, "text": "Result = result & val"}, {"x": 55.0, "y": 365.0, "w": 520.0, "h": 40.0, "line_num": 10, "text": "print ('factorial f& +shr(input-nale]"}, {"x": 240.0, "y": 410.0, "w": 265.0, "h": 45.0, "line_num": 11, "text": "+ spr (result))"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 57.81818181818182, "ir_algo_output_code": "inpur-number =\n    int(impur (Enter number)\nVal = inpur-number\nresult = input-number\nWhile (val>1):\n    val =\n            Val -1\n    L\n    Result = result & val\nprint ('factorial f& +shr(input-nale]\n        + spr (result))\n", "ir_algo_output_indented_lines": [{"x": 52.0, "y": 13.0, "w": 262.0, "h": 38.0, "line_num": 1, "text": "inpur-number =", "cluster_label": 0, "indentation": 0}, {"x": 159.0, "y": 53.0, "w": 393.0, "h": 42.0, "line_num": 2, "text": "int(impur (Enter number)", "cluster_label": 1, "indentation": 1}, {"x": 80.0, "y": 108.0, "w": 368.0, "h": 41.0, "line_num": 3, "text": "Val = inpur-number", "cluster_label": 0, "indentation": 0}, {"x": 44.0, "y": 162.0, "w": 394.0, "h": 36.0, "line_num": 4, "text": "result = input-number", "cluster_label": 0, "indentation": 0}, {"x": 68.0, "y": 208.0, "w": 299.0, "h": 38.0, "line_num": 5, "text": "While (val>1):", "cluster_label": 0, "indentation": 0}, {"x": 156.0, "y": 259.0, "w": 89.0, "h": 34.0, "line_num": 6, "text": "val =", "cluster_label": 1, "indentation": 1}, {"x": 316.0, "y": 244.0, "w": 164.0, "h": 48.0, "line_num": 7, "text": "Val -1", "cluster_label": 2, "indentation": 3}, {"x": 118.0, "y": 308.0, "w": 15.0, "h": 25.0, "line_num": 8, "text": "L", "cluster_label": 1, "indentation": 1}, {"x": 136.0, "y": 309.0, "w": 373.0, "h": 37.0, "line_num": 9, "text": "Result = result & val", "cluster_label": 1, "indentation": 1}, {"x": 55.0, "y": 365.0, "w": 520.0, "h": 40.0, "line_num": 10, "text": "print ('factorial f& +shr(input-nale]", "cluster_label": 0, "indentation": 0}, {"x": 240.0, "y": 410.0, "w": 265.0, "h": 45.0, "line_num": 11, "text": "+ spr (result))", "cluster_label": 3, "indentation": 2}], "ir_algo_output_edit_distance": 62, "prompting_method": "simple-test2", "lm_post_processed_code": "input_number = int(input(\"Enter number\"))\nval = input_number\nresult = input_number\nwhile (val>1):\n    val = val -1\n    result = result & val\nprint ('factorial of ' + str(input_number) + ' is ' + str(result))\n", "lm_post_processed_edit_distance": 16}, {"image_id": 3, "image_height": 465, "image_width": 595, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 52.0, "y": 13.0, "w": 262.0, "h": 38.0, "line_num": 1, "text": "inpur-number ="}, {"x": 159.0, "y": 53.0, "w": 393.0, "h": 42.0, "line_num": 2, "text": "int(impur (Enter number)"}, {"x": 80.0, "y": 108.0, "w": 368.0, "h": 41.0, "line_num": 3, "text": "Val = inpur-number"}, {"x": 44.0, "y": 162.0, "w": 394.0, "h": 36.0, "line_num": 4, "text": "result = input-number"}, {"x": 68.0, "y": 208.0, "w": 299.0, "h": 38.0, "line_num": 5, "text": "While (val>1):"}, {"x": 156.0, "y": 259.0, "w": 89.0, "h": 34.0, "line_num": 6, "text": "val ="}, {"x": 316.0, "y": 244.0, "w": 164.0, "h": 48.0, "line_num": 7, "text": "Val -1"}, {"x": 118.0, "y": 308.0, "w": 15.0, "h": 25.0, "line_num": 8, "text": "L"}, {"x": 136.0, "y": 309.0, "w": 373.0, "h": 37.0, "line_num": 9, "text": "Result = result & val"}, {"x": 55.0, "y": 365.0, "w": 520.0, "h": 40.0, "line_num": 10, "text": "print ('factorial f& +shr(input-nale]"}, {"x": 240.0, "y": 410.0, "w": 265.0, "h": 45.0, "line_num": 11, "text": "+ spr (result))"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 57.81818181818182, "ir_algo_output_code": "inpur-number =\n    int(impur (Enter number)\nVal = inpur-number\nresult = input-number\nWhile (val>1):\n    val =\n            Val -1\n    L\n    Result = result & val\nprint ('factorial f& +shr(input-nale]\n        + spr (result))\n", "ir_algo_output_indented_lines": [{"x": 52.0, "y": 13.0, "w": 262.0, "h": 38.0, "line_num": 1, "text": "inpur-number =", "cluster_label": 0, "indentation": 0}, {"x": 159.0, "y": 53.0, "w": 393.0, "h": 42.0, "line_num": 2, "text": "int(impur (Enter number)", "cluster_label": 1, "indentation": 1}, {"x": 80.0, "y": 108.0, "w": 368.0, "h": 41.0, "line_num": 3, "text": "Val = inpur-number", "cluster_label": 0, "indentation": 0}, {"x": 44.0, "y": 162.0, "w": 394.0, "h": 36.0, "line_num": 4, "text": "result = input-number", "cluster_label": 0, "indentation": 0}, {"x": 68.0, "y": 208.0, "w": 299.0, "h": 38.0, "line_num": 5, "text": "While (val>1):", "cluster_label": 0, "indentation": 0}, {"x": 156.0, "y": 259.0, "w": 89.0, "h": 34.0, "line_num": 6, "text": "val =", "cluster_label": 1, "indentation": 1}, {"x": 316.0, "y": 244.0, "w": 164.0, "h": 48.0, "line_num": 7, "text": "Val -1", "cluster_label": 2, "indentation": 3}, {"x": 118.0, "y": 308.0, "w": 15.0, "h": 25.0, "line_num": 8, "text": "L", "cluster_label": 1, "indentation": 1}, {"x": 136.0, "y": 309.0, "w": 373.0, "h": 37.0, "line_num": 9, "text": "Result = result & val", "cluster_label": 1, "indentation": 1}, {"x": 55.0, "y": 365.0, "w": 520.0, "h": 40.0, "line_num": 10, "text": "print ('factorial f& +shr(input-nale]", "cluster_label": 0, "indentation": 0}, {"x": 240.0, "y": 410.0, "w": 265.0, "h": 45.0, "line_num": 11, "text": "+ spr (result))", "cluster_label": 3, "indentation": 2}], "ir_algo_output_edit_distance": 62, "prompting_method": "simple-test3", "lm_post_processed_code": "input_number = int(input(\"Enter number\"))\nval = input_number\nresult = input_number\nwhile (val>1):\n    val = val -1\n    result = result & val\nprint ('factorial of ' + str(input_number) + ' is ' + str(result))\n", "lm_post_processed_edit_distance": 16}, {"image_id": 3, "image_height": 465, "image_width": 595, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 52.0, "y": 13.0, "w": 262.0, "h": 38.0, "line_num": 1, "text": "inpur-number ="}, {"x": 159.0, "y": 53.0, "w": 393.0, "h": 42.0, "line_num": 2, "text": "int(impur (Enter number)"}, {"x": 80.0, "y": 108.0, "w": 368.0, "h": 41.0, "line_num": 3, "text": "Val = inpur-number"}, {"x": 44.0, "y": 162.0, "w": 394.0, "h": 36.0, "line_num": 4, "text": "result = input-number"}, {"x": 68.0, "y": 208.0, "w": 299.0, "h": 38.0, "line_num": 5, "text": "While (val>1):"}, {"x": 156.0, "y": 259.0, "w": 89.0, "h": 34.0, "line_num": 6, "text": "val ="}, {"x": 316.0, "y": 244.0, "w": 164.0, "h": 48.0, "line_num": 7, "text": "Val -1"}, {"x": 118.0, "y": 308.0, "w": 15.0, "h": 25.0, "line_num": 8, "text": "L"}, {"x": 136.0, "y": 309.0, "w": 373.0, "h": 37.0, "line_num": 9, "text": "Result = result & val"}, {"x": 55.0, "y": 365.0, "w": 520.0, "h": 40.0, "line_num": 10, "text": "print ('factorial f& +shr(input-nale]"}, {"x": 240.0, "y": 410.0, "w": 265.0, "h": 45.0, "line_num": 11, "text": "+ spr (result))"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "inpur-number =\n    int(impur (Enter number)\nVal = inpur-number\nresult = input-number\n    While (val>1):\n        val =\n            Val -1\n        L\n            Result = result & val\nprint ('factorial f& +shr(input-nale]\n    + spr (result))\n", "ir_algo_output_indented_lines": [{"x": 52.0, "y": 13.0, "w": 262.0, "h": 38.0, "line_num": 1, "text": "inpur-number =", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 159.0, "y": 53.0, "w": 393.0, "h": 42.0, "line_num": 2, "text": "int(impur (Enter number)", "delta": 107.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 80.0, "y": 108.0, "w": 368.0, "h": 41.0, "line_num": 3, "text": "Val = inpur-number", "delta": -79.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 44.0, "y": 162.0, "w": 394.0, "h": 36.0, "line_num": 4, "text": "result = input-number", "delta": -36.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 68.0, "y": 208.0, "w": 299.0, "h": 38.0, "line_num": 5, "text": "While (val>1):", "delta": 24.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 156.0, "y": 259.0, "w": 89.0, "h": 34.0, "line_num": 6, "text": "val =", "delta": 88.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 316.0, "y": 244.0, "w": 164.0, "h": 48.0, "line_num": 7, "text": "Val -1", "delta": 160.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 118.0, "y": 308.0, "w": 15.0, "h": 25.0, "line_num": 8, "text": "L", "delta": -198.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 136.0, "y": 309.0, "w": 373.0, "h": 37.0, "line_num": 9, "text": "Result = result & val", "delta": 18.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 55.0, "y": 365.0, "w": 520.0, "h": 40.0, "line_num": 10, "text": "print ('factorial f& +shr(input-nale]", "delta": -81.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 240.0, "y": 410.0, "w": 265.0, "h": 45.0, "line_num": 11, "text": "+ spr (result))", "delta": 185.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}], "ir_algo_output_edit_distance": 82, "prompting_method": "none", "lm_post_processed_code": "inpur-number =\n    int(impur (Enter number)\nVal = inpur-number\nresult = input-number\n    While (val>1):\n        val =\n            Val -1\n        L\n            Result = result & val\nprint ('factorial f& +shr(input-nale]\n    + spr (result))\n", "lm_post_processed_edit_distance": 82}, {"image_id": 3, "image_height": 465, "image_width": 595, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 52.0, "y": 13.0, "w": 262.0, "h": 38.0, "line_num": 1, "text": "inpur-number ="}, {"x": 159.0, "y": 53.0, "w": 393.0, "h": 42.0, "line_num": 2, "text": "int(impur (Enter number)"}, {"x": 80.0, "y": 108.0, "w": 368.0, "h": 41.0, "line_num": 3, "text": "Val = inpur-number"}, {"x": 44.0, "y": 162.0, "w": 394.0, "h": 36.0, "line_num": 4, "text": "result = input-number"}, {"x": 68.0, "y": 208.0, "w": 299.0, "h": 38.0, "line_num": 5, "text": "While (val>1):"}, {"x": 156.0, "y": 259.0, "w": 89.0, "h": 34.0, "line_num": 6, "text": "val ="}, {"x": 316.0, "y": 244.0, "w": 164.0, "h": 48.0, "line_num": 7, "text": "Val -1"}, {"x": 118.0, "y": 308.0, "w": 15.0, "h": 25.0, "line_num": 8, "text": "L"}, {"x": 136.0, "y": 309.0, "w": 373.0, "h": 37.0, "line_num": 9, "text": "Result = result & val"}, {"x": 55.0, "y": 365.0, "w": 520.0, "h": 40.0, "line_num": 10, "text": "print ('factorial f& +shr(input-nale]"}, {"x": 240.0, "y": 410.0, "w": 265.0, "h": 45.0, "line_num": 11, "text": "+ spr (result))"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "inpur-number =\n    int(impur (Enter number)\nVal = inpur-number\nresult = input-number\n    While (val>1):\n        val =\n            Val -1\n        L\n            Result = result & val\nprint ('factorial f& +shr(input-nale]\n    + spr (result))\n", "ir_algo_output_indented_lines": [{"x": 52.0, "y": 13.0, "w": 262.0, "h": 38.0, "line_num": 1, "text": "inpur-number =", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 159.0, "y": 53.0, "w": 393.0, "h": 42.0, "line_num": 2, "text": "int(impur (Enter number)", "delta": 107.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 80.0, "y": 108.0, "w": 368.0, "h": 41.0, "line_num": 3, "text": "Val = inpur-number", "delta": -79.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 44.0, "y": 162.0, "w": 394.0, "h": 36.0, "line_num": 4, "text": "result = input-number", "delta": -36.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 68.0, "y": 208.0, "w": 299.0, "h": 38.0, "line_num": 5, "text": "While (val>1):", "delta": 24.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 156.0, "y": 259.0, "w": 89.0, "h": 34.0, "line_num": 6, "text": "val =", "delta": 88.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 316.0, "y": 244.0, "w": 164.0, "h": 48.0, "line_num": 7, "text": "Val -1", "delta": 160.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 118.0, "y": 308.0, "w": 15.0, "h": 25.0, "line_num": 8, "text": "L", "delta": -198.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 136.0, "y": 309.0, "w": 373.0, "h": 37.0, "line_num": 9, "text": "Result = result & val", "delta": 18.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 55.0, "y": 365.0, "w": 520.0, "h": 40.0, "line_num": 10, "text": "print ('factorial f& +shr(input-nale]", "delta": -81.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 240.0, "y": 410.0, "w": 265.0, "h": 45.0, "line_num": 11, "text": "+ spr (result))", "delta": 185.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}], "ir_algo_output_edit_distance": 82, "prompting_method": "cot-test1", "lm_post_processed_code": "input_number = \n    int(input(\"Enter number\"))\nval = input_number\nresult = input_number\n    while (val>1):\n        val = \n            val -1\n        result = result & val\nprint ('factorial of ' + str(input_number)\n    + str(result))\n", "lm_post_processed_edit_distance": 50}, {"image_id": 3, "image_height": 465, "image_width": 595, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 52.0, "y": 13.0, "w": 262.0, "h": 38.0, "line_num": 1, "text": "inpur-number ="}, {"x": 159.0, "y": 53.0, "w": 393.0, "h": 42.0, "line_num": 2, "text": "int(impur (Enter number)"}, {"x": 80.0, "y": 108.0, "w": 368.0, "h": 41.0, "line_num": 3, "text": "Val = inpur-number"}, {"x": 44.0, "y": 162.0, "w": 394.0, "h": 36.0, "line_num": 4, "text": "result = input-number"}, {"x": 68.0, "y": 208.0, "w": 299.0, "h": 38.0, "line_num": 5, "text": "While (val>1):"}, {"x": 156.0, "y": 259.0, "w": 89.0, "h": 34.0, "line_num": 6, "text": "val ="}, {"x": 316.0, "y": 244.0, "w": 164.0, "h": 48.0, "line_num": 7, "text": "Val -1"}, {"x": 118.0, "y": 308.0, "w": 15.0, "h": 25.0, "line_num": 8, "text": "L"}, {"x": 136.0, "y": 309.0, "w": 373.0, "h": 37.0, "line_num": 9, "text": "Result = result & val"}, {"x": 55.0, "y": 365.0, "w": 520.0, "h": 40.0, "line_num": 10, "text": "print ('factorial f& +shr(input-nale]"}, {"x": 240.0, "y": 410.0, "w": 265.0, "h": 45.0, "line_num": 11, "text": "+ spr (result))"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "inpur-number =\n    int(impur (Enter number)\nVal = inpur-number\nresult = input-number\n    While (val>1):\n        val =\n            Val -1\n        L\n            Result = result & val\nprint ('factorial f& +shr(input-nale]\n    + spr (result))\n", "ir_algo_output_indented_lines": [{"x": 52.0, "y": 13.0, "w": 262.0, "h": 38.0, "line_num": 1, "text": "inpur-number =", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 159.0, "y": 53.0, "w": 393.0, "h": 42.0, "line_num": 2, "text": "int(impur (Enter number)", "delta": 107.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 80.0, "y": 108.0, "w": 368.0, "h": 41.0, "line_num": 3, "text": "Val = inpur-number", "delta": -79.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 44.0, "y": 162.0, "w": 394.0, "h": 36.0, "line_num": 4, "text": "result = input-number", "delta": -36.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 68.0, "y": 208.0, "w": 299.0, "h": 38.0, "line_num": 5, "text": "While (val>1):", "delta": 24.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 156.0, "y": 259.0, "w": 89.0, "h": 34.0, "line_num": 6, "text": "val =", "delta": 88.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 316.0, "y": 244.0, "w": 164.0, "h": 48.0, "line_num": 7, "text": "Val -1", "delta": 160.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 118.0, "y": 308.0, "w": 15.0, "h": 25.0, "line_num": 8, "text": "L", "delta": -198.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 136.0, "y": 309.0, "w": 373.0, "h": 37.0, "line_num": 9, "text": "Result = result & val", "delta": 18.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 55.0, "y": 365.0, "w": 520.0, "h": 40.0, "line_num": 10, "text": "print ('factorial f& +shr(input-nale]", "delta": -81.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 240.0, "y": 410.0, "w": 265.0, "h": 45.0, "line_num": 11, "text": "+ spr (result))", "delta": 185.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}], "ir_algo_output_edit_distance": 82, "prompting_method": "cot-test5", "lm_post_processed_code": "input_number = int(input(\"Enter number\"))\nval = input_number\nresult = input_number\nwhile (val>1):\n    val = val -1\n    result = result & val\nprint ('factorial of ' + str(input_number) + str(result))\n", "lm_post_processed_edit_distance": 22}, {"image_id": 3, "image_height": 465, "image_width": 595, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 52.0, "y": 13.0, "w": 262.0, "h": 38.0, "line_num": 1, "text": "inpur-number ="}, {"x": 159.0, "y": 53.0, "w": 393.0, "h": 42.0, "line_num": 2, "text": "int(impur (Enter number)"}, {"x": 80.0, "y": 108.0, "w": 368.0, "h": 41.0, "line_num": 3, "text": "Val = inpur-number"}, {"x": 44.0, "y": 162.0, "w": 394.0, "h": 36.0, "line_num": 4, "text": "result = input-number"}, {"x": 68.0, "y": 208.0, "w": 299.0, "h": 38.0, "line_num": 5, "text": "While (val>1):"}, {"x": 156.0, "y": 259.0, "w": 89.0, "h": 34.0, "line_num": 6, "text": "val ="}, {"x": 316.0, "y": 244.0, "w": 164.0, "h": 48.0, "line_num": 7, "text": "Val -1"}, {"x": 118.0, "y": 308.0, "w": 15.0, "h": 25.0, "line_num": 8, "text": "L"}, {"x": 136.0, "y": 309.0, "w": 373.0, "h": 37.0, "line_num": 9, "text": "Result = result & val"}, {"x": 55.0, "y": 365.0, "w": 520.0, "h": 40.0, "line_num": 10, "text": "print ('factorial f& +shr(input-nale]"}, {"x": 240.0, "y": 410.0, "w": 265.0, "h": 45.0, "line_num": 11, "text": "+ spr (result))"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "inpur-number =\n    int(impur (Enter number)\nVal = inpur-number\nresult = input-number\n    While (val>1):\n        val =\n            Val -1\n        L\n            Result = result & val\nprint ('factorial f& +shr(input-nale]\n    + spr (result))\n", "ir_algo_output_indented_lines": [{"x": 52.0, "y": 13.0, "w": 262.0, "h": 38.0, "line_num": 1, "text": "inpur-number =", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 159.0, "y": 53.0, "w": 393.0, "h": 42.0, "line_num": 2, "text": "int(impur (Enter number)", "delta": 107.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 80.0, "y": 108.0, "w": 368.0, "h": 41.0, "line_num": 3, "text": "Val = inpur-number", "delta": -79.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 44.0, "y": 162.0, "w": 394.0, "h": 36.0, "line_num": 4, "text": "result = input-number", "delta": -36.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 68.0, "y": 208.0, "w": 299.0, "h": 38.0, "line_num": 5, "text": "While (val>1):", "delta": 24.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 156.0, "y": 259.0, "w": 89.0, "h": 34.0, "line_num": 6, "text": "val =", "delta": 88.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 316.0, "y": 244.0, "w": 164.0, "h": 48.0, "line_num": 7, "text": "Val -1", "delta": 160.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 118.0, "y": 308.0, "w": 15.0, "h": 25.0, "line_num": 8, "text": "L", "delta": -198.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 136.0, "y": 309.0, "w": 373.0, "h": 37.0, "line_num": 9, "text": "Result = result & val", "delta": 18.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 55.0, "y": 365.0, "w": 520.0, "h": 40.0, "line_num": 10, "text": "print ('factorial f& +shr(input-nale]", "delta": -81.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 240.0, "y": 410.0, "w": 265.0, "h": 45.0, "line_num": 11, "text": "+ spr (result))", "delta": 185.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}], "ir_algo_output_edit_distance": 82, "prompting_method": "simple-test2", "lm_post_processed_code": "input_number = int(input(\"Enter number\"))\nval = input_number\nresult = input_number\nwhile (val>1):\n    val = val -1\n    result = result & val\nprint ('factorial of ' + str(input_number) + ' is ' + str(result))\n", "lm_post_processed_edit_distance": 16}, {"image_id": 3, "image_height": 465, "image_width": 595, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 52.0, "y": 13.0, "w": 262.0, "h": 38.0, "line_num": 1, "text": "inpur-number ="}, {"x": 159.0, "y": 53.0, "w": 393.0, "h": 42.0, "line_num": 2, "text": "int(impur (Enter number)"}, {"x": 80.0, "y": 108.0, "w": 368.0, "h": 41.0, "line_num": 3, "text": "Val = inpur-number"}, {"x": 44.0, "y": 162.0, "w": 394.0, "h": 36.0, "line_num": 4, "text": "result = input-number"}, {"x": 68.0, "y": 208.0, "w": 299.0, "h": 38.0, "line_num": 5, "text": "While (val>1):"}, {"x": 156.0, "y": 259.0, "w": 89.0, "h": 34.0, "line_num": 6, "text": "val ="}, {"x": 316.0, "y": 244.0, "w": 164.0, "h": 48.0, "line_num": 7, "text": "Val -1"}, {"x": 118.0, "y": 308.0, "w": 15.0, "h": 25.0, "line_num": 8, "text": "L"}, {"x": 136.0, "y": 309.0, "w": 373.0, "h": 37.0, "line_num": 9, "text": "Result = result & val"}, {"x": 55.0, "y": 365.0, "w": 520.0, "h": 40.0, "line_num": 10, "text": "print ('factorial f& +shr(input-nale]"}, {"x": 240.0, "y": 410.0, "w": 265.0, "h": 45.0, "line_num": 11, "text": "+ spr (result))"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "inpur-number =\n    int(impur (Enter number)\nVal = inpur-number\nresult = input-number\n    While (val>1):\n        val =\n            Val -1\n        L\n            Result = result & val\nprint ('factorial f& +shr(input-nale]\n    + spr (result))\n", "ir_algo_output_indented_lines": [{"x": 52.0, "y": 13.0, "w": 262.0, "h": 38.0, "line_num": 1, "text": "inpur-number =", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 159.0, "y": 53.0, "w": 393.0, "h": 42.0, "line_num": 2, "text": "int(impur (Enter number)", "delta": 107.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 80.0, "y": 108.0, "w": 368.0, "h": 41.0, "line_num": 3, "text": "Val = inpur-number", "delta": -79.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 44.0, "y": 162.0, "w": 394.0, "h": 36.0, "line_num": 4, "text": "result = input-number", "delta": -36.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 68.0, "y": 208.0, "w": 299.0, "h": 38.0, "line_num": 5, "text": "While (val>1):", "delta": 24.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 156.0, "y": 259.0, "w": 89.0, "h": 34.0, "line_num": 6, "text": "val =", "delta": 88.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 316.0, "y": 244.0, "w": 164.0, "h": 48.0, "line_num": 7, "text": "Val -1", "delta": 160.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 118.0, "y": 308.0, "w": 15.0, "h": 25.0, "line_num": 8, "text": "L", "delta": -198.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 136.0, "y": 309.0, "w": 373.0, "h": 37.0, "line_num": 9, "text": "Result = result & val", "delta": 18.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 55.0, "y": 365.0, "w": 520.0, "h": 40.0, "line_num": 10, "text": "print ('factorial f& +shr(input-nale]", "delta": -81.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 240.0, "y": 410.0, "w": 265.0, "h": 45.0, "line_num": 11, "text": "+ spr (result))", "delta": 185.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}], "ir_algo_output_edit_distance": 82, "prompting_method": "simple-test3", "lm_post_processed_code": "input_number = int(input(\"Enter number\"))\nval = input_number\nresult = input_number\nwhile (val>1):\n    val = val -1\n    result = result & val\nprint ('factorial of ' + str(input_number) + ' is ' + str(result))\n", "lm_post_processed_edit_distance": 16}, {"image_id": 5, "image_height": 1169, "image_width": 2599, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 60.0, "y": 49.0, "w": 637.0, "h": 88.0, "line_num": 1, "text": "def main ( ) ."}, {"x": 2070.0, "y": 34.0, "w": 365.0, "h": 48.0, "line_num": 2, "text": "81108 x68.09"}, {"x": 2473.0, "y": 191.0, "w": 9.0, "h": 4.0, "line_num": 3, "text": "-"}, {"x": 316.0, "y": 209.0, "w": 2218.0, "h": 123.0, "line_num": 4, "text": "num = input (\"enter the number you want to add )"}, {"x": 298.0, "y": 357.0, "w": 1913.0, "h": 94.0, "line_num": 5, "text": "Som=0"}, {"x": 23.0, "y": 412.0, "w": 178.0, "h": 37.0, "line_num": 6, "text": "apnivoa"}, {"x": 12.0, "y": 464.0, "w": 738.0, "h": 42.0, "line_num": 7, "text": "talioteb adt ero preHab10591 100Y"}, {"x": 771.0, "y": 471.0, "w": 485.0, "h": 45.0, "line_num": 8, "text": "rot ti of no blerl sabelq"}, {"x": 315.0, "y": 506.0, "w": 857.0, "h": 102.0, "line_num": 9, "text": "for \u00e8 in str (num):"}, {"x": 1963.0, "y": 593.0, "w": 239.0, "h": 42.0, "line_num": 10, "text": "tatoO auze"}, {"x": 1827.0, "y": 645.0, "w": 402.0, "h": 47.0, "line_num": 11, "text": "hedmull inuopDA"}, {"x": 646.0, "y": 685.0, "w": 832.0, "h": 92.0, "line_num": 12, "text": "Sum = Sum+ int (i)"}, {"x": 1922.0, "y": 705.0, "w": 316.0, "h": 47.0, "line_num": 13, "text": "eltil tnuossA"}, {"x": 307.0, "y": 825.0, "w": 2136.0, "h": 108.0, "line_num": 14, "text": "Print (\"sum of the value you entered in, som)"}, {"x": 1131.0, "y": 816.0, "w": 257.0, "h": 50.0, "line_num": 15, "text": "00.000,83"}, {"x": 1305.0, "y": 990.0, "w": 89.0, "h": 54.0, "line_num": 16, "text": "BM"}, {"x": 867.0, "y": 1057.0, "w": 100.0, "h": 39.0, "line_num": 17, "text": "nioit"}, {"x": 1555.0, "y": 1055.0, "w": 704.0, "h": 54.0, "line_num": 18, "text": "hoitqO Inemoandaid 12516Mil"}], "ir_algo_name": "none", "ir_algo_output_code": "def main ( ) .\n81108 x68.09\n-\nnum = input (\"enter the number you want to add )\nSom=0\napnivoa\ntalioteb adt ero preHab10591 100Y\nrot ti of no blerl sabelq\nfor \u00e8 in str (num):\ntatoO auze\nhedmull inuopDA\nSum = Sum+ int (i)\neltil tnuossA\nPrint (\"sum of the value you entered in, som)\n00.000,83\nBM\nnioit\nhoitqO Inemoandaid 12516Mil", "ir_algo_output_edit_distance": 179, "prompting_method": "none", "lm_post_processed_code": "def main ( ) .\n81108 x68.09\n-\nnum = input (\"enter the number you want to add )\nSom=0\napnivoa\ntalioteb adt ero preHab10591 100Y\nrot ti of no blerl sabelq\nfor \u00e8 in str (num):\ntatoO auze\nhedmull inuopDA\nSum = Sum+ int (i)\neltil tnuossA\nPrint (\"sum of the value you entered in, som)\n00.000,83\nBM\nnioit\nhoitqO Inemoandaid 12516Mil", "lm_post_processed_edit_distance": 179}, {"image_id": 5, "image_height": 1169, "image_width": 2599, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 60.0, "y": 49.0, "w": 637.0, "h": 88.0, "line_num": 1, "text": "def main ( ) ."}, {"x": 2070.0, "y": 34.0, "w": 365.0, "h": 48.0, "line_num": 2, "text": "81108 x68.09"}, {"x": 2473.0, "y": 191.0, "w": 9.0, "h": 4.0, "line_num": 3, "text": "-"}, {"x": 316.0, "y": 209.0, "w": 2218.0, "h": 123.0, "line_num": 4, "text": "num = input (\"enter the number you want to add )"}, {"x": 298.0, "y": 357.0, "w": 1913.0, "h": 94.0, "line_num": 5, "text": "Som=0"}, {"x": 23.0, "y": 412.0, "w": 178.0, "h": 37.0, "line_num": 6, "text": "apnivoa"}, {"x": 12.0, "y": 464.0, "w": 738.0, "h": 42.0, "line_num": 7, "text": "talioteb adt ero preHab10591 100Y"}, {"x": 771.0, "y": 471.0, "w": 485.0, "h": 45.0, "line_num": 8, "text": "rot ti of no blerl sabelq"}, {"x": 315.0, "y": 506.0, "w": 857.0, "h": 102.0, "line_num": 9, "text": "for \u00e8 in str (num):"}, {"x": 1963.0, "y": 593.0, "w": 239.0, "h": 42.0, "line_num": 10, "text": "tatoO auze"}, {"x": 1827.0, "y": 645.0, "w": 402.0, "h": 47.0, "line_num": 11, "text": "hedmull inuopDA"}, {"x": 646.0, "y": 685.0, "w": 832.0, "h": 92.0, "line_num": 12, "text": "Sum = Sum+ int (i)"}, {"x": 1922.0, "y": 705.0, "w": 316.0, "h": 47.0, "line_num": 13, "text": "eltil tnuossA"}, {"x": 307.0, "y": 825.0, "w": 2136.0, "h": 108.0, "line_num": 14, "text": "Print (\"sum of the value you entered in, som)"}, {"x": 1131.0, "y": 816.0, "w": 257.0, "h": 50.0, "line_num": 15, "text": "00.000,83"}, {"x": 1305.0, "y": 990.0, "w": 89.0, "h": 54.0, "line_num": 16, "text": "BM"}, {"x": 867.0, "y": 1057.0, "w": 100.0, "h": 39.0, "line_num": 17, "text": "nioit"}, {"x": 1555.0, "y": 1055.0, "w": 704.0, "h": 54.0, "line_num": 18, "text": "hoitqO Inemoandaid 12516Mil"}], "ir_algo_name": "none", "ir_algo_output_code": "def main ( ) .\n81108 x68.09\n-\nnum = input (\"enter the number you want to add )\nSom=0\napnivoa\ntalioteb adt ero preHab10591 100Y\nrot ti of no blerl sabelq\nfor \u00e8 in str (num):\ntatoO auze\nhedmull inuopDA\nSum = Sum+ int (i)\neltil tnuossA\nPrint (\"sum of the value you entered in, som)\n00.000,83\nBM\nnioit\nhoitqO Inemoandaid 12516Mil", "ir_algo_output_edit_distance": 179, "prompting_method": "cot-test1", "lm_post_processed_code": "def main ( ) :\n    num = input (\"enter the number you want to add\")\n    Sum=0\n    for i in str (num):\n        Sum = Sum+ int (i)\n    print (\"sum of the value you entered is\", Sum)\n", "lm_post_processed_edit_distance": 14}, {"image_id": 5, "image_height": 1169, "image_width": 2599, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 60.0, "y": 49.0, "w": 637.0, "h": 88.0, "line_num": 1, "text": "def main ( ) ."}, {"x": 2070.0, "y": 34.0, "w": 365.0, "h": 48.0, "line_num": 2, "text": "81108 x68.09"}, {"x": 2473.0, "y": 191.0, "w": 9.0, "h": 4.0, "line_num": 3, "text": "-"}, {"x": 316.0, "y": 209.0, "w": 2218.0, "h": 123.0, "line_num": 4, "text": "num = input (\"enter the number you want to add )"}, {"x": 298.0, "y": 357.0, "w": 1913.0, "h": 94.0, "line_num": 5, "text": "Som=0"}, {"x": 23.0, "y": 412.0, "w": 178.0, "h": 37.0, "line_num": 6, "text": "apnivoa"}, {"x": 12.0, "y": 464.0, "w": 738.0, "h": 42.0, "line_num": 7, "text": "talioteb adt ero preHab10591 100Y"}, {"x": 771.0, "y": 471.0, "w": 485.0, "h": 45.0, "line_num": 8, "text": "rot ti of no blerl sabelq"}, {"x": 315.0, "y": 506.0, "w": 857.0, "h": 102.0, "line_num": 9, "text": "for \u00e8 in str (num):"}, {"x": 1963.0, "y": 593.0, "w": 239.0, "h": 42.0, "line_num": 10, "text": "tatoO auze"}, {"x": 1827.0, "y": 645.0, "w": 402.0, "h": 47.0, "line_num": 11, "text": "hedmull inuopDA"}, {"x": 646.0, "y": 685.0, "w": 832.0, "h": 92.0, "line_num": 12, "text": "Sum = Sum+ int (i)"}, {"x": 1922.0, "y": 705.0, "w": 316.0, "h": 47.0, "line_num": 13, "text": "eltil tnuossA"}, {"x": 307.0, "y": 825.0, "w": 2136.0, "h": 108.0, "line_num": 14, "text": "Print (\"sum of the value you entered in, som)"}, {"x": 1131.0, "y": 816.0, "w": 257.0, "h": 50.0, "line_num": 15, "text": "00.000,83"}, {"x": 1305.0, "y": 990.0, "w": 89.0, "h": 54.0, "line_num": 16, "text": "BM"}, {"x": 867.0, "y": 1057.0, "w": 100.0, "h": 39.0, "line_num": 17, "text": "nioit"}, {"x": 1555.0, "y": 1055.0, "w": 704.0, "h": 54.0, "line_num": 18, "text": "hoitqO Inemoandaid 12516Mil"}], "ir_algo_name": "none", "ir_algo_output_code": "def main ( ) .\n81108 x68.09\n-\nnum = input (\"enter the number you want to add )\nSom=0\napnivoa\ntalioteb adt ero preHab10591 100Y\nrot ti of no blerl sabelq\nfor \u00e8 in str (num):\ntatoO auze\nhedmull inuopDA\nSum = Sum+ int (i)\neltil tnuossA\nPrint (\"sum of the value you entered in, som)\n00.000,83\nBM\nnioit\nhoitqO Inemoandaid 12516Mil", "ir_algo_output_edit_distance": 179, "prompting_method": "cot-test5", "lm_post_processed_code": "def main():\nnum = input(\"enter the number you want to add\")\nSum=0\nfor i in str(num):\nSum = Sum+ int(i)\nPrint(\"sum of the value you entered is\", Sum)\n", "lm_post_processed_edit_distance": 32}, {"image_id": 5, "image_height": 1169, "image_width": 2599, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 60.0, "y": 49.0, "w": 637.0, "h": 88.0, "line_num": 1, "text": "def main ( ) ."}, {"x": 2070.0, "y": 34.0, "w": 365.0, "h": 48.0, "line_num": 2, "text": "81108 x68.09"}, {"x": 2473.0, "y": 191.0, "w": 9.0, "h": 4.0, "line_num": 3, "text": "-"}, {"x": 316.0, "y": 209.0, "w": 2218.0, "h": 123.0, "line_num": 4, "text": "num = input (\"enter the number you want to add )"}, {"x": 298.0, "y": 357.0, "w": 1913.0, "h": 94.0, "line_num": 5, "text": "Som=0"}, {"x": 23.0, "y": 412.0, "w": 178.0, "h": 37.0, "line_num": 6, "text": "apnivoa"}, {"x": 12.0, "y": 464.0, "w": 738.0, "h": 42.0, "line_num": 7, "text": "talioteb adt ero preHab10591 100Y"}, {"x": 771.0, "y": 471.0, "w": 485.0, "h": 45.0, "line_num": 8, "text": "rot ti of no blerl sabelq"}, {"x": 315.0, "y": 506.0, "w": 857.0, "h": 102.0, "line_num": 9, "text": "for \u00e8 in str (num):"}, {"x": 1963.0, "y": 593.0, "w": 239.0, "h": 42.0, "line_num": 10, "text": "tatoO auze"}, {"x": 1827.0, "y": 645.0, "w": 402.0, "h": 47.0, "line_num": 11, "text": "hedmull inuopDA"}, {"x": 646.0, "y": 685.0, "w": 832.0, "h": 92.0, "line_num": 12, "text": "Sum = Sum+ int (i)"}, {"x": 1922.0, "y": 705.0, "w": 316.0, "h": 47.0, "line_num": 13, "text": "eltil tnuossA"}, {"x": 307.0, "y": 825.0, "w": 2136.0, "h": 108.0, "line_num": 14, "text": "Print (\"sum of the value you entered in, som)"}, {"x": 1131.0, "y": 816.0, "w": 257.0, "h": 50.0, "line_num": 15, "text": "00.000,83"}, {"x": 1305.0, "y": 990.0, "w": 89.0, "h": 54.0, "line_num": 16, "text": "BM"}, {"x": 867.0, "y": 1057.0, "w": 100.0, "h": 39.0, "line_num": 17, "text": "nioit"}, {"x": 1555.0, "y": 1055.0, "w": 704.0, "h": 54.0, "line_num": 18, "text": "hoitqO Inemoandaid 12516Mil"}], "ir_algo_name": "none", "ir_algo_output_code": "def main ( ) .\n81108 x68.09\n-\nnum = input (\"enter the number you want to add )\nSom=0\napnivoa\ntalioteb adt ero preHab10591 100Y\nrot ti of no blerl sabelq\nfor \u00e8 in str (num):\ntatoO auze\nhedmull inuopDA\nSum = Sum+ int (i)\neltil tnuossA\nPrint (\"sum of the value you entered in, som)\n00.000,83\nBM\nnioit\nhoitqO Inemoandaid 12516Mil", "ir_algo_output_edit_distance": 179, "prompting_method": "simple-test2", "lm_post_processed_code": "def main():\n    num = input(\"enter the number you want to add\")\n    Sum = 0\n    for i in str(num):\n        Sum = Sum + int(i)\n    print(\"sum of the value you entered is\", Sum)\n    return\n", "lm_post_processed_edit_distance": 15}, {"image_id": 5, "image_height": 1169, "image_width": 2599, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 60.0, "y": 49.0, "w": 637.0, "h": 88.0, "line_num": 1, "text": "def main ( ) ."}, {"x": 2070.0, "y": 34.0, "w": 365.0, "h": 48.0, "line_num": 2, "text": "81108 x68.09"}, {"x": 2473.0, "y": 191.0, "w": 9.0, "h": 4.0, "line_num": 3, "text": "-"}, {"x": 316.0, "y": 209.0, "w": 2218.0, "h": 123.0, "line_num": 4, "text": "num = input (\"enter the number you want to add )"}, {"x": 298.0, "y": 357.0, "w": 1913.0, "h": 94.0, "line_num": 5, "text": "Som=0"}, {"x": 23.0, "y": 412.0, "w": 178.0, "h": 37.0, "line_num": 6, "text": "apnivoa"}, {"x": 12.0, "y": 464.0, "w": 738.0, "h": 42.0, "line_num": 7, "text": "talioteb adt ero preHab10591 100Y"}, {"x": 771.0, "y": 471.0, "w": 485.0, "h": 45.0, "line_num": 8, "text": "rot ti of no blerl sabelq"}, {"x": 315.0, "y": 506.0, "w": 857.0, "h": 102.0, "line_num": 9, "text": "for \u00e8 in str (num):"}, {"x": 1963.0, "y": 593.0, "w": 239.0, "h": 42.0, "line_num": 10, "text": "tatoO auze"}, {"x": 1827.0, "y": 645.0, "w": 402.0, "h": 47.0, "line_num": 11, "text": "hedmull inuopDA"}, {"x": 646.0, "y": 685.0, "w": 832.0, "h": 92.0, "line_num": 12, "text": "Sum = Sum+ int (i)"}, {"x": 1922.0, "y": 705.0, "w": 316.0, "h": 47.0, "line_num": 13, "text": "eltil tnuossA"}, {"x": 307.0, "y": 825.0, "w": 2136.0, "h": 108.0, "line_num": 14, "text": "Print (\"sum of the value you entered in, som)"}, {"x": 1131.0, "y": 816.0, "w": 257.0, "h": 50.0, "line_num": 15, "text": "00.000,83"}, {"x": 1305.0, "y": 990.0, "w": 89.0, "h": 54.0, "line_num": 16, "text": "BM"}, {"x": 867.0, "y": 1057.0, "w": 100.0, "h": 39.0, "line_num": 17, "text": "nioit"}, {"x": 1555.0, "y": 1055.0, "w": 704.0, "h": 54.0, "line_num": 18, "text": "hoitqO Inemoandaid 12516Mil"}], "ir_algo_name": "none", "ir_algo_output_code": "def main ( ) .\n81108 x68.09\n-\nnum = input (\"enter the number you want to add )\nSom=0\napnivoa\ntalioteb adt ero preHab10591 100Y\nrot ti of no blerl sabelq\nfor \u00e8 in str (num):\ntatoO auze\nhedmull inuopDA\nSum = Sum+ int (i)\neltil tnuossA\nPrint (\"sum of the value you entered in, som)\n00.000,83\nBM\nnioit\nhoitqO Inemoandaid 12516Mil", "ir_algo_output_edit_distance": 179, "prompting_method": "simple-test3", "lm_post_processed_code": "def main():\n    num = input(\"enter the number you want to add\")\n    Sum=0\n    for i in str(num):\n        Sum = Sum+ int(i)\n    print(\"sum of the value you entered is\", Sum)\n    return\n", "lm_post_processed_edit_distance": 18}, {"image_id": 5, "image_height": 1169, "image_width": 2599, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 60.0, "y": 49.0, "w": 637.0, "h": 88.0, "line_num": 1, "text": "def main ( ) ."}, {"x": 2070.0, "y": 34.0, "w": 365.0, "h": 48.0, "line_num": 2, "text": "81108 x68.09"}, {"x": 2473.0, "y": 191.0, "w": 9.0, "h": 4.0, "line_num": 3, "text": "-"}, {"x": 316.0, "y": 209.0, "w": 2218.0, "h": 123.0, "line_num": 4, "text": "num = input (\"enter the number you want to add )"}, {"x": 298.0, "y": 357.0, "w": 1913.0, "h": 94.0, "line_num": 5, "text": "Som=0"}, {"x": 23.0, "y": 412.0, "w": 178.0, "h": 37.0, "line_num": 6, "text": "apnivoa"}, {"x": 12.0, "y": 464.0, "w": 738.0, "h": 42.0, "line_num": 7, "text": "talioteb adt ero preHab10591 100Y"}, {"x": 771.0, "y": 471.0, "w": 485.0, "h": 45.0, "line_num": 8, "text": "rot ti of no blerl sabelq"}, {"x": 315.0, "y": 506.0, "w": 857.0, "h": 102.0, "line_num": 9, "text": "for \u00e8 in str (num):"}, {"x": 1963.0, "y": 593.0, "w": 239.0, "h": 42.0, "line_num": 10, "text": "tatoO auze"}, {"x": 1827.0, "y": 645.0, "w": 402.0, "h": 47.0, "line_num": 11, "text": "hedmull inuopDA"}, {"x": 646.0, "y": 685.0, "w": 832.0, "h": 92.0, "line_num": 12, "text": "Sum = Sum+ int (i)"}, {"x": 1922.0, "y": 705.0, "w": 316.0, "h": 47.0, "line_num": 13, "text": "eltil tnuossA"}, {"x": 307.0, "y": 825.0, "w": 2136.0, "h": 108.0, "line_num": 14, "text": "Print (\"sum of the value you entered in, som)"}, {"x": 1131.0, "y": 816.0, "w": 257.0, "h": 50.0, "line_num": 15, "text": "00.000,83"}, {"x": 1305.0, "y": 990.0, "w": 89.0, "h": 54.0, "line_num": 16, "text": "BM"}, {"x": 867.0, "y": 1057.0, "w": 100.0, "h": 39.0, "line_num": 17, "text": "nioit"}, {"x": 1555.0, "y": 1055.0, "w": 704.0, "h": 54.0, "line_num": 18, "text": "hoitqO Inemoandaid 12516Mil"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 93.0, "ir_algo_output_code": "def main ( ) .\n                                        81108 x68.09\n                                            -\n    num = input (\"enter the number you want to add )\n    Som=0\napnivoa\ntalioteb adt ero preHab10591 100Y\n            rot ti of no blerl sabelq\n    for \u00e8 in str (num):\n                                    tatoO auze\n                                hedmull inuopDA\n        Sum = Sum+ int (i)\n                                    eltil tnuossA\n    Print (\"sum of the value you entered in, som)\n                    00.000,83\n                        BM\n                nioit\n                            hoitqO Inemoandaid 12516Mil\n", "ir_algo_output_indented_lines": [{"x": 60.0, "y": 49.0, "w": 637.0, "h": 88.0, "line_num": 1, "text": "def main ( ) .", "cluster_label": 1, "indentation": 0}, {"x": 2070.0, "y": 34.0, "w": 365.0, "h": 48.0, "line_num": 2, "text": "81108 x68.09", "cluster_label": 4, "indentation": 10}, {"x": 2473.0, "y": 191.0, "w": 9.0, "h": 4.0, "line_num": 3, "text": "-", "cluster_label": 3, "indentation": 11}, {"x": 316.0, "y": 209.0, "w": 2218.0, "h": 123.0, "line_num": 4, "text": "num = input (\"enter the number you want to add )", "cluster_label": 0, "indentation": 1}, {"x": 298.0, "y": 357.0, "w": 1913.0, "h": 94.0, "line_num": 5, "text": "Som=0", "cluster_label": 0, "indentation": 1}, {"x": 23.0, "y": 412.0, "w": 178.0, "h": 37.0, "line_num": 6, "text": "apnivoa", "cluster_label": 1, "indentation": 0}, {"x": 12.0, "y": 464.0, "w": 738.0, "h": 42.0, "line_num": 7, "text": "talioteb adt ero preHab10591 100Y", "cluster_label": 1, "indentation": 0}, {"x": 771.0, "y": 471.0, "w": 485.0, "h": 45.0, "line_num": 8, "text": "rot ti of no blerl sabelq", "cluster_label": 10, "indentation": 3}, {"x": 315.0, "y": 506.0, "w": 857.0, "h": 102.0, "line_num": 9, "text": "for \u00e8 in str (num):", "cluster_label": 0, "indentation": 1}, {"x": 1963.0, "y": 593.0, "w": 239.0, "h": 42.0, "line_num": 10, "text": "tatoO auze", "cluster_label": 2, "indentation": 9}, {"x": 1827.0, "y": 645.0, "w": 402.0, "h": 47.0, "line_num": 11, "text": "hedmull inuopDA", "cluster_label": 5, "indentation": 8}, {"x": 646.0, "y": 685.0, "w": 832.0, "h": 92.0, "line_num": 12, "text": "Sum = Sum+ int (i)", "cluster_label": 11, "indentation": 2}, {"x": 1922.0, "y": 705.0, "w": 316.0, "h": 47.0, "line_num": 13, "text": "eltil tnuossA", "cluster_label": 2, "indentation": 9}, {"x": 307.0, "y": 825.0, "w": 2136.0, "h": 108.0, "line_num": 14, "text": "Print (\"sum of the value you entered in, som)", "cluster_label": 0, "indentation": 1}, {"x": 1131.0, "y": 816.0, "w": 257.0, "h": 50.0, "line_num": 15, "text": "00.000,83", "cluster_label": 8, "indentation": 5}, {"x": 1305.0, "y": 990.0, "w": 89.0, "h": 54.0, "line_num": 16, "text": "BM", "cluster_label": 7, "indentation": 6}, {"x": 867.0, "y": 1057.0, "w": 100.0, "h": 39.0, "line_num": 17, "text": "nioit", "cluster_label": 9, "indentation": 4}, {"x": 1555.0, "y": 1055.0, "w": 704.0, "h": 54.0, "line_num": 18, "text": "hoitqO Inemoandaid 12516Mil", "cluster_label": 6, "indentation": 7}], "ir_algo_output_edit_distance": 476, "prompting_method": "none", "lm_post_processed_code": "def main ( ) .\n                                        81108 x68.09\n                                            -\n    num = input (\"enter the number you want to add )\n    Som=0\napnivoa\ntalioteb adt ero preHab10591 100Y\n            rot ti of no blerl sabelq\n    for \u00e8 in str (num):\n                                    tatoO auze\n                                hedmull inuopDA\n        Sum = Sum+ int (i)\n                                    eltil tnuossA\n    Print (\"sum of the value you entered in, som)\n                    00.000,83\n                        BM\n                nioit\n                            hoitqO Inemoandaid 12516Mil\n", "lm_post_processed_edit_distance": 476}, {"image_id": 5, "image_height": 1169, "image_width": 2599, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 60.0, "y": 49.0, "w": 637.0, "h": 88.0, "line_num": 1, "text": "def main ( ) ."}, {"x": 2070.0, "y": 34.0, "w": 365.0, "h": 48.0, "line_num": 2, "text": "81108 x68.09"}, {"x": 2473.0, "y": 191.0, "w": 9.0, "h": 4.0, "line_num": 3, "text": "-"}, {"x": 316.0, "y": 209.0, "w": 2218.0, "h": 123.0, "line_num": 4, "text": "num = input (\"enter the number you want to add )"}, {"x": 298.0, "y": 357.0, "w": 1913.0, "h": 94.0, "line_num": 5, "text": "Som=0"}, {"x": 23.0, "y": 412.0, "w": 178.0, "h": 37.0, "line_num": 6, "text": "apnivoa"}, {"x": 12.0, "y": 464.0, "w": 738.0, "h": 42.0, "line_num": 7, "text": "talioteb adt ero preHab10591 100Y"}, {"x": 771.0, "y": 471.0, "w": 485.0, "h": 45.0, "line_num": 8, "text": "rot ti of no blerl sabelq"}, {"x": 315.0, "y": 506.0, "w": 857.0, "h": 102.0, "line_num": 9, "text": "for \u00e8 in str (num):"}, {"x": 1963.0, "y": 593.0, "w": 239.0, "h": 42.0, "line_num": 10, "text": "tatoO auze"}, {"x": 1827.0, "y": 645.0, "w": 402.0, "h": 47.0, "line_num": 11, "text": "hedmull inuopDA"}, {"x": 646.0, "y": 685.0, "w": 832.0, "h": 92.0, "line_num": 12, "text": "Sum = Sum+ int (i)"}, {"x": 1922.0, "y": 705.0, "w": 316.0, "h": 47.0, "line_num": 13, "text": "eltil tnuossA"}, {"x": 307.0, "y": 825.0, "w": 2136.0, "h": 108.0, "line_num": 14, "text": "Print (\"sum of the value you entered in, som)"}, {"x": 1131.0, "y": 816.0, "w": 257.0, "h": 50.0, "line_num": 15, "text": "00.000,83"}, {"x": 1305.0, "y": 990.0, "w": 89.0, "h": 54.0, "line_num": 16, "text": "BM"}, {"x": 867.0, "y": 1057.0, "w": 100.0, "h": 39.0, "line_num": 17, "text": "nioit"}, {"x": 1555.0, "y": 1055.0, "w": 704.0, "h": 54.0, "line_num": 18, "text": "hoitqO Inemoandaid 12516Mil"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 93.0, "ir_algo_output_code": "def main ( ) .\n                                        81108 x68.09\n                                            -\n    num = input (\"enter the number you want to add )\n    Som=0\napnivoa\ntalioteb adt ero preHab10591 100Y\n            rot ti of no blerl sabelq\n    for \u00e8 in str (num):\n                                    tatoO auze\n                                hedmull inuopDA\n        Sum = Sum+ int (i)\n                                    eltil tnuossA\n    Print (\"sum of the value you entered in, som)\n                    00.000,83\n                        BM\n                nioit\n                            hoitqO Inemoandaid 12516Mil\n", "ir_algo_output_indented_lines": [{"x": 60.0, "y": 49.0, "w": 637.0, "h": 88.0, "line_num": 1, "text": "def main ( ) .", "cluster_label": 1, "indentation": 0}, {"x": 2070.0, "y": 34.0, "w": 365.0, "h": 48.0, "line_num": 2, "text": "81108 x68.09", "cluster_label": 4, "indentation": 10}, {"x": 2473.0, "y": 191.0, "w": 9.0, "h": 4.0, "line_num": 3, "text": "-", "cluster_label": 3, "indentation": 11}, {"x": 316.0, "y": 209.0, "w": 2218.0, "h": 123.0, "line_num": 4, "text": "num = input (\"enter the number you want to add )", "cluster_label": 0, "indentation": 1}, {"x": 298.0, "y": 357.0, "w": 1913.0, "h": 94.0, "line_num": 5, "text": "Som=0", "cluster_label": 0, "indentation": 1}, {"x": 23.0, "y": 412.0, "w": 178.0, "h": 37.0, "line_num": 6, "text": "apnivoa", "cluster_label": 1, "indentation": 0}, {"x": 12.0, "y": 464.0, "w": 738.0, "h": 42.0, "line_num": 7, "text": "talioteb adt ero preHab10591 100Y", "cluster_label": 1, "indentation": 0}, {"x": 771.0, "y": 471.0, "w": 485.0, "h": 45.0, "line_num": 8, "text": "rot ti of no blerl sabelq", "cluster_label": 10, "indentation": 3}, {"x": 315.0, "y": 506.0, "w": 857.0, "h": 102.0, "line_num": 9, "text": "for \u00e8 in str (num):", "cluster_label": 0, "indentation": 1}, {"x": 1963.0, "y": 593.0, "w": 239.0, "h": 42.0, "line_num": 10, "text": "tatoO auze", "cluster_label": 2, "indentation": 9}, {"x": 1827.0, "y": 645.0, "w": 402.0, "h": 47.0, "line_num": 11, "text": "hedmull inuopDA", "cluster_label": 5, "indentation": 8}, {"x": 646.0, "y": 685.0, "w": 832.0, "h": 92.0, "line_num": 12, "text": "Sum = Sum+ int (i)", "cluster_label": 11, "indentation": 2}, {"x": 1922.0, "y": 705.0, "w": 316.0, "h": 47.0, "line_num": 13, "text": "eltil tnuossA", "cluster_label": 2, "indentation": 9}, {"x": 307.0, "y": 825.0, "w": 2136.0, "h": 108.0, "line_num": 14, "text": "Print (\"sum of the value you entered in, som)", "cluster_label": 0, "indentation": 1}, {"x": 1131.0, "y": 816.0, "w": 257.0, "h": 50.0, "line_num": 15, "text": "00.000,83", "cluster_label": 8, "indentation": 5}, {"x": 1305.0, "y": 990.0, "w": 89.0, "h": 54.0, "line_num": 16, "text": "BM", "cluster_label": 7, "indentation": 6}, {"x": 867.0, "y": 1057.0, "w": 100.0, "h": 39.0, "line_num": 17, "text": "nioit", "cluster_label": 9, "indentation": 4}, {"x": 1555.0, "y": 1055.0, "w": 704.0, "h": 54.0, "line_num": 18, "text": "hoitqO Inemoandaid 12516Mil", "cluster_label": 6, "indentation": 7}], "ir_algo_output_edit_distance": 476, "prompting_method": "cot-test1", "lm_post_processed_code": "def main ( ) :\n    num = input (\"enter the number you want to add\")\n    Sum=0\n    for i in str (num):\n        Sum = Sum+ int (i)\n    print (\"sum of the value you entered is\", Sum)\n", "lm_post_processed_edit_distance": 14}, {"image_id": 5, "image_height": 1169, "image_width": 2599, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 60.0, "y": 49.0, "w": 637.0, "h": 88.0, "line_num": 1, "text": "def main ( ) ."}, {"x": 2070.0, "y": 34.0, "w": 365.0, "h": 48.0, "line_num": 2, "text": "81108 x68.09"}, {"x": 2473.0, "y": 191.0, "w": 9.0, "h": 4.0, "line_num": 3, "text": "-"}, {"x": 316.0, "y": 209.0, "w": 2218.0, "h": 123.0, "line_num": 4, "text": "num = input (\"enter the number you want to add )"}, {"x": 298.0, "y": 357.0, "w": 1913.0, "h": 94.0, "line_num": 5, "text": "Som=0"}, {"x": 23.0, "y": 412.0, "w": 178.0, "h": 37.0, "line_num": 6, "text": "apnivoa"}, {"x": 12.0, "y": 464.0, "w": 738.0, "h": 42.0, "line_num": 7, "text": "talioteb adt ero preHab10591 100Y"}, {"x": 771.0, "y": 471.0, "w": 485.0, "h": 45.0, "line_num": 8, "text": "rot ti of no blerl sabelq"}, {"x": 315.0, "y": 506.0, "w": 857.0, "h": 102.0, "line_num": 9, "text": "for \u00e8 in str (num):"}, {"x": 1963.0, "y": 593.0, "w": 239.0, "h": 42.0, "line_num": 10, "text": "tatoO auze"}, {"x": 1827.0, "y": 645.0, "w": 402.0, "h": 47.0, "line_num": 11, "text": "hedmull inuopDA"}, {"x": 646.0, "y": 685.0, "w": 832.0, "h": 92.0, "line_num": 12, "text": "Sum = Sum+ int (i)"}, {"x": 1922.0, "y": 705.0, "w": 316.0, "h": 47.0, "line_num": 13, "text": "eltil tnuossA"}, {"x": 307.0, "y": 825.0, "w": 2136.0, "h": 108.0, "line_num": 14, "text": "Print (\"sum of the value you entered in, som)"}, {"x": 1131.0, "y": 816.0, "w": 257.0, "h": 50.0, "line_num": 15, "text": "00.000,83"}, {"x": 1305.0, "y": 990.0, "w": 89.0, "h": 54.0, "line_num": 16, "text": "BM"}, {"x": 867.0, "y": 1057.0, "w": 100.0, "h": 39.0, "line_num": 17, "text": "nioit"}, {"x": 1555.0, "y": 1055.0, "w": 704.0, "h": 54.0, "line_num": 18, "text": "hoitqO Inemoandaid 12516Mil"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 93.0, "ir_algo_output_code": "def main ( ) .\n                                        81108 x68.09\n                                            -\n    num = input (\"enter the number you want to add )\n    Som=0\napnivoa\ntalioteb adt ero preHab10591 100Y\n            rot ti of no blerl sabelq\n    for \u00e8 in str (num):\n                                    tatoO auze\n                                hedmull inuopDA\n        Sum = Sum+ int (i)\n                                    eltil tnuossA\n    Print (\"sum of the value you entered in, som)\n                    00.000,83\n                        BM\n                nioit\n                            hoitqO Inemoandaid 12516Mil\n", "ir_algo_output_indented_lines": [{"x": 60.0, "y": 49.0, "w": 637.0, "h": 88.0, "line_num": 1, "text": "def main ( ) .", "cluster_label": 1, "indentation": 0}, {"x": 2070.0, "y": 34.0, "w": 365.0, "h": 48.0, "line_num": 2, "text": "81108 x68.09", "cluster_label": 4, "indentation": 10}, {"x": 2473.0, "y": 191.0, "w": 9.0, "h": 4.0, "line_num": 3, "text": "-", "cluster_label": 3, "indentation": 11}, {"x": 316.0, "y": 209.0, "w": 2218.0, "h": 123.0, "line_num": 4, "text": "num = input (\"enter the number you want to add )", "cluster_label": 0, "indentation": 1}, {"x": 298.0, "y": 357.0, "w": 1913.0, "h": 94.0, "line_num": 5, "text": "Som=0", "cluster_label": 0, "indentation": 1}, {"x": 23.0, "y": 412.0, "w": 178.0, "h": 37.0, "line_num": 6, "text": "apnivoa", "cluster_label": 1, "indentation": 0}, {"x": 12.0, "y": 464.0, "w": 738.0, "h": 42.0, "line_num": 7, "text": "talioteb adt ero preHab10591 100Y", "cluster_label": 1, "indentation": 0}, {"x": 771.0, "y": 471.0, "w": 485.0, "h": 45.0, "line_num": 8, "text": "rot ti of no blerl sabelq", "cluster_label": 10, "indentation": 3}, {"x": 315.0, "y": 506.0, "w": 857.0, "h": 102.0, "line_num": 9, "text": "for \u00e8 in str (num):", "cluster_label": 0, "indentation": 1}, {"x": 1963.0, "y": 593.0, "w": 239.0, "h": 42.0, "line_num": 10, "text": "tatoO auze", "cluster_label": 2, "indentation": 9}, {"x": 1827.0, "y": 645.0, "w": 402.0, "h": 47.0, "line_num": 11, "text": "hedmull inuopDA", "cluster_label": 5, "indentation": 8}, {"x": 646.0, "y": 685.0, "w": 832.0, "h": 92.0, "line_num": 12, "text": "Sum = Sum+ int (i)", "cluster_label": 11, "indentation": 2}, {"x": 1922.0, "y": 705.0, "w": 316.0, "h": 47.0, "line_num": 13, "text": "eltil tnuossA", "cluster_label": 2, "indentation": 9}, {"x": 307.0, "y": 825.0, "w": 2136.0, "h": 108.0, "line_num": 14, "text": "Print (\"sum of the value you entered in, som)", "cluster_label": 0, "indentation": 1}, {"x": 1131.0, "y": 816.0, "w": 257.0, "h": 50.0, "line_num": 15, "text": "00.000,83", "cluster_label": 8, "indentation": 5}, {"x": 1305.0, "y": 990.0, "w": 89.0, "h": 54.0, "line_num": 16, "text": "BM", "cluster_label": 7, "indentation": 6}, {"x": 867.0, "y": 1057.0, "w": 100.0, "h": 39.0, "line_num": 17, "text": "nioit", "cluster_label": 9, "indentation": 4}, {"x": 1555.0, "y": 1055.0, "w": 704.0, "h": 54.0, "line_num": 18, "text": "hoitqO Inemoandaid 12516Mil", "cluster_label": 6, "indentation": 7}], "ir_algo_output_edit_distance": 476, "prompting_method": "cot-test5", "lm_post_processed_code": "def main ( ) :\n    num = input (\"enter the number you want to add\")\n    Sum=0\n    for i in str (num):\n        Sum = Sum+ int (i)\n    print (\"sum of the value you entered is\", Sum)\n", "lm_post_processed_edit_distance": 14}, {"image_id": 5, "image_height": 1169, "image_width": 2599, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 60.0, "y": 49.0, "w": 637.0, "h": 88.0, "line_num": 1, "text": "def main ( ) ."}, {"x": 2070.0, "y": 34.0, "w": 365.0, "h": 48.0, "line_num": 2, "text": "81108 x68.09"}, {"x": 2473.0, "y": 191.0, "w": 9.0, "h": 4.0, "line_num": 3, "text": "-"}, {"x": 316.0, "y": 209.0, "w": 2218.0, "h": 123.0, "line_num": 4, "text": "num = input (\"enter the number you want to add )"}, {"x": 298.0, "y": 357.0, "w": 1913.0, "h": 94.0, "line_num": 5, "text": "Som=0"}, {"x": 23.0, "y": 412.0, "w": 178.0, "h": 37.0, "line_num": 6, "text": "apnivoa"}, {"x": 12.0, "y": 464.0, "w": 738.0, "h": 42.0, "line_num": 7, "text": "talioteb adt ero preHab10591 100Y"}, {"x": 771.0, "y": 471.0, "w": 485.0, "h": 45.0, "line_num": 8, "text": "rot ti of no blerl sabelq"}, {"x": 315.0, "y": 506.0, "w": 857.0, "h": 102.0, "line_num": 9, "text": "for \u00e8 in str (num):"}, {"x": 1963.0, "y": 593.0, "w": 239.0, "h": 42.0, "line_num": 10, "text": "tatoO auze"}, {"x": 1827.0, "y": 645.0, "w": 402.0, "h": 47.0, "line_num": 11, "text": "hedmull inuopDA"}, {"x": 646.0, "y": 685.0, "w": 832.0, "h": 92.0, "line_num": 12, "text": "Sum = Sum+ int (i)"}, {"x": 1922.0, "y": 705.0, "w": 316.0, "h": 47.0, "line_num": 13, "text": "eltil tnuossA"}, {"x": 307.0, "y": 825.0, "w": 2136.0, "h": 108.0, "line_num": 14, "text": "Print (\"sum of the value you entered in, som)"}, {"x": 1131.0, "y": 816.0, "w": 257.0, "h": 50.0, "line_num": 15, "text": "00.000,83"}, {"x": 1305.0, "y": 990.0, "w": 89.0, "h": 54.0, "line_num": 16, "text": "BM"}, {"x": 867.0, "y": 1057.0, "w": 100.0, "h": 39.0, "line_num": 17, "text": "nioit"}, {"x": 1555.0, "y": 1055.0, "w": 704.0, "h": 54.0, "line_num": 18, "text": "hoitqO Inemoandaid 12516Mil"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 93.0, "ir_algo_output_code": "def main ( ) .\n                                        81108 x68.09\n                                            -\n    num = input (\"enter the number you want to add )\n    Som=0\napnivoa\ntalioteb adt ero preHab10591 100Y\n            rot ti of no blerl sabelq\n    for \u00e8 in str (num):\n                                    tatoO auze\n                                hedmull inuopDA\n        Sum = Sum+ int (i)\n                                    eltil tnuossA\n    Print (\"sum of the value you entered in, som)\n                    00.000,83\n                        BM\n                nioit\n                            hoitqO Inemoandaid 12516Mil\n", "ir_algo_output_indented_lines": [{"x": 60.0, "y": 49.0, "w": 637.0, "h": 88.0, "line_num": 1, "text": "def main ( ) .", "cluster_label": 1, "indentation": 0}, {"x": 2070.0, "y": 34.0, "w": 365.0, "h": 48.0, "line_num": 2, "text": "81108 x68.09", "cluster_label": 4, "indentation": 10}, {"x": 2473.0, "y": 191.0, "w": 9.0, "h": 4.0, "line_num": 3, "text": "-", "cluster_label": 3, "indentation": 11}, {"x": 316.0, "y": 209.0, "w": 2218.0, "h": 123.0, "line_num": 4, "text": "num = input (\"enter the number you want to add )", "cluster_label": 0, "indentation": 1}, {"x": 298.0, "y": 357.0, "w": 1913.0, "h": 94.0, "line_num": 5, "text": "Som=0", "cluster_label": 0, "indentation": 1}, {"x": 23.0, "y": 412.0, "w": 178.0, "h": 37.0, "line_num": 6, "text": "apnivoa", "cluster_label": 1, "indentation": 0}, {"x": 12.0, "y": 464.0, "w": 738.0, "h": 42.0, "line_num": 7, "text": "talioteb adt ero preHab10591 100Y", "cluster_label": 1, "indentation": 0}, {"x": 771.0, "y": 471.0, "w": 485.0, "h": 45.0, "line_num": 8, "text": "rot ti of no blerl sabelq", "cluster_label": 10, "indentation": 3}, {"x": 315.0, "y": 506.0, "w": 857.0, "h": 102.0, "line_num": 9, "text": "for \u00e8 in str (num):", "cluster_label": 0, "indentation": 1}, {"x": 1963.0, "y": 593.0, "w": 239.0, "h": 42.0, "line_num": 10, "text": "tatoO auze", "cluster_label": 2, "indentation": 9}, {"x": 1827.0, "y": 645.0, "w": 402.0, "h": 47.0, "line_num": 11, "text": "hedmull inuopDA", "cluster_label": 5, "indentation": 8}, {"x": 646.0, "y": 685.0, "w": 832.0, "h": 92.0, "line_num": 12, "text": "Sum = Sum+ int (i)", "cluster_label": 11, "indentation": 2}, {"x": 1922.0, "y": 705.0, "w": 316.0, "h": 47.0, "line_num": 13, "text": "eltil tnuossA", "cluster_label": 2, "indentation": 9}, {"x": 307.0, "y": 825.0, "w": 2136.0, "h": 108.0, "line_num": 14, "text": "Print (\"sum of the value you entered in, som)", "cluster_label": 0, "indentation": 1}, {"x": 1131.0, "y": 816.0, "w": 257.0, "h": 50.0, "line_num": 15, "text": "00.000,83", "cluster_label": 8, "indentation": 5}, {"x": 1305.0, "y": 990.0, "w": 89.0, "h": 54.0, "line_num": 16, "text": "BM", "cluster_label": 7, "indentation": 6}, {"x": 867.0, "y": 1057.0, "w": 100.0, "h": 39.0, "line_num": 17, "text": "nioit", "cluster_label": 9, "indentation": 4}, {"x": 1555.0, "y": 1055.0, "w": 704.0, "h": 54.0, "line_num": 18, "text": "hoitqO Inemoandaid 12516Mil", "cluster_label": 6, "indentation": 7}], "ir_algo_output_edit_distance": 476, "prompting_method": "simple-test2", "lm_post_processed_code": "def main():\n    num = input(\"enter the number you want to add\")\n    Sum=0\n    for i in str(num):\n        Sum = Sum+ int(i)\n    print(\"sum of the value you entered is\", Sum)\n", "lm_post_processed_edit_distance": 7}, {"image_id": 5, "image_height": 1169, "image_width": 2599, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 60.0, "y": 49.0, "w": 637.0, "h": 88.0, "line_num": 1, "text": "def main ( ) ."}, {"x": 2070.0, "y": 34.0, "w": 365.0, "h": 48.0, "line_num": 2, "text": "81108 x68.09"}, {"x": 2473.0, "y": 191.0, "w": 9.0, "h": 4.0, "line_num": 3, "text": "-"}, {"x": 316.0, "y": 209.0, "w": 2218.0, "h": 123.0, "line_num": 4, "text": "num = input (\"enter the number you want to add )"}, {"x": 298.0, "y": 357.0, "w": 1913.0, "h": 94.0, "line_num": 5, "text": "Som=0"}, {"x": 23.0, "y": 412.0, "w": 178.0, "h": 37.0, "line_num": 6, "text": "apnivoa"}, {"x": 12.0, "y": 464.0, "w": 738.0, "h": 42.0, "line_num": 7, "text": "talioteb adt ero preHab10591 100Y"}, {"x": 771.0, "y": 471.0, "w": 485.0, "h": 45.0, "line_num": 8, "text": "rot ti of no blerl sabelq"}, {"x": 315.0, "y": 506.0, "w": 857.0, "h": 102.0, "line_num": 9, "text": "for \u00e8 in str (num):"}, {"x": 1963.0, "y": 593.0, "w": 239.0, "h": 42.0, "line_num": 10, "text": "tatoO auze"}, {"x": 1827.0, "y": 645.0, "w": 402.0, "h": 47.0, "line_num": 11, "text": "hedmull inuopDA"}, {"x": 646.0, "y": 685.0, "w": 832.0, "h": 92.0, "line_num": 12, "text": "Sum = Sum+ int (i)"}, {"x": 1922.0, "y": 705.0, "w": 316.0, "h": 47.0, "line_num": 13, "text": "eltil tnuossA"}, {"x": 307.0, "y": 825.0, "w": 2136.0, "h": 108.0, "line_num": 14, "text": "Print (\"sum of the value you entered in, som)"}, {"x": 1131.0, "y": 816.0, "w": 257.0, "h": 50.0, "line_num": 15, "text": "00.000,83"}, {"x": 1305.0, "y": 990.0, "w": 89.0, "h": 54.0, "line_num": 16, "text": "BM"}, {"x": 867.0, "y": 1057.0, "w": 100.0, "h": 39.0, "line_num": 17, "text": "nioit"}, {"x": 1555.0, "y": 1055.0, "w": 704.0, "h": 54.0, "line_num": 18, "text": "hoitqO Inemoandaid 12516Mil"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 93.0, "ir_algo_output_code": "def main ( ) .\n                                        81108 x68.09\n                                            -\n    num = input (\"enter the number you want to add )\n    Som=0\napnivoa\ntalioteb adt ero preHab10591 100Y\n            rot ti of no blerl sabelq\n    for \u00e8 in str (num):\n                                    tatoO auze\n                                hedmull inuopDA\n        Sum = Sum+ int (i)\n                                    eltil tnuossA\n    Print (\"sum of the value you entered in, som)\n                    00.000,83\n                        BM\n                nioit\n                            hoitqO Inemoandaid 12516Mil\n", "ir_algo_output_indented_lines": [{"x": 60.0, "y": 49.0, "w": 637.0, "h": 88.0, "line_num": 1, "text": "def main ( ) .", "cluster_label": 1, "indentation": 0}, {"x": 2070.0, "y": 34.0, "w": 365.0, "h": 48.0, "line_num": 2, "text": "81108 x68.09", "cluster_label": 4, "indentation": 10}, {"x": 2473.0, "y": 191.0, "w": 9.0, "h": 4.0, "line_num": 3, "text": "-", "cluster_label": 3, "indentation": 11}, {"x": 316.0, "y": 209.0, "w": 2218.0, "h": 123.0, "line_num": 4, "text": "num = input (\"enter the number you want to add )", "cluster_label": 0, "indentation": 1}, {"x": 298.0, "y": 357.0, "w": 1913.0, "h": 94.0, "line_num": 5, "text": "Som=0", "cluster_label": 0, "indentation": 1}, {"x": 23.0, "y": 412.0, "w": 178.0, "h": 37.0, "line_num": 6, "text": "apnivoa", "cluster_label": 1, "indentation": 0}, {"x": 12.0, "y": 464.0, "w": 738.0, "h": 42.0, "line_num": 7, "text": "talioteb adt ero preHab10591 100Y", "cluster_label": 1, "indentation": 0}, {"x": 771.0, "y": 471.0, "w": 485.0, "h": 45.0, "line_num": 8, "text": "rot ti of no blerl sabelq", "cluster_label": 10, "indentation": 3}, {"x": 315.0, "y": 506.0, "w": 857.0, "h": 102.0, "line_num": 9, "text": "for \u00e8 in str (num):", "cluster_label": 0, "indentation": 1}, {"x": 1963.0, "y": 593.0, "w": 239.0, "h": 42.0, "line_num": 10, "text": "tatoO auze", "cluster_label": 2, "indentation": 9}, {"x": 1827.0, "y": 645.0, "w": 402.0, "h": 47.0, "line_num": 11, "text": "hedmull inuopDA", "cluster_label": 5, "indentation": 8}, {"x": 646.0, "y": 685.0, "w": 832.0, "h": 92.0, "line_num": 12, "text": "Sum = Sum+ int (i)", "cluster_label": 11, "indentation": 2}, {"x": 1922.0, "y": 705.0, "w": 316.0, "h": 47.0, "line_num": 13, "text": "eltil tnuossA", "cluster_label": 2, "indentation": 9}, {"x": 307.0, "y": 825.0, "w": 2136.0, "h": 108.0, "line_num": 14, "text": "Print (\"sum of the value you entered in, som)", "cluster_label": 0, "indentation": 1}, {"x": 1131.0, "y": 816.0, "w": 257.0, "h": 50.0, "line_num": 15, "text": "00.000,83", "cluster_label": 8, "indentation": 5}, {"x": 1305.0, "y": 990.0, "w": 89.0, "h": 54.0, "line_num": 16, "text": "BM", "cluster_label": 7, "indentation": 6}, {"x": 867.0, "y": 1057.0, "w": 100.0, "h": 39.0, "line_num": 17, "text": "nioit", "cluster_label": 9, "indentation": 4}, {"x": 1555.0, "y": 1055.0, "w": 704.0, "h": 54.0, "line_num": 18, "text": "hoitqO Inemoandaid 12516Mil", "cluster_label": 6, "indentation": 7}], "ir_algo_output_edit_distance": 476, "prompting_method": "simple-test3", "lm_post_processed_code": "def main():\n    num = input(\"enter the number you want to add\")\n    Sum=0\n    for i in str(num):\n        Sum = Sum+ int(i)\n    print(\"sum of the value you entered is\", Sum)\n", "lm_post_processed_edit_distance": 7}, {"image_id": 5, "image_height": 1169, "image_width": 2599, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 60.0, "y": 49.0, "w": 637.0, "h": 88.0, "line_num": 1, "text": "def main ( ) ."}, {"x": 2070.0, "y": 34.0, "w": 365.0, "h": 48.0, "line_num": 2, "text": "81108 x68.09"}, {"x": 2473.0, "y": 191.0, "w": 9.0, "h": 4.0, "line_num": 3, "text": "-"}, {"x": 316.0, "y": 209.0, "w": 2218.0, "h": 123.0, "line_num": 4, "text": "num = input (\"enter the number you want to add )"}, {"x": 298.0, "y": 357.0, "w": 1913.0, "h": 94.0, "line_num": 5, "text": "Som=0"}, {"x": 23.0, "y": 412.0, "w": 178.0, "h": 37.0, "line_num": 6, "text": "apnivoa"}, {"x": 12.0, "y": 464.0, "w": 738.0, "h": 42.0, "line_num": 7, "text": "talioteb adt ero preHab10591 100Y"}, {"x": 771.0, "y": 471.0, "w": 485.0, "h": 45.0, "line_num": 8, "text": "rot ti of no blerl sabelq"}, {"x": 315.0, "y": 506.0, "w": 857.0, "h": 102.0, "line_num": 9, "text": "for \u00e8 in str (num):"}, {"x": 1963.0, "y": 593.0, "w": 239.0, "h": 42.0, "line_num": 10, "text": "tatoO auze"}, {"x": 1827.0, "y": 645.0, "w": 402.0, "h": 47.0, "line_num": 11, "text": "hedmull inuopDA"}, {"x": 646.0, "y": 685.0, "w": 832.0, "h": 92.0, "line_num": 12, "text": "Sum = Sum+ int (i)"}, {"x": 1922.0, "y": 705.0, "w": 316.0, "h": 47.0, "line_num": 13, "text": "eltil tnuossA"}, {"x": 307.0, "y": 825.0, "w": 2136.0, "h": 108.0, "line_num": 14, "text": "Print (\"sum of the value you entered in, som)"}, {"x": 1131.0, "y": 816.0, "w": 257.0, "h": 50.0, "line_num": 15, "text": "00.000,83"}, {"x": 1305.0, "y": 990.0, "w": 89.0, "h": 54.0, "line_num": 16, "text": "BM"}, {"x": 867.0, "y": 1057.0, "w": 100.0, "h": 39.0, "line_num": 17, "text": "nioit"}, {"x": 1555.0, "y": 1055.0, "w": 704.0, "h": 54.0, "line_num": 18, "text": "hoitqO Inemoandaid 12516Mil"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main ( ) .\n    81108 x68.09\n        -\nnum = input (\"enter the number you want to add )\nSom=0\napnivoa\ntalioteb adt ero preHab10591 100Y\n    rot ti of no blerl sabelq\nfor \u00e8 in str (num):\n    tatoO auze\n    hedmull inuopDA\nSum = Sum+ int (i)\n    eltil tnuossA\nPrint (\"sum of the value you entered in, som)\n    00.000,83\n        BM\n    nioit\n        hoitqO Inemoandaid 12516Mil\n", "ir_algo_output_indented_lines": [{"x": 60.0, "y": 49.0, "w": 637.0, "h": 88.0, "line_num": 1, "text": "def main ( ) .", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 2070.0, "y": 34.0, "w": 365.0, "h": 48.0, "line_num": 2, "text": "81108 x68.09", "delta": 2010.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 2473.0, "y": 191.0, "w": 9.0, "h": 4.0, "line_num": 3, "text": "-", "delta": 403.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 316.0, "y": 209.0, "w": 2218.0, "h": 123.0, "line_num": 4, "text": "num = input (\"enter the number you want to add )", "delta": -2157.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 298.0, "y": 357.0, "w": 1913.0, "h": 94.0, "line_num": 5, "text": "Som=0", "delta": -18.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 23.0, "y": 412.0, "w": 178.0, "h": 37.0, "line_num": 6, "text": "apnivoa", "delta": -275.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 12.0, "y": 464.0, "w": 738.0, "h": 42.0, "line_num": 7, "text": "talioteb adt ero preHab10591 100Y", "delta": -11.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 771.0, "y": 471.0, "w": 485.0, "h": 45.0, "line_num": 8, "text": "rot ti of no blerl sabelq", "delta": 759.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 315.0, "y": 506.0, "w": 857.0, "h": 102.0, "line_num": 9, "text": "for \u00e8 in str (num):", "delta": -456.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1963.0, "y": 593.0, "w": 239.0, "h": 42.0, "line_num": 10, "text": "tatoO auze", "delta": 1648.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 1827.0, "y": 645.0, "w": 402.0, "h": 47.0, "line_num": 11, "text": "hedmull inuopDA", "delta": -136.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 646.0, "y": 685.0, "w": 832.0, "h": 92.0, "line_num": 12, "text": "Sum = Sum+ int (i)", "delta": -1181.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1922.0, "y": 705.0, "w": 316.0, "h": 47.0, "line_num": 13, "text": "eltil tnuossA", "delta": 1276.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 307.0, "y": 825.0, "w": 2136.0, "h": 108.0, "line_num": 14, "text": "Print (\"sum of the value you entered in, som)", "delta": -1615.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1131.0, "y": 816.0, "w": 257.0, "h": 50.0, "line_num": 15, "text": "00.000,83", "delta": 824.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 1305.0, "y": 990.0, "w": 89.0, "h": 54.0, "line_num": 16, "text": "BM", "delta": 174.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 867.0, "y": 1057.0, "w": 100.0, "h": 39.0, "line_num": 17, "text": "nioit", "delta": -438.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 1555.0, "y": 1055.0, "w": 704.0, "h": 54.0, "line_num": 18, "text": "hoitqO Inemoandaid 12516Mil", "delta": 688.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}], "ir_algo_output_edit_distance": 220, "prompting_method": "none", "lm_post_processed_code": "def main ( ) .\n    81108 x68.09\n        -\nnum = input (\"enter the number you want to add )\nSom=0\napnivoa\ntalioteb adt ero preHab10591 100Y\n    rot ti of no blerl sabelq\nfor \u00e8 in str (num):\n    tatoO auze\n    hedmull inuopDA\nSum = Sum+ int (i)\n    eltil tnuossA\nPrint (\"sum of the value you entered in, som)\n    00.000,83\n        BM\n    nioit\n        hoitqO Inemoandaid 12516Mil\n", "lm_post_processed_edit_distance": 220}, {"image_id": 5, "image_height": 1169, "image_width": 2599, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 60.0, "y": 49.0, "w": 637.0, "h": 88.0, "line_num": 1, "text": "def main ( ) ."}, {"x": 2070.0, "y": 34.0, "w": 365.0, "h": 48.0, "line_num": 2, "text": "81108 x68.09"}, {"x": 2473.0, "y": 191.0, "w": 9.0, "h": 4.0, "line_num": 3, "text": "-"}, {"x": 316.0, "y": 209.0, "w": 2218.0, "h": 123.0, "line_num": 4, "text": "num = input (\"enter the number you want to add )"}, {"x": 298.0, "y": 357.0, "w": 1913.0, "h": 94.0, "line_num": 5, "text": "Som=0"}, {"x": 23.0, "y": 412.0, "w": 178.0, "h": 37.0, "line_num": 6, "text": "apnivoa"}, {"x": 12.0, "y": 464.0, "w": 738.0, "h": 42.0, "line_num": 7, "text": "talioteb adt ero preHab10591 100Y"}, {"x": 771.0, "y": 471.0, "w": 485.0, "h": 45.0, "line_num": 8, "text": "rot ti of no blerl sabelq"}, {"x": 315.0, "y": 506.0, "w": 857.0, "h": 102.0, "line_num": 9, "text": "for \u00e8 in str (num):"}, {"x": 1963.0, "y": 593.0, "w": 239.0, "h": 42.0, "line_num": 10, "text": "tatoO auze"}, {"x": 1827.0, "y": 645.0, "w": 402.0, "h": 47.0, "line_num": 11, "text": "hedmull inuopDA"}, {"x": 646.0, "y": 685.0, "w": 832.0, "h": 92.0, "line_num": 12, "text": "Sum = Sum+ int (i)"}, {"x": 1922.0, "y": 705.0, "w": 316.0, "h": 47.0, "line_num": 13, "text": "eltil tnuossA"}, {"x": 307.0, "y": 825.0, "w": 2136.0, "h": 108.0, "line_num": 14, "text": "Print (\"sum of the value you entered in, som)"}, {"x": 1131.0, "y": 816.0, "w": 257.0, "h": 50.0, "line_num": 15, "text": "00.000,83"}, {"x": 1305.0, "y": 990.0, "w": 89.0, "h": 54.0, "line_num": 16, "text": "BM"}, {"x": 867.0, "y": 1057.0, "w": 100.0, "h": 39.0, "line_num": 17, "text": "nioit"}, {"x": 1555.0, "y": 1055.0, "w": 704.0, "h": 54.0, "line_num": 18, "text": "hoitqO Inemoandaid 12516Mil"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main ( ) .\n    81108 x68.09\n        -\nnum = input (\"enter the number you want to add )\nSom=0\napnivoa\ntalioteb adt ero preHab10591 100Y\n    rot ti of no blerl sabelq\nfor \u00e8 in str (num):\n    tatoO auze\n    hedmull inuopDA\nSum = Sum+ int (i)\n    eltil tnuossA\nPrint (\"sum of the value you entered in, som)\n    00.000,83\n        BM\n    nioit\n        hoitqO Inemoandaid 12516Mil\n", "ir_algo_output_indented_lines": [{"x": 60.0, "y": 49.0, "w": 637.0, "h": 88.0, "line_num": 1, "text": "def main ( ) .", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 2070.0, "y": 34.0, "w": 365.0, "h": 48.0, "line_num": 2, "text": "81108 x68.09", "delta": 2010.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 2473.0, "y": 191.0, "w": 9.0, "h": 4.0, "line_num": 3, "text": "-", "delta": 403.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 316.0, "y": 209.0, "w": 2218.0, "h": 123.0, "line_num": 4, "text": "num = input (\"enter the number you want to add )", "delta": -2157.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 298.0, "y": 357.0, "w": 1913.0, "h": 94.0, "line_num": 5, "text": "Som=0", "delta": -18.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 23.0, "y": 412.0, "w": 178.0, "h": 37.0, "line_num": 6, "text": "apnivoa", "delta": -275.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 12.0, "y": 464.0, "w": 738.0, "h": 42.0, "line_num": 7, "text": "talioteb adt ero preHab10591 100Y", "delta": -11.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 771.0, "y": 471.0, "w": 485.0, "h": 45.0, "line_num": 8, "text": "rot ti of no blerl sabelq", "delta": 759.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 315.0, "y": 506.0, "w": 857.0, "h": 102.0, "line_num": 9, "text": "for \u00e8 in str (num):", "delta": -456.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1963.0, "y": 593.0, "w": 239.0, "h": 42.0, "line_num": 10, "text": "tatoO auze", "delta": 1648.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 1827.0, "y": 645.0, "w": 402.0, "h": 47.0, "line_num": 11, "text": "hedmull inuopDA", "delta": -136.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 646.0, "y": 685.0, "w": 832.0, "h": 92.0, "line_num": 12, "text": "Sum = Sum+ int (i)", "delta": -1181.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1922.0, "y": 705.0, "w": 316.0, "h": 47.0, "line_num": 13, "text": "eltil tnuossA", "delta": 1276.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 307.0, "y": 825.0, "w": 2136.0, "h": 108.0, "line_num": 14, "text": "Print (\"sum of the value you entered in, som)", "delta": -1615.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1131.0, "y": 816.0, "w": 257.0, "h": 50.0, "line_num": 15, "text": "00.000,83", "delta": 824.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 1305.0, "y": 990.0, "w": 89.0, "h": 54.0, "line_num": 16, "text": "BM", "delta": 174.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 867.0, "y": 1057.0, "w": 100.0, "h": 39.0, "line_num": 17, "text": "nioit", "delta": -438.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 1555.0, "y": 1055.0, "w": 704.0, "h": 54.0, "line_num": 18, "text": "hoitqO Inemoandaid 12516Mil", "delta": 688.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}], "ir_algo_output_edit_distance": 220, "prompting_method": "cot-test1", "lm_post_processed_code": "def main ( ) :\n    num = input (\"enter the number you want to add\")\n    Sum=0\n    for i in str (num):\n        Sum = Sum+ int (i)\n    print (\"sum of the value you entered is\", Sum)\n", "lm_post_processed_edit_distance": 14}, {"image_id": 5, "image_height": 1169, "image_width": 2599, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 60.0, "y": 49.0, "w": 637.0, "h": 88.0, "line_num": 1, "text": "def main ( ) ."}, {"x": 2070.0, "y": 34.0, "w": 365.0, "h": 48.0, "line_num": 2, "text": "81108 x68.09"}, {"x": 2473.0, "y": 191.0, "w": 9.0, "h": 4.0, "line_num": 3, "text": "-"}, {"x": 316.0, "y": 209.0, "w": 2218.0, "h": 123.0, "line_num": 4, "text": "num = input (\"enter the number you want to add )"}, {"x": 298.0, "y": 357.0, "w": 1913.0, "h": 94.0, "line_num": 5, "text": "Som=0"}, {"x": 23.0, "y": 412.0, "w": 178.0, "h": 37.0, "line_num": 6, "text": "apnivoa"}, {"x": 12.0, "y": 464.0, "w": 738.0, "h": 42.0, "line_num": 7, "text": "talioteb adt ero preHab10591 100Y"}, {"x": 771.0, "y": 471.0, "w": 485.0, "h": 45.0, "line_num": 8, "text": "rot ti of no blerl sabelq"}, {"x": 315.0, "y": 506.0, "w": 857.0, "h": 102.0, "line_num": 9, "text": "for \u00e8 in str (num):"}, {"x": 1963.0, "y": 593.0, "w": 239.0, "h": 42.0, "line_num": 10, "text": "tatoO auze"}, {"x": 1827.0, "y": 645.0, "w": 402.0, "h": 47.0, "line_num": 11, "text": "hedmull inuopDA"}, {"x": 646.0, "y": 685.0, "w": 832.0, "h": 92.0, "line_num": 12, "text": "Sum = Sum+ int (i)"}, {"x": 1922.0, "y": 705.0, "w": 316.0, "h": 47.0, "line_num": 13, "text": "eltil tnuossA"}, {"x": 307.0, "y": 825.0, "w": 2136.0, "h": 108.0, "line_num": 14, "text": "Print (\"sum of the value you entered in, som)"}, {"x": 1131.0, "y": 816.0, "w": 257.0, "h": 50.0, "line_num": 15, "text": "00.000,83"}, {"x": 1305.0, "y": 990.0, "w": 89.0, "h": 54.0, "line_num": 16, "text": "BM"}, {"x": 867.0, "y": 1057.0, "w": 100.0, "h": 39.0, "line_num": 17, "text": "nioit"}, {"x": 1555.0, "y": 1055.0, "w": 704.0, "h": 54.0, "line_num": 18, "text": "hoitqO Inemoandaid 12516Mil"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main ( ) .\n    81108 x68.09\n        -\nnum = input (\"enter the number you want to add )\nSom=0\napnivoa\ntalioteb adt ero preHab10591 100Y\n    rot ti of no blerl sabelq\nfor \u00e8 in str (num):\n    tatoO auze\n    hedmull inuopDA\nSum = Sum+ int (i)\n    eltil tnuossA\nPrint (\"sum of the value you entered in, som)\n    00.000,83\n        BM\n    nioit\n        hoitqO Inemoandaid 12516Mil\n", "ir_algo_output_indented_lines": [{"x": 60.0, "y": 49.0, "w": 637.0, "h": 88.0, "line_num": 1, "text": "def main ( ) .", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 2070.0, "y": 34.0, "w": 365.0, "h": 48.0, "line_num": 2, "text": "81108 x68.09", "delta": 2010.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 2473.0, "y": 191.0, "w": 9.0, "h": 4.0, "line_num": 3, "text": "-", "delta": 403.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 316.0, "y": 209.0, "w": 2218.0, "h": 123.0, "line_num": 4, "text": "num = input (\"enter the number you want to add )", "delta": -2157.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 298.0, "y": 357.0, "w": 1913.0, "h": 94.0, "line_num": 5, "text": "Som=0", "delta": -18.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 23.0, "y": 412.0, "w": 178.0, "h": 37.0, "line_num": 6, "text": "apnivoa", "delta": -275.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 12.0, "y": 464.0, "w": 738.0, "h": 42.0, "line_num": 7, "text": "talioteb adt ero preHab10591 100Y", "delta": -11.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 771.0, "y": 471.0, "w": 485.0, "h": 45.0, "line_num": 8, "text": "rot ti of no blerl sabelq", "delta": 759.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 315.0, "y": 506.0, "w": 857.0, "h": 102.0, "line_num": 9, "text": "for \u00e8 in str (num):", "delta": -456.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1963.0, "y": 593.0, "w": 239.0, "h": 42.0, "line_num": 10, "text": "tatoO auze", "delta": 1648.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 1827.0, "y": 645.0, "w": 402.0, "h": 47.0, "line_num": 11, "text": "hedmull inuopDA", "delta": -136.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 646.0, "y": 685.0, "w": 832.0, "h": 92.0, "line_num": 12, "text": "Sum = Sum+ int (i)", "delta": -1181.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1922.0, "y": 705.0, "w": 316.0, "h": 47.0, "line_num": 13, "text": "eltil tnuossA", "delta": 1276.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 307.0, "y": 825.0, "w": 2136.0, "h": 108.0, "line_num": 14, "text": "Print (\"sum of the value you entered in, som)", "delta": -1615.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1131.0, "y": 816.0, "w": 257.0, "h": 50.0, "line_num": 15, "text": "00.000,83", "delta": 824.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 1305.0, "y": 990.0, "w": 89.0, "h": 54.0, "line_num": 16, "text": "BM", "delta": 174.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 867.0, "y": 1057.0, "w": 100.0, "h": 39.0, "line_num": 17, "text": "nioit", "delta": -438.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 1555.0, "y": 1055.0, "w": 704.0, "h": 54.0, "line_num": 18, "text": "hoitqO Inemoandaid 12516Mil", "delta": 688.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}], "ir_algo_output_edit_distance": 220, "prompting_method": "cot-test5", "lm_post_processed_code": "def main ( ) :\n    num = input (\"enter the number you want to add\")\n    Sum=0\n    for i in str (num):\n        Sum = Sum+ int (i)\n    print (\"sum of the value you entered is\", Sum)\n", "lm_post_processed_edit_distance": 14}, {"image_id": 5, "image_height": 1169, "image_width": 2599, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 60.0, "y": 49.0, "w": 637.0, "h": 88.0, "line_num": 1, "text": "def main ( ) ."}, {"x": 2070.0, "y": 34.0, "w": 365.0, "h": 48.0, "line_num": 2, "text": "81108 x68.09"}, {"x": 2473.0, "y": 191.0, "w": 9.0, "h": 4.0, "line_num": 3, "text": "-"}, {"x": 316.0, "y": 209.0, "w": 2218.0, "h": 123.0, "line_num": 4, "text": "num = input (\"enter the number you want to add )"}, {"x": 298.0, "y": 357.0, "w": 1913.0, "h": 94.0, "line_num": 5, "text": "Som=0"}, {"x": 23.0, "y": 412.0, "w": 178.0, "h": 37.0, "line_num": 6, "text": "apnivoa"}, {"x": 12.0, "y": 464.0, "w": 738.0, "h": 42.0, "line_num": 7, "text": "talioteb adt ero preHab10591 100Y"}, {"x": 771.0, "y": 471.0, "w": 485.0, "h": 45.0, "line_num": 8, "text": "rot ti of no blerl sabelq"}, {"x": 315.0, "y": 506.0, "w": 857.0, "h": 102.0, "line_num": 9, "text": "for \u00e8 in str (num):"}, {"x": 1963.0, "y": 593.0, "w": 239.0, "h": 42.0, "line_num": 10, "text": "tatoO auze"}, {"x": 1827.0, "y": 645.0, "w": 402.0, "h": 47.0, "line_num": 11, "text": "hedmull inuopDA"}, {"x": 646.0, "y": 685.0, "w": 832.0, "h": 92.0, "line_num": 12, "text": "Sum = Sum+ int (i)"}, {"x": 1922.0, "y": 705.0, "w": 316.0, "h": 47.0, "line_num": 13, "text": "eltil tnuossA"}, {"x": 307.0, "y": 825.0, "w": 2136.0, "h": 108.0, "line_num": 14, "text": "Print (\"sum of the value you entered in, som)"}, {"x": 1131.0, "y": 816.0, "w": 257.0, "h": 50.0, "line_num": 15, "text": "00.000,83"}, {"x": 1305.0, "y": 990.0, "w": 89.0, "h": 54.0, "line_num": 16, "text": "BM"}, {"x": 867.0, "y": 1057.0, "w": 100.0, "h": 39.0, "line_num": 17, "text": "nioit"}, {"x": 1555.0, "y": 1055.0, "w": 704.0, "h": 54.0, "line_num": 18, "text": "hoitqO Inemoandaid 12516Mil"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main ( ) .\n    81108 x68.09\n        -\nnum = input (\"enter the number you want to add )\nSom=0\napnivoa\ntalioteb adt ero preHab10591 100Y\n    rot ti of no blerl sabelq\nfor \u00e8 in str (num):\n    tatoO auze\n    hedmull inuopDA\nSum = Sum+ int (i)\n    eltil tnuossA\nPrint (\"sum of the value you entered in, som)\n    00.000,83\n        BM\n    nioit\n        hoitqO Inemoandaid 12516Mil\n", "ir_algo_output_indented_lines": [{"x": 60.0, "y": 49.0, "w": 637.0, "h": 88.0, "line_num": 1, "text": "def main ( ) .", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 2070.0, "y": 34.0, "w": 365.0, "h": 48.0, "line_num": 2, "text": "81108 x68.09", "delta": 2010.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 2473.0, "y": 191.0, "w": 9.0, "h": 4.0, "line_num": 3, "text": "-", "delta": 403.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 316.0, "y": 209.0, "w": 2218.0, "h": 123.0, "line_num": 4, "text": "num = input (\"enter the number you want to add )", "delta": -2157.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 298.0, "y": 357.0, "w": 1913.0, "h": 94.0, "line_num": 5, "text": "Som=0", "delta": -18.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 23.0, "y": 412.0, "w": 178.0, "h": 37.0, "line_num": 6, "text": "apnivoa", "delta": -275.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 12.0, "y": 464.0, "w": 738.0, "h": 42.0, "line_num": 7, "text": "talioteb adt ero preHab10591 100Y", "delta": -11.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 771.0, "y": 471.0, "w": 485.0, "h": 45.0, "line_num": 8, "text": "rot ti of no blerl sabelq", "delta": 759.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 315.0, "y": 506.0, "w": 857.0, "h": 102.0, "line_num": 9, "text": "for \u00e8 in str (num):", "delta": -456.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1963.0, "y": 593.0, "w": 239.0, "h": 42.0, "line_num": 10, "text": "tatoO auze", "delta": 1648.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 1827.0, "y": 645.0, "w": 402.0, "h": 47.0, "line_num": 11, "text": "hedmull inuopDA", "delta": -136.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 646.0, "y": 685.0, "w": 832.0, "h": 92.0, "line_num": 12, "text": "Sum = Sum+ int (i)", "delta": -1181.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1922.0, "y": 705.0, "w": 316.0, "h": 47.0, "line_num": 13, "text": "eltil tnuossA", "delta": 1276.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 307.0, "y": 825.0, "w": 2136.0, "h": 108.0, "line_num": 14, "text": "Print (\"sum of the value you entered in, som)", "delta": -1615.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1131.0, "y": 816.0, "w": 257.0, "h": 50.0, "line_num": 15, "text": "00.000,83", "delta": 824.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 1305.0, "y": 990.0, "w": 89.0, "h": 54.0, "line_num": 16, "text": "BM", "delta": 174.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 867.0, "y": 1057.0, "w": 100.0, "h": 39.0, "line_num": 17, "text": "nioit", "delta": -438.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 1555.0, "y": 1055.0, "w": 704.0, "h": 54.0, "line_num": 18, "text": "hoitqO Inemoandaid 12516Mil", "delta": 688.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}], "ir_algo_output_edit_distance": 220, "prompting_method": "simple-test2", "lm_post_processed_code": "def main():\n    num = input(\"enter the number you want to add\")\n    Sum=0\n    for i in str(num):\n        Sum = Sum+ int(i)\n    print(\"sum of the value you entered is\", Sum)\n    return\n", "lm_post_processed_edit_distance": 18}, {"image_id": 5, "image_height": 1169, "image_width": 2599, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 60.0, "y": 49.0, "w": 637.0, "h": 88.0, "line_num": 1, "text": "def main ( ) ."}, {"x": 2070.0, "y": 34.0, "w": 365.0, "h": 48.0, "line_num": 2, "text": "81108 x68.09"}, {"x": 2473.0, "y": 191.0, "w": 9.0, "h": 4.0, "line_num": 3, "text": "-"}, {"x": 316.0, "y": 209.0, "w": 2218.0, "h": 123.0, "line_num": 4, "text": "num = input (\"enter the number you want to add )"}, {"x": 298.0, "y": 357.0, "w": 1913.0, "h": 94.0, "line_num": 5, "text": "Som=0"}, {"x": 23.0, "y": 412.0, "w": 178.0, "h": 37.0, "line_num": 6, "text": "apnivoa"}, {"x": 12.0, "y": 464.0, "w": 738.0, "h": 42.0, "line_num": 7, "text": "talioteb adt ero preHab10591 100Y"}, {"x": 771.0, "y": 471.0, "w": 485.0, "h": 45.0, "line_num": 8, "text": "rot ti of no blerl sabelq"}, {"x": 315.0, "y": 506.0, "w": 857.0, "h": 102.0, "line_num": 9, "text": "for \u00e8 in str (num):"}, {"x": 1963.0, "y": 593.0, "w": 239.0, "h": 42.0, "line_num": 10, "text": "tatoO auze"}, {"x": 1827.0, "y": 645.0, "w": 402.0, "h": 47.0, "line_num": 11, "text": "hedmull inuopDA"}, {"x": 646.0, "y": 685.0, "w": 832.0, "h": 92.0, "line_num": 12, "text": "Sum = Sum+ int (i)"}, {"x": 1922.0, "y": 705.0, "w": 316.0, "h": 47.0, "line_num": 13, "text": "eltil tnuossA"}, {"x": 307.0, "y": 825.0, "w": 2136.0, "h": 108.0, "line_num": 14, "text": "Print (\"sum of the value you entered in, som)"}, {"x": 1131.0, "y": 816.0, "w": 257.0, "h": 50.0, "line_num": 15, "text": "00.000,83"}, {"x": 1305.0, "y": 990.0, "w": 89.0, "h": 54.0, "line_num": 16, "text": "BM"}, {"x": 867.0, "y": 1057.0, "w": 100.0, "h": 39.0, "line_num": 17, "text": "nioit"}, {"x": 1555.0, "y": 1055.0, "w": 704.0, "h": 54.0, "line_num": 18, "text": "hoitqO Inemoandaid 12516Mil"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main ( ) .\n    81108 x68.09\n        -\nnum = input (\"enter the number you want to add )\nSom=0\napnivoa\ntalioteb adt ero preHab10591 100Y\n    rot ti of no blerl sabelq\nfor \u00e8 in str (num):\n    tatoO auze\n    hedmull inuopDA\nSum = Sum+ int (i)\n    eltil tnuossA\nPrint (\"sum of the value you entered in, som)\n    00.000,83\n        BM\n    nioit\n        hoitqO Inemoandaid 12516Mil\n", "ir_algo_output_indented_lines": [{"x": 60.0, "y": 49.0, "w": 637.0, "h": 88.0, "line_num": 1, "text": "def main ( ) .", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 2070.0, "y": 34.0, "w": 365.0, "h": 48.0, "line_num": 2, "text": "81108 x68.09", "delta": 2010.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 2473.0, "y": 191.0, "w": 9.0, "h": 4.0, "line_num": 3, "text": "-", "delta": 403.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 316.0, "y": 209.0, "w": 2218.0, "h": 123.0, "line_num": 4, "text": "num = input (\"enter the number you want to add )", "delta": -2157.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 298.0, "y": 357.0, "w": 1913.0, "h": 94.0, "line_num": 5, "text": "Som=0", "delta": -18.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 23.0, "y": 412.0, "w": 178.0, "h": 37.0, "line_num": 6, "text": "apnivoa", "delta": -275.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 12.0, "y": 464.0, "w": 738.0, "h": 42.0, "line_num": 7, "text": "talioteb adt ero preHab10591 100Y", "delta": -11.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 771.0, "y": 471.0, "w": 485.0, "h": 45.0, "line_num": 8, "text": "rot ti of no blerl sabelq", "delta": 759.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 315.0, "y": 506.0, "w": 857.0, "h": 102.0, "line_num": 9, "text": "for \u00e8 in str (num):", "delta": -456.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1963.0, "y": 593.0, "w": 239.0, "h": 42.0, "line_num": 10, "text": "tatoO auze", "delta": 1648.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 1827.0, "y": 645.0, "w": 402.0, "h": 47.0, "line_num": 11, "text": "hedmull inuopDA", "delta": -136.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 646.0, "y": 685.0, "w": 832.0, "h": 92.0, "line_num": 12, "text": "Sum = Sum+ int (i)", "delta": -1181.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1922.0, "y": 705.0, "w": 316.0, "h": 47.0, "line_num": 13, "text": "eltil tnuossA", "delta": 1276.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 307.0, "y": 825.0, "w": 2136.0, "h": 108.0, "line_num": 14, "text": "Print (\"sum of the value you entered in, som)", "delta": -1615.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1131.0, "y": 816.0, "w": 257.0, "h": 50.0, "line_num": 15, "text": "00.000,83", "delta": 824.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 1305.0, "y": 990.0, "w": 89.0, "h": 54.0, "line_num": 16, "text": "BM", "delta": 174.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 867.0, "y": 1057.0, "w": 100.0, "h": 39.0, "line_num": 17, "text": "nioit", "delta": -438.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 1555.0, "y": 1055.0, "w": 704.0, "h": 54.0, "line_num": 18, "text": "hoitqO Inemoandaid 12516Mil", "delta": 688.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}], "ir_algo_output_edit_distance": 220, "prompting_method": "simple-test3", "lm_post_processed_code": "def main():\n    num = input(\"enter the number you want to add\")\n    Sum=0\n    for i in str(num):\n        Sum = Sum+ int(i)\n    print(\"sum of the value you entered is\", Sum)\n", "lm_post_processed_edit_distance": 7}, {"image_id": 6, "image_height": 928, "image_width": 3201, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 58.0, "y": 48.0, "w": 2854.0, "h": 166.0, "line_num": 1, "text": "user-input = input(\"write your string here:"}, {"x": 3011.0, "y": 33.0, "w": 114.0, "h": 184.0, "line_num": 2, "text": "\")"}, {"x": 95.0, "y": 342.0, "w": 1859.0, "h": 148.0, "line_num": 3, "text": "Upper = user input. upper()"}, {"x": 78.0, "y": 499.0, "w": 835.0, "h": 185.0, "line_num": 4, "text": "print (upper)"}], "ir_algo_name": "none", "ir_algo_output_code": "user-input = input(\"write your string here:\n\")\nUpper = user input. upper()\nprint (upper)", "ir_algo_output_edit_distance": 8, "prompting_method": "none", "lm_post_processed_code": "user-input = input(\"write your string here:\n\")\nUpper = user input. upper()\nprint (upper)", "lm_post_processed_edit_distance": 8}, {"image_id": 6, "image_height": 928, "image_width": 3201, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 58.0, "y": 48.0, "w": 2854.0, "h": 166.0, "line_num": 1, "text": "user-input = input(\"write your string here:"}, {"x": 3011.0, "y": 33.0, "w": 114.0, "h": 184.0, "line_num": 2, "text": "\")"}, {"x": 95.0, "y": 342.0, "w": 1859.0, "h": 148.0, "line_num": 3, "text": "Upper = user input. upper()"}, {"x": 78.0, "y": 499.0, "w": 835.0, "h": 185.0, "line_num": 4, "text": "print (upper)"}], "ir_algo_name": "none", "ir_algo_output_code": "user-input = input(\"write your string here:\n\")\nUpper = user input. upper()\nprint (upper)", "ir_algo_output_edit_distance": 8, "prompting_method": "cot-test1", "lm_post_processed_code": "user_input = input(\"write your string here:\n\")\nUpper = user_input.upper()\nprint (Upper)\n", "lm_post_processed_edit_distance": 5}, {"image_id": 6, "image_height": 928, "image_width": 3201, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 58.0, "y": 48.0, "w": 2854.0, "h": 166.0, "line_num": 1, "text": "user-input = input(\"write your string here:"}, {"x": 3011.0, "y": 33.0, "w": 114.0, "h": 184.0, "line_num": 2, "text": "\")"}, {"x": 95.0, "y": 342.0, "w": 1859.0, "h": 148.0, "line_num": 3, "text": "Upper = user input. upper()"}, {"x": 78.0, "y": 499.0, "w": 835.0, "h": 185.0, "line_num": 4, "text": "print (upper)"}], "ir_algo_name": "none", "ir_algo_output_code": "user-input = input(\"write your string here:\n\")\nUpper = user input. upper()\nprint (upper)", "ir_algo_output_edit_distance": 8, "prompting_method": "cot-test5", "lm_post_processed_code": "user_input = input(\"write your string here: \n\")\nUpper = user_input.upper()\nprint(Upper)\n", "lm_post_processed_edit_distance": 4}, {"image_id": 6, "image_height": 928, "image_width": 3201, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 58.0, "y": 48.0, "w": 2854.0, "h": 166.0, "line_num": 1, "text": "user-input = input(\"write your string here:"}, {"x": 3011.0, "y": 33.0, "w": 114.0, "h": 184.0, "line_num": 2, "text": "\")"}, {"x": 95.0, "y": 342.0, "w": 1859.0, "h": 148.0, "line_num": 3, "text": "Upper = user input. upper()"}, {"x": 78.0, "y": 499.0, "w": 835.0, "h": 185.0, "line_num": 4, "text": "print (upper)"}], "ir_algo_name": "none", "ir_algo_output_code": "user-input = input(\"write your string here:\n\")\nUpper = user input. upper()\nprint (upper)", "ir_algo_output_edit_distance": 8, "prompting_method": "simple-test2", "lm_post_processed_code": "user_input = input(\"write your string here: \")\nUpper = user_input.upper()\nprint(Upper)\n", "lm_post_processed_edit_distance": 3}, {"image_id": 6, "image_height": 928, "image_width": 3201, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 58.0, "y": 48.0, "w": 2854.0, "h": 166.0, "line_num": 1, "text": "user-input = input(\"write your string here:"}, {"x": 3011.0, "y": 33.0, "w": 114.0, "h": 184.0, "line_num": 2, "text": "\")"}, {"x": 95.0, "y": 342.0, "w": 1859.0, "h": 148.0, "line_num": 3, "text": "Upper = user input. upper()"}, {"x": 78.0, "y": 499.0, "w": 835.0, "h": 185.0, "line_num": 4, "text": "print (upper)"}], "ir_algo_name": "none", "ir_algo_output_code": "user-input = input(\"write your string here:\n\")\nUpper = user input. upper()\nprint (upper)", "ir_algo_output_edit_distance": 8, "prompting_method": "simple-test3", "lm_post_processed_code": "user_input = input(\"write your string here: \")\nUpper = user_input.upper()\nprint(Upper)\n", "lm_post_processed_edit_distance": 3}, {"image_id": 6, "image_height": 928, "image_width": 3201, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 58.0, "y": 48.0, "w": 2854.0, "h": 166.0, "line_num": 1, "text": "user-input = input(\"write your string here:"}, {"x": 3011.0, "y": 33.0, "w": 114.0, "h": 184.0, "line_num": 2, "text": "\")"}, {"x": 95.0, "y": 342.0, "w": 1859.0, "h": 148.0, "line_num": 3, "text": "Upper = user input. upper()"}, {"x": 78.0, "y": 499.0, "w": 835.0, "h": 185.0, "line_num": 4, "text": "print (upper)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 256.125, "ir_algo_output_code": "user-input = input(\"write your string here:\n    \")\nUpper = user input. upper()\nprint (upper)\n", "ir_algo_output_indented_lines": [{"x": 58.0, "y": 48.0, "w": 2854.0, "h": 166.0, "line_num": 1, "text": "user-input = input(\"write your string here:", "cluster_label": 0, "indentation": 0}, {"x": 3011.0, "y": 33.0, "w": 114.0, "h": 184.0, "line_num": 2, "text": "\")", "cluster_label": 1, "indentation": 1}, {"x": 95.0, "y": 342.0, "w": 1859.0, "h": 148.0, "line_num": 3, "text": "Upper = user input. upper()", "cluster_label": 0, "indentation": 0}, {"x": 78.0, "y": 499.0, "w": 835.0, "h": 185.0, "line_num": 4, "text": "print (upper)", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 10, "prompting_method": "none", "lm_post_processed_code": "user-input = input(\"write your string here:\n    \")\nUpper = user input. upper()\nprint (upper)\n", "lm_post_processed_edit_distance": 10}, {"image_id": 6, "image_height": 928, "image_width": 3201, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 58.0, "y": 48.0, "w": 2854.0, "h": 166.0, "line_num": 1, "text": "user-input = input(\"write your string here:"}, {"x": 3011.0, "y": 33.0, "w": 114.0, "h": 184.0, "line_num": 2, "text": "\")"}, {"x": 95.0, "y": 342.0, "w": 1859.0, "h": 148.0, "line_num": 3, "text": "Upper = user input. upper()"}, {"x": 78.0, "y": 499.0, "w": 835.0, "h": 185.0, "line_num": 4, "text": "print (upper)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 256.125, "ir_algo_output_code": "user-input = input(\"write your string here:\n    \")\nUpper = user input. upper()\nprint (upper)\n", "ir_algo_output_indented_lines": [{"x": 58.0, "y": 48.0, "w": 2854.0, "h": 166.0, "line_num": 1, "text": "user-input = input(\"write your string here:", "cluster_label": 0, "indentation": 0}, {"x": 3011.0, "y": 33.0, "w": 114.0, "h": 184.0, "line_num": 2, "text": "\")", "cluster_label": 1, "indentation": 1}, {"x": 95.0, "y": 342.0, "w": 1859.0, "h": 148.0, "line_num": 3, "text": "Upper = user input. upper()", "cluster_label": 0, "indentation": 0}, {"x": 78.0, "y": 499.0, "w": 835.0, "h": 185.0, "line_num": 4, "text": "print (upper)", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 10, "prompting_method": "cot-test1", "lm_post_processed_code": "user_input = input(\"write your string here:\n    \")\nUpper = user_input.upper()\nprint (Upper)\n", "lm_post_processed_edit_distance": 8}, {"image_id": 6, "image_height": 928, "image_width": 3201, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 58.0, "y": 48.0, "w": 2854.0, "h": 166.0, "line_num": 1, "text": "user-input = input(\"write your string here:"}, {"x": 3011.0, "y": 33.0, "w": 114.0, "h": 184.0, "line_num": 2, "text": "\")"}, {"x": 95.0, "y": 342.0, "w": 1859.0, "h": 148.0, "line_num": 3, "text": "Upper = user input. upper()"}, {"x": 78.0, "y": 499.0, "w": 835.0, "h": 185.0, "line_num": 4, "text": "print (upper)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 256.125, "ir_algo_output_code": "user-input = input(\"write your string here:\n    \")\nUpper = user input. upper()\nprint (upper)\n", "ir_algo_output_indented_lines": [{"x": 58.0, "y": 48.0, "w": 2854.0, "h": 166.0, "line_num": 1, "text": "user-input = input(\"write your string here:", "cluster_label": 0, "indentation": 0}, {"x": 3011.0, "y": 33.0, "w": 114.0, "h": 184.0, "line_num": 2, "text": "\")", "cluster_label": 1, "indentation": 1}, {"x": 95.0, "y": 342.0, "w": 1859.0, "h": 148.0, "line_num": 3, "text": "Upper = user input. upper()", "cluster_label": 0, "indentation": 0}, {"x": 78.0, "y": 499.0, "w": 835.0, "h": 185.0, "line_num": 4, "text": "print (upper)", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 10, "prompting_method": "cot-test5", "lm_post_processed_code": "user_input = input(\"write your string here:\n    \")\nUpper = user_input.upper()\nprint (Upper)\n", "lm_post_processed_edit_distance": 8}, {"image_id": 6, "image_height": 928, "image_width": 3201, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 58.0, "y": 48.0, "w": 2854.0, "h": 166.0, "line_num": 1, "text": "user-input = input(\"write your string here:"}, {"x": 3011.0, "y": 33.0, "w": 114.0, "h": 184.0, "line_num": 2, "text": "\")"}, {"x": 95.0, "y": 342.0, "w": 1859.0, "h": 148.0, "line_num": 3, "text": "Upper = user input. upper()"}, {"x": 78.0, "y": 499.0, "w": 835.0, "h": 185.0, "line_num": 4, "text": "print (upper)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 256.125, "ir_algo_output_code": "user-input = input(\"write your string here:\n    \")\nUpper = user input. upper()\nprint (upper)\n", "ir_algo_output_indented_lines": [{"x": 58.0, "y": 48.0, "w": 2854.0, "h": 166.0, "line_num": 1, "text": "user-input = input(\"write your string here:", "cluster_label": 0, "indentation": 0}, {"x": 3011.0, "y": 33.0, "w": 114.0, "h": 184.0, "line_num": 2, "text": "\")", "cluster_label": 1, "indentation": 1}, {"x": 95.0, "y": 342.0, "w": 1859.0, "h": 148.0, "line_num": 3, "text": "Upper = user input. upper()", "cluster_label": 0, "indentation": 0}, {"x": 78.0, "y": 499.0, "w": 835.0, "h": 185.0, "line_num": 4, "text": "print (upper)", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 10, "prompting_method": "simple-test2", "lm_post_processed_code": "user_input = input(\"write your string here: \")\nUpper = user_input.upper()\nprint(Upper)\n", "lm_post_processed_edit_distance": 3}, {"image_id": 6, "image_height": 928, "image_width": 3201, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 58.0, "y": 48.0, "w": 2854.0, "h": 166.0, "line_num": 1, "text": "user-input = input(\"write your string here:"}, {"x": 3011.0, "y": 33.0, "w": 114.0, "h": 184.0, "line_num": 2, "text": "\")"}, {"x": 95.0, "y": 342.0, "w": 1859.0, "h": 148.0, "line_num": 3, "text": "Upper = user input. upper()"}, {"x": 78.0, "y": 499.0, "w": 835.0, "h": 185.0, "line_num": 4, "text": "print (upper)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 256.125, "ir_algo_output_code": "user-input = input(\"write your string here:\n    \")\nUpper = user input. upper()\nprint (upper)\n", "ir_algo_output_indented_lines": [{"x": 58.0, "y": 48.0, "w": 2854.0, "h": 166.0, "line_num": 1, "text": "user-input = input(\"write your string here:", "cluster_label": 0, "indentation": 0}, {"x": 3011.0, "y": 33.0, "w": 114.0, "h": 184.0, "line_num": 2, "text": "\")", "cluster_label": 1, "indentation": 1}, {"x": 95.0, "y": 342.0, "w": 1859.0, "h": 148.0, "line_num": 3, "text": "Upper = user input. upper()", "cluster_label": 0, "indentation": 0}, {"x": 78.0, "y": 499.0, "w": 835.0, "h": 185.0, "line_num": 4, "text": "print (upper)", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 10, "prompting_method": "simple-test3", "lm_post_processed_code": "user_input = input(\"write your string here: \")\nUpper = user_input.upper()\nprint(Upper)\n", "lm_post_processed_edit_distance": 3}, {"image_id": 6, "image_height": 928, "image_width": 3201, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 58.0, "y": 48.0, "w": 2854.0, "h": 166.0, "line_num": 1, "text": "user-input = input(\"write your string here:"}, {"x": 3011.0, "y": 33.0, "w": 114.0, "h": 184.0, "line_num": 2, "text": "\")"}, {"x": 95.0, "y": 342.0, "w": 1859.0, "h": 148.0, "line_num": 3, "text": "Upper = user input. upper()"}, {"x": 78.0, "y": 499.0, "w": 835.0, "h": 185.0, "line_num": 4, "text": "print (upper)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "user-input = input(\"write your string here:\n    \")\nUpper = user input. upper()\nprint (upper)\n", "ir_algo_output_indented_lines": [{"x": 58.0, "y": 48.0, "w": 2854.0, "h": 166.0, "line_num": 1, "text": "user-input = input(\"write your string here:", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 3011.0, "y": 33.0, "w": 114.0, "h": 184.0, "line_num": 2, "text": "\")", "delta": 2953.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 95.0, "y": 342.0, "w": 1859.0, "h": 148.0, "line_num": 3, "text": "Upper = user input. upper()", "delta": -2916.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 78.0, "y": 499.0, "w": 835.0, "h": 185.0, "line_num": 4, "text": "print (upper)", "delta": -17.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 10, "prompting_method": "none", "lm_post_processed_code": "user-input = input(\"write your string here:\n    \")\nUpper = user input. upper()\nprint (upper)\n", "lm_post_processed_edit_distance": 10}, {"image_id": 6, "image_height": 928, "image_width": 3201, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 58.0, "y": 48.0, "w": 2854.0, "h": 166.0, "line_num": 1, "text": "user-input = input(\"write your string here:"}, {"x": 3011.0, "y": 33.0, "w": 114.0, "h": 184.0, "line_num": 2, "text": "\")"}, {"x": 95.0, "y": 342.0, "w": 1859.0, "h": 148.0, "line_num": 3, "text": "Upper = user input. upper()"}, {"x": 78.0, "y": 499.0, "w": 835.0, "h": 185.0, "line_num": 4, "text": "print (upper)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "user-input = input(\"write your string here:\n    \")\nUpper = user input. upper()\nprint (upper)\n", "ir_algo_output_indented_lines": [{"x": 58.0, "y": 48.0, "w": 2854.0, "h": 166.0, "line_num": 1, "text": "user-input = input(\"write your string here:", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 3011.0, "y": 33.0, "w": 114.0, "h": 184.0, "line_num": 2, "text": "\")", "delta": 2953.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 95.0, "y": 342.0, "w": 1859.0, "h": 148.0, "line_num": 3, "text": "Upper = user input. upper()", "delta": -2916.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 78.0, "y": 499.0, "w": 835.0, "h": 185.0, "line_num": 4, "text": "print (upper)", "delta": -17.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 10, "prompting_method": "cot-test1", "lm_post_processed_code": "user_input = input(\"write your string here:\n    \")\nUpper = user_input.upper()\nprint (Upper)\n", "lm_post_processed_edit_distance": 8}, {"image_id": 6, "image_height": 928, "image_width": 3201, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 58.0, "y": 48.0, "w": 2854.0, "h": 166.0, "line_num": 1, "text": "user-input = input(\"write your string here:"}, {"x": 3011.0, "y": 33.0, "w": 114.0, "h": 184.0, "line_num": 2, "text": "\")"}, {"x": 95.0, "y": 342.0, "w": 1859.0, "h": 148.0, "line_num": 3, "text": "Upper = user input. upper()"}, {"x": 78.0, "y": 499.0, "w": 835.0, "h": 185.0, "line_num": 4, "text": "print (upper)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "user-input = input(\"write your string here:\n    \")\nUpper = user input. upper()\nprint (upper)\n", "ir_algo_output_indented_lines": [{"x": 58.0, "y": 48.0, "w": 2854.0, "h": 166.0, "line_num": 1, "text": "user-input = input(\"write your string here:", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 3011.0, "y": 33.0, "w": 114.0, "h": 184.0, "line_num": 2, "text": "\")", "delta": 2953.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 95.0, "y": 342.0, "w": 1859.0, "h": 148.0, "line_num": 3, "text": "Upper = user input. upper()", "delta": -2916.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 78.0, "y": 499.0, "w": 835.0, "h": 185.0, "line_num": 4, "text": "print (upper)", "delta": -17.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 10, "prompting_method": "cot-test5", "lm_post_processed_code": "user_input = input(\"write your string here:\n    \")\nUpper = user_input.upper()\nprint (Upper)\n", "lm_post_processed_edit_distance": 8}, {"image_id": 6, "image_height": 928, "image_width": 3201, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 58.0, "y": 48.0, "w": 2854.0, "h": 166.0, "line_num": 1, "text": "user-input = input(\"write your string here:"}, {"x": 3011.0, "y": 33.0, "w": 114.0, "h": 184.0, "line_num": 2, "text": "\")"}, {"x": 95.0, "y": 342.0, "w": 1859.0, "h": 148.0, "line_num": 3, "text": "Upper = user input. upper()"}, {"x": 78.0, "y": 499.0, "w": 835.0, "h": 185.0, "line_num": 4, "text": "print (upper)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "user-input = input(\"write your string here:\n    \")\nUpper = user input. upper()\nprint (upper)\n", "ir_algo_output_indented_lines": [{"x": 58.0, "y": 48.0, "w": 2854.0, "h": 166.0, "line_num": 1, "text": "user-input = input(\"write your string here:", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 3011.0, "y": 33.0, "w": 114.0, "h": 184.0, "line_num": 2, "text": "\")", "delta": 2953.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 95.0, "y": 342.0, "w": 1859.0, "h": 148.0, "line_num": 3, "text": "Upper = user input. upper()", "delta": -2916.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 78.0, "y": 499.0, "w": 835.0, "h": 185.0, "line_num": 4, "text": "print (upper)", "delta": -17.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 10, "prompting_method": "simple-test2", "lm_post_processed_code": "user_input = input(\"write your string here: \")\nUpper = user_input.upper()\nprint(Upper)\n", "lm_post_processed_edit_distance": 3}, {"image_id": 6, "image_height": 928, "image_width": 3201, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 58.0, "y": 48.0, "w": 2854.0, "h": 166.0, "line_num": 1, "text": "user-input = input(\"write your string here:"}, {"x": 3011.0, "y": 33.0, "w": 114.0, "h": 184.0, "line_num": 2, "text": "\")"}, {"x": 95.0, "y": 342.0, "w": 1859.0, "h": 148.0, "line_num": 3, "text": "Upper = user input. upper()"}, {"x": 78.0, "y": 499.0, "w": 835.0, "h": 185.0, "line_num": 4, "text": "print (upper)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "user-input = input(\"write your string here:\n    \")\nUpper = user input. upper()\nprint (upper)\n", "ir_algo_output_indented_lines": [{"x": 58.0, "y": 48.0, "w": 2854.0, "h": 166.0, "line_num": 1, "text": "user-input = input(\"write your string here:", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 3011.0, "y": 33.0, "w": 114.0, "h": 184.0, "line_num": 2, "text": "\")", "delta": 2953.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 95.0, "y": 342.0, "w": 1859.0, "h": 148.0, "line_num": 3, "text": "Upper = user input. upper()", "delta": -2916.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 78.0, "y": 499.0, "w": 835.0, "h": 185.0, "line_num": 4, "text": "print (upper)", "delta": -17.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 10, "prompting_method": "simple-test3", "lm_post_processed_code": "user_input = input(\"write your string here: \")\nUpper = user_input.upper()\nprint(Upper)\n", "lm_post_processed_edit_distance": 3}, {"image_id": 8, "image_height": 1600, "image_width": 1200, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 95.0, "y": 64.0, "w": 675.0, "h": 50.0, "line_num": 1, "text": "from karel. stanfordkarel import*"}, {"x": 105.0, "y": 168.0, "w": 253.0, "h": 47.0, "line_num": 2, "text": "def main ()"}, {"x": 191.0, "y": 235.0, "w": 152.0, "h": 38.0, "line_num": 3, "text": "move()"}, {"x": 198.0, "y": 283.0, "w": 150.0, "h": 38.0, "line_num": 4, "text": "move()"}, {"x": 197.0, "y": 330.0, "w": 280.0, "h": 45.0, "line_num": 5, "text": "turn-right ()"}, {"x": 204.0, "y": 388.0, "w": 161.0, "h": 40.0, "line_num": 6, "text": "move()"}, {"x": 205.0, "y": 432.0, "w": 259.0, "h": 46.0, "line_num": 7, "text": "turn-left()"}, {"x": 216.0, "y": 498.0, "w": 149.0, "h": 36.0, "line_num": 8, "text": "move()"}, {"x": 217.0, "y": 543.0, "w": 285.0, "h": 43.0, "line_num": 9, "text": "pick-beeper()"}, {"x": 225.0, "y": 597.0, "w": 320.0, "h": 40.0, "line_num": 10, "text": "return-home()"}, {"x": 112.0, "y": 666.0, "w": 414.0, "h": 47.0, "line_num": 11, "text": "def return_home()"}, {"x": 198.0, "y": 726.0, "w": 312.0, "h": 44.0, "line_num": 12, "text": "turn-around()"}, {"x": 204.0, "y": 787.0, "w": 149.0, "h": 39.0, "line_num": 13, "text": "move()"}, {"x": 212.0, "y": 831.0, "w": 246.0, "h": 47.0, "line_num": 14, "text": "turn-right()"}, {"x": 215.0, "y": 892.0, "w": 155.0, "h": 38.0, "line_num": 15, "text": "move ()"}, {"x": 220.0, "y": 938.0, "w": 248.0, "h": 44.0, "line_num": 16, "text": "turn-left ()"}, {"x": 222.0, "y": 1001.0, "w": 138.0, "h": 37.0, "line_num": 17, "text": "move()"}, {"x": 224.0, "y": 1038.0, "w": 152.0, "h": 40.0, "line_num": 18, "text": "move()"}, {"x": 223.0, "y": 1083.0, "w": 311.0, "h": 46.0, "line_num": 19, "text": "turn-around ()"}, {"x": 108.0, "y": 1159.0, "w": 401.0, "h": 50.0, "line_num": 20, "text": "det turn-right()"}, {"x": 217.0, "y": 1219.0, "w": 389.0, "h": 44.0, "line_num": 21, "text": "for i in range (3):"}, {"x": 274.0, "y": 1274.0, "w": 245.0, "h": 45.0, "line_num": 22, "text": "turn-left ()"}, {"x": 120.0, "y": 1335.0, "w": 429.0, "h": 46.0, "line_num": 23, "text": "def turn- around()"}, {"x": 215.0, "y": 1393.0, "w": 371.0, "h": 41.0, "line_num": 24, "text": "for i in range (2):"}, {"x": 263.0, "y": 1437.0, "w": 251.0, "h": 39.0, "line_num": 25, "text": "turn-left ()"}, {"x": 51.0, "y": 1485.0, "w": 36.0, "h": 51.0, "line_num": 26, "text": "if"}, {"x": 132.0, "y": 1508.0, "w": 537.0, "h": 36.0, "line_num": 27, "text": "name == '_main' ':"}, {"x": 121.0, "y": 1545.0, "w": 161.0, "h": 38.0, "line_num": 28, "text": "main()"}], "ir_algo_name": "none", "ir_algo_output_code": "from karel. stanfordkarel import*\ndef main ()\nmove()\nmove()\nturn-right ()\nmove()\nturn-left()\nmove()\npick-beeper()\nreturn-home()\ndef return_home()\nturn-around()\nmove()\nturn-right()\nmove ()\nturn-left ()\nmove()\nmove()\nturn-around ()\ndet turn-right()\nfor i in range (3):\nturn-left ()\ndef turn- around()\nfor i in range (2):\nturn-left ()\nif\nname == '_main' ':\nmain()", "ir_algo_output_edit_distance": 137, "prompting_method": "none", "lm_post_processed_code": "from karel. stanfordkarel import*\ndef main ()\nmove()\nmove()\nturn-right ()\nmove()\nturn-left()\nmove()\npick-beeper()\nreturn-home()\ndef return_home()\nturn-around()\nmove()\nturn-right()\nmove ()\nturn-left ()\nmove()\nmove()\nturn-around ()\ndet turn-right()\nfor i in range (3):\nturn-left ()\ndef turn- around()\nfor i in range (2):\nturn-left ()\nif\nname == '_main' ':\nmain()", "lm_post_processed_edit_distance": 137}, {"image_id": 8, "image_height": 1600, "image_width": 1200, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 95.0, "y": 64.0, "w": 675.0, "h": 50.0, "line_num": 1, "text": "from karel. stanfordkarel import*"}, {"x": 105.0, "y": 168.0, "w": 253.0, "h": 47.0, "line_num": 2, "text": "def main ()"}, {"x": 191.0, "y": 235.0, "w": 152.0, "h": 38.0, "line_num": 3, "text": "move()"}, {"x": 198.0, "y": 283.0, "w": 150.0, "h": 38.0, "line_num": 4, "text": "move()"}, {"x": 197.0, "y": 330.0, "w": 280.0, "h": 45.0, "line_num": 5, "text": "turn-right ()"}, {"x": 204.0, "y": 388.0, "w": 161.0, "h": 40.0, "line_num": 6, "text": "move()"}, {"x": 205.0, "y": 432.0, "w": 259.0, "h": 46.0, "line_num": 7, "text": "turn-left()"}, {"x": 216.0, "y": 498.0, "w": 149.0, "h": 36.0, "line_num": 8, "text": "move()"}, {"x": 217.0, "y": 543.0, "w": 285.0, "h": 43.0, "line_num": 9, "text": "pick-beeper()"}, {"x": 225.0, "y": 597.0, "w": 320.0, "h": 40.0, "line_num": 10, "text": "return-home()"}, {"x": 112.0, "y": 666.0, "w": 414.0, "h": 47.0, "line_num": 11, "text": "def return_home()"}, {"x": 198.0, "y": 726.0, "w": 312.0, "h": 44.0, "line_num": 12, "text": "turn-around()"}, {"x": 204.0, "y": 787.0, "w": 149.0, "h": 39.0, "line_num": 13, "text": "move()"}, {"x": 212.0, "y": 831.0, "w": 246.0, "h": 47.0, "line_num": 14, "text": "turn-right()"}, {"x": 215.0, "y": 892.0, "w": 155.0, "h": 38.0, "line_num": 15, "text": "move ()"}, {"x": 220.0, "y": 938.0, "w": 248.0, "h": 44.0, "line_num": 16, "text": "turn-left ()"}, {"x": 222.0, "y": 1001.0, "w": 138.0, "h": 37.0, "line_num": 17, "text": "move()"}, {"x": 224.0, "y": 1038.0, "w": 152.0, "h": 40.0, "line_num": 18, "text": "move()"}, {"x": 223.0, "y": 1083.0, "w": 311.0, "h": 46.0, "line_num": 19, "text": "turn-around ()"}, {"x": 108.0, "y": 1159.0, "w": 401.0, "h": 50.0, "line_num": 20, "text": "det turn-right()"}, {"x": 217.0, "y": 1219.0, "w": 389.0, "h": 44.0, "line_num": 21, "text": "for i in range (3):"}, {"x": 274.0, "y": 1274.0, "w": 245.0, "h": 45.0, "line_num": 22, "text": "turn-left ()"}, {"x": 120.0, "y": 1335.0, "w": 429.0, "h": 46.0, "line_num": 23, "text": "def turn- around()"}, {"x": 215.0, "y": 1393.0, "w": 371.0, "h": 41.0, "line_num": 24, "text": "for i in range (2):"}, {"x": 263.0, "y": 1437.0, "w": 251.0, "h": 39.0, "line_num": 25, "text": "turn-left ()"}, {"x": 51.0, "y": 1485.0, "w": 36.0, "h": 51.0, "line_num": 26, "text": "if"}, {"x": 132.0, "y": 1508.0, "w": 537.0, "h": 36.0, "line_num": 27, "text": "name == '_main' ':"}, {"x": 121.0, "y": 1545.0, "w": 161.0, "h": 38.0, "line_num": 28, "text": "main()"}], "ir_algo_name": "none", "ir_algo_output_code": "from karel. stanfordkarel import*\ndef main ()\nmove()\nmove()\nturn-right ()\nmove()\nturn-left()\nmove()\npick-beeper()\nreturn-home()\ndef return_home()\nturn-around()\nmove()\nturn-right()\nmove ()\nturn-left ()\nmove()\nmove()\nturn-around ()\ndet turn-right()\nfor i in range (3):\nturn-left ()\ndef turn- around()\nfor i in range (2):\nturn-left ()\nif\nname == '_main' ':\nmain()", "ir_algo_output_edit_distance": 137, "prompting_method": "cot-test1", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\nmove()\nmove()\nturn_right()\nmove()\nturn_left()\nmove()\npick_beeper()\nreturn_home()\n\ndef return_home():\nturn_around()\nmove()\nturn_right()\nmove()\nturn_left()\nmove()\nmove()\nturn_around()\n\ndef turn_right():\nfor i in range(3):\nturn_left()\n\ndef turn_around():\nfor i in range(2):\nturn_left()\nif __name__ == '__main__':\nmain()\n", "lm_post_processed_edit_distance": 95}, {"image_id": 8, "image_height": 1600, "image_width": 1200, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 95.0, "y": 64.0, "w": 675.0, "h": 50.0, "line_num": 1, "text": "from karel. stanfordkarel import*"}, {"x": 105.0, "y": 168.0, "w": 253.0, "h": 47.0, "line_num": 2, "text": "def main ()"}, {"x": 191.0, "y": 235.0, "w": 152.0, "h": 38.0, "line_num": 3, "text": "move()"}, {"x": 198.0, "y": 283.0, "w": 150.0, "h": 38.0, "line_num": 4, "text": "move()"}, {"x": 197.0, "y": 330.0, "w": 280.0, "h": 45.0, "line_num": 5, "text": "turn-right ()"}, {"x": 204.0, "y": 388.0, "w": 161.0, "h": 40.0, "line_num": 6, "text": "move()"}, {"x": 205.0, "y": 432.0, "w": 259.0, "h": 46.0, "line_num": 7, "text": "turn-left()"}, {"x": 216.0, "y": 498.0, "w": 149.0, "h": 36.0, "line_num": 8, "text": "move()"}, {"x": 217.0, "y": 543.0, "w": 285.0, "h": 43.0, "line_num": 9, "text": "pick-beeper()"}, {"x": 225.0, "y": 597.0, "w": 320.0, "h": 40.0, "line_num": 10, "text": "return-home()"}, {"x": 112.0, "y": 666.0, "w": 414.0, "h": 47.0, "line_num": 11, "text": "def return_home()"}, {"x": 198.0, "y": 726.0, "w": 312.0, "h": 44.0, "line_num": 12, "text": "turn-around()"}, {"x": 204.0, "y": 787.0, "w": 149.0, "h": 39.0, "line_num": 13, "text": "move()"}, {"x": 212.0, "y": 831.0, "w": 246.0, "h": 47.0, "line_num": 14, "text": "turn-right()"}, {"x": 215.0, "y": 892.0, "w": 155.0, "h": 38.0, "line_num": 15, "text": "move ()"}, {"x": 220.0, "y": 938.0, "w": 248.0, "h": 44.0, "line_num": 16, "text": "turn-left ()"}, {"x": 222.0, "y": 1001.0, "w": 138.0, "h": 37.0, "line_num": 17, "text": "move()"}, {"x": 224.0, "y": 1038.0, "w": 152.0, "h": 40.0, "line_num": 18, "text": "move()"}, {"x": 223.0, "y": 1083.0, "w": 311.0, "h": 46.0, "line_num": 19, "text": "turn-around ()"}, {"x": 108.0, "y": 1159.0, "w": 401.0, "h": 50.0, "line_num": 20, "text": "det turn-right()"}, {"x": 217.0, "y": 1219.0, "w": 389.0, "h": 44.0, "line_num": 21, "text": "for i in range (3):"}, {"x": 274.0, "y": 1274.0, "w": 245.0, "h": 45.0, "line_num": 22, "text": "turn-left ()"}, {"x": 120.0, "y": 1335.0, "w": 429.0, "h": 46.0, "line_num": 23, "text": "def turn- around()"}, {"x": 215.0, "y": 1393.0, "w": 371.0, "h": 41.0, "line_num": 24, "text": "for i in range (2):"}, {"x": 263.0, "y": 1437.0, "w": 251.0, "h": 39.0, "line_num": 25, "text": "turn-left ()"}, {"x": 51.0, "y": 1485.0, "w": 36.0, "h": 51.0, "line_num": 26, "text": "if"}, {"x": 132.0, "y": 1508.0, "w": 537.0, "h": 36.0, "line_num": 27, "text": "name == '_main' ':"}, {"x": 121.0, "y": 1545.0, "w": 161.0, "h": 38.0, "line_num": 28, "text": "main()"}], "ir_algo_name": "none", "ir_algo_output_code": "from karel. stanfordkarel import*\ndef main ()\nmove()\nmove()\nturn-right ()\nmove()\nturn-left()\nmove()\npick-beeper()\nreturn-home()\ndef return_home()\nturn-around()\nmove()\nturn-right()\nmove ()\nturn-left ()\nmove()\nmove()\nturn-around ()\ndet turn-right()\nfor i in range (3):\nturn-left ()\ndef turn- around()\nfor i in range (2):\nturn-left ()\nif\nname == '_main' ':\nmain()", "ir_algo_output_edit_distance": 137, "prompting_method": "cot-test5", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\nmove()\nmove()\nturn_right()\nmove()\nturn_left()\nmove()\npick_beeper()\nreturn_home()\n\ndef return_home():\nturn_around()\nmove()\nturn_right()\nmove()\nturn_left()\nmove()\nmove()\nturn_around()\n\ndef turn_right():\nfor i in range(3):\nturn_left()\n\ndef turn_around():\nfor i in range(2):\nturn_left()\nif __name__ == '__main__':\nmain()\n", "lm_post_processed_edit_distance": 95}, {"image_id": 8, "image_height": 1600, "image_width": 1200, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 95.0, "y": 64.0, "w": 675.0, "h": 50.0, "line_num": 1, "text": "from karel. stanfordkarel import*"}, {"x": 105.0, "y": 168.0, "w": 253.0, "h": 47.0, "line_num": 2, "text": "def main ()"}, {"x": 191.0, "y": 235.0, "w": 152.0, "h": 38.0, "line_num": 3, "text": "move()"}, {"x": 198.0, "y": 283.0, "w": 150.0, "h": 38.0, "line_num": 4, "text": "move()"}, {"x": 197.0, "y": 330.0, "w": 280.0, "h": 45.0, "line_num": 5, "text": "turn-right ()"}, {"x": 204.0, "y": 388.0, "w": 161.0, "h": 40.0, "line_num": 6, "text": "move()"}, {"x": 205.0, "y": 432.0, "w": 259.0, "h": 46.0, "line_num": 7, "text": "turn-left()"}, {"x": 216.0, "y": 498.0, "w": 149.0, "h": 36.0, "line_num": 8, "text": "move()"}, {"x": 217.0, "y": 543.0, "w": 285.0, "h": 43.0, "line_num": 9, "text": "pick-beeper()"}, {"x": 225.0, "y": 597.0, "w": 320.0, "h": 40.0, "line_num": 10, "text": "return-home()"}, {"x": 112.0, "y": 666.0, "w": 414.0, "h": 47.0, "line_num": 11, "text": "def return_home()"}, {"x": 198.0, "y": 726.0, "w": 312.0, "h": 44.0, "line_num": 12, "text": "turn-around()"}, {"x": 204.0, "y": 787.0, "w": 149.0, "h": 39.0, "line_num": 13, "text": "move()"}, {"x": 212.0, "y": 831.0, "w": 246.0, "h": 47.0, "line_num": 14, "text": "turn-right()"}, {"x": 215.0, "y": 892.0, "w": 155.0, "h": 38.0, "line_num": 15, "text": "move ()"}, {"x": 220.0, "y": 938.0, "w": 248.0, "h": 44.0, "line_num": 16, "text": "turn-left ()"}, {"x": 222.0, "y": 1001.0, "w": 138.0, "h": 37.0, "line_num": 17, "text": "move()"}, {"x": 224.0, "y": 1038.0, "w": 152.0, "h": 40.0, "line_num": 18, "text": "move()"}, {"x": 223.0, "y": 1083.0, "w": 311.0, "h": 46.0, "line_num": 19, "text": "turn-around ()"}, {"x": 108.0, "y": 1159.0, "w": 401.0, "h": 50.0, "line_num": 20, "text": "det turn-right()"}, {"x": 217.0, "y": 1219.0, "w": 389.0, "h": 44.0, "line_num": 21, "text": "for i in range (3):"}, {"x": 274.0, "y": 1274.0, "w": 245.0, "h": 45.0, "line_num": 22, "text": "turn-left ()"}, {"x": 120.0, "y": 1335.0, "w": 429.0, "h": 46.0, "line_num": 23, "text": "def turn- around()"}, {"x": 215.0, "y": 1393.0, "w": 371.0, "h": 41.0, "line_num": 24, "text": "for i in range (2):"}, {"x": 263.0, "y": 1437.0, "w": 251.0, "h": 39.0, "line_num": 25, "text": "turn-left ()"}, {"x": 51.0, "y": 1485.0, "w": 36.0, "h": 51.0, "line_num": 26, "text": "if"}, {"x": 132.0, "y": 1508.0, "w": 537.0, "h": 36.0, "line_num": 27, "text": "name == '_main' ':"}, {"x": 121.0, "y": 1545.0, "w": 161.0, "h": 38.0, "line_num": 28, "text": "main()"}], "ir_algo_name": "none", "ir_algo_output_code": "from karel. stanfordkarel import*\ndef main ()\nmove()\nmove()\nturn-right ()\nmove()\nturn-left()\nmove()\npick-beeper()\nreturn-home()\ndef return_home()\nturn-around()\nmove()\nturn-right()\nmove ()\nturn-left ()\nmove()\nmove()\nturn-around ()\ndet turn-right()\nfor i in range (3):\nturn-left ()\ndef turn- around()\nfor i in range (2):\nturn-left ()\nif\nname == '_main' ':\nmain()", "ir_algo_output_edit_distance": 137, "prompting_method": "simple-test2", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    move()\n    move()\n    turn_right()\n    move()\n    turn_left()\n    move()\n    pick_beeper()\n    return_home()\n\ndef return_home():\n    turn_around()\n    move()\n    turn_right()\n    move()\n    turn_left()\n    move()\n    move()\n    turn_around()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\n\ndef turn_around():\n    for i in range(2):\n        turn_left()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 3}, {"image_id": 8, "image_height": 1600, "image_width": 1200, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 95.0, "y": 64.0, "w": 675.0, "h": 50.0, "line_num": 1, "text": "from karel. stanfordkarel import*"}, {"x": 105.0, "y": 168.0, "w": 253.0, "h": 47.0, "line_num": 2, "text": "def main ()"}, {"x": 191.0, "y": 235.0, "w": 152.0, "h": 38.0, "line_num": 3, "text": "move()"}, {"x": 198.0, "y": 283.0, "w": 150.0, "h": 38.0, "line_num": 4, "text": "move()"}, {"x": 197.0, "y": 330.0, "w": 280.0, "h": 45.0, "line_num": 5, "text": "turn-right ()"}, {"x": 204.0, "y": 388.0, "w": 161.0, "h": 40.0, "line_num": 6, "text": "move()"}, {"x": 205.0, "y": 432.0, "w": 259.0, "h": 46.0, "line_num": 7, "text": "turn-left()"}, {"x": 216.0, "y": 498.0, "w": 149.0, "h": 36.0, "line_num": 8, "text": "move()"}, {"x": 217.0, "y": 543.0, "w": 285.0, "h": 43.0, "line_num": 9, "text": "pick-beeper()"}, {"x": 225.0, "y": 597.0, "w": 320.0, "h": 40.0, "line_num": 10, "text": "return-home()"}, {"x": 112.0, "y": 666.0, "w": 414.0, "h": 47.0, "line_num": 11, "text": "def return_home()"}, {"x": 198.0, "y": 726.0, "w": 312.0, "h": 44.0, "line_num": 12, "text": "turn-around()"}, {"x": 204.0, "y": 787.0, "w": 149.0, "h": 39.0, "line_num": 13, "text": "move()"}, {"x": 212.0, "y": 831.0, "w": 246.0, "h": 47.0, "line_num": 14, "text": "turn-right()"}, {"x": 215.0, "y": 892.0, "w": 155.0, "h": 38.0, "line_num": 15, "text": "move ()"}, {"x": 220.0, "y": 938.0, "w": 248.0, "h": 44.0, "line_num": 16, "text": "turn-left ()"}, {"x": 222.0, "y": 1001.0, "w": 138.0, "h": 37.0, "line_num": 17, "text": "move()"}, {"x": 224.0, "y": 1038.0, "w": 152.0, "h": 40.0, "line_num": 18, "text": "move()"}, {"x": 223.0, "y": 1083.0, "w": 311.0, "h": 46.0, "line_num": 19, "text": "turn-around ()"}, {"x": 108.0, "y": 1159.0, "w": 401.0, "h": 50.0, "line_num": 20, "text": "det turn-right()"}, {"x": 217.0, "y": 1219.0, "w": 389.0, "h": 44.0, "line_num": 21, "text": "for i in range (3):"}, {"x": 274.0, "y": 1274.0, "w": 245.0, "h": 45.0, "line_num": 22, "text": "turn-left ()"}, {"x": 120.0, "y": 1335.0, "w": 429.0, "h": 46.0, "line_num": 23, "text": "def turn- around()"}, {"x": 215.0, "y": 1393.0, "w": 371.0, "h": 41.0, "line_num": 24, "text": "for i in range (2):"}, {"x": 263.0, "y": 1437.0, "w": 251.0, "h": 39.0, "line_num": 25, "text": "turn-left ()"}, {"x": 51.0, "y": 1485.0, "w": 36.0, "h": 51.0, "line_num": 26, "text": "if"}, {"x": 132.0, "y": 1508.0, "w": 537.0, "h": 36.0, "line_num": 27, "text": "name == '_main' ':"}, {"x": 121.0, "y": 1545.0, "w": 161.0, "h": 38.0, "line_num": 28, "text": "main()"}], "ir_algo_name": "none", "ir_algo_output_code": "from karel. stanfordkarel import*\ndef main ()\nmove()\nmove()\nturn-right ()\nmove()\nturn-left()\nmove()\npick-beeper()\nreturn-home()\ndef return_home()\nturn-around()\nmove()\nturn-right()\nmove ()\nturn-left ()\nmove()\nmove()\nturn-around ()\ndet turn-right()\nfor i in range (3):\nturn-left ()\ndef turn- around()\nfor i in range (2):\nturn-left ()\nif\nname == '_main' ':\nmain()", "ir_algo_output_edit_distance": 137, "prompting_method": "simple-test3", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    move()\n    move()\n    turn_right()\n    move()\n    turn_left()\n    move()\n    pick_beeper()\n    return_home()\n\ndef return_home():\n    turn_around()\n    move()\n    turn_right()\n    move()\n    turn_left()\n    move()\n    move()\n    turn_around()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\n\ndef turn_around():\n    for i in range(2):\n        turn_left()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 3}, {"image_id": 8, "image_height": 1600, "image_width": 1200, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 95.0, "y": 64.0, "w": 675.0, "h": 50.0, "line_num": 1, "text": "from karel. stanfordkarel import*"}, {"x": 105.0, "y": 168.0, "w": 253.0, "h": 47.0, "line_num": 2, "text": "def main ()"}, {"x": 191.0, "y": 235.0, "w": 152.0, "h": 38.0, "line_num": 3, "text": "move()"}, {"x": 198.0, "y": 283.0, "w": 150.0, "h": 38.0, "line_num": 4, "text": "move()"}, {"x": 197.0, "y": 330.0, "w": 280.0, "h": 45.0, "line_num": 5, "text": "turn-right ()"}, {"x": 204.0, "y": 388.0, "w": 161.0, "h": 40.0, "line_num": 6, "text": "move()"}, {"x": 205.0, "y": 432.0, "w": 259.0, "h": 46.0, "line_num": 7, "text": "turn-left()"}, {"x": 216.0, "y": 498.0, "w": 149.0, "h": 36.0, "line_num": 8, "text": "move()"}, {"x": 217.0, "y": 543.0, "w": 285.0, "h": 43.0, "line_num": 9, "text": "pick-beeper()"}, {"x": 225.0, "y": 597.0, "w": 320.0, "h": 40.0, "line_num": 10, "text": "return-home()"}, {"x": 112.0, "y": 666.0, "w": 414.0, "h": 47.0, "line_num": 11, "text": "def return_home()"}, {"x": 198.0, "y": 726.0, "w": 312.0, "h": 44.0, "line_num": 12, "text": "turn-around()"}, {"x": 204.0, "y": 787.0, "w": 149.0, "h": 39.0, "line_num": 13, "text": "move()"}, {"x": 212.0, "y": 831.0, "w": 246.0, "h": 47.0, "line_num": 14, "text": "turn-right()"}, {"x": 215.0, "y": 892.0, "w": 155.0, "h": 38.0, "line_num": 15, "text": "move ()"}, {"x": 220.0, "y": 938.0, "w": 248.0, "h": 44.0, "line_num": 16, "text": "turn-left ()"}, {"x": 222.0, "y": 1001.0, "w": 138.0, "h": 37.0, "line_num": 17, "text": "move()"}, {"x": 224.0, "y": 1038.0, "w": 152.0, "h": 40.0, "line_num": 18, "text": "move()"}, {"x": 223.0, "y": 1083.0, "w": 311.0, "h": 46.0, "line_num": 19, "text": "turn-around ()"}, {"x": 108.0, "y": 1159.0, "w": 401.0, "h": 50.0, "line_num": 20, "text": "det turn-right()"}, {"x": 217.0, "y": 1219.0, "w": 389.0, "h": 44.0, "line_num": 21, "text": "for i in range (3):"}, {"x": 274.0, "y": 1274.0, "w": 245.0, "h": 45.0, "line_num": 22, "text": "turn-left ()"}, {"x": 120.0, "y": 1335.0, "w": 429.0, "h": 46.0, "line_num": 23, "text": "def turn- around()"}, {"x": 215.0, "y": 1393.0, "w": 371.0, "h": 41.0, "line_num": 24, "text": "for i in range (2):"}, {"x": 263.0, "y": 1437.0, "w": 251.0, "h": 39.0, "line_num": 25, "text": "turn-left ()"}, {"x": 51.0, "y": 1485.0, "w": 36.0, "h": 51.0, "line_num": 26, "text": "if"}, {"x": 132.0, "y": 1508.0, "w": 537.0, "h": 36.0, "line_num": 27, "text": "name == '_main' ':"}, {"x": 121.0, "y": 1545.0, "w": 161.0, "h": 38.0, "line_num": 28, "text": "main()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 64.01785714285714, "ir_algo_output_code": "from karel. stanfordkarel import*\ndef main ()\n    move()\n    move()\n    turn-right ()\n    move()\n    turn-left()\n    move()\n    pick-beeper()\n    return-home()\ndef return_home()\n    turn-around()\n    move()\n    turn-right()\n    move ()\n    turn-left ()\n    move()\n    move()\n    turn-around ()\ndet turn-right()\n    for i in range (3):\n    turn-left ()\ndef turn- around()\n    for i in range (2):\n    turn-left ()\nif\nname == '_main' ':\nmain()\n", "ir_algo_output_indented_lines": [{"x": 95.0, "y": 64.0, "w": 675.0, "h": 50.0, "line_num": 1, "text": "from karel. stanfordkarel import*", "cluster_label": 1, "indentation": 0}, {"x": 105.0, "y": 168.0, "w": 253.0, "h": 47.0, "line_num": 2, "text": "def main ()", "cluster_label": 1, "indentation": 0}, {"x": 191.0, "y": 235.0, "w": 152.0, "h": 38.0, "line_num": 3, "text": "move()", "cluster_label": 0, "indentation": 1}, {"x": 198.0, "y": 283.0, "w": 150.0, "h": 38.0, "line_num": 4, "text": "move()", "cluster_label": 0, "indentation": 1}, {"x": 197.0, "y": 330.0, "w": 280.0, "h": 45.0, "line_num": 5, "text": "turn-right ()", "cluster_label": 0, "indentation": 1}, {"x": 204.0, "y": 388.0, "w": 161.0, "h": 40.0, "line_num": 6, "text": "move()", "cluster_label": 0, "indentation": 1}, {"x": 205.0, "y": 432.0, "w": 259.0, "h": 46.0, "line_num": 7, "text": "turn-left()", "cluster_label": 0, "indentation": 1}, {"x": 216.0, "y": 498.0, "w": 149.0, "h": 36.0, "line_num": 8, "text": "move()", "cluster_label": 0, "indentation": 1}, {"x": 217.0, "y": 543.0, "w": 285.0, "h": 43.0, "line_num": 9, "text": "pick-beeper()", "cluster_label": 0, "indentation": 1}, {"x": 225.0, "y": 597.0, "w": 320.0, "h": 40.0, "line_num": 10, "text": "return-home()", "cluster_label": 0, "indentation": 1}, {"x": 112.0, "y": 666.0, "w": 414.0, "h": 47.0, "line_num": 11, "text": "def return_home()", "cluster_label": 1, "indentation": 0}, {"x": 198.0, "y": 726.0, "w": 312.0, "h": 44.0, "line_num": 12, "text": "turn-around()", "cluster_label": 0, "indentation": 1}, {"x": 204.0, "y": 787.0, "w": 149.0, "h": 39.0, "line_num": 13, "text": "move()", "cluster_label": 0, "indentation": 1}, {"x": 212.0, "y": 831.0, "w": 246.0, "h": 47.0, "line_num": 14, "text": "turn-right()", "cluster_label": 0, "indentation": 1}, {"x": 215.0, "y": 892.0, "w": 155.0, "h": 38.0, "line_num": 15, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 220.0, "y": 938.0, "w": 248.0, "h": 44.0, "line_num": 16, "text": "turn-left ()", "cluster_label": 0, "indentation": 1}, {"x": 222.0, "y": 1001.0, "w": 138.0, "h": 37.0, "line_num": 17, "text": "move()", "cluster_label": 0, "indentation": 1}, {"x": 224.0, "y": 1038.0, "w": 152.0, "h": 40.0, "line_num": 18, "text": "move()", "cluster_label": 0, "indentation": 1}, {"x": 223.0, "y": 1083.0, "w": 311.0, "h": 46.0, "line_num": 19, "text": "turn-around ()", "cluster_label": 0, "indentation": 1}, {"x": 108.0, "y": 1159.0, "w": 401.0, "h": 50.0, "line_num": 20, "text": "det turn-right()", "cluster_label": 1, "indentation": 0}, {"x": 217.0, "y": 1219.0, "w": 389.0, "h": 44.0, "line_num": 21, "text": "for i in range (3):", "cluster_label": 0, "indentation": 1}, {"x": 274.0, "y": 1274.0, "w": 245.0, "h": 45.0, "line_num": 22, "text": "turn-left ()", "cluster_label": 0, "indentation": 1}, {"x": 120.0, "y": 1335.0, "w": 429.0, "h": 46.0, "line_num": 23, "text": "def turn- around()", "cluster_label": 1, "indentation": 0}, {"x": 215.0, "y": 1393.0, "w": 371.0, "h": 41.0, "line_num": 24, "text": "for i in range (2):", "cluster_label": 0, "indentation": 1}, {"x": 263.0, "y": 1437.0, "w": 251.0, "h": 39.0, "line_num": 25, "text": "turn-left ()", "cluster_label": 0, "indentation": 1}, {"x": 51.0, "y": 1485.0, "w": 36.0, "h": 51.0, "line_num": 26, "text": "if", "cluster_label": 1, "indentation": 0}, {"x": 132.0, "y": 1508.0, "w": 537.0, "h": 36.0, "line_num": 27, "text": "name == '_main' ':", "cluster_label": 1, "indentation": 0}, {"x": 121.0, "y": 1545.0, "w": 161.0, "h": 38.0, "line_num": 28, "text": "main()", "cluster_label": 1, "indentation": 0}], "ir_algo_output_edit_distance": 56, "prompting_method": "none", "lm_post_processed_code": "from karel. stanfordkarel import*\ndef main ()\n    move()\n    move()\n    turn-right ()\n    move()\n    turn-left()\n    move()\n    pick-beeper()\n    return-home()\ndef return_home()\n    turn-around()\n    move()\n    turn-right()\n    move ()\n    turn-left ()\n    move()\n    move()\n    turn-around ()\ndet turn-right()\n    for i in range (3):\n    turn-left ()\ndef turn- around()\n    for i in range (2):\n    turn-left ()\nif\nname == '_main' ':\nmain()\n", "lm_post_processed_edit_distance": 56}, {"image_id": 8, "image_height": 1600, "image_width": 1200, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 95.0, "y": 64.0, "w": 675.0, "h": 50.0, "line_num": 1, "text": "from karel. stanfordkarel import*"}, {"x": 105.0, "y": 168.0, "w": 253.0, "h": 47.0, "line_num": 2, "text": "def main ()"}, {"x": 191.0, "y": 235.0, "w": 152.0, "h": 38.0, "line_num": 3, "text": "move()"}, {"x": 198.0, "y": 283.0, "w": 150.0, "h": 38.0, "line_num": 4, "text": "move()"}, {"x": 197.0, "y": 330.0, "w": 280.0, "h": 45.0, "line_num": 5, "text": "turn-right ()"}, {"x": 204.0, "y": 388.0, "w": 161.0, "h": 40.0, "line_num": 6, "text": "move()"}, {"x": 205.0, "y": 432.0, "w": 259.0, "h": 46.0, "line_num": 7, "text": "turn-left()"}, {"x": 216.0, "y": 498.0, "w": 149.0, "h": 36.0, "line_num": 8, "text": "move()"}, {"x": 217.0, "y": 543.0, "w": 285.0, "h": 43.0, "line_num": 9, "text": "pick-beeper()"}, {"x": 225.0, "y": 597.0, "w": 320.0, "h": 40.0, "line_num": 10, "text": "return-home()"}, {"x": 112.0, "y": 666.0, "w": 414.0, "h": 47.0, "line_num": 11, "text": "def return_home()"}, {"x": 198.0, "y": 726.0, "w": 312.0, "h": 44.0, "line_num": 12, "text": "turn-around()"}, {"x": 204.0, "y": 787.0, "w": 149.0, "h": 39.0, "line_num": 13, "text": "move()"}, {"x": 212.0, "y": 831.0, "w": 246.0, "h": 47.0, "line_num": 14, "text": "turn-right()"}, {"x": 215.0, "y": 892.0, "w": 155.0, "h": 38.0, "line_num": 15, "text": "move ()"}, {"x": 220.0, "y": 938.0, "w": 248.0, "h": 44.0, "line_num": 16, "text": "turn-left ()"}, {"x": 222.0, "y": 1001.0, "w": 138.0, "h": 37.0, "line_num": 17, "text": "move()"}, {"x": 224.0, "y": 1038.0, "w": 152.0, "h": 40.0, "line_num": 18, "text": "move()"}, {"x": 223.0, "y": 1083.0, "w": 311.0, "h": 46.0, "line_num": 19, "text": "turn-around ()"}, {"x": 108.0, "y": 1159.0, "w": 401.0, "h": 50.0, "line_num": 20, "text": "det turn-right()"}, {"x": 217.0, "y": 1219.0, "w": 389.0, "h": 44.0, "line_num": 21, "text": "for i in range (3):"}, {"x": 274.0, "y": 1274.0, "w": 245.0, "h": 45.0, "line_num": 22, "text": "turn-left ()"}, {"x": 120.0, "y": 1335.0, "w": 429.0, "h": 46.0, "line_num": 23, "text": "def turn- around()"}, {"x": 215.0, "y": 1393.0, "w": 371.0, "h": 41.0, "line_num": 24, "text": "for i in range (2):"}, {"x": 263.0, "y": 1437.0, "w": 251.0, "h": 39.0, "line_num": 25, "text": "turn-left ()"}, {"x": 51.0, "y": 1485.0, "w": 36.0, "h": 51.0, "line_num": 26, "text": "if"}, {"x": 132.0, "y": 1508.0, "w": 537.0, "h": 36.0, "line_num": 27, "text": "name == '_main' ':"}, {"x": 121.0, "y": 1545.0, "w": 161.0, "h": 38.0, "line_num": 28, "text": "main()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 64.01785714285714, "ir_algo_output_code": "from karel. stanfordkarel import*\ndef main ()\n    move()\n    move()\n    turn-right ()\n    move()\n    turn-left()\n    move()\n    pick-beeper()\n    return-home()\ndef return_home()\n    turn-around()\n    move()\n    turn-right()\n    move ()\n    turn-left ()\n    move()\n    move()\n    turn-around ()\ndet turn-right()\n    for i in range (3):\n    turn-left ()\ndef turn- around()\n    for i in range (2):\n    turn-left ()\nif\nname == '_main' ':\nmain()\n", "ir_algo_output_indented_lines": [{"x": 95.0, "y": 64.0, "w": 675.0, "h": 50.0, "line_num": 1, "text": "from karel. stanfordkarel import*", "cluster_label": 1, "indentation": 0}, {"x": 105.0, "y": 168.0, "w": 253.0, "h": 47.0, "line_num": 2, "text": "def main ()", "cluster_label": 1, "indentation": 0}, {"x": 191.0, "y": 235.0, "w": 152.0, "h": 38.0, "line_num": 3, "text": "move()", "cluster_label": 0, "indentation": 1}, {"x": 198.0, "y": 283.0, "w": 150.0, "h": 38.0, "line_num": 4, "text": "move()", "cluster_label": 0, "indentation": 1}, {"x": 197.0, "y": 330.0, "w": 280.0, "h": 45.0, "line_num": 5, "text": "turn-right ()", "cluster_label": 0, "indentation": 1}, {"x": 204.0, "y": 388.0, "w": 161.0, "h": 40.0, "line_num": 6, "text": "move()", "cluster_label": 0, "indentation": 1}, {"x": 205.0, "y": 432.0, "w": 259.0, "h": 46.0, "line_num": 7, "text": "turn-left()", "cluster_label": 0, "indentation": 1}, {"x": 216.0, "y": 498.0, "w": 149.0, "h": 36.0, "line_num": 8, "text": "move()", "cluster_label": 0, "indentation": 1}, {"x": 217.0, "y": 543.0, "w": 285.0, "h": 43.0, "line_num": 9, "text": "pick-beeper()", "cluster_label": 0, "indentation": 1}, {"x": 225.0, "y": 597.0, "w": 320.0, "h": 40.0, "line_num": 10, "text": "return-home()", "cluster_label": 0, "indentation": 1}, {"x": 112.0, "y": 666.0, "w": 414.0, "h": 47.0, "line_num": 11, "text": "def return_home()", "cluster_label": 1, "indentation": 0}, {"x": 198.0, "y": 726.0, "w": 312.0, "h": 44.0, "line_num": 12, "text": "turn-around()", "cluster_label": 0, "indentation": 1}, {"x": 204.0, "y": 787.0, "w": 149.0, "h": 39.0, "line_num": 13, "text": "move()", "cluster_label": 0, "indentation": 1}, {"x": 212.0, "y": 831.0, "w": 246.0, "h": 47.0, "line_num": 14, "text": "turn-right()", "cluster_label": 0, "indentation": 1}, {"x": 215.0, "y": 892.0, "w": 155.0, "h": 38.0, "line_num": 15, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 220.0, "y": 938.0, "w": 248.0, "h": 44.0, "line_num": 16, "text": "turn-left ()", "cluster_label": 0, "indentation": 1}, {"x": 222.0, "y": 1001.0, "w": 138.0, "h": 37.0, "line_num": 17, "text": "move()", "cluster_label": 0, "indentation": 1}, {"x": 224.0, "y": 1038.0, "w": 152.0, "h": 40.0, "line_num": 18, "text": "move()", "cluster_label": 0, "indentation": 1}, {"x": 223.0, "y": 1083.0, "w": 311.0, "h": 46.0, "line_num": 19, "text": "turn-around ()", "cluster_label": 0, "indentation": 1}, {"x": 108.0, "y": 1159.0, "w": 401.0, "h": 50.0, "line_num": 20, "text": "det turn-right()", "cluster_label": 1, "indentation": 0}, {"x": 217.0, "y": 1219.0, "w": 389.0, "h": 44.0, "line_num": 21, "text": "for i in range (3):", "cluster_label": 0, "indentation": 1}, {"x": 274.0, "y": 1274.0, "w": 245.0, "h": 45.0, "line_num": 22, "text": "turn-left ()", "cluster_label": 0, "indentation": 1}, {"x": 120.0, "y": 1335.0, "w": 429.0, "h": 46.0, "line_num": 23, "text": "def turn- around()", "cluster_label": 1, "indentation": 0}, {"x": 215.0, "y": 1393.0, "w": 371.0, "h": 41.0, "line_num": 24, "text": "for i in range (2):", "cluster_label": 0, "indentation": 1}, {"x": 263.0, "y": 1437.0, "w": 251.0, "h": 39.0, "line_num": 25, "text": "turn-left ()", "cluster_label": 0, "indentation": 1}, {"x": 51.0, "y": 1485.0, "w": 36.0, "h": 51.0, "line_num": 26, "text": "if", "cluster_label": 1, "indentation": 0}, {"x": 132.0, "y": 1508.0, "w": 537.0, "h": 36.0, "line_num": 27, "text": "name == '_main' ':", "cluster_label": 1, "indentation": 0}, {"x": 121.0, "y": 1545.0, "w": 161.0, "h": 38.0, "line_num": 28, "text": "main()", "cluster_label": 1, "indentation": 0}], "ir_algo_output_edit_distance": 56, "prompting_method": "cot-test1", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\nmove()\nmove()\nturn_right()\nmove()\nturn_left()\nmove()\npick_beeper()\nreturn_home()\n\ndef return_home():\nturn_around()\nmove()\nturn_right()\nmove()\nturn_left()\nmove()\nmove()\nturn_around()\n\ndef turn_right():\nfor i in range(3):\nturn_left()\n\ndef turn_around():\nfor i in range(2):\nturn_left()\nif __name__ == '__main__':\nmain()\n", "lm_post_processed_edit_distance": 95}, {"image_id": 8, "image_height": 1600, "image_width": 1200, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 95.0, "y": 64.0, "w": 675.0, "h": 50.0, "line_num": 1, "text": "from karel. stanfordkarel import*"}, {"x": 105.0, "y": 168.0, "w": 253.0, "h": 47.0, "line_num": 2, "text": "def main ()"}, {"x": 191.0, "y": 235.0, "w": 152.0, "h": 38.0, "line_num": 3, "text": "move()"}, {"x": 198.0, "y": 283.0, "w": 150.0, "h": 38.0, "line_num": 4, "text": "move()"}, {"x": 197.0, "y": 330.0, "w": 280.0, "h": 45.0, "line_num": 5, "text": "turn-right ()"}, {"x": 204.0, "y": 388.0, "w": 161.0, "h": 40.0, "line_num": 6, "text": "move()"}, {"x": 205.0, "y": 432.0, "w": 259.0, "h": 46.0, "line_num": 7, "text": "turn-left()"}, {"x": 216.0, "y": 498.0, "w": 149.0, "h": 36.0, "line_num": 8, "text": "move()"}, {"x": 217.0, "y": 543.0, "w": 285.0, "h": 43.0, "line_num": 9, "text": "pick-beeper()"}, {"x": 225.0, "y": 597.0, "w": 320.0, "h": 40.0, "line_num": 10, "text": "return-home()"}, {"x": 112.0, "y": 666.0, "w": 414.0, "h": 47.0, "line_num": 11, "text": "def return_home()"}, {"x": 198.0, "y": 726.0, "w": 312.0, "h": 44.0, "line_num": 12, "text": "turn-around()"}, {"x": 204.0, "y": 787.0, "w": 149.0, "h": 39.0, "line_num": 13, "text": "move()"}, {"x": 212.0, "y": 831.0, "w": 246.0, "h": 47.0, "line_num": 14, "text": "turn-right()"}, {"x": 215.0, "y": 892.0, "w": 155.0, "h": 38.0, "line_num": 15, "text": "move ()"}, {"x": 220.0, "y": 938.0, "w": 248.0, "h": 44.0, "line_num": 16, "text": "turn-left ()"}, {"x": 222.0, "y": 1001.0, "w": 138.0, "h": 37.0, "line_num": 17, "text": "move()"}, {"x": 224.0, "y": 1038.0, "w": 152.0, "h": 40.0, "line_num": 18, "text": "move()"}, {"x": 223.0, "y": 1083.0, "w": 311.0, "h": 46.0, "line_num": 19, "text": "turn-around ()"}, {"x": 108.0, "y": 1159.0, "w": 401.0, "h": 50.0, "line_num": 20, "text": "det turn-right()"}, {"x": 217.0, "y": 1219.0, "w": 389.0, "h": 44.0, "line_num": 21, "text": "for i in range (3):"}, {"x": 274.0, "y": 1274.0, "w": 245.0, "h": 45.0, "line_num": 22, "text": "turn-left ()"}, {"x": 120.0, "y": 1335.0, "w": 429.0, "h": 46.0, "line_num": 23, "text": "def turn- around()"}, {"x": 215.0, "y": 1393.0, "w": 371.0, "h": 41.0, "line_num": 24, "text": "for i in range (2):"}, {"x": 263.0, "y": 1437.0, "w": 251.0, "h": 39.0, "line_num": 25, "text": "turn-left ()"}, {"x": 51.0, "y": 1485.0, "w": 36.0, "h": 51.0, "line_num": 26, "text": "if"}, {"x": 132.0, "y": 1508.0, "w": 537.0, "h": 36.0, "line_num": 27, "text": "name == '_main' ':"}, {"x": 121.0, "y": 1545.0, "w": 161.0, "h": 38.0, "line_num": 28, "text": "main()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 64.01785714285714, "ir_algo_output_code": "from karel. stanfordkarel import*\ndef main ()\n    move()\n    move()\n    turn-right ()\n    move()\n    turn-left()\n    move()\n    pick-beeper()\n    return-home()\ndef return_home()\n    turn-around()\n    move()\n    turn-right()\n    move ()\n    turn-left ()\n    move()\n    move()\n    turn-around ()\ndet turn-right()\n    for i in range (3):\n    turn-left ()\ndef turn- around()\n    for i in range (2):\n    turn-left ()\nif\nname == '_main' ':\nmain()\n", "ir_algo_output_indented_lines": [{"x": 95.0, "y": 64.0, "w": 675.0, "h": 50.0, "line_num": 1, "text": "from karel. stanfordkarel import*", "cluster_label": 1, "indentation": 0}, {"x": 105.0, "y": 168.0, "w": 253.0, "h": 47.0, "line_num": 2, "text": "def main ()", "cluster_label": 1, "indentation": 0}, {"x": 191.0, "y": 235.0, "w": 152.0, "h": 38.0, "line_num": 3, "text": "move()", "cluster_label": 0, "indentation": 1}, {"x": 198.0, "y": 283.0, "w": 150.0, "h": 38.0, "line_num": 4, "text": "move()", "cluster_label": 0, "indentation": 1}, {"x": 197.0, "y": 330.0, "w": 280.0, "h": 45.0, "line_num": 5, "text": "turn-right ()", "cluster_label": 0, "indentation": 1}, {"x": 204.0, "y": 388.0, "w": 161.0, "h": 40.0, "line_num": 6, "text": "move()", "cluster_label": 0, "indentation": 1}, {"x": 205.0, "y": 432.0, "w": 259.0, "h": 46.0, "line_num": 7, "text": "turn-left()", "cluster_label": 0, "indentation": 1}, {"x": 216.0, "y": 498.0, "w": 149.0, "h": 36.0, "line_num": 8, "text": "move()", "cluster_label": 0, "indentation": 1}, {"x": 217.0, "y": 543.0, "w": 285.0, "h": 43.0, "line_num": 9, "text": "pick-beeper()", "cluster_label": 0, "indentation": 1}, {"x": 225.0, "y": 597.0, "w": 320.0, "h": 40.0, "line_num": 10, "text": "return-home()", "cluster_label": 0, "indentation": 1}, {"x": 112.0, "y": 666.0, "w": 414.0, "h": 47.0, "line_num": 11, "text": "def return_home()", "cluster_label": 1, "indentation": 0}, {"x": 198.0, "y": 726.0, "w": 312.0, "h": 44.0, "line_num": 12, "text": "turn-around()", "cluster_label": 0, "indentation": 1}, {"x": 204.0, "y": 787.0, "w": 149.0, "h": 39.0, "line_num": 13, "text": "move()", "cluster_label": 0, "indentation": 1}, {"x": 212.0, "y": 831.0, "w": 246.0, "h": 47.0, "line_num": 14, "text": "turn-right()", "cluster_label": 0, "indentation": 1}, {"x": 215.0, "y": 892.0, "w": 155.0, "h": 38.0, "line_num": 15, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 220.0, "y": 938.0, "w": 248.0, "h": 44.0, "line_num": 16, "text": "turn-left ()", "cluster_label": 0, "indentation": 1}, {"x": 222.0, "y": 1001.0, "w": 138.0, "h": 37.0, "line_num": 17, "text": "move()", "cluster_label": 0, "indentation": 1}, {"x": 224.0, "y": 1038.0, "w": 152.0, "h": 40.0, "line_num": 18, "text": "move()", "cluster_label": 0, "indentation": 1}, {"x": 223.0, "y": 1083.0, "w": 311.0, "h": 46.0, "line_num": 19, "text": "turn-around ()", "cluster_label": 0, "indentation": 1}, {"x": 108.0, "y": 1159.0, "w": 401.0, "h": 50.0, "line_num": 20, "text": "det turn-right()", "cluster_label": 1, "indentation": 0}, {"x": 217.0, "y": 1219.0, "w": 389.0, "h": 44.0, "line_num": 21, "text": "for i in range (3):", "cluster_label": 0, "indentation": 1}, {"x": 274.0, "y": 1274.0, "w": 245.0, "h": 45.0, "line_num": 22, "text": "turn-left ()", "cluster_label": 0, "indentation": 1}, {"x": 120.0, "y": 1335.0, "w": 429.0, "h": 46.0, "line_num": 23, "text": "def turn- around()", "cluster_label": 1, "indentation": 0}, {"x": 215.0, "y": 1393.0, "w": 371.0, "h": 41.0, "line_num": 24, "text": "for i in range (2):", "cluster_label": 0, "indentation": 1}, {"x": 263.0, "y": 1437.0, "w": 251.0, "h": 39.0, "line_num": 25, "text": "turn-left ()", "cluster_label": 0, "indentation": 1}, {"x": 51.0, "y": 1485.0, "w": 36.0, "h": 51.0, "line_num": 26, "text": "if", "cluster_label": 1, "indentation": 0}, {"x": 132.0, "y": 1508.0, "w": 537.0, "h": 36.0, "line_num": 27, "text": "name == '_main' ':", "cluster_label": 1, "indentation": 0}, {"x": 121.0, "y": 1545.0, "w": 161.0, "h": 38.0, "line_num": 28, "text": "main()", "cluster_label": 1, "indentation": 0}], "ir_algo_output_edit_distance": 56, "prompting_method": "cot-test5", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    move()\n    move()\n    turn_right()\n    move()\n    turn_left()\n    move()\n    pick_beeper()\n    return_home()\n\ndef return_home():\n    turn_around()\n    move()\n    turn_right()\n    move()\n    turn_left()\n    move()\n    move()\n    turn_around()\n\ndef turn_right():\n    for i in range (3):\n        turn_left()\n\ndef turn_around():\n    for i in range (2):\n        turn_left()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 5}, {"image_id": 8, "image_height": 1600, "image_width": 1200, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 95.0, "y": 64.0, "w": 675.0, "h": 50.0, "line_num": 1, "text": "from karel. stanfordkarel import*"}, {"x": 105.0, "y": 168.0, "w": 253.0, "h": 47.0, "line_num": 2, "text": "def main ()"}, {"x": 191.0, "y": 235.0, "w": 152.0, "h": 38.0, "line_num": 3, "text": "move()"}, {"x": 198.0, "y": 283.0, "w": 150.0, "h": 38.0, "line_num": 4, "text": "move()"}, {"x": 197.0, "y": 330.0, "w": 280.0, "h": 45.0, "line_num": 5, "text": "turn-right ()"}, {"x": 204.0, "y": 388.0, "w": 161.0, "h": 40.0, "line_num": 6, "text": "move()"}, {"x": 205.0, "y": 432.0, "w": 259.0, "h": 46.0, "line_num": 7, "text": "turn-left()"}, {"x": 216.0, "y": 498.0, "w": 149.0, "h": 36.0, "line_num": 8, "text": "move()"}, {"x": 217.0, "y": 543.0, "w": 285.0, "h": 43.0, "line_num": 9, "text": "pick-beeper()"}, {"x": 225.0, "y": 597.0, "w": 320.0, "h": 40.0, "line_num": 10, "text": "return-home()"}, {"x": 112.0, "y": 666.0, "w": 414.0, "h": 47.0, "line_num": 11, "text": "def return_home()"}, {"x": 198.0, "y": 726.0, "w": 312.0, "h": 44.0, "line_num": 12, "text": "turn-around()"}, {"x": 204.0, "y": 787.0, "w": 149.0, "h": 39.0, "line_num": 13, "text": "move()"}, {"x": 212.0, "y": 831.0, "w": 246.0, "h": 47.0, "line_num": 14, "text": "turn-right()"}, {"x": 215.0, "y": 892.0, "w": 155.0, "h": 38.0, "line_num": 15, "text": "move ()"}, {"x": 220.0, "y": 938.0, "w": 248.0, "h": 44.0, "line_num": 16, "text": "turn-left ()"}, {"x": 222.0, "y": 1001.0, "w": 138.0, "h": 37.0, "line_num": 17, "text": "move()"}, {"x": 224.0, "y": 1038.0, "w": 152.0, "h": 40.0, "line_num": 18, "text": "move()"}, {"x": 223.0, "y": 1083.0, "w": 311.0, "h": 46.0, "line_num": 19, "text": "turn-around ()"}, {"x": 108.0, "y": 1159.0, "w": 401.0, "h": 50.0, "line_num": 20, "text": "det turn-right()"}, {"x": 217.0, "y": 1219.0, "w": 389.0, "h": 44.0, "line_num": 21, "text": "for i in range (3):"}, {"x": 274.0, "y": 1274.0, "w": 245.0, "h": 45.0, "line_num": 22, "text": "turn-left ()"}, {"x": 120.0, "y": 1335.0, "w": 429.0, "h": 46.0, "line_num": 23, "text": "def turn- around()"}, {"x": 215.0, "y": 1393.0, "w": 371.0, "h": 41.0, "line_num": 24, "text": "for i in range (2):"}, {"x": 263.0, "y": 1437.0, "w": 251.0, "h": 39.0, "line_num": 25, "text": "turn-left ()"}, {"x": 51.0, "y": 1485.0, "w": 36.0, "h": 51.0, "line_num": 26, "text": "if"}, {"x": 132.0, "y": 1508.0, "w": 537.0, "h": 36.0, "line_num": 27, "text": "name == '_main' ':"}, {"x": 121.0, "y": 1545.0, "w": 161.0, "h": 38.0, "line_num": 28, "text": "main()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 64.01785714285714, "ir_algo_output_code": "from karel. stanfordkarel import*\ndef main ()\n    move()\n    move()\n    turn-right ()\n    move()\n    turn-left()\n    move()\n    pick-beeper()\n    return-home()\ndef return_home()\n    turn-around()\n    move()\n    turn-right()\n    move ()\n    turn-left ()\n    move()\n    move()\n    turn-around ()\ndet turn-right()\n    for i in range (3):\n    turn-left ()\ndef turn- around()\n    for i in range (2):\n    turn-left ()\nif\nname == '_main' ':\nmain()\n", "ir_algo_output_indented_lines": [{"x": 95.0, "y": 64.0, "w": 675.0, "h": 50.0, "line_num": 1, "text": "from karel. stanfordkarel import*", "cluster_label": 1, "indentation": 0}, {"x": 105.0, "y": 168.0, "w": 253.0, "h": 47.0, "line_num": 2, "text": "def main ()", "cluster_label": 1, "indentation": 0}, {"x": 191.0, "y": 235.0, "w": 152.0, "h": 38.0, "line_num": 3, "text": "move()", "cluster_label": 0, "indentation": 1}, {"x": 198.0, "y": 283.0, "w": 150.0, "h": 38.0, "line_num": 4, "text": "move()", "cluster_label": 0, "indentation": 1}, {"x": 197.0, "y": 330.0, "w": 280.0, "h": 45.0, "line_num": 5, "text": "turn-right ()", "cluster_label": 0, "indentation": 1}, {"x": 204.0, "y": 388.0, "w": 161.0, "h": 40.0, "line_num": 6, "text": "move()", "cluster_label": 0, "indentation": 1}, {"x": 205.0, "y": 432.0, "w": 259.0, "h": 46.0, "line_num": 7, "text": "turn-left()", "cluster_label": 0, "indentation": 1}, {"x": 216.0, "y": 498.0, "w": 149.0, "h": 36.0, "line_num": 8, "text": "move()", "cluster_label": 0, "indentation": 1}, {"x": 217.0, "y": 543.0, "w": 285.0, "h": 43.0, "line_num": 9, "text": "pick-beeper()", "cluster_label": 0, "indentation": 1}, {"x": 225.0, "y": 597.0, "w": 320.0, "h": 40.0, "line_num": 10, "text": "return-home()", "cluster_label": 0, "indentation": 1}, {"x": 112.0, "y": 666.0, "w": 414.0, "h": 47.0, "line_num": 11, "text": "def return_home()", "cluster_label": 1, "indentation": 0}, {"x": 198.0, "y": 726.0, "w": 312.0, "h": 44.0, "line_num": 12, "text": "turn-around()", "cluster_label": 0, "indentation": 1}, {"x": 204.0, "y": 787.0, "w": 149.0, "h": 39.0, "line_num": 13, "text": "move()", "cluster_label": 0, "indentation": 1}, {"x": 212.0, "y": 831.0, "w": 246.0, "h": 47.0, "line_num": 14, "text": "turn-right()", "cluster_label": 0, "indentation": 1}, {"x": 215.0, "y": 892.0, "w": 155.0, "h": 38.0, "line_num": 15, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 220.0, "y": 938.0, "w": 248.0, "h": 44.0, "line_num": 16, "text": "turn-left ()", "cluster_label": 0, "indentation": 1}, {"x": 222.0, "y": 1001.0, "w": 138.0, "h": 37.0, "line_num": 17, "text": "move()", "cluster_label": 0, "indentation": 1}, {"x": 224.0, "y": 1038.0, "w": 152.0, "h": 40.0, "line_num": 18, "text": "move()", "cluster_label": 0, "indentation": 1}, {"x": 223.0, "y": 1083.0, "w": 311.0, "h": 46.0, "line_num": 19, "text": "turn-around ()", "cluster_label": 0, "indentation": 1}, {"x": 108.0, "y": 1159.0, "w": 401.0, "h": 50.0, "line_num": 20, "text": "det turn-right()", "cluster_label": 1, "indentation": 0}, {"x": 217.0, "y": 1219.0, "w": 389.0, "h": 44.0, "line_num": 21, "text": "for i in range (3):", "cluster_label": 0, "indentation": 1}, {"x": 274.0, "y": 1274.0, "w": 245.0, "h": 45.0, "line_num": 22, "text": "turn-left ()", "cluster_label": 0, "indentation": 1}, {"x": 120.0, "y": 1335.0, "w": 429.0, "h": 46.0, "line_num": 23, "text": "def turn- around()", "cluster_label": 1, "indentation": 0}, {"x": 215.0, "y": 1393.0, "w": 371.0, "h": 41.0, "line_num": 24, "text": "for i in range (2):", "cluster_label": 0, "indentation": 1}, {"x": 263.0, "y": 1437.0, "w": 251.0, "h": 39.0, "line_num": 25, "text": "turn-left ()", "cluster_label": 0, "indentation": 1}, {"x": 51.0, "y": 1485.0, "w": 36.0, "h": 51.0, "line_num": 26, "text": "if", "cluster_label": 1, "indentation": 0}, {"x": 132.0, "y": 1508.0, "w": 537.0, "h": 36.0, "line_num": 27, "text": "name == '_main' ':", "cluster_label": 1, "indentation": 0}, {"x": 121.0, "y": 1545.0, "w": 161.0, "h": 38.0, "line_num": 28, "text": "main()", "cluster_label": 1, "indentation": 0}], "ir_algo_output_edit_distance": 56, "prompting_method": "simple-test2", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    move()\n    move()\n    turn_right()\n    move()\n    turn_left()\n    move()\n    pick_beeper()\n    return_home()\n\ndef return_home():\n    turn_around()\n    move()\n    turn_right()\n    move()\n    turn_left()\n    move()\n    move()\n    turn_around()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\n\ndef turn_around():\n    for i in range(2):\n        turn_left()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 3}, {"image_id": 8, "image_height": 1600, "image_width": 1200, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 95.0, "y": 64.0, "w": 675.0, "h": 50.0, "line_num": 1, "text": "from karel. stanfordkarel import*"}, {"x": 105.0, "y": 168.0, "w": 253.0, "h": 47.0, "line_num": 2, "text": "def main ()"}, {"x": 191.0, "y": 235.0, "w": 152.0, "h": 38.0, "line_num": 3, "text": "move()"}, {"x": 198.0, "y": 283.0, "w": 150.0, "h": 38.0, "line_num": 4, "text": "move()"}, {"x": 197.0, "y": 330.0, "w": 280.0, "h": 45.0, "line_num": 5, "text": "turn-right ()"}, {"x": 204.0, "y": 388.0, "w": 161.0, "h": 40.0, "line_num": 6, "text": "move()"}, {"x": 205.0, "y": 432.0, "w": 259.0, "h": 46.0, "line_num": 7, "text": "turn-left()"}, {"x": 216.0, "y": 498.0, "w": 149.0, "h": 36.0, "line_num": 8, "text": "move()"}, {"x": 217.0, "y": 543.0, "w": 285.0, "h": 43.0, "line_num": 9, "text": "pick-beeper()"}, {"x": 225.0, "y": 597.0, "w": 320.0, "h": 40.0, "line_num": 10, "text": "return-home()"}, {"x": 112.0, "y": 666.0, "w": 414.0, "h": 47.0, "line_num": 11, "text": "def return_home()"}, {"x": 198.0, "y": 726.0, "w": 312.0, "h": 44.0, "line_num": 12, "text": "turn-around()"}, {"x": 204.0, "y": 787.0, "w": 149.0, "h": 39.0, "line_num": 13, "text": "move()"}, {"x": 212.0, "y": 831.0, "w": 246.0, "h": 47.0, "line_num": 14, "text": "turn-right()"}, {"x": 215.0, "y": 892.0, "w": 155.0, "h": 38.0, "line_num": 15, "text": "move ()"}, {"x": 220.0, "y": 938.0, "w": 248.0, "h": 44.0, "line_num": 16, "text": "turn-left ()"}, {"x": 222.0, "y": 1001.0, "w": 138.0, "h": 37.0, "line_num": 17, "text": "move()"}, {"x": 224.0, "y": 1038.0, "w": 152.0, "h": 40.0, "line_num": 18, "text": "move()"}, {"x": 223.0, "y": 1083.0, "w": 311.0, "h": 46.0, "line_num": 19, "text": "turn-around ()"}, {"x": 108.0, "y": 1159.0, "w": 401.0, "h": 50.0, "line_num": 20, "text": "det turn-right()"}, {"x": 217.0, "y": 1219.0, "w": 389.0, "h": 44.0, "line_num": 21, "text": "for i in range (3):"}, {"x": 274.0, "y": 1274.0, "w": 245.0, "h": 45.0, "line_num": 22, "text": "turn-left ()"}, {"x": 120.0, "y": 1335.0, "w": 429.0, "h": 46.0, "line_num": 23, "text": "def turn- around()"}, {"x": 215.0, "y": 1393.0, "w": 371.0, "h": 41.0, "line_num": 24, "text": "for i in range (2):"}, {"x": 263.0, "y": 1437.0, "w": 251.0, "h": 39.0, "line_num": 25, "text": "turn-left ()"}, {"x": 51.0, "y": 1485.0, "w": 36.0, "h": 51.0, "line_num": 26, "text": "if"}, {"x": 132.0, "y": 1508.0, "w": 537.0, "h": 36.0, "line_num": 27, "text": "name == '_main' ':"}, {"x": 121.0, "y": 1545.0, "w": 161.0, "h": 38.0, "line_num": 28, "text": "main()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 64.01785714285714, "ir_algo_output_code": "from karel. stanfordkarel import*\ndef main ()\n    move()\n    move()\n    turn-right ()\n    move()\n    turn-left()\n    move()\n    pick-beeper()\n    return-home()\ndef return_home()\n    turn-around()\n    move()\n    turn-right()\n    move ()\n    turn-left ()\n    move()\n    move()\n    turn-around ()\ndet turn-right()\n    for i in range (3):\n    turn-left ()\ndef turn- around()\n    for i in range (2):\n    turn-left ()\nif\nname == '_main' ':\nmain()\n", "ir_algo_output_indented_lines": [{"x": 95.0, "y": 64.0, "w": 675.0, "h": 50.0, "line_num": 1, "text": "from karel. stanfordkarel import*", "cluster_label": 1, "indentation": 0}, {"x": 105.0, "y": 168.0, "w": 253.0, "h": 47.0, "line_num": 2, "text": "def main ()", "cluster_label": 1, "indentation": 0}, {"x": 191.0, "y": 235.0, "w": 152.0, "h": 38.0, "line_num": 3, "text": "move()", "cluster_label": 0, "indentation": 1}, {"x": 198.0, "y": 283.0, "w": 150.0, "h": 38.0, "line_num": 4, "text": "move()", "cluster_label": 0, "indentation": 1}, {"x": 197.0, "y": 330.0, "w": 280.0, "h": 45.0, "line_num": 5, "text": "turn-right ()", "cluster_label": 0, "indentation": 1}, {"x": 204.0, "y": 388.0, "w": 161.0, "h": 40.0, "line_num": 6, "text": "move()", "cluster_label": 0, "indentation": 1}, {"x": 205.0, "y": 432.0, "w": 259.0, "h": 46.0, "line_num": 7, "text": "turn-left()", "cluster_label": 0, "indentation": 1}, {"x": 216.0, "y": 498.0, "w": 149.0, "h": 36.0, "line_num": 8, "text": "move()", "cluster_label": 0, "indentation": 1}, {"x": 217.0, "y": 543.0, "w": 285.0, "h": 43.0, "line_num": 9, "text": "pick-beeper()", "cluster_label": 0, "indentation": 1}, {"x": 225.0, "y": 597.0, "w": 320.0, "h": 40.0, "line_num": 10, "text": "return-home()", "cluster_label": 0, "indentation": 1}, {"x": 112.0, "y": 666.0, "w": 414.0, "h": 47.0, "line_num": 11, "text": "def return_home()", "cluster_label": 1, "indentation": 0}, {"x": 198.0, "y": 726.0, "w": 312.0, "h": 44.0, "line_num": 12, "text": "turn-around()", "cluster_label": 0, "indentation": 1}, {"x": 204.0, "y": 787.0, "w": 149.0, "h": 39.0, "line_num": 13, "text": "move()", "cluster_label": 0, "indentation": 1}, {"x": 212.0, "y": 831.0, "w": 246.0, "h": 47.0, "line_num": 14, "text": "turn-right()", "cluster_label": 0, "indentation": 1}, {"x": 215.0, "y": 892.0, "w": 155.0, "h": 38.0, "line_num": 15, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 220.0, "y": 938.0, "w": 248.0, "h": 44.0, "line_num": 16, "text": "turn-left ()", "cluster_label": 0, "indentation": 1}, {"x": 222.0, "y": 1001.0, "w": 138.0, "h": 37.0, "line_num": 17, "text": "move()", "cluster_label": 0, "indentation": 1}, {"x": 224.0, "y": 1038.0, "w": 152.0, "h": 40.0, "line_num": 18, "text": "move()", "cluster_label": 0, "indentation": 1}, {"x": 223.0, "y": 1083.0, "w": 311.0, "h": 46.0, "line_num": 19, "text": "turn-around ()", "cluster_label": 0, "indentation": 1}, {"x": 108.0, "y": 1159.0, "w": 401.0, "h": 50.0, "line_num": 20, "text": "det turn-right()", "cluster_label": 1, "indentation": 0}, {"x": 217.0, "y": 1219.0, "w": 389.0, "h": 44.0, "line_num": 21, "text": "for i in range (3):", "cluster_label": 0, "indentation": 1}, {"x": 274.0, "y": 1274.0, "w": 245.0, "h": 45.0, "line_num": 22, "text": "turn-left ()", "cluster_label": 0, "indentation": 1}, {"x": 120.0, "y": 1335.0, "w": 429.0, "h": 46.0, "line_num": 23, "text": "def turn- around()", "cluster_label": 1, "indentation": 0}, {"x": 215.0, "y": 1393.0, "w": 371.0, "h": 41.0, "line_num": 24, "text": "for i in range (2):", "cluster_label": 0, "indentation": 1}, {"x": 263.0, "y": 1437.0, "w": 251.0, "h": 39.0, "line_num": 25, "text": "turn-left ()", "cluster_label": 0, "indentation": 1}, {"x": 51.0, "y": 1485.0, "w": 36.0, "h": 51.0, "line_num": 26, "text": "if", "cluster_label": 1, "indentation": 0}, {"x": 132.0, "y": 1508.0, "w": 537.0, "h": 36.0, "line_num": 27, "text": "name == '_main' ':", "cluster_label": 1, "indentation": 0}, {"x": 121.0, "y": 1545.0, "w": 161.0, "h": 38.0, "line_num": 28, "text": "main()", "cluster_label": 1, "indentation": 0}], "ir_algo_output_edit_distance": 56, "prompting_method": "simple-test3", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    move()\n    move()\n    turn_right()\n    move()\n    turn_left()\n    move()\n    pick_beeper()\n    return_home()\n\ndef return_home():\n    turn_around()\n    move()\n    turn_right()\n    move()\n    turn_left()\n    move()\n    move()\n    turn_around()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\n\ndef turn_around():\n    for i in range(2):\n        turn_left()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 3}, {"image_id": 8, "image_height": 1600, "image_width": 1200, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 95.0, "y": 64.0, "w": 675.0, "h": 50.0, "line_num": 1, "text": "from karel. stanfordkarel import*"}, {"x": 105.0, "y": 168.0, "w": 253.0, "h": 47.0, "line_num": 2, "text": "def main ()"}, {"x": 191.0, "y": 235.0, "w": 152.0, "h": 38.0, "line_num": 3, "text": "move()"}, {"x": 198.0, "y": 283.0, "w": 150.0, "h": 38.0, "line_num": 4, "text": "move()"}, {"x": 197.0, "y": 330.0, "w": 280.0, "h": 45.0, "line_num": 5, "text": "turn-right ()"}, {"x": 204.0, "y": 388.0, "w": 161.0, "h": 40.0, "line_num": 6, "text": "move()"}, {"x": 205.0, "y": 432.0, "w": 259.0, "h": 46.0, "line_num": 7, "text": "turn-left()"}, {"x": 216.0, "y": 498.0, "w": 149.0, "h": 36.0, "line_num": 8, "text": "move()"}, {"x": 217.0, "y": 543.0, "w": 285.0, "h": 43.0, "line_num": 9, "text": "pick-beeper()"}, {"x": 225.0, "y": 597.0, "w": 320.0, "h": 40.0, "line_num": 10, "text": "return-home()"}, {"x": 112.0, "y": 666.0, "w": 414.0, "h": 47.0, "line_num": 11, "text": "def return_home()"}, {"x": 198.0, "y": 726.0, "w": 312.0, "h": 44.0, "line_num": 12, "text": "turn-around()"}, {"x": 204.0, "y": 787.0, "w": 149.0, "h": 39.0, "line_num": 13, "text": "move()"}, {"x": 212.0, "y": 831.0, "w": 246.0, "h": 47.0, "line_num": 14, "text": "turn-right()"}, {"x": 215.0, "y": 892.0, "w": 155.0, "h": 38.0, "line_num": 15, "text": "move ()"}, {"x": 220.0, "y": 938.0, "w": 248.0, "h": 44.0, "line_num": 16, "text": "turn-left ()"}, {"x": 222.0, "y": 1001.0, "w": 138.0, "h": 37.0, "line_num": 17, "text": "move()"}, {"x": 224.0, "y": 1038.0, "w": 152.0, "h": 40.0, "line_num": 18, "text": "move()"}, {"x": 223.0, "y": 1083.0, "w": 311.0, "h": 46.0, "line_num": 19, "text": "turn-around ()"}, {"x": 108.0, "y": 1159.0, "w": 401.0, "h": 50.0, "line_num": 20, "text": "det turn-right()"}, {"x": 217.0, "y": 1219.0, "w": 389.0, "h": 44.0, "line_num": 21, "text": "for i in range (3):"}, {"x": 274.0, "y": 1274.0, "w": 245.0, "h": 45.0, "line_num": 22, "text": "turn-left ()"}, {"x": 120.0, "y": 1335.0, "w": 429.0, "h": 46.0, "line_num": 23, "text": "def turn- around()"}, {"x": 215.0, "y": 1393.0, "w": 371.0, "h": 41.0, "line_num": 24, "text": "for i in range (2):"}, {"x": 263.0, "y": 1437.0, "w": 251.0, "h": 39.0, "line_num": 25, "text": "turn-left ()"}, {"x": 51.0, "y": 1485.0, "w": 36.0, "h": 51.0, "line_num": 26, "text": "if"}, {"x": 132.0, "y": 1508.0, "w": 537.0, "h": 36.0, "line_num": 27, "text": "name == '_main' ':"}, {"x": 121.0, "y": 1545.0, "w": 161.0, "h": 38.0, "line_num": 28, "text": "main()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "from karel. stanfordkarel import*\ndef main ()\n    move()\n    move()\n    turn-right ()\n    move()\n    turn-left()\n    move()\n    pick-beeper()\n    return-home()\ndef return_home()\n    turn-around()\n    move()\n    turn-right()\n    move ()\n    turn-left ()\n    move()\n    move()\n    turn-around ()\ndet turn-right()\n    for i in range (3):\n        turn-left ()\ndef turn- around()\n    for i in range (2):\n        turn-left ()\nif\n    name == '_main' ':\n    main()\n", "ir_algo_output_indented_lines": [{"x": 95.0, "y": 64.0, "w": 675.0, "h": 50.0, "line_num": 1, "text": "from karel. stanfordkarel import*", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 105.0, "y": 168.0, "w": 253.0, "h": 47.0, "line_num": 2, "text": "def main ()", "delta": 10.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 191.0, "y": 235.0, "w": 152.0, "h": 38.0, "line_num": 3, "text": "move()", "delta": 86.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 198.0, "y": 283.0, "w": 150.0, "h": 38.0, "line_num": 4, "text": "move()", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 197.0, "y": 330.0, "w": 280.0, "h": 45.0, "line_num": 5, "text": "turn-right ()", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 204.0, "y": 388.0, "w": 161.0, "h": 40.0, "line_num": 6, "text": "move()", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 205.0, "y": 432.0, "w": 259.0, "h": 46.0, "line_num": 7, "text": "turn-left()", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 216.0, "y": 498.0, "w": 149.0, "h": 36.0, "line_num": 8, "text": "move()", "delta": 11.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 217.0, "y": 543.0, "w": 285.0, "h": 43.0, "line_num": 9, "text": "pick-beeper()", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 225.0, "y": 597.0, "w": 320.0, "h": 40.0, "line_num": 10, "text": "return-home()", "delta": 8.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 112.0, "y": 666.0, "w": 414.0, "h": 47.0, "line_num": 11, "text": "def return_home()", "delta": -113.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 198.0, "y": 726.0, "w": 312.0, "h": 44.0, "line_num": 12, "text": "turn-around()", "delta": 86.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 204.0, "y": 787.0, "w": 149.0, "h": 39.0, "line_num": 13, "text": "move()", "delta": 6.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 212.0, "y": 831.0, "w": 246.0, "h": 47.0, "line_num": 14, "text": "turn-right()", "delta": 8.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 215.0, "y": 892.0, "w": 155.0, "h": 38.0, "line_num": 15, "text": "move ()", "delta": 3.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 220.0, "y": 938.0, "w": 248.0, "h": 44.0, "line_num": 16, "text": "turn-left ()", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 222.0, "y": 1001.0, "w": 138.0, "h": 37.0, "line_num": 17, "text": "move()", "delta": 2.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 224.0, "y": 1038.0, "w": 152.0, "h": 40.0, "line_num": 18, "text": "move()", "delta": 2.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 223.0, "y": 1083.0, "w": 311.0, "h": 46.0, "line_num": 19, "text": "turn-around ()", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 108.0, "y": 1159.0, "w": 401.0, "h": 50.0, "line_num": 20, "text": "det turn-right()", "delta": -115.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 217.0, "y": 1219.0, "w": 389.0, "h": 44.0, "line_num": 21, "text": "for i in range (3):", "delta": 109.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 274.0, "y": 1274.0, "w": 245.0, "h": 45.0, "line_num": 22, "text": "turn-left ()", "delta": 57.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 120.0, "y": 1335.0, "w": 429.0, "h": 46.0, "line_num": 23, "text": "def turn- around()", "delta": -154.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 215.0, "y": 1393.0, "w": 371.0, "h": 41.0, "line_num": 24, "text": "for i in range (2):", "delta": 95.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 263.0, "y": 1437.0, "w": 251.0, "h": 39.0, "line_num": 25, "text": "turn-left ()", "delta": 48.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 51.0, "y": 1485.0, "w": 36.0, "h": 51.0, "line_num": 26, "text": "if", "delta": -212.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 132.0, "y": 1508.0, "w": 537.0, "h": 36.0, "line_num": 27, "text": "name == '_main' ':", "delta": 81.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 121.0, "y": 1545.0, "w": 161.0, "h": 38.0, "line_num": 28, "text": "main()", "delta": -11.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 45, "prompting_method": "none", "lm_post_processed_code": "from karel. stanfordkarel import*\ndef main ()\n    move()\n    move()\n    turn-right ()\n    move()\n    turn-left()\n    move()\n    pick-beeper()\n    return-home()\ndef return_home()\n    turn-around()\n    move()\n    turn-right()\n    move ()\n    turn-left ()\n    move()\n    move()\n    turn-around ()\ndet turn-right()\n    for i in range (3):\n        turn-left ()\ndef turn- around()\n    for i in range (2):\n        turn-left ()\nif\n    name == '_main' ':\n    main()\n", "lm_post_processed_edit_distance": 45}, {"image_id": 8, "image_height": 1600, "image_width": 1200, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 95.0, "y": 64.0, "w": 675.0, "h": 50.0, "line_num": 1, "text": "from karel. stanfordkarel import*"}, {"x": 105.0, "y": 168.0, "w": 253.0, "h": 47.0, "line_num": 2, "text": "def main ()"}, {"x": 191.0, "y": 235.0, "w": 152.0, "h": 38.0, "line_num": 3, "text": "move()"}, {"x": 198.0, "y": 283.0, "w": 150.0, "h": 38.0, "line_num": 4, "text": "move()"}, {"x": 197.0, "y": 330.0, "w": 280.0, "h": 45.0, "line_num": 5, "text": "turn-right ()"}, {"x": 204.0, "y": 388.0, "w": 161.0, "h": 40.0, "line_num": 6, "text": "move()"}, {"x": 205.0, "y": 432.0, "w": 259.0, "h": 46.0, "line_num": 7, "text": "turn-left()"}, {"x": 216.0, "y": 498.0, "w": 149.0, "h": 36.0, "line_num": 8, "text": "move()"}, {"x": 217.0, "y": 543.0, "w": 285.0, "h": 43.0, "line_num": 9, "text": "pick-beeper()"}, {"x": 225.0, "y": 597.0, "w": 320.0, "h": 40.0, "line_num": 10, "text": "return-home()"}, {"x": 112.0, "y": 666.0, "w": 414.0, "h": 47.0, "line_num": 11, "text": "def return_home()"}, {"x": 198.0, "y": 726.0, "w": 312.0, "h": 44.0, "line_num": 12, "text": "turn-around()"}, {"x": 204.0, "y": 787.0, "w": 149.0, "h": 39.0, "line_num": 13, "text": "move()"}, {"x": 212.0, "y": 831.0, "w": 246.0, "h": 47.0, "line_num": 14, "text": "turn-right()"}, {"x": 215.0, "y": 892.0, "w": 155.0, "h": 38.0, "line_num": 15, "text": "move ()"}, {"x": 220.0, "y": 938.0, "w": 248.0, "h": 44.0, "line_num": 16, "text": "turn-left ()"}, {"x": 222.0, "y": 1001.0, "w": 138.0, "h": 37.0, "line_num": 17, "text": "move()"}, {"x": 224.0, "y": 1038.0, "w": 152.0, "h": 40.0, "line_num": 18, "text": "move()"}, {"x": 223.0, "y": 1083.0, "w": 311.0, "h": 46.0, "line_num": 19, "text": "turn-around ()"}, {"x": 108.0, "y": 1159.0, "w": 401.0, "h": 50.0, "line_num": 20, "text": "det turn-right()"}, {"x": 217.0, "y": 1219.0, "w": 389.0, "h": 44.0, "line_num": 21, "text": "for i in range (3):"}, {"x": 274.0, "y": 1274.0, "w": 245.0, "h": 45.0, "line_num": 22, "text": "turn-left ()"}, {"x": 120.0, "y": 1335.0, "w": 429.0, "h": 46.0, "line_num": 23, "text": "def turn- around()"}, {"x": 215.0, "y": 1393.0, "w": 371.0, "h": 41.0, "line_num": 24, "text": "for i in range (2):"}, {"x": 263.0, "y": 1437.0, "w": 251.0, "h": 39.0, "line_num": 25, "text": "turn-left ()"}, {"x": 51.0, "y": 1485.0, "w": 36.0, "h": 51.0, "line_num": 26, "text": "if"}, {"x": 132.0, "y": 1508.0, "w": 537.0, "h": 36.0, "line_num": 27, "text": "name == '_main' ':"}, {"x": 121.0, "y": 1545.0, "w": 161.0, "h": 38.0, "line_num": 28, "text": "main()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "from karel. stanfordkarel import*\ndef main ()\n    move()\n    move()\n    turn-right ()\n    move()\n    turn-left()\n    move()\n    pick-beeper()\n    return-home()\ndef return_home()\n    turn-around()\n    move()\n    turn-right()\n    move ()\n    turn-left ()\n    move()\n    move()\n    turn-around ()\ndet turn-right()\n    for i in range (3):\n        turn-left ()\ndef turn- around()\n    for i in range (2):\n        turn-left ()\nif\n    name == '_main' ':\n    main()\n", "ir_algo_output_indented_lines": [{"x": 95.0, "y": 64.0, "w": 675.0, "h": 50.0, "line_num": 1, "text": "from karel. stanfordkarel import*", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 105.0, "y": 168.0, "w": 253.0, "h": 47.0, "line_num": 2, "text": "def main ()", "delta": 10.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 191.0, "y": 235.0, "w": 152.0, "h": 38.0, "line_num": 3, "text": "move()", "delta": 86.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 198.0, "y": 283.0, "w": 150.0, "h": 38.0, "line_num": 4, "text": "move()", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 197.0, "y": 330.0, "w": 280.0, "h": 45.0, "line_num": 5, "text": "turn-right ()", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 204.0, "y": 388.0, "w": 161.0, "h": 40.0, "line_num": 6, "text": "move()", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 205.0, "y": 432.0, "w": 259.0, "h": 46.0, "line_num": 7, "text": "turn-left()", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 216.0, "y": 498.0, "w": 149.0, "h": 36.0, "line_num": 8, "text": "move()", "delta": 11.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 217.0, "y": 543.0, "w": 285.0, "h": 43.0, "line_num": 9, "text": "pick-beeper()", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 225.0, "y": 597.0, "w": 320.0, "h": 40.0, "line_num": 10, "text": "return-home()", "delta": 8.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 112.0, "y": 666.0, "w": 414.0, "h": 47.0, "line_num": 11, "text": "def return_home()", "delta": -113.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 198.0, "y": 726.0, "w": 312.0, "h": 44.0, "line_num": 12, "text": "turn-around()", "delta": 86.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 204.0, "y": 787.0, "w": 149.0, "h": 39.0, "line_num": 13, "text": "move()", "delta": 6.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 212.0, "y": 831.0, "w": 246.0, "h": 47.0, "line_num": 14, "text": "turn-right()", "delta": 8.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 215.0, "y": 892.0, "w": 155.0, "h": 38.0, "line_num": 15, "text": "move ()", "delta": 3.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 220.0, "y": 938.0, "w": 248.0, "h": 44.0, "line_num": 16, "text": "turn-left ()", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 222.0, "y": 1001.0, "w": 138.0, "h": 37.0, "line_num": 17, "text": "move()", "delta": 2.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 224.0, "y": 1038.0, "w": 152.0, "h": 40.0, "line_num": 18, "text": "move()", "delta": 2.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 223.0, "y": 1083.0, "w": 311.0, "h": 46.0, "line_num": 19, "text": "turn-around ()", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 108.0, "y": 1159.0, "w": 401.0, "h": 50.0, "line_num": 20, "text": "det turn-right()", "delta": -115.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 217.0, "y": 1219.0, "w": 389.0, "h": 44.0, "line_num": 21, "text": "for i in range (3):", "delta": 109.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 274.0, "y": 1274.0, "w": 245.0, "h": 45.0, "line_num": 22, "text": "turn-left ()", "delta": 57.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 120.0, "y": 1335.0, "w": 429.0, "h": 46.0, "line_num": 23, "text": "def turn- around()", "delta": -154.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 215.0, "y": 1393.0, "w": 371.0, "h": 41.0, "line_num": 24, "text": "for i in range (2):", "delta": 95.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 263.0, "y": 1437.0, "w": 251.0, "h": 39.0, "line_num": 25, "text": "turn-left ()", "delta": 48.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 51.0, "y": 1485.0, "w": 36.0, "h": 51.0, "line_num": 26, "text": "if", "delta": -212.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 132.0, "y": 1508.0, "w": 537.0, "h": 36.0, "line_num": 27, "text": "name == '_main' ':", "delta": 81.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 121.0, "y": 1545.0, "w": 161.0, "h": 38.0, "line_num": 28, "text": "main()", "delta": -11.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 45, "prompting_method": "cot-test1", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\nmove()\nmove()\nturn_right()\nmove()\nturn_left()\nmove()\npick_beeper()\nreturn_home()\n\ndef return_home():\nturn_around()\nmove()\nturn_right()\nmove()\nturn_left()\nmove()\nmove()\nturn_around()\n\ndef turn_right():\nfor i in range(3):\nturn_left()\n\ndef turn_around():\nfor i in range(2):\nturn_left()\nif __name__ == '__main__':\nmain()\n", "lm_post_processed_edit_distance": 95}, {"image_id": 8, "image_height": 1600, "image_width": 1200, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 95.0, "y": 64.0, "w": 675.0, "h": 50.0, "line_num": 1, "text": "from karel. stanfordkarel import*"}, {"x": 105.0, "y": 168.0, "w": 253.0, "h": 47.0, "line_num": 2, "text": "def main ()"}, {"x": 191.0, "y": 235.0, "w": 152.0, "h": 38.0, "line_num": 3, "text": "move()"}, {"x": 198.0, "y": 283.0, "w": 150.0, "h": 38.0, "line_num": 4, "text": "move()"}, {"x": 197.0, "y": 330.0, "w": 280.0, "h": 45.0, "line_num": 5, "text": "turn-right ()"}, {"x": 204.0, "y": 388.0, "w": 161.0, "h": 40.0, "line_num": 6, "text": "move()"}, {"x": 205.0, "y": 432.0, "w": 259.0, "h": 46.0, "line_num": 7, "text": "turn-left()"}, {"x": 216.0, "y": 498.0, "w": 149.0, "h": 36.0, "line_num": 8, "text": "move()"}, {"x": 217.0, "y": 543.0, "w": 285.0, "h": 43.0, "line_num": 9, "text": "pick-beeper()"}, {"x": 225.0, "y": 597.0, "w": 320.0, "h": 40.0, "line_num": 10, "text": "return-home()"}, {"x": 112.0, "y": 666.0, "w": 414.0, "h": 47.0, "line_num": 11, "text": "def return_home()"}, {"x": 198.0, "y": 726.0, "w": 312.0, "h": 44.0, "line_num": 12, "text": "turn-around()"}, {"x": 204.0, "y": 787.0, "w": 149.0, "h": 39.0, "line_num": 13, "text": "move()"}, {"x": 212.0, "y": 831.0, "w": 246.0, "h": 47.0, "line_num": 14, "text": "turn-right()"}, {"x": 215.0, "y": 892.0, "w": 155.0, "h": 38.0, "line_num": 15, "text": "move ()"}, {"x": 220.0, "y": 938.0, "w": 248.0, "h": 44.0, "line_num": 16, "text": "turn-left ()"}, {"x": 222.0, "y": 1001.0, "w": 138.0, "h": 37.0, "line_num": 17, "text": "move()"}, {"x": 224.0, "y": 1038.0, "w": 152.0, "h": 40.0, "line_num": 18, "text": "move()"}, {"x": 223.0, "y": 1083.0, "w": 311.0, "h": 46.0, "line_num": 19, "text": "turn-around ()"}, {"x": 108.0, "y": 1159.0, "w": 401.0, "h": 50.0, "line_num": 20, "text": "det turn-right()"}, {"x": 217.0, "y": 1219.0, "w": 389.0, "h": 44.0, "line_num": 21, "text": "for i in range (3):"}, {"x": 274.0, "y": 1274.0, "w": 245.0, "h": 45.0, "line_num": 22, "text": "turn-left ()"}, {"x": 120.0, "y": 1335.0, "w": 429.0, "h": 46.0, "line_num": 23, "text": "def turn- around()"}, {"x": 215.0, "y": 1393.0, "w": 371.0, "h": 41.0, "line_num": 24, "text": "for i in range (2):"}, {"x": 263.0, "y": 1437.0, "w": 251.0, "h": 39.0, "line_num": 25, "text": "turn-left ()"}, {"x": 51.0, "y": 1485.0, "w": 36.0, "h": 51.0, "line_num": 26, "text": "if"}, {"x": 132.0, "y": 1508.0, "w": 537.0, "h": 36.0, "line_num": 27, "text": "name == '_main' ':"}, {"x": 121.0, "y": 1545.0, "w": 161.0, "h": 38.0, "line_num": 28, "text": "main()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "from karel. stanfordkarel import*\ndef main ()\n    move()\n    move()\n    turn-right ()\n    move()\n    turn-left()\n    move()\n    pick-beeper()\n    return-home()\ndef return_home()\n    turn-around()\n    move()\n    turn-right()\n    move ()\n    turn-left ()\n    move()\n    move()\n    turn-around ()\ndet turn-right()\n    for i in range (3):\n        turn-left ()\ndef turn- around()\n    for i in range (2):\n        turn-left ()\nif\n    name == '_main' ':\n    main()\n", "ir_algo_output_indented_lines": [{"x": 95.0, "y": 64.0, "w": 675.0, "h": 50.0, "line_num": 1, "text": "from karel. stanfordkarel import*", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 105.0, "y": 168.0, "w": 253.0, "h": 47.0, "line_num": 2, "text": "def main ()", "delta": 10.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 191.0, "y": 235.0, "w": 152.0, "h": 38.0, "line_num": 3, "text": "move()", "delta": 86.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 198.0, "y": 283.0, "w": 150.0, "h": 38.0, "line_num": 4, "text": "move()", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 197.0, "y": 330.0, "w": 280.0, "h": 45.0, "line_num": 5, "text": "turn-right ()", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 204.0, "y": 388.0, "w": 161.0, "h": 40.0, "line_num": 6, "text": "move()", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 205.0, "y": 432.0, "w": 259.0, "h": 46.0, "line_num": 7, "text": "turn-left()", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 216.0, "y": 498.0, "w": 149.0, "h": 36.0, "line_num": 8, "text": "move()", "delta": 11.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 217.0, "y": 543.0, "w": 285.0, "h": 43.0, "line_num": 9, "text": "pick-beeper()", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 225.0, "y": 597.0, "w": 320.0, "h": 40.0, "line_num": 10, "text": "return-home()", "delta": 8.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 112.0, "y": 666.0, "w": 414.0, "h": 47.0, "line_num": 11, "text": "def return_home()", "delta": -113.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 198.0, "y": 726.0, "w": 312.0, "h": 44.0, "line_num": 12, "text": "turn-around()", "delta": 86.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 204.0, "y": 787.0, "w": 149.0, "h": 39.0, "line_num": 13, "text": "move()", "delta": 6.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 212.0, "y": 831.0, "w": 246.0, "h": 47.0, "line_num": 14, "text": "turn-right()", "delta": 8.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 215.0, "y": 892.0, "w": 155.0, "h": 38.0, "line_num": 15, "text": "move ()", "delta": 3.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 220.0, "y": 938.0, "w": 248.0, "h": 44.0, "line_num": 16, "text": "turn-left ()", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 222.0, "y": 1001.0, "w": 138.0, "h": 37.0, "line_num": 17, "text": "move()", "delta": 2.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 224.0, "y": 1038.0, "w": 152.0, "h": 40.0, "line_num": 18, "text": "move()", "delta": 2.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 223.0, "y": 1083.0, "w": 311.0, "h": 46.0, "line_num": 19, "text": "turn-around ()", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 108.0, "y": 1159.0, "w": 401.0, "h": 50.0, "line_num": 20, "text": "det turn-right()", "delta": -115.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 217.0, "y": 1219.0, "w": 389.0, "h": 44.0, "line_num": 21, "text": "for i in range (3):", "delta": 109.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 274.0, "y": 1274.0, "w": 245.0, "h": 45.0, "line_num": 22, "text": "turn-left ()", "delta": 57.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 120.0, "y": 1335.0, "w": 429.0, "h": 46.0, "line_num": 23, "text": "def turn- around()", "delta": -154.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 215.0, "y": 1393.0, "w": 371.0, "h": 41.0, "line_num": 24, "text": "for i in range (2):", "delta": 95.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 263.0, "y": 1437.0, "w": 251.0, "h": 39.0, "line_num": 25, "text": "turn-left ()", "delta": 48.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 51.0, "y": 1485.0, "w": 36.0, "h": 51.0, "line_num": 26, "text": "if", "delta": -212.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 132.0, "y": 1508.0, "w": 537.0, "h": 36.0, "line_num": 27, "text": "name == '_main' ':", "delta": 81.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 121.0, "y": 1545.0, "w": 161.0, "h": 38.0, "line_num": 28, "text": "main()", "delta": -11.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 45, "prompting_method": "cot-test5", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    move()\n    move()\n    turn_right()\n    move()\n    turn_left()\n    move()\n    pick_beeper()\n    return_home()\n\ndef return_home():\n    turn_around()\n    move()\n    turn_right()\n    move()\n    turn_left()\n    move()\n    move()\n    turn_around()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\n\ndef turn_around():\n    for i in range(2):\n        turn_left()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 3}, {"image_id": 8, "image_height": 1600, "image_width": 1200, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 95.0, "y": 64.0, "w": 675.0, "h": 50.0, "line_num": 1, "text": "from karel. stanfordkarel import*"}, {"x": 105.0, "y": 168.0, "w": 253.0, "h": 47.0, "line_num": 2, "text": "def main ()"}, {"x": 191.0, "y": 235.0, "w": 152.0, "h": 38.0, "line_num": 3, "text": "move()"}, {"x": 198.0, "y": 283.0, "w": 150.0, "h": 38.0, "line_num": 4, "text": "move()"}, {"x": 197.0, "y": 330.0, "w": 280.0, "h": 45.0, "line_num": 5, "text": "turn-right ()"}, {"x": 204.0, "y": 388.0, "w": 161.0, "h": 40.0, "line_num": 6, "text": "move()"}, {"x": 205.0, "y": 432.0, "w": 259.0, "h": 46.0, "line_num": 7, "text": "turn-left()"}, {"x": 216.0, "y": 498.0, "w": 149.0, "h": 36.0, "line_num": 8, "text": "move()"}, {"x": 217.0, "y": 543.0, "w": 285.0, "h": 43.0, "line_num": 9, "text": "pick-beeper()"}, {"x": 225.0, "y": 597.0, "w": 320.0, "h": 40.0, "line_num": 10, "text": "return-home()"}, {"x": 112.0, "y": 666.0, "w": 414.0, "h": 47.0, "line_num": 11, "text": "def return_home()"}, {"x": 198.0, "y": 726.0, "w": 312.0, "h": 44.0, "line_num": 12, "text": "turn-around()"}, {"x": 204.0, "y": 787.0, "w": 149.0, "h": 39.0, "line_num": 13, "text": "move()"}, {"x": 212.0, "y": 831.0, "w": 246.0, "h": 47.0, "line_num": 14, "text": "turn-right()"}, {"x": 215.0, "y": 892.0, "w": 155.0, "h": 38.0, "line_num": 15, "text": "move ()"}, {"x": 220.0, "y": 938.0, "w": 248.0, "h": 44.0, "line_num": 16, "text": "turn-left ()"}, {"x": 222.0, "y": 1001.0, "w": 138.0, "h": 37.0, "line_num": 17, "text": "move()"}, {"x": 224.0, "y": 1038.0, "w": 152.0, "h": 40.0, "line_num": 18, "text": "move()"}, {"x": 223.0, "y": 1083.0, "w": 311.0, "h": 46.0, "line_num": 19, "text": "turn-around ()"}, {"x": 108.0, "y": 1159.0, "w": 401.0, "h": 50.0, "line_num": 20, "text": "det turn-right()"}, {"x": 217.0, "y": 1219.0, "w": 389.0, "h": 44.0, "line_num": 21, "text": "for i in range (3):"}, {"x": 274.0, "y": 1274.0, "w": 245.0, "h": 45.0, "line_num": 22, "text": "turn-left ()"}, {"x": 120.0, "y": 1335.0, "w": 429.0, "h": 46.0, "line_num": 23, "text": "def turn- around()"}, {"x": 215.0, "y": 1393.0, "w": 371.0, "h": 41.0, "line_num": 24, "text": "for i in range (2):"}, {"x": 263.0, "y": 1437.0, "w": 251.0, "h": 39.0, "line_num": 25, "text": "turn-left ()"}, {"x": 51.0, "y": 1485.0, "w": 36.0, "h": 51.0, "line_num": 26, "text": "if"}, {"x": 132.0, "y": 1508.0, "w": 537.0, "h": 36.0, "line_num": 27, "text": "name == '_main' ':"}, {"x": 121.0, "y": 1545.0, "w": 161.0, "h": 38.0, "line_num": 28, "text": "main()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "from karel. stanfordkarel import*\ndef main ()\n    move()\n    move()\n    turn-right ()\n    move()\n    turn-left()\n    move()\n    pick-beeper()\n    return-home()\ndef return_home()\n    turn-around()\n    move()\n    turn-right()\n    move ()\n    turn-left ()\n    move()\n    move()\n    turn-around ()\ndet turn-right()\n    for i in range (3):\n        turn-left ()\ndef turn- around()\n    for i in range (2):\n        turn-left ()\nif\n    name == '_main' ':\n    main()\n", "ir_algo_output_indented_lines": [{"x": 95.0, "y": 64.0, "w": 675.0, "h": 50.0, "line_num": 1, "text": "from karel. stanfordkarel import*", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 105.0, "y": 168.0, "w": 253.0, "h": 47.0, "line_num": 2, "text": "def main ()", "delta": 10.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 191.0, "y": 235.0, "w": 152.0, "h": 38.0, "line_num": 3, "text": "move()", "delta": 86.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 198.0, "y": 283.0, "w": 150.0, "h": 38.0, "line_num": 4, "text": "move()", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 197.0, "y": 330.0, "w": 280.0, "h": 45.0, "line_num": 5, "text": "turn-right ()", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 204.0, "y": 388.0, "w": 161.0, "h": 40.0, "line_num": 6, "text": "move()", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 205.0, "y": 432.0, "w": 259.0, "h": 46.0, "line_num": 7, "text": "turn-left()", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 216.0, "y": 498.0, "w": 149.0, "h": 36.0, "line_num": 8, "text": "move()", "delta": 11.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 217.0, "y": 543.0, "w": 285.0, "h": 43.0, "line_num": 9, "text": "pick-beeper()", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 225.0, "y": 597.0, "w": 320.0, "h": 40.0, "line_num": 10, "text": "return-home()", "delta": 8.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 112.0, "y": 666.0, "w": 414.0, "h": 47.0, "line_num": 11, "text": "def return_home()", "delta": -113.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 198.0, "y": 726.0, "w": 312.0, "h": 44.0, "line_num": 12, "text": "turn-around()", "delta": 86.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 204.0, "y": 787.0, "w": 149.0, "h": 39.0, "line_num": 13, "text": "move()", "delta": 6.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 212.0, "y": 831.0, "w": 246.0, "h": 47.0, "line_num": 14, "text": "turn-right()", "delta": 8.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 215.0, "y": 892.0, "w": 155.0, "h": 38.0, "line_num": 15, "text": "move ()", "delta": 3.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 220.0, "y": 938.0, "w": 248.0, "h": 44.0, "line_num": 16, "text": "turn-left ()", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 222.0, "y": 1001.0, "w": 138.0, "h": 37.0, "line_num": 17, "text": "move()", "delta": 2.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 224.0, "y": 1038.0, "w": 152.0, "h": 40.0, "line_num": 18, "text": "move()", "delta": 2.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 223.0, "y": 1083.0, "w": 311.0, "h": 46.0, "line_num": 19, "text": "turn-around ()", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 108.0, "y": 1159.0, "w": 401.0, "h": 50.0, "line_num": 20, "text": "det turn-right()", "delta": -115.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 217.0, "y": 1219.0, "w": 389.0, "h": 44.0, "line_num": 21, "text": "for i in range (3):", "delta": 109.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 274.0, "y": 1274.0, "w": 245.0, "h": 45.0, "line_num": 22, "text": "turn-left ()", "delta": 57.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 120.0, "y": 1335.0, "w": 429.0, "h": 46.0, "line_num": 23, "text": "def turn- around()", "delta": -154.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 215.0, "y": 1393.0, "w": 371.0, "h": 41.0, "line_num": 24, "text": "for i in range (2):", "delta": 95.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 263.0, "y": 1437.0, "w": 251.0, "h": 39.0, "line_num": 25, "text": "turn-left ()", "delta": 48.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 51.0, "y": 1485.0, "w": 36.0, "h": 51.0, "line_num": 26, "text": "if", "delta": -212.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 132.0, "y": 1508.0, "w": 537.0, "h": 36.0, "line_num": 27, "text": "name == '_main' ':", "delta": 81.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 121.0, "y": 1545.0, "w": 161.0, "h": 38.0, "line_num": 28, "text": "main()", "delta": -11.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 45, "prompting_method": "simple-test2", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    move()\n    move()\n    turn_right()\n    move()\n    turn_left()\n    move()\n    pick_beeper()\n    return_home()\n\ndef return_home():\n    turn_around()\n    move()\n    turn_right()\n    move()\n    turn_left()\n    move()\n    move()\n    turn_around()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\n\ndef turn_around():\n    for i in range(2):\n        turn_left()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 3}, {"image_id": 8, "image_height": 1600, "image_width": 1200, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 95.0, "y": 64.0, "w": 675.0, "h": 50.0, "line_num": 1, "text": "from karel. stanfordkarel import*"}, {"x": 105.0, "y": 168.0, "w": 253.0, "h": 47.0, "line_num": 2, "text": "def main ()"}, {"x": 191.0, "y": 235.0, "w": 152.0, "h": 38.0, "line_num": 3, "text": "move()"}, {"x": 198.0, "y": 283.0, "w": 150.0, "h": 38.0, "line_num": 4, "text": "move()"}, {"x": 197.0, "y": 330.0, "w": 280.0, "h": 45.0, "line_num": 5, "text": "turn-right ()"}, {"x": 204.0, "y": 388.0, "w": 161.0, "h": 40.0, "line_num": 6, "text": "move()"}, {"x": 205.0, "y": 432.0, "w": 259.0, "h": 46.0, "line_num": 7, "text": "turn-left()"}, {"x": 216.0, "y": 498.0, "w": 149.0, "h": 36.0, "line_num": 8, "text": "move()"}, {"x": 217.0, "y": 543.0, "w": 285.0, "h": 43.0, "line_num": 9, "text": "pick-beeper()"}, {"x": 225.0, "y": 597.0, "w": 320.0, "h": 40.0, "line_num": 10, "text": "return-home()"}, {"x": 112.0, "y": 666.0, "w": 414.0, "h": 47.0, "line_num": 11, "text": "def return_home()"}, {"x": 198.0, "y": 726.0, "w": 312.0, "h": 44.0, "line_num": 12, "text": "turn-around()"}, {"x": 204.0, "y": 787.0, "w": 149.0, "h": 39.0, "line_num": 13, "text": "move()"}, {"x": 212.0, "y": 831.0, "w": 246.0, "h": 47.0, "line_num": 14, "text": "turn-right()"}, {"x": 215.0, "y": 892.0, "w": 155.0, "h": 38.0, "line_num": 15, "text": "move ()"}, {"x": 220.0, "y": 938.0, "w": 248.0, "h": 44.0, "line_num": 16, "text": "turn-left ()"}, {"x": 222.0, "y": 1001.0, "w": 138.0, "h": 37.0, "line_num": 17, "text": "move()"}, {"x": 224.0, "y": 1038.0, "w": 152.0, "h": 40.0, "line_num": 18, "text": "move()"}, {"x": 223.0, "y": 1083.0, "w": 311.0, "h": 46.0, "line_num": 19, "text": "turn-around ()"}, {"x": 108.0, "y": 1159.0, "w": 401.0, "h": 50.0, "line_num": 20, "text": "det turn-right()"}, {"x": 217.0, "y": 1219.0, "w": 389.0, "h": 44.0, "line_num": 21, "text": "for i in range (3):"}, {"x": 274.0, "y": 1274.0, "w": 245.0, "h": 45.0, "line_num": 22, "text": "turn-left ()"}, {"x": 120.0, "y": 1335.0, "w": 429.0, "h": 46.0, "line_num": 23, "text": "def turn- around()"}, {"x": 215.0, "y": 1393.0, "w": 371.0, "h": 41.0, "line_num": 24, "text": "for i in range (2):"}, {"x": 263.0, "y": 1437.0, "w": 251.0, "h": 39.0, "line_num": 25, "text": "turn-left ()"}, {"x": 51.0, "y": 1485.0, "w": 36.0, "h": 51.0, "line_num": 26, "text": "if"}, {"x": 132.0, "y": 1508.0, "w": 537.0, "h": 36.0, "line_num": 27, "text": "name == '_main' ':"}, {"x": 121.0, "y": 1545.0, "w": 161.0, "h": 38.0, "line_num": 28, "text": "main()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "from karel. stanfordkarel import*\ndef main ()\n    move()\n    move()\n    turn-right ()\n    move()\n    turn-left()\n    move()\n    pick-beeper()\n    return-home()\ndef return_home()\n    turn-around()\n    move()\n    turn-right()\n    move ()\n    turn-left ()\n    move()\n    move()\n    turn-around ()\ndet turn-right()\n    for i in range (3):\n        turn-left ()\ndef turn- around()\n    for i in range (2):\n        turn-left ()\nif\n    name == '_main' ':\n    main()\n", "ir_algo_output_indented_lines": [{"x": 95.0, "y": 64.0, "w": 675.0, "h": 50.0, "line_num": 1, "text": "from karel. stanfordkarel import*", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 105.0, "y": 168.0, "w": 253.0, "h": 47.0, "line_num": 2, "text": "def main ()", "delta": 10.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 191.0, "y": 235.0, "w": 152.0, "h": 38.0, "line_num": 3, "text": "move()", "delta": 86.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 198.0, "y": 283.0, "w": 150.0, "h": 38.0, "line_num": 4, "text": "move()", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 197.0, "y": 330.0, "w": 280.0, "h": 45.0, "line_num": 5, "text": "turn-right ()", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 204.0, "y": 388.0, "w": 161.0, "h": 40.0, "line_num": 6, "text": "move()", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 205.0, "y": 432.0, "w": 259.0, "h": 46.0, "line_num": 7, "text": "turn-left()", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 216.0, "y": 498.0, "w": 149.0, "h": 36.0, "line_num": 8, "text": "move()", "delta": 11.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 217.0, "y": 543.0, "w": 285.0, "h": 43.0, "line_num": 9, "text": "pick-beeper()", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 225.0, "y": 597.0, "w": 320.0, "h": 40.0, "line_num": 10, "text": "return-home()", "delta": 8.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 112.0, "y": 666.0, "w": 414.0, "h": 47.0, "line_num": 11, "text": "def return_home()", "delta": -113.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 198.0, "y": 726.0, "w": 312.0, "h": 44.0, "line_num": 12, "text": "turn-around()", "delta": 86.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 204.0, "y": 787.0, "w": 149.0, "h": 39.0, "line_num": 13, "text": "move()", "delta": 6.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 212.0, "y": 831.0, "w": 246.0, "h": 47.0, "line_num": 14, "text": "turn-right()", "delta": 8.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 215.0, "y": 892.0, "w": 155.0, "h": 38.0, "line_num": 15, "text": "move ()", "delta": 3.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 220.0, "y": 938.0, "w": 248.0, "h": 44.0, "line_num": 16, "text": "turn-left ()", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 222.0, "y": 1001.0, "w": 138.0, "h": 37.0, "line_num": 17, "text": "move()", "delta": 2.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 224.0, "y": 1038.0, "w": 152.0, "h": 40.0, "line_num": 18, "text": "move()", "delta": 2.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 223.0, "y": 1083.0, "w": 311.0, "h": 46.0, "line_num": 19, "text": "turn-around ()", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 108.0, "y": 1159.0, "w": 401.0, "h": 50.0, "line_num": 20, "text": "det turn-right()", "delta": -115.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 217.0, "y": 1219.0, "w": 389.0, "h": 44.0, "line_num": 21, "text": "for i in range (3):", "delta": 109.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 274.0, "y": 1274.0, "w": 245.0, "h": 45.0, "line_num": 22, "text": "turn-left ()", "delta": 57.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 120.0, "y": 1335.0, "w": 429.0, "h": 46.0, "line_num": 23, "text": "def turn- around()", "delta": -154.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 215.0, "y": 1393.0, "w": 371.0, "h": 41.0, "line_num": 24, "text": "for i in range (2):", "delta": 95.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 263.0, "y": 1437.0, "w": 251.0, "h": 39.0, "line_num": 25, "text": "turn-left ()", "delta": 48.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 51.0, "y": 1485.0, "w": 36.0, "h": 51.0, "line_num": 26, "text": "if", "delta": -212.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 132.0, "y": 1508.0, "w": 537.0, "h": 36.0, "line_num": 27, "text": "name == '_main' ':", "delta": 81.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 121.0, "y": 1545.0, "w": 161.0, "h": 38.0, "line_num": 28, "text": "main()", "delta": -11.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 45, "prompting_method": "simple-test3", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    move()\n    move()\n    turn_right()\n    move()\n    turn_left()\n    move()\n    pick_beeper()\n    return_home()\n\ndef return_home():\n    turn_around()\n    move()\n    turn_right()\n    move()\n    turn_left()\n    move()\n    move()\n    turn_around()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\n\ndef turn_around():\n    for i in range(2):\n        turn_left()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 3}, {"image_id": 10, "image_height": 1246, "image_width": 3355, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 63.0, "y": 54.0, "w": 913.0, "h": 132.0, "line_num": 1, "text": "det main ():"}, {"x": 393.0, "y": 285.0, "w": 2705.0, "h": 161.0, "line_num": 2, "text": "String = str (input ('Enter string: '))"}, {"x": 367.0, "y": 471.0, "w": 2886.0, "h": 196.0, "line_num": 3, "text": "for i in range ((len (string)-1) ,- 1 ,- 1):"}, {"x": 649.0, "y": 726.0, "w": 1296.0, "h": 158.0, "line_num": 4, "text": "print (string [1])"}], "ir_algo_name": "none", "ir_algo_output_code": "det main ():\nString = str (input ('Enter string: '))\nfor i in range ((len (string)-1) ,- 1 ,- 1):\nprint (string [1])", "ir_algo_output_edit_distance": 37, "prompting_method": "none", "lm_post_processed_code": "det main ():\nString = str (input ('Enter string: '))\nfor i in range ((len (string)-1) ,- 1 ,- 1):\nprint (string [1])", "lm_post_processed_edit_distance": 37}, {"image_id": 10, "image_height": 1246, "image_width": 3355, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 63.0, "y": 54.0, "w": 913.0, "h": 132.0, "line_num": 1, "text": "det main ():"}, {"x": 393.0, "y": 285.0, "w": 2705.0, "h": 161.0, "line_num": 2, "text": "String = str (input ('Enter string: '))"}, {"x": 367.0, "y": 471.0, "w": 2886.0, "h": 196.0, "line_num": 3, "text": "for i in range ((len (string)-1) ,- 1 ,- 1):"}, {"x": 649.0, "y": 726.0, "w": 1296.0, "h": 158.0, "line_num": 4, "text": "print (string [1])"}], "ir_algo_name": "none", "ir_algo_output_code": "det main ():\nString = str (input ('Enter string: '))\nfor i in range ((len (string)-1) ,- 1 ,- 1):\nprint (string [1])", "ir_algo_output_edit_distance": 37, "prompting_method": "cot-test1", "lm_post_processed_code": "def main ():\nstring = str (input ('Enter string: '))\nfor i in range ((len (string)-1) ,- 1 ,- 1):\nprint (string [i])\n", "lm_post_processed_edit_distance": 33}, {"image_id": 10, "image_height": 1246, "image_width": 3355, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 63.0, "y": 54.0, "w": 913.0, "h": 132.0, "line_num": 1, "text": "det main ():"}, {"x": 393.0, "y": 285.0, "w": 2705.0, "h": 161.0, "line_num": 2, "text": "String = str (input ('Enter string: '))"}, {"x": 367.0, "y": 471.0, "w": 2886.0, "h": 196.0, "line_num": 3, "text": "for i in range ((len (string)-1) ,- 1 ,- 1):"}, {"x": 649.0, "y": 726.0, "w": 1296.0, "h": 158.0, "line_num": 4, "text": "print (string [1])"}], "ir_algo_name": "none", "ir_algo_output_code": "det main ():\nString = str (input ('Enter string: '))\nfor i in range ((len (string)-1) ,- 1 ,- 1):\nprint (string [1])", "ir_algo_output_edit_distance": 37, "prompting_method": "cot-test5", "lm_post_processed_code": "def main():\nstring = str(input('Enter string: '))\nfor i in range((len(string)-1), -1, -1):\nprint(string[1])\n", "lm_post_processed_edit_distance": 21}, {"image_id": 10, "image_height": 1246, "image_width": 3355, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 63.0, "y": 54.0, "w": 913.0, "h": 132.0, "line_num": 1, "text": "det main ():"}, {"x": 393.0, "y": 285.0, "w": 2705.0, "h": 161.0, "line_num": 2, "text": "String = str (input ('Enter string: '))"}, {"x": 367.0, "y": 471.0, "w": 2886.0, "h": 196.0, "line_num": 3, "text": "for i in range ((len (string)-1) ,- 1 ,- 1):"}, {"x": 649.0, "y": 726.0, "w": 1296.0, "h": 158.0, "line_num": 4, "text": "print (string [1])"}], "ir_algo_name": "none", "ir_algo_output_code": "det main ():\nString = str (input ('Enter string: '))\nfor i in range ((len (string)-1) ,- 1 ,- 1):\nprint (string [1])", "ir_algo_output_edit_distance": 37, "prompting_method": "simple-test2", "lm_post_processed_code": "def main():\n    string = str(input('Enter string: '))\n    for i in range((len(string)-1), -1, -1):\n        print(string[i])\n", "lm_post_processed_edit_distance": 4}, {"image_id": 10, "image_height": 1246, "image_width": 3355, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 63.0, "y": 54.0, "w": 913.0, "h": 132.0, "line_num": 1, "text": "det main ():"}, {"x": 393.0, "y": 285.0, "w": 2705.0, "h": 161.0, "line_num": 2, "text": "String = str (input ('Enter string: '))"}, {"x": 367.0, "y": 471.0, "w": 2886.0, "h": 196.0, "line_num": 3, "text": "for i in range ((len (string)-1) ,- 1 ,- 1):"}, {"x": 649.0, "y": 726.0, "w": 1296.0, "h": 158.0, "line_num": 4, "text": "print (string [1])"}], "ir_algo_name": "none", "ir_algo_output_code": "det main ():\nString = str (input ('Enter string: '))\nfor i in range ((len (string)-1) ,- 1 ,- 1):\nprint (string [1])", "ir_algo_output_edit_distance": 37, "prompting_method": "simple-test3", "lm_post_processed_code": "def main():\n    string = str(input('Enter string: '))\n    for i in range((len(string)-1), -1, -1):\n        print(string[i])\n", "lm_post_processed_edit_distance": 4}, {"image_id": 10, "image_height": 1246, "image_width": 3355, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 63.0, "y": 54.0, "w": 913.0, "h": 132.0, "line_num": 1, "text": "det main ():"}, {"x": 393.0, "y": 285.0, "w": 2705.0, "h": 161.0, "line_num": 2, "text": "String = str (input ('Enter string: '))"}, {"x": 367.0, "y": 471.0, "w": 2886.0, "h": 196.0, "line_num": 3, "text": "for i in range ((len (string)-1) ,- 1 ,- 1):"}, {"x": 649.0, "y": 726.0, "w": 1296.0, "h": 158.0, "line_num": 4, "text": "print (string [1])"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 242.625, "ir_algo_output_code": "det main ():\n    String = str (input ('Enter string: '))\n    for i in range ((len (string)-1) ,- 1 ,- 1):\n        print (string [1])\n", "ir_algo_output_indented_lines": [{"x": 63.0, "y": 54.0, "w": 913.0, "h": 132.0, "line_num": 1, "text": "det main ():", "cluster_label": 2, "indentation": 0}, {"x": 393.0, "y": 285.0, "w": 2705.0, "h": 161.0, "line_num": 2, "text": "String = str (input ('Enter string: '))", "cluster_label": 0, "indentation": 1}, {"x": 367.0, "y": 471.0, "w": 2886.0, "h": 196.0, "line_num": 3, "text": "for i in range ((len (string)-1) ,- 1 ,- 1):", "cluster_label": 0, "indentation": 1}, {"x": 649.0, "y": 726.0, "w": 1296.0, "h": 158.0, "line_num": 4, "text": "print (string [1])", "cluster_label": 1, "indentation": 2}], "ir_algo_output_edit_distance": 20, "prompting_method": "none", "lm_post_processed_code": "det main ():\n    String = str (input ('Enter string: '))\n    for i in range ((len (string)-1) ,- 1 ,- 1):\n        print (string [1])\n", "lm_post_processed_edit_distance": 20}, {"image_id": 10, "image_height": 1246, "image_width": 3355, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 63.0, "y": 54.0, "w": 913.0, "h": 132.0, "line_num": 1, "text": "det main ():"}, {"x": 393.0, "y": 285.0, "w": 2705.0, "h": 161.0, "line_num": 2, "text": "String = str (input ('Enter string: '))"}, {"x": 367.0, "y": 471.0, "w": 2886.0, "h": 196.0, "line_num": 3, "text": "for i in range ((len (string)-1) ,- 1 ,- 1):"}, {"x": 649.0, "y": 726.0, "w": 1296.0, "h": 158.0, "line_num": 4, "text": "print (string [1])"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 242.625, "ir_algo_output_code": "det main ():\n    String = str (input ('Enter string: '))\n    for i in range ((len (string)-1) ,- 1 ,- 1):\n        print (string [1])\n", "ir_algo_output_indented_lines": [{"x": 63.0, "y": 54.0, "w": 913.0, "h": 132.0, "line_num": 1, "text": "det main ():", "cluster_label": 2, "indentation": 0}, {"x": 393.0, "y": 285.0, "w": 2705.0, "h": 161.0, "line_num": 2, "text": "String = str (input ('Enter string: '))", "cluster_label": 0, "indentation": 1}, {"x": 367.0, "y": 471.0, "w": 2886.0, "h": 196.0, "line_num": 3, "text": "for i in range ((len (string)-1) ,- 1 ,- 1):", "cluster_label": 0, "indentation": 1}, {"x": 649.0, "y": 726.0, "w": 1296.0, "h": 158.0, "line_num": 4, "text": "print (string [1])", "cluster_label": 1, "indentation": 2}], "ir_algo_output_edit_distance": 20, "prompting_method": "cot-test1", "lm_post_processed_code": "def main():\n    String = str(input('Enter string: '))\n    for i in range((len(String)-1), -1, -1):\n        print(String[1])\n", "lm_post_processed_edit_distance": 8}, {"image_id": 10, "image_height": 1246, "image_width": 3355, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 63.0, "y": 54.0, "w": 913.0, "h": 132.0, "line_num": 1, "text": "det main ():"}, {"x": 393.0, "y": 285.0, "w": 2705.0, "h": 161.0, "line_num": 2, "text": "String = str (input ('Enter string: '))"}, {"x": 367.0, "y": 471.0, "w": 2886.0, "h": 196.0, "line_num": 3, "text": "for i in range ((len (string)-1) ,- 1 ,- 1):"}, {"x": 649.0, "y": 726.0, "w": 1296.0, "h": 158.0, "line_num": 4, "text": "print (string [1])"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 242.625, "ir_algo_output_code": "det main ():\n    String = str (input ('Enter string: '))\n    for i in range ((len (string)-1) ,- 1 ,- 1):\n        print (string [1])\n", "ir_algo_output_indented_lines": [{"x": 63.0, "y": 54.0, "w": 913.0, "h": 132.0, "line_num": 1, "text": "det main ():", "cluster_label": 2, "indentation": 0}, {"x": 393.0, "y": 285.0, "w": 2705.0, "h": 161.0, "line_num": 2, "text": "String = str (input ('Enter string: '))", "cluster_label": 0, "indentation": 1}, {"x": 367.0, "y": 471.0, "w": 2886.0, "h": 196.0, "line_num": 3, "text": "for i in range ((len (string)-1) ,- 1 ,- 1):", "cluster_label": 0, "indentation": 1}, {"x": 649.0, "y": 726.0, "w": 1296.0, "h": 158.0, "line_num": 4, "text": "print (string [1])", "cluster_label": 1, "indentation": 2}], "ir_algo_output_edit_distance": 20, "prompting_method": "cot-test5", "lm_post_processed_code": "def main():\n    String = str(input('Enter string: '))\n    for i in range((len(String)-1), -1, -1):\n        print(String[1])\n", "lm_post_processed_edit_distance": 8}, {"image_id": 10, "image_height": 1246, "image_width": 3355, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 63.0, "y": 54.0, "w": 913.0, "h": 132.0, "line_num": 1, "text": "det main ():"}, {"x": 393.0, "y": 285.0, "w": 2705.0, "h": 161.0, "line_num": 2, "text": "String = str (input ('Enter string: '))"}, {"x": 367.0, "y": 471.0, "w": 2886.0, "h": 196.0, "line_num": 3, "text": "for i in range ((len (string)-1) ,- 1 ,- 1):"}, {"x": 649.0, "y": 726.0, "w": 1296.0, "h": 158.0, "line_num": 4, "text": "print (string [1])"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 242.625, "ir_algo_output_code": "det main ():\n    String = str (input ('Enter string: '))\n    for i in range ((len (string)-1) ,- 1 ,- 1):\n        print (string [1])\n", "ir_algo_output_indented_lines": [{"x": 63.0, "y": 54.0, "w": 913.0, "h": 132.0, "line_num": 1, "text": "det main ():", "cluster_label": 2, "indentation": 0}, {"x": 393.0, "y": 285.0, "w": 2705.0, "h": 161.0, "line_num": 2, "text": "String = str (input ('Enter string: '))", "cluster_label": 0, "indentation": 1}, {"x": 367.0, "y": 471.0, "w": 2886.0, "h": 196.0, "line_num": 3, "text": "for i in range ((len (string)-1) ,- 1 ,- 1):", "cluster_label": 0, "indentation": 1}, {"x": 649.0, "y": 726.0, "w": 1296.0, "h": 158.0, "line_num": 4, "text": "print (string [1])", "cluster_label": 1, "indentation": 2}], "ir_algo_output_edit_distance": 20, "prompting_method": "simple-test2", "lm_post_processed_code": "def main():\n    string = str(input('Enter string: '))\n    for i in range((len(string)-1), -1, -1):\n        print(string[i])\n", "lm_post_processed_edit_distance": 4}, {"image_id": 10, "image_height": 1246, "image_width": 3355, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 63.0, "y": 54.0, "w": 913.0, "h": 132.0, "line_num": 1, "text": "det main ():"}, {"x": 393.0, "y": 285.0, "w": 2705.0, "h": 161.0, "line_num": 2, "text": "String = str (input ('Enter string: '))"}, {"x": 367.0, "y": 471.0, "w": 2886.0, "h": 196.0, "line_num": 3, "text": "for i in range ((len (string)-1) ,- 1 ,- 1):"}, {"x": 649.0, "y": 726.0, "w": 1296.0, "h": 158.0, "line_num": 4, "text": "print (string [1])"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 242.625, "ir_algo_output_code": "det main ():\n    String = str (input ('Enter string: '))\n    for i in range ((len (string)-1) ,- 1 ,- 1):\n        print (string [1])\n", "ir_algo_output_indented_lines": [{"x": 63.0, "y": 54.0, "w": 913.0, "h": 132.0, "line_num": 1, "text": "det main ():", "cluster_label": 2, "indentation": 0}, {"x": 393.0, "y": 285.0, "w": 2705.0, "h": 161.0, "line_num": 2, "text": "String = str (input ('Enter string: '))", "cluster_label": 0, "indentation": 1}, {"x": 367.0, "y": 471.0, "w": 2886.0, "h": 196.0, "line_num": 3, "text": "for i in range ((len (string)-1) ,- 1 ,- 1):", "cluster_label": 0, "indentation": 1}, {"x": 649.0, "y": 726.0, "w": 1296.0, "h": 158.0, "line_num": 4, "text": "print (string [1])", "cluster_label": 1, "indentation": 2}], "ir_algo_output_edit_distance": 20, "prompting_method": "simple-test3", "lm_post_processed_code": "def main():\n    string = str(input('Enter string: '))\n    for i in range((len(string)-1), -1, -1):\n        print(string[i])\n", "lm_post_processed_edit_distance": 4}, {"image_id": 10, "image_height": 1246, "image_width": 3355, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 63.0, "y": 54.0, "w": 913.0, "h": 132.0, "line_num": 1, "text": "det main ():"}, {"x": 393.0, "y": 285.0, "w": 2705.0, "h": 161.0, "line_num": 2, "text": "String = str (input ('Enter string: '))"}, {"x": 367.0, "y": 471.0, "w": 2886.0, "h": 196.0, "line_num": 3, "text": "for i in range ((len (string)-1) ,- 1 ,- 1):"}, {"x": 649.0, "y": 726.0, "w": 1296.0, "h": 158.0, "line_num": 4, "text": "print (string [1])"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "det main ():\n    String = str (input ('Enter string: '))\n    for i in range ((len (string)-1) ,- 1 ,- 1):\n        print (string [1])\n", "ir_algo_output_indented_lines": [{"x": 63.0, "y": 54.0, "w": 913.0, "h": 132.0, "line_num": 1, "text": "det main ():", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 393.0, "y": 285.0, "w": 2705.0, "h": 161.0, "line_num": 2, "text": "String = str (input ('Enter string: '))", "delta": 330.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 367.0, "y": 471.0, "w": 2886.0, "h": 196.0, "line_num": 3, "text": "for i in range ((len (string)-1) ,- 1 ,- 1):", "delta": -26.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 649.0, "y": 726.0, "w": 1296.0, "h": 158.0, "line_num": 4, "text": "print (string [1])", "delta": 282.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}], "ir_algo_output_edit_distance": 20, "prompting_method": "none", "lm_post_processed_code": "det main ():\n    String = str (input ('Enter string: '))\n    for i in range ((len (string)-1) ,- 1 ,- 1):\n        print (string [1])\n", "lm_post_processed_edit_distance": 20}, {"image_id": 10, "image_height": 1246, "image_width": 3355, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 63.0, "y": 54.0, "w": 913.0, "h": 132.0, "line_num": 1, "text": "det main ():"}, {"x": 393.0, "y": 285.0, "w": 2705.0, "h": 161.0, "line_num": 2, "text": "String = str (input ('Enter string: '))"}, {"x": 367.0, "y": 471.0, "w": 2886.0, "h": 196.0, "line_num": 3, "text": "for i in range ((len (string)-1) ,- 1 ,- 1):"}, {"x": 649.0, "y": 726.0, "w": 1296.0, "h": 158.0, "line_num": 4, "text": "print (string [1])"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "det main ():\n    String = str (input ('Enter string: '))\n    for i in range ((len (string)-1) ,- 1 ,- 1):\n        print (string [1])\n", "ir_algo_output_indented_lines": [{"x": 63.0, "y": 54.0, "w": 913.0, "h": 132.0, "line_num": 1, "text": "det main ():", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 393.0, "y": 285.0, "w": 2705.0, "h": 161.0, "line_num": 2, "text": "String = str (input ('Enter string: '))", "delta": 330.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 367.0, "y": 471.0, "w": 2886.0, "h": 196.0, "line_num": 3, "text": "for i in range ((len (string)-1) ,- 1 ,- 1):", "delta": -26.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 649.0, "y": 726.0, "w": 1296.0, "h": 158.0, "line_num": 4, "text": "print (string [1])", "delta": 282.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}], "ir_algo_output_edit_distance": 20, "prompting_method": "cot-test1", "lm_post_processed_code": "def main ():\n    String = str (input ('Enter string: '))\n    for i in range ((len (String)-1) ,- 1 ,- 1):\n        print (String [i])\n", "lm_post_processed_edit_distance": 20}, {"image_id": 10, "image_height": 1246, "image_width": 3355, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 63.0, "y": 54.0, "w": 913.0, "h": 132.0, "line_num": 1, "text": "det main ():"}, {"x": 393.0, "y": 285.0, "w": 2705.0, "h": 161.0, "line_num": 2, "text": "String = str (input ('Enter string: '))"}, {"x": 367.0, "y": 471.0, "w": 2886.0, "h": 196.0, "line_num": 3, "text": "for i in range ((len (string)-1) ,- 1 ,- 1):"}, {"x": 649.0, "y": 726.0, "w": 1296.0, "h": 158.0, "line_num": 4, "text": "print (string [1])"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "det main ():\n    String = str (input ('Enter string: '))\n    for i in range ((len (string)-1) ,- 1 ,- 1):\n        print (string [1])\n", "ir_algo_output_indented_lines": [{"x": 63.0, "y": 54.0, "w": 913.0, "h": 132.0, "line_num": 1, "text": "det main ():", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 393.0, "y": 285.0, "w": 2705.0, "h": 161.0, "line_num": 2, "text": "String = str (input ('Enter string: '))", "delta": 330.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 367.0, "y": 471.0, "w": 2886.0, "h": 196.0, "line_num": 3, "text": "for i in range ((len (string)-1) ,- 1 ,- 1):", "delta": -26.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 649.0, "y": 726.0, "w": 1296.0, "h": 158.0, "line_num": 4, "text": "print (string [1])", "delta": 282.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}], "ir_algo_output_edit_distance": 20, "prompting_method": "cot-test5", "lm_post_processed_code": "def main():\n    string = str(input('Enter string: '))\n    for i in range((len(string)-1), -1, -1):\n        print(string[1])\n", "lm_post_processed_edit_distance": 5}, {"image_id": 10, "image_height": 1246, "image_width": 3355, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 63.0, "y": 54.0, "w": 913.0, "h": 132.0, "line_num": 1, "text": "det main ():"}, {"x": 393.0, "y": 285.0, "w": 2705.0, "h": 161.0, "line_num": 2, "text": "String = str (input ('Enter string: '))"}, {"x": 367.0, "y": 471.0, "w": 2886.0, "h": 196.0, "line_num": 3, "text": "for i in range ((len (string)-1) ,- 1 ,- 1):"}, {"x": 649.0, "y": 726.0, "w": 1296.0, "h": 158.0, "line_num": 4, "text": "print (string [1])"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "det main ():\n    String = str (input ('Enter string: '))\n    for i in range ((len (string)-1) ,- 1 ,- 1):\n        print (string [1])\n", "ir_algo_output_indented_lines": [{"x": 63.0, "y": 54.0, "w": 913.0, "h": 132.0, "line_num": 1, "text": "det main ():", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 393.0, "y": 285.0, "w": 2705.0, "h": 161.0, "line_num": 2, "text": "String = str (input ('Enter string: '))", "delta": 330.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 367.0, "y": 471.0, "w": 2886.0, "h": 196.0, "line_num": 3, "text": "for i in range ((len (string)-1) ,- 1 ,- 1):", "delta": -26.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 649.0, "y": 726.0, "w": 1296.0, "h": 158.0, "line_num": 4, "text": "print (string [1])", "delta": 282.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}], "ir_algo_output_edit_distance": 20, "prompting_method": "simple-test2", "lm_post_processed_code": "def main():\n    string = str(input('Enter string: '))\n    for i in range((len(string)-1), -1, -1):\n        print(string[i])\n", "lm_post_processed_edit_distance": 4}, {"image_id": 10, "image_height": 1246, "image_width": 3355, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 63.0, "y": 54.0, "w": 913.0, "h": 132.0, "line_num": 1, "text": "det main ():"}, {"x": 393.0, "y": 285.0, "w": 2705.0, "h": 161.0, "line_num": 2, "text": "String = str (input ('Enter string: '))"}, {"x": 367.0, "y": 471.0, "w": 2886.0, "h": 196.0, "line_num": 3, "text": "for i in range ((len (string)-1) ,- 1 ,- 1):"}, {"x": 649.0, "y": 726.0, "w": 1296.0, "h": 158.0, "line_num": 4, "text": "print (string [1])"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "det main ():\n    String = str (input ('Enter string: '))\n    for i in range ((len (string)-1) ,- 1 ,- 1):\n        print (string [1])\n", "ir_algo_output_indented_lines": [{"x": 63.0, "y": 54.0, "w": 913.0, "h": 132.0, "line_num": 1, "text": "det main ():", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 393.0, "y": 285.0, "w": 2705.0, "h": 161.0, "line_num": 2, "text": "String = str (input ('Enter string: '))", "delta": 330.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 367.0, "y": 471.0, "w": 2886.0, "h": 196.0, "line_num": 3, "text": "for i in range ((len (string)-1) ,- 1 ,- 1):", "delta": -26.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 649.0, "y": 726.0, "w": 1296.0, "h": 158.0, "line_num": 4, "text": "print (string [1])", "delta": 282.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}], "ir_algo_output_edit_distance": 20, "prompting_method": "simple-test3", "lm_post_processed_code": "def main():\n    string = str(input('Enter string: '))\n    for i in range((len(string)-1), -1, -1):\n        print(string[i])\n", "lm_post_processed_edit_distance": 4}, {"image_id": 12, "image_height": 4032, "image_width": 3024, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 190.0, "y": 132.0, "w": 2008.0, "h": 145.0, "line_num": 1, "text": "FROM GRAPHIES IMPORT CANVAS"}, {"x": 147.0, "y": 387.0, "w": 1259.0, "h": 120.0, "line_num": 2, "text": "CANVAS WIDTH = 300"}, {"x": 120.0, "y": 558.0, "w": 1364.0, "h": 113.0, "line_num": 3, "text": "CANVAS_HEIGHT = 300"}, {"x": 118.0, "y": 732.0, "w": 1208.0, "h": 119.0, "line_num": 4, "text": "CIRCLE_SIZE = 20"}, {"x": 134.0, "y": 954.0, "w": 800.0, "h": 124.0, "line_num": 5, "text": "DELAY = 0, 01"}, {"x": 117.0, "y": 1275.0, "w": 719.0, "h": 112.0, "line_num": 6, "text": "DEF MAIN :"}, {"x": 217.0, "y": 1463.0, "w": 2752.0, "h": 130.0, "line_num": 7, "text": "CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)"}, {"x": 215.0, "y": 1737.0, "w": 761.0, "h": 117.0, "line_num": 8, "text": "WHILE TRUE"}, {"x": 302.0, "y": 1915.0, "w": 2345.0, "h": 169.0, "line_num": 9, "text": "MOUSE-X = CANVAS . GET_MOUSE _ X ()"}, {"x": 251.0, "y": 2083.0, "w": 2348.0, "h": 180.0, "line_num": 10, "text": "MOUSE- Y = CANVAS . GET MOUSE_ Y ( )"}, {"x": 258.0, "y": 2438.0, "w": 2735.0, "h": 167.0, "line_num": 11, "text": "IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH"}, {"x": 230.0, "y": 2656.0, "w": 2783.0, "h": 158.0, "line_num": 12, "text": "AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH"}], "ir_algo_name": "none", "ir_algo_output_code": "FROM GRAPHIES IMPORT CANVAS\nCANVAS WIDTH = 300\nCANVAS_HEIGHT = 300\nCIRCLE_SIZE = 20\nDELAY = 0, 01\nDEF MAIN :\nCANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)\nWHILE TRUE\nMOUSE-X = CANVAS . GET_MOUSE _ X ()\nMOUSE- Y = CANVAS . GET MOUSE_ Y ( )\nIF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH\nAND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH", "ir_algo_output_edit_distance": 195, "prompting_method": "none", "lm_post_processed_code": "FROM GRAPHIES IMPORT CANVAS\nCANVAS WIDTH = 300\nCANVAS_HEIGHT = 300\nCIRCLE_SIZE = 20\nDELAY = 0, 01\nDEF MAIN :\nCANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)\nWHILE TRUE\nMOUSE-X = CANVAS . GET_MOUSE _ X ()\nMOUSE- Y = CANVAS . GET MOUSE_ Y ( )\nIF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH\nAND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH", "lm_post_processed_edit_distance": 195}, {"image_id": 12, "image_height": 4032, "image_width": 3024, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 190.0, "y": 132.0, "w": 2008.0, "h": 145.0, "line_num": 1, "text": "FROM GRAPHIES IMPORT CANVAS"}, {"x": 147.0, "y": 387.0, "w": 1259.0, "h": 120.0, "line_num": 2, "text": "CANVAS WIDTH = 300"}, {"x": 120.0, "y": 558.0, "w": 1364.0, "h": 113.0, "line_num": 3, "text": "CANVAS_HEIGHT = 300"}, {"x": 118.0, "y": 732.0, "w": 1208.0, "h": 119.0, "line_num": 4, "text": "CIRCLE_SIZE = 20"}, {"x": 134.0, "y": 954.0, "w": 800.0, "h": 124.0, "line_num": 5, "text": "DELAY = 0, 01"}, {"x": 117.0, "y": 1275.0, "w": 719.0, "h": 112.0, "line_num": 6, "text": "DEF MAIN :"}, {"x": 217.0, "y": 1463.0, "w": 2752.0, "h": 130.0, "line_num": 7, "text": "CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)"}, {"x": 215.0, "y": 1737.0, "w": 761.0, "h": 117.0, "line_num": 8, "text": "WHILE TRUE"}, {"x": 302.0, "y": 1915.0, "w": 2345.0, "h": 169.0, "line_num": 9, "text": "MOUSE-X = CANVAS . GET_MOUSE _ X ()"}, {"x": 251.0, "y": 2083.0, "w": 2348.0, "h": 180.0, "line_num": 10, "text": "MOUSE- Y = CANVAS . GET MOUSE_ Y ( )"}, {"x": 258.0, "y": 2438.0, "w": 2735.0, "h": 167.0, "line_num": 11, "text": "IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH"}, {"x": 230.0, "y": 2656.0, "w": 2783.0, "h": 158.0, "line_num": 12, "text": "AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH"}], "ir_algo_name": "none", "ir_algo_output_code": "FROM GRAPHIES IMPORT CANVAS\nCANVAS WIDTH = 300\nCANVAS_HEIGHT = 300\nCIRCLE_SIZE = 20\nDELAY = 0, 01\nDEF MAIN :\nCANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)\nWHILE TRUE\nMOUSE-X = CANVAS . GET_MOUSE _ X ()\nMOUSE- Y = CANVAS . GET MOUSE_ Y ( )\nIF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH\nAND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH", "ir_algo_output_edit_distance": 195, "prompting_method": "cot-test1", "lm_post_processed_code": "from graphics import Canvas\ncanvas_width = 300\ncanvas_height = 300\ncircle_size = 20\ndelay = 0.01\n\ndef main:\ncanvas = Canvas(canvas_width, canvas_height)\nwhile True:\nmouse_x = canvas.get_mouse_x()\nmouse_y = canvas.get_mouse_y()\nif mouse_x >= 0 and mouse_x <= canvas_width and mouse_y >= 0 and mouse_y <= canvas_height:\n", "lm_post_processed_edit_distance": 122}, {"image_id": 12, "image_height": 4032, "image_width": 3024, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 190.0, "y": 132.0, "w": 2008.0, "h": 145.0, "line_num": 1, "text": "FROM GRAPHIES IMPORT CANVAS"}, {"x": 147.0, "y": 387.0, "w": 1259.0, "h": 120.0, "line_num": 2, "text": "CANVAS WIDTH = 300"}, {"x": 120.0, "y": 558.0, "w": 1364.0, "h": 113.0, "line_num": 3, "text": "CANVAS_HEIGHT = 300"}, {"x": 118.0, "y": 732.0, "w": 1208.0, "h": 119.0, "line_num": 4, "text": "CIRCLE_SIZE = 20"}, {"x": 134.0, "y": 954.0, "w": 800.0, "h": 124.0, "line_num": 5, "text": "DELAY = 0, 01"}, {"x": 117.0, "y": 1275.0, "w": 719.0, "h": 112.0, "line_num": 6, "text": "DEF MAIN :"}, {"x": 217.0, "y": 1463.0, "w": 2752.0, "h": 130.0, "line_num": 7, "text": "CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)"}, {"x": 215.0, "y": 1737.0, "w": 761.0, "h": 117.0, "line_num": 8, "text": "WHILE TRUE"}, {"x": 302.0, "y": 1915.0, "w": 2345.0, "h": 169.0, "line_num": 9, "text": "MOUSE-X = CANVAS . GET_MOUSE _ X ()"}, {"x": 251.0, "y": 2083.0, "w": 2348.0, "h": 180.0, "line_num": 10, "text": "MOUSE- Y = CANVAS . GET MOUSE_ Y ( )"}, {"x": 258.0, "y": 2438.0, "w": 2735.0, "h": 167.0, "line_num": 11, "text": "IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH"}, {"x": 230.0, "y": 2656.0, "w": 2783.0, "h": 158.0, "line_num": 12, "text": "AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH"}], "ir_algo_name": "none", "ir_algo_output_code": "FROM GRAPHIES IMPORT CANVAS\nCANVAS WIDTH = 300\nCANVAS_HEIGHT = 300\nCIRCLE_SIZE = 20\nDELAY = 0, 01\nDEF MAIN :\nCANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)\nWHILE TRUE\nMOUSE-X = CANVAS . GET_MOUSE _ X ()\nMOUSE- Y = CANVAS . GET MOUSE_ Y ( )\nIF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH\nAND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH", "ir_algo_output_edit_distance": 195, "prompting_method": "cot-test5", "lm_post_processed_code": "from graphics import Canvas\ncanvas_width = 300\ncanvas_height = 300\ncircle_size = 20\ndelay = 0.01\n\ndef main:\ncanvas = Canvas(canvas_width, canvas_height)\nwhile True\nmouse_x = canvas.get_mouse_x()\nmouse_y = canvas.get_mouse_y()\nif mouse_x >= 0 and mouse_x <= canvas_width and mouse_y >= 0 and mouse_y <= canvas_height\n", "lm_post_processed_edit_distance": 120}, {"image_id": 12, "image_height": 4032, "image_width": 3024, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 190.0, "y": 132.0, "w": 2008.0, "h": 145.0, "line_num": 1, "text": "FROM GRAPHIES IMPORT CANVAS"}, {"x": 147.0, "y": 387.0, "w": 1259.0, "h": 120.0, "line_num": 2, "text": "CANVAS WIDTH = 300"}, {"x": 120.0, "y": 558.0, "w": 1364.0, "h": 113.0, "line_num": 3, "text": "CANVAS_HEIGHT = 300"}, {"x": 118.0, "y": 732.0, "w": 1208.0, "h": 119.0, "line_num": 4, "text": "CIRCLE_SIZE = 20"}, {"x": 134.0, "y": 954.0, "w": 800.0, "h": 124.0, "line_num": 5, "text": "DELAY = 0, 01"}, {"x": 117.0, "y": 1275.0, "w": 719.0, "h": 112.0, "line_num": 6, "text": "DEF MAIN :"}, {"x": 217.0, "y": 1463.0, "w": 2752.0, "h": 130.0, "line_num": 7, "text": "CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)"}, {"x": 215.0, "y": 1737.0, "w": 761.0, "h": 117.0, "line_num": 8, "text": "WHILE TRUE"}, {"x": 302.0, "y": 1915.0, "w": 2345.0, "h": 169.0, "line_num": 9, "text": "MOUSE-X = CANVAS . GET_MOUSE _ X ()"}, {"x": 251.0, "y": 2083.0, "w": 2348.0, "h": 180.0, "line_num": 10, "text": "MOUSE- Y = CANVAS . GET MOUSE_ Y ( )"}, {"x": 258.0, "y": 2438.0, "w": 2735.0, "h": 167.0, "line_num": 11, "text": "IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH"}, {"x": 230.0, "y": 2656.0, "w": 2783.0, "h": 158.0, "line_num": 12, "text": "AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH"}], "ir_algo_name": "none", "ir_algo_output_code": "FROM GRAPHIES IMPORT CANVAS\nCANVAS WIDTH = 300\nCANVAS_HEIGHT = 300\nCIRCLE_SIZE = 20\nDELAY = 0, 01\nDEF MAIN :\nCANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)\nWHILE TRUE\nMOUSE-X = CANVAS . GET_MOUSE _ X ()\nMOUSE- Y = CANVAS . GET MOUSE_ Y ( )\nIF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH\nAND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH", "ir_algo_output_edit_distance": 195, "prompting_method": "simple-test2", "lm_post_processed_code": "from graphics import Canvas\ncanvas_width = 300\ncanvas_height = 300\ncircle_size = 20\ndelay = 0.01\n\ndef main():\n    canvas = Canvas(canvas_width, canvas_height)\n    while True:\n        mouse_x = canvas.get_mouse_x()\n        mouse_y = canvas.get_mouse_y()\n        if mouse_x >= 0 and mouse_x <= canvas_width and mouse_y >= 0 and mouse_y <= canvas_height:\n            pass\n", "lm_post_processed_edit_distance": 109}, {"image_id": 12, "image_height": 4032, "image_width": 3024, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 190.0, "y": 132.0, "w": 2008.0, "h": 145.0, "line_num": 1, "text": "FROM GRAPHIES IMPORT CANVAS"}, {"x": 147.0, "y": 387.0, "w": 1259.0, "h": 120.0, "line_num": 2, "text": "CANVAS WIDTH = 300"}, {"x": 120.0, "y": 558.0, "w": 1364.0, "h": 113.0, "line_num": 3, "text": "CANVAS_HEIGHT = 300"}, {"x": 118.0, "y": 732.0, "w": 1208.0, "h": 119.0, "line_num": 4, "text": "CIRCLE_SIZE = 20"}, {"x": 134.0, "y": 954.0, "w": 800.0, "h": 124.0, "line_num": 5, "text": "DELAY = 0, 01"}, {"x": 117.0, "y": 1275.0, "w": 719.0, "h": 112.0, "line_num": 6, "text": "DEF MAIN :"}, {"x": 217.0, "y": 1463.0, "w": 2752.0, "h": 130.0, "line_num": 7, "text": "CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)"}, {"x": 215.0, "y": 1737.0, "w": 761.0, "h": 117.0, "line_num": 8, "text": "WHILE TRUE"}, {"x": 302.0, "y": 1915.0, "w": 2345.0, "h": 169.0, "line_num": 9, "text": "MOUSE-X = CANVAS . GET_MOUSE _ X ()"}, {"x": 251.0, "y": 2083.0, "w": 2348.0, "h": 180.0, "line_num": 10, "text": "MOUSE- Y = CANVAS . GET MOUSE_ Y ( )"}, {"x": 258.0, "y": 2438.0, "w": 2735.0, "h": 167.0, "line_num": 11, "text": "IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH"}, {"x": 230.0, "y": 2656.0, "w": 2783.0, "h": 158.0, "line_num": 12, "text": "AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH"}], "ir_algo_name": "none", "ir_algo_output_code": "FROM GRAPHIES IMPORT CANVAS\nCANVAS WIDTH = 300\nCANVAS_HEIGHT = 300\nCIRCLE_SIZE = 20\nDELAY = 0, 01\nDEF MAIN :\nCANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)\nWHILE TRUE\nMOUSE-X = CANVAS . GET_MOUSE _ X ()\nMOUSE- Y = CANVAS . GET MOUSE_ Y ( )\nIF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH\nAND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH", "ir_algo_output_edit_distance": 195, "prompting_method": "simple-test3", "lm_post_processed_code": "from graphics import Canvas\ncanvas_width = 300\ncanvas_height = 300\ncircle_size = 20\ndelay = 0.01\n\ndef main():\n    canvas = Canvas(canvas_width, canvas_height)\n    while True:\n        mouse_x = canvas.get_mouse_x()\n        mouse_y = canvas.get_mouse_y()\n        if mouse_x >= 0 and mouse_x <= canvas_width and mouse_y >= 0 and mouse_y <= canvas_height:\n            pass\n", "lm_post_processed_edit_distance": 109}, {"image_id": 12, "image_height": 4032, "image_width": 3024, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 190.0, "y": 132.0, "w": 2008.0, "h": 145.0, "line_num": 1, "text": "FROM GRAPHIES IMPORT CANVAS"}, {"x": 147.0, "y": 387.0, "w": 1259.0, "h": 120.0, "line_num": 2, "text": "CANVAS WIDTH = 300"}, {"x": 120.0, "y": 558.0, "w": 1364.0, "h": 113.0, "line_num": 3, "text": "CANVAS_HEIGHT = 300"}, {"x": 118.0, "y": 732.0, "w": 1208.0, "h": 119.0, "line_num": 4, "text": "CIRCLE_SIZE = 20"}, {"x": 134.0, "y": 954.0, "w": 800.0, "h": 124.0, "line_num": 5, "text": "DELAY = 0, 01"}, {"x": 117.0, "y": 1275.0, "w": 719.0, "h": 112.0, "line_num": 6, "text": "DEF MAIN :"}, {"x": 217.0, "y": 1463.0, "w": 2752.0, "h": 130.0, "line_num": 7, "text": "CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)"}, {"x": 215.0, "y": 1737.0, "w": 761.0, "h": 117.0, "line_num": 8, "text": "WHILE TRUE"}, {"x": 302.0, "y": 1915.0, "w": 2345.0, "h": 169.0, "line_num": 9, "text": "MOUSE-X = CANVAS . GET_MOUSE _ X ()"}, {"x": 251.0, "y": 2083.0, "w": 2348.0, "h": 180.0, "line_num": 10, "text": "MOUSE- Y = CANVAS . GET MOUSE_ Y ( )"}, {"x": 258.0, "y": 2438.0, "w": 2735.0, "h": 167.0, "line_num": 11, "text": "IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH"}, {"x": 230.0, "y": 2656.0, "w": 2783.0, "h": 158.0, "line_num": 12, "text": "AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 206.75, "ir_algo_output_code": "FROM GRAPHIES IMPORT CANVAS\nCANVAS WIDTH = 300\nCANVAS_HEIGHT = 300\nCIRCLE_SIZE = 20\nDELAY = 0, 01\nDEF MAIN :\nCANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)\nWHILE TRUE\nMOUSE-X = CANVAS . GET_MOUSE _ X ()\nMOUSE- Y = CANVAS . GET MOUSE_ Y ( )\nIF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH\nAND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH\n", "ir_algo_output_indented_lines": [{"x": 190.0, "y": 132.0, "w": 2008.0, "h": 145.0, "line_num": 1, "text": "FROM GRAPHIES IMPORT CANVAS", "cluster_label": 0, "indentation": 0}, {"x": 147.0, "y": 387.0, "w": 1259.0, "h": 120.0, "line_num": 2, "text": "CANVAS WIDTH = 300", "cluster_label": 0, "indentation": 0}, {"x": 120.0, "y": 558.0, "w": 1364.0, "h": 113.0, "line_num": 3, "text": "CANVAS_HEIGHT = 300", "cluster_label": 0, "indentation": 0}, {"x": 118.0, "y": 732.0, "w": 1208.0, "h": 119.0, "line_num": 4, "text": "CIRCLE_SIZE = 20", "cluster_label": 0, "indentation": 0}, {"x": 134.0, "y": 954.0, "w": 800.0, "h": 124.0, "line_num": 5, "text": "DELAY = 0, 01", "cluster_label": 0, "indentation": 0}, {"x": 117.0, "y": 1275.0, "w": 719.0, "h": 112.0, "line_num": 6, "text": "DEF MAIN :", "cluster_label": 0, "indentation": 0}, {"x": 217.0, "y": 1463.0, "w": 2752.0, "h": 130.0, "line_num": 7, "text": "CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)", "cluster_label": 0, "indentation": 0}, {"x": 215.0, "y": 1737.0, "w": 761.0, "h": 117.0, "line_num": 8, "text": "WHILE TRUE", "cluster_label": 0, "indentation": 0}, {"x": 302.0, "y": 1915.0, "w": 2345.0, "h": 169.0, "line_num": 9, "text": "MOUSE-X = CANVAS . GET_MOUSE _ X ()", "cluster_label": 0, "indentation": 0}, {"x": 251.0, "y": 2083.0, "w": 2348.0, "h": 180.0, "line_num": 10, "text": "MOUSE- Y = CANVAS . GET MOUSE_ Y ( )", "cluster_label": 0, "indentation": 0}, {"x": 258.0, "y": 2438.0, "w": 2735.0, "h": 167.0, "line_num": 11, "text": "IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH", "cluster_label": 0, "indentation": 0}, {"x": 230.0, "y": 2656.0, "w": 2783.0, "h": 158.0, "line_num": 12, "text": "AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 194, "prompting_method": "none", "lm_post_processed_code": "FROM GRAPHIES IMPORT CANVAS\nCANVAS WIDTH = 300\nCANVAS_HEIGHT = 300\nCIRCLE_SIZE = 20\nDELAY = 0, 01\nDEF MAIN :\nCANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)\nWHILE TRUE\nMOUSE-X = CANVAS . GET_MOUSE _ X ()\nMOUSE- Y = CANVAS . GET MOUSE_ Y ( )\nIF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH\nAND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH\n", "lm_post_processed_edit_distance": 194}, {"image_id": 12, "image_height": 4032, "image_width": 3024, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 190.0, "y": 132.0, "w": 2008.0, "h": 145.0, "line_num": 1, "text": "FROM GRAPHIES IMPORT CANVAS"}, {"x": 147.0, "y": 387.0, "w": 1259.0, "h": 120.0, "line_num": 2, "text": "CANVAS WIDTH = 300"}, {"x": 120.0, "y": 558.0, "w": 1364.0, "h": 113.0, "line_num": 3, "text": "CANVAS_HEIGHT = 300"}, {"x": 118.0, "y": 732.0, "w": 1208.0, "h": 119.0, "line_num": 4, "text": "CIRCLE_SIZE = 20"}, {"x": 134.0, "y": 954.0, "w": 800.0, "h": 124.0, "line_num": 5, "text": "DELAY = 0, 01"}, {"x": 117.0, "y": 1275.0, "w": 719.0, "h": 112.0, "line_num": 6, "text": "DEF MAIN :"}, {"x": 217.0, "y": 1463.0, "w": 2752.0, "h": 130.0, "line_num": 7, "text": "CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)"}, {"x": 215.0, "y": 1737.0, "w": 761.0, "h": 117.0, "line_num": 8, "text": "WHILE TRUE"}, {"x": 302.0, "y": 1915.0, "w": 2345.0, "h": 169.0, "line_num": 9, "text": "MOUSE-X = CANVAS . GET_MOUSE _ X ()"}, {"x": 251.0, "y": 2083.0, "w": 2348.0, "h": 180.0, "line_num": 10, "text": "MOUSE- Y = CANVAS . GET MOUSE_ Y ( )"}, {"x": 258.0, "y": 2438.0, "w": 2735.0, "h": 167.0, "line_num": 11, "text": "IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH"}, {"x": 230.0, "y": 2656.0, "w": 2783.0, "h": 158.0, "line_num": 12, "text": "AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 206.75, "ir_algo_output_code": "FROM GRAPHIES IMPORT CANVAS\nCANVAS WIDTH = 300\nCANVAS_HEIGHT = 300\nCIRCLE_SIZE = 20\nDELAY = 0, 01\nDEF MAIN :\nCANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)\nWHILE TRUE\nMOUSE-X = CANVAS . GET_MOUSE _ X ()\nMOUSE- Y = CANVAS . GET MOUSE_ Y ( )\nIF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH\nAND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH\n", "ir_algo_output_indented_lines": [{"x": 190.0, "y": 132.0, "w": 2008.0, "h": 145.0, "line_num": 1, "text": "FROM GRAPHIES IMPORT CANVAS", "cluster_label": 0, "indentation": 0}, {"x": 147.0, "y": 387.0, "w": 1259.0, "h": 120.0, "line_num": 2, "text": "CANVAS WIDTH = 300", "cluster_label": 0, "indentation": 0}, {"x": 120.0, "y": 558.0, "w": 1364.0, "h": 113.0, "line_num": 3, "text": "CANVAS_HEIGHT = 300", "cluster_label": 0, "indentation": 0}, {"x": 118.0, "y": 732.0, "w": 1208.0, "h": 119.0, "line_num": 4, "text": "CIRCLE_SIZE = 20", "cluster_label": 0, "indentation": 0}, {"x": 134.0, "y": 954.0, "w": 800.0, "h": 124.0, "line_num": 5, "text": "DELAY = 0, 01", "cluster_label": 0, "indentation": 0}, {"x": 117.0, "y": 1275.0, "w": 719.0, "h": 112.0, "line_num": 6, "text": "DEF MAIN :", "cluster_label": 0, "indentation": 0}, {"x": 217.0, "y": 1463.0, "w": 2752.0, "h": 130.0, "line_num": 7, "text": "CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)", "cluster_label": 0, "indentation": 0}, {"x": 215.0, "y": 1737.0, "w": 761.0, "h": 117.0, "line_num": 8, "text": "WHILE TRUE", "cluster_label": 0, "indentation": 0}, {"x": 302.0, "y": 1915.0, "w": 2345.0, "h": 169.0, "line_num": 9, "text": "MOUSE-X = CANVAS . GET_MOUSE _ X ()", "cluster_label": 0, "indentation": 0}, {"x": 251.0, "y": 2083.0, "w": 2348.0, "h": 180.0, "line_num": 10, "text": "MOUSE- Y = CANVAS . GET MOUSE_ Y ( )", "cluster_label": 0, "indentation": 0}, {"x": 258.0, "y": 2438.0, "w": 2735.0, "h": 167.0, "line_num": 11, "text": "IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH", "cluster_label": 0, "indentation": 0}, {"x": 230.0, "y": 2656.0, "w": 2783.0, "h": 158.0, "line_num": 12, "text": "AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 194, "prompting_method": "cot-test1", "lm_post_processed_code": "from graphics import Canvas\ncanvas_width = 300\ncanvas_height = 300\ncircle_size = 20\ndelay = 0.01\n\ndef main:\ncanvas = Canvas(canvas_width, canvas_height)\nwhile True\nmouse_x = canvas.get_mouse_x()\nmouse_y = canvas.get_mouse_y()\nif mouse_x >= 0 and mouse_x <= canvas_width and mouse_y >= 0 and mouse_y <= canvas_height:\n", "lm_post_processed_edit_distance": 121}, {"image_id": 12, "image_height": 4032, "image_width": 3024, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 190.0, "y": 132.0, "w": 2008.0, "h": 145.0, "line_num": 1, "text": "FROM GRAPHIES IMPORT CANVAS"}, {"x": 147.0, "y": 387.0, "w": 1259.0, "h": 120.0, "line_num": 2, "text": "CANVAS WIDTH = 300"}, {"x": 120.0, "y": 558.0, "w": 1364.0, "h": 113.0, "line_num": 3, "text": "CANVAS_HEIGHT = 300"}, {"x": 118.0, "y": 732.0, "w": 1208.0, "h": 119.0, "line_num": 4, "text": "CIRCLE_SIZE = 20"}, {"x": 134.0, "y": 954.0, "w": 800.0, "h": 124.0, "line_num": 5, "text": "DELAY = 0, 01"}, {"x": 117.0, "y": 1275.0, "w": 719.0, "h": 112.0, "line_num": 6, "text": "DEF MAIN :"}, {"x": 217.0, "y": 1463.0, "w": 2752.0, "h": 130.0, "line_num": 7, "text": "CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)"}, {"x": 215.0, "y": 1737.0, "w": 761.0, "h": 117.0, "line_num": 8, "text": "WHILE TRUE"}, {"x": 302.0, "y": 1915.0, "w": 2345.0, "h": 169.0, "line_num": 9, "text": "MOUSE-X = CANVAS . GET_MOUSE _ X ()"}, {"x": 251.0, "y": 2083.0, "w": 2348.0, "h": 180.0, "line_num": 10, "text": "MOUSE- Y = CANVAS . GET MOUSE_ Y ( )"}, {"x": 258.0, "y": 2438.0, "w": 2735.0, "h": 167.0, "line_num": 11, "text": "IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH"}, {"x": 230.0, "y": 2656.0, "w": 2783.0, "h": 158.0, "line_num": 12, "text": "AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 206.75, "ir_algo_output_code": "FROM GRAPHIES IMPORT CANVAS\nCANVAS WIDTH = 300\nCANVAS_HEIGHT = 300\nCIRCLE_SIZE = 20\nDELAY = 0, 01\nDEF MAIN :\nCANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)\nWHILE TRUE\nMOUSE-X = CANVAS . GET_MOUSE _ X ()\nMOUSE- Y = CANVAS . GET MOUSE_ Y ( )\nIF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH\nAND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH\n", "ir_algo_output_indented_lines": [{"x": 190.0, "y": 132.0, "w": 2008.0, "h": 145.0, "line_num": 1, "text": "FROM GRAPHIES IMPORT CANVAS", "cluster_label": 0, "indentation": 0}, {"x": 147.0, "y": 387.0, "w": 1259.0, "h": 120.0, "line_num": 2, "text": "CANVAS WIDTH = 300", "cluster_label": 0, "indentation": 0}, {"x": 120.0, "y": 558.0, "w": 1364.0, "h": 113.0, "line_num": 3, "text": "CANVAS_HEIGHT = 300", "cluster_label": 0, "indentation": 0}, {"x": 118.0, "y": 732.0, "w": 1208.0, "h": 119.0, "line_num": 4, "text": "CIRCLE_SIZE = 20", "cluster_label": 0, "indentation": 0}, {"x": 134.0, "y": 954.0, "w": 800.0, "h": 124.0, "line_num": 5, "text": "DELAY = 0, 01", "cluster_label": 0, "indentation": 0}, {"x": 117.0, "y": 1275.0, "w": 719.0, "h": 112.0, "line_num": 6, "text": "DEF MAIN :", "cluster_label": 0, "indentation": 0}, {"x": 217.0, "y": 1463.0, "w": 2752.0, "h": 130.0, "line_num": 7, "text": "CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)", "cluster_label": 0, "indentation": 0}, {"x": 215.0, "y": 1737.0, "w": 761.0, "h": 117.0, "line_num": 8, "text": "WHILE TRUE", "cluster_label": 0, "indentation": 0}, {"x": 302.0, "y": 1915.0, "w": 2345.0, "h": 169.0, "line_num": 9, "text": "MOUSE-X = CANVAS . GET_MOUSE _ X ()", "cluster_label": 0, "indentation": 0}, {"x": 251.0, "y": 2083.0, "w": 2348.0, "h": 180.0, "line_num": 10, "text": "MOUSE- Y = CANVAS . GET MOUSE_ Y ( )", "cluster_label": 0, "indentation": 0}, {"x": 258.0, "y": 2438.0, "w": 2735.0, "h": 167.0, "line_num": 11, "text": "IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH", "cluster_label": 0, "indentation": 0}, {"x": 230.0, "y": 2656.0, "w": 2783.0, "h": 158.0, "line_num": 12, "text": "AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 194, "prompting_method": "cot-test5", "lm_post_processed_code": "from graphics import Canvas\ncanvas_width = 300\ncanvas_height = 300\ncircle_size = 20\ndelay = 0.01\n\ndef main():\ncanvas = Canvas(canvas_width, canvas_height)\nwhile True:\nmouse_x = canvas.get_mouse_x()\nmouse_y = canvas.get_mouse_y()\nif mouse_x >= 0 and mouse_x <= canvas_width and mouse_y >= 0 and mouse_y <= canvas_height:\n", "lm_post_processed_edit_distance": 124}, {"image_id": 12, "image_height": 4032, "image_width": 3024, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 190.0, "y": 132.0, "w": 2008.0, "h": 145.0, "line_num": 1, "text": "FROM GRAPHIES IMPORT CANVAS"}, {"x": 147.0, "y": 387.0, "w": 1259.0, "h": 120.0, "line_num": 2, "text": "CANVAS WIDTH = 300"}, {"x": 120.0, "y": 558.0, "w": 1364.0, "h": 113.0, "line_num": 3, "text": "CANVAS_HEIGHT = 300"}, {"x": 118.0, "y": 732.0, "w": 1208.0, "h": 119.0, "line_num": 4, "text": "CIRCLE_SIZE = 20"}, {"x": 134.0, "y": 954.0, "w": 800.0, "h": 124.0, "line_num": 5, "text": "DELAY = 0, 01"}, {"x": 117.0, "y": 1275.0, "w": 719.0, "h": 112.0, "line_num": 6, "text": "DEF MAIN :"}, {"x": 217.0, "y": 1463.0, "w": 2752.0, "h": 130.0, "line_num": 7, "text": "CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)"}, {"x": 215.0, "y": 1737.0, "w": 761.0, "h": 117.0, "line_num": 8, "text": "WHILE TRUE"}, {"x": 302.0, "y": 1915.0, "w": 2345.0, "h": 169.0, "line_num": 9, "text": "MOUSE-X = CANVAS . GET_MOUSE _ X ()"}, {"x": 251.0, "y": 2083.0, "w": 2348.0, "h": 180.0, "line_num": 10, "text": "MOUSE- Y = CANVAS . GET MOUSE_ Y ( )"}, {"x": 258.0, "y": 2438.0, "w": 2735.0, "h": 167.0, "line_num": 11, "text": "IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH"}, {"x": 230.0, "y": 2656.0, "w": 2783.0, "h": 158.0, "line_num": 12, "text": "AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 206.75, "ir_algo_output_code": "FROM GRAPHIES IMPORT CANVAS\nCANVAS WIDTH = 300\nCANVAS_HEIGHT = 300\nCIRCLE_SIZE = 20\nDELAY = 0, 01\nDEF MAIN :\nCANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)\nWHILE TRUE\nMOUSE-X = CANVAS . GET_MOUSE _ X ()\nMOUSE- Y = CANVAS . GET MOUSE_ Y ( )\nIF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH\nAND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH\n", "ir_algo_output_indented_lines": [{"x": 190.0, "y": 132.0, "w": 2008.0, "h": 145.0, "line_num": 1, "text": "FROM GRAPHIES IMPORT CANVAS", "cluster_label": 0, "indentation": 0}, {"x": 147.0, "y": 387.0, "w": 1259.0, "h": 120.0, "line_num": 2, "text": "CANVAS WIDTH = 300", "cluster_label": 0, "indentation": 0}, {"x": 120.0, "y": 558.0, "w": 1364.0, "h": 113.0, "line_num": 3, "text": "CANVAS_HEIGHT = 300", "cluster_label": 0, "indentation": 0}, {"x": 118.0, "y": 732.0, "w": 1208.0, "h": 119.0, "line_num": 4, "text": "CIRCLE_SIZE = 20", "cluster_label": 0, "indentation": 0}, {"x": 134.0, "y": 954.0, "w": 800.0, "h": 124.0, "line_num": 5, "text": "DELAY = 0, 01", "cluster_label": 0, "indentation": 0}, {"x": 117.0, "y": 1275.0, "w": 719.0, "h": 112.0, "line_num": 6, "text": "DEF MAIN :", "cluster_label": 0, "indentation": 0}, {"x": 217.0, "y": 1463.0, "w": 2752.0, "h": 130.0, "line_num": 7, "text": "CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)", "cluster_label": 0, "indentation": 0}, {"x": 215.0, "y": 1737.0, "w": 761.0, "h": 117.0, "line_num": 8, "text": "WHILE TRUE", "cluster_label": 0, "indentation": 0}, {"x": 302.0, "y": 1915.0, "w": 2345.0, "h": 169.0, "line_num": 9, "text": "MOUSE-X = CANVAS . GET_MOUSE _ X ()", "cluster_label": 0, "indentation": 0}, {"x": 251.0, "y": 2083.0, "w": 2348.0, "h": 180.0, "line_num": 10, "text": "MOUSE- Y = CANVAS . GET MOUSE_ Y ( )", "cluster_label": 0, "indentation": 0}, {"x": 258.0, "y": 2438.0, "w": 2735.0, "h": 167.0, "line_num": 11, "text": "IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH", "cluster_label": 0, "indentation": 0}, {"x": 230.0, "y": 2656.0, "w": 2783.0, "h": 158.0, "line_num": 12, "text": "AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 194, "prompting_method": "simple-test2", "lm_post_processed_code": "from graphics import Canvas\ncanvas_width = 300\ncanvas_height = 300\ncircle_size = 20\ndelay = 0.01\n\ndef main():\n    canvas = Canvas(canvas_width, canvas_height)\n    while True:\n        mouse_x = canvas.get_mouse_x()\n        mouse_y = canvas.get_mouse_y()\n        if mouse_x >= 0 and mouse_x <= canvas_width and mouse_y >= 0 and mouse_y <= canvas_height:\n            pass\n", "lm_post_processed_edit_distance": 109}, {"image_id": 12, "image_height": 4032, "image_width": 3024, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 190.0, "y": 132.0, "w": 2008.0, "h": 145.0, "line_num": 1, "text": "FROM GRAPHIES IMPORT CANVAS"}, {"x": 147.0, "y": 387.0, "w": 1259.0, "h": 120.0, "line_num": 2, "text": "CANVAS WIDTH = 300"}, {"x": 120.0, "y": 558.0, "w": 1364.0, "h": 113.0, "line_num": 3, "text": "CANVAS_HEIGHT = 300"}, {"x": 118.0, "y": 732.0, "w": 1208.0, "h": 119.0, "line_num": 4, "text": "CIRCLE_SIZE = 20"}, {"x": 134.0, "y": 954.0, "w": 800.0, "h": 124.0, "line_num": 5, "text": "DELAY = 0, 01"}, {"x": 117.0, "y": 1275.0, "w": 719.0, "h": 112.0, "line_num": 6, "text": "DEF MAIN :"}, {"x": 217.0, "y": 1463.0, "w": 2752.0, "h": 130.0, "line_num": 7, "text": "CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)"}, {"x": 215.0, "y": 1737.0, "w": 761.0, "h": 117.0, "line_num": 8, "text": "WHILE TRUE"}, {"x": 302.0, "y": 1915.0, "w": 2345.0, "h": 169.0, "line_num": 9, "text": "MOUSE-X = CANVAS . GET_MOUSE _ X ()"}, {"x": 251.0, "y": 2083.0, "w": 2348.0, "h": 180.0, "line_num": 10, "text": "MOUSE- Y = CANVAS . GET MOUSE_ Y ( )"}, {"x": 258.0, "y": 2438.0, "w": 2735.0, "h": 167.0, "line_num": 11, "text": "IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH"}, {"x": 230.0, "y": 2656.0, "w": 2783.0, "h": 158.0, "line_num": 12, "text": "AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 206.75, "ir_algo_output_code": "FROM GRAPHIES IMPORT CANVAS\nCANVAS WIDTH = 300\nCANVAS_HEIGHT = 300\nCIRCLE_SIZE = 20\nDELAY = 0, 01\nDEF MAIN :\nCANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)\nWHILE TRUE\nMOUSE-X = CANVAS . GET_MOUSE _ X ()\nMOUSE- Y = CANVAS . GET MOUSE_ Y ( )\nIF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH\nAND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH\n", "ir_algo_output_indented_lines": [{"x": 190.0, "y": 132.0, "w": 2008.0, "h": 145.0, "line_num": 1, "text": "FROM GRAPHIES IMPORT CANVAS", "cluster_label": 0, "indentation": 0}, {"x": 147.0, "y": 387.0, "w": 1259.0, "h": 120.0, "line_num": 2, "text": "CANVAS WIDTH = 300", "cluster_label": 0, "indentation": 0}, {"x": 120.0, "y": 558.0, "w": 1364.0, "h": 113.0, "line_num": 3, "text": "CANVAS_HEIGHT = 300", "cluster_label": 0, "indentation": 0}, {"x": 118.0, "y": 732.0, "w": 1208.0, "h": 119.0, "line_num": 4, "text": "CIRCLE_SIZE = 20", "cluster_label": 0, "indentation": 0}, {"x": 134.0, "y": 954.0, "w": 800.0, "h": 124.0, "line_num": 5, "text": "DELAY = 0, 01", "cluster_label": 0, "indentation": 0}, {"x": 117.0, "y": 1275.0, "w": 719.0, "h": 112.0, "line_num": 6, "text": "DEF MAIN :", "cluster_label": 0, "indentation": 0}, {"x": 217.0, "y": 1463.0, "w": 2752.0, "h": 130.0, "line_num": 7, "text": "CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)", "cluster_label": 0, "indentation": 0}, {"x": 215.0, "y": 1737.0, "w": 761.0, "h": 117.0, "line_num": 8, "text": "WHILE TRUE", "cluster_label": 0, "indentation": 0}, {"x": 302.0, "y": 1915.0, "w": 2345.0, "h": 169.0, "line_num": 9, "text": "MOUSE-X = CANVAS . GET_MOUSE _ X ()", "cluster_label": 0, "indentation": 0}, {"x": 251.0, "y": 2083.0, "w": 2348.0, "h": 180.0, "line_num": 10, "text": "MOUSE- Y = CANVAS . GET MOUSE_ Y ( )", "cluster_label": 0, "indentation": 0}, {"x": 258.0, "y": 2438.0, "w": 2735.0, "h": 167.0, "line_num": 11, "text": "IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH", "cluster_label": 0, "indentation": 0}, {"x": 230.0, "y": 2656.0, "w": 2783.0, "h": 158.0, "line_num": 12, "text": "AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 194, "prompting_method": "simple-test3", "lm_post_processed_code": "from graphics import Canvas\ncanvas_width = 300\ncanvas_height = 300\ncircle_size = 20\ndelay = 0.01\n\ndef main():\n    canvas = Canvas(canvas_width, canvas_height)\n    while True:\n        mouse_x = canvas.get_mouse_x()\n        mouse_y = canvas.get_mouse_y()\n        if mouse_x >= 0 and mouse_x <= canvas_width and mouse_y >= 0 and mouse_y <= canvas_height:\n            pass\n", "lm_post_processed_edit_distance": 109}, {"image_id": 12, "image_height": 4032, "image_width": 3024, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 190.0, "y": 132.0, "w": 2008.0, "h": 145.0, "line_num": 1, "text": "FROM GRAPHIES IMPORT CANVAS"}, {"x": 147.0, "y": 387.0, "w": 1259.0, "h": 120.0, "line_num": 2, "text": "CANVAS WIDTH = 300"}, {"x": 120.0, "y": 558.0, "w": 1364.0, "h": 113.0, "line_num": 3, "text": "CANVAS_HEIGHT = 300"}, {"x": 118.0, "y": 732.0, "w": 1208.0, "h": 119.0, "line_num": 4, "text": "CIRCLE_SIZE = 20"}, {"x": 134.0, "y": 954.0, "w": 800.0, "h": 124.0, "line_num": 5, "text": "DELAY = 0, 01"}, {"x": 117.0, "y": 1275.0, "w": 719.0, "h": 112.0, "line_num": 6, "text": "DEF MAIN :"}, {"x": 217.0, "y": 1463.0, "w": 2752.0, "h": 130.0, "line_num": 7, "text": "CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)"}, {"x": 215.0, "y": 1737.0, "w": 761.0, "h": 117.0, "line_num": 8, "text": "WHILE TRUE"}, {"x": 302.0, "y": 1915.0, "w": 2345.0, "h": 169.0, "line_num": 9, "text": "MOUSE-X = CANVAS . GET_MOUSE _ X ()"}, {"x": 251.0, "y": 2083.0, "w": 2348.0, "h": 180.0, "line_num": 10, "text": "MOUSE- Y = CANVAS . GET MOUSE_ Y ( )"}, {"x": 258.0, "y": 2438.0, "w": 2735.0, "h": 167.0, "line_num": 11, "text": "IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH"}, {"x": 230.0, "y": 2656.0, "w": 2783.0, "h": 158.0, "line_num": 12, "text": "AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "FROM GRAPHIES IMPORT CANVAS\nCANVAS WIDTH = 300\nCANVAS_HEIGHT = 300\nCIRCLE_SIZE = 20\nDELAY = 0, 01\nDEF MAIN :\n    CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)\n    WHILE TRUE\n        MOUSE-X = CANVAS . GET_MOUSE _ X ()\n    MOUSE- Y = CANVAS . GET MOUSE_ Y ( )\n    IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH\n    AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH\n", "ir_algo_output_indented_lines": [{"x": 190.0, "y": 132.0, "w": 2008.0, "h": 145.0, "line_num": 1, "text": "FROM GRAPHIES IMPORT CANVAS", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 147.0, "y": 387.0, "w": 1259.0, "h": 120.0, "line_num": 2, "text": "CANVAS WIDTH = 300", "delta": -43.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 120.0, "y": 558.0, "w": 1364.0, "h": 113.0, "line_num": 3, "text": "CANVAS_HEIGHT = 300", "delta": -27.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 118.0, "y": 732.0, "w": 1208.0, "h": 119.0, "line_num": 4, "text": "CIRCLE_SIZE = 20", "delta": -2.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 134.0, "y": 954.0, "w": 800.0, "h": 124.0, "line_num": 5, "text": "DELAY = 0, 01", "delta": 16.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 117.0, "y": 1275.0, "w": 719.0, "h": 112.0, "line_num": 6, "text": "DEF MAIN :", "delta": -17.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 217.0, "y": 1463.0, "w": 2752.0, "h": 130.0, "line_num": 7, "text": "CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)", "delta": 100.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 215.0, "y": 1737.0, "w": 761.0, "h": 117.0, "line_num": 8, "text": "WHILE TRUE", "delta": -2.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 302.0, "y": 1915.0, "w": 2345.0, "h": 169.0, "line_num": 9, "text": "MOUSE-X = CANVAS . GET_MOUSE _ X ()", "delta": 87.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 251.0, "y": 2083.0, "w": 2348.0, "h": 180.0, "line_num": 10, "text": "MOUSE- Y = CANVAS . GET MOUSE_ Y ( )", "delta": -51.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 258.0, "y": 2438.0, "w": 2735.0, "h": 167.0, "line_num": 11, "text": "IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 230.0, "y": 2656.0, "w": 2783.0, "h": 158.0, "line_num": 12, "text": "AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH", "delta": -28.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 178, "prompting_method": "none", "lm_post_processed_code": "FROM GRAPHIES IMPORT CANVAS\nCANVAS WIDTH = 300\nCANVAS_HEIGHT = 300\nCIRCLE_SIZE = 20\nDELAY = 0, 01\nDEF MAIN :\n    CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)\n    WHILE TRUE\n        MOUSE-X = CANVAS . GET_MOUSE _ X ()\n    MOUSE- Y = CANVAS . GET MOUSE_ Y ( )\n    IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH\n    AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH\n", "lm_post_processed_edit_distance": 178}, {"image_id": 12, "image_height": 4032, "image_width": 3024, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 190.0, "y": 132.0, "w": 2008.0, "h": 145.0, "line_num": 1, "text": "FROM GRAPHIES IMPORT CANVAS"}, {"x": 147.0, "y": 387.0, "w": 1259.0, "h": 120.0, "line_num": 2, "text": "CANVAS WIDTH = 300"}, {"x": 120.0, "y": 558.0, "w": 1364.0, "h": 113.0, "line_num": 3, "text": "CANVAS_HEIGHT = 300"}, {"x": 118.0, "y": 732.0, "w": 1208.0, "h": 119.0, "line_num": 4, "text": "CIRCLE_SIZE = 20"}, {"x": 134.0, "y": 954.0, "w": 800.0, "h": 124.0, "line_num": 5, "text": "DELAY = 0, 01"}, {"x": 117.0, "y": 1275.0, "w": 719.0, "h": 112.0, "line_num": 6, "text": "DEF MAIN :"}, {"x": 217.0, "y": 1463.0, "w": 2752.0, "h": 130.0, "line_num": 7, "text": "CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)"}, {"x": 215.0, "y": 1737.0, "w": 761.0, "h": 117.0, "line_num": 8, "text": "WHILE TRUE"}, {"x": 302.0, "y": 1915.0, "w": 2345.0, "h": 169.0, "line_num": 9, "text": "MOUSE-X = CANVAS . GET_MOUSE _ X ()"}, {"x": 251.0, "y": 2083.0, "w": 2348.0, "h": 180.0, "line_num": 10, "text": "MOUSE- Y = CANVAS . GET MOUSE_ Y ( )"}, {"x": 258.0, "y": 2438.0, "w": 2735.0, "h": 167.0, "line_num": 11, "text": "IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH"}, {"x": 230.0, "y": 2656.0, "w": 2783.0, "h": 158.0, "line_num": 12, "text": "AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "FROM GRAPHIES IMPORT CANVAS\nCANVAS WIDTH = 300\nCANVAS_HEIGHT = 300\nCIRCLE_SIZE = 20\nDELAY = 0, 01\nDEF MAIN :\n    CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)\n    WHILE TRUE\n        MOUSE-X = CANVAS . GET_MOUSE _ X ()\n    MOUSE- Y = CANVAS . GET MOUSE_ Y ( )\n    IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH\n    AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH\n", "ir_algo_output_indented_lines": [{"x": 190.0, "y": 132.0, "w": 2008.0, "h": 145.0, "line_num": 1, "text": "FROM GRAPHIES IMPORT CANVAS", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 147.0, "y": 387.0, "w": 1259.0, "h": 120.0, "line_num": 2, "text": "CANVAS WIDTH = 300", "delta": -43.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 120.0, "y": 558.0, "w": 1364.0, "h": 113.0, "line_num": 3, "text": "CANVAS_HEIGHT = 300", "delta": -27.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 118.0, "y": 732.0, "w": 1208.0, "h": 119.0, "line_num": 4, "text": "CIRCLE_SIZE = 20", "delta": -2.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 134.0, "y": 954.0, "w": 800.0, "h": 124.0, "line_num": 5, "text": "DELAY = 0, 01", "delta": 16.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 117.0, "y": 1275.0, "w": 719.0, "h": 112.0, "line_num": 6, "text": "DEF MAIN :", "delta": -17.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 217.0, "y": 1463.0, "w": 2752.0, "h": 130.0, "line_num": 7, "text": "CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)", "delta": 100.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 215.0, "y": 1737.0, "w": 761.0, "h": 117.0, "line_num": 8, "text": "WHILE TRUE", "delta": -2.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 302.0, "y": 1915.0, "w": 2345.0, "h": 169.0, "line_num": 9, "text": "MOUSE-X = CANVAS . GET_MOUSE _ X ()", "delta": 87.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 251.0, "y": 2083.0, "w": 2348.0, "h": 180.0, "line_num": 10, "text": "MOUSE- Y = CANVAS . GET MOUSE_ Y ( )", "delta": -51.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 258.0, "y": 2438.0, "w": 2735.0, "h": 167.0, "line_num": 11, "text": "IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 230.0, "y": 2656.0, "w": 2783.0, "h": 158.0, "line_num": 12, "text": "AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH", "delta": -28.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 178, "prompting_method": "cot-test1", "lm_post_processed_code": "from graphics import Canvas\ncanvas_width = 300\ncanvas_height = 300\ncircle_size = 20\ndelay = 0.01\n\ndef main():\ncanvas = Canvas(canvas_width, canvas_height)\nwhile True\nmouse_x = canvas.get_mouse_x()\nmouse_y = canvas.get_mouse_y()\nif mouse_x >= 0 and mouse_x <= canvas_width and mouse_y >= 0 and mouse_y <= canvas_height:\n", "lm_post_processed_edit_distance": 123}, {"image_id": 12, "image_height": 4032, "image_width": 3024, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 190.0, "y": 132.0, "w": 2008.0, "h": 145.0, "line_num": 1, "text": "FROM GRAPHIES IMPORT CANVAS"}, {"x": 147.0, "y": 387.0, "w": 1259.0, "h": 120.0, "line_num": 2, "text": "CANVAS WIDTH = 300"}, {"x": 120.0, "y": 558.0, "w": 1364.0, "h": 113.0, "line_num": 3, "text": "CANVAS_HEIGHT = 300"}, {"x": 118.0, "y": 732.0, "w": 1208.0, "h": 119.0, "line_num": 4, "text": "CIRCLE_SIZE = 20"}, {"x": 134.0, "y": 954.0, "w": 800.0, "h": 124.0, "line_num": 5, "text": "DELAY = 0, 01"}, {"x": 117.0, "y": 1275.0, "w": 719.0, "h": 112.0, "line_num": 6, "text": "DEF MAIN :"}, {"x": 217.0, "y": 1463.0, "w": 2752.0, "h": 130.0, "line_num": 7, "text": "CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)"}, {"x": 215.0, "y": 1737.0, "w": 761.0, "h": 117.0, "line_num": 8, "text": "WHILE TRUE"}, {"x": 302.0, "y": 1915.0, "w": 2345.0, "h": 169.0, "line_num": 9, "text": "MOUSE-X = CANVAS . GET_MOUSE _ X ()"}, {"x": 251.0, "y": 2083.0, "w": 2348.0, "h": 180.0, "line_num": 10, "text": "MOUSE- Y = CANVAS . GET MOUSE_ Y ( )"}, {"x": 258.0, "y": 2438.0, "w": 2735.0, "h": 167.0, "line_num": 11, "text": "IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH"}, {"x": 230.0, "y": 2656.0, "w": 2783.0, "h": 158.0, "line_num": 12, "text": "AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "FROM GRAPHIES IMPORT CANVAS\nCANVAS WIDTH = 300\nCANVAS_HEIGHT = 300\nCIRCLE_SIZE = 20\nDELAY = 0, 01\nDEF MAIN :\n    CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)\n    WHILE TRUE\n        MOUSE-X = CANVAS . GET_MOUSE _ X ()\n    MOUSE- Y = CANVAS . GET MOUSE_ Y ( )\n    IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH\n    AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH\n", "ir_algo_output_indented_lines": [{"x": 190.0, "y": 132.0, "w": 2008.0, "h": 145.0, "line_num": 1, "text": "FROM GRAPHIES IMPORT CANVAS", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 147.0, "y": 387.0, "w": 1259.0, "h": 120.0, "line_num": 2, "text": "CANVAS WIDTH = 300", "delta": -43.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 120.0, "y": 558.0, "w": 1364.0, "h": 113.0, "line_num": 3, "text": "CANVAS_HEIGHT = 300", "delta": -27.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 118.0, "y": 732.0, "w": 1208.0, "h": 119.0, "line_num": 4, "text": "CIRCLE_SIZE = 20", "delta": -2.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 134.0, "y": 954.0, "w": 800.0, "h": 124.0, "line_num": 5, "text": "DELAY = 0, 01", "delta": 16.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 117.0, "y": 1275.0, "w": 719.0, "h": 112.0, "line_num": 6, "text": "DEF MAIN :", "delta": -17.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 217.0, "y": 1463.0, "w": 2752.0, "h": 130.0, "line_num": 7, "text": "CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)", "delta": 100.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 215.0, "y": 1737.0, "w": 761.0, "h": 117.0, "line_num": 8, "text": "WHILE TRUE", "delta": -2.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 302.0, "y": 1915.0, "w": 2345.0, "h": 169.0, "line_num": 9, "text": "MOUSE-X = CANVAS . GET_MOUSE _ X ()", "delta": 87.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 251.0, "y": 2083.0, "w": 2348.0, "h": 180.0, "line_num": 10, "text": "MOUSE- Y = CANVAS . GET MOUSE_ Y ( )", "delta": -51.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 258.0, "y": 2438.0, "w": 2735.0, "h": 167.0, "line_num": 11, "text": "IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 230.0, "y": 2656.0, "w": 2783.0, "h": 158.0, "line_num": 12, "text": "AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH", "delta": -28.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 178, "prompting_method": "cot-test5", "lm_post_processed_code": "from graphics import Canvas\ncanvas_width = 300\ncanvas_height = 300\ncircle_size = 20\ndelay = 0.01\n\ndef main():\ncanvas = Canvas(canvas_width, canvas_height)\nwhile True:\nmouse_x = canvas.get_mouse_x()\nmouse_y = canvas.get_mouse_y()\nif mouse_x >= 0 and mouse_x <= canvas_width and mouse_y >= 0 and mouse_y <= canvas_height:\n", "lm_post_processed_edit_distance": 124}, {"image_id": 12, "image_height": 4032, "image_width": 3024, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 190.0, "y": 132.0, "w": 2008.0, "h": 145.0, "line_num": 1, "text": "FROM GRAPHIES IMPORT CANVAS"}, {"x": 147.0, "y": 387.0, "w": 1259.0, "h": 120.0, "line_num": 2, "text": "CANVAS WIDTH = 300"}, {"x": 120.0, "y": 558.0, "w": 1364.0, "h": 113.0, "line_num": 3, "text": "CANVAS_HEIGHT = 300"}, {"x": 118.0, "y": 732.0, "w": 1208.0, "h": 119.0, "line_num": 4, "text": "CIRCLE_SIZE = 20"}, {"x": 134.0, "y": 954.0, "w": 800.0, "h": 124.0, "line_num": 5, "text": "DELAY = 0, 01"}, {"x": 117.0, "y": 1275.0, "w": 719.0, "h": 112.0, "line_num": 6, "text": "DEF MAIN :"}, {"x": 217.0, "y": 1463.0, "w": 2752.0, "h": 130.0, "line_num": 7, "text": "CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)"}, {"x": 215.0, "y": 1737.0, "w": 761.0, "h": 117.0, "line_num": 8, "text": "WHILE TRUE"}, {"x": 302.0, "y": 1915.0, "w": 2345.0, "h": 169.0, "line_num": 9, "text": "MOUSE-X = CANVAS . GET_MOUSE _ X ()"}, {"x": 251.0, "y": 2083.0, "w": 2348.0, "h": 180.0, "line_num": 10, "text": "MOUSE- Y = CANVAS . GET MOUSE_ Y ( )"}, {"x": 258.0, "y": 2438.0, "w": 2735.0, "h": 167.0, "line_num": 11, "text": "IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH"}, {"x": 230.0, "y": 2656.0, "w": 2783.0, "h": 158.0, "line_num": 12, "text": "AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "FROM GRAPHIES IMPORT CANVAS\nCANVAS WIDTH = 300\nCANVAS_HEIGHT = 300\nCIRCLE_SIZE = 20\nDELAY = 0, 01\nDEF MAIN :\n    CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)\n    WHILE TRUE\n        MOUSE-X = CANVAS . GET_MOUSE _ X ()\n    MOUSE- Y = CANVAS . GET MOUSE_ Y ( )\n    IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH\n    AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH\n", "ir_algo_output_indented_lines": [{"x": 190.0, "y": 132.0, "w": 2008.0, "h": 145.0, "line_num": 1, "text": "FROM GRAPHIES IMPORT CANVAS", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 147.0, "y": 387.0, "w": 1259.0, "h": 120.0, "line_num": 2, "text": "CANVAS WIDTH = 300", "delta": -43.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 120.0, "y": 558.0, "w": 1364.0, "h": 113.0, "line_num": 3, "text": "CANVAS_HEIGHT = 300", "delta": -27.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 118.0, "y": 732.0, "w": 1208.0, "h": 119.0, "line_num": 4, "text": "CIRCLE_SIZE = 20", "delta": -2.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 134.0, "y": 954.0, "w": 800.0, "h": 124.0, "line_num": 5, "text": "DELAY = 0, 01", "delta": 16.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 117.0, "y": 1275.0, "w": 719.0, "h": 112.0, "line_num": 6, "text": "DEF MAIN :", "delta": -17.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 217.0, "y": 1463.0, "w": 2752.0, "h": 130.0, "line_num": 7, "text": "CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)", "delta": 100.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 215.0, "y": 1737.0, "w": 761.0, "h": 117.0, "line_num": 8, "text": "WHILE TRUE", "delta": -2.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 302.0, "y": 1915.0, "w": 2345.0, "h": 169.0, "line_num": 9, "text": "MOUSE-X = CANVAS . GET_MOUSE _ X ()", "delta": 87.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 251.0, "y": 2083.0, "w": 2348.0, "h": 180.0, "line_num": 10, "text": "MOUSE- Y = CANVAS . GET MOUSE_ Y ( )", "delta": -51.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 258.0, "y": 2438.0, "w": 2735.0, "h": 167.0, "line_num": 11, "text": "IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 230.0, "y": 2656.0, "w": 2783.0, "h": 158.0, "line_num": 12, "text": "AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH", "delta": -28.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 178, "prompting_method": "simple-test2", "lm_post_processed_code": "from graphics import Canvas\ncanvas_width = 300\ncanvas_height = 300\ncircle_size = 20\ndelay = 0.01\n\ndef main():\n    canvas = Canvas(canvas_width, canvas_height)\n    while True:\n        mouse_x = canvas.get_mouse_x()\n        mouse_y = canvas.get_mouse_y()\n        if mouse_x >= 0 and mouse_x <= canvas_width and mouse_y >= 0 and mouse_y <= canvas_height:\n            pass\n", "lm_post_processed_edit_distance": 109}, {"image_id": 12, "image_height": 4032, "image_width": 3024, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 190.0, "y": 132.0, "w": 2008.0, "h": 145.0, "line_num": 1, "text": "FROM GRAPHIES IMPORT CANVAS"}, {"x": 147.0, "y": 387.0, "w": 1259.0, "h": 120.0, "line_num": 2, "text": "CANVAS WIDTH = 300"}, {"x": 120.0, "y": 558.0, "w": 1364.0, "h": 113.0, "line_num": 3, "text": "CANVAS_HEIGHT = 300"}, {"x": 118.0, "y": 732.0, "w": 1208.0, "h": 119.0, "line_num": 4, "text": "CIRCLE_SIZE = 20"}, {"x": 134.0, "y": 954.0, "w": 800.0, "h": 124.0, "line_num": 5, "text": "DELAY = 0, 01"}, {"x": 117.0, "y": 1275.0, "w": 719.0, "h": 112.0, "line_num": 6, "text": "DEF MAIN :"}, {"x": 217.0, "y": 1463.0, "w": 2752.0, "h": 130.0, "line_num": 7, "text": "CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)"}, {"x": 215.0, "y": 1737.0, "w": 761.0, "h": 117.0, "line_num": 8, "text": "WHILE TRUE"}, {"x": 302.0, "y": 1915.0, "w": 2345.0, "h": 169.0, "line_num": 9, "text": "MOUSE-X = CANVAS . GET_MOUSE _ X ()"}, {"x": 251.0, "y": 2083.0, "w": 2348.0, "h": 180.0, "line_num": 10, "text": "MOUSE- Y = CANVAS . GET MOUSE_ Y ( )"}, {"x": 258.0, "y": 2438.0, "w": 2735.0, "h": 167.0, "line_num": 11, "text": "IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH"}, {"x": 230.0, "y": 2656.0, "w": 2783.0, "h": 158.0, "line_num": 12, "text": "AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "FROM GRAPHIES IMPORT CANVAS\nCANVAS WIDTH = 300\nCANVAS_HEIGHT = 300\nCIRCLE_SIZE = 20\nDELAY = 0, 01\nDEF MAIN :\n    CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)\n    WHILE TRUE\n        MOUSE-X = CANVAS . GET_MOUSE _ X ()\n    MOUSE- Y = CANVAS . GET MOUSE_ Y ( )\n    IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH\n    AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH\n", "ir_algo_output_indented_lines": [{"x": 190.0, "y": 132.0, "w": 2008.0, "h": 145.0, "line_num": 1, "text": "FROM GRAPHIES IMPORT CANVAS", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 147.0, "y": 387.0, "w": 1259.0, "h": 120.0, "line_num": 2, "text": "CANVAS WIDTH = 300", "delta": -43.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 120.0, "y": 558.0, "w": 1364.0, "h": 113.0, "line_num": 3, "text": "CANVAS_HEIGHT = 300", "delta": -27.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 118.0, "y": 732.0, "w": 1208.0, "h": 119.0, "line_num": 4, "text": "CIRCLE_SIZE = 20", "delta": -2.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 134.0, "y": 954.0, "w": 800.0, "h": 124.0, "line_num": 5, "text": "DELAY = 0, 01", "delta": 16.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 117.0, "y": 1275.0, "w": 719.0, "h": 112.0, "line_num": 6, "text": "DEF MAIN :", "delta": -17.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 217.0, "y": 1463.0, "w": 2752.0, "h": 130.0, "line_num": 7, "text": "CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)", "delta": 100.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 215.0, "y": 1737.0, "w": 761.0, "h": 117.0, "line_num": 8, "text": "WHILE TRUE", "delta": -2.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 302.0, "y": 1915.0, "w": 2345.0, "h": 169.0, "line_num": 9, "text": "MOUSE-X = CANVAS . GET_MOUSE _ X ()", "delta": 87.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 251.0, "y": 2083.0, "w": 2348.0, "h": 180.0, "line_num": 10, "text": "MOUSE- Y = CANVAS . GET MOUSE_ Y ( )", "delta": -51.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 258.0, "y": 2438.0, "w": 2735.0, "h": 167.0, "line_num": 11, "text": "IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 230.0, "y": 2656.0, "w": 2783.0, "h": 158.0, "line_num": 12, "text": "AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH", "delta": -28.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 178, "prompting_method": "simple-test3", "lm_post_processed_code": "from graphics import Canvas\ncanvas_width = 300\ncanvas_height = 300\ncircle_size = 20\ndelay = 0.01\n\ndef main():\n    canvas = Canvas(canvas_width, canvas_height)\n    while True:\n        mouse_x = canvas.get_mouse_x()\n        mouse_y = canvas.get_mouse_y()\n        if mouse_x >= 0 and mouse_x <= canvas_width and mouse_y >= 0 and mouse_y <= canvas_height:\n            pass\n", "lm_post_processed_edit_distance": 109}, {"image_id": 13, "image_height": 1600, "image_width": 1200, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 41.0, "y": 21.0, "w": 420.0, "h": 33.0, "line_num": 1, "text": "# 1 karel Problem - Karel home"}, {"x": 69.0, "y": 78.0, "w": 453.0, "h": 31.0, "line_num": 2, "text": "from Karel. Stanfordkarel import *"}, {"x": 68.0, "y": 135.0, "w": 937.0, "h": 38.0, "line_num": 3, "text": "# This program defines a main function which should make karel"}, {"x": 66.0, "y": 170.0, "w": 719.0, "h": 28.0, "line_num": 4, "text": "# move to the beeper, pick it up and return home"}, {"x": 75.0, "y": 219.0, "w": 192.0, "h": 28.0, "line_num": 5, "text": "def main () :"}, {"x": 136.0, "y": 255.0, "w": 128.0, "h": 24.0, "line_num": 6, "text": "get_Out ()"}, {"x": 140.0, "y": 285.0, "w": 140.0, "h": 25.0, "line_num": 7, "text": "pick_food ()"}, {"x": 140.0, "y": 314.0, "w": 229.0, "h": 28.0, "line_num": 8, "text": "get back_ home ()"}, {"x": 67.0, "y": 374.0, "w": 835.0, "h": 32.0, "line_num": 9, "text": "# pre : Karel facing east, at the corner of starting position"}, {"x": 66.0, "y": 404.0, "w": 943.0, "h": 30.0, "line_num": 10, "text": "# post: karel facing east, outside the home, at the position of beeper"}, {"x": 67.0, "y": 444.0, "w": 229.0, "h": 32.0, "line_num": 11, "text": "def get_out () :"}, {"x": 144.0, "y": 484.0, "w": 158.0, "h": 26.0, "line_num": 12, "text": "turn_right ( )"}, {"x": 149.0, "y": 518.0, "w": 92.0, "h": 22.0, "line_num": 13, "text": "move ()"}, {"x": 152.0, "y": 543.0, "w": 158.0, "h": 25.0, "line_num": 14, "text": "turn_left ()"}, {"x": 153.0, "y": 577.0, "w": 93.0, "h": 22.0, "line_num": 15, "text": "move ()"}, {"x": 155.0, "y": 605.0, "w": 98.0, "h": 21.0, "line_num": 16, "text": "move ()"}, {"x": 155.0, "y": 632.0, "w": 102.0, "h": 23.0, "line_num": 17, "text": "move ()"}, {"x": 63.0, "y": 690.0, "w": 755.0, "h": 31.0, "line_num": 18, "text": "# post: Karel facing west, at the position of beeper"}, {"x": 65.0, "y": 730.0, "w": 244.0, "h": 31.0, "line_num": 19, "text": "def pick-food ():"}, {"x": 129.0, "y": 770.0, "w": 184.0, "h": 28.0, "line_num": 20, "text": "pick_beeper ()"}, {"x": 132.0, "y": 805.0, "w": 189.0, "h": 24.0, "line_num": 21, "text": "turn- around ()"}, {"x": 56.0, "y": 862.0, "w": 880.0, "h": 32.0, "line_num": 22, "text": "# post: Karel facing east, at the corner of starting position"}, {"x": 63.0, "y": 906.0, "w": 323.0, "h": 33.0, "line_num": 23, "text": "def get_ back_home () :"}, {"x": 138.0, "y": 951.0, "w": 98.0, "h": 22.0, "line_num": 24, "text": "move ()"}, {"x": 137.0, "y": 992.0, "w": 106.0, "h": 22.0, "line_num": 25, "text": "Move ()"}, {"x": 136.0, "y": 1028.0, "w": 101.0, "h": 23.0, "line_num": 26, "text": "move ()"}, {"x": 137.0, "y": 1057.0, "w": 187.0, "h": 26.0, "line_num": 27, "text": "turn right ()"}, {"x": 136.0, "y": 1097.0, "w": 107.0, "h": 24.0, "line_num": 28, "text": "move ()"}, {"x": 141.0, "y": 1127.0, "w": 185.0, "h": 23.0, "line_num": 29, "text": "turn right ()"}, {"x": 42.0, "y": 1174.0, "w": 295.0, "h": 33.0, "line_num": 30, "text": "def turn right () ;"}, {"x": 116.0, "y": 1212.0, "w": 271.0, "h": 31.0, "line_num": 31, "text": "for i in range (3) :"}, {"x": 173.0, "y": 1246.0, "w": 161.0, "h": 26.0, "line_num": 32, "text": "turn-left ()"}, {"x": 48.0, "y": 1313.0, "w": 61.0, "h": 28.0, "line_num": 33, "text": "def"}, {"x": 116.0, "y": 1311.0, "w": 250.0, "h": 27.0, "line_num": 34, "text": "turn-around () :"}, {"x": 124.0, "y": 1348.0, "w": 170.0, "h": 27.0, "line_num": 35, "text": "turn_left ()"}, {"x": 130.0, "y": 1389.0, "w": 164.0, "h": 29.0, "line_num": 36, "text": "turn_kft ()"}, {"x": 52.0, "y": 1458.0, "w": 406.0, "h": 39.0, "line_num": 37, "text": "if_ name_ == '-main -:"}, {"x": 99.0, "y": 1493.0, "w": 121.0, "h": 30.0, "line_num": 38, "text": "main ()"}], "ir_algo_name": "none", "ir_algo_output_code": "# 1 karel Problem - Karel home\nfrom Karel. Stanfordkarel import *\n# This program defines a main function which should make karel\n# move to the beeper, pick it up and return home\ndef main () :\nget_Out ()\npick_food ()\nget back_ home ()\n# pre : Karel facing east, at the corner of starting position\n# post: karel facing east, outside the home, at the position of beeper\ndef get_out () :\nturn_right ( )\nmove ()\nturn_left ()\nmove ()\nmove ()\nmove ()\n# post: Karel facing west, at the position of beeper\ndef pick-food ():\npick_beeper ()\nturn- around ()\n# post: Karel facing east, at the corner of starting position\ndef get_ back_home () :\nmove ()\nMove ()\nmove ()\nturn right ()\nmove ()\nturn right ()\ndef turn right () ;\nfor i in range (3) :\nturn-left ()\ndef\nturn-around () :\nturn_left ()\nturn_kft ()\nif_ name_ == '-main -:\nmain ()", "ir_algo_output_edit_distance": 170, "prompting_method": "none", "lm_post_processed_code": "# 1 karel Problem - Karel home\nfrom Karel. Stanfordkarel import *\n# This program defines a main function which should make karel\n# move to the beeper, pick it up and return home\ndef main () :\nget_Out ()\npick_food ()\nget back_ home ()\n# pre : Karel facing east, at the corner of starting position\n# post: karel facing east, outside the home, at the position of beeper\ndef get_out () :\nturn_right ( )\nmove ()\nturn_left ()\nmove ()\nmove ()\nmove ()\n# post: Karel facing west, at the position of beeper\ndef pick-food ():\npick_beeper ()\nturn- around ()\n# post: Karel facing east, at the corner of starting position\ndef get_ back_home () :\nmove ()\nMove ()\nmove ()\nturn right ()\nmove ()\nturn right ()\ndef turn right () ;\nfor i in range (3) :\nturn-left ()\ndef\nturn-around () :\nturn_left ()\nturn_kft ()\nif_ name_ == '-main -:\nmain ()", "lm_post_processed_edit_distance": 170}, {"image_id": 13, "image_height": 1600, "image_width": 1200, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 41.0, "y": 21.0, "w": 420.0, "h": 33.0, "line_num": 1, "text": "# 1 karel Problem - Karel home"}, {"x": 69.0, "y": 78.0, "w": 453.0, "h": 31.0, "line_num": 2, "text": "from Karel. Stanfordkarel import *"}, {"x": 68.0, "y": 135.0, "w": 937.0, "h": 38.0, "line_num": 3, "text": "# This program defines a main function which should make karel"}, {"x": 66.0, "y": 170.0, "w": 719.0, "h": 28.0, "line_num": 4, "text": "# move to the beeper, pick it up and return home"}, {"x": 75.0, "y": 219.0, "w": 192.0, "h": 28.0, "line_num": 5, "text": "def main () :"}, {"x": 136.0, "y": 255.0, "w": 128.0, "h": 24.0, "line_num": 6, "text": "get_Out ()"}, {"x": 140.0, "y": 285.0, "w": 140.0, "h": 25.0, "line_num": 7, "text": "pick_food ()"}, {"x": 140.0, "y": 314.0, "w": 229.0, "h": 28.0, "line_num": 8, "text": "get back_ home ()"}, {"x": 67.0, "y": 374.0, "w": 835.0, "h": 32.0, "line_num": 9, "text": "# pre : Karel facing east, at the corner of starting position"}, {"x": 66.0, "y": 404.0, "w": 943.0, "h": 30.0, "line_num": 10, "text": "# post: karel facing east, outside the home, at the position of beeper"}, {"x": 67.0, "y": 444.0, "w": 229.0, "h": 32.0, "line_num": 11, "text": "def get_out () :"}, {"x": 144.0, "y": 484.0, "w": 158.0, "h": 26.0, "line_num": 12, "text": "turn_right ( )"}, {"x": 149.0, "y": 518.0, "w": 92.0, "h": 22.0, "line_num": 13, "text": "move ()"}, {"x": 152.0, "y": 543.0, "w": 158.0, "h": 25.0, "line_num": 14, "text": "turn_left ()"}, {"x": 153.0, "y": 577.0, "w": 93.0, "h": 22.0, "line_num": 15, "text": "move ()"}, {"x": 155.0, "y": 605.0, "w": 98.0, "h": 21.0, "line_num": 16, "text": "move ()"}, {"x": 155.0, "y": 632.0, "w": 102.0, "h": 23.0, "line_num": 17, "text": "move ()"}, {"x": 63.0, "y": 690.0, "w": 755.0, "h": 31.0, "line_num": 18, "text": "# post: Karel facing west, at the position of beeper"}, {"x": 65.0, "y": 730.0, "w": 244.0, "h": 31.0, "line_num": 19, "text": "def pick-food ():"}, {"x": 129.0, "y": 770.0, "w": 184.0, "h": 28.0, "line_num": 20, "text": "pick_beeper ()"}, {"x": 132.0, "y": 805.0, "w": 189.0, "h": 24.0, "line_num": 21, "text": "turn- around ()"}, {"x": 56.0, "y": 862.0, "w": 880.0, "h": 32.0, "line_num": 22, "text": "# post: Karel facing east, at the corner of starting position"}, {"x": 63.0, "y": 906.0, "w": 323.0, "h": 33.0, "line_num": 23, "text": "def get_ back_home () :"}, {"x": 138.0, "y": 951.0, "w": 98.0, "h": 22.0, "line_num": 24, "text": "move ()"}, {"x": 137.0, "y": 992.0, "w": 106.0, "h": 22.0, "line_num": 25, "text": "Move ()"}, {"x": 136.0, "y": 1028.0, "w": 101.0, "h": 23.0, "line_num": 26, "text": "move ()"}, {"x": 137.0, "y": 1057.0, "w": 187.0, "h": 26.0, "line_num": 27, "text": "turn right ()"}, {"x": 136.0, "y": 1097.0, "w": 107.0, "h": 24.0, "line_num": 28, "text": "move ()"}, {"x": 141.0, "y": 1127.0, "w": 185.0, "h": 23.0, "line_num": 29, "text": "turn right ()"}, {"x": 42.0, "y": 1174.0, "w": 295.0, "h": 33.0, "line_num": 30, "text": "def turn right () ;"}, {"x": 116.0, "y": 1212.0, "w": 271.0, "h": 31.0, "line_num": 31, "text": "for i in range (3) :"}, {"x": 173.0, "y": 1246.0, "w": 161.0, "h": 26.0, "line_num": 32, "text": "turn-left ()"}, {"x": 48.0, "y": 1313.0, "w": 61.0, "h": 28.0, "line_num": 33, "text": "def"}, {"x": 116.0, "y": 1311.0, "w": 250.0, "h": 27.0, "line_num": 34, "text": "turn-around () :"}, {"x": 124.0, "y": 1348.0, "w": 170.0, "h": 27.0, "line_num": 35, "text": "turn_left ()"}, {"x": 130.0, "y": 1389.0, "w": 164.0, "h": 29.0, "line_num": 36, "text": "turn_kft ()"}, {"x": 52.0, "y": 1458.0, "w": 406.0, "h": 39.0, "line_num": 37, "text": "if_ name_ == '-main -:"}, {"x": 99.0, "y": 1493.0, "w": 121.0, "h": 30.0, "line_num": 38, "text": "main ()"}], "ir_algo_name": "none", "ir_algo_output_code": "# 1 karel Problem - Karel home\nfrom Karel. Stanfordkarel import *\n# This program defines a main function which should make karel\n# move to the beeper, pick it up and return home\ndef main () :\nget_Out ()\npick_food ()\nget back_ home ()\n# pre : Karel facing east, at the corner of starting position\n# post: karel facing east, outside the home, at the position of beeper\ndef get_out () :\nturn_right ( )\nmove ()\nturn_left ()\nmove ()\nmove ()\nmove ()\n# post: Karel facing west, at the position of beeper\ndef pick-food ():\npick_beeper ()\nturn- around ()\n# post: Karel facing east, at the corner of starting position\ndef get_ back_home () :\nmove ()\nMove ()\nmove ()\nturn right ()\nmove ()\nturn right ()\ndef turn right () ;\nfor i in range (3) :\nturn-left ()\ndef\nturn-around () :\nturn_left ()\nturn_kft ()\nif_ name_ == '-main -:\nmain ()", "ir_algo_output_edit_distance": 170, "prompting_method": "cot-test1", "lm_post_processed_code": "# 1 karel Problem - Karel home\nfrom karel.stanfordkarel import *\n# This program defines a main function which should make karel\n# move to the beeper, pick it up and return home\n\ndef main():\nget_out()\npick_food()\nget_back_home()\n# pre : Karel facing east, at the corner of starting position\n# post: karel facing east, outside the home, at the position of beeper\n\ndef get_out():\nturn_right()\nmove()\nturn_left()\nmove()\nmove()\nmove()\n# post: Karel facing west, at the position of beeper\n\ndef pick_food():\npick_beeper()\nturn_around()\n# post: Karel facing east, at the corner of starting position\n\ndef get_back_home():\nmove()\nmove()\nmove()\nturn_right()\nmove()\nturn_right()\n\ndef turn_right():\nfor i in range(3):\nturn_left()\n\ndef turn_around():\nturn_left()\nturn_left()\nif __name__ == '__main__':\nmain()\n", "lm_post_processed_edit_distance": 102}, {"image_id": 13, "image_height": 1600, "image_width": 1200, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 41.0, "y": 21.0, "w": 420.0, "h": 33.0, "line_num": 1, "text": "# 1 karel Problem - Karel home"}, {"x": 69.0, "y": 78.0, "w": 453.0, "h": 31.0, "line_num": 2, "text": "from Karel. Stanfordkarel import *"}, {"x": 68.0, "y": 135.0, "w": 937.0, "h": 38.0, "line_num": 3, "text": "# This program defines a main function which should make karel"}, {"x": 66.0, "y": 170.0, "w": 719.0, "h": 28.0, "line_num": 4, "text": "# move to the beeper, pick it up and return home"}, {"x": 75.0, "y": 219.0, "w": 192.0, "h": 28.0, "line_num": 5, "text": "def main () :"}, {"x": 136.0, "y": 255.0, "w": 128.0, "h": 24.0, "line_num": 6, "text": "get_Out ()"}, {"x": 140.0, "y": 285.0, "w": 140.0, "h": 25.0, "line_num": 7, "text": "pick_food ()"}, {"x": 140.0, "y": 314.0, "w": 229.0, "h": 28.0, "line_num": 8, "text": "get back_ home ()"}, {"x": 67.0, "y": 374.0, "w": 835.0, "h": 32.0, "line_num": 9, "text": "# pre : Karel facing east, at the corner of starting position"}, {"x": 66.0, "y": 404.0, "w": 943.0, "h": 30.0, "line_num": 10, "text": "# post: karel facing east, outside the home, at the position of beeper"}, {"x": 67.0, "y": 444.0, "w": 229.0, "h": 32.0, "line_num": 11, "text": "def get_out () :"}, {"x": 144.0, "y": 484.0, "w": 158.0, "h": 26.0, "line_num": 12, "text": "turn_right ( )"}, {"x": 149.0, "y": 518.0, "w": 92.0, "h": 22.0, "line_num": 13, "text": "move ()"}, {"x": 152.0, "y": 543.0, "w": 158.0, "h": 25.0, "line_num": 14, "text": "turn_left ()"}, {"x": 153.0, "y": 577.0, "w": 93.0, "h": 22.0, "line_num": 15, "text": "move ()"}, {"x": 155.0, "y": 605.0, "w": 98.0, "h": 21.0, "line_num": 16, "text": "move ()"}, {"x": 155.0, "y": 632.0, "w": 102.0, "h": 23.0, "line_num": 17, "text": "move ()"}, {"x": 63.0, "y": 690.0, "w": 755.0, "h": 31.0, "line_num": 18, "text": "# post: Karel facing west, at the position of beeper"}, {"x": 65.0, "y": 730.0, "w": 244.0, "h": 31.0, "line_num": 19, "text": "def pick-food ():"}, {"x": 129.0, "y": 770.0, "w": 184.0, "h": 28.0, "line_num": 20, "text": "pick_beeper ()"}, {"x": 132.0, "y": 805.0, "w": 189.0, "h": 24.0, "line_num": 21, "text": "turn- around ()"}, {"x": 56.0, "y": 862.0, "w": 880.0, "h": 32.0, "line_num": 22, "text": "# post: Karel facing east, at the corner of starting position"}, {"x": 63.0, "y": 906.0, "w": 323.0, "h": 33.0, "line_num": 23, "text": "def get_ back_home () :"}, {"x": 138.0, "y": 951.0, "w": 98.0, "h": 22.0, "line_num": 24, "text": "move ()"}, {"x": 137.0, "y": 992.0, "w": 106.0, "h": 22.0, "line_num": 25, "text": "Move ()"}, {"x": 136.0, "y": 1028.0, "w": 101.0, "h": 23.0, "line_num": 26, "text": "move ()"}, {"x": 137.0, "y": 1057.0, "w": 187.0, "h": 26.0, "line_num": 27, "text": "turn right ()"}, {"x": 136.0, "y": 1097.0, "w": 107.0, "h": 24.0, "line_num": 28, "text": "move ()"}, {"x": 141.0, "y": 1127.0, "w": 185.0, "h": 23.0, "line_num": 29, "text": "turn right ()"}, {"x": 42.0, "y": 1174.0, "w": 295.0, "h": 33.0, "line_num": 30, "text": "def turn right () ;"}, {"x": 116.0, "y": 1212.0, "w": 271.0, "h": 31.0, "line_num": 31, "text": "for i in range (3) :"}, {"x": 173.0, "y": 1246.0, "w": 161.0, "h": 26.0, "line_num": 32, "text": "turn-left ()"}, {"x": 48.0, "y": 1313.0, "w": 61.0, "h": 28.0, "line_num": 33, "text": "def"}, {"x": 116.0, "y": 1311.0, "w": 250.0, "h": 27.0, "line_num": 34, "text": "turn-around () :"}, {"x": 124.0, "y": 1348.0, "w": 170.0, "h": 27.0, "line_num": 35, "text": "turn_left ()"}, {"x": 130.0, "y": 1389.0, "w": 164.0, "h": 29.0, "line_num": 36, "text": "turn_kft ()"}, {"x": 52.0, "y": 1458.0, "w": 406.0, "h": 39.0, "line_num": 37, "text": "if_ name_ == '-main -:"}, {"x": 99.0, "y": 1493.0, "w": 121.0, "h": 30.0, "line_num": 38, "text": "main ()"}], "ir_algo_name": "none", "ir_algo_output_code": "# 1 karel Problem - Karel home\nfrom Karel. Stanfordkarel import *\n# This program defines a main function which should make karel\n# move to the beeper, pick it up and return home\ndef main () :\nget_Out ()\npick_food ()\nget back_ home ()\n# pre : Karel facing east, at the corner of starting position\n# post: karel facing east, outside the home, at the position of beeper\ndef get_out () :\nturn_right ( )\nmove ()\nturn_left ()\nmove ()\nmove ()\nmove ()\n# post: Karel facing west, at the position of beeper\ndef pick-food ():\npick_beeper ()\nturn- around ()\n# post: Karel facing east, at the corner of starting position\ndef get_ back_home () :\nmove ()\nMove ()\nmove ()\nturn right ()\nmove ()\nturn right ()\ndef turn right () ;\nfor i in range (3) :\nturn-left ()\ndef\nturn-around () :\nturn_left ()\nturn_kft ()\nif_ name_ == '-main -:\nmain ()", "ir_algo_output_edit_distance": 170, "prompting_method": "cot-test5", "lm_post_processed_code": "# 1 karel Problem - Karel home\nfrom karel.stanfordkarel import *\n# This program defines a main function which should make karel\n# move to the beeper, pick it up and return home\n\ndef main():\nget_out()\npick_food()\nget_back_home()\n# pre : Karel facing east, at the corner of starting position\n# post: karel facing east, outside the home, at the position of beeper\n\ndef get_out():\nturn_right()\nmove()\nturn_left()\nmove()\nmove()\nmove()\n# post: Karel facing west, at the position of beeper\n\ndef pick_food():\npick_beeper()\nturn_around()\n# post: Karel facing east, at the corner of starting position\n\ndef get_back_home():\nmove()\nmove()\nmove()\nturn_right()\nmove()\nturn_right()\n\ndef turn_right():\nfor i in range(3):\nturn_left()\n\ndef turn_around():\nturn_left()\nturn_left()\nif __name__ == '__main__':\nmain()\n", "lm_post_processed_edit_distance": 102}, {"image_id": 13, "image_height": 1600, "image_width": 1200, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 41.0, "y": 21.0, "w": 420.0, "h": 33.0, "line_num": 1, "text": "# 1 karel Problem - Karel home"}, {"x": 69.0, "y": 78.0, "w": 453.0, "h": 31.0, "line_num": 2, "text": "from Karel. Stanfordkarel import *"}, {"x": 68.0, "y": 135.0, "w": 937.0, "h": 38.0, "line_num": 3, "text": "# This program defines a main function which should make karel"}, {"x": 66.0, "y": 170.0, "w": 719.0, "h": 28.0, "line_num": 4, "text": "# move to the beeper, pick it up and return home"}, {"x": 75.0, "y": 219.0, "w": 192.0, "h": 28.0, "line_num": 5, "text": "def main () :"}, {"x": 136.0, "y": 255.0, "w": 128.0, "h": 24.0, "line_num": 6, "text": "get_Out ()"}, {"x": 140.0, "y": 285.0, "w": 140.0, "h": 25.0, "line_num": 7, "text": "pick_food ()"}, {"x": 140.0, "y": 314.0, "w": 229.0, "h": 28.0, "line_num": 8, "text": "get back_ home ()"}, {"x": 67.0, "y": 374.0, "w": 835.0, "h": 32.0, "line_num": 9, "text": "# pre : Karel facing east, at the corner of starting position"}, {"x": 66.0, "y": 404.0, "w": 943.0, "h": 30.0, "line_num": 10, "text": "# post: karel facing east, outside the home, at the position of beeper"}, {"x": 67.0, "y": 444.0, "w": 229.0, "h": 32.0, "line_num": 11, "text": "def get_out () :"}, {"x": 144.0, "y": 484.0, "w": 158.0, "h": 26.0, "line_num": 12, "text": "turn_right ( )"}, {"x": 149.0, "y": 518.0, "w": 92.0, "h": 22.0, "line_num": 13, "text": "move ()"}, {"x": 152.0, "y": 543.0, "w": 158.0, "h": 25.0, "line_num": 14, "text": "turn_left ()"}, {"x": 153.0, "y": 577.0, "w": 93.0, "h": 22.0, "line_num": 15, "text": "move ()"}, {"x": 155.0, "y": 605.0, "w": 98.0, "h": 21.0, "line_num": 16, "text": "move ()"}, {"x": 155.0, "y": 632.0, "w": 102.0, "h": 23.0, "line_num": 17, "text": "move ()"}, {"x": 63.0, "y": 690.0, "w": 755.0, "h": 31.0, "line_num": 18, "text": "# post: Karel facing west, at the position of beeper"}, {"x": 65.0, "y": 730.0, "w": 244.0, "h": 31.0, "line_num": 19, "text": "def pick-food ():"}, {"x": 129.0, "y": 770.0, "w": 184.0, "h": 28.0, "line_num": 20, "text": "pick_beeper ()"}, {"x": 132.0, "y": 805.0, "w": 189.0, "h": 24.0, "line_num": 21, "text": "turn- around ()"}, {"x": 56.0, "y": 862.0, "w": 880.0, "h": 32.0, "line_num": 22, "text": "# post: Karel facing east, at the corner of starting position"}, {"x": 63.0, "y": 906.0, "w": 323.0, "h": 33.0, "line_num": 23, "text": "def get_ back_home () :"}, {"x": 138.0, "y": 951.0, "w": 98.0, "h": 22.0, "line_num": 24, "text": "move ()"}, {"x": 137.0, "y": 992.0, "w": 106.0, "h": 22.0, "line_num": 25, "text": "Move ()"}, {"x": 136.0, "y": 1028.0, "w": 101.0, "h": 23.0, "line_num": 26, "text": "move ()"}, {"x": 137.0, "y": 1057.0, "w": 187.0, "h": 26.0, "line_num": 27, "text": "turn right ()"}, {"x": 136.0, "y": 1097.0, "w": 107.0, "h": 24.0, "line_num": 28, "text": "move ()"}, {"x": 141.0, "y": 1127.0, "w": 185.0, "h": 23.0, "line_num": 29, "text": "turn right ()"}, {"x": 42.0, "y": 1174.0, "w": 295.0, "h": 33.0, "line_num": 30, "text": "def turn right () ;"}, {"x": 116.0, "y": 1212.0, "w": 271.0, "h": 31.0, "line_num": 31, "text": "for i in range (3) :"}, {"x": 173.0, "y": 1246.0, "w": 161.0, "h": 26.0, "line_num": 32, "text": "turn-left ()"}, {"x": 48.0, "y": 1313.0, "w": 61.0, "h": 28.0, "line_num": 33, "text": "def"}, {"x": 116.0, "y": 1311.0, "w": 250.0, "h": 27.0, "line_num": 34, "text": "turn-around () :"}, {"x": 124.0, "y": 1348.0, "w": 170.0, "h": 27.0, "line_num": 35, "text": "turn_left ()"}, {"x": 130.0, "y": 1389.0, "w": 164.0, "h": 29.0, "line_num": 36, "text": "turn_kft ()"}, {"x": 52.0, "y": 1458.0, "w": 406.0, "h": 39.0, "line_num": 37, "text": "if_ name_ == '-main -:"}, {"x": 99.0, "y": 1493.0, "w": 121.0, "h": 30.0, "line_num": 38, "text": "main ()"}], "ir_algo_name": "none", "ir_algo_output_code": "# 1 karel Problem - Karel home\nfrom Karel. Stanfordkarel import *\n# This program defines a main function which should make karel\n# move to the beeper, pick it up and return home\ndef main () :\nget_Out ()\npick_food ()\nget back_ home ()\n# pre : Karel facing east, at the corner of starting position\n# post: karel facing east, outside the home, at the position of beeper\ndef get_out () :\nturn_right ( )\nmove ()\nturn_left ()\nmove ()\nmove ()\nmove ()\n# post: Karel facing west, at the position of beeper\ndef pick-food ():\npick_beeper ()\nturn- around ()\n# post: Karel facing east, at the corner of starting position\ndef get_ back_home () :\nmove ()\nMove ()\nmove ()\nturn right ()\nmove ()\nturn right ()\ndef turn right () ;\nfor i in range (3) :\nturn-left ()\ndef\nturn-around () :\nturn_left ()\nturn_kft ()\nif_ name_ == '-main -:\nmain ()", "ir_algo_output_edit_distance": 170, "prompting_method": "simple-test2", "lm_post_processed_code": "# 1 karel Problem - Karel home\nfrom karel.stanfordkarel import *\n# This program defines a main function which should make karel\n# move to the beeper, pick it up and return home\n\ndef main():\n    get_out()\n    pick_food()\n    get_back_home()\n# pre : Karel facing east, at the corner of starting position\n# post: karel facing east, outside the home, at the position of beeper\n\ndef get_out():\n    turn_right()\n    move()\n    turn_left()\n    move()\n    move()\n    move()\n# post: Karel facing west, at the position of beeper\n\ndef pick_food():\n    pick_beeper()\n    turn_around()\n# post: Karel facing east, at the corner of starting position\n\ndef get_back_home():\n    move()\n    move()\n    move()\n    turn_right()\n    move()\n    turn_right()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\n\ndef turn_around():\n    turn_left()\n    turn_left()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 10}, {"image_id": 13, "image_height": 1600, "image_width": 1200, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 41.0, "y": 21.0, "w": 420.0, "h": 33.0, "line_num": 1, "text": "# 1 karel Problem - Karel home"}, {"x": 69.0, "y": 78.0, "w": 453.0, "h": 31.0, "line_num": 2, "text": "from Karel. Stanfordkarel import *"}, {"x": 68.0, "y": 135.0, "w": 937.0, "h": 38.0, "line_num": 3, "text": "# This program defines a main function which should make karel"}, {"x": 66.0, "y": 170.0, "w": 719.0, "h": 28.0, "line_num": 4, "text": "# move to the beeper, pick it up and return home"}, {"x": 75.0, "y": 219.0, "w": 192.0, "h": 28.0, "line_num": 5, "text": "def main () :"}, {"x": 136.0, "y": 255.0, "w": 128.0, "h": 24.0, "line_num": 6, "text": "get_Out ()"}, {"x": 140.0, "y": 285.0, "w": 140.0, "h": 25.0, "line_num": 7, "text": "pick_food ()"}, {"x": 140.0, "y": 314.0, "w": 229.0, "h": 28.0, "line_num": 8, "text": "get back_ home ()"}, {"x": 67.0, "y": 374.0, "w": 835.0, "h": 32.0, "line_num": 9, "text": "# pre : Karel facing east, at the corner of starting position"}, {"x": 66.0, "y": 404.0, "w": 943.0, "h": 30.0, "line_num": 10, "text": "# post: karel facing east, outside the home, at the position of beeper"}, {"x": 67.0, "y": 444.0, "w": 229.0, "h": 32.0, "line_num": 11, "text": "def get_out () :"}, {"x": 144.0, "y": 484.0, "w": 158.0, "h": 26.0, "line_num": 12, "text": "turn_right ( )"}, {"x": 149.0, "y": 518.0, "w": 92.0, "h": 22.0, "line_num": 13, "text": "move ()"}, {"x": 152.0, "y": 543.0, "w": 158.0, "h": 25.0, "line_num": 14, "text": "turn_left ()"}, {"x": 153.0, "y": 577.0, "w": 93.0, "h": 22.0, "line_num": 15, "text": "move ()"}, {"x": 155.0, "y": 605.0, "w": 98.0, "h": 21.0, "line_num": 16, "text": "move ()"}, {"x": 155.0, "y": 632.0, "w": 102.0, "h": 23.0, "line_num": 17, "text": "move ()"}, {"x": 63.0, "y": 690.0, "w": 755.0, "h": 31.0, "line_num": 18, "text": "# post: Karel facing west, at the position of beeper"}, {"x": 65.0, "y": 730.0, "w": 244.0, "h": 31.0, "line_num": 19, "text": "def pick-food ():"}, {"x": 129.0, "y": 770.0, "w": 184.0, "h": 28.0, "line_num": 20, "text": "pick_beeper ()"}, {"x": 132.0, "y": 805.0, "w": 189.0, "h": 24.0, "line_num": 21, "text": "turn- around ()"}, {"x": 56.0, "y": 862.0, "w": 880.0, "h": 32.0, "line_num": 22, "text": "# post: Karel facing east, at the corner of starting position"}, {"x": 63.0, "y": 906.0, "w": 323.0, "h": 33.0, "line_num": 23, "text": "def get_ back_home () :"}, {"x": 138.0, "y": 951.0, "w": 98.0, "h": 22.0, "line_num": 24, "text": "move ()"}, {"x": 137.0, "y": 992.0, "w": 106.0, "h": 22.0, "line_num": 25, "text": "Move ()"}, {"x": 136.0, "y": 1028.0, "w": 101.0, "h": 23.0, "line_num": 26, "text": "move ()"}, {"x": 137.0, "y": 1057.0, "w": 187.0, "h": 26.0, "line_num": 27, "text": "turn right ()"}, {"x": 136.0, "y": 1097.0, "w": 107.0, "h": 24.0, "line_num": 28, "text": "move ()"}, {"x": 141.0, "y": 1127.0, "w": 185.0, "h": 23.0, "line_num": 29, "text": "turn right ()"}, {"x": 42.0, "y": 1174.0, "w": 295.0, "h": 33.0, "line_num": 30, "text": "def turn right () ;"}, {"x": 116.0, "y": 1212.0, "w": 271.0, "h": 31.0, "line_num": 31, "text": "for i in range (3) :"}, {"x": 173.0, "y": 1246.0, "w": 161.0, "h": 26.0, "line_num": 32, "text": "turn-left ()"}, {"x": 48.0, "y": 1313.0, "w": 61.0, "h": 28.0, "line_num": 33, "text": "def"}, {"x": 116.0, "y": 1311.0, "w": 250.0, "h": 27.0, "line_num": 34, "text": "turn-around () :"}, {"x": 124.0, "y": 1348.0, "w": 170.0, "h": 27.0, "line_num": 35, "text": "turn_left ()"}, {"x": 130.0, "y": 1389.0, "w": 164.0, "h": 29.0, "line_num": 36, "text": "turn_kft ()"}, {"x": 52.0, "y": 1458.0, "w": 406.0, "h": 39.0, "line_num": 37, "text": "if_ name_ == '-main -:"}, {"x": 99.0, "y": 1493.0, "w": 121.0, "h": 30.0, "line_num": 38, "text": "main ()"}], "ir_algo_name": "none", "ir_algo_output_code": "# 1 karel Problem - Karel home\nfrom Karel. Stanfordkarel import *\n# This program defines a main function which should make karel\n# move to the beeper, pick it up and return home\ndef main () :\nget_Out ()\npick_food ()\nget back_ home ()\n# pre : Karel facing east, at the corner of starting position\n# post: karel facing east, outside the home, at the position of beeper\ndef get_out () :\nturn_right ( )\nmove ()\nturn_left ()\nmove ()\nmove ()\nmove ()\n# post: Karel facing west, at the position of beeper\ndef pick-food ():\npick_beeper ()\nturn- around ()\n# post: Karel facing east, at the corner of starting position\ndef get_ back_home () :\nmove ()\nMove ()\nmove ()\nturn right ()\nmove ()\nturn right ()\ndef turn right () ;\nfor i in range (3) :\nturn-left ()\ndef\nturn-around () :\nturn_left ()\nturn_kft ()\nif_ name_ == '-main -:\nmain ()", "ir_algo_output_edit_distance": 170, "prompting_method": "simple-test3", "lm_post_processed_code": "# 1 karel Problem - Karel home\nfrom karel.stanfordkarel import *\n# This program defines a main function which should make karel\n# move to the beeper, pick it up and return home\n\ndef main():\n    get_out()\n    pick_food()\n    get_back_home()\n# pre : Karel facing east, at the corner of starting position\n# post: karel facing east, outside the home, at the position of beeper\n\ndef get_out():\n    turn_right()\n    move()\n    turn_left()\n    move()\n    move()\n    move()\n# post: Karel facing west, at the position of beeper\n\ndef pick_food():\n    pick_beeper()\n    turn_around()\n# post: Karel facing east, at the corner of starting position\n\ndef get_back_home():\n    move()\n    move()\n    move()\n    turn_right()\n    move()\n    turn_right()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\n\ndef turn_around():\n    turn_left()\n    turn_left()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 10}, {"image_id": 13, "image_height": 1600, "image_width": 1200, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 41.0, "y": 21.0, "w": 420.0, "h": 33.0, "line_num": 1, "text": "# 1 karel Problem - Karel home"}, {"x": 69.0, "y": 78.0, "w": 453.0, "h": 31.0, "line_num": 2, "text": "from Karel. Stanfordkarel import *"}, {"x": 68.0, "y": 135.0, "w": 937.0, "h": 38.0, "line_num": 3, "text": "# This program defines a main function which should make karel"}, {"x": 66.0, "y": 170.0, "w": 719.0, "h": 28.0, "line_num": 4, "text": "# move to the beeper, pick it up and return home"}, {"x": 75.0, "y": 219.0, "w": 192.0, "h": 28.0, "line_num": 5, "text": "def main () :"}, {"x": 136.0, "y": 255.0, "w": 128.0, "h": 24.0, "line_num": 6, "text": "get_Out ()"}, {"x": 140.0, "y": 285.0, "w": 140.0, "h": 25.0, "line_num": 7, "text": "pick_food ()"}, {"x": 140.0, "y": 314.0, "w": 229.0, "h": 28.0, "line_num": 8, "text": "get back_ home ()"}, {"x": 67.0, "y": 374.0, "w": 835.0, "h": 32.0, "line_num": 9, "text": "# pre : Karel facing east, at the corner of starting position"}, {"x": 66.0, "y": 404.0, "w": 943.0, "h": 30.0, "line_num": 10, "text": "# post: karel facing east, outside the home, at the position of beeper"}, {"x": 67.0, "y": 444.0, "w": 229.0, "h": 32.0, "line_num": 11, "text": "def get_out () :"}, {"x": 144.0, "y": 484.0, "w": 158.0, "h": 26.0, "line_num": 12, "text": "turn_right ( )"}, {"x": 149.0, "y": 518.0, "w": 92.0, "h": 22.0, "line_num": 13, "text": "move ()"}, {"x": 152.0, "y": 543.0, "w": 158.0, "h": 25.0, "line_num": 14, "text": "turn_left ()"}, {"x": 153.0, "y": 577.0, "w": 93.0, "h": 22.0, "line_num": 15, "text": "move ()"}, {"x": 155.0, "y": 605.0, "w": 98.0, "h": 21.0, "line_num": 16, "text": "move ()"}, {"x": 155.0, "y": 632.0, "w": 102.0, "h": 23.0, "line_num": 17, "text": "move ()"}, {"x": 63.0, "y": 690.0, "w": 755.0, "h": 31.0, "line_num": 18, "text": "# post: Karel facing west, at the position of beeper"}, {"x": 65.0, "y": 730.0, "w": 244.0, "h": 31.0, "line_num": 19, "text": "def pick-food ():"}, {"x": 129.0, "y": 770.0, "w": 184.0, "h": 28.0, "line_num": 20, "text": "pick_beeper ()"}, {"x": 132.0, "y": 805.0, "w": 189.0, "h": 24.0, "line_num": 21, "text": "turn- around ()"}, {"x": 56.0, "y": 862.0, "w": 880.0, "h": 32.0, "line_num": 22, "text": "# post: Karel facing east, at the corner of starting position"}, {"x": 63.0, "y": 906.0, "w": 323.0, "h": 33.0, "line_num": 23, "text": "def get_ back_home () :"}, {"x": 138.0, "y": 951.0, "w": 98.0, "h": 22.0, "line_num": 24, "text": "move ()"}, {"x": 137.0, "y": 992.0, "w": 106.0, "h": 22.0, "line_num": 25, "text": "Move ()"}, {"x": 136.0, "y": 1028.0, "w": 101.0, "h": 23.0, "line_num": 26, "text": "move ()"}, {"x": 137.0, "y": 1057.0, "w": 187.0, "h": 26.0, "line_num": 27, "text": "turn right ()"}, {"x": 136.0, "y": 1097.0, "w": 107.0, "h": 24.0, "line_num": 28, "text": "move ()"}, {"x": 141.0, "y": 1127.0, "w": 185.0, "h": 23.0, "line_num": 29, "text": "turn right ()"}, {"x": 42.0, "y": 1174.0, "w": 295.0, "h": 33.0, "line_num": 30, "text": "def turn right () ;"}, {"x": 116.0, "y": 1212.0, "w": 271.0, "h": 31.0, "line_num": 31, "text": "for i in range (3) :"}, {"x": 173.0, "y": 1246.0, "w": 161.0, "h": 26.0, "line_num": 32, "text": "turn-left ()"}, {"x": 48.0, "y": 1313.0, "w": 61.0, "h": 28.0, "line_num": 33, "text": "def"}, {"x": 116.0, "y": 1311.0, "w": 250.0, "h": 27.0, "line_num": 34, "text": "turn-around () :"}, {"x": 124.0, "y": 1348.0, "w": 170.0, "h": 27.0, "line_num": 35, "text": "turn_left ()"}, {"x": 130.0, "y": 1389.0, "w": 164.0, "h": 29.0, "line_num": 36, "text": "turn_kft ()"}, {"x": 52.0, "y": 1458.0, "w": 406.0, "h": 39.0, "line_num": 37, "text": "if_ name_ == '-main -:"}, {"x": 99.0, "y": 1493.0, "w": 121.0, "h": 30.0, "line_num": 38, "text": "main ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 41.723684210526315, "ir_algo_output_code": "# 1 karel Problem - Karel home\nfrom Karel. Stanfordkarel import *\n# This program defines a main function which should make karel\n# move to the beeper, pick it up and return home\ndef main () :\n    get_Out ()\n    pick_food ()\n    get back_ home ()\n# pre : Karel facing east, at the corner of starting position\n# post: karel facing east, outside the home, at the position of beeper\ndef get_out () :\n    turn_right ( )\n    move ()\n    turn_left ()\n    move ()\n    move ()\n    move ()\n# post: Karel facing west, at the position of beeper\ndef pick-food ():\n    pick_beeper ()\n    turn- around ()\n# post: Karel facing east, at the corner of starting position\ndef get_ back_home () :\n    move ()\n    Move ()\n    move ()\n    turn right ()\n    move ()\n    turn right ()\ndef turn right () ;\n    for i in range (3) :\n    turn-left ()\ndef\n    turn-around () :\n    turn_left ()\n    turn_kft ()\nif_ name_ == '-main -:\nmain ()\n", "ir_algo_output_indented_lines": [{"x": 41.0, "y": 21.0, "w": 420.0, "h": 33.0, "line_num": 1, "text": "# 1 karel Problem - Karel home", "cluster_label": 1, "indentation": 0}, {"x": 69.0, "y": 78.0, "w": 453.0, "h": 31.0, "line_num": 2, "text": "from Karel. Stanfordkarel import *", "cluster_label": 1, "indentation": 0}, {"x": 68.0, "y": 135.0, "w": 937.0, "h": 38.0, "line_num": 3, "text": "# This program defines a main function which should make karel", "cluster_label": 1, "indentation": 0}, {"x": 66.0, "y": 170.0, "w": 719.0, "h": 28.0, "line_num": 4, "text": "# move to the beeper, pick it up and return home", "cluster_label": 1, "indentation": 0}, {"x": 75.0, "y": 219.0, "w": 192.0, "h": 28.0, "line_num": 5, "text": "def main () :", "cluster_label": 1, "indentation": 0}, {"x": 136.0, "y": 255.0, "w": 128.0, "h": 24.0, "line_num": 6, "text": "get_Out ()", "cluster_label": 0, "indentation": 1}, {"x": 140.0, "y": 285.0, "w": 140.0, "h": 25.0, "line_num": 7, "text": "pick_food ()", "cluster_label": 0, "indentation": 1}, {"x": 140.0, "y": 314.0, "w": 229.0, "h": 28.0, "line_num": 8, "text": "get back_ home ()", "cluster_label": 0, "indentation": 1}, {"x": 67.0, "y": 374.0, "w": 835.0, "h": 32.0, "line_num": 9, "text": "# pre : Karel facing east, at the corner of starting position", "cluster_label": 1, "indentation": 0}, {"x": 66.0, "y": 404.0, "w": 943.0, "h": 30.0, "line_num": 10, "text": "# post: karel facing east, outside the home, at the position of beeper", "cluster_label": 1, "indentation": 0}, {"x": 67.0, "y": 444.0, "w": 229.0, "h": 32.0, "line_num": 11, "text": "def get_out () :", "cluster_label": 1, "indentation": 0}, {"x": 144.0, "y": 484.0, "w": 158.0, "h": 26.0, "line_num": 12, "text": "turn_right ( )", "cluster_label": 0, "indentation": 1}, {"x": 149.0, "y": 518.0, "w": 92.0, "h": 22.0, "line_num": 13, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 152.0, "y": 543.0, "w": 158.0, "h": 25.0, "line_num": 14, "text": "turn_left ()", "cluster_label": 0, "indentation": 1}, {"x": 153.0, "y": 577.0, "w": 93.0, "h": 22.0, "line_num": 15, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 155.0, "y": 605.0, "w": 98.0, "h": 21.0, "line_num": 16, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 155.0, "y": 632.0, "w": 102.0, "h": 23.0, "line_num": 17, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 63.0, "y": 690.0, "w": 755.0, "h": 31.0, "line_num": 18, "text": "# post: Karel facing west, at the position of beeper", "cluster_label": 1, "indentation": 0}, {"x": 65.0, "y": 730.0, "w": 244.0, "h": 31.0, "line_num": 19, "text": "def pick-food ():", "cluster_label": 1, "indentation": 0}, {"x": 129.0, "y": 770.0, "w": 184.0, "h": 28.0, "line_num": 20, "text": "pick_beeper ()", "cluster_label": 0, "indentation": 1}, {"x": 132.0, "y": 805.0, "w": 189.0, "h": 24.0, "line_num": 21, "text": "turn- around ()", "cluster_label": 0, "indentation": 1}, {"x": 56.0, "y": 862.0, "w": 880.0, "h": 32.0, "line_num": 22, "text": "# post: Karel facing east, at the corner of starting position", "cluster_label": 1, "indentation": 0}, {"x": 63.0, "y": 906.0, "w": 323.0, "h": 33.0, "line_num": 23, "text": "def get_ back_home () :", "cluster_label": 1, "indentation": 0}, {"x": 138.0, "y": 951.0, "w": 98.0, "h": 22.0, "line_num": 24, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 137.0, "y": 992.0, "w": 106.0, "h": 22.0, "line_num": 25, "text": "Move ()", "cluster_label": 0, "indentation": 1}, {"x": 136.0, "y": 1028.0, "w": 101.0, "h": 23.0, "line_num": 26, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 137.0, "y": 1057.0, "w": 187.0, "h": 26.0, "line_num": 27, "text": "turn right ()", "cluster_label": 0, "indentation": 1}, {"x": 136.0, "y": 1097.0, "w": 107.0, "h": 24.0, "line_num": 28, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 141.0, "y": 1127.0, "w": 185.0, "h": 23.0, "line_num": 29, "text": "turn right ()", "cluster_label": 0, "indentation": 1}, {"x": 42.0, "y": 1174.0, "w": 295.0, "h": 33.0, "line_num": 30, "text": "def turn right () ;", "cluster_label": 1, "indentation": 0}, {"x": 116.0, "y": 1212.0, "w": 271.0, "h": 31.0, "line_num": 31, "text": "for i in range (3) :", "cluster_label": 0, "indentation": 1}, {"x": 173.0, "y": 1246.0, "w": 161.0, "h": 26.0, "line_num": 32, "text": "turn-left ()", "cluster_label": 0, "indentation": 1}, {"x": 48.0, "y": 1313.0, "w": 61.0, "h": 28.0, "line_num": 33, "text": "def", "cluster_label": 1, "indentation": 0}, {"x": 116.0, "y": 1311.0, "w": 250.0, "h": 27.0, "line_num": 34, "text": "turn-around () :", "cluster_label": 0, "indentation": 1}, {"x": 124.0, "y": 1348.0, "w": 170.0, "h": 27.0, "line_num": 35, "text": "turn_left ()", "cluster_label": 0, "indentation": 1}, {"x": 130.0, "y": 1389.0, "w": 164.0, "h": 29.0, "line_num": 36, "text": "turn_kft ()", "cluster_label": 0, "indentation": 1}, {"x": 52.0, "y": 1458.0, "w": 406.0, "h": 39.0, "line_num": 37, "text": "if_ name_ == '-main -:", "cluster_label": 1, "indentation": 0}, {"x": 99.0, "y": 1493.0, "w": 121.0, "h": 30.0, "line_num": 38, "text": "main ()", "cluster_label": 1, "indentation": 0}], "ir_algo_output_edit_distance": 89, "prompting_method": "none", "lm_post_processed_code": "# 1 karel Problem - Karel home\nfrom Karel. Stanfordkarel import *\n# This program defines a main function which should make karel\n# move to the beeper, pick it up and return home\ndef main () :\n    get_Out ()\n    pick_food ()\n    get back_ home ()\n# pre : Karel facing east, at the corner of starting position\n# post: karel facing east, outside the home, at the position of beeper\ndef get_out () :\n    turn_right ( )\n    move ()\n    turn_left ()\n    move ()\n    move ()\n    move ()\n# post: Karel facing west, at the position of beeper\ndef pick-food ():\n    pick_beeper ()\n    turn- around ()\n# post: Karel facing east, at the corner of starting position\ndef get_ back_home () :\n    move ()\n    Move ()\n    move ()\n    turn right ()\n    move ()\n    turn right ()\ndef turn right () ;\n    for i in range (3) :\n    turn-left ()\ndef\n    turn-around () :\n    turn_left ()\n    turn_kft ()\nif_ name_ == '-main -:\nmain ()\n", "lm_post_processed_edit_distance": 89}, {"image_id": 13, "image_height": 1600, "image_width": 1200, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 41.0, "y": 21.0, "w": 420.0, "h": 33.0, "line_num": 1, "text": "# 1 karel Problem - Karel home"}, {"x": 69.0, "y": 78.0, "w": 453.0, "h": 31.0, "line_num": 2, "text": "from Karel. Stanfordkarel import *"}, {"x": 68.0, "y": 135.0, "w": 937.0, "h": 38.0, "line_num": 3, "text": "# This program defines a main function which should make karel"}, {"x": 66.0, "y": 170.0, "w": 719.0, "h": 28.0, "line_num": 4, "text": "# move to the beeper, pick it up and return home"}, {"x": 75.0, "y": 219.0, "w": 192.0, "h": 28.0, "line_num": 5, "text": "def main () :"}, {"x": 136.0, "y": 255.0, "w": 128.0, "h": 24.0, "line_num": 6, "text": "get_Out ()"}, {"x": 140.0, "y": 285.0, "w": 140.0, "h": 25.0, "line_num": 7, "text": "pick_food ()"}, {"x": 140.0, "y": 314.0, "w": 229.0, "h": 28.0, "line_num": 8, "text": "get back_ home ()"}, {"x": 67.0, "y": 374.0, "w": 835.0, "h": 32.0, "line_num": 9, "text": "# pre : Karel facing east, at the corner of starting position"}, {"x": 66.0, "y": 404.0, "w": 943.0, "h": 30.0, "line_num": 10, "text": "# post: karel facing east, outside the home, at the position of beeper"}, {"x": 67.0, "y": 444.0, "w": 229.0, "h": 32.0, "line_num": 11, "text": "def get_out () :"}, {"x": 144.0, "y": 484.0, "w": 158.0, "h": 26.0, "line_num": 12, "text": "turn_right ( )"}, {"x": 149.0, "y": 518.0, "w": 92.0, "h": 22.0, "line_num": 13, "text": "move ()"}, {"x": 152.0, "y": 543.0, "w": 158.0, "h": 25.0, "line_num": 14, "text": "turn_left ()"}, {"x": 153.0, "y": 577.0, "w": 93.0, "h": 22.0, "line_num": 15, "text": "move ()"}, {"x": 155.0, "y": 605.0, "w": 98.0, "h": 21.0, "line_num": 16, "text": "move ()"}, {"x": 155.0, "y": 632.0, "w": 102.0, "h": 23.0, "line_num": 17, "text": "move ()"}, {"x": 63.0, "y": 690.0, "w": 755.0, "h": 31.0, "line_num": 18, "text": "# post: Karel facing west, at the position of beeper"}, {"x": 65.0, "y": 730.0, "w": 244.0, "h": 31.0, "line_num": 19, "text": "def pick-food ():"}, {"x": 129.0, "y": 770.0, "w": 184.0, "h": 28.0, "line_num": 20, "text": "pick_beeper ()"}, {"x": 132.0, "y": 805.0, "w": 189.0, "h": 24.0, "line_num": 21, "text": "turn- around ()"}, {"x": 56.0, "y": 862.0, "w": 880.0, "h": 32.0, "line_num": 22, "text": "# post: Karel facing east, at the corner of starting position"}, {"x": 63.0, "y": 906.0, "w": 323.0, "h": 33.0, "line_num": 23, "text": "def get_ back_home () :"}, {"x": 138.0, "y": 951.0, "w": 98.0, "h": 22.0, "line_num": 24, "text": "move ()"}, {"x": 137.0, "y": 992.0, "w": 106.0, "h": 22.0, "line_num": 25, "text": "Move ()"}, {"x": 136.0, "y": 1028.0, "w": 101.0, "h": 23.0, "line_num": 26, "text": "move ()"}, {"x": 137.0, "y": 1057.0, "w": 187.0, "h": 26.0, "line_num": 27, "text": "turn right ()"}, {"x": 136.0, "y": 1097.0, "w": 107.0, "h": 24.0, "line_num": 28, "text": "move ()"}, {"x": 141.0, "y": 1127.0, "w": 185.0, "h": 23.0, "line_num": 29, "text": "turn right ()"}, {"x": 42.0, "y": 1174.0, "w": 295.0, "h": 33.0, "line_num": 30, "text": "def turn right () ;"}, {"x": 116.0, "y": 1212.0, "w": 271.0, "h": 31.0, "line_num": 31, "text": "for i in range (3) :"}, {"x": 173.0, "y": 1246.0, "w": 161.0, "h": 26.0, "line_num": 32, "text": "turn-left ()"}, {"x": 48.0, "y": 1313.0, "w": 61.0, "h": 28.0, "line_num": 33, "text": "def"}, {"x": 116.0, "y": 1311.0, "w": 250.0, "h": 27.0, "line_num": 34, "text": "turn-around () :"}, {"x": 124.0, "y": 1348.0, "w": 170.0, "h": 27.0, "line_num": 35, "text": "turn_left ()"}, {"x": 130.0, "y": 1389.0, "w": 164.0, "h": 29.0, "line_num": 36, "text": "turn_kft ()"}, {"x": 52.0, "y": 1458.0, "w": 406.0, "h": 39.0, "line_num": 37, "text": "if_ name_ == '-main -:"}, {"x": 99.0, "y": 1493.0, "w": 121.0, "h": 30.0, "line_num": 38, "text": "main ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 41.723684210526315, "ir_algo_output_code": "# 1 karel Problem - Karel home\nfrom Karel. Stanfordkarel import *\n# This program defines a main function which should make karel\n# move to the beeper, pick it up and return home\ndef main () :\n    get_Out ()\n    pick_food ()\n    get back_ home ()\n# pre : Karel facing east, at the corner of starting position\n# post: karel facing east, outside the home, at the position of beeper\ndef get_out () :\n    turn_right ( )\n    move ()\n    turn_left ()\n    move ()\n    move ()\n    move ()\n# post: Karel facing west, at the position of beeper\ndef pick-food ():\n    pick_beeper ()\n    turn- around ()\n# post: Karel facing east, at the corner of starting position\ndef get_ back_home () :\n    move ()\n    Move ()\n    move ()\n    turn right ()\n    move ()\n    turn right ()\ndef turn right () ;\n    for i in range (3) :\n    turn-left ()\ndef\n    turn-around () :\n    turn_left ()\n    turn_kft ()\nif_ name_ == '-main -:\nmain ()\n", "ir_algo_output_indented_lines": [{"x": 41.0, "y": 21.0, "w": 420.0, "h": 33.0, "line_num": 1, "text": "# 1 karel Problem - Karel home", "cluster_label": 1, "indentation": 0}, {"x": 69.0, "y": 78.0, "w": 453.0, "h": 31.0, "line_num": 2, "text": "from Karel. Stanfordkarel import *", "cluster_label": 1, "indentation": 0}, {"x": 68.0, "y": 135.0, "w": 937.0, "h": 38.0, "line_num": 3, "text": "# This program defines a main function which should make karel", "cluster_label": 1, "indentation": 0}, {"x": 66.0, "y": 170.0, "w": 719.0, "h": 28.0, "line_num": 4, "text": "# move to the beeper, pick it up and return home", "cluster_label": 1, "indentation": 0}, {"x": 75.0, "y": 219.0, "w": 192.0, "h": 28.0, "line_num": 5, "text": "def main () :", "cluster_label": 1, "indentation": 0}, {"x": 136.0, "y": 255.0, "w": 128.0, "h": 24.0, "line_num": 6, "text": "get_Out ()", "cluster_label": 0, "indentation": 1}, {"x": 140.0, "y": 285.0, "w": 140.0, "h": 25.0, "line_num": 7, "text": "pick_food ()", "cluster_label": 0, "indentation": 1}, {"x": 140.0, "y": 314.0, "w": 229.0, "h": 28.0, "line_num": 8, "text": "get back_ home ()", "cluster_label": 0, "indentation": 1}, {"x": 67.0, "y": 374.0, "w": 835.0, "h": 32.0, "line_num": 9, "text": "# pre : Karel facing east, at the corner of starting position", "cluster_label": 1, "indentation": 0}, {"x": 66.0, "y": 404.0, "w": 943.0, "h": 30.0, "line_num": 10, "text": "# post: karel facing east, outside the home, at the position of beeper", "cluster_label": 1, "indentation": 0}, {"x": 67.0, "y": 444.0, "w": 229.0, "h": 32.0, "line_num": 11, "text": "def get_out () :", "cluster_label": 1, "indentation": 0}, {"x": 144.0, "y": 484.0, "w": 158.0, "h": 26.0, "line_num": 12, "text": "turn_right ( )", "cluster_label": 0, "indentation": 1}, {"x": 149.0, "y": 518.0, "w": 92.0, "h": 22.0, "line_num": 13, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 152.0, "y": 543.0, "w": 158.0, "h": 25.0, "line_num": 14, "text": "turn_left ()", "cluster_label": 0, "indentation": 1}, {"x": 153.0, "y": 577.0, "w": 93.0, "h": 22.0, "line_num": 15, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 155.0, "y": 605.0, "w": 98.0, "h": 21.0, "line_num": 16, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 155.0, "y": 632.0, "w": 102.0, "h": 23.0, "line_num": 17, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 63.0, "y": 690.0, "w": 755.0, "h": 31.0, "line_num": 18, "text": "# post: Karel facing west, at the position of beeper", "cluster_label": 1, "indentation": 0}, {"x": 65.0, "y": 730.0, "w": 244.0, "h": 31.0, "line_num": 19, "text": "def pick-food ():", "cluster_label": 1, "indentation": 0}, {"x": 129.0, "y": 770.0, "w": 184.0, "h": 28.0, "line_num": 20, "text": "pick_beeper ()", "cluster_label": 0, "indentation": 1}, {"x": 132.0, "y": 805.0, "w": 189.0, "h": 24.0, "line_num": 21, "text": "turn- around ()", "cluster_label": 0, "indentation": 1}, {"x": 56.0, "y": 862.0, "w": 880.0, "h": 32.0, "line_num": 22, "text": "# post: Karel facing east, at the corner of starting position", "cluster_label": 1, "indentation": 0}, {"x": 63.0, "y": 906.0, "w": 323.0, "h": 33.0, "line_num": 23, "text": "def get_ back_home () :", "cluster_label": 1, "indentation": 0}, {"x": 138.0, "y": 951.0, "w": 98.0, "h": 22.0, "line_num": 24, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 137.0, "y": 992.0, "w": 106.0, "h": 22.0, "line_num": 25, "text": "Move ()", "cluster_label": 0, "indentation": 1}, {"x": 136.0, "y": 1028.0, "w": 101.0, "h": 23.0, "line_num": 26, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 137.0, "y": 1057.0, "w": 187.0, "h": 26.0, "line_num": 27, "text": "turn right ()", "cluster_label": 0, "indentation": 1}, {"x": 136.0, "y": 1097.0, "w": 107.0, "h": 24.0, "line_num": 28, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 141.0, "y": 1127.0, "w": 185.0, "h": 23.0, "line_num": 29, "text": "turn right ()", "cluster_label": 0, "indentation": 1}, {"x": 42.0, "y": 1174.0, "w": 295.0, "h": 33.0, "line_num": 30, "text": "def turn right () ;", "cluster_label": 1, "indentation": 0}, {"x": 116.0, "y": 1212.0, "w": 271.0, "h": 31.0, "line_num": 31, "text": "for i in range (3) :", "cluster_label": 0, "indentation": 1}, {"x": 173.0, "y": 1246.0, "w": 161.0, "h": 26.0, "line_num": 32, "text": "turn-left ()", "cluster_label": 0, "indentation": 1}, {"x": 48.0, "y": 1313.0, "w": 61.0, "h": 28.0, "line_num": 33, "text": "def", "cluster_label": 1, "indentation": 0}, {"x": 116.0, "y": 1311.0, "w": 250.0, "h": 27.0, "line_num": 34, "text": "turn-around () :", "cluster_label": 0, "indentation": 1}, {"x": 124.0, "y": 1348.0, "w": 170.0, "h": 27.0, "line_num": 35, "text": "turn_left ()", "cluster_label": 0, "indentation": 1}, {"x": 130.0, "y": 1389.0, "w": 164.0, "h": 29.0, "line_num": 36, "text": "turn_kft ()", "cluster_label": 0, "indentation": 1}, {"x": 52.0, "y": 1458.0, "w": 406.0, "h": 39.0, "line_num": 37, "text": "if_ name_ == '-main -:", "cluster_label": 1, "indentation": 0}, {"x": 99.0, "y": 1493.0, "w": 121.0, "h": 30.0, "line_num": 38, "text": "main ()", "cluster_label": 1, "indentation": 0}], "ir_algo_output_edit_distance": 89, "prompting_method": "cot-test1", "lm_post_processed_code": "# 1 karel Problem - Karel home\nfrom karel.stanfordkarel import *\n# This program defines a main function which should make karel\n# move to the beeper, pick it up and return home\n\ndef main():\n    get_out()\n    pick_food()\n    get_back_home()\n# pre : Karel facing east, at the corner of starting position\n# post: karel facing east, outside the home, at the position of beeper\n\ndef get_out():\n    turn_right()\n    move()\n    turn_left()\n    move()\n    move()\n    move()\n# post: Karel facing west, at the position of beeper\n\ndef pick_food():\n    pick_beeper()\n    turn_around()\n# post: Karel facing east, at the corner of starting position\n\ndef get_back_home():\n    move()\n    move()\n    move()\n    turn_right()\n    move()\n    turn_right()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\n\ndef turn_around():\n    turn_left()\n    turn_left()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 10}, {"image_id": 13, "image_height": 1600, "image_width": 1200, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 41.0, "y": 21.0, "w": 420.0, "h": 33.0, "line_num": 1, "text": "# 1 karel Problem - Karel home"}, {"x": 69.0, "y": 78.0, "w": 453.0, "h": 31.0, "line_num": 2, "text": "from Karel. Stanfordkarel import *"}, {"x": 68.0, "y": 135.0, "w": 937.0, "h": 38.0, "line_num": 3, "text": "# This program defines a main function which should make karel"}, {"x": 66.0, "y": 170.0, "w": 719.0, "h": 28.0, "line_num": 4, "text": "# move to the beeper, pick it up and return home"}, {"x": 75.0, "y": 219.0, "w": 192.0, "h": 28.0, "line_num": 5, "text": "def main () :"}, {"x": 136.0, "y": 255.0, "w": 128.0, "h": 24.0, "line_num": 6, "text": "get_Out ()"}, {"x": 140.0, "y": 285.0, "w": 140.0, "h": 25.0, "line_num": 7, "text": "pick_food ()"}, {"x": 140.0, "y": 314.0, "w": 229.0, "h": 28.0, "line_num": 8, "text": "get back_ home ()"}, {"x": 67.0, "y": 374.0, "w": 835.0, "h": 32.0, "line_num": 9, "text": "# pre : Karel facing east, at the corner of starting position"}, {"x": 66.0, "y": 404.0, "w": 943.0, "h": 30.0, "line_num": 10, "text": "# post: karel facing east, outside the home, at the position of beeper"}, {"x": 67.0, "y": 444.0, "w": 229.0, "h": 32.0, "line_num": 11, "text": "def get_out () :"}, {"x": 144.0, "y": 484.0, "w": 158.0, "h": 26.0, "line_num": 12, "text": "turn_right ( )"}, {"x": 149.0, "y": 518.0, "w": 92.0, "h": 22.0, "line_num": 13, "text": "move ()"}, {"x": 152.0, "y": 543.0, "w": 158.0, "h": 25.0, "line_num": 14, "text": "turn_left ()"}, {"x": 153.0, "y": 577.0, "w": 93.0, "h": 22.0, "line_num": 15, "text": "move ()"}, {"x": 155.0, "y": 605.0, "w": 98.0, "h": 21.0, "line_num": 16, "text": "move ()"}, {"x": 155.0, "y": 632.0, "w": 102.0, "h": 23.0, "line_num": 17, "text": "move ()"}, {"x": 63.0, "y": 690.0, "w": 755.0, "h": 31.0, "line_num": 18, "text": "# post: Karel facing west, at the position of beeper"}, {"x": 65.0, "y": 730.0, "w": 244.0, "h": 31.0, "line_num": 19, "text": "def pick-food ():"}, {"x": 129.0, "y": 770.0, "w": 184.0, "h": 28.0, "line_num": 20, "text": "pick_beeper ()"}, {"x": 132.0, "y": 805.0, "w": 189.0, "h": 24.0, "line_num": 21, "text": "turn- around ()"}, {"x": 56.0, "y": 862.0, "w": 880.0, "h": 32.0, "line_num": 22, "text": "# post: Karel facing east, at the corner of starting position"}, {"x": 63.0, "y": 906.0, "w": 323.0, "h": 33.0, "line_num": 23, "text": "def get_ back_home () :"}, {"x": 138.0, "y": 951.0, "w": 98.0, "h": 22.0, "line_num": 24, "text": "move ()"}, {"x": 137.0, "y": 992.0, "w": 106.0, "h": 22.0, "line_num": 25, "text": "Move ()"}, {"x": 136.0, "y": 1028.0, "w": 101.0, "h": 23.0, "line_num": 26, "text": "move ()"}, {"x": 137.0, "y": 1057.0, "w": 187.0, "h": 26.0, "line_num": 27, "text": "turn right ()"}, {"x": 136.0, "y": 1097.0, "w": 107.0, "h": 24.0, "line_num": 28, "text": "move ()"}, {"x": 141.0, "y": 1127.0, "w": 185.0, "h": 23.0, "line_num": 29, "text": "turn right ()"}, {"x": 42.0, "y": 1174.0, "w": 295.0, "h": 33.0, "line_num": 30, "text": "def turn right () ;"}, {"x": 116.0, "y": 1212.0, "w": 271.0, "h": 31.0, "line_num": 31, "text": "for i in range (3) :"}, {"x": 173.0, "y": 1246.0, "w": 161.0, "h": 26.0, "line_num": 32, "text": "turn-left ()"}, {"x": 48.0, "y": 1313.0, "w": 61.0, "h": 28.0, "line_num": 33, "text": "def"}, {"x": 116.0, "y": 1311.0, "w": 250.0, "h": 27.0, "line_num": 34, "text": "turn-around () :"}, {"x": 124.0, "y": 1348.0, "w": 170.0, "h": 27.0, "line_num": 35, "text": "turn_left ()"}, {"x": 130.0, "y": 1389.0, "w": 164.0, "h": 29.0, "line_num": 36, "text": "turn_kft ()"}, {"x": 52.0, "y": 1458.0, "w": 406.0, "h": 39.0, "line_num": 37, "text": "if_ name_ == '-main -:"}, {"x": 99.0, "y": 1493.0, "w": 121.0, "h": 30.0, "line_num": 38, "text": "main ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 41.723684210526315, "ir_algo_output_code": "# 1 karel Problem - Karel home\nfrom Karel. Stanfordkarel import *\n# This program defines a main function which should make karel\n# move to the beeper, pick it up and return home\ndef main () :\n    get_Out ()\n    pick_food ()\n    get back_ home ()\n# pre : Karel facing east, at the corner of starting position\n# post: karel facing east, outside the home, at the position of beeper\ndef get_out () :\n    turn_right ( )\n    move ()\n    turn_left ()\n    move ()\n    move ()\n    move ()\n# post: Karel facing west, at the position of beeper\ndef pick-food ():\n    pick_beeper ()\n    turn- around ()\n# post: Karel facing east, at the corner of starting position\ndef get_ back_home () :\n    move ()\n    Move ()\n    move ()\n    turn right ()\n    move ()\n    turn right ()\ndef turn right () ;\n    for i in range (3) :\n    turn-left ()\ndef\n    turn-around () :\n    turn_left ()\n    turn_kft ()\nif_ name_ == '-main -:\nmain ()\n", "ir_algo_output_indented_lines": [{"x": 41.0, "y": 21.0, "w": 420.0, "h": 33.0, "line_num": 1, "text": "# 1 karel Problem - Karel home", "cluster_label": 1, "indentation": 0}, {"x": 69.0, "y": 78.0, "w": 453.0, "h": 31.0, "line_num": 2, "text": "from Karel. Stanfordkarel import *", "cluster_label": 1, "indentation": 0}, {"x": 68.0, "y": 135.0, "w": 937.0, "h": 38.0, "line_num": 3, "text": "# This program defines a main function which should make karel", "cluster_label": 1, "indentation": 0}, {"x": 66.0, "y": 170.0, "w": 719.0, "h": 28.0, "line_num": 4, "text": "# move to the beeper, pick it up and return home", "cluster_label": 1, "indentation": 0}, {"x": 75.0, "y": 219.0, "w": 192.0, "h": 28.0, "line_num": 5, "text": "def main () :", "cluster_label": 1, "indentation": 0}, {"x": 136.0, "y": 255.0, "w": 128.0, "h": 24.0, "line_num": 6, "text": "get_Out ()", "cluster_label": 0, "indentation": 1}, {"x": 140.0, "y": 285.0, "w": 140.0, "h": 25.0, "line_num": 7, "text": "pick_food ()", "cluster_label": 0, "indentation": 1}, {"x": 140.0, "y": 314.0, "w": 229.0, "h": 28.0, "line_num": 8, "text": "get back_ home ()", "cluster_label": 0, "indentation": 1}, {"x": 67.0, "y": 374.0, "w": 835.0, "h": 32.0, "line_num": 9, "text": "# pre : Karel facing east, at the corner of starting position", "cluster_label": 1, "indentation": 0}, {"x": 66.0, "y": 404.0, "w": 943.0, "h": 30.0, "line_num": 10, "text": "# post: karel facing east, outside the home, at the position of beeper", "cluster_label": 1, "indentation": 0}, {"x": 67.0, "y": 444.0, "w": 229.0, "h": 32.0, "line_num": 11, "text": "def get_out () :", "cluster_label": 1, "indentation": 0}, {"x": 144.0, "y": 484.0, "w": 158.0, "h": 26.0, "line_num": 12, "text": "turn_right ( )", "cluster_label": 0, "indentation": 1}, {"x": 149.0, "y": 518.0, "w": 92.0, "h": 22.0, "line_num": 13, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 152.0, "y": 543.0, "w": 158.0, "h": 25.0, "line_num": 14, "text": "turn_left ()", "cluster_label": 0, "indentation": 1}, {"x": 153.0, "y": 577.0, "w": 93.0, "h": 22.0, "line_num": 15, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 155.0, "y": 605.0, "w": 98.0, "h": 21.0, "line_num": 16, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 155.0, "y": 632.0, "w": 102.0, "h": 23.0, "line_num": 17, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 63.0, "y": 690.0, "w": 755.0, "h": 31.0, "line_num": 18, "text": "# post: Karel facing west, at the position of beeper", "cluster_label": 1, "indentation": 0}, {"x": 65.0, "y": 730.0, "w": 244.0, "h": 31.0, "line_num": 19, "text": "def pick-food ():", "cluster_label": 1, "indentation": 0}, {"x": 129.0, "y": 770.0, "w": 184.0, "h": 28.0, "line_num": 20, "text": "pick_beeper ()", "cluster_label": 0, "indentation": 1}, {"x": 132.0, "y": 805.0, "w": 189.0, "h": 24.0, "line_num": 21, "text": "turn- around ()", "cluster_label": 0, "indentation": 1}, {"x": 56.0, "y": 862.0, "w": 880.0, "h": 32.0, "line_num": 22, "text": "# post: Karel facing east, at the corner of starting position", "cluster_label": 1, "indentation": 0}, {"x": 63.0, "y": 906.0, "w": 323.0, "h": 33.0, "line_num": 23, "text": "def get_ back_home () :", "cluster_label": 1, "indentation": 0}, {"x": 138.0, "y": 951.0, "w": 98.0, "h": 22.0, "line_num": 24, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 137.0, "y": 992.0, "w": 106.0, "h": 22.0, "line_num": 25, "text": "Move ()", "cluster_label": 0, "indentation": 1}, {"x": 136.0, "y": 1028.0, "w": 101.0, "h": 23.0, "line_num": 26, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 137.0, "y": 1057.0, "w": 187.0, "h": 26.0, "line_num": 27, "text": "turn right ()", "cluster_label": 0, "indentation": 1}, {"x": 136.0, "y": 1097.0, "w": 107.0, "h": 24.0, "line_num": 28, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 141.0, "y": 1127.0, "w": 185.0, "h": 23.0, "line_num": 29, "text": "turn right ()", "cluster_label": 0, "indentation": 1}, {"x": 42.0, "y": 1174.0, "w": 295.0, "h": 33.0, "line_num": 30, "text": "def turn right () ;", "cluster_label": 1, "indentation": 0}, {"x": 116.0, "y": 1212.0, "w": 271.0, "h": 31.0, "line_num": 31, "text": "for i in range (3) :", "cluster_label": 0, "indentation": 1}, {"x": 173.0, "y": 1246.0, "w": 161.0, "h": 26.0, "line_num": 32, "text": "turn-left ()", "cluster_label": 0, "indentation": 1}, {"x": 48.0, "y": 1313.0, "w": 61.0, "h": 28.0, "line_num": 33, "text": "def", "cluster_label": 1, "indentation": 0}, {"x": 116.0, "y": 1311.0, "w": 250.0, "h": 27.0, "line_num": 34, "text": "turn-around () :", "cluster_label": 0, "indentation": 1}, {"x": 124.0, "y": 1348.0, "w": 170.0, "h": 27.0, "line_num": 35, "text": "turn_left ()", "cluster_label": 0, "indentation": 1}, {"x": 130.0, "y": 1389.0, "w": 164.0, "h": 29.0, "line_num": 36, "text": "turn_kft ()", "cluster_label": 0, "indentation": 1}, {"x": 52.0, "y": 1458.0, "w": 406.0, "h": 39.0, "line_num": 37, "text": "if_ name_ == '-main -:", "cluster_label": 1, "indentation": 0}, {"x": 99.0, "y": 1493.0, "w": 121.0, "h": 30.0, "line_num": 38, "text": "main ()", "cluster_label": 1, "indentation": 0}], "ir_algo_output_edit_distance": 89, "prompting_method": "cot-test5", "lm_post_processed_code": "# 1 karel Problem - Karel home\nfrom karel.stanfordkarel import *\n# This program defines a main function which should make karel\n# move to the beeper, pick it up and return home\n\ndef main():\n    get_out()\n    pick_food()\n    get_back_home()\n# pre : Karel facing east, at the corner of starting position\n# post: karel facing east, outside the home, at the position of beeper\n\ndef get_out():\n    turn_right()\n    move()\n    turn_left()\n    move()\n    move()\n    move()\n# post: Karel facing west, at the position of beeper\n\ndef pick_food():\n    pick_beeper()\n    turn_around()\n# post: Karel facing east, at the corner of starting position\n\ndef get_back_home():\n    move()\n    move()\n    move()\n    turn_right()\n    move()\n    turn_right()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\n\ndef turn_around():\n    turn_left()\n    turn_left()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 10}, {"image_id": 13, "image_height": 1600, "image_width": 1200, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 41.0, "y": 21.0, "w": 420.0, "h": 33.0, "line_num": 1, "text": "# 1 karel Problem - Karel home"}, {"x": 69.0, "y": 78.0, "w": 453.0, "h": 31.0, "line_num": 2, "text": "from Karel. Stanfordkarel import *"}, {"x": 68.0, "y": 135.0, "w": 937.0, "h": 38.0, "line_num": 3, "text": "# This program defines a main function which should make karel"}, {"x": 66.0, "y": 170.0, "w": 719.0, "h": 28.0, "line_num": 4, "text": "# move to the beeper, pick it up and return home"}, {"x": 75.0, "y": 219.0, "w": 192.0, "h": 28.0, "line_num": 5, "text": "def main () :"}, {"x": 136.0, "y": 255.0, "w": 128.0, "h": 24.0, "line_num": 6, "text": "get_Out ()"}, {"x": 140.0, "y": 285.0, "w": 140.0, "h": 25.0, "line_num": 7, "text": "pick_food ()"}, {"x": 140.0, "y": 314.0, "w": 229.0, "h": 28.0, "line_num": 8, "text": "get back_ home ()"}, {"x": 67.0, "y": 374.0, "w": 835.0, "h": 32.0, "line_num": 9, "text": "# pre : Karel facing east, at the corner of starting position"}, {"x": 66.0, "y": 404.0, "w": 943.0, "h": 30.0, "line_num": 10, "text": "# post: karel facing east, outside the home, at the position of beeper"}, {"x": 67.0, "y": 444.0, "w": 229.0, "h": 32.0, "line_num": 11, "text": "def get_out () :"}, {"x": 144.0, "y": 484.0, "w": 158.0, "h": 26.0, "line_num": 12, "text": "turn_right ( )"}, {"x": 149.0, "y": 518.0, "w": 92.0, "h": 22.0, "line_num": 13, "text": "move ()"}, {"x": 152.0, "y": 543.0, "w": 158.0, "h": 25.0, "line_num": 14, "text": "turn_left ()"}, {"x": 153.0, "y": 577.0, "w": 93.0, "h": 22.0, "line_num": 15, "text": "move ()"}, {"x": 155.0, "y": 605.0, "w": 98.0, "h": 21.0, "line_num": 16, "text": "move ()"}, {"x": 155.0, "y": 632.0, "w": 102.0, "h": 23.0, "line_num": 17, "text": "move ()"}, {"x": 63.0, "y": 690.0, "w": 755.0, "h": 31.0, "line_num": 18, "text": "# post: Karel facing west, at the position of beeper"}, {"x": 65.0, "y": 730.0, "w": 244.0, "h": 31.0, "line_num": 19, "text": "def pick-food ():"}, {"x": 129.0, "y": 770.0, "w": 184.0, "h": 28.0, "line_num": 20, "text": "pick_beeper ()"}, {"x": 132.0, "y": 805.0, "w": 189.0, "h": 24.0, "line_num": 21, "text": "turn- around ()"}, {"x": 56.0, "y": 862.0, "w": 880.0, "h": 32.0, "line_num": 22, "text": "# post: Karel facing east, at the corner of starting position"}, {"x": 63.0, "y": 906.0, "w": 323.0, "h": 33.0, "line_num": 23, "text": "def get_ back_home () :"}, {"x": 138.0, "y": 951.0, "w": 98.0, "h": 22.0, "line_num": 24, "text": "move ()"}, {"x": 137.0, "y": 992.0, "w": 106.0, "h": 22.0, "line_num": 25, "text": "Move ()"}, {"x": 136.0, "y": 1028.0, "w": 101.0, "h": 23.0, "line_num": 26, "text": "move ()"}, {"x": 137.0, "y": 1057.0, "w": 187.0, "h": 26.0, "line_num": 27, "text": "turn right ()"}, {"x": 136.0, "y": 1097.0, "w": 107.0, "h": 24.0, "line_num": 28, "text": "move ()"}, {"x": 141.0, "y": 1127.0, "w": 185.0, "h": 23.0, "line_num": 29, "text": "turn right ()"}, {"x": 42.0, "y": 1174.0, "w": 295.0, "h": 33.0, "line_num": 30, "text": "def turn right () ;"}, {"x": 116.0, "y": 1212.0, "w": 271.0, "h": 31.0, "line_num": 31, "text": "for i in range (3) :"}, {"x": 173.0, "y": 1246.0, "w": 161.0, "h": 26.0, "line_num": 32, "text": "turn-left ()"}, {"x": 48.0, "y": 1313.0, "w": 61.0, "h": 28.0, "line_num": 33, "text": "def"}, {"x": 116.0, "y": 1311.0, "w": 250.0, "h": 27.0, "line_num": 34, "text": "turn-around () :"}, {"x": 124.0, "y": 1348.0, "w": 170.0, "h": 27.0, "line_num": 35, "text": "turn_left ()"}, {"x": 130.0, "y": 1389.0, "w": 164.0, "h": 29.0, "line_num": 36, "text": "turn_kft ()"}, {"x": 52.0, "y": 1458.0, "w": 406.0, "h": 39.0, "line_num": 37, "text": "if_ name_ == '-main -:"}, {"x": 99.0, "y": 1493.0, "w": 121.0, "h": 30.0, "line_num": 38, "text": "main ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 41.723684210526315, "ir_algo_output_code": "# 1 karel Problem - Karel home\nfrom Karel. Stanfordkarel import *\n# This program defines a main function which should make karel\n# move to the beeper, pick it up and return home\ndef main () :\n    get_Out ()\n    pick_food ()\n    get back_ home ()\n# pre : Karel facing east, at the corner of starting position\n# post: karel facing east, outside the home, at the position of beeper\ndef get_out () :\n    turn_right ( )\n    move ()\n    turn_left ()\n    move ()\n    move ()\n    move ()\n# post: Karel facing west, at the position of beeper\ndef pick-food ():\n    pick_beeper ()\n    turn- around ()\n# post: Karel facing east, at the corner of starting position\ndef get_ back_home () :\n    move ()\n    Move ()\n    move ()\n    turn right ()\n    move ()\n    turn right ()\ndef turn right () ;\n    for i in range (3) :\n    turn-left ()\ndef\n    turn-around () :\n    turn_left ()\n    turn_kft ()\nif_ name_ == '-main -:\nmain ()\n", "ir_algo_output_indented_lines": [{"x": 41.0, "y": 21.0, "w": 420.0, "h": 33.0, "line_num": 1, "text": "# 1 karel Problem - Karel home", "cluster_label": 1, "indentation": 0}, {"x": 69.0, "y": 78.0, "w": 453.0, "h": 31.0, "line_num": 2, "text": "from Karel. Stanfordkarel import *", "cluster_label": 1, "indentation": 0}, {"x": 68.0, "y": 135.0, "w": 937.0, "h": 38.0, "line_num": 3, "text": "# This program defines a main function which should make karel", "cluster_label": 1, "indentation": 0}, {"x": 66.0, "y": 170.0, "w": 719.0, "h": 28.0, "line_num": 4, "text": "# move to the beeper, pick it up and return home", "cluster_label": 1, "indentation": 0}, {"x": 75.0, "y": 219.0, "w": 192.0, "h": 28.0, "line_num": 5, "text": "def main () :", "cluster_label": 1, "indentation": 0}, {"x": 136.0, "y": 255.0, "w": 128.0, "h": 24.0, "line_num": 6, "text": "get_Out ()", "cluster_label": 0, "indentation": 1}, {"x": 140.0, "y": 285.0, "w": 140.0, "h": 25.0, "line_num": 7, "text": "pick_food ()", "cluster_label": 0, "indentation": 1}, {"x": 140.0, "y": 314.0, "w": 229.0, "h": 28.0, "line_num": 8, "text": "get back_ home ()", "cluster_label": 0, "indentation": 1}, {"x": 67.0, "y": 374.0, "w": 835.0, "h": 32.0, "line_num": 9, "text": "# pre : Karel facing east, at the corner of starting position", "cluster_label": 1, "indentation": 0}, {"x": 66.0, "y": 404.0, "w": 943.0, "h": 30.0, "line_num": 10, "text": "# post: karel facing east, outside the home, at the position of beeper", "cluster_label": 1, "indentation": 0}, {"x": 67.0, "y": 444.0, "w": 229.0, "h": 32.0, "line_num": 11, "text": "def get_out () :", "cluster_label": 1, "indentation": 0}, {"x": 144.0, "y": 484.0, "w": 158.0, "h": 26.0, "line_num": 12, "text": "turn_right ( )", "cluster_label": 0, "indentation": 1}, {"x": 149.0, "y": 518.0, "w": 92.0, "h": 22.0, "line_num": 13, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 152.0, "y": 543.0, "w": 158.0, "h": 25.0, "line_num": 14, "text": "turn_left ()", "cluster_label": 0, "indentation": 1}, {"x": 153.0, "y": 577.0, "w": 93.0, "h": 22.0, "line_num": 15, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 155.0, "y": 605.0, "w": 98.0, "h": 21.0, "line_num": 16, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 155.0, "y": 632.0, "w": 102.0, "h": 23.0, "line_num": 17, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 63.0, "y": 690.0, "w": 755.0, "h": 31.0, "line_num": 18, "text": "# post: Karel facing west, at the position of beeper", "cluster_label": 1, "indentation": 0}, {"x": 65.0, "y": 730.0, "w": 244.0, "h": 31.0, "line_num": 19, "text": "def pick-food ():", "cluster_label": 1, "indentation": 0}, {"x": 129.0, "y": 770.0, "w": 184.0, "h": 28.0, "line_num": 20, "text": "pick_beeper ()", "cluster_label": 0, "indentation": 1}, {"x": 132.0, "y": 805.0, "w": 189.0, "h": 24.0, "line_num": 21, "text": "turn- around ()", "cluster_label": 0, "indentation": 1}, {"x": 56.0, "y": 862.0, "w": 880.0, "h": 32.0, "line_num": 22, "text": "# post: Karel facing east, at the corner of starting position", "cluster_label": 1, "indentation": 0}, {"x": 63.0, "y": 906.0, "w": 323.0, "h": 33.0, "line_num": 23, "text": "def get_ back_home () :", "cluster_label": 1, "indentation": 0}, {"x": 138.0, "y": 951.0, "w": 98.0, "h": 22.0, "line_num": 24, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 137.0, "y": 992.0, "w": 106.0, "h": 22.0, "line_num": 25, "text": "Move ()", "cluster_label": 0, "indentation": 1}, {"x": 136.0, "y": 1028.0, "w": 101.0, "h": 23.0, "line_num": 26, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 137.0, "y": 1057.0, "w": 187.0, "h": 26.0, "line_num": 27, "text": "turn right ()", "cluster_label": 0, "indentation": 1}, {"x": 136.0, "y": 1097.0, "w": 107.0, "h": 24.0, "line_num": 28, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 141.0, "y": 1127.0, "w": 185.0, "h": 23.0, "line_num": 29, "text": "turn right ()", "cluster_label": 0, "indentation": 1}, {"x": 42.0, "y": 1174.0, "w": 295.0, "h": 33.0, "line_num": 30, "text": "def turn right () ;", "cluster_label": 1, "indentation": 0}, {"x": 116.0, "y": 1212.0, "w": 271.0, "h": 31.0, "line_num": 31, "text": "for i in range (3) :", "cluster_label": 0, "indentation": 1}, {"x": 173.0, "y": 1246.0, "w": 161.0, "h": 26.0, "line_num": 32, "text": "turn-left ()", "cluster_label": 0, "indentation": 1}, {"x": 48.0, "y": 1313.0, "w": 61.0, "h": 28.0, "line_num": 33, "text": "def", "cluster_label": 1, "indentation": 0}, {"x": 116.0, "y": 1311.0, "w": 250.0, "h": 27.0, "line_num": 34, "text": "turn-around () :", "cluster_label": 0, "indentation": 1}, {"x": 124.0, "y": 1348.0, "w": 170.0, "h": 27.0, "line_num": 35, "text": "turn_left ()", "cluster_label": 0, "indentation": 1}, {"x": 130.0, "y": 1389.0, "w": 164.0, "h": 29.0, "line_num": 36, "text": "turn_kft ()", "cluster_label": 0, "indentation": 1}, {"x": 52.0, "y": 1458.0, "w": 406.0, "h": 39.0, "line_num": 37, "text": "if_ name_ == '-main -:", "cluster_label": 1, "indentation": 0}, {"x": 99.0, "y": 1493.0, "w": 121.0, "h": 30.0, "line_num": 38, "text": "main ()", "cluster_label": 1, "indentation": 0}], "ir_algo_output_edit_distance": 89, "prompting_method": "simple-test2", "lm_post_processed_code": "# 1 karel Problem - Karel home\nfrom karel.stanfordkarel import *\n# This program defines a main function which should make karel\n# move to the beeper, pick it up and return home\n\ndef main():\n    get_out()\n    pick_food()\n    get_back_home()\n# pre : Karel facing east, at the corner of starting position\n# post: karel facing east, outside the home, at the position of beeper\n\ndef get_out():\n    turn_right()\n    move()\n    turn_left()\n    move()\n    move()\n    move()\n# post: Karel facing west, at the position of beeper\n\ndef pick_food():\n    pick_beeper()\n    turn_around()\n# post: Karel facing east, at the corner of starting position\n\ndef get_back_home():\n    move()\n    move()\n    move()\n    turn_right()\n    move()\n    turn_right()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\n\ndef turn_around():\n    turn_left()\n    turn_left()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 10}, {"image_id": 13, "image_height": 1600, "image_width": 1200, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 41.0, "y": 21.0, "w": 420.0, "h": 33.0, "line_num": 1, "text": "# 1 karel Problem - Karel home"}, {"x": 69.0, "y": 78.0, "w": 453.0, "h": 31.0, "line_num": 2, "text": "from Karel. Stanfordkarel import *"}, {"x": 68.0, "y": 135.0, "w": 937.0, "h": 38.0, "line_num": 3, "text": "# This program defines a main function which should make karel"}, {"x": 66.0, "y": 170.0, "w": 719.0, "h": 28.0, "line_num": 4, "text": "# move to the beeper, pick it up and return home"}, {"x": 75.0, "y": 219.0, "w": 192.0, "h": 28.0, "line_num": 5, "text": "def main () :"}, {"x": 136.0, "y": 255.0, "w": 128.0, "h": 24.0, "line_num": 6, "text": "get_Out ()"}, {"x": 140.0, "y": 285.0, "w": 140.0, "h": 25.0, "line_num": 7, "text": "pick_food ()"}, {"x": 140.0, "y": 314.0, "w": 229.0, "h": 28.0, "line_num": 8, "text": "get back_ home ()"}, {"x": 67.0, "y": 374.0, "w": 835.0, "h": 32.0, "line_num": 9, "text": "# pre : Karel facing east, at the corner of starting position"}, {"x": 66.0, "y": 404.0, "w": 943.0, "h": 30.0, "line_num": 10, "text": "# post: karel facing east, outside the home, at the position of beeper"}, {"x": 67.0, "y": 444.0, "w": 229.0, "h": 32.0, "line_num": 11, "text": "def get_out () :"}, {"x": 144.0, "y": 484.0, "w": 158.0, "h": 26.0, "line_num": 12, "text": "turn_right ( )"}, {"x": 149.0, "y": 518.0, "w": 92.0, "h": 22.0, "line_num": 13, "text": "move ()"}, {"x": 152.0, "y": 543.0, "w": 158.0, "h": 25.0, "line_num": 14, "text": "turn_left ()"}, {"x": 153.0, "y": 577.0, "w": 93.0, "h": 22.0, "line_num": 15, "text": "move ()"}, {"x": 155.0, "y": 605.0, "w": 98.0, "h": 21.0, "line_num": 16, "text": "move ()"}, {"x": 155.0, "y": 632.0, "w": 102.0, "h": 23.0, "line_num": 17, "text": "move ()"}, {"x": 63.0, "y": 690.0, "w": 755.0, "h": 31.0, "line_num": 18, "text": "# post: Karel facing west, at the position of beeper"}, {"x": 65.0, "y": 730.0, "w": 244.0, "h": 31.0, "line_num": 19, "text": "def pick-food ():"}, {"x": 129.0, "y": 770.0, "w": 184.0, "h": 28.0, "line_num": 20, "text": "pick_beeper ()"}, {"x": 132.0, "y": 805.0, "w": 189.0, "h": 24.0, "line_num": 21, "text": "turn- around ()"}, {"x": 56.0, "y": 862.0, "w": 880.0, "h": 32.0, "line_num": 22, "text": "# post: Karel facing east, at the corner of starting position"}, {"x": 63.0, "y": 906.0, "w": 323.0, "h": 33.0, "line_num": 23, "text": "def get_ back_home () :"}, {"x": 138.0, "y": 951.0, "w": 98.0, "h": 22.0, "line_num": 24, "text": "move ()"}, {"x": 137.0, "y": 992.0, "w": 106.0, "h": 22.0, "line_num": 25, "text": "Move ()"}, {"x": 136.0, "y": 1028.0, "w": 101.0, "h": 23.0, "line_num": 26, "text": "move ()"}, {"x": 137.0, "y": 1057.0, "w": 187.0, "h": 26.0, "line_num": 27, "text": "turn right ()"}, {"x": 136.0, "y": 1097.0, "w": 107.0, "h": 24.0, "line_num": 28, "text": "move ()"}, {"x": 141.0, "y": 1127.0, "w": 185.0, "h": 23.0, "line_num": 29, "text": "turn right ()"}, {"x": 42.0, "y": 1174.0, "w": 295.0, "h": 33.0, "line_num": 30, "text": "def turn right () ;"}, {"x": 116.0, "y": 1212.0, "w": 271.0, "h": 31.0, "line_num": 31, "text": "for i in range (3) :"}, {"x": 173.0, "y": 1246.0, "w": 161.0, "h": 26.0, "line_num": 32, "text": "turn-left ()"}, {"x": 48.0, "y": 1313.0, "w": 61.0, "h": 28.0, "line_num": 33, "text": "def"}, {"x": 116.0, "y": 1311.0, "w": 250.0, "h": 27.0, "line_num": 34, "text": "turn-around () :"}, {"x": 124.0, "y": 1348.0, "w": 170.0, "h": 27.0, "line_num": 35, "text": "turn_left ()"}, {"x": 130.0, "y": 1389.0, "w": 164.0, "h": 29.0, "line_num": 36, "text": "turn_kft ()"}, {"x": 52.0, "y": 1458.0, "w": 406.0, "h": 39.0, "line_num": 37, "text": "if_ name_ == '-main -:"}, {"x": 99.0, "y": 1493.0, "w": 121.0, "h": 30.0, "line_num": 38, "text": "main ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 41.723684210526315, "ir_algo_output_code": "# 1 karel Problem - Karel home\nfrom Karel. Stanfordkarel import *\n# This program defines a main function which should make karel\n# move to the beeper, pick it up and return home\ndef main () :\n    get_Out ()\n    pick_food ()\n    get back_ home ()\n# pre : Karel facing east, at the corner of starting position\n# post: karel facing east, outside the home, at the position of beeper\ndef get_out () :\n    turn_right ( )\n    move ()\n    turn_left ()\n    move ()\n    move ()\n    move ()\n# post: Karel facing west, at the position of beeper\ndef pick-food ():\n    pick_beeper ()\n    turn- around ()\n# post: Karel facing east, at the corner of starting position\ndef get_ back_home () :\n    move ()\n    Move ()\n    move ()\n    turn right ()\n    move ()\n    turn right ()\ndef turn right () ;\n    for i in range (3) :\n    turn-left ()\ndef\n    turn-around () :\n    turn_left ()\n    turn_kft ()\nif_ name_ == '-main -:\nmain ()\n", "ir_algo_output_indented_lines": [{"x": 41.0, "y": 21.0, "w": 420.0, "h": 33.0, "line_num": 1, "text": "# 1 karel Problem - Karel home", "cluster_label": 1, "indentation": 0}, {"x": 69.0, "y": 78.0, "w": 453.0, "h": 31.0, "line_num": 2, "text": "from Karel. Stanfordkarel import *", "cluster_label": 1, "indentation": 0}, {"x": 68.0, "y": 135.0, "w": 937.0, "h": 38.0, "line_num": 3, "text": "# This program defines a main function which should make karel", "cluster_label": 1, "indentation": 0}, {"x": 66.0, "y": 170.0, "w": 719.0, "h": 28.0, "line_num": 4, "text": "# move to the beeper, pick it up and return home", "cluster_label": 1, "indentation": 0}, {"x": 75.0, "y": 219.0, "w": 192.0, "h": 28.0, "line_num": 5, "text": "def main () :", "cluster_label": 1, "indentation": 0}, {"x": 136.0, "y": 255.0, "w": 128.0, "h": 24.0, "line_num": 6, "text": "get_Out ()", "cluster_label": 0, "indentation": 1}, {"x": 140.0, "y": 285.0, "w": 140.0, "h": 25.0, "line_num": 7, "text": "pick_food ()", "cluster_label": 0, "indentation": 1}, {"x": 140.0, "y": 314.0, "w": 229.0, "h": 28.0, "line_num": 8, "text": "get back_ home ()", "cluster_label": 0, "indentation": 1}, {"x": 67.0, "y": 374.0, "w": 835.0, "h": 32.0, "line_num": 9, "text": "# pre : Karel facing east, at the corner of starting position", "cluster_label": 1, "indentation": 0}, {"x": 66.0, "y": 404.0, "w": 943.0, "h": 30.0, "line_num": 10, "text": "# post: karel facing east, outside the home, at the position of beeper", "cluster_label": 1, "indentation": 0}, {"x": 67.0, "y": 444.0, "w": 229.0, "h": 32.0, "line_num": 11, "text": "def get_out () :", "cluster_label": 1, "indentation": 0}, {"x": 144.0, "y": 484.0, "w": 158.0, "h": 26.0, "line_num": 12, "text": "turn_right ( )", "cluster_label": 0, "indentation": 1}, {"x": 149.0, "y": 518.0, "w": 92.0, "h": 22.0, "line_num": 13, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 152.0, "y": 543.0, "w": 158.0, "h": 25.0, "line_num": 14, "text": "turn_left ()", "cluster_label": 0, "indentation": 1}, {"x": 153.0, "y": 577.0, "w": 93.0, "h": 22.0, "line_num": 15, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 155.0, "y": 605.0, "w": 98.0, "h": 21.0, "line_num": 16, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 155.0, "y": 632.0, "w": 102.0, "h": 23.0, "line_num": 17, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 63.0, "y": 690.0, "w": 755.0, "h": 31.0, "line_num": 18, "text": "# post: Karel facing west, at the position of beeper", "cluster_label": 1, "indentation": 0}, {"x": 65.0, "y": 730.0, "w": 244.0, "h": 31.0, "line_num": 19, "text": "def pick-food ():", "cluster_label": 1, "indentation": 0}, {"x": 129.0, "y": 770.0, "w": 184.0, "h": 28.0, "line_num": 20, "text": "pick_beeper ()", "cluster_label": 0, "indentation": 1}, {"x": 132.0, "y": 805.0, "w": 189.0, "h": 24.0, "line_num": 21, "text": "turn- around ()", "cluster_label": 0, "indentation": 1}, {"x": 56.0, "y": 862.0, "w": 880.0, "h": 32.0, "line_num": 22, "text": "# post: Karel facing east, at the corner of starting position", "cluster_label": 1, "indentation": 0}, {"x": 63.0, "y": 906.0, "w": 323.0, "h": 33.0, "line_num": 23, "text": "def get_ back_home () :", "cluster_label": 1, "indentation": 0}, {"x": 138.0, "y": 951.0, "w": 98.0, "h": 22.0, "line_num": 24, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 137.0, "y": 992.0, "w": 106.0, "h": 22.0, "line_num": 25, "text": "Move ()", "cluster_label": 0, "indentation": 1}, {"x": 136.0, "y": 1028.0, "w": 101.0, "h": 23.0, "line_num": 26, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 137.0, "y": 1057.0, "w": 187.0, "h": 26.0, "line_num": 27, "text": "turn right ()", "cluster_label": 0, "indentation": 1}, {"x": 136.0, "y": 1097.0, "w": 107.0, "h": 24.0, "line_num": 28, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 141.0, "y": 1127.0, "w": 185.0, "h": 23.0, "line_num": 29, "text": "turn right ()", "cluster_label": 0, "indentation": 1}, {"x": 42.0, "y": 1174.0, "w": 295.0, "h": 33.0, "line_num": 30, "text": "def turn right () ;", "cluster_label": 1, "indentation": 0}, {"x": 116.0, "y": 1212.0, "w": 271.0, "h": 31.0, "line_num": 31, "text": "for i in range (3) :", "cluster_label": 0, "indentation": 1}, {"x": 173.0, "y": 1246.0, "w": 161.0, "h": 26.0, "line_num": 32, "text": "turn-left ()", "cluster_label": 0, "indentation": 1}, {"x": 48.0, "y": 1313.0, "w": 61.0, "h": 28.0, "line_num": 33, "text": "def", "cluster_label": 1, "indentation": 0}, {"x": 116.0, "y": 1311.0, "w": 250.0, "h": 27.0, "line_num": 34, "text": "turn-around () :", "cluster_label": 0, "indentation": 1}, {"x": 124.0, "y": 1348.0, "w": 170.0, "h": 27.0, "line_num": 35, "text": "turn_left ()", "cluster_label": 0, "indentation": 1}, {"x": 130.0, "y": 1389.0, "w": 164.0, "h": 29.0, "line_num": 36, "text": "turn_kft ()", "cluster_label": 0, "indentation": 1}, {"x": 52.0, "y": 1458.0, "w": 406.0, "h": 39.0, "line_num": 37, "text": "if_ name_ == '-main -:", "cluster_label": 1, "indentation": 0}, {"x": 99.0, "y": 1493.0, "w": 121.0, "h": 30.0, "line_num": 38, "text": "main ()", "cluster_label": 1, "indentation": 0}], "ir_algo_output_edit_distance": 89, "prompting_method": "simple-test3", "lm_post_processed_code": "# 1 karel Problem - Karel home\nfrom karel.stanfordkarel import *\n# This program defines a main function which should make karel\n# move to the beeper, pick it up and return home\n\ndef main():\n    get_out()\n    pick_food()\n    get_back_home()\n# pre : Karel facing east, at the corner of starting position\n# post: karel facing east, outside the home, at the position of beeper\n\ndef get_out():\n    turn_right()\n    move()\n    turn_left()\n    move()\n    move()\n    move()\n# post: Karel facing west, at the position of beeper\n\ndef pick_food():\n    pick_beeper()\n    turn_around()\n# post: Karel facing east, at the corner of starting position\n\ndef get_back_home():\n    move()\n    move()\n    move()\n    turn_right()\n    move()\n    turn_right()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\n\ndef turn_around():\n    turn_left()\n    turn_left()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 10}, {"image_id": 13, "image_height": 1600, "image_width": 1200, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 41.0, "y": 21.0, "w": 420.0, "h": 33.0, "line_num": 1, "text": "# 1 karel Problem - Karel home"}, {"x": 69.0, "y": 78.0, "w": 453.0, "h": 31.0, "line_num": 2, "text": "from Karel. Stanfordkarel import *"}, {"x": 68.0, "y": 135.0, "w": 937.0, "h": 38.0, "line_num": 3, "text": "# This program defines a main function which should make karel"}, {"x": 66.0, "y": 170.0, "w": 719.0, "h": 28.0, "line_num": 4, "text": "# move to the beeper, pick it up and return home"}, {"x": 75.0, "y": 219.0, "w": 192.0, "h": 28.0, "line_num": 5, "text": "def main () :"}, {"x": 136.0, "y": 255.0, "w": 128.0, "h": 24.0, "line_num": 6, "text": "get_Out ()"}, {"x": 140.0, "y": 285.0, "w": 140.0, "h": 25.0, "line_num": 7, "text": "pick_food ()"}, {"x": 140.0, "y": 314.0, "w": 229.0, "h": 28.0, "line_num": 8, "text": "get back_ home ()"}, {"x": 67.0, "y": 374.0, "w": 835.0, "h": 32.0, "line_num": 9, "text": "# pre : Karel facing east, at the corner of starting position"}, {"x": 66.0, "y": 404.0, "w": 943.0, "h": 30.0, "line_num": 10, "text": "# post: karel facing east, outside the home, at the position of beeper"}, {"x": 67.0, "y": 444.0, "w": 229.0, "h": 32.0, "line_num": 11, "text": "def get_out () :"}, {"x": 144.0, "y": 484.0, "w": 158.0, "h": 26.0, "line_num": 12, "text": "turn_right ( )"}, {"x": 149.0, "y": 518.0, "w": 92.0, "h": 22.0, "line_num": 13, "text": "move ()"}, {"x": 152.0, "y": 543.0, "w": 158.0, "h": 25.0, "line_num": 14, "text": "turn_left ()"}, {"x": 153.0, "y": 577.0, "w": 93.0, "h": 22.0, "line_num": 15, "text": "move ()"}, {"x": 155.0, "y": 605.0, "w": 98.0, "h": 21.0, "line_num": 16, "text": "move ()"}, {"x": 155.0, "y": 632.0, "w": 102.0, "h": 23.0, "line_num": 17, "text": "move ()"}, {"x": 63.0, "y": 690.0, "w": 755.0, "h": 31.0, "line_num": 18, "text": "# post: Karel facing west, at the position of beeper"}, {"x": 65.0, "y": 730.0, "w": 244.0, "h": 31.0, "line_num": 19, "text": "def pick-food ():"}, {"x": 129.0, "y": 770.0, "w": 184.0, "h": 28.0, "line_num": 20, "text": "pick_beeper ()"}, {"x": 132.0, "y": 805.0, "w": 189.0, "h": 24.0, "line_num": 21, "text": "turn- around ()"}, {"x": 56.0, "y": 862.0, "w": 880.0, "h": 32.0, "line_num": 22, "text": "# post: Karel facing east, at the corner of starting position"}, {"x": 63.0, "y": 906.0, "w": 323.0, "h": 33.0, "line_num": 23, "text": "def get_ back_home () :"}, {"x": 138.0, "y": 951.0, "w": 98.0, "h": 22.0, "line_num": 24, "text": "move ()"}, {"x": 137.0, "y": 992.0, "w": 106.0, "h": 22.0, "line_num": 25, "text": "Move ()"}, {"x": 136.0, "y": 1028.0, "w": 101.0, "h": 23.0, "line_num": 26, "text": "move ()"}, {"x": 137.0, "y": 1057.0, "w": 187.0, "h": 26.0, "line_num": 27, "text": "turn right ()"}, {"x": 136.0, "y": 1097.0, "w": 107.0, "h": 24.0, "line_num": 28, "text": "move ()"}, {"x": 141.0, "y": 1127.0, "w": 185.0, "h": 23.0, "line_num": 29, "text": "turn right ()"}, {"x": 42.0, "y": 1174.0, "w": 295.0, "h": 33.0, "line_num": 30, "text": "def turn right () ;"}, {"x": 116.0, "y": 1212.0, "w": 271.0, "h": 31.0, "line_num": 31, "text": "for i in range (3) :"}, {"x": 173.0, "y": 1246.0, "w": 161.0, "h": 26.0, "line_num": 32, "text": "turn-left ()"}, {"x": 48.0, "y": 1313.0, "w": 61.0, "h": 28.0, "line_num": 33, "text": "def"}, {"x": 116.0, "y": 1311.0, "w": 250.0, "h": 27.0, "line_num": 34, "text": "turn-around () :"}, {"x": 124.0, "y": 1348.0, "w": 170.0, "h": 27.0, "line_num": 35, "text": "turn_left ()"}, {"x": 130.0, "y": 1389.0, "w": 164.0, "h": 29.0, "line_num": 36, "text": "turn_kft ()"}, {"x": 52.0, "y": 1458.0, "w": 406.0, "h": 39.0, "line_num": 37, "text": "if_ name_ == '-main -:"}, {"x": 99.0, "y": 1493.0, "w": 121.0, "h": 30.0, "line_num": 38, "text": "main ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "# 1 karel Problem - Karel home\nfrom Karel. Stanfordkarel import *\n# This program defines a main function which should make karel\n# move to the beeper, pick it up and return home\ndef main () :\n    get_Out ()\n    pick_food ()\n    get back_ home ()\n# pre : Karel facing east, at the corner of starting position\n# post: karel facing east, outside the home, at the position of beeper\ndef get_out () :\n    turn_right ( )\n    move ()\n    turn_left ()\n    move ()\n    move ()\n    move ()\n# post: Karel facing west, at the position of beeper\ndef pick-food ():\n    pick_beeper ()\n    turn- around ()\n# post: Karel facing east, at the corner of starting position\ndef get_ back_home () :\n    move ()\n    Move ()\n    move ()\n    turn right ()\n    move ()\n    turn right ()\ndef turn right () ;\n    for i in range (3) :\n        turn-left ()\ndef\n    turn-around () :\n    turn_left ()\n    turn_kft ()\nif_ name_ == '-main -:\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 41.0, "y": 21.0, "w": 420.0, "h": 33.0, "line_num": 1, "text": "# 1 karel Problem - Karel home", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 69.0, "y": 78.0, "w": 453.0, "h": 31.0, "line_num": 2, "text": "from Karel. Stanfordkarel import *", "delta": 28.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 68.0, "y": 135.0, "w": 937.0, "h": 38.0, "line_num": 3, "text": "# This program defines a main function which should make karel", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 66.0, "y": 170.0, "w": 719.0, "h": 28.0, "line_num": 4, "text": "# move to the beeper, pick it up and return home", "delta": -2.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 75.0, "y": 219.0, "w": 192.0, "h": 28.0, "line_num": 5, "text": "def main () :", "delta": 9.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 136.0, "y": 255.0, "w": 128.0, "h": 24.0, "line_num": 6, "text": "get_Out ()", "delta": 61.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 140.0, "y": 285.0, "w": 140.0, "h": 25.0, "line_num": 7, "text": "pick_food ()", "delta": 4.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 140.0, "y": 314.0, "w": 229.0, "h": 28.0, "line_num": 8, "text": "get back_ home ()", "delta": 0.0, "delta_type": "null", "gaussian_prediction": null, "cluster_label": 1}, {"x": 67.0, "y": 374.0, "w": 835.0, "h": 32.0, "line_num": 9, "text": "# pre : Karel facing east, at the corner of starting position", "delta": -73.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 66.0, "y": 404.0, "w": 943.0, "h": 30.0, "line_num": 10, "text": "# post: karel facing east, outside the home, at the position of beeper", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 67.0, "y": 444.0, "w": 229.0, "h": 32.0, "line_num": 11, "text": "def get_out () :", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 144.0, "y": 484.0, "w": 158.0, "h": 26.0, "line_num": 12, "text": "turn_right ( )", "delta": 77.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 149.0, "y": 518.0, "w": 92.0, "h": 22.0, "line_num": 13, "text": "move ()", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 152.0, "y": 543.0, "w": 158.0, "h": 25.0, "line_num": 14, "text": "turn_left ()", "delta": 3.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 153.0, "y": 577.0, "w": 93.0, "h": 22.0, "line_num": 15, "text": "move ()", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 155.0, "y": 605.0, "w": 98.0, "h": 21.0, "line_num": 16, "text": "move ()", "delta": 2.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 155.0, "y": 632.0, "w": 102.0, "h": 23.0, "line_num": 17, "text": "move ()", "delta": 0.0, "delta_type": "null", "gaussian_prediction": null, "cluster_label": 1}, {"x": 63.0, "y": 690.0, "w": 755.0, "h": 31.0, "line_num": 18, "text": "# post: Karel facing west, at the position of beeper", "delta": -92.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 65.0, "y": 730.0, "w": 244.0, "h": 31.0, "line_num": 19, "text": "def pick-food ():", "delta": 2.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 129.0, "y": 770.0, "w": 184.0, "h": 28.0, "line_num": 20, "text": "pick_beeper ()", "delta": 64.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 132.0, "y": 805.0, "w": 189.0, "h": 24.0, "line_num": 21, "text": "turn- around ()", "delta": 3.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 56.0, "y": 862.0, "w": 880.0, "h": 32.0, "line_num": 22, "text": "# post: Karel facing east, at the corner of starting position", "delta": -76.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 63.0, "y": 906.0, "w": 323.0, "h": 33.0, "line_num": 23, "text": "def get_ back_home () :", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 138.0, "y": 951.0, "w": 98.0, "h": 22.0, "line_num": 24, "text": "move ()", "delta": 75.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 137.0, "y": 992.0, "w": 106.0, "h": 22.0, "line_num": 25, "text": "Move ()", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 136.0, "y": 1028.0, "w": 101.0, "h": 23.0, "line_num": 26, "text": "move ()", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 137.0, "y": 1057.0, "w": 187.0, "h": 26.0, "line_num": 27, "text": "turn right ()", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 136.0, "y": 1097.0, "w": 107.0, "h": 24.0, "line_num": 28, "text": "move ()", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 141.0, "y": 1127.0, "w": 185.0, "h": 23.0, "line_num": 29, "text": "turn right ()", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 42.0, "y": 1174.0, "w": 295.0, "h": 33.0, "line_num": 30, "text": "def turn right () ;", "delta": -99.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 116.0, "y": 1212.0, "w": 271.0, "h": 31.0, "line_num": 31, "text": "for i in range (3) :", "delta": 74.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 173.0, "y": 1246.0, "w": 161.0, "h": 26.0, "line_num": 32, "text": "turn-left ()", "delta": 57.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 48.0, "y": 1313.0, "w": 61.0, "h": 28.0, "line_num": 33, "text": "def", "delta": -125.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 116.0, "y": 1311.0, "w": 250.0, "h": 27.0, "line_num": 34, "text": "turn-around () :", "delta": 68.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 124.0, "y": 1348.0, "w": 170.0, "h": 27.0, "line_num": 35, "text": "turn_left ()", "delta": 8.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 130.0, "y": 1389.0, "w": 164.0, "h": 29.0, "line_num": 36, "text": "turn_kft ()", "delta": 6.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 52.0, "y": 1458.0, "w": 406.0, "h": 39.0, "line_num": 37, "text": "if_ name_ == '-main -:", "delta": -78.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 99.0, "y": 1493.0, "w": 121.0, "h": 30.0, "line_num": 38, "text": "main ()", "delta": 47.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}], "ir_algo_output_edit_distance": 81, "prompting_method": "none", "lm_post_processed_code": "# 1 karel Problem - Karel home\nfrom Karel. Stanfordkarel import *\n# This program defines a main function which should make karel\n# move to the beeper, pick it up and return home\ndef main () :\n    get_Out ()\n    pick_food ()\n    get back_ home ()\n# pre : Karel facing east, at the corner of starting position\n# post: karel facing east, outside the home, at the position of beeper\ndef get_out () :\n    turn_right ( )\n    move ()\n    turn_left ()\n    move ()\n    move ()\n    move ()\n# post: Karel facing west, at the position of beeper\ndef pick-food ():\n    pick_beeper ()\n    turn- around ()\n# post: Karel facing east, at the corner of starting position\ndef get_ back_home () :\n    move ()\n    Move ()\n    move ()\n    turn right ()\n    move ()\n    turn right ()\ndef turn right () ;\n    for i in range (3) :\n        turn-left ()\ndef\n    turn-around () :\n    turn_left ()\n    turn_kft ()\nif_ name_ == '-main -:\n    main ()\n", "lm_post_processed_edit_distance": 81}, {"image_id": 13, "image_height": 1600, "image_width": 1200, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 41.0, "y": 21.0, "w": 420.0, "h": 33.0, "line_num": 1, "text": "# 1 karel Problem - Karel home"}, {"x": 69.0, "y": 78.0, "w": 453.0, "h": 31.0, "line_num": 2, "text": "from Karel. Stanfordkarel import *"}, {"x": 68.0, "y": 135.0, "w": 937.0, "h": 38.0, "line_num": 3, "text": "# This program defines a main function which should make karel"}, {"x": 66.0, "y": 170.0, "w": 719.0, "h": 28.0, "line_num": 4, "text": "# move to the beeper, pick it up and return home"}, {"x": 75.0, "y": 219.0, "w": 192.0, "h": 28.0, "line_num": 5, "text": "def main () :"}, {"x": 136.0, "y": 255.0, "w": 128.0, "h": 24.0, "line_num": 6, "text": "get_Out ()"}, {"x": 140.0, "y": 285.0, "w": 140.0, "h": 25.0, "line_num": 7, "text": "pick_food ()"}, {"x": 140.0, "y": 314.0, "w": 229.0, "h": 28.0, "line_num": 8, "text": "get back_ home ()"}, {"x": 67.0, "y": 374.0, "w": 835.0, "h": 32.0, "line_num": 9, "text": "# pre : Karel facing east, at the corner of starting position"}, {"x": 66.0, "y": 404.0, "w": 943.0, "h": 30.0, "line_num": 10, "text": "# post: karel facing east, outside the home, at the position of beeper"}, {"x": 67.0, "y": 444.0, "w": 229.0, "h": 32.0, "line_num": 11, "text": "def get_out () :"}, {"x": 144.0, "y": 484.0, "w": 158.0, "h": 26.0, "line_num": 12, "text": "turn_right ( )"}, {"x": 149.0, "y": 518.0, "w": 92.0, "h": 22.0, "line_num": 13, "text": "move ()"}, {"x": 152.0, "y": 543.0, "w": 158.0, "h": 25.0, "line_num": 14, "text": "turn_left ()"}, {"x": 153.0, "y": 577.0, "w": 93.0, "h": 22.0, "line_num": 15, "text": "move ()"}, {"x": 155.0, "y": 605.0, "w": 98.0, "h": 21.0, "line_num": 16, "text": "move ()"}, {"x": 155.0, "y": 632.0, "w": 102.0, "h": 23.0, "line_num": 17, "text": "move ()"}, {"x": 63.0, "y": 690.0, "w": 755.0, "h": 31.0, "line_num": 18, "text": "# post: Karel facing west, at the position of beeper"}, {"x": 65.0, "y": 730.0, "w": 244.0, "h": 31.0, "line_num": 19, "text": "def pick-food ():"}, {"x": 129.0, "y": 770.0, "w": 184.0, "h": 28.0, "line_num": 20, "text": "pick_beeper ()"}, {"x": 132.0, "y": 805.0, "w": 189.0, "h": 24.0, "line_num": 21, "text": "turn- around ()"}, {"x": 56.0, "y": 862.0, "w": 880.0, "h": 32.0, "line_num": 22, "text": "# post: Karel facing east, at the corner of starting position"}, {"x": 63.0, "y": 906.0, "w": 323.0, "h": 33.0, "line_num": 23, "text": "def get_ back_home () :"}, {"x": 138.0, "y": 951.0, "w": 98.0, "h": 22.0, "line_num": 24, "text": "move ()"}, {"x": 137.0, "y": 992.0, "w": 106.0, "h": 22.0, "line_num": 25, "text": "Move ()"}, {"x": 136.0, "y": 1028.0, "w": 101.0, "h": 23.0, "line_num": 26, "text": "move ()"}, {"x": 137.0, "y": 1057.0, "w": 187.0, "h": 26.0, "line_num": 27, "text": "turn right ()"}, {"x": 136.0, "y": 1097.0, "w": 107.0, "h": 24.0, "line_num": 28, "text": "move ()"}, {"x": 141.0, "y": 1127.0, "w": 185.0, "h": 23.0, "line_num": 29, "text": "turn right ()"}, {"x": 42.0, "y": 1174.0, "w": 295.0, "h": 33.0, "line_num": 30, "text": "def turn right () ;"}, {"x": 116.0, "y": 1212.0, "w": 271.0, "h": 31.0, "line_num": 31, "text": "for i in range (3) :"}, {"x": 173.0, "y": 1246.0, "w": 161.0, "h": 26.0, "line_num": 32, "text": "turn-left ()"}, {"x": 48.0, "y": 1313.0, "w": 61.0, "h": 28.0, "line_num": 33, "text": "def"}, {"x": 116.0, "y": 1311.0, "w": 250.0, "h": 27.0, "line_num": 34, "text": "turn-around () :"}, {"x": 124.0, "y": 1348.0, "w": 170.0, "h": 27.0, "line_num": 35, "text": "turn_left ()"}, {"x": 130.0, "y": 1389.0, "w": 164.0, "h": 29.0, "line_num": 36, "text": "turn_kft ()"}, {"x": 52.0, "y": 1458.0, "w": 406.0, "h": 39.0, "line_num": 37, "text": "if_ name_ == '-main -:"}, {"x": 99.0, "y": 1493.0, "w": 121.0, "h": 30.0, "line_num": 38, "text": "main ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "# 1 karel Problem - Karel home\nfrom Karel. Stanfordkarel import *\n# This program defines a main function which should make karel\n# move to the beeper, pick it up and return home\ndef main () :\n    get_Out ()\n    pick_food ()\n    get back_ home ()\n# pre : Karel facing east, at the corner of starting position\n# post: karel facing east, outside the home, at the position of beeper\ndef get_out () :\n    turn_right ( )\n    move ()\n    turn_left ()\n    move ()\n    move ()\n    move ()\n# post: Karel facing west, at the position of beeper\ndef pick-food ():\n    pick_beeper ()\n    turn- around ()\n# post: Karel facing east, at the corner of starting position\ndef get_ back_home () :\n    move ()\n    Move ()\n    move ()\n    turn right ()\n    move ()\n    turn right ()\ndef turn right () ;\n    for i in range (3) :\n        turn-left ()\ndef\n    turn-around () :\n    turn_left ()\n    turn_kft ()\nif_ name_ == '-main -:\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 41.0, "y": 21.0, "w": 420.0, "h": 33.0, "line_num": 1, "text": "# 1 karel Problem - Karel home", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 69.0, "y": 78.0, "w": 453.0, "h": 31.0, "line_num": 2, "text": "from Karel. Stanfordkarel import *", "delta": 28.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 68.0, "y": 135.0, "w": 937.0, "h": 38.0, "line_num": 3, "text": "# This program defines a main function which should make karel", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 66.0, "y": 170.0, "w": 719.0, "h": 28.0, "line_num": 4, "text": "# move to the beeper, pick it up and return home", "delta": -2.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 75.0, "y": 219.0, "w": 192.0, "h": 28.0, "line_num": 5, "text": "def main () :", "delta": 9.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 136.0, "y": 255.0, "w": 128.0, "h": 24.0, "line_num": 6, "text": "get_Out ()", "delta": 61.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 140.0, "y": 285.0, "w": 140.0, "h": 25.0, "line_num": 7, "text": "pick_food ()", "delta": 4.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 140.0, "y": 314.0, "w": 229.0, "h": 28.0, "line_num": 8, "text": "get back_ home ()", "delta": 0.0, "delta_type": "null", "gaussian_prediction": null, "cluster_label": 1}, {"x": 67.0, "y": 374.0, "w": 835.0, "h": 32.0, "line_num": 9, "text": "# pre : Karel facing east, at the corner of starting position", "delta": -73.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 66.0, "y": 404.0, "w": 943.0, "h": 30.0, "line_num": 10, "text": "# post: karel facing east, outside the home, at the position of beeper", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 67.0, "y": 444.0, "w": 229.0, "h": 32.0, "line_num": 11, "text": "def get_out () :", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 144.0, "y": 484.0, "w": 158.0, "h": 26.0, "line_num": 12, "text": "turn_right ( )", "delta": 77.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 149.0, "y": 518.0, "w": 92.0, "h": 22.0, "line_num": 13, "text": "move ()", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 152.0, "y": 543.0, "w": 158.0, "h": 25.0, "line_num": 14, "text": "turn_left ()", "delta": 3.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 153.0, "y": 577.0, "w": 93.0, "h": 22.0, "line_num": 15, "text": "move ()", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 155.0, "y": 605.0, "w": 98.0, "h": 21.0, "line_num": 16, "text": "move ()", "delta": 2.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 155.0, "y": 632.0, "w": 102.0, "h": 23.0, "line_num": 17, "text": "move ()", "delta": 0.0, "delta_type": "null", "gaussian_prediction": null, "cluster_label": 1}, {"x": 63.0, "y": 690.0, "w": 755.0, "h": 31.0, "line_num": 18, "text": "# post: Karel facing west, at the position of beeper", "delta": -92.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 65.0, "y": 730.0, "w": 244.0, "h": 31.0, "line_num": 19, "text": "def pick-food ():", "delta": 2.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 129.0, "y": 770.0, "w": 184.0, "h": 28.0, "line_num": 20, "text": "pick_beeper ()", "delta": 64.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 132.0, "y": 805.0, "w": 189.0, "h": 24.0, "line_num": 21, "text": "turn- around ()", "delta": 3.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 56.0, "y": 862.0, "w": 880.0, "h": 32.0, "line_num": 22, "text": "# post: Karel facing east, at the corner of starting position", "delta": -76.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 63.0, "y": 906.0, "w": 323.0, "h": 33.0, "line_num": 23, "text": "def get_ back_home () :", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 138.0, "y": 951.0, "w": 98.0, "h": 22.0, "line_num": 24, "text": "move ()", "delta": 75.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 137.0, "y": 992.0, "w": 106.0, "h": 22.0, "line_num": 25, "text": "Move ()", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 136.0, "y": 1028.0, "w": 101.0, "h": 23.0, "line_num": 26, "text": "move ()", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 137.0, "y": 1057.0, "w": 187.0, "h": 26.0, "line_num": 27, "text": "turn right ()", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 136.0, "y": 1097.0, "w": 107.0, "h": 24.0, "line_num": 28, "text": "move ()", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 141.0, "y": 1127.0, "w": 185.0, "h": 23.0, "line_num": 29, "text": "turn right ()", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 42.0, "y": 1174.0, "w": 295.0, "h": 33.0, "line_num": 30, "text": "def turn right () ;", "delta": -99.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 116.0, "y": 1212.0, "w": 271.0, "h": 31.0, "line_num": 31, "text": "for i in range (3) :", "delta": 74.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 173.0, "y": 1246.0, "w": 161.0, "h": 26.0, "line_num": 32, "text": "turn-left ()", "delta": 57.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 48.0, "y": 1313.0, "w": 61.0, "h": 28.0, "line_num": 33, "text": "def", "delta": -125.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 116.0, "y": 1311.0, "w": 250.0, "h": 27.0, "line_num": 34, "text": "turn-around () :", "delta": 68.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 124.0, "y": 1348.0, "w": 170.0, "h": 27.0, "line_num": 35, "text": "turn_left ()", "delta": 8.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 130.0, "y": 1389.0, "w": 164.0, "h": 29.0, "line_num": 36, "text": "turn_kft ()", "delta": 6.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 52.0, "y": 1458.0, "w": 406.0, "h": 39.0, "line_num": 37, "text": "if_ name_ == '-main -:", "delta": -78.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 99.0, "y": 1493.0, "w": 121.0, "h": 30.0, "line_num": 38, "text": "main ()", "delta": 47.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}], "ir_algo_output_edit_distance": 81, "prompting_method": "cot-test1", "lm_post_processed_code": "# 1 karel Problem - Karel home\nfrom karel.stanfordkarel import *\n# This program defines a main function which should make karel\n# move to the beeper, pick it up and return home\n\ndef main():\n    get_out()\n    pick_food()\n    get_back_home()\n# pre : Karel facing east, at the corner of starting position\n# post: karel facing east, outside the home, at the position of beeper\n\ndef get_out():\n    turn_right()\n    move()\n    turn_left()\n    move()\n    move()\n    move()\n# post: Karel facing west, at the position of beeper\n\ndef pick_food():\n    pick_beeper()\n    turn_around()\n# post: Karel facing east, at the corner of starting position\n\ndef get_back_home():\n    move()\n    move()\n    move()\n    turn_right()\n    move()\n    turn_right()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\n\ndef turn_around():\n    turn_left()\n    turn_left()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 10}, {"image_id": 13, "image_height": 1600, "image_width": 1200, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 41.0, "y": 21.0, "w": 420.0, "h": 33.0, "line_num": 1, "text": "# 1 karel Problem - Karel home"}, {"x": 69.0, "y": 78.0, "w": 453.0, "h": 31.0, "line_num": 2, "text": "from Karel. Stanfordkarel import *"}, {"x": 68.0, "y": 135.0, "w": 937.0, "h": 38.0, "line_num": 3, "text": "# This program defines a main function which should make karel"}, {"x": 66.0, "y": 170.0, "w": 719.0, "h": 28.0, "line_num": 4, "text": "# move to the beeper, pick it up and return home"}, {"x": 75.0, "y": 219.0, "w": 192.0, "h": 28.0, "line_num": 5, "text": "def main () :"}, {"x": 136.0, "y": 255.0, "w": 128.0, "h": 24.0, "line_num": 6, "text": "get_Out ()"}, {"x": 140.0, "y": 285.0, "w": 140.0, "h": 25.0, "line_num": 7, "text": "pick_food ()"}, {"x": 140.0, "y": 314.0, "w": 229.0, "h": 28.0, "line_num": 8, "text": "get back_ home ()"}, {"x": 67.0, "y": 374.0, "w": 835.0, "h": 32.0, "line_num": 9, "text": "# pre : Karel facing east, at the corner of starting position"}, {"x": 66.0, "y": 404.0, "w": 943.0, "h": 30.0, "line_num": 10, "text": "# post: karel facing east, outside the home, at the position of beeper"}, {"x": 67.0, "y": 444.0, "w": 229.0, "h": 32.0, "line_num": 11, "text": "def get_out () :"}, {"x": 144.0, "y": 484.0, "w": 158.0, "h": 26.0, "line_num": 12, "text": "turn_right ( )"}, {"x": 149.0, "y": 518.0, "w": 92.0, "h": 22.0, "line_num": 13, "text": "move ()"}, {"x": 152.0, "y": 543.0, "w": 158.0, "h": 25.0, "line_num": 14, "text": "turn_left ()"}, {"x": 153.0, "y": 577.0, "w": 93.0, "h": 22.0, "line_num": 15, "text": "move ()"}, {"x": 155.0, "y": 605.0, "w": 98.0, "h": 21.0, "line_num": 16, "text": "move ()"}, {"x": 155.0, "y": 632.0, "w": 102.0, "h": 23.0, "line_num": 17, "text": "move ()"}, {"x": 63.0, "y": 690.0, "w": 755.0, "h": 31.0, "line_num": 18, "text": "# post: Karel facing west, at the position of beeper"}, {"x": 65.0, "y": 730.0, "w": 244.0, "h": 31.0, "line_num": 19, "text": "def pick-food ():"}, {"x": 129.0, "y": 770.0, "w": 184.0, "h": 28.0, "line_num": 20, "text": "pick_beeper ()"}, {"x": 132.0, "y": 805.0, "w": 189.0, "h": 24.0, "line_num": 21, "text": "turn- around ()"}, {"x": 56.0, "y": 862.0, "w": 880.0, "h": 32.0, "line_num": 22, "text": "# post: Karel facing east, at the corner of starting position"}, {"x": 63.0, "y": 906.0, "w": 323.0, "h": 33.0, "line_num": 23, "text": "def get_ back_home () :"}, {"x": 138.0, "y": 951.0, "w": 98.0, "h": 22.0, "line_num": 24, "text": "move ()"}, {"x": 137.0, "y": 992.0, "w": 106.0, "h": 22.0, "line_num": 25, "text": "Move ()"}, {"x": 136.0, "y": 1028.0, "w": 101.0, "h": 23.0, "line_num": 26, "text": "move ()"}, {"x": 137.0, "y": 1057.0, "w": 187.0, "h": 26.0, "line_num": 27, "text": "turn right ()"}, {"x": 136.0, "y": 1097.0, "w": 107.0, "h": 24.0, "line_num": 28, "text": "move ()"}, {"x": 141.0, "y": 1127.0, "w": 185.0, "h": 23.0, "line_num": 29, "text": "turn right ()"}, {"x": 42.0, "y": 1174.0, "w": 295.0, "h": 33.0, "line_num": 30, "text": "def turn right () ;"}, {"x": 116.0, "y": 1212.0, "w": 271.0, "h": 31.0, "line_num": 31, "text": "for i in range (3) :"}, {"x": 173.0, "y": 1246.0, "w": 161.0, "h": 26.0, "line_num": 32, "text": "turn-left ()"}, {"x": 48.0, "y": 1313.0, "w": 61.0, "h": 28.0, "line_num": 33, "text": "def"}, {"x": 116.0, "y": 1311.0, "w": 250.0, "h": 27.0, "line_num": 34, "text": "turn-around () :"}, {"x": 124.0, "y": 1348.0, "w": 170.0, "h": 27.0, "line_num": 35, "text": "turn_left ()"}, {"x": 130.0, "y": 1389.0, "w": 164.0, "h": 29.0, "line_num": 36, "text": "turn_kft ()"}, {"x": 52.0, "y": 1458.0, "w": 406.0, "h": 39.0, "line_num": 37, "text": "if_ name_ == '-main -:"}, {"x": 99.0, "y": 1493.0, "w": 121.0, "h": 30.0, "line_num": 38, "text": "main ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "# 1 karel Problem - Karel home\nfrom Karel. Stanfordkarel import *\n# This program defines a main function which should make karel\n# move to the beeper, pick it up and return home\ndef main () :\n    get_Out ()\n    pick_food ()\n    get back_ home ()\n# pre : Karel facing east, at the corner of starting position\n# post: karel facing east, outside the home, at the position of beeper\ndef get_out () :\n    turn_right ( )\n    move ()\n    turn_left ()\n    move ()\n    move ()\n    move ()\n# post: Karel facing west, at the position of beeper\ndef pick-food ():\n    pick_beeper ()\n    turn- around ()\n# post: Karel facing east, at the corner of starting position\ndef get_ back_home () :\n    move ()\n    Move ()\n    move ()\n    turn right ()\n    move ()\n    turn right ()\ndef turn right () ;\n    for i in range (3) :\n        turn-left ()\ndef\n    turn-around () :\n    turn_left ()\n    turn_kft ()\nif_ name_ == '-main -:\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 41.0, "y": 21.0, "w": 420.0, "h": 33.0, "line_num": 1, "text": "# 1 karel Problem - Karel home", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 69.0, "y": 78.0, "w": 453.0, "h": 31.0, "line_num": 2, "text": "from Karel. Stanfordkarel import *", "delta": 28.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 68.0, "y": 135.0, "w": 937.0, "h": 38.0, "line_num": 3, "text": "# This program defines a main function which should make karel", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 66.0, "y": 170.0, "w": 719.0, "h": 28.0, "line_num": 4, "text": "# move to the beeper, pick it up and return home", "delta": -2.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 75.0, "y": 219.0, "w": 192.0, "h": 28.0, "line_num": 5, "text": "def main () :", "delta": 9.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 136.0, "y": 255.0, "w": 128.0, "h": 24.0, "line_num": 6, "text": "get_Out ()", "delta": 61.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 140.0, "y": 285.0, "w": 140.0, "h": 25.0, "line_num": 7, "text": "pick_food ()", "delta": 4.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 140.0, "y": 314.0, "w": 229.0, "h": 28.0, "line_num": 8, "text": "get back_ home ()", "delta": 0.0, "delta_type": "null", "gaussian_prediction": null, "cluster_label": 1}, {"x": 67.0, "y": 374.0, "w": 835.0, "h": 32.0, "line_num": 9, "text": "# pre : Karel facing east, at the corner of starting position", "delta": -73.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 66.0, "y": 404.0, "w": 943.0, "h": 30.0, "line_num": 10, "text": "# post: karel facing east, outside the home, at the position of beeper", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 67.0, "y": 444.0, "w": 229.0, "h": 32.0, "line_num": 11, "text": "def get_out () :", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 144.0, "y": 484.0, "w": 158.0, "h": 26.0, "line_num": 12, "text": "turn_right ( )", "delta": 77.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 149.0, "y": 518.0, "w": 92.0, "h": 22.0, "line_num": 13, "text": "move ()", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 152.0, "y": 543.0, "w": 158.0, "h": 25.0, "line_num": 14, "text": "turn_left ()", "delta": 3.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 153.0, "y": 577.0, "w": 93.0, "h": 22.0, "line_num": 15, "text": "move ()", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 155.0, "y": 605.0, "w": 98.0, "h": 21.0, "line_num": 16, "text": "move ()", "delta": 2.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 155.0, "y": 632.0, "w": 102.0, "h": 23.0, "line_num": 17, "text": "move ()", "delta": 0.0, "delta_type": "null", "gaussian_prediction": null, "cluster_label": 1}, {"x": 63.0, "y": 690.0, "w": 755.0, "h": 31.0, "line_num": 18, "text": "# post: Karel facing west, at the position of beeper", "delta": -92.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 65.0, "y": 730.0, "w": 244.0, "h": 31.0, "line_num": 19, "text": "def pick-food ():", "delta": 2.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 129.0, "y": 770.0, "w": 184.0, "h": 28.0, "line_num": 20, "text": "pick_beeper ()", "delta": 64.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 132.0, "y": 805.0, "w": 189.0, "h": 24.0, "line_num": 21, "text": "turn- around ()", "delta": 3.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 56.0, "y": 862.0, "w": 880.0, "h": 32.0, "line_num": 22, "text": "# post: Karel facing east, at the corner of starting position", "delta": -76.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 63.0, "y": 906.0, "w": 323.0, "h": 33.0, "line_num": 23, "text": "def get_ back_home () :", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 138.0, "y": 951.0, "w": 98.0, "h": 22.0, "line_num": 24, "text": "move ()", "delta": 75.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 137.0, "y": 992.0, "w": 106.0, "h": 22.0, "line_num": 25, "text": "Move ()", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 136.0, "y": 1028.0, "w": 101.0, "h": 23.0, "line_num": 26, "text": "move ()", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 137.0, "y": 1057.0, "w": 187.0, "h": 26.0, "line_num": 27, "text": "turn right ()", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 136.0, "y": 1097.0, "w": 107.0, "h": 24.0, "line_num": 28, "text": "move ()", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 141.0, "y": 1127.0, "w": 185.0, "h": 23.0, "line_num": 29, "text": "turn right ()", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 42.0, "y": 1174.0, "w": 295.0, "h": 33.0, "line_num": 30, "text": "def turn right () ;", "delta": -99.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 116.0, "y": 1212.0, "w": 271.0, "h": 31.0, "line_num": 31, "text": "for i in range (3) :", "delta": 74.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 173.0, "y": 1246.0, "w": 161.0, "h": 26.0, "line_num": 32, "text": "turn-left ()", "delta": 57.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 48.0, "y": 1313.0, "w": 61.0, "h": 28.0, "line_num": 33, "text": "def", "delta": -125.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 116.0, "y": 1311.0, "w": 250.0, "h": 27.0, "line_num": 34, "text": "turn-around () :", "delta": 68.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 124.0, "y": 1348.0, "w": 170.0, "h": 27.0, "line_num": 35, "text": "turn_left ()", "delta": 8.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 130.0, "y": 1389.0, "w": 164.0, "h": 29.0, "line_num": 36, "text": "turn_kft ()", "delta": 6.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 52.0, "y": 1458.0, "w": 406.0, "h": 39.0, "line_num": 37, "text": "if_ name_ == '-main -:", "delta": -78.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 99.0, "y": 1493.0, "w": 121.0, "h": 30.0, "line_num": 38, "text": "main ()", "delta": 47.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}], "ir_algo_output_edit_distance": 81, "prompting_method": "cot-test5", "lm_post_processed_code": "# 1 karel Problem - Karel home\nfrom karel.stanfordkarel import *\n# This program defines a main function which should make karel\n# move to the beeper, pick it up and return home\n\ndef main():\n    get_out()\n    pick_food()\n    get_back_home()\n# pre : Karel facing east, at the corner of starting position\n# post: karel facing east, outside the home, at the position of beeper\n\ndef get_out():\n    turn_right()\n    move()\n    turn_left()\n    move()\n    move()\n    move()\n# post: Karel facing west, at the position of beeper\n\ndef pick_food():\n    pick_beeper()\n    turn_around()\n# post: Karel facing east, at the corner of starting position\n\ndef get_back_home():\n    move()\n    move()\n    move()\n    turn_right()\n    move()\n    turn_right()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\n\ndef turn_around():\n    turn_left()\n    turn_left()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 10}, {"image_id": 13, "image_height": 1600, "image_width": 1200, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 41.0, "y": 21.0, "w": 420.0, "h": 33.0, "line_num": 1, "text": "# 1 karel Problem - Karel home"}, {"x": 69.0, "y": 78.0, "w": 453.0, "h": 31.0, "line_num": 2, "text": "from Karel. Stanfordkarel import *"}, {"x": 68.0, "y": 135.0, "w": 937.0, "h": 38.0, "line_num": 3, "text": "# This program defines a main function which should make karel"}, {"x": 66.0, "y": 170.0, "w": 719.0, "h": 28.0, "line_num": 4, "text": "# move to the beeper, pick it up and return home"}, {"x": 75.0, "y": 219.0, "w": 192.0, "h": 28.0, "line_num": 5, "text": "def main () :"}, {"x": 136.0, "y": 255.0, "w": 128.0, "h": 24.0, "line_num": 6, "text": "get_Out ()"}, {"x": 140.0, "y": 285.0, "w": 140.0, "h": 25.0, "line_num": 7, "text": "pick_food ()"}, {"x": 140.0, "y": 314.0, "w": 229.0, "h": 28.0, "line_num": 8, "text": "get back_ home ()"}, {"x": 67.0, "y": 374.0, "w": 835.0, "h": 32.0, "line_num": 9, "text": "# pre : Karel facing east, at the corner of starting position"}, {"x": 66.0, "y": 404.0, "w": 943.0, "h": 30.0, "line_num": 10, "text": "# post: karel facing east, outside the home, at the position of beeper"}, {"x": 67.0, "y": 444.0, "w": 229.0, "h": 32.0, "line_num": 11, "text": "def get_out () :"}, {"x": 144.0, "y": 484.0, "w": 158.0, "h": 26.0, "line_num": 12, "text": "turn_right ( )"}, {"x": 149.0, "y": 518.0, "w": 92.0, "h": 22.0, "line_num": 13, "text": "move ()"}, {"x": 152.0, "y": 543.0, "w": 158.0, "h": 25.0, "line_num": 14, "text": "turn_left ()"}, {"x": 153.0, "y": 577.0, "w": 93.0, "h": 22.0, "line_num": 15, "text": "move ()"}, {"x": 155.0, "y": 605.0, "w": 98.0, "h": 21.0, "line_num": 16, "text": "move ()"}, {"x": 155.0, "y": 632.0, "w": 102.0, "h": 23.0, "line_num": 17, "text": "move ()"}, {"x": 63.0, "y": 690.0, "w": 755.0, "h": 31.0, "line_num": 18, "text": "# post: Karel facing west, at the position of beeper"}, {"x": 65.0, "y": 730.0, "w": 244.0, "h": 31.0, "line_num": 19, "text": "def pick-food ():"}, {"x": 129.0, "y": 770.0, "w": 184.0, "h": 28.0, "line_num": 20, "text": "pick_beeper ()"}, {"x": 132.0, "y": 805.0, "w": 189.0, "h": 24.0, "line_num": 21, "text": "turn- around ()"}, {"x": 56.0, "y": 862.0, "w": 880.0, "h": 32.0, "line_num": 22, "text": "# post: Karel facing east, at the corner of starting position"}, {"x": 63.0, "y": 906.0, "w": 323.0, "h": 33.0, "line_num": 23, "text": "def get_ back_home () :"}, {"x": 138.0, "y": 951.0, "w": 98.0, "h": 22.0, "line_num": 24, "text": "move ()"}, {"x": 137.0, "y": 992.0, "w": 106.0, "h": 22.0, "line_num": 25, "text": "Move ()"}, {"x": 136.0, "y": 1028.0, "w": 101.0, "h": 23.0, "line_num": 26, "text": "move ()"}, {"x": 137.0, "y": 1057.0, "w": 187.0, "h": 26.0, "line_num": 27, "text": "turn right ()"}, {"x": 136.0, "y": 1097.0, "w": 107.0, "h": 24.0, "line_num": 28, "text": "move ()"}, {"x": 141.0, "y": 1127.0, "w": 185.0, "h": 23.0, "line_num": 29, "text": "turn right ()"}, {"x": 42.0, "y": 1174.0, "w": 295.0, "h": 33.0, "line_num": 30, "text": "def turn right () ;"}, {"x": 116.0, "y": 1212.0, "w": 271.0, "h": 31.0, "line_num": 31, "text": "for i in range (3) :"}, {"x": 173.0, "y": 1246.0, "w": 161.0, "h": 26.0, "line_num": 32, "text": "turn-left ()"}, {"x": 48.0, "y": 1313.0, "w": 61.0, "h": 28.0, "line_num": 33, "text": "def"}, {"x": 116.0, "y": 1311.0, "w": 250.0, "h": 27.0, "line_num": 34, "text": "turn-around () :"}, {"x": 124.0, "y": 1348.0, "w": 170.0, "h": 27.0, "line_num": 35, "text": "turn_left ()"}, {"x": 130.0, "y": 1389.0, "w": 164.0, "h": 29.0, "line_num": 36, "text": "turn_kft ()"}, {"x": 52.0, "y": 1458.0, "w": 406.0, "h": 39.0, "line_num": 37, "text": "if_ name_ == '-main -:"}, {"x": 99.0, "y": 1493.0, "w": 121.0, "h": 30.0, "line_num": 38, "text": "main ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "# 1 karel Problem - Karel home\nfrom Karel. Stanfordkarel import *\n# This program defines a main function which should make karel\n# move to the beeper, pick it up and return home\ndef main () :\n    get_Out ()\n    pick_food ()\n    get back_ home ()\n# pre : Karel facing east, at the corner of starting position\n# post: karel facing east, outside the home, at the position of beeper\ndef get_out () :\n    turn_right ( )\n    move ()\n    turn_left ()\n    move ()\n    move ()\n    move ()\n# post: Karel facing west, at the position of beeper\ndef pick-food ():\n    pick_beeper ()\n    turn- around ()\n# post: Karel facing east, at the corner of starting position\ndef get_ back_home () :\n    move ()\n    Move ()\n    move ()\n    turn right ()\n    move ()\n    turn right ()\ndef turn right () ;\n    for i in range (3) :\n        turn-left ()\ndef\n    turn-around () :\n    turn_left ()\n    turn_kft ()\nif_ name_ == '-main -:\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 41.0, "y": 21.0, "w": 420.0, "h": 33.0, "line_num": 1, "text": "# 1 karel Problem - Karel home", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 69.0, "y": 78.0, "w": 453.0, "h": 31.0, "line_num": 2, "text": "from Karel. Stanfordkarel import *", "delta": 28.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 68.0, "y": 135.0, "w": 937.0, "h": 38.0, "line_num": 3, "text": "# This program defines a main function which should make karel", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 66.0, "y": 170.0, "w": 719.0, "h": 28.0, "line_num": 4, "text": "# move to the beeper, pick it up and return home", "delta": -2.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 75.0, "y": 219.0, "w": 192.0, "h": 28.0, "line_num": 5, "text": "def main () :", "delta": 9.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 136.0, "y": 255.0, "w": 128.0, "h": 24.0, "line_num": 6, "text": "get_Out ()", "delta": 61.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 140.0, "y": 285.0, "w": 140.0, "h": 25.0, "line_num": 7, "text": "pick_food ()", "delta": 4.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 140.0, "y": 314.0, "w": 229.0, "h": 28.0, "line_num": 8, "text": "get back_ home ()", "delta": 0.0, "delta_type": "null", "gaussian_prediction": null, "cluster_label": 1}, {"x": 67.0, "y": 374.0, "w": 835.0, "h": 32.0, "line_num": 9, "text": "# pre : Karel facing east, at the corner of starting position", "delta": -73.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 66.0, "y": 404.0, "w": 943.0, "h": 30.0, "line_num": 10, "text": "# post: karel facing east, outside the home, at the position of beeper", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 67.0, "y": 444.0, "w": 229.0, "h": 32.0, "line_num": 11, "text": "def get_out () :", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 144.0, "y": 484.0, "w": 158.0, "h": 26.0, "line_num": 12, "text": "turn_right ( )", "delta": 77.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 149.0, "y": 518.0, "w": 92.0, "h": 22.0, "line_num": 13, "text": "move ()", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 152.0, "y": 543.0, "w": 158.0, "h": 25.0, "line_num": 14, "text": "turn_left ()", "delta": 3.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 153.0, "y": 577.0, "w": 93.0, "h": 22.0, "line_num": 15, "text": "move ()", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 155.0, "y": 605.0, "w": 98.0, "h": 21.0, "line_num": 16, "text": "move ()", "delta": 2.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 155.0, "y": 632.0, "w": 102.0, "h": 23.0, "line_num": 17, "text": "move ()", "delta": 0.0, "delta_type": "null", "gaussian_prediction": null, "cluster_label": 1}, {"x": 63.0, "y": 690.0, "w": 755.0, "h": 31.0, "line_num": 18, "text": "# post: Karel facing west, at the position of beeper", "delta": -92.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 65.0, "y": 730.0, "w": 244.0, "h": 31.0, "line_num": 19, "text": "def pick-food ():", "delta": 2.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 129.0, "y": 770.0, "w": 184.0, "h": 28.0, "line_num": 20, "text": "pick_beeper ()", "delta": 64.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 132.0, "y": 805.0, "w": 189.0, "h": 24.0, "line_num": 21, "text": "turn- around ()", "delta": 3.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 56.0, "y": 862.0, "w": 880.0, "h": 32.0, "line_num": 22, "text": "# post: Karel facing east, at the corner of starting position", "delta": -76.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 63.0, "y": 906.0, "w": 323.0, "h": 33.0, "line_num": 23, "text": "def get_ back_home () :", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 138.0, "y": 951.0, "w": 98.0, "h": 22.0, "line_num": 24, "text": "move ()", "delta": 75.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 137.0, "y": 992.0, "w": 106.0, "h": 22.0, "line_num": 25, "text": "Move ()", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 136.0, "y": 1028.0, "w": 101.0, "h": 23.0, "line_num": 26, "text": "move ()", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 137.0, "y": 1057.0, "w": 187.0, "h": 26.0, "line_num": 27, "text": "turn right ()", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 136.0, "y": 1097.0, "w": 107.0, "h": 24.0, "line_num": 28, "text": "move ()", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 141.0, "y": 1127.0, "w": 185.0, "h": 23.0, "line_num": 29, "text": "turn right ()", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 42.0, "y": 1174.0, "w": 295.0, "h": 33.0, "line_num": 30, "text": "def turn right () ;", "delta": -99.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 116.0, "y": 1212.0, "w": 271.0, "h": 31.0, "line_num": 31, "text": "for i in range (3) :", "delta": 74.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 173.0, "y": 1246.0, "w": 161.0, "h": 26.0, "line_num": 32, "text": "turn-left ()", "delta": 57.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 48.0, "y": 1313.0, "w": 61.0, "h": 28.0, "line_num": 33, "text": "def", "delta": -125.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 116.0, "y": 1311.0, "w": 250.0, "h": 27.0, "line_num": 34, "text": "turn-around () :", "delta": 68.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 124.0, "y": 1348.0, "w": 170.0, "h": 27.0, "line_num": 35, "text": "turn_left ()", "delta": 8.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 130.0, "y": 1389.0, "w": 164.0, "h": 29.0, "line_num": 36, "text": "turn_kft ()", "delta": 6.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 52.0, "y": 1458.0, "w": 406.0, "h": 39.0, "line_num": 37, "text": "if_ name_ == '-main -:", "delta": -78.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 99.0, "y": 1493.0, "w": 121.0, "h": 30.0, "line_num": 38, "text": "main ()", "delta": 47.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}], "ir_algo_output_edit_distance": 81, "prompting_method": "simple-test2", "lm_post_processed_code": "# 1 karel Problem - Karel home\nfrom karel.stanfordkarel import *\n# This program defines a main function which should make karel\n# move to the beeper, pick it up and return home\n\ndef main():\n    get_out()\n    pick_food()\n    get_back_home()\n# pre : Karel facing east, at the corner of starting position\n# post: karel facing east, outside the home, at the position of beeper\n\ndef get_out():\n    turn_right()\n    move()\n    turn_left()\n    move()\n    move()\n    move()\n# post: Karel facing west, at the position of beeper\n\ndef pick_food():\n    pick_beeper()\n    turn_around()\n# post: Karel facing east, at the corner of starting position\n\ndef get_back_home():\n    move()\n    move()\n    move()\n    turn_right()\n    move()\n    turn_right()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\n\ndef turn_around():\n    turn_left()\n    turn_left()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 10}, {"image_id": 13, "image_height": 1600, "image_width": 1200, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 41.0, "y": 21.0, "w": 420.0, "h": 33.0, "line_num": 1, "text": "# 1 karel Problem - Karel home"}, {"x": 69.0, "y": 78.0, "w": 453.0, "h": 31.0, "line_num": 2, "text": "from Karel. Stanfordkarel import *"}, {"x": 68.0, "y": 135.0, "w": 937.0, "h": 38.0, "line_num": 3, "text": "# This program defines a main function which should make karel"}, {"x": 66.0, "y": 170.0, "w": 719.0, "h": 28.0, "line_num": 4, "text": "# move to the beeper, pick it up and return home"}, {"x": 75.0, "y": 219.0, "w": 192.0, "h": 28.0, "line_num": 5, "text": "def main () :"}, {"x": 136.0, "y": 255.0, "w": 128.0, "h": 24.0, "line_num": 6, "text": "get_Out ()"}, {"x": 140.0, "y": 285.0, "w": 140.0, "h": 25.0, "line_num": 7, "text": "pick_food ()"}, {"x": 140.0, "y": 314.0, "w": 229.0, "h": 28.0, "line_num": 8, "text": "get back_ home ()"}, {"x": 67.0, "y": 374.0, "w": 835.0, "h": 32.0, "line_num": 9, "text": "# pre : Karel facing east, at the corner of starting position"}, {"x": 66.0, "y": 404.0, "w": 943.0, "h": 30.0, "line_num": 10, "text": "# post: karel facing east, outside the home, at the position of beeper"}, {"x": 67.0, "y": 444.0, "w": 229.0, "h": 32.0, "line_num": 11, "text": "def get_out () :"}, {"x": 144.0, "y": 484.0, "w": 158.0, "h": 26.0, "line_num": 12, "text": "turn_right ( )"}, {"x": 149.0, "y": 518.0, "w": 92.0, "h": 22.0, "line_num": 13, "text": "move ()"}, {"x": 152.0, "y": 543.0, "w": 158.0, "h": 25.0, "line_num": 14, "text": "turn_left ()"}, {"x": 153.0, "y": 577.0, "w": 93.0, "h": 22.0, "line_num": 15, "text": "move ()"}, {"x": 155.0, "y": 605.0, "w": 98.0, "h": 21.0, "line_num": 16, "text": "move ()"}, {"x": 155.0, "y": 632.0, "w": 102.0, "h": 23.0, "line_num": 17, "text": "move ()"}, {"x": 63.0, "y": 690.0, "w": 755.0, "h": 31.0, "line_num": 18, "text": "# post: Karel facing west, at the position of beeper"}, {"x": 65.0, "y": 730.0, "w": 244.0, "h": 31.0, "line_num": 19, "text": "def pick-food ():"}, {"x": 129.0, "y": 770.0, "w": 184.0, "h": 28.0, "line_num": 20, "text": "pick_beeper ()"}, {"x": 132.0, "y": 805.0, "w": 189.0, "h": 24.0, "line_num": 21, "text": "turn- around ()"}, {"x": 56.0, "y": 862.0, "w": 880.0, "h": 32.0, "line_num": 22, "text": "# post: Karel facing east, at the corner of starting position"}, {"x": 63.0, "y": 906.0, "w": 323.0, "h": 33.0, "line_num": 23, "text": "def get_ back_home () :"}, {"x": 138.0, "y": 951.0, "w": 98.0, "h": 22.0, "line_num": 24, "text": "move ()"}, {"x": 137.0, "y": 992.0, "w": 106.0, "h": 22.0, "line_num": 25, "text": "Move ()"}, {"x": 136.0, "y": 1028.0, "w": 101.0, "h": 23.0, "line_num": 26, "text": "move ()"}, {"x": 137.0, "y": 1057.0, "w": 187.0, "h": 26.0, "line_num": 27, "text": "turn right ()"}, {"x": 136.0, "y": 1097.0, "w": 107.0, "h": 24.0, "line_num": 28, "text": "move ()"}, {"x": 141.0, "y": 1127.0, "w": 185.0, "h": 23.0, "line_num": 29, "text": "turn right ()"}, {"x": 42.0, "y": 1174.0, "w": 295.0, "h": 33.0, "line_num": 30, "text": "def turn right () ;"}, {"x": 116.0, "y": 1212.0, "w": 271.0, "h": 31.0, "line_num": 31, "text": "for i in range (3) :"}, {"x": 173.0, "y": 1246.0, "w": 161.0, "h": 26.0, "line_num": 32, "text": "turn-left ()"}, {"x": 48.0, "y": 1313.0, "w": 61.0, "h": 28.0, "line_num": 33, "text": "def"}, {"x": 116.0, "y": 1311.0, "w": 250.0, "h": 27.0, "line_num": 34, "text": "turn-around () :"}, {"x": 124.0, "y": 1348.0, "w": 170.0, "h": 27.0, "line_num": 35, "text": "turn_left ()"}, {"x": 130.0, "y": 1389.0, "w": 164.0, "h": 29.0, "line_num": 36, "text": "turn_kft ()"}, {"x": 52.0, "y": 1458.0, "w": 406.0, "h": 39.0, "line_num": 37, "text": "if_ name_ == '-main -:"}, {"x": 99.0, "y": 1493.0, "w": 121.0, "h": 30.0, "line_num": 38, "text": "main ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "# 1 karel Problem - Karel home\nfrom Karel. Stanfordkarel import *\n# This program defines a main function which should make karel\n# move to the beeper, pick it up and return home\ndef main () :\n    get_Out ()\n    pick_food ()\n    get back_ home ()\n# pre : Karel facing east, at the corner of starting position\n# post: karel facing east, outside the home, at the position of beeper\ndef get_out () :\n    turn_right ( )\n    move ()\n    turn_left ()\n    move ()\n    move ()\n    move ()\n# post: Karel facing west, at the position of beeper\ndef pick-food ():\n    pick_beeper ()\n    turn- around ()\n# post: Karel facing east, at the corner of starting position\ndef get_ back_home () :\n    move ()\n    Move ()\n    move ()\n    turn right ()\n    move ()\n    turn right ()\ndef turn right () ;\n    for i in range (3) :\n        turn-left ()\ndef\n    turn-around () :\n    turn_left ()\n    turn_kft ()\nif_ name_ == '-main -:\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 41.0, "y": 21.0, "w": 420.0, "h": 33.0, "line_num": 1, "text": "# 1 karel Problem - Karel home", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 69.0, "y": 78.0, "w": 453.0, "h": 31.0, "line_num": 2, "text": "from Karel. Stanfordkarel import *", "delta": 28.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 68.0, "y": 135.0, "w": 937.0, "h": 38.0, "line_num": 3, "text": "# This program defines a main function which should make karel", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 66.0, "y": 170.0, "w": 719.0, "h": 28.0, "line_num": 4, "text": "# move to the beeper, pick it up and return home", "delta": -2.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 75.0, "y": 219.0, "w": 192.0, "h": 28.0, "line_num": 5, "text": "def main () :", "delta": 9.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 136.0, "y": 255.0, "w": 128.0, "h": 24.0, "line_num": 6, "text": "get_Out ()", "delta": 61.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 140.0, "y": 285.0, "w": 140.0, "h": 25.0, "line_num": 7, "text": "pick_food ()", "delta": 4.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 140.0, "y": 314.0, "w": 229.0, "h": 28.0, "line_num": 8, "text": "get back_ home ()", "delta": 0.0, "delta_type": "null", "gaussian_prediction": null, "cluster_label": 1}, {"x": 67.0, "y": 374.0, "w": 835.0, "h": 32.0, "line_num": 9, "text": "# pre : Karel facing east, at the corner of starting position", "delta": -73.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 66.0, "y": 404.0, "w": 943.0, "h": 30.0, "line_num": 10, "text": "# post: karel facing east, outside the home, at the position of beeper", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 67.0, "y": 444.0, "w": 229.0, "h": 32.0, "line_num": 11, "text": "def get_out () :", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 144.0, "y": 484.0, "w": 158.0, "h": 26.0, "line_num": 12, "text": "turn_right ( )", "delta": 77.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 149.0, "y": 518.0, "w": 92.0, "h": 22.0, "line_num": 13, "text": "move ()", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 152.0, "y": 543.0, "w": 158.0, "h": 25.0, "line_num": 14, "text": "turn_left ()", "delta": 3.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 153.0, "y": 577.0, "w": 93.0, "h": 22.0, "line_num": 15, "text": "move ()", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 155.0, "y": 605.0, "w": 98.0, "h": 21.0, "line_num": 16, "text": "move ()", "delta": 2.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 155.0, "y": 632.0, "w": 102.0, "h": 23.0, "line_num": 17, "text": "move ()", "delta": 0.0, "delta_type": "null", "gaussian_prediction": null, "cluster_label": 1}, {"x": 63.0, "y": 690.0, "w": 755.0, "h": 31.0, "line_num": 18, "text": "# post: Karel facing west, at the position of beeper", "delta": -92.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 65.0, "y": 730.0, "w": 244.0, "h": 31.0, "line_num": 19, "text": "def pick-food ():", "delta": 2.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 129.0, "y": 770.0, "w": 184.0, "h": 28.0, "line_num": 20, "text": "pick_beeper ()", "delta": 64.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 132.0, "y": 805.0, "w": 189.0, "h": 24.0, "line_num": 21, "text": "turn- around ()", "delta": 3.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 56.0, "y": 862.0, "w": 880.0, "h": 32.0, "line_num": 22, "text": "# post: Karel facing east, at the corner of starting position", "delta": -76.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 63.0, "y": 906.0, "w": 323.0, "h": 33.0, "line_num": 23, "text": "def get_ back_home () :", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 138.0, "y": 951.0, "w": 98.0, "h": 22.0, "line_num": 24, "text": "move ()", "delta": 75.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 137.0, "y": 992.0, "w": 106.0, "h": 22.0, "line_num": 25, "text": "Move ()", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 136.0, "y": 1028.0, "w": 101.0, "h": 23.0, "line_num": 26, "text": "move ()", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 137.0, "y": 1057.0, "w": 187.0, "h": 26.0, "line_num": 27, "text": "turn right ()", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 136.0, "y": 1097.0, "w": 107.0, "h": 24.0, "line_num": 28, "text": "move ()", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 141.0, "y": 1127.0, "w": 185.0, "h": 23.0, "line_num": 29, "text": "turn right ()", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 42.0, "y": 1174.0, "w": 295.0, "h": 33.0, "line_num": 30, "text": "def turn right () ;", "delta": -99.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 116.0, "y": 1212.0, "w": 271.0, "h": 31.0, "line_num": 31, "text": "for i in range (3) :", "delta": 74.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 173.0, "y": 1246.0, "w": 161.0, "h": 26.0, "line_num": 32, "text": "turn-left ()", "delta": 57.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 48.0, "y": 1313.0, "w": 61.0, "h": 28.0, "line_num": 33, "text": "def", "delta": -125.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 116.0, "y": 1311.0, "w": 250.0, "h": 27.0, "line_num": 34, "text": "turn-around () :", "delta": 68.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 124.0, "y": 1348.0, "w": 170.0, "h": 27.0, "line_num": 35, "text": "turn_left ()", "delta": 8.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 130.0, "y": 1389.0, "w": 164.0, "h": 29.0, "line_num": 36, "text": "turn_kft ()", "delta": 6.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 52.0, "y": 1458.0, "w": 406.0, "h": 39.0, "line_num": 37, "text": "if_ name_ == '-main -:", "delta": -78.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 99.0, "y": 1493.0, "w": 121.0, "h": 30.0, "line_num": 38, "text": "main ()", "delta": 47.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}], "ir_algo_output_edit_distance": 81, "prompting_method": "simple-test3", "lm_post_processed_code": "# 1 karel Problem - Karel home\nfrom karel.stanfordkarel import *\n# This program defines a main function which should make karel\n# move to the beeper, pick it up and return home\n\ndef main():\n    get_out()\n    pick_food()\n    get_back_home()\n# pre : Karel facing east, at the corner of starting position\n# post: karel facing east, outside the home, at the position of beeper\n\ndef get_out():\n    turn_right()\n    move()\n    turn_left()\n    move()\n    move()\n    move()\n# post: Karel facing west, at the position of beeper\n\ndef pick_food():\n    pick_beeper()\n    turn_around()\n# post: Karel facing east, at the corner of starting position\n\ndef get_back_home():\n    move()\n    move()\n    move()\n    turn_right()\n    move()\n    turn_right()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\n\ndef turn_around():\n    turn_left()\n    turn_left()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 10}, {"image_id": 14, "image_height": 1676, "image_width": 2917, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 233.0, "y": 101.0, "w": 1461.0, "h": 205.0, "line_num": 1, "text": "def factorial (n):"}, {"x": 459.0, "y": 355.0, "w": 678.0, "h": 160.0, "line_num": 2, "text": "if n= = 0 :"}, {"x": 725.0, "y": 591.0, "w": 681.0, "h": 136.0, "line_num": 3, "text": "return 1"}, {"x": 451.0, "y": 815.0, "w": 453.0, "h": 151.0, "line_num": 4, "text": "else :"}, {"x": 720.0, "y": 997.0, "w": 2048.0, "h": 170.0, "line_num": 5, "text": "return 1 * factorial (n-1)"}, {"x": 297.0, "y": 1247.0, "w": 1486.0, "h": 201.0, "line_num": 6, "text": "print (factorial (5)"}], "ir_algo_name": "none", "ir_algo_output_code": "def factorial (n):\nif n= = 0 :\nreturn 1\nelse :\nreturn 1 * factorial (n-1)\nprint (factorial (5)", "ir_algo_output_edit_distance": 37, "prompting_method": "none", "lm_post_processed_code": "def factorial (n):\nif n= = 0 :\nreturn 1\nelse :\nreturn 1 * factorial (n-1)\nprint (factorial (5)", "lm_post_processed_edit_distance": 37}, {"image_id": 14, "image_height": 1676, "image_width": 2917, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 233.0, "y": 101.0, "w": 1461.0, "h": 205.0, "line_num": 1, "text": "def factorial (n):"}, {"x": 459.0, "y": 355.0, "w": 678.0, "h": 160.0, "line_num": 2, "text": "if n= = 0 :"}, {"x": 725.0, "y": 591.0, "w": 681.0, "h": 136.0, "line_num": 3, "text": "return 1"}, {"x": 451.0, "y": 815.0, "w": 453.0, "h": 151.0, "line_num": 4, "text": "else :"}, {"x": 720.0, "y": 997.0, "w": 2048.0, "h": 170.0, "line_num": 5, "text": "return 1 * factorial (n-1)"}, {"x": 297.0, "y": 1247.0, "w": 1486.0, "h": 201.0, "line_num": 6, "text": "print (factorial (5)"}], "ir_algo_name": "none", "ir_algo_output_code": "def factorial (n):\nif n= = 0 :\nreturn 1\nelse :\nreturn 1 * factorial (n-1)\nprint (factorial (5)", "ir_algo_output_edit_distance": 37, "prompting_method": "cot-test1", "lm_post_processed_code": "def factorial (n):\nif n == 0 :\nreturn 1\nelse :\nreturn n * factorial (n-1)\nprint (factorial (5))\n", "lm_post_processed_edit_distance": 32}, {"image_id": 14, "image_height": 1676, "image_width": 2917, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 233.0, "y": 101.0, "w": 1461.0, "h": 205.0, "line_num": 1, "text": "def factorial (n):"}, {"x": 459.0, "y": 355.0, "w": 678.0, "h": 160.0, "line_num": 2, "text": "if n= = 0 :"}, {"x": 725.0, "y": 591.0, "w": 681.0, "h": 136.0, "line_num": 3, "text": "return 1"}, {"x": 451.0, "y": 815.0, "w": 453.0, "h": 151.0, "line_num": 4, "text": "else :"}, {"x": 720.0, "y": 997.0, "w": 2048.0, "h": 170.0, "line_num": 5, "text": "return 1 * factorial (n-1)"}, {"x": 297.0, "y": 1247.0, "w": 1486.0, "h": 201.0, "line_num": 6, "text": "print (factorial (5)"}], "ir_algo_name": "none", "ir_algo_output_code": "def factorial (n):\nif n= = 0 :\nreturn 1\nelse :\nreturn 1 * factorial (n-1)\nprint (factorial (5)", "ir_algo_output_edit_distance": 37, "prompting_method": "cot-test5", "lm_post_processed_code": "def factorial(n):\nif n == 0 :\nreturn 1\nelse :\nreturn n * factorial(n-1)\nprint(factorial(5))\n", "lm_post_processed_edit_distance": 28}, {"image_id": 14, "image_height": 1676, "image_width": 2917, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 233.0, "y": 101.0, "w": 1461.0, "h": 205.0, "line_num": 1, "text": "def factorial (n):"}, {"x": 459.0, "y": 355.0, "w": 678.0, "h": 160.0, "line_num": 2, "text": "if n= = 0 :"}, {"x": 725.0, "y": 591.0, "w": 681.0, "h": 136.0, "line_num": 3, "text": "return 1"}, {"x": 451.0, "y": 815.0, "w": 453.0, "h": 151.0, "line_num": 4, "text": "else :"}, {"x": 720.0, "y": 997.0, "w": 2048.0, "h": 170.0, "line_num": 5, "text": "return 1 * factorial (n-1)"}, {"x": 297.0, "y": 1247.0, "w": 1486.0, "h": 201.0, "line_num": 6, "text": "print (factorial (5)"}], "ir_algo_name": "none", "ir_algo_output_code": "def factorial (n):\nif n= = 0 :\nreturn 1\nelse :\nreturn 1 * factorial (n-1)\nprint (factorial (5)", "ir_algo_output_edit_distance": 37, "prompting_method": "simple-test2", "lm_post_processed_code": "def factorial(n):\nif n == 0:\nreturn 1\nelse:\nreturn n * factorial(n-1)\nprint(factorial(5))\n", "lm_post_processed_edit_distance": 26}, {"image_id": 14, "image_height": 1676, "image_width": 2917, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 233.0, "y": 101.0, "w": 1461.0, "h": 205.0, "line_num": 1, "text": "def factorial (n):"}, {"x": 459.0, "y": 355.0, "w": 678.0, "h": 160.0, "line_num": 2, "text": "if n= = 0 :"}, {"x": 725.0, "y": 591.0, "w": 681.0, "h": 136.0, "line_num": 3, "text": "return 1"}, {"x": 451.0, "y": 815.0, "w": 453.0, "h": 151.0, "line_num": 4, "text": "else :"}, {"x": 720.0, "y": 997.0, "w": 2048.0, "h": 170.0, "line_num": 5, "text": "return 1 * factorial (n-1)"}, {"x": 297.0, "y": 1247.0, "w": 1486.0, "h": 201.0, "line_num": 6, "text": "print (factorial (5)"}], "ir_algo_name": "none", "ir_algo_output_code": "def factorial (n):\nif n= = 0 :\nreturn 1\nelse :\nreturn 1 * factorial (n-1)\nprint (factorial (5)", "ir_algo_output_edit_distance": 37, "prompting_method": "simple-test3", "lm_post_processed_code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nprint(factorial(5))\n", "lm_post_processed_edit_distance": 2}, {"image_id": 14, "image_height": 1676, "image_width": 2917, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 233.0, "y": 101.0, "w": 1461.0, "h": 205.0, "line_num": 1, "text": "def factorial (n):"}, {"x": 459.0, "y": 355.0, "w": 678.0, "h": 160.0, "line_num": 2, "text": "if n= = 0 :"}, {"x": 725.0, "y": 591.0, "w": 681.0, "h": 136.0, "line_num": 3, "text": "return 1"}, {"x": 451.0, "y": 815.0, "w": 453.0, "h": 151.0, "line_num": 4, "text": "else :"}, {"x": 720.0, "y": 997.0, "w": 2048.0, "h": 170.0, "line_num": 5, "text": "return 1 * factorial (n-1)"}, {"x": 297.0, "y": 1247.0, "w": 1486.0, "h": 201.0, "line_num": 6, "text": "print (factorial (5)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 255.75, "ir_algo_output_code": "def factorial (n):\nif n= = 0 :\n    return 1\nelse :\n    return 1 * factorial (n-1)\nprint (factorial (5)\n", "ir_algo_output_indented_lines": [{"x": 233.0, "y": 101.0, "w": 1461.0, "h": 205.0, "line_num": 1, "text": "def factorial (n):", "cluster_label": 0, "indentation": 0}, {"x": 459.0, "y": 355.0, "w": 678.0, "h": 160.0, "line_num": 2, "text": "if n= = 0 :", "cluster_label": 0, "indentation": 0}, {"x": 725.0, "y": 591.0, "w": 681.0, "h": 136.0, "line_num": 3, "text": "return 1", "cluster_label": 1, "indentation": 1}, {"x": 451.0, "y": 815.0, "w": 453.0, "h": 151.0, "line_num": 4, "text": "else :", "cluster_label": 0, "indentation": 0}, {"x": 720.0, "y": 997.0, "w": 2048.0, "h": 170.0, "line_num": 5, "text": "return 1 * factorial (n-1)", "cluster_label": 1, "indentation": 1}, {"x": 297.0, "y": 1247.0, "w": 1486.0, "h": 201.0, "line_num": 6, "text": "print (factorial (5)", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 28, "prompting_method": "none", "lm_post_processed_code": "def factorial (n):\nif n= = 0 :\n    return 1\nelse :\n    return 1 * factorial (n-1)\nprint (factorial (5)\n", "lm_post_processed_edit_distance": 28}, {"image_id": 14, "image_height": 1676, "image_width": 2917, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 233.0, "y": 101.0, "w": 1461.0, "h": 205.0, "line_num": 1, "text": "def factorial (n):"}, {"x": 459.0, "y": 355.0, "w": 678.0, "h": 160.0, "line_num": 2, "text": "if n= = 0 :"}, {"x": 725.0, "y": 591.0, "w": 681.0, "h": 136.0, "line_num": 3, "text": "return 1"}, {"x": 451.0, "y": 815.0, "w": 453.0, "h": 151.0, "line_num": 4, "text": "else :"}, {"x": 720.0, "y": 997.0, "w": 2048.0, "h": 170.0, "line_num": 5, "text": "return 1 * factorial (n-1)"}, {"x": 297.0, "y": 1247.0, "w": 1486.0, "h": 201.0, "line_num": 6, "text": "print (factorial (5)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 255.75, "ir_algo_output_code": "def factorial (n):\nif n= = 0 :\n    return 1\nelse :\n    return 1 * factorial (n-1)\nprint (factorial (5)\n", "ir_algo_output_indented_lines": [{"x": 233.0, "y": 101.0, "w": 1461.0, "h": 205.0, "line_num": 1, "text": "def factorial (n):", "cluster_label": 0, "indentation": 0}, {"x": 459.0, "y": 355.0, "w": 678.0, "h": 160.0, "line_num": 2, "text": "if n= = 0 :", "cluster_label": 0, "indentation": 0}, {"x": 725.0, "y": 591.0, "w": 681.0, "h": 136.0, "line_num": 3, "text": "return 1", "cluster_label": 1, "indentation": 1}, {"x": 451.0, "y": 815.0, "w": 453.0, "h": 151.0, "line_num": 4, "text": "else :", "cluster_label": 0, "indentation": 0}, {"x": 720.0, "y": 997.0, "w": 2048.0, "h": 170.0, "line_num": 5, "text": "return 1 * factorial (n-1)", "cluster_label": 1, "indentation": 1}, {"x": 297.0, "y": 1247.0, "w": 1486.0, "h": 201.0, "line_num": 6, "text": "print (factorial (5)", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 28, "prompting_method": "cot-test1", "lm_post_processed_code": "def factorial (n):\nif n == 0 :\n    return 1\nelse :\n    return 1 * factorial (n-1)\nprint (factorial (5))\n", "lm_post_processed_edit_distance": 25}, {"image_id": 14, "image_height": 1676, "image_width": 2917, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 233.0, "y": 101.0, "w": 1461.0, "h": 205.0, "line_num": 1, "text": "def factorial (n):"}, {"x": 459.0, "y": 355.0, "w": 678.0, "h": 160.0, "line_num": 2, "text": "if n= = 0 :"}, {"x": 725.0, "y": 591.0, "w": 681.0, "h": 136.0, "line_num": 3, "text": "return 1"}, {"x": 451.0, "y": 815.0, "w": 453.0, "h": 151.0, "line_num": 4, "text": "else :"}, {"x": 720.0, "y": 997.0, "w": 2048.0, "h": 170.0, "line_num": 5, "text": "return 1 * factorial (n-1)"}, {"x": 297.0, "y": 1247.0, "w": 1486.0, "h": 201.0, "line_num": 6, "text": "print (factorial (5)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 255.75, "ir_algo_output_code": "def factorial (n):\nif n= = 0 :\n    return 1\nelse :\n    return 1 * factorial (n-1)\nprint (factorial (5)\n", "ir_algo_output_indented_lines": [{"x": 233.0, "y": 101.0, "w": 1461.0, "h": 205.0, "line_num": 1, "text": "def factorial (n):", "cluster_label": 0, "indentation": 0}, {"x": 459.0, "y": 355.0, "w": 678.0, "h": 160.0, "line_num": 2, "text": "if n= = 0 :", "cluster_label": 0, "indentation": 0}, {"x": 725.0, "y": 591.0, "w": 681.0, "h": 136.0, "line_num": 3, "text": "return 1", "cluster_label": 1, "indentation": 1}, {"x": 451.0, "y": 815.0, "w": 453.0, "h": 151.0, "line_num": 4, "text": "else :", "cluster_label": 0, "indentation": 0}, {"x": 720.0, "y": 997.0, "w": 2048.0, "h": 170.0, "line_num": 5, "text": "return 1 * factorial (n-1)", "cluster_label": 1, "indentation": 1}, {"x": 297.0, "y": 1247.0, "w": 1486.0, "h": 201.0, "line_num": 6, "text": "print (factorial (5)", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 28, "prompting_method": "cot-test5", "lm_post_processed_code": "def factorial(n):\nif n == 0 :\n    return 1\nelse :\n    return 1 * factorial(n-1)\nprint(factorial(5))\n", "lm_post_processed_edit_distance": 21}, {"image_id": 14, "image_height": 1676, "image_width": 2917, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 233.0, "y": 101.0, "w": 1461.0, "h": 205.0, "line_num": 1, "text": "def factorial (n):"}, {"x": 459.0, "y": 355.0, "w": 678.0, "h": 160.0, "line_num": 2, "text": "if n= = 0 :"}, {"x": 725.0, "y": 591.0, "w": 681.0, "h": 136.0, "line_num": 3, "text": "return 1"}, {"x": 451.0, "y": 815.0, "w": 453.0, "h": 151.0, "line_num": 4, "text": "else :"}, {"x": 720.0, "y": 997.0, "w": 2048.0, "h": 170.0, "line_num": 5, "text": "return 1 * factorial (n-1)"}, {"x": 297.0, "y": 1247.0, "w": 1486.0, "h": 201.0, "line_num": 6, "text": "print (factorial (5)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 255.75, "ir_algo_output_code": "def factorial (n):\nif n= = 0 :\n    return 1\nelse :\n    return 1 * factorial (n-1)\nprint (factorial (5)\n", "ir_algo_output_indented_lines": [{"x": 233.0, "y": 101.0, "w": 1461.0, "h": 205.0, "line_num": 1, "text": "def factorial (n):", "cluster_label": 0, "indentation": 0}, {"x": 459.0, "y": 355.0, "w": 678.0, "h": 160.0, "line_num": 2, "text": "if n= = 0 :", "cluster_label": 0, "indentation": 0}, {"x": 725.0, "y": 591.0, "w": 681.0, "h": 136.0, "line_num": 3, "text": "return 1", "cluster_label": 1, "indentation": 1}, {"x": 451.0, "y": 815.0, "w": 453.0, "h": 151.0, "line_num": 4, "text": "else :", "cluster_label": 0, "indentation": 0}, {"x": 720.0, "y": 997.0, "w": 2048.0, "h": 170.0, "line_num": 5, "text": "return 1 * factorial (n-1)", "cluster_label": 1, "indentation": 1}, {"x": 297.0, "y": 1247.0, "w": 1486.0, "h": 201.0, "line_num": 6, "text": "print (factorial (5)", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 28, "prompting_method": "simple-test2", "lm_post_processed_code": "def factorial(n):\nif n == 0:\n    return 1\nelse:\n    return n * factorial(n-1)\nprint(factorial(5))\n", "lm_post_processed_edit_distance": 18}, {"image_id": 14, "image_height": 1676, "image_width": 2917, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 233.0, "y": 101.0, "w": 1461.0, "h": 205.0, "line_num": 1, "text": "def factorial (n):"}, {"x": 459.0, "y": 355.0, "w": 678.0, "h": 160.0, "line_num": 2, "text": "if n= = 0 :"}, {"x": 725.0, "y": 591.0, "w": 681.0, "h": 136.0, "line_num": 3, "text": "return 1"}, {"x": 451.0, "y": 815.0, "w": 453.0, "h": 151.0, "line_num": 4, "text": "else :"}, {"x": 720.0, "y": 997.0, "w": 2048.0, "h": 170.0, "line_num": 5, "text": "return 1 * factorial (n-1)"}, {"x": 297.0, "y": 1247.0, "w": 1486.0, "h": 201.0, "line_num": 6, "text": "print (factorial (5)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 255.75, "ir_algo_output_code": "def factorial (n):\nif n= = 0 :\n    return 1\nelse :\n    return 1 * factorial (n-1)\nprint (factorial (5)\n", "ir_algo_output_indented_lines": [{"x": 233.0, "y": 101.0, "w": 1461.0, "h": 205.0, "line_num": 1, "text": "def factorial (n):", "cluster_label": 0, "indentation": 0}, {"x": 459.0, "y": 355.0, "w": 678.0, "h": 160.0, "line_num": 2, "text": "if n= = 0 :", "cluster_label": 0, "indentation": 0}, {"x": 725.0, "y": 591.0, "w": 681.0, "h": 136.0, "line_num": 3, "text": "return 1", "cluster_label": 1, "indentation": 1}, {"x": 451.0, "y": 815.0, "w": 453.0, "h": 151.0, "line_num": 4, "text": "else :", "cluster_label": 0, "indentation": 0}, {"x": 720.0, "y": 997.0, "w": 2048.0, "h": 170.0, "line_num": 5, "text": "return 1 * factorial (n-1)", "cluster_label": 1, "indentation": 1}, {"x": 297.0, "y": 1247.0, "w": 1486.0, "h": 201.0, "line_num": 6, "text": "print (factorial (5)", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 28, "prompting_method": "simple-test3", "lm_post_processed_code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nprint(factorial(5))\n", "lm_post_processed_edit_distance": 2}, {"image_id": 14, "image_height": 1676, "image_width": 2917, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 233.0, "y": 101.0, "w": 1461.0, "h": 205.0, "line_num": 1, "text": "def factorial (n):"}, {"x": 459.0, "y": 355.0, "w": 678.0, "h": 160.0, "line_num": 2, "text": "if n= = 0 :"}, {"x": 725.0, "y": 591.0, "w": 681.0, "h": 136.0, "line_num": 3, "text": "return 1"}, {"x": 451.0, "y": 815.0, "w": 453.0, "h": 151.0, "line_num": 4, "text": "else :"}, {"x": 720.0, "y": 997.0, "w": 2048.0, "h": 170.0, "line_num": 5, "text": "return 1 * factorial (n-1)"}, {"x": 297.0, "y": 1247.0, "w": 1486.0, "h": 201.0, "line_num": 6, "text": "print (factorial (5)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def factorial (n):\n    if n= = 0 :\n        return 1\n    else :\n        return 1 * factorial (n-1)\nprint (factorial (5)\n", "ir_algo_output_indented_lines": [{"x": 233.0, "y": 101.0, "w": 1461.0, "h": 205.0, "line_num": 1, "text": "def factorial (n):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 459.0, "y": 355.0, "w": 678.0, "h": 160.0, "line_num": 2, "text": "if n= = 0 :", "delta": 226.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 725.0, "y": 591.0, "w": 681.0, "h": 136.0, "line_num": 3, "text": "return 1", "delta": 266.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 451.0, "y": 815.0, "w": 453.0, "h": 151.0, "line_num": 4, "text": "else :", "delta": -274.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 720.0, "y": 997.0, "w": 2048.0, "h": 170.0, "line_num": 5, "text": "return 1 * factorial (n-1)", "delta": 269.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 297.0, "y": 1247.0, "w": 1486.0, "h": 201.0, "line_num": 6, "text": "print (factorial (5)", "delta": -423.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 12, "prompting_method": "none", "lm_post_processed_code": "def factorial (n):\n    if n= = 0 :\n        return 1\n    else :\n        return 1 * factorial (n-1)\nprint (factorial (5)\n", "lm_post_processed_edit_distance": 12}, {"image_id": 14, "image_height": 1676, "image_width": 2917, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 233.0, "y": 101.0, "w": 1461.0, "h": 205.0, "line_num": 1, "text": "def factorial (n):"}, {"x": 459.0, "y": 355.0, "w": 678.0, "h": 160.0, "line_num": 2, "text": "if n= = 0 :"}, {"x": 725.0, "y": 591.0, "w": 681.0, "h": 136.0, "line_num": 3, "text": "return 1"}, {"x": 451.0, "y": 815.0, "w": 453.0, "h": 151.0, "line_num": 4, "text": "else :"}, {"x": 720.0, "y": 997.0, "w": 2048.0, "h": 170.0, "line_num": 5, "text": "return 1 * factorial (n-1)"}, {"x": 297.0, "y": 1247.0, "w": 1486.0, "h": 201.0, "line_num": 6, "text": "print (factorial (5)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def factorial (n):\n    if n= = 0 :\n        return 1\n    else :\n        return 1 * factorial (n-1)\nprint (factorial (5)\n", "ir_algo_output_indented_lines": [{"x": 233.0, "y": 101.0, "w": 1461.0, "h": 205.0, "line_num": 1, "text": "def factorial (n):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 459.0, "y": 355.0, "w": 678.0, "h": 160.0, "line_num": 2, "text": "if n= = 0 :", "delta": 226.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 725.0, "y": 591.0, "w": 681.0, "h": 136.0, "line_num": 3, "text": "return 1", "delta": 266.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 451.0, "y": 815.0, "w": 453.0, "h": 151.0, "line_num": 4, "text": "else :", "delta": -274.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 720.0, "y": 997.0, "w": 2048.0, "h": 170.0, "line_num": 5, "text": "return 1 * factorial (n-1)", "delta": 269.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 297.0, "y": 1247.0, "w": 1486.0, "h": 201.0, "line_num": 6, "text": "print (factorial (5)", "delta": -423.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 12, "prompting_method": "cot-test1", "lm_post_processed_code": "def factorial (n):\n    if n == 0 :\n        return 1\n    else :\n        return 1 * factorial (n-1)\nprint (factorial (5))\n", "lm_post_processed_edit_distance": 9}, {"image_id": 14, "image_height": 1676, "image_width": 2917, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 233.0, "y": 101.0, "w": 1461.0, "h": 205.0, "line_num": 1, "text": "def factorial (n):"}, {"x": 459.0, "y": 355.0, "w": 678.0, "h": 160.0, "line_num": 2, "text": "if n= = 0 :"}, {"x": 725.0, "y": 591.0, "w": 681.0, "h": 136.0, "line_num": 3, "text": "return 1"}, {"x": 451.0, "y": 815.0, "w": 453.0, "h": 151.0, "line_num": 4, "text": "else :"}, {"x": 720.0, "y": 997.0, "w": 2048.0, "h": 170.0, "line_num": 5, "text": "return 1 * factorial (n-1)"}, {"x": 297.0, "y": 1247.0, "w": 1486.0, "h": 201.0, "line_num": 6, "text": "print (factorial (5)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def factorial (n):\n    if n= = 0 :\n        return 1\n    else :\n        return 1 * factorial (n-1)\nprint (factorial (5)\n", "ir_algo_output_indented_lines": [{"x": 233.0, "y": 101.0, "w": 1461.0, "h": 205.0, "line_num": 1, "text": "def factorial (n):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 459.0, "y": 355.0, "w": 678.0, "h": 160.0, "line_num": 2, "text": "if n= = 0 :", "delta": 226.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 725.0, "y": 591.0, "w": 681.0, "h": 136.0, "line_num": 3, "text": "return 1", "delta": 266.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 451.0, "y": 815.0, "w": 453.0, "h": 151.0, "line_num": 4, "text": "else :", "delta": -274.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 720.0, "y": 997.0, "w": 2048.0, "h": 170.0, "line_num": 5, "text": "return 1 * factorial (n-1)", "delta": 269.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 297.0, "y": 1247.0, "w": 1486.0, "h": 201.0, "line_num": 6, "text": "print (factorial (5)", "delta": -423.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 12, "prompting_method": "cot-test5", "lm_post_processed_code": "def factorial (n):\n    if n == 0 :\n        return 1\n    else :\n        return 1 * factorial (n-1)\nprint (factorial (5))\n", "lm_post_processed_edit_distance": 9}, {"image_id": 14, "image_height": 1676, "image_width": 2917, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 233.0, "y": 101.0, "w": 1461.0, "h": 205.0, "line_num": 1, "text": "def factorial (n):"}, {"x": 459.0, "y": 355.0, "w": 678.0, "h": 160.0, "line_num": 2, "text": "if n= = 0 :"}, {"x": 725.0, "y": 591.0, "w": 681.0, "h": 136.0, "line_num": 3, "text": "return 1"}, {"x": 451.0, "y": 815.0, "w": 453.0, "h": 151.0, "line_num": 4, "text": "else :"}, {"x": 720.0, "y": 997.0, "w": 2048.0, "h": 170.0, "line_num": 5, "text": "return 1 * factorial (n-1)"}, {"x": 297.0, "y": 1247.0, "w": 1486.0, "h": 201.0, "line_num": 6, "text": "print (factorial (5)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def factorial (n):\n    if n= = 0 :\n        return 1\n    else :\n        return 1 * factorial (n-1)\nprint (factorial (5)\n", "ir_algo_output_indented_lines": [{"x": 233.0, "y": 101.0, "w": 1461.0, "h": 205.0, "line_num": 1, "text": "def factorial (n):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 459.0, "y": 355.0, "w": 678.0, "h": 160.0, "line_num": 2, "text": "if n= = 0 :", "delta": 226.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 725.0, "y": 591.0, "w": 681.0, "h": 136.0, "line_num": 3, "text": "return 1", "delta": 266.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 451.0, "y": 815.0, "w": 453.0, "h": 151.0, "line_num": 4, "text": "else :", "delta": -274.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 720.0, "y": 997.0, "w": 2048.0, "h": 170.0, "line_num": 5, "text": "return 1 * factorial (n-1)", "delta": 269.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 297.0, "y": 1247.0, "w": 1486.0, "h": 201.0, "line_num": 6, "text": "print (factorial (5)", "delta": -423.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 12, "prompting_method": "simple-test2", "lm_post_processed_code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nprint(factorial(5))\n", "lm_post_processed_edit_distance": 2}, {"image_id": 14, "image_height": 1676, "image_width": 2917, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 233.0, "y": 101.0, "w": 1461.0, "h": 205.0, "line_num": 1, "text": "def factorial (n):"}, {"x": 459.0, "y": 355.0, "w": 678.0, "h": 160.0, "line_num": 2, "text": "if n= = 0 :"}, {"x": 725.0, "y": 591.0, "w": 681.0, "h": 136.0, "line_num": 3, "text": "return 1"}, {"x": 451.0, "y": 815.0, "w": 453.0, "h": 151.0, "line_num": 4, "text": "else :"}, {"x": 720.0, "y": 997.0, "w": 2048.0, "h": 170.0, "line_num": 5, "text": "return 1 * factorial (n-1)"}, {"x": 297.0, "y": 1247.0, "w": 1486.0, "h": 201.0, "line_num": 6, "text": "print (factorial (5)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def factorial (n):\n    if n= = 0 :\n        return 1\n    else :\n        return 1 * factorial (n-1)\nprint (factorial (5)\n", "ir_algo_output_indented_lines": [{"x": 233.0, "y": 101.0, "w": 1461.0, "h": 205.0, "line_num": 1, "text": "def factorial (n):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 459.0, "y": 355.0, "w": 678.0, "h": 160.0, "line_num": 2, "text": "if n= = 0 :", "delta": 226.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 725.0, "y": 591.0, "w": 681.0, "h": 136.0, "line_num": 3, "text": "return 1", "delta": 266.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 451.0, "y": 815.0, "w": 453.0, "h": 151.0, "line_num": 4, "text": "else :", "delta": -274.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 720.0, "y": 997.0, "w": 2048.0, "h": 170.0, "line_num": 5, "text": "return 1 * factorial (n-1)", "delta": 269.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 297.0, "y": 1247.0, "w": 1486.0, "h": 201.0, "line_num": 6, "text": "print (factorial (5)", "delta": -423.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 12, "prompting_method": "simple-test3", "lm_post_processed_code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nprint(factorial(5))\n", "lm_post_processed_edit_distance": 2}, {"image_id": 15, "image_height": 1565, "image_width": 1186, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 1151.0, "y": 37.0, "w": 22.0, "h": 0.0, "line_num": 1, "text": "det main () :"}, {"x": 1043.0, "y": 271.0, "w": 65.0, "h": 1.0, "line_num": 2, "text": "list 1 = [1, 2,3,4]"}, {"x": 921.0, "y": 281.0, "w": 23.0, "h": 2.0, "line_num": 3, "text": "list 2 ="}, {"x": 965.0, "y": 589.0, "w": 29.0, "h": 6.0, "line_num": 4, "text": "(3,4,5,6)"}, {"x": 854.0, "y": 276.0, "w": 19.0, "h": 1.0, "line_num": 5, "text": "List = []"}, {"x": 782.0, "y": 277.0, "w": 68.0, "h": 5.0, "line_num": 6, "text": "for elem1 in list 1?"}, {"x": 678.0, "y": 434.0, "w": 69.0, "h": 7.0, "line_num": 7, "text": "for eleme in list2:"}, {"x": 583.0, "y": 640.0, "w": 76.0, "h": 3.0, "line_num": 8, "text": "it elem1 = = elem2:"}, {"x": 499.0, "y": 871.0, "w": 51.0, "h": 2.0, "line_num": 9, "text": "elem = elema"}, {"x": 381.0, "y": 871.0, "w": 74.0, "h": 7.0, "line_num": 10, "text": "list. append (elem)"}, {"x": 206.0, "y": 347.0, "w": 59.0, "h": 8.0, "line_num": 11, "text": "print (ist)"}], "ir_algo_name": "none", "ir_algo_output_code": "det main () :\nlist 1 = [1, 2,3,4]\nlist 2 =\n(3,4,5,6)\nList = []\nfor elem1 in list 1?\nfor eleme in list2:\nit elem1 = = elem2:\nelem = elema\nlist. append (elem)\nprint (ist)", "ir_algo_output_edit_distance": 97, "prompting_method": "none", "lm_post_processed_code": "det main () :\nlist 1 = [1, 2,3,4]\nlist 2 =\n(3,4,5,6)\nList = []\nfor elem1 in list 1?\nfor eleme in list2:\nit elem1 = = elem2:\nelem = elema\nlist. append (elem)\nprint (ist)", "lm_post_processed_edit_distance": 97}, {"image_id": 15, "image_height": 1565, "image_width": 1186, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 1151.0, "y": 37.0, "w": 22.0, "h": 0.0, "line_num": 1, "text": "det main () :"}, {"x": 1043.0, "y": 271.0, "w": 65.0, "h": 1.0, "line_num": 2, "text": "list 1 = [1, 2,3,4]"}, {"x": 921.0, "y": 281.0, "w": 23.0, "h": 2.0, "line_num": 3, "text": "list 2 ="}, {"x": 965.0, "y": 589.0, "w": 29.0, "h": 6.0, "line_num": 4, "text": "(3,4,5,6)"}, {"x": 854.0, "y": 276.0, "w": 19.0, "h": 1.0, "line_num": 5, "text": "List = []"}, {"x": 782.0, "y": 277.0, "w": 68.0, "h": 5.0, "line_num": 6, "text": "for elem1 in list 1?"}, {"x": 678.0, "y": 434.0, "w": 69.0, "h": 7.0, "line_num": 7, "text": "for eleme in list2:"}, {"x": 583.0, "y": 640.0, "w": 76.0, "h": 3.0, "line_num": 8, "text": "it elem1 = = elem2:"}, {"x": 499.0, "y": 871.0, "w": 51.0, "h": 2.0, "line_num": 9, "text": "elem = elema"}, {"x": 381.0, "y": 871.0, "w": 74.0, "h": 7.0, "line_num": 10, "text": "list. append (elem)"}, {"x": 206.0, "y": 347.0, "w": 59.0, "h": 8.0, "line_num": 11, "text": "print (ist)"}], "ir_algo_name": "none", "ir_algo_output_code": "det main () :\nlist 1 = [1, 2,3,4]\nlist 2 =\n(3,4,5,6)\nList = []\nfor elem1 in list 1?\nfor eleme in list2:\nit elem1 = = elem2:\nelem = elema\nlist. append (elem)\nprint (ist)", "ir_algo_output_edit_distance": 97, "prompting_method": "cot-test1", "lm_post_processed_code": "def main() :\n    list1 = [1, 2,3,4]\n    list2 = [3,4,5,6]\n    List = []\n    for elem1 in list1:\n        for elem2 in list2:\n            if elem1 == elem2:\n                elem = elem2\n                List.append(elem)\n    print(List)\n", "lm_post_processed_edit_distance": 10}, {"image_id": 15, "image_height": 1565, "image_width": 1186, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 1151.0, "y": 37.0, "w": 22.0, "h": 0.0, "line_num": 1, "text": "det main () :"}, {"x": 1043.0, "y": 271.0, "w": 65.0, "h": 1.0, "line_num": 2, "text": "list 1 = [1, 2,3,4]"}, {"x": 921.0, "y": 281.0, "w": 23.0, "h": 2.0, "line_num": 3, "text": "list 2 ="}, {"x": 965.0, "y": 589.0, "w": 29.0, "h": 6.0, "line_num": 4, "text": "(3,4,5,6)"}, {"x": 854.0, "y": 276.0, "w": 19.0, "h": 1.0, "line_num": 5, "text": "List = []"}, {"x": 782.0, "y": 277.0, "w": 68.0, "h": 5.0, "line_num": 6, "text": "for elem1 in list 1?"}, {"x": 678.0, "y": 434.0, "w": 69.0, "h": 7.0, "line_num": 7, "text": "for eleme in list2:"}, {"x": 583.0, "y": 640.0, "w": 76.0, "h": 3.0, "line_num": 8, "text": "it elem1 = = elem2:"}, {"x": 499.0, "y": 871.0, "w": 51.0, "h": 2.0, "line_num": 9, "text": "elem = elema"}, {"x": 381.0, "y": 871.0, "w": 74.0, "h": 7.0, "line_num": 10, "text": "list. append (elem)"}, {"x": 206.0, "y": 347.0, "w": 59.0, "h": 8.0, "line_num": 11, "text": "print (ist)"}], "ir_algo_name": "none", "ir_algo_output_code": "det main () :\nlist 1 = [1, 2,3,4]\nlist 2 =\n(3,4,5,6)\nList = []\nfor elem1 in list 1?\nfor eleme in list2:\nit elem1 = = elem2:\nelem = elema\nlist. append (elem)\nprint (ist)", "ir_algo_output_edit_distance": 97, "prompting_method": "cot-test5", "lm_post_processed_code": "def main():\nlist1 = [1, 2,3,4]\nlist2 = [3,4,5,6]\nList = []\nfor elem1 in list1:\nfor elem2 in list2:\nif elem1 == elem2:\nelem = elem2\nList.append(elem)\nprint(List)\n", "lm_post_processed_edit_distance": 81}, {"image_id": 15, "image_height": 1565, "image_width": 1186, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 1151.0, "y": 37.0, "w": 22.0, "h": 0.0, "line_num": 1, "text": "det main () :"}, {"x": 1043.0, "y": 271.0, "w": 65.0, "h": 1.0, "line_num": 2, "text": "list 1 = [1, 2,3,4]"}, {"x": 921.0, "y": 281.0, "w": 23.0, "h": 2.0, "line_num": 3, "text": "list 2 ="}, {"x": 965.0, "y": 589.0, "w": 29.0, "h": 6.0, "line_num": 4, "text": "(3,4,5,6)"}, {"x": 854.0, "y": 276.0, "w": 19.0, "h": 1.0, "line_num": 5, "text": "List = []"}, {"x": 782.0, "y": 277.0, "w": 68.0, "h": 5.0, "line_num": 6, "text": "for elem1 in list 1?"}, {"x": 678.0, "y": 434.0, "w": 69.0, "h": 7.0, "line_num": 7, "text": "for eleme in list2:"}, {"x": 583.0, "y": 640.0, "w": 76.0, "h": 3.0, "line_num": 8, "text": "it elem1 = = elem2:"}, {"x": 499.0, "y": 871.0, "w": 51.0, "h": 2.0, "line_num": 9, "text": "elem = elema"}, {"x": 381.0, "y": 871.0, "w": 74.0, "h": 7.0, "line_num": 10, "text": "list. append (elem)"}, {"x": 206.0, "y": 347.0, "w": 59.0, "h": 8.0, "line_num": 11, "text": "print (ist)"}], "ir_algo_name": "none", "ir_algo_output_code": "det main () :\nlist 1 = [1, 2,3,4]\nlist 2 =\n(3,4,5,6)\nList = []\nfor elem1 in list 1?\nfor eleme in list2:\nit elem1 = = elem2:\nelem = elema\nlist. append (elem)\nprint (ist)", "ir_algo_output_edit_distance": 97, "prompting_method": "simple-test2", "lm_post_processed_code": "def main():\n    list1 = [1, 2,3,4]\n    list2 = [3,4,5,6]\n    List = []\n    for elem1 in list1:\n        for elem2 in list2:\n            if elem1 == elem2:\n                elem = elem1\n                List.append(elem)\n    print(List)\n    return\n", "lm_post_processed_edit_distance": 19}, {"image_id": 15, "image_height": 1565, "image_width": 1186, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 1151.0, "y": 37.0, "w": 22.0, "h": 0.0, "line_num": 1, "text": "det main () :"}, {"x": 1043.0, "y": 271.0, "w": 65.0, "h": 1.0, "line_num": 2, "text": "list 1 = [1, 2,3,4]"}, {"x": 921.0, "y": 281.0, "w": 23.0, "h": 2.0, "line_num": 3, "text": "list 2 ="}, {"x": 965.0, "y": 589.0, "w": 29.0, "h": 6.0, "line_num": 4, "text": "(3,4,5,6)"}, {"x": 854.0, "y": 276.0, "w": 19.0, "h": 1.0, "line_num": 5, "text": "List = []"}, {"x": 782.0, "y": 277.0, "w": 68.0, "h": 5.0, "line_num": 6, "text": "for elem1 in list 1?"}, {"x": 678.0, "y": 434.0, "w": 69.0, "h": 7.0, "line_num": 7, "text": "for eleme in list2:"}, {"x": 583.0, "y": 640.0, "w": 76.0, "h": 3.0, "line_num": 8, "text": "it elem1 = = elem2:"}, {"x": 499.0, "y": 871.0, "w": 51.0, "h": 2.0, "line_num": 9, "text": "elem = elema"}, {"x": 381.0, "y": 871.0, "w": 74.0, "h": 7.0, "line_num": 10, "text": "list. append (elem)"}, {"x": 206.0, "y": 347.0, "w": 59.0, "h": 8.0, "line_num": 11, "text": "print (ist)"}], "ir_algo_name": "none", "ir_algo_output_code": "det main () :\nlist 1 = [1, 2,3,4]\nlist 2 =\n(3,4,5,6)\nList = []\nfor elem1 in list 1?\nfor eleme in list2:\nit elem1 = = elem2:\nelem = elema\nlist. append (elem)\nprint (ist)", "ir_algo_output_edit_distance": 97, "prompting_method": "simple-test3", "lm_post_processed_code": "def main():\n    list1 = [1, 2,3,4]\n    list2 = (3,4,5,6)\n    List = []\n    for elem1 in list1:\n        for elem2 in list2:\n            if elem1 == elem2:\n                elem = elem1\n                List.append(elem)\n    print(List)\n    return\n", "lm_post_processed_edit_distance": 21}, {"image_id": 15, "image_height": 1565, "image_width": 1186, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 1151.0, "y": 37.0, "w": 22.0, "h": 0.0, "line_num": 1, "text": "det main () :"}, {"x": 1043.0, "y": 271.0, "w": 65.0, "h": 1.0, "line_num": 2, "text": "list 1 = [1, 2,3,4]"}, {"x": 921.0, "y": 281.0, "w": 23.0, "h": 2.0, "line_num": 3, "text": "list 2 ="}, {"x": 965.0, "y": 589.0, "w": 29.0, "h": 6.0, "line_num": 4, "text": "(3,4,5,6)"}, {"x": 854.0, "y": 276.0, "w": 19.0, "h": 1.0, "line_num": 5, "text": "List = []"}, {"x": 782.0, "y": 277.0, "w": 68.0, "h": 5.0, "line_num": 6, "text": "for elem1 in list 1?"}, {"x": 678.0, "y": 434.0, "w": 69.0, "h": 7.0, "line_num": 7, "text": "for eleme in list2:"}, {"x": 583.0, "y": 640.0, "w": 76.0, "h": 3.0, "line_num": 8, "text": "it elem1 = = elem2:"}, {"x": 499.0, "y": 871.0, "w": 51.0, "h": 2.0, "line_num": 9, "text": "elem = elema"}, {"x": 381.0, "y": 871.0, "w": 74.0, "h": 7.0, "line_num": 10, "text": "list. append (elem)"}, {"x": 206.0, "y": 347.0, "w": 59.0, "h": 8.0, "line_num": 11, "text": "print (ist)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 5.7272727272727275, "ir_algo_output_code": "                                        det main () :\n                                    list 1 = [1, 2,3,4]\n                            list 2 =\n                                (3,4,5,6)\n                        List = []\n                    for elem1 in list 1?\n                for eleme in list2:\n            it elem1 = = elem2:\n        elem = elema\n    list. append (elem)\nprint (ist)\n", "ir_algo_output_indented_lines": [{"x": 1151.0, "y": 37.0, "w": 22.0, "h": 0.0, "line_num": 1, "text": "det main () :", "cluster_label": 0, "indentation": 10}, {"x": 1043.0, "y": 271.0, "w": 65.0, "h": 1.0, "line_num": 2, "text": "list 1 = [1, 2,3,4]", "cluster_label": 1, "indentation": 9}, {"x": 921.0, "y": 281.0, "w": 23.0, "h": 2.0, "line_num": 3, "text": "list 2 =", "cluster_label": 3, "indentation": 7}, {"x": 965.0, "y": 589.0, "w": 29.0, "h": 6.0, "line_num": 4, "text": "(3,4,5,6)", "cluster_label": 2, "indentation": 8}, {"x": 854.0, "y": 276.0, "w": 19.0, "h": 1.0, "line_num": 5, "text": "List = []", "cluster_label": 4, "indentation": 6}, {"x": 782.0, "y": 277.0, "w": 68.0, "h": 5.0, "line_num": 6, "text": "for elem1 in list 1?", "cluster_label": 5, "indentation": 5}, {"x": 678.0, "y": 434.0, "w": 69.0, "h": 7.0, "line_num": 7, "text": "for eleme in list2:", "cluster_label": 6, "indentation": 4}, {"x": 583.0, "y": 640.0, "w": 76.0, "h": 3.0, "line_num": 8, "text": "it elem1 = = elem2:", "cluster_label": 7, "indentation": 3}, {"x": 499.0, "y": 871.0, "w": 51.0, "h": 2.0, "line_num": 9, "text": "elem = elema", "cluster_label": 8, "indentation": 2}, {"x": 381.0, "y": 871.0, "w": 74.0, "h": 7.0, "line_num": 10, "text": "list. append (elem)", "cluster_label": 9, "indentation": 1}, {"x": 206.0, "y": 347.0, "w": 59.0, "h": 8.0, "line_num": 11, "text": "print (ist)", "cluster_label": 10, "indentation": 0}], "ir_algo_output_edit_distance": 214, "prompting_method": "none", "lm_post_processed_code": "                                        det main () :\n                                    list 1 = [1, 2,3,4]\n                            list 2 =\n                                (3,4,5,6)\n                        List = []\n                    for elem1 in list 1?\n                for eleme in list2:\n            it elem1 = = elem2:\n        elem = elema\n    list. append (elem)\nprint (ist)\n", "lm_post_processed_edit_distance": 214}, {"image_id": 15, "image_height": 1565, "image_width": 1186, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 1151.0, "y": 37.0, "w": 22.0, "h": 0.0, "line_num": 1, "text": "det main () :"}, {"x": 1043.0, "y": 271.0, "w": 65.0, "h": 1.0, "line_num": 2, "text": "list 1 = [1, 2,3,4]"}, {"x": 921.0, "y": 281.0, "w": 23.0, "h": 2.0, "line_num": 3, "text": "list 2 ="}, {"x": 965.0, "y": 589.0, "w": 29.0, "h": 6.0, "line_num": 4, "text": "(3,4,5,6)"}, {"x": 854.0, "y": 276.0, "w": 19.0, "h": 1.0, "line_num": 5, "text": "List = []"}, {"x": 782.0, "y": 277.0, "w": 68.0, "h": 5.0, "line_num": 6, "text": "for elem1 in list 1?"}, {"x": 678.0, "y": 434.0, "w": 69.0, "h": 7.0, "line_num": 7, "text": "for eleme in list2:"}, {"x": 583.0, "y": 640.0, "w": 76.0, "h": 3.0, "line_num": 8, "text": "it elem1 = = elem2:"}, {"x": 499.0, "y": 871.0, "w": 51.0, "h": 2.0, "line_num": 9, "text": "elem = elema"}, {"x": 381.0, "y": 871.0, "w": 74.0, "h": 7.0, "line_num": 10, "text": "list. append (elem)"}, {"x": 206.0, "y": 347.0, "w": 59.0, "h": 8.0, "line_num": 11, "text": "print (ist)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 5.7272727272727275, "ir_algo_output_code": "                                        det main () :\n                                    list 1 = [1, 2,3,4]\n                            list 2 =\n                                (3,4,5,6)\n                        List = []\n                    for elem1 in list 1?\n                for eleme in list2:\n            it elem1 = = elem2:\n        elem = elema\n    list. append (elem)\nprint (ist)\n", "ir_algo_output_indented_lines": [{"x": 1151.0, "y": 37.0, "w": 22.0, "h": 0.0, "line_num": 1, "text": "det main () :", "cluster_label": 0, "indentation": 10}, {"x": 1043.0, "y": 271.0, "w": 65.0, "h": 1.0, "line_num": 2, "text": "list 1 = [1, 2,3,4]", "cluster_label": 1, "indentation": 9}, {"x": 921.0, "y": 281.0, "w": 23.0, "h": 2.0, "line_num": 3, "text": "list 2 =", "cluster_label": 3, "indentation": 7}, {"x": 965.0, "y": 589.0, "w": 29.0, "h": 6.0, "line_num": 4, "text": "(3,4,5,6)", "cluster_label": 2, "indentation": 8}, {"x": 854.0, "y": 276.0, "w": 19.0, "h": 1.0, "line_num": 5, "text": "List = []", "cluster_label": 4, "indentation": 6}, {"x": 782.0, "y": 277.0, "w": 68.0, "h": 5.0, "line_num": 6, "text": "for elem1 in list 1?", "cluster_label": 5, "indentation": 5}, {"x": 678.0, "y": 434.0, "w": 69.0, "h": 7.0, "line_num": 7, "text": "for eleme in list2:", "cluster_label": 6, "indentation": 4}, {"x": 583.0, "y": 640.0, "w": 76.0, "h": 3.0, "line_num": 8, "text": "it elem1 = = elem2:", "cluster_label": 7, "indentation": 3}, {"x": 499.0, "y": 871.0, "w": 51.0, "h": 2.0, "line_num": 9, "text": "elem = elema", "cluster_label": 8, "indentation": 2}, {"x": 381.0, "y": 871.0, "w": 74.0, "h": 7.0, "line_num": 10, "text": "list. append (elem)", "cluster_label": 9, "indentation": 1}, {"x": 206.0, "y": 347.0, "w": 59.0, "h": 8.0, "line_num": 11, "text": "print (ist)", "cluster_label": 10, "indentation": 0}], "ir_algo_output_edit_distance": 214, "prompting_method": "cot-test1", "lm_post_processed_code": "def main() :\n    list1 = [1, 2,3,4]\n    list2 = [3,4,5,6]\n    List = []\n    for elem1 in list1:\n        for elem2 in list2:\n            if elem1 == elem2:\n                elem = elem2\n                List.append(elem)\n    print(List)\n", "lm_post_processed_edit_distance": 10}, {"image_id": 15, "image_height": 1565, "image_width": 1186, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 1151.0, "y": 37.0, "w": 22.0, "h": 0.0, "line_num": 1, "text": "det main () :"}, {"x": 1043.0, "y": 271.0, "w": 65.0, "h": 1.0, "line_num": 2, "text": "list 1 = [1, 2,3,4]"}, {"x": 921.0, "y": 281.0, "w": 23.0, "h": 2.0, "line_num": 3, "text": "list 2 ="}, {"x": 965.0, "y": 589.0, "w": 29.0, "h": 6.0, "line_num": 4, "text": "(3,4,5,6)"}, {"x": 854.0, "y": 276.0, "w": 19.0, "h": 1.0, "line_num": 5, "text": "List = []"}, {"x": 782.0, "y": 277.0, "w": 68.0, "h": 5.0, "line_num": 6, "text": "for elem1 in list 1?"}, {"x": 678.0, "y": 434.0, "w": 69.0, "h": 7.0, "line_num": 7, "text": "for eleme in list2:"}, {"x": 583.0, "y": 640.0, "w": 76.0, "h": 3.0, "line_num": 8, "text": "it elem1 = = elem2:"}, {"x": 499.0, "y": 871.0, "w": 51.0, "h": 2.0, "line_num": 9, "text": "elem = elema"}, {"x": 381.0, "y": 871.0, "w": 74.0, "h": 7.0, "line_num": 10, "text": "list. append (elem)"}, {"x": 206.0, "y": 347.0, "w": 59.0, "h": 8.0, "line_num": 11, "text": "print (ist)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 5.7272727272727275, "ir_algo_output_code": "                                        det main () :\n                                    list 1 = [1, 2,3,4]\n                            list 2 =\n                                (3,4,5,6)\n                        List = []\n                    for elem1 in list 1?\n                for eleme in list2:\n            it elem1 = = elem2:\n        elem = elema\n    list. append (elem)\nprint (ist)\n", "ir_algo_output_indented_lines": [{"x": 1151.0, "y": 37.0, "w": 22.0, "h": 0.0, "line_num": 1, "text": "det main () :", "cluster_label": 0, "indentation": 10}, {"x": 1043.0, "y": 271.0, "w": 65.0, "h": 1.0, "line_num": 2, "text": "list 1 = [1, 2,3,4]", "cluster_label": 1, "indentation": 9}, {"x": 921.0, "y": 281.0, "w": 23.0, "h": 2.0, "line_num": 3, "text": "list 2 =", "cluster_label": 3, "indentation": 7}, {"x": 965.0, "y": 589.0, "w": 29.0, "h": 6.0, "line_num": 4, "text": "(3,4,5,6)", "cluster_label": 2, "indentation": 8}, {"x": 854.0, "y": 276.0, "w": 19.0, "h": 1.0, "line_num": 5, "text": "List = []", "cluster_label": 4, "indentation": 6}, {"x": 782.0, "y": 277.0, "w": 68.0, "h": 5.0, "line_num": 6, "text": "for elem1 in list 1?", "cluster_label": 5, "indentation": 5}, {"x": 678.0, "y": 434.0, "w": 69.0, "h": 7.0, "line_num": 7, "text": "for eleme in list2:", "cluster_label": 6, "indentation": 4}, {"x": 583.0, "y": 640.0, "w": 76.0, "h": 3.0, "line_num": 8, "text": "it elem1 = = elem2:", "cluster_label": 7, "indentation": 3}, {"x": 499.0, "y": 871.0, "w": 51.0, "h": 2.0, "line_num": 9, "text": "elem = elema", "cluster_label": 8, "indentation": 2}, {"x": 381.0, "y": 871.0, "w": 74.0, "h": 7.0, "line_num": 10, "text": "list. append (elem)", "cluster_label": 9, "indentation": 1}, {"x": 206.0, "y": 347.0, "w": 59.0, "h": 8.0, "line_num": 11, "text": "print (ist)", "cluster_label": 10, "indentation": 0}], "ir_algo_output_edit_distance": 214, "prompting_method": "cot-test5", "lm_post_processed_code": "def main():\n    list1 = [1, 2,3,4]\n    list2 = (3,4,5,6)\n    List = []\n    for elem1 in list1:\n        for elem2 in list2:\n            if elem1 == elem2:\n                elem = elem2\n    List.append(elem)\nprint(List)\n", "lm_post_processed_edit_distance": 27}, {"image_id": 15, "image_height": 1565, "image_width": 1186, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 1151.0, "y": 37.0, "w": 22.0, "h": 0.0, "line_num": 1, "text": "det main () :"}, {"x": 1043.0, "y": 271.0, "w": 65.0, "h": 1.0, "line_num": 2, "text": "list 1 = [1, 2,3,4]"}, {"x": 921.0, "y": 281.0, "w": 23.0, "h": 2.0, "line_num": 3, "text": "list 2 ="}, {"x": 965.0, "y": 589.0, "w": 29.0, "h": 6.0, "line_num": 4, "text": "(3,4,5,6)"}, {"x": 854.0, "y": 276.0, "w": 19.0, "h": 1.0, "line_num": 5, "text": "List = []"}, {"x": 782.0, "y": 277.0, "w": 68.0, "h": 5.0, "line_num": 6, "text": "for elem1 in list 1?"}, {"x": 678.0, "y": 434.0, "w": 69.0, "h": 7.0, "line_num": 7, "text": "for eleme in list2:"}, {"x": 583.0, "y": 640.0, "w": 76.0, "h": 3.0, "line_num": 8, "text": "it elem1 = = elem2:"}, {"x": 499.0, "y": 871.0, "w": 51.0, "h": 2.0, "line_num": 9, "text": "elem = elema"}, {"x": 381.0, "y": 871.0, "w": 74.0, "h": 7.0, "line_num": 10, "text": "list. append (elem)"}, {"x": 206.0, "y": 347.0, "w": 59.0, "h": 8.0, "line_num": 11, "text": "print (ist)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 5.7272727272727275, "ir_algo_output_code": "                                        det main () :\n                                    list 1 = [1, 2,3,4]\n                            list 2 =\n                                (3,4,5,6)\n                        List = []\n                    for elem1 in list 1?\n                for eleme in list2:\n            it elem1 = = elem2:\n        elem = elema\n    list. append (elem)\nprint (ist)\n", "ir_algo_output_indented_lines": [{"x": 1151.0, "y": 37.0, "w": 22.0, "h": 0.0, "line_num": 1, "text": "det main () :", "cluster_label": 0, "indentation": 10}, {"x": 1043.0, "y": 271.0, "w": 65.0, "h": 1.0, "line_num": 2, "text": "list 1 = [1, 2,3,4]", "cluster_label": 1, "indentation": 9}, {"x": 921.0, "y": 281.0, "w": 23.0, "h": 2.0, "line_num": 3, "text": "list 2 =", "cluster_label": 3, "indentation": 7}, {"x": 965.0, "y": 589.0, "w": 29.0, "h": 6.0, "line_num": 4, "text": "(3,4,5,6)", "cluster_label": 2, "indentation": 8}, {"x": 854.0, "y": 276.0, "w": 19.0, "h": 1.0, "line_num": 5, "text": "List = []", "cluster_label": 4, "indentation": 6}, {"x": 782.0, "y": 277.0, "w": 68.0, "h": 5.0, "line_num": 6, "text": "for elem1 in list 1?", "cluster_label": 5, "indentation": 5}, {"x": 678.0, "y": 434.0, "w": 69.0, "h": 7.0, "line_num": 7, "text": "for eleme in list2:", "cluster_label": 6, "indentation": 4}, {"x": 583.0, "y": 640.0, "w": 76.0, "h": 3.0, "line_num": 8, "text": "it elem1 = = elem2:", "cluster_label": 7, "indentation": 3}, {"x": 499.0, "y": 871.0, "w": 51.0, "h": 2.0, "line_num": 9, "text": "elem = elema", "cluster_label": 8, "indentation": 2}, {"x": 381.0, "y": 871.0, "w": 74.0, "h": 7.0, "line_num": 10, "text": "list. append (elem)", "cluster_label": 9, "indentation": 1}, {"x": 206.0, "y": 347.0, "w": 59.0, "h": 8.0, "line_num": 11, "text": "print (ist)", "cluster_label": 10, "indentation": 0}], "ir_algo_output_edit_distance": 214, "prompting_method": "simple-test2", "lm_post_processed_code": "def main():\n    list1 = [1, 2,3,4]\n    list2 = (3,4,5,6)\n    List = []\n    for elem1 in list1:\n        for elem2 in list2:\n            if elem1 == elem2:\n                elem = elem2\n    List.append(elem)\nprint(List)\n", "lm_post_processed_edit_distance": 27}, {"image_id": 15, "image_height": 1565, "image_width": 1186, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 1151.0, "y": 37.0, "w": 22.0, "h": 0.0, "line_num": 1, "text": "det main () :"}, {"x": 1043.0, "y": 271.0, "w": 65.0, "h": 1.0, "line_num": 2, "text": "list 1 = [1, 2,3,4]"}, {"x": 921.0, "y": 281.0, "w": 23.0, "h": 2.0, "line_num": 3, "text": "list 2 ="}, {"x": 965.0, "y": 589.0, "w": 29.0, "h": 6.0, "line_num": 4, "text": "(3,4,5,6)"}, {"x": 854.0, "y": 276.0, "w": 19.0, "h": 1.0, "line_num": 5, "text": "List = []"}, {"x": 782.0, "y": 277.0, "w": 68.0, "h": 5.0, "line_num": 6, "text": "for elem1 in list 1?"}, {"x": 678.0, "y": 434.0, "w": 69.0, "h": 7.0, "line_num": 7, "text": "for eleme in list2:"}, {"x": 583.0, "y": 640.0, "w": 76.0, "h": 3.0, "line_num": 8, "text": "it elem1 = = elem2:"}, {"x": 499.0, "y": 871.0, "w": 51.0, "h": 2.0, "line_num": 9, "text": "elem = elema"}, {"x": 381.0, "y": 871.0, "w": 74.0, "h": 7.0, "line_num": 10, "text": "list. append (elem)"}, {"x": 206.0, "y": 347.0, "w": 59.0, "h": 8.0, "line_num": 11, "text": "print (ist)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 5.7272727272727275, "ir_algo_output_code": "                                        det main () :\n                                    list 1 = [1, 2,3,4]\n                            list 2 =\n                                (3,4,5,6)\n                        List = []\n                    for elem1 in list 1?\n                for eleme in list2:\n            it elem1 = = elem2:\n        elem = elema\n    list. append (elem)\nprint (ist)\n", "ir_algo_output_indented_lines": [{"x": 1151.0, "y": 37.0, "w": 22.0, "h": 0.0, "line_num": 1, "text": "det main () :", "cluster_label": 0, "indentation": 10}, {"x": 1043.0, "y": 271.0, "w": 65.0, "h": 1.0, "line_num": 2, "text": "list 1 = [1, 2,3,4]", "cluster_label": 1, "indentation": 9}, {"x": 921.0, "y": 281.0, "w": 23.0, "h": 2.0, "line_num": 3, "text": "list 2 =", "cluster_label": 3, "indentation": 7}, {"x": 965.0, "y": 589.0, "w": 29.0, "h": 6.0, "line_num": 4, "text": "(3,4,5,6)", "cluster_label": 2, "indentation": 8}, {"x": 854.0, "y": 276.0, "w": 19.0, "h": 1.0, "line_num": 5, "text": "List = []", "cluster_label": 4, "indentation": 6}, {"x": 782.0, "y": 277.0, "w": 68.0, "h": 5.0, "line_num": 6, "text": "for elem1 in list 1?", "cluster_label": 5, "indentation": 5}, {"x": 678.0, "y": 434.0, "w": 69.0, "h": 7.0, "line_num": 7, "text": "for eleme in list2:", "cluster_label": 6, "indentation": 4}, {"x": 583.0, "y": 640.0, "w": 76.0, "h": 3.0, "line_num": 8, "text": "it elem1 = = elem2:", "cluster_label": 7, "indentation": 3}, {"x": 499.0, "y": 871.0, "w": 51.0, "h": 2.0, "line_num": 9, "text": "elem = elema", "cluster_label": 8, "indentation": 2}, {"x": 381.0, "y": 871.0, "w": 74.0, "h": 7.0, "line_num": 10, "text": "list. append (elem)", "cluster_label": 9, "indentation": 1}, {"x": 206.0, "y": 347.0, "w": 59.0, "h": 8.0, "line_num": 11, "text": "print (ist)", "cluster_label": 10, "indentation": 0}], "ir_algo_output_edit_distance": 214, "prompting_method": "simple-test3", "lm_post_processed_code": "def main():\n    list1 = [1, 2,3,4]\n    list2 = (3,4,5,6)\n    List = []\n    for elem1 in list1:\n        for elem2 in list2:\n            if elem1 == elem2:\n                elem = elem1\n                List.append(elem)\n    print(List)\n", "lm_post_processed_edit_distance": 10}, {"image_id": 15, "image_height": 1565, "image_width": 1186, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 1151.0, "y": 37.0, "w": 22.0, "h": 0.0, "line_num": 1, "text": "det main () :"}, {"x": 1043.0, "y": 271.0, "w": 65.0, "h": 1.0, "line_num": 2, "text": "list 1 = [1, 2,3,4]"}, {"x": 921.0, "y": 281.0, "w": 23.0, "h": 2.0, "line_num": 3, "text": "list 2 ="}, {"x": 965.0, "y": 589.0, "w": 29.0, "h": 6.0, "line_num": 4, "text": "(3,4,5,6)"}, {"x": 854.0, "y": 276.0, "w": 19.0, "h": 1.0, "line_num": 5, "text": "List = []"}, {"x": 782.0, "y": 277.0, "w": 68.0, "h": 5.0, "line_num": 6, "text": "for elem1 in list 1?"}, {"x": 678.0, "y": 434.0, "w": 69.0, "h": 7.0, "line_num": 7, "text": "for eleme in list2:"}, {"x": 583.0, "y": 640.0, "w": 76.0, "h": 3.0, "line_num": 8, "text": "it elem1 = = elem2:"}, {"x": 499.0, "y": 871.0, "w": 51.0, "h": 2.0, "line_num": 9, "text": "elem = elema"}, {"x": 381.0, "y": 871.0, "w": 74.0, "h": 7.0, "line_num": 10, "text": "list. append (elem)"}, {"x": 206.0, "y": 347.0, "w": 59.0, "h": 8.0, "line_num": 11, "text": "print (ist)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "det main () :\nlist 1 = [1, 2,3,4]\nlist 2 =\n    (3,4,5,6)\nList = []\nfor elem1 in list 1?\nfor eleme in list2:\nit elem1 = = elem2:\nelem = elema\nlist. append (elem)\nprint (ist)\n", "ir_algo_output_indented_lines": [{"x": 1151.0, "y": 37.0, "w": 22.0, "h": 0.0, "line_num": 1, "text": "det main () :", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 1043.0, "y": 271.0, "w": 65.0, "h": 1.0, "line_num": 2, "text": "list 1 = [1, 2,3,4]", "delta": -108.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 921.0, "y": 281.0, "w": 23.0, "h": 2.0, "line_num": 3, "text": "list 2 =", "delta": -122.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 965.0, "y": 589.0, "w": 29.0, "h": 6.0, "line_num": 4, "text": "(3,4,5,6)", "delta": 44.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 854.0, "y": 276.0, "w": 19.0, "h": 1.0, "line_num": 5, "text": "List = []", "delta": -111.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 782.0, "y": 277.0, "w": 68.0, "h": 5.0, "line_num": 6, "text": "for elem1 in list 1?", "delta": -72.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 678.0, "y": 434.0, "w": 69.0, "h": 7.0, "line_num": 7, "text": "for eleme in list2:", "delta": -104.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 583.0, "y": 640.0, "w": 76.0, "h": 3.0, "line_num": 8, "text": "it elem1 = = elem2:", "delta": -95.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 499.0, "y": 871.0, "w": 51.0, "h": 2.0, "line_num": 9, "text": "elem = elema", "delta": -84.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 381.0, "y": 871.0, "w": 74.0, "h": 7.0, "line_num": 10, "text": "list. append (elem)", "delta": -118.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 206.0, "y": 347.0, "w": 59.0, "h": 8.0, "line_num": 11, "text": "print (ist)", "delta": -175.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 99, "prompting_method": "none", "lm_post_processed_code": "det main () :\nlist 1 = [1, 2,3,4]\nlist 2 =\n    (3,4,5,6)\nList = []\nfor elem1 in list 1?\nfor eleme in list2:\nit elem1 = = elem2:\nelem = elema\nlist. append (elem)\nprint (ist)\n", "lm_post_processed_edit_distance": 99}, {"image_id": 15, "image_height": 1565, "image_width": 1186, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 1151.0, "y": 37.0, "w": 22.0, "h": 0.0, "line_num": 1, "text": "det main () :"}, {"x": 1043.0, "y": 271.0, "w": 65.0, "h": 1.0, "line_num": 2, "text": "list 1 = [1, 2,3,4]"}, {"x": 921.0, "y": 281.0, "w": 23.0, "h": 2.0, "line_num": 3, "text": "list 2 ="}, {"x": 965.0, "y": 589.0, "w": 29.0, "h": 6.0, "line_num": 4, "text": "(3,4,5,6)"}, {"x": 854.0, "y": 276.0, "w": 19.0, "h": 1.0, "line_num": 5, "text": "List = []"}, {"x": 782.0, "y": 277.0, "w": 68.0, "h": 5.0, "line_num": 6, "text": "for elem1 in list 1?"}, {"x": 678.0, "y": 434.0, "w": 69.0, "h": 7.0, "line_num": 7, "text": "for eleme in list2:"}, {"x": 583.0, "y": 640.0, "w": 76.0, "h": 3.0, "line_num": 8, "text": "it elem1 = = elem2:"}, {"x": 499.0, "y": 871.0, "w": 51.0, "h": 2.0, "line_num": 9, "text": "elem = elema"}, {"x": 381.0, "y": 871.0, "w": 74.0, "h": 7.0, "line_num": 10, "text": "list. append (elem)"}, {"x": 206.0, "y": 347.0, "w": 59.0, "h": 8.0, "line_num": 11, "text": "print (ist)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "det main () :\nlist 1 = [1, 2,3,4]\nlist 2 =\n    (3,4,5,6)\nList = []\nfor elem1 in list 1?\nfor eleme in list2:\nit elem1 = = elem2:\nelem = elema\nlist. append (elem)\nprint (ist)\n", "ir_algo_output_indented_lines": [{"x": 1151.0, "y": 37.0, "w": 22.0, "h": 0.0, "line_num": 1, "text": "det main () :", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 1043.0, "y": 271.0, "w": 65.0, "h": 1.0, "line_num": 2, "text": "list 1 = [1, 2,3,4]", "delta": -108.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 921.0, "y": 281.0, "w": 23.0, "h": 2.0, "line_num": 3, "text": "list 2 =", "delta": -122.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 965.0, "y": 589.0, "w": 29.0, "h": 6.0, "line_num": 4, "text": "(3,4,5,6)", "delta": 44.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 854.0, "y": 276.0, "w": 19.0, "h": 1.0, "line_num": 5, "text": "List = []", "delta": -111.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 782.0, "y": 277.0, "w": 68.0, "h": 5.0, "line_num": 6, "text": "for elem1 in list 1?", "delta": -72.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 678.0, "y": 434.0, "w": 69.0, "h": 7.0, "line_num": 7, "text": "for eleme in list2:", "delta": -104.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 583.0, "y": 640.0, "w": 76.0, "h": 3.0, "line_num": 8, "text": "it elem1 = = elem2:", "delta": -95.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 499.0, "y": 871.0, "w": 51.0, "h": 2.0, "line_num": 9, "text": "elem = elema", "delta": -84.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 381.0, "y": 871.0, "w": 74.0, "h": 7.0, "line_num": 10, "text": "list. append (elem)", "delta": -118.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 206.0, "y": 347.0, "w": 59.0, "h": 8.0, "line_num": 11, "text": "print (ist)", "delta": -175.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 99, "prompting_method": "cot-test1", "lm_post_processed_code": "def main():\nlist1 = [1, 2,3,4]\nlist2 = [3,4,5,6]\nList = []\nfor elem1 in list1:\nfor elem2 in list2:\nif elem1 == elem2:\nelem = elem2\nList.append(elem)\nprint(List)\n", "lm_post_processed_edit_distance": 81}, {"image_id": 15, "image_height": 1565, "image_width": 1186, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 1151.0, "y": 37.0, "w": 22.0, "h": 0.0, "line_num": 1, "text": "det main () :"}, {"x": 1043.0, "y": 271.0, "w": 65.0, "h": 1.0, "line_num": 2, "text": "list 1 = [1, 2,3,4]"}, {"x": 921.0, "y": 281.0, "w": 23.0, "h": 2.0, "line_num": 3, "text": "list 2 ="}, {"x": 965.0, "y": 589.0, "w": 29.0, "h": 6.0, "line_num": 4, "text": "(3,4,5,6)"}, {"x": 854.0, "y": 276.0, "w": 19.0, "h": 1.0, "line_num": 5, "text": "List = []"}, {"x": 782.0, "y": 277.0, "w": 68.0, "h": 5.0, "line_num": 6, "text": "for elem1 in list 1?"}, {"x": 678.0, "y": 434.0, "w": 69.0, "h": 7.0, "line_num": 7, "text": "for eleme in list2:"}, {"x": 583.0, "y": 640.0, "w": 76.0, "h": 3.0, "line_num": 8, "text": "it elem1 = = elem2:"}, {"x": 499.0, "y": 871.0, "w": 51.0, "h": 2.0, "line_num": 9, "text": "elem = elema"}, {"x": 381.0, "y": 871.0, "w": 74.0, "h": 7.0, "line_num": 10, "text": "list. append (elem)"}, {"x": 206.0, "y": 347.0, "w": 59.0, "h": 8.0, "line_num": 11, "text": "print (ist)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "det main () :\nlist 1 = [1, 2,3,4]\nlist 2 =\n    (3,4,5,6)\nList = []\nfor elem1 in list 1?\nfor eleme in list2:\nit elem1 = = elem2:\nelem = elema\nlist. append (elem)\nprint (ist)\n", "ir_algo_output_indented_lines": [{"x": 1151.0, "y": 37.0, "w": 22.0, "h": 0.0, "line_num": 1, "text": "det main () :", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 1043.0, "y": 271.0, "w": 65.0, "h": 1.0, "line_num": 2, "text": "list 1 = [1, 2,3,4]", "delta": -108.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 921.0, "y": 281.0, "w": 23.0, "h": 2.0, "line_num": 3, "text": "list 2 =", "delta": -122.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 965.0, "y": 589.0, "w": 29.0, "h": 6.0, "line_num": 4, "text": "(3,4,5,6)", "delta": 44.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 854.0, "y": 276.0, "w": 19.0, "h": 1.0, "line_num": 5, "text": "List = []", "delta": -111.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 782.0, "y": 277.0, "w": 68.0, "h": 5.0, "line_num": 6, "text": "for elem1 in list 1?", "delta": -72.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 678.0, "y": 434.0, "w": 69.0, "h": 7.0, "line_num": 7, "text": "for eleme in list2:", "delta": -104.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 583.0, "y": 640.0, "w": 76.0, "h": 3.0, "line_num": 8, "text": "it elem1 = = elem2:", "delta": -95.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 499.0, "y": 871.0, "w": 51.0, "h": 2.0, "line_num": 9, "text": "elem = elema", "delta": -84.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 381.0, "y": 871.0, "w": 74.0, "h": 7.0, "line_num": 10, "text": "list. append (elem)", "delta": -118.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 206.0, "y": 347.0, "w": 59.0, "h": 8.0, "line_num": 11, "text": "print (ist)", "delta": -175.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 99, "prompting_method": "cot-test5", "lm_post_processed_code": "def main():\nlist1 = [1, 2,3,4]\nlist2 = (3,4,5,6)\nList = []\nfor elem1 in list1:\nfor elem2 in list2:\nif elem1 == elem2:\nelem = elem2\nList.append(elem)\nprint(List)\n", "lm_post_processed_edit_distance": 83}, {"image_id": 15, "image_height": 1565, "image_width": 1186, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 1151.0, "y": 37.0, "w": 22.0, "h": 0.0, "line_num": 1, "text": "det main () :"}, {"x": 1043.0, "y": 271.0, "w": 65.0, "h": 1.0, "line_num": 2, "text": "list 1 = [1, 2,3,4]"}, {"x": 921.0, "y": 281.0, "w": 23.0, "h": 2.0, "line_num": 3, "text": "list 2 ="}, {"x": 965.0, "y": 589.0, "w": 29.0, "h": 6.0, "line_num": 4, "text": "(3,4,5,6)"}, {"x": 854.0, "y": 276.0, "w": 19.0, "h": 1.0, "line_num": 5, "text": "List = []"}, {"x": 782.0, "y": 277.0, "w": 68.0, "h": 5.0, "line_num": 6, "text": "for elem1 in list 1?"}, {"x": 678.0, "y": 434.0, "w": 69.0, "h": 7.0, "line_num": 7, "text": "for eleme in list2:"}, {"x": 583.0, "y": 640.0, "w": 76.0, "h": 3.0, "line_num": 8, "text": "it elem1 = = elem2:"}, {"x": 499.0, "y": 871.0, "w": 51.0, "h": 2.0, "line_num": 9, "text": "elem = elema"}, {"x": 381.0, "y": 871.0, "w": 74.0, "h": 7.0, "line_num": 10, "text": "list. append (elem)"}, {"x": 206.0, "y": 347.0, "w": 59.0, "h": 8.0, "line_num": 11, "text": "print (ist)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "det main () :\nlist 1 = [1, 2,3,4]\nlist 2 =\n    (3,4,5,6)\nList = []\nfor elem1 in list 1?\nfor eleme in list2:\nit elem1 = = elem2:\nelem = elema\nlist. append (elem)\nprint (ist)\n", "ir_algo_output_indented_lines": [{"x": 1151.0, "y": 37.0, "w": 22.0, "h": 0.0, "line_num": 1, "text": "det main () :", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 1043.0, "y": 271.0, "w": 65.0, "h": 1.0, "line_num": 2, "text": "list 1 = [1, 2,3,4]", "delta": -108.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 921.0, "y": 281.0, "w": 23.0, "h": 2.0, "line_num": 3, "text": "list 2 =", "delta": -122.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 965.0, "y": 589.0, "w": 29.0, "h": 6.0, "line_num": 4, "text": "(3,4,5,6)", "delta": 44.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 854.0, "y": 276.0, "w": 19.0, "h": 1.0, "line_num": 5, "text": "List = []", "delta": -111.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 782.0, "y": 277.0, "w": 68.0, "h": 5.0, "line_num": 6, "text": "for elem1 in list 1?", "delta": -72.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 678.0, "y": 434.0, "w": 69.0, "h": 7.0, "line_num": 7, "text": "for eleme in list2:", "delta": -104.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 583.0, "y": 640.0, "w": 76.0, "h": 3.0, "line_num": 8, "text": "it elem1 = = elem2:", "delta": -95.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 499.0, "y": 871.0, "w": 51.0, "h": 2.0, "line_num": 9, "text": "elem = elema", "delta": -84.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 381.0, "y": 871.0, "w": 74.0, "h": 7.0, "line_num": 10, "text": "list. append (elem)", "delta": -118.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 206.0, "y": 347.0, "w": 59.0, "h": 8.0, "line_num": 11, "text": "print (ist)", "delta": -175.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 99, "prompting_method": "simple-test2", "lm_post_processed_code": "def main():\n    list1 = [1, 2,3,4]\n    list2 = (3,4,5,6)\n    List = []\n    for elem1 in list1:\n        for elem2 in list2:\n            if elem1 == elem2:\n                elem = elem1\n                List.append(elem)\n    print(List)\n", "lm_post_processed_edit_distance": 10}, {"image_id": 15, "image_height": 1565, "image_width": 1186, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 1151.0, "y": 37.0, "w": 22.0, "h": 0.0, "line_num": 1, "text": "det main () :"}, {"x": 1043.0, "y": 271.0, "w": 65.0, "h": 1.0, "line_num": 2, "text": "list 1 = [1, 2,3,4]"}, {"x": 921.0, "y": 281.0, "w": 23.0, "h": 2.0, "line_num": 3, "text": "list 2 ="}, {"x": 965.0, "y": 589.0, "w": 29.0, "h": 6.0, "line_num": 4, "text": "(3,4,5,6)"}, {"x": 854.0, "y": 276.0, "w": 19.0, "h": 1.0, "line_num": 5, "text": "List = []"}, {"x": 782.0, "y": 277.0, "w": 68.0, "h": 5.0, "line_num": 6, "text": "for elem1 in list 1?"}, {"x": 678.0, "y": 434.0, "w": 69.0, "h": 7.0, "line_num": 7, "text": "for eleme in list2:"}, {"x": 583.0, "y": 640.0, "w": 76.0, "h": 3.0, "line_num": 8, "text": "it elem1 = = elem2:"}, {"x": 499.0, "y": 871.0, "w": 51.0, "h": 2.0, "line_num": 9, "text": "elem = elema"}, {"x": 381.0, "y": 871.0, "w": 74.0, "h": 7.0, "line_num": 10, "text": "list. append (elem)"}, {"x": 206.0, "y": 347.0, "w": 59.0, "h": 8.0, "line_num": 11, "text": "print (ist)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "det main () :\nlist 1 = [1, 2,3,4]\nlist 2 =\n    (3,4,5,6)\nList = []\nfor elem1 in list 1?\nfor eleme in list2:\nit elem1 = = elem2:\nelem = elema\nlist. append (elem)\nprint (ist)\n", "ir_algo_output_indented_lines": [{"x": 1151.0, "y": 37.0, "w": 22.0, "h": 0.0, "line_num": 1, "text": "det main () :", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 1043.0, "y": 271.0, "w": 65.0, "h": 1.0, "line_num": 2, "text": "list 1 = [1, 2,3,4]", "delta": -108.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 921.0, "y": 281.0, "w": 23.0, "h": 2.0, "line_num": 3, "text": "list 2 =", "delta": -122.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 965.0, "y": 589.0, "w": 29.0, "h": 6.0, "line_num": 4, "text": "(3,4,5,6)", "delta": 44.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 854.0, "y": 276.0, "w": 19.0, "h": 1.0, "line_num": 5, "text": "List = []", "delta": -111.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 782.0, "y": 277.0, "w": 68.0, "h": 5.0, "line_num": 6, "text": "for elem1 in list 1?", "delta": -72.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 678.0, "y": 434.0, "w": 69.0, "h": 7.0, "line_num": 7, "text": "for eleme in list2:", "delta": -104.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 583.0, "y": 640.0, "w": 76.0, "h": 3.0, "line_num": 8, "text": "it elem1 = = elem2:", "delta": -95.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 499.0, "y": 871.0, "w": 51.0, "h": 2.0, "line_num": 9, "text": "elem = elema", "delta": -84.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 381.0, "y": 871.0, "w": 74.0, "h": 7.0, "line_num": 10, "text": "list. append (elem)", "delta": -118.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 206.0, "y": 347.0, "w": 59.0, "h": 8.0, "line_num": 11, "text": "print (ist)", "delta": -175.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 99, "prompting_method": "simple-test3", "lm_post_processed_code": "def main():\n    list1 = [1, 2,3,4]\n    list2 = (3,4,5,6)\n    List = []\n    for elem1 in list1:\n        for elem2 in list2:\n            if elem1 == elem2:\n                elem = elem1\n                List.append(elem)\n    print(List)\n", "lm_post_processed_edit_distance": 10}, {"image_id": 16, "image_height": 581, "image_width": 1475, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 218.0, "y": 154.0, "w": 903.0, "h": 112.0, "line_num": 1, "text": "String = input c)"}, {"x": 257.0, "y": 308.0, "w": 1133.0, "h": 130.0, "line_num": 2, "text": "Print (String [ ::- 1])"}], "ir_algo_name": "none", "ir_algo_output_code": "String = input c)\nPrint (String [ ::- 1])", "ir_algo_output_edit_distance": 8, "prompting_method": "none", "lm_post_processed_code": "String = input c)\nPrint (String [ ::- 1])", "lm_post_processed_edit_distance": 8}, {"image_id": 16, "image_height": 581, "image_width": 1475, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 218.0, "y": 154.0, "w": 903.0, "h": 112.0, "line_num": 1, "text": "String = input c)"}, {"x": 257.0, "y": 308.0, "w": 1133.0, "h": 130.0, "line_num": 2, "text": "Print (String [ ::- 1])"}], "ir_algo_name": "none", "ir_algo_output_code": "String = input c)\nPrint (String [ ::- 1])", "ir_algo_output_edit_distance": 8, "prompting_method": "cot-test1", "lm_post_processed_code": "String = input()\nPrint (String [ ::- 1])\n", "lm_post_processed_edit_distance": 5}, {"image_id": 16, "image_height": 581, "image_width": 1475, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 218.0, "y": 154.0, "w": 903.0, "h": 112.0, "line_num": 1, "text": "String = input c)"}, {"x": 257.0, "y": 308.0, "w": 1133.0, "h": 130.0, "line_num": 2, "text": "Print (String [ ::- 1])"}], "ir_algo_name": "none", "ir_algo_output_code": "String = input c)\nPrint (String [ ::- 1])", "ir_algo_output_edit_distance": 8, "prompting_method": "cot-test5", "lm_post_processed_code": "String = input()\nPrint (String [ ::- 1])\n", "lm_post_processed_edit_distance": 5}, {"image_id": 16, "image_height": 581, "image_width": 1475, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 218.0, "y": 154.0, "w": 903.0, "h": 112.0, "line_num": 1, "text": "String = input c)"}, {"x": 257.0, "y": 308.0, "w": 1133.0, "h": 130.0, "line_num": 2, "text": "Print (String [ ::- 1])"}], "ir_algo_name": "none", "ir_algo_output_code": "String = input c)\nPrint (String [ ::- 1])", "ir_algo_output_edit_distance": 8, "prompting_method": "simple-test2", "lm_post_processed_code": "string = input()\nprint(string[::-1])\n", "lm_post_processed_edit_distance": 2}, {"image_id": 16, "image_height": 581, "image_width": 1475, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 218.0, "y": 154.0, "w": 903.0, "h": 112.0, "line_num": 1, "text": "String = input c)"}, {"x": 257.0, "y": 308.0, "w": 1133.0, "h": 130.0, "line_num": 2, "text": "Print (String [ ::- 1])"}], "ir_algo_name": "none", "ir_algo_output_code": "String = input c)\nPrint (String [ ::- 1])", "ir_algo_output_edit_distance": 8, "prompting_method": "simple-test3", "lm_post_processed_code": "String = input()\nprint(String[::-1])\n", "lm_post_processed_edit_distance": 0}, {"image_id": 16, "image_height": 581, "image_width": 1475, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 218.0, "y": 154.0, "w": 903.0, "h": 112.0, "line_num": 1, "text": "String = input c)"}, {"x": 257.0, "y": 308.0, "w": 1133.0, "h": 130.0, "line_num": 2, "text": "Print (String [ ::- 1])"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 181.5, "ir_algo_output_code": "String = input c)\nPrint (String [ ::- 1])\n", "ir_algo_output_indented_lines": [{"x": 218.0, "y": 154.0, "w": 903.0, "h": 112.0, "line_num": 1, "text": "String = input c)", "cluster_label": 0, "indentation": 0}, {"x": 257.0, "y": 308.0, "w": 1133.0, "h": 130.0, "line_num": 2, "text": "Print (String [ ::- 1])", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 7, "prompting_method": "none", "lm_post_processed_code": "String = input c)\nPrint (String [ ::- 1])\n", "lm_post_processed_edit_distance": 7}, {"image_id": 16, "image_height": 581, "image_width": 1475, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 218.0, "y": 154.0, "w": 903.0, "h": 112.0, "line_num": 1, "text": "String = input c)"}, {"x": 257.0, "y": 308.0, "w": 1133.0, "h": 130.0, "line_num": 2, "text": "Print (String [ ::- 1])"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 181.5, "ir_algo_output_code": "String = input c)\nPrint (String [ ::- 1])\n", "ir_algo_output_indented_lines": [{"x": 218.0, "y": 154.0, "w": 903.0, "h": 112.0, "line_num": 1, "text": "String = input c)", "cluster_label": 0, "indentation": 0}, {"x": 257.0, "y": 308.0, "w": 1133.0, "h": 130.0, "line_num": 2, "text": "Print (String [ ::- 1])", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 7, "prompting_method": "cot-test1", "lm_post_processed_code": "String = input()\nPrint (String [ ::- 1])\n", "lm_post_processed_edit_distance": 5}, {"image_id": 16, "image_height": 581, "image_width": 1475, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 218.0, "y": 154.0, "w": 903.0, "h": 112.0, "line_num": 1, "text": "String = input c)"}, {"x": 257.0, "y": 308.0, "w": 1133.0, "h": 130.0, "line_num": 2, "text": "Print (String [ ::- 1])"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 181.5, "ir_algo_output_code": "String = input c)\nPrint (String [ ::- 1])\n", "ir_algo_output_indented_lines": [{"x": 218.0, "y": 154.0, "w": 903.0, "h": 112.0, "line_num": 1, "text": "String = input c)", "cluster_label": 0, "indentation": 0}, {"x": 257.0, "y": 308.0, "w": 1133.0, "h": 130.0, "line_num": 2, "text": "Print (String [ ::- 1])", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 7, "prompting_method": "cot-test5", "lm_post_processed_code": "String = input()\nPrint (String [ ::- 1])\n", "lm_post_processed_edit_distance": 5}, {"image_id": 16, "image_height": 581, "image_width": 1475, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 218.0, "y": 154.0, "w": 903.0, "h": 112.0, "line_num": 1, "text": "String = input c)"}, {"x": 257.0, "y": 308.0, "w": 1133.0, "h": 130.0, "line_num": 2, "text": "Print (String [ ::- 1])"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 181.5, "ir_algo_output_code": "String = input c)\nPrint (String [ ::- 1])\n", "ir_algo_output_indented_lines": [{"x": 218.0, "y": 154.0, "w": 903.0, "h": 112.0, "line_num": 1, "text": "String = input c)", "cluster_label": 0, "indentation": 0}, {"x": 257.0, "y": 308.0, "w": 1133.0, "h": 130.0, "line_num": 2, "text": "Print (String [ ::- 1])", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 7, "prompting_method": "simple-test2", "lm_post_processed_code": "string = input()\nprint(string[::-1])\n", "lm_post_processed_edit_distance": 2}, {"image_id": 16, "image_height": 581, "image_width": 1475, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 218.0, "y": 154.0, "w": 903.0, "h": 112.0, "line_num": 1, "text": "String = input c)"}, {"x": 257.0, "y": 308.0, "w": 1133.0, "h": 130.0, "line_num": 2, "text": "Print (String [ ::- 1])"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 181.5, "ir_algo_output_code": "String = input c)\nPrint (String [ ::- 1])\n", "ir_algo_output_indented_lines": [{"x": 218.0, "y": 154.0, "w": 903.0, "h": 112.0, "line_num": 1, "text": "String = input c)", "cluster_label": 0, "indentation": 0}, {"x": 257.0, "y": 308.0, "w": 1133.0, "h": 130.0, "line_num": 2, "text": "Print (String [ ::- 1])", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 7, "prompting_method": "simple-test3", "lm_post_processed_code": "string = input()\nprint(string[::-1])\n", "lm_post_processed_edit_distance": 2}, {"image_id": 16, "image_height": 581, "image_width": 1475, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 218.0, "y": 154.0, "w": 903.0, "h": 112.0, "line_num": 1, "text": "String = input c)"}, {"x": 257.0, "y": 308.0, "w": 1133.0, "h": 130.0, "line_num": 2, "text": "Print (String [ ::- 1])"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "String = input c)\nPrint (String [ ::- 1])\n", "ir_algo_output_indented_lines": [{"x": 218.0, "y": 154.0, "w": 903.0, "h": 112.0, "line_num": 1, "text": "String = input c)", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 257.0, "y": 308.0, "w": 1133.0, "h": 130.0, "line_num": 2, "text": "Print (String [ ::- 1])", "delta": 39.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}], "ir_algo_output_edit_distance": 7, "prompting_method": "none", "lm_post_processed_code": "String = input c)\nPrint (String [ ::- 1])\n", "lm_post_processed_edit_distance": 7}, {"image_id": 16, "image_height": 581, "image_width": 1475, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 218.0, "y": 154.0, "w": 903.0, "h": 112.0, "line_num": 1, "text": "String = input c)"}, {"x": 257.0, "y": 308.0, "w": 1133.0, "h": 130.0, "line_num": 2, "text": "Print (String [ ::- 1])"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "String = input c)\nPrint (String [ ::- 1])\n", "ir_algo_output_indented_lines": [{"x": 218.0, "y": 154.0, "w": 903.0, "h": 112.0, "line_num": 1, "text": "String = input c)", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 257.0, "y": 308.0, "w": 1133.0, "h": 130.0, "line_num": 2, "text": "Print (String [ ::- 1])", "delta": 39.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}], "ir_algo_output_edit_distance": 7, "prompting_method": "cot-test1", "lm_post_processed_code": "String = input()\nPrint (String [ ::- 1])\n", "lm_post_processed_edit_distance": 5}, {"image_id": 16, "image_height": 581, "image_width": 1475, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 218.0, "y": 154.0, "w": 903.0, "h": 112.0, "line_num": 1, "text": "String = input c)"}, {"x": 257.0, "y": 308.0, "w": 1133.0, "h": 130.0, "line_num": 2, "text": "Print (String [ ::- 1])"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "String = input c)\nPrint (String [ ::- 1])\n", "ir_algo_output_indented_lines": [{"x": 218.0, "y": 154.0, "w": 903.0, "h": 112.0, "line_num": 1, "text": "String = input c)", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 257.0, "y": 308.0, "w": 1133.0, "h": 130.0, "line_num": 2, "text": "Print (String [ ::- 1])", "delta": 39.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}], "ir_algo_output_edit_distance": 7, "prompting_method": "cot-test5", "lm_post_processed_code": "string = input()\nprint(string[::-1])\n", "lm_post_processed_edit_distance": 2}, {"image_id": 16, "image_height": 581, "image_width": 1475, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 218.0, "y": 154.0, "w": 903.0, "h": 112.0, "line_num": 1, "text": "String = input c)"}, {"x": 257.0, "y": 308.0, "w": 1133.0, "h": 130.0, "line_num": 2, "text": "Print (String [ ::- 1])"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "String = input c)\nPrint (String [ ::- 1])\n", "ir_algo_output_indented_lines": [{"x": 218.0, "y": 154.0, "w": 903.0, "h": 112.0, "line_num": 1, "text": "String = input c)", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 257.0, "y": 308.0, "w": 1133.0, "h": 130.0, "line_num": 2, "text": "Print (String [ ::- 1])", "delta": 39.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}], "ir_algo_output_edit_distance": 7, "prompting_method": "simple-test2", "lm_post_processed_code": "string = input()\nprint(string[::-1])\n", "lm_post_processed_edit_distance": 2}, {"image_id": 16, "image_height": 581, "image_width": 1475, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 218.0, "y": 154.0, "w": 903.0, "h": 112.0, "line_num": 1, "text": "String = input c)"}, {"x": 257.0, "y": 308.0, "w": 1133.0, "h": 130.0, "line_num": 2, "text": "Print (String [ ::- 1])"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "String = input c)\nPrint (String [ ::- 1])\n", "ir_algo_output_indented_lines": [{"x": 218.0, "y": 154.0, "w": 903.0, "h": 112.0, "line_num": 1, "text": "String = input c)", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 257.0, "y": 308.0, "w": 1133.0, "h": 130.0, "line_num": 2, "text": "Print (String [ ::- 1])", "delta": 39.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}], "ir_algo_output_edit_distance": 7, "prompting_method": "simple-test3", "lm_post_processed_code": "string = input()\nprint(string[::-1])\n", "lm_post_processed_edit_distance": 2}, {"image_id": 18, "image_height": 2057, "image_width": 4134, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 229.0, "y": 120.0, "w": 933.0, "h": 142.0, "line_num": 1, "text": "det main ( ):"}, {"x": 540.0, "y": 290.0, "w": 2614.0, "h": 166.0, "line_num": 2, "text": "String = str (input (\"Enter string: ')"}, {"x": 529.0, "y": 474.0, "w": 2975.0, "h": 218.0, "line_num": 3, "text": "for i in range ((len(string)-1) ,- 1 ,- 1):"}, {"x": 825.0, "y": 718.0, "w": 1124.0, "h": 180.0, "line_num": 4, "text": "print (string [1])"}, {"x": 208.0, "y": 1014.0, "w": 1766.0, "h": 183.0, "line_num": 5, "text": "if __ name _== '-main-':"}, {"x": 335.0, "y": 1246.0, "w": 482.0, "h": 145.0, "line_num": 6, "text": "main()"}], "ir_algo_name": "none", "ir_algo_output_code": "det main ( ):\nString = str (input (\"Enter string: ')\nfor i in range ((len(string)-1) ,- 1 ,- 1):\nprint (string [1])\nif __ name _== '-main-':\nmain()", "ir_algo_output_edit_distance": 51, "prompting_method": "none", "lm_post_processed_code": "det main ( ):\nString = str (input (\"Enter string: ')\nfor i in range ((len(string)-1) ,- 1 ,- 1):\nprint (string [1])\nif __ name _== '-main-':\nmain()", "lm_post_processed_edit_distance": 51}, {"image_id": 18, "image_height": 2057, "image_width": 4134, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 229.0, "y": 120.0, "w": 933.0, "h": 142.0, "line_num": 1, "text": "det main ( ):"}, {"x": 540.0, "y": 290.0, "w": 2614.0, "h": 166.0, "line_num": 2, "text": "String = str (input (\"Enter string: ')"}, {"x": 529.0, "y": 474.0, "w": 2975.0, "h": 218.0, "line_num": 3, "text": "for i in range ((len(string)-1) ,- 1 ,- 1):"}, {"x": 825.0, "y": 718.0, "w": 1124.0, "h": 180.0, "line_num": 4, "text": "print (string [1])"}, {"x": 208.0, "y": 1014.0, "w": 1766.0, "h": 183.0, "line_num": 5, "text": "if __ name _== '-main-':"}, {"x": 335.0, "y": 1246.0, "w": 482.0, "h": 145.0, "line_num": 6, "text": "main()"}], "ir_algo_name": "none", "ir_algo_output_code": "det main ( ):\nString = str (input (\"Enter string: ')\nfor i in range ((len(string)-1) ,- 1 ,- 1):\nprint (string [1])\nif __ name _== '-main-':\nmain()", "ir_algo_output_edit_distance": 51, "prompting_method": "cot-test1", "lm_post_processed_code": "def main ( ):\n    string = str (input (\"Enter string: \"))\n    for i in range ((len(string)-1) ,- 1 ,- 1):\n        print (string [i])\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 15}, {"image_id": 18, "image_height": 2057, "image_width": 4134, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 229.0, "y": 120.0, "w": 933.0, "h": 142.0, "line_num": 1, "text": "det main ( ):"}, {"x": 540.0, "y": 290.0, "w": 2614.0, "h": 166.0, "line_num": 2, "text": "String = str (input (\"Enter string: ')"}, {"x": 529.0, "y": 474.0, "w": 2975.0, "h": 218.0, "line_num": 3, "text": "for i in range ((len(string)-1) ,- 1 ,- 1):"}, {"x": 825.0, "y": 718.0, "w": 1124.0, "h": 180.0, "line_num": 4, "text": "print (string [1])"}, {"x": 208.0, "y": 1014.0, "w": 1766.0, "h": 183.0, "line_num": 5, "text": "if __ name _== '-main-':"}, {"x": 335.0, "y": 1246.0, "w": 482.0, "h": 145.0, "line_num": 6, "text": "main()"}], "ir_algo_name": "none", "ir_algo_output_code": "det main ( ):\nString = str (input (\"Enter string: ')\nfor i in range ((len(string)-1) ,- 1 ,- 1):\nprint (string [1])\nif __ name _== '-main-':\nmain()", "ir_algo_output_edit_distance": 51, "prompting_method": "cot-test5", "lm_post_processed_code": "def main():\nstring = str(input(\"Enter string: \"))\nfor i in range((len(string)-1), -1, -1):\nprint(string[1])\n\nif __name__ == \"__main__\":\nmain()\n", "lm_post_processed_edit_distance": 23}, {"image_id": 18, "image_height": 2057, "image_width": 4134, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 229.0, "y": 120.0, "w": 933.0, "h": 142.0, "line_num": 1, "text": "det main ( ):"}, {"x": 540.0, "y": 290.0, "w": 2614.0, "h": 166.0, "line_num": 2, "text": "String = str (input (\"Enter string: ')"}, {"x": 529.0, "y": 474.0, "w": 2975.0, "h": 218.0, "line_num": 3, "text": "for i in range ((len(string)-1) ,- 1 ,- 1):"}, {"x": 825.0, "y": 718.0, "w": 1124.0, "h": 180.0, "line_num": 4, "text": "print (string [1])"}, {"x": 208.0, "y": 1014.0, "w": 1766.0, "h": 183.0, "line_num": 5, "text": "if __ name _== '-main-':"}, {"x": 335.0, "y": 1246.0, "w": 482.0, "h": 145.0, "line_num": 6, "text": "main()"}], "ir_algo_name": "none", "ir_algo_output_code": "det main ( ):\nString = str (input (\"Enter string: ')\nfor i in range ((len(string)-1) ,- 1 ,- 1):\nprint (string [1])\nif __ name _== '-main-':\nmain()", "ir_algo_output_edit_distance": 51, "prompting_method": "simple-test2", "lm_post_processed_code": "def main():\n    string = str(input(\"Enter string: \"))\n    for i in range((len(string)-1), -1, -1):\n        print(string[i])\n    if __name__ == '__main__':\n        main()\n", "lm_post_processed_edit_distance": 12}, {"image_id": 18, "image_height": 2057, "image_width": 4134, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 229.0, "y": 120.0, "w": 933.0, "h": 142.0, "line_num": 1, "text": "det main ( ):"}, {"x": 540.0, "y": 290.0, "w": 2614.0, "h": 166.0, "line_num": 2, "text": "String = str (input (\"Enter string: ')"}, {"x": 529.0, "y": 474.0, "w": 2975.0, "h": 218.0, "line_num": 3, "text": "for i in range ((len(string)-1) ,- 1 ,- 1):"}, {"x": 825.0, "y": 718.0, "w": 1124.0, "h": 180.0, "line_num": 4, "text": "print (string [1])"}, {"x": 208.0, "y": 1014.0, "w": 1766.0, "h": 183.0, "line_num": 5, "text": "if __ name _== '-main-':"}, {"x": 335.0, "y": 1246.0, "w": 482.0, "h": 145.0, "line_num": 6, "text": "main()"}], "ir_algo_name": "none", "ir_algo_output_code": "det main ( ):\nString = str (input (\"Enter string: ')\nfor i in range ((len(string)-1) ,- 1 ,- 1):\nprint (string [1])\nif __ name _== '-main-':\nmain()", "ir_algo_output_edit_distance": 51, "prompting_method": "simple-test3", "lm_post_processed_code": "def main():\n    string = str(input(\"Enter string: \"))\n    for i in range((len(string)-1), -1, -1):\n        print(string[i])\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 5}, {"image_id": 18, "image_height": 2057, "image_width": 4134, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 229.0, "y": 120.0, "w": 933.0, "h": 142.0, "line_num": 1, "text": "det main ( ):"}, {"x": 540.0, "y": 290.0, "w": 2614.0, "h": 166.0, "line_num": 2, "text": "String = str (input (\"Enter string: ')"}, {"x": 529.0, "y": 474.0, "w": 2975.0, "h": 218.0, "line_num": 3, "text": "for i in range ((len(string)-1) ,- 1 ,- 1):"}, {"x": 825.0, "y": 718.0, "w": 1124.0, "h": 180.0, "line_num": 4, "text": "print (string [1])"}, {"x": 208.0, "y": 1014.0, "w": 1766.0, "h": 183.0, "line_num": 5, "text": "if __ name _== '-main-':"}, {"x": 335.0, "y": 1246.0, "w": 482.0, "h": 145.0, "line_num": 6, "text": "main()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 258.5, "ir_algo_output_code": "det main ( ):\nString = str (input (\"Enter string: ')\nfor i in range ((len(string)-1) ,- 1 ,- 1):\n    print (string [1])\nif __ name _== '-main-':\nmain()\n", "ir_algo_output_indented_lines": [{"x": 229.0, "y": 120.0, "w": 933.0, "h": 142.0, "line_num": 1, "text": "det main ( ):", "cluster_label": 0, "indentation": 0}, {"x": 540.0, "y": 290.0, "w": 2614.0, "h": 166.0, "line_num": 2, "text": "String = str (input (\"Enter string: ')", "cluster_label": 0, "indentation": 0}, {"x": 529.0, "y": 474.0, "w": 2975.0, "h": 218.0, "line_num": 3, "text": "for i in range ((len(string)-1) ,- 1 ,- 1):", "cluster_label": 0, "indentation": 0}, {"x": 825.0, "y": 718.0, "w": 1124.0, "h": 180.0, "line_num": 4, "text": "print (string [1])", "cluster_label": 1, "indentation": 1}, {"x": 208.0, "y": 1014.0, "w": 1766.0, "h": 183.0, "line_num": 5, "text": "if __ name _== '-main-':", "cluster_label": 0, "indentation": 0}, {"x": 335.0, "y": 1246.0, "w": 482.0, "h": 145.0, "line_num": 6, "text": "main()", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 46, "prompting_method": "none", "lm_post_processed_code": "det main ( ):\nString = str (input (\"Enter string: ')\nfor i in range ((len(string)-1) ,- 1 ,- 1):\n    print (string [1])\nif __ name _== '-main-':\nmain()\n", "lm_post_processed_edit_distance": 46}, {"image_id": 18, "image_height": 2057, "image_width": 4134, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 229.0, "y": 120.0, "w": 933.0, "h": 142.0, "line_num": 1, "text": "det main ( ):"}, {"x": 540.0, "y": 290.0, "w": 2614.0, "h": 166.0, "line_num": 2, "text": "String = str (input (\"Enter string: ')"}, {"x": 529.0, "y": 474.0, "w": 2975.0, "h": 218.0, "line_num": 3, "text": "for i in range ((len(string)-1) ,- 1 ,- 1):"}, {"x": 825.0, "y": 718.0, "w": 1124.0, "h": 180.0, "line_num": 4, "text": "print (string [1])"}, {"x": 208.0, "y": 1014.0, "w": 1766.0, "h": 183.0, "line_num": 5, "text": "if __ name _== '-main-':"}, {"x": 335.0, "y": 1246.0, "w": 482.0, "h": 145.0, "line_num": 6, "text": "main()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 258.5, "ir_algo_output_code": "det main ( ):\nString = str (input (\"Enter string: ')\nfor i in range ((len(string)-1) ,- 1 ,- 1):\n    print (string [1])\nif __ name _== '-main-':\nmain()\n", "ir_algo_output_indented_lines": [{"x": 229.0, "y": 120.0, "w": 933.0, "h": 142.0, "line_num": 1, "text": "det main ( ):", "cluster_label": 0, "indentation": 0}, {"x": 540.0, "y": 290.0, "w": 2614.0, "h": 166.0, "line_num": 2, "text": "String = str (input (\"Enter string: ')", "cluster_label": 0, "indentation": 0}, {"x": 529.0, "y": 474.0, "w": 2975.0, "h": 218.0, "line_num": 3, "text": "for i in range ((len(string)-1) ,- 1 ,- 1):", "cluster_label": 0, "indentation": 0}, {"x": 825.0, "y": 718.0, "w": 1124.0, "h": 180.0, "line_num": 4, "text": "print (string [1])", "cluster_label": 1, "indentation": 1}, {"x": 208.0, "y": 1014.0, "w": 1766.0, "h": 183.0, "line_num": 5, "text": "if __ name _== '-main-':", "cluster_label": 0, "indentation": 0}, {"x": 335.0, "y": 1246.0, "w": 482.0, "h": 145.0, "line_num": 6, "text": "main()", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 46, "prompting_method": "cot-test1", "lm_post_processed_code": "def main ( ):\n    string = str (input (\"Enter string: \"))\n    for i in range ((len(string)-1) ,- 1 ,- 1):\n        print (string [i])\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 15}, {"image_id": 18, "image_height": 2057, "image_width": 4134, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 229.0, "y": 120.0, "w": 933.0, "h": 142.0, "line_num": 1, "text": "det main ( ):"}, {"x": 540.0, "y": 290.0, "w": 2614.0, "h": 166.0, "line_num": 2, "text": "String = str (input (\"Enter string: ')"}, {"x": 529.0, "y": 474.0, "w": 2975.0, "h": 218.0, "line_num": 3, "text": "for i in range ((len(string)-1) ,- 1 ,- 1):"}, {"x": 825.0, "y": 718.0, "w": 1124.0, "h": 180.0, "line_num": 4, "text": "print (string [1])"}, {"x": 208.0, "y": 1014.0, "w": 1766.0, "h": 183.0, "line_num": 5, "text": "if __ name _== '-main-':"}, {"x": 335.0, "y": 1246.0, "w": 482.0, "h": 145.0, "line_num": 6, "text": "main()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 258.5, "ir_algo_output_code": "det main ( ):\nString = str (input (\"Enter string: ')\nfor i in range ((len(string)-1) ,- 1 ,- 1):\n    print (string [1])\nif __ name _== '-main-':\nmain()\n", "ir_algo_output_indented_lines": [{"x": 229.0, "y": 120.0, "w": 933.0, "h": 142.0, "line_num": 1, "text": "det main ( ):", "cluster_label": 0, "indentation": 0}, {"x": 540.0, "y": 290.0, "w": 2614.0, "h": 166.0, "line_num": 2, "text": "String = str (input (\"Enter string: ')", "cluster_label": 0, "indentation": 0}, {"x": 529.0, "y": 474.0, "w": 2975.0, "h": 218.0, "line_num": 3, "text": "for i in range ((len(string)-1) ,- 1 ,- 1):", "cluster_label": 0, "indentation": 0}, {"x": 825.0, "y": 718.0, "w": 1124.0, "h": 180.0, "line_num": 4, "text": "print (string [1])", "cluster_label": 1, "indentation": 1}, {"x": 208.0, "y": 1014.0, "w": 1766.0, "h": 183.0, "line_num": 5, "text": "if __ name _== '-main-':", "cluster_label": 0, "indentation": 0}, {"x": 335.0, "y": 1246.0, "w": 482.0, "h": 145.0, "line_num": 6, "text": "main()", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 46, "prompting_method": "cot-test5", "lm_post_processed_code": "def main():\nstring = str(input(\"Enter string: \"))\nfor i in range((len(string)-1), -1, -1):\n    print(string[1])\n\nif __name__ == \"__main__\":\nmain()\n", "lm_post_processed_edit_distance": 19}, {"image_id": 18, "image_height": 2057, "image_width": 4134, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 229.0, "y": 120.0, "w": 933.0, "h": 142.0, "line_num": 1, "text": "det main ( ):"}, {"x": 540.0, "y": 290.0, "w": 2614.0, "h": 166.0, "line_num": 2, "text": "String = str (input (\"Enter string: ')"}, {"x": 529.0, "y": 474.0, "w": 2975.0, "h": 218.0, "line_num": 3, "text": "for i in range ((len(string)-1) ,- 1 ,- 1):"}, {"x": 825.0, "y": 718.0, "w": 1124.0, "h": 180.0, "line_num": 4, "text": "print (string [1])"}, {"x": 208.0, "y": 1014.0, "w": 1766.0, "h": 183.0, "line_num": 5, "text": "if __ name _== '-main-':"}, {"x": 335.0, "y": 1246.0, "w": 482.0, "h": 145.0, "line_num": 6, "text": "main()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 258.5, "ir_algo_output_code": "det main ( ):\nString = str (input (\"Enter string: ')\nfor i in range ((len(string)-1) ,- 1 ,- 1):\n    print (string [1])\nif __ name _== '-main-':\nmain()\n", "ir_algo_output_indented_lines": [{"x": 229.0, "y": 120.0, "w": 933.0, "h": 142.0, "line_num": 1, "text": "det main ( ):", "cluster_label": 0, "indentation": 0}, {"x": 540.0, "y": 290.0, "w": 2614.0, "h": 166.0, "line_num": 2, "text": "String = str (input (\"Enter string: ')", "cluster_label": 0, "indentation": 0}, {"x": 529.0, "y": 474.0, "w": 2975.0, "h": 218.0, "line_num": 3, "text": "for i in range ((len(string)-1) ,- 1 ,- 1):", "cluster_label": 0, "indentation": 0}, {"x": 825.0, "y": 718.0, "w": 1124.0, "h": 180.0, "line_num": 4, "text": "print (string [1])", "cluster_label": 1, "indentation": 1}, {"x": 208.0, "y": 1014.0, "w": 1766.0, "h": 183.0, "line_num": 5, "text": "if __ name _== '-main-':", "cluster_label": 0, "indentation": 0}, {"x": 335.0, "y": 1246.0, "w": 482.0, "h": 145.0, "line_num": 6, "text": "main()", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 46, "prompting_method": "simple-test2", "lm_post_processed_code": "def main():\n    string = str(input(\"Enter string: \"))\n    for i in range((len(string)-1), -1, -1):\n        print(string[i])\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 5}, {"image_id": 18, "image_height": 2057, "image_width": 4134, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 229.0, "y": 120.0, "w": 933.0, "h": 142.0, "line_num": 1, "text": "det main ( ):"}, {"x": 540.0, "y": 290.0, "w": 2614.0, "h": 166.0, "line_num": 2, "text": "String = str (input (\"Enter string: ')"}, {"x": 529.0, "y": 474.0, "w": 2975.0, "h": 218.0, "line_num": 3, "text": "for i in range ((len(string)-1) ,- 1 ,- 1):"}, {"x": 825.0, "y": 718.0, "w": 1124.0, "h": 180.0, "line_num": 4, "text": "print (string [1])"}, {"x": 208.0, "y": 1014.0, "w": 1766.0, "h": 183.0, "line_num": 5, "text": "if __ name _== '-main-':"}, {"x": 335.0, "y": 1246.0, "w": 482.0, "h": 145.0, "line_num": 6, "text": "main()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 258.5, "ir_algo_output_code": "det main ( ):\nString = str (input (\"Enter string: ')\nfor i in range ((len(string)-1) ,- 1 ,- 1):\n    print (string [1])\nif __ name _== '-main-':\nmain()\n", "ir_algo_output_indented_lines": [{"x": 229.0, "y": 120.0, "w": 933.0, "h": 142.0, "line_num": 1, "text": "det main ( ):", "cluster_label": 0, "indentation": 0}, {"x": 540.0, "y": 290.0, "w": 2614.0, "h": 166.0, "line_num": 2, "text": "String = str (input (\"Enter string: ')", "cluster_label": 0, "indentation": 0}, {"x": 529.0, "y": 474.0, "w": 2975.0, "h": 218.0, "line_num": 3, "text": "for i in range ((len(string)-1) ,- 1 ,- 1):", "cluster_label": 0, "indentation": 0}, {"x": 825.0, "y": 718.0, "w": 1124.0, "h": 180.0, "line_num": 4, "text": "print (string [1])", "cluster_label": 1, "indentation": 1}, {"x": 208.0, "y": 1014.0, "w": 1766.0, "h": 183.0, "line_num": 5, "text": "if __ name _== '-main-':", "cluster_label": 0, "indentation": 0}, {"x": 335.0, "y": 1246.0, "w": 482.0, "h": 145.0, "line_num": 6, "text": "main()", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 46, "prompting_method": "simple-test3", "lm_post_processed_code": "def main():\n    string = str(input(\"Enter string: \"))\n    for i in range((len(string)-1), -1, -1):\n        print(string[i])\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 5}, {"image_id": 18, "image_height": 2057, "image_width": 4134, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 229.0, "y": 120.0, "w": 933.0, "h": 142.0, "line_num": 1, "text": "det main ( ):"}, {"x": 540.0, "y": 290.0, "w": 2614.0, "h": 166.0, "line_num": 2, "text": "String = str (input (\"Enter string: ')"}, {"x": 529.0, "y": 474.0, "w": 2975.0, "h": 218.0, "line_num": 3, "text": "for i in range ((len(string)-1) ,- 1 ,- 1):"}, {"x": 825.0, "y": 718.0, "w": 1124.0, "h": 180.0, "line_num": 4, "text": "print (string [1])"}, {"x": 208.0, "y": 1014.0, "w": 1766.0, "h": 183.0, "line_num": 5, "text": "if __ name _== '-main-':"}, {"x": 335.0, "y": 1246.0, "w": 482.0, "h": 145.0, "line_num": 6, "text": "main()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "det main ( ):\n    String = str (input (\"Enter string: ')\n    for i in range ((len(string)-1) ,- 1 ,- 1):\n        print (string [1])\nif __ name _== '-main-':\n    main()\n", "ir_algo_output_indented_lines": [{"x": 229.0, "y": 120.0, "w": 933.0, "h": 142.0, "line_num": 1, "text": "det main ( ):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 540.0, "y": 290.0, "w": 2614.0, "h": 166.0, "line_num": 2, "text": "String = str (input (\"Enter string: ')", "delta": 311.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 529.0, "y": 474.0, "w": 2975.0, "h": 218.0, "line_num": 3, "text": "for i in range ((len(string)-1) ,- 1 ,- 1):", "delta": -11.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 825.0, "y": 718.0, "w": 1124.0, "h": 180.0, "line_num": 4, "text": "print (string [1])", "delta": 296.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 208.0, "y": 1014.0, "w": 1766.0, "h": 183.0, "line_num": 5, "text": "if __ name _== '-main-':", "delta": -617.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 335.0, "y": 1246.0, "w": 482.0, "h": 145.0, "line_num": 6, "text": "main()", "delta": 127.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}], "ir_algo_output_edit_distance": 30, "prompting_method": "none", "lm_post_processed_code": "det main ( ):\n    String = str (input (\"Enter string: ')\n    for i in range ((len(string)-1) ,- 1 ,- 1):\n        print (string [1])\nif __ name _== '-main-':\n    main()\n", "lm_post_processed_edit_distance": 30}, {"image_id": 18, "image_height": 2057, "image_width": 4134, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 229.0, "y": 120.0, "w": 933.0, "h": 142.0, "line_num": 1, "text": "det main ( ):"}, {"x": 540.0, "y": 290.0, "w": 2614.0, "h": 166.0, "line_num": 2, "text": "String = str (input (\"Enter string: ')"}, {"x": 529.0, "y": 474.0, "w": 2975.0, "h": 218.0, "line_num": 3, "text": "for i in range ((len(string)-1) ,- 1 ,- 1):"}, {"x": 825.0, "y": 718.0, "w": 1124.0, "h": 180.0, "line_num": 4, "text": "print (string [1])"}, {"x": 208.0, "y": 1014.0, "w": 1766.0, "h": 183.0, "line_num": 5, "text": "if __ name _== '-main-':"}, {"x": 335.0, "y": 1246.0, "w": 482.0, "h": 145.0, "line_num": 6, "text": "main()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "det main ( ):\n    String = str (input (\"Enter string: ')\n    for i in range ((len(string)-1) ,- 1 ,- 1):\n        print (string [1])\nif __ name _== '-main-':\n    main()\n", "ir_algo_output_indented_lines": [{"x": 229.0, "y": 120.0, "w": 933.0, "h": 142.0, "line_num": 1, "text": "det main ( ):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 540.0, "y": 290.0, "w": 2614.0, "h": 166.0, "line_num": 2, "text": "String = str (input (\"Enter string: ')", "delta": 311.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 529.0, "y": 474.0, "w": 2975.0, "h": 218.0, "line_num": 3, "text": "for i in range ((len(string)-1) ,- 1 ,- 1):", "delta": -11.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 825.0, "y": 718.0, "w": 1124.0, "h": 180.0, "line_num": 4, "text": "print (string [1])", "delta": 296.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 208.0, "y": 1014.0, "w": 1766.0, "h": 183.0, "line_num": 5, "text": "if __ name _== '-main-':", "delta": -617.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 335.0, "y": 1246.0, "w": 482.0, "h": 145.0, "line_num": 6, "text": "main()", "delta": 127.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}], "ir_algo_output_edit_distance": 30, "prompting_method": "cot-test1", "lm_post_processed_code": "def main ( ):\n    string = str (input (\"Enter string: \"))\n    for i in range ((len(string)-1) ,- 1 ,- 1):\n        print (string [i])\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 15}, {"image_id": 18, "image_height": 2057, "image_width": 4134, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 229.0, "y": 120.0, "w": 933.0, "h": 142.0, "line_num": 1, "text": "det main ( ):"}, {"x": 540.0, "y": 290.0, "w": 2614.0, "h": 166.0, "line_num": 2, "text": "String = str (input (\"Enter string: ')"}, {"x": 529.0, "y": 474.0, "w": 2975.0, "h": 218.0, "line_num": 3, "text": "for i in range ((len(string)-1) ,- 1 ,- 1):"}, {"x": 825.0, "y": 718.0, "w": 1124.0, "h": 180.0, "line_num": 4, "text": "print (string [1])"}, {"x": 208.0, "y": 1014.0, "w": 1766.0, "h": 183.0, "line_num": 5, "text": "if __ name _== '-main-':"}, {"x": 335.0, "y": 1246.0, "w": 482.0, "h": 145.0, "line_num": 6, "text": "main()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "det main ( ):\n    String = str (input (\"Enter string: ')\n    for i in range ((len(string)-1) ,- 1 ,- 1):\n        print (string [1])\nif __ name _== '-main-':\n    main()\n", "ir_algo_output_indented_lines": [{"x": 229.0, "y": 120.0, "w": 933.0, "h": 142.0, "line_num": 1, "text": "det main ( ):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 540.0, "y": 290.0, "w": 2614.0, "h": 166.0, "line_num": 2, "text": "String = str (input (\"Enter string: ')", "delta": 311.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 529.0, "y": 474.0, "w": 2975.0, "h": 218.0, "line_num": 3, "text": "for i in range ((len(string)-1) ,- 1 ,- 1):", "delta": -11.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 825.0, "y": 718.0, "w": 1124.0, "h": 180.0, "line_num": 4, "text": "print (string [1])", "delta": 296.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 208.0, "y": 1014.0, "w": 1766.0, "h": 183.0, "line_num": 5, "text": "if __ name _== '-main-':", "delta": -617.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 335.0, "y": 1246.0, "w": 482.0, "h": 145.0, "line_num": 6, "text": "main()", "delta": 127.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}], "ir_algo_output_edit_distance": 30, "prompting_method": "cot-test5", "lm_post_processed_code": "def main ( ):\n    string = str (input (\"Enter string: \"))\n    for i in range ((len(string)-1) ,- 1 ,- 1):\n        print (string [i])\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 18}, {"image_id": 18, "image_height": 2057, "image_width": 4134, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 229.0, "y": 120.0, "w": 933.0, "h": 142.0, "line_num": 1, "text": "det main ( ):"}, {"x": 540.0, "y": 290.0, "w": 2614.0, "h": 166.0, "line_num": 2, "text": "String = str (input (\"Enter string: ')"}, {"x": 529.0, "y": 474.0, "w": 2975.0, "h": 218.0, "line_num": 3, "text": "for i in range ((len(string)-1) ,- 1 ,- 1):"}, {"x": 825.0, "y": 718.0, "w": 1124.0, "h": 180.0, "line_num": 4, "text": "print (string [1])"}, {"x": 208.0, "y": 1014.0, "w": 1766.0, "h": 183.0, "line_num": 5, "text": "if __ name _== '-main-':"}, {"x": 335.0, "y": 1246.0, "w": 482.0, "h": 145.0, "line_num": 6, "text": "main()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "det main ( ):\n    String = str (input (\"Enter string: ')\n    for i in range ((len(string)-1) ,- 1 ,- 1):\n        print (string [1])\nif __ name _== '-main-':\n    main()\n", "ir_algo_output_indented_lines": [{"x": 229.0, "y": 120.0, "w": 933.0, "h": 142.0, "line_num": 1, "text": "det main ( ):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 540.0, "y": 290.0, "w": 2614.0, "h": 166.0, "line_num": 2, "text": "String = str (input (\"Enter string: ')", "delta": 311.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 529.0, "y": 474.0, "w": 2975.0, "h": 218.0, "line_num": 3, "text": "for i in range ((len(string)-1) ,- 1 ,- 1):", "delta": -11.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 825.0, "y": 718.0, "w": 1124.0, "h": 180.0, "line_num": 4, "text": "print (string [1])", "delta": 296.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 208.0, "y": 1014.0, "w": 1766.0, "h": 183.0, "line_num": 5, "text": "if __ name _== '-main-':", "delta": -617.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 335.0, "y": 1246.0, "w": 482.0, "h": 145.0, "line_num": 6, "text": "main()", "delta": 127.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}], "ir_algo_output_edit_distance": 30, "prompting_method": "simple-test2", "lm_post_processed_code": "def main():\n    string = str(input(\"Enter string: \"))\n    for i in range((len(string)-1), -1, -1):\n        print(string[i])\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 5}, {"image_id": 18, "image_height": 2057, "image_width": 4134, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 229.0, "y": 120.0, "w": 933.0, "h": 142.0, "line_num": 1, "text": "det main ( ):"}, {"x": 540.0, "y": 290.0, "w": 2614.0, "h": 166.0, "line_num": 2, "text": "String = str (input (\"Enter string: ')"}, {"x": 529.0, "y": 474.0, "w": 2975.0, "h": 218.0, "line_num": 3, "text": "for i in range ((len(string)-1) ,- 1 ,- 1):"}, {"x": 825.0, "y": 718.0, "w": 1124.0, "h": 180.0, "line_num": 4, "text": "print (string [1])"}, {"x": 208.0, "y": 1014.0, "w": 1766.0, "h": 183.0, "line_num": 5, "text": "if __ name _== '-main-':"}, {"x": 335.0, "y": 1246.0, "w": 482.0, "h": 145.0, "line_num": 6, "text": "main()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "det main ( ):\n    String = str (input (\"Enter string: ')\n    for i in range ((len(string)-1) ,- 1 ,- 1):\n        print (string [1])\nif __ name _== '-main-':\n    main()\n", "ir_algo_output_indented_lines": [{"x": 229.0, "y": 120.0, "w": 933.0, "h": 142.0, "line_num": 1, "text": "det main ( ):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 540.0, "y": 290.0, "w": 2614.0, "h": 166.0, "line_num": 2, "text": "String = str (input (\"Enter string: ')", "delta": 311.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 529.0, "y": 474.0, "w": 2975.0, "h": 218.0, "line_num": 3, "text": "for i in range ((len(string)-1) ,- 1 ,- 1):", "delta": -11.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 825.0, "y": 718.0, "w": 1124.0, "h": 180.0, "line_num": 4, "text": "print (string [1])", "delta": 296.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 208.0, "y": 1014.0, "w": 1766.0, "h": 183.0, "line_num": 5, "text": "if __ name _== '-main-':", "delta": -617.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 335.0, "y": 1246.0, "w": 482.0, "h": 145.0, "line_num": 6, "text": "main()", "delta": 127.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}], "ir_algo_output_edit_distance": 30, "prompting_method": "simple-test3", "lm_post_processed_code": "def main():\n    string = str(input(\"Enter string: \"))\n    for i in range((len(string)-1), -1, -1):\n        print(string[i])\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 5}, {"image_id": 19, "image_height": 2048, "image_width": 1536, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 298.0, "y": 194.0, "w": 303.0, "h": 72.0, "line_num": 1, "text": "def main ():"}, {"x": 303.0, "y": 274.0, "w": 773.0, "h": 74.0, "line_num": 2, "text": "num = int (input (\" Enter a Nmbu :"}, {"x": 300.0, "y": 336.0, "w": 1105.0, "h": 61.0, "line_num": 3, "text": "print (f\"Enums is &'prime if is_ prime (nom)"}, {"x": 812.0, "y": 396.0, "w": 476.0, "h": 60.0, "line_num": 4, "text": "else not prim\u00e9 3\")"}, {"x": 256.0, "y": 469.0, "w": 533.0, "h": 78.0, "line_num": 5, "text": "def is- prone (1) :"}, {"x": 379.0, "y": 542.0, "w": 390.0, "h": 68.0, "line_num": 6, "text": "if n <= 12"}, {"x": 470.0, "y": 610.0, "w": 435.0, "h": 66.0, "line_num": 7, "text": "return false"}, {"x": 384.0, "y": 702.0, "w": 480.0, "h": 82.0, "line_num": 8, "text": "elif > <= 3:"}, {"x": 441.0, "y": 789.0, "w": 462.0, "h": 80.0, "line_num": 9, "text": "return True"}, {"x": 362.0, "y": 889.0, "w": 1019.0, "h": 102.0, "line_num": 10, "text": "elf n/ 2 == x OR 1% 3= 6 ;"}, {"x": 463.0, "y": 995.0, "w": 518.0, "h": 76.0, "line_num": 11, "text": "return False"}, {"x": 324.0, "y": 1127.0, "w": 1200.0, "h": 95.0, "line_num": 12, "text": "for i in Range (5, int (n+\"0.5) + 1,6"}, {"x": 404.0, "y": 1221.0, "w": 1082.0, "h": 82.0, "line_num": 13, "text": "if 1% i =x or 1%(i+2) =6:"}, {"x": 537.0, "y": 1306.0, "w": 485.0, "h": 75.0, "line_num": 14, "text": "return False"}, {"x": 368.0, "y": 1386.0, "w": 550.0, "h": 79.0, "line_num": 15, "text": "return True"}, {"x": 280.0, "y": 1512.0, "w": 234.0, "h": 141.0, "line_num": 16, "text": "- nor"}, {"x": 810.0, "y": 1547.0, "w": 457.0, "h": 95.0, "line_num": 17, "text": "= - - main"}, {"x": 349.0, "y": 1662.0, "w": 394.0, "h": 103.0, "line_num": 18, "text": "main ()"}], "ir_algo_name": "none", "ir_algo_output_code": "def main ():\nnum = int (input (\" Enter a Nmbu :\nprint (f\"Enums is &'prime if is_ prime (nom)\nelse not prim\u00e9 3\")\ndef is- prone (1) :\nif n <= 12\nreturn false\nelif > <= 3:\nreturn True\nelf n/ 2 == x OR 1% 3= 6 ;\nreturn False\nfor i in Range (5, int (n+\"0.5) + 1,6\nif 1% i =x or 1%(i+2) =6:\nreturn False\nreturn True\n- nor\n= - - main\nmain ()", "ir_algo_output_edit_distance": 166, "prompting_method": "none", "lm_post_processed_code": "def main ():\nnum = int (input (\" Enter a Nmbu :\nprint (f\"Enums is &'prime if is_ prime (nom)\nelse not prim\u00e9 3\")\ndef is- prone (1) :\nif n <= 12\nreturn false\nelif > <= 3:\nreturn True\nelf n/ 2 == x OR 1% 3= 6 ;\nreturn False\nfor i in Range (5, int (n+\"0.5) + 1,6\nif 1% i =x or 1%(i+2) =6:\nreturn False\nreturn True\n- nor\n= - - main\nmain ()", "lm_post_processed_edit_distance": 166}, {"image_id": 19, "image_height": 2048, "image_width": 1536, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 298.0, "y": 194.0, "w": 303.0, "h": 72.0, "line_num": 1, "text": "def main ():"}, {"x": 303.0, "y": 274.0, "w": 773.0, "h": 74.0, "line_num": 2, "text": "num = int (input (\" Enter a Nmbu :"}, {"x": 300.0, "y": 336.0, "w": 1105.0, "h": 61.0, "line_num": 3, "text": "print (f\"Enums is &'prime if is_ prime (nom)"}, {"x": 812.0, "y": 396.0, "w": 476.0, "h": 60.0, "line_num": 4, "text": "else not prim\u00e9 3\")"}, {"x": 256.0, "y": 469.0, "w": 533.0, "h": 78.0, "line_num": 5, "text": "def is- prone (1) :"}, {"x": 379.0, "y": 542.0, "w": 390.0, "h": 68.0, "line_num": 6, "text": "if n <= 12"}, {"x": 470.0, "y": 610.0, "w": 435.0, "h": 66.0, "line_num": 7, "text": "return false"}, {"x": 384.0, "y": 702.0, "w": 480.0, "h": 82.0, "line_num": 8, "text": "elif > <= 3:"}, {"x": 441.0, "y": 789.0, "w": 462.0, "h": 80.0, "line_num": 9, "text": "return True"}, {"x": 362.0, "y": 889.0, "w": 1019.0, "h": 102.0, "line_num": 10, "text": "elf n/ 2 == x OR 1% 3= 6 ;"}, {"x": 463.0, "y": 995.0, "w": 518.0, "h": 76.0, "line_num": 11, "text": "return False"}, {"x": 324.0, "y": 1127.0, "w": 1200.0, "h": 95.0, "line_num": 12, "text": "for i in Range (5, int (n+\"0.5) + 1,6"}, {"x": 404.0, "y": 1221.0, "w": 1082.0, "h": 82.0, "line_num": 13, "text": "if 1% i =x or 1%(i+2) =6:"}, {"x": 537.0, "y": 1306.0, "w": 485.0, "h": 75.0, "line_num": 14, "text": "return False"}, {"x": 368.0, "y": 1386.0, "w": 550.0, "h": 79.0, "line_num": 15, "text": "return True"}, {"x": 280.0, "y": 1512.0, "w": 234.0, "h": 141.0, "line_num": 16, "text": "- nor"}, {"x": 810.0, "y": 1547.0, "w": 457.0, "h": 95.0, "line_num": 17, "text": "= - - main"}, {"x": 349.0, "y": 1662.0, "w": 394.0, "h": 103.0, "line_num": 18, "text": "main ()"}], "ir_algo_name": "none", "ir_algo_output_code": "def main ():\nnum = int (input (\" Enter a Nmbu :\nprint (f\"Enums is &'prime if is_ prime (nom)\nelse not prim\u00e9 3\")\ndef is- prone (1) :\nif n <= 12\nreturn false\nelif > <= 3:\nreturn True\nelf n/ 2 == x OR 1% 3= 6 ;\nreturn False\nfor i in Range (5, int (n+\"0.5) + 1,6\nif 1% i =x or 1%(i+2) =6:\nreturn False\nreturn True\n- nor\n= - - main\nmain ()", "ir_algo_output_edit_distance": 166, "prompting_method": "cot-test1", "lm_post_processed_code": "def main():\nnum = int(input(\"Enter a Num:\"))\nprint(f\"Num is prime\" if is_prime(num) else \"not prime\")\n\ndef is_prime(n):\nif n <= 1:\nreturn False\nelif n <= 3:\nreturn True\nelif n % 2 == 0 or n % 3 == 0:\nreturn False\nfor i in range(5, int(n**0.5) + 1, 6):\nif n % i == 0 or n % (i+2) == 0:\nreturn False\nreturn True\n\nif __name__ == \"__main__\":\nmain()\n", "lm_post_processed_edit_distance": 92}, {"image_id": 19, "image_height": 2048, "image_width": 1536, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 298.0, "y": 194.0, "w": 303.0, "h": 72.0, "line_num": 1, "text": "def main ():"}, {"x": 303.0, "y": 274.0, "w": 773.0, "h": 74.0, "line_num": 2, "text": "num = int (input (\" Enter a Nmbu :"}, {"x": 300.0, "y": 336.0, "w": 1105.0, "h": 61.0, "line_num": 3, "text": "print (f\"Enums is &'prime if is_ prime (nom)"}, {"x": 812.0, "y": 396.0, "w": 476.0, "h": 60.0, "line_num": 4, "text": "else not prim\u00e9 3\")"}, {"x": 256.0, "y": 469.0, "w": 533.0, "h": 78.0, "line_num": 5, "text": "def is- prone (1) :"}, {"x": 379.0, "y": 542.0, "w": 390.0, "h": 68.0, "line_num": 6, "text": "if n <= 12"}, {"x": 470.0, "y": 610.0, "w": 435.0, "h": 66.0, "line_num": 7, "text": "return false"}, {"x": 384.0, "y": 702.0, "w": 480.0, "h": 82.0, "line_num": 8, "text": "elif > <= 3:"}, {"x": 441.0, "y": 789.0, "w": 462.0, "h": 80.0, "line_num": 9, "text": "return True"}, {"x": 362.0, "y": 889.0, "w": 1019.0, "h": 102.0, "line_num": 10, "text": "elf n/ 2 == x OR 1% 3= 6 ;"}, {"x": 463.0, "y": 995.0, "w": 518.0, "h": 76.0, "line_num": 11, "text": "return False"}, {"x": 324.0, "y": 1127.0, "w": 1200.0, "h": 95.0, "line_num": 12, "text": "for i in Range (5, int (n+\"0.5) + 1,6"}, {"x": 404.0, "y": 1221.0, "w": 1082.0, "h": 82.0, "line_num": 13, "text": "if 1% i =x or 1%(i+2) =6:"}, {"x": 537.0, "y": 1306.0, "w": 485.0, "h": 75.0, "line_num": 14, "text": "return False"}, {"x": 368.0, "y": 1386.0, "w": 550.0, "h": 79.0, "line_num": 15, "text": "return True"}, {"x": 280.0, "y": 1512.0, "w": 234.0, "h": 141.0, "line_num": 16, "text": "- nor"}, {"x": 810.0, "y": 1547.0, "w": 457.0, "h": 95.0, "line_num": 17, "text": "= - - main"}, {"x": 349.0, "y": 1662.0, "w": 394.0, "h": 103.0, "line_num": 18, "text": "main ()"}], "ir_algo_name": "none", "ir_algo_output_code": "def main ():\nnum = int (input (\" Enter a Nmbu :\nprint (f\"Enums is &'prime if is_ prime (nom)\nelse not prim\u00e9 3\")\ndef is- prone (1) :\nif n <= 12\nreturn false\nelif > <= 3:\nreturn True\nelf n/ 2 == x OR 1% 3= 6 ;\nreturn False\nfor i in Range (5, int (n+\"0.5) + 1,6\nif 1% i =x or 1%(i+2) =6:\nreturn False\nreturn True\n- nor\n= - - main\nmain ()", "ir_algo_output_edit_distance": 166, "prompting_method": "cot-test5", "lm_post_processed_code": "def main():\nnum = int(input(\"Enter a Num:\"))\nprint(f\"Num is prime\" if is_prime(num) else \"not prime\")\n\ndef is_prime(n):\nif n <= 1:\nreturn False\nelif n <= 3:\nreturn True\nelif n % 2 == 0 or n % 3 == 0:\nreturn False\nfor i in range(5, int(n**0.5) + 1, 6):\nif n % i == 0 or n % (i+2) == 0:\nreturn False\nreturn True\n\nif __name__ == \"__main__\":\nmain()\n", "lm_post_processed_edit_distance": 92}, {"image_id": 19, "image_height": 2048, "image_width": 1536, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 298.0, "y": 194.0, "w": 303.0, "h": 72.0, "line_num": 1, "text": "def main ():"}, {"x": 303.0, "y": 274.0, "w": 773.0, "h": 74.0, "line_num": 2, "text": "num = int (input (\" Enter a Nmbu :"}, {"x": 300.0, "y": 336.0, "w": 1105.0, "h": 61.0, "line_num": 3, "text": "print (f\"Enums is &'prime if is_ prime (nom)"}, {"x": 812.0, "y": 396.0, "w": 476.0, "h": 60.0, "line_num": 4, "text": "else not prim\u00e9 3\")"}, {"x": 256.0, "y": 469.0, "w": 533.0, "h": 78.0, "line_num": 5, "text": "def is- prone (1) :"}, {"x": 379.0, "y": 542.0, "w": 390.0, "h": 68.0, "line_num": 6, "text": "if n <= 12"}, {"x": 470.0, "y": 610.0, "w": 435.0, "h": 66.0, "line_num": 7, "text": "return false"}, {"x": 384.0, "y": 702.0, "w": 480.0, "h": 82.0, "line_num": 8, "text": "elif > <= 3:"}, {"x": 441.0, "y": 789.0, "w": 462.0, "h": 80.0, "line_num": 9, "text": "return True"}, {"x": 362.0, "y": 889.0, "w": 1019.0, "h": 102.0, "line_num": 10, "text": "elf n/ 2 == x OR 1% 3= 6 ;"}, {"x": 463.0, "y": 995.0, "w": 518.0, "h": 76.0, "line_num": 11, "text": "return False"}, {"x": 324.0, "y": 1127.0, "w": 1200.0, "h": 95.0, "line_num": 12, "text": "for i in Range (5, int (n+\"0.5) + 1,6"}, {"x": 404.0, "y": 1221.0, "w": 1082.0, "h": 82.0, "line_num": 13, "text": "if 1% i =x or 1%(i+2) =6:"}, {"x": 537.0, "y": 1306.0, "w": 485.0, "h": 75.0, "line_num": 14, "text": "return False"}, {"x": 368.0, "y": 1386.0, "w": 550.0, "h": 79.0, "line_num": 15, "text": "return True"}, {"x": 280.0, "y": 1512.0, "w": 234.0, "h": 141.0, "line_num": 16, "text": "- nor"}, {"x": 810.0, "y": 1547.0, "w": 457.0, "h": 95.0, "line_num": 17, "text": "= - - main"}, {"x": 349.0, "y": 1662.0, "w": 394.0, "h": 103.0, "line_num": 18, "text": "main ()"}], "ir_algo_name": "none", "ir_algo_output_code": "def main ():\nnum = int (input (\" Enter a Nmbu :\nprint (f\"Enums is &'prime if is_ prime (nom)\nelse not prim\u00e9 3\")\ndef is- prone (1) :\nif n <= 12\nreturn false\nelif > <= 3:\nreturn True\nelf n/ 2 == x OR 1% 3= 6 ;\nreturn False\nfor i in Range (5, int (n+\"0.5) + 1,6\nif 1% i =x or 1%(i+2) =6:\nreturn False\nreturn True\n- nor\n= - - main\nmain ()", "ir_algo_output_edit_distance": 166, "prompting_method": "simple-test2", "lm_post_processed_code": "def main():\n    num = int(input(\"Enter a Num:\"))\n    print(f\"Num is prime\" if is_prime(num) else \"not prime\")\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(n**0.5) + 1, 6):\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 16}, {"image_id": 19, "image_height": 2048, "image_width": 1536, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 298.0, "y": 194.0, "w": 303.0, "h": 72.0, "line_num": 1, "text": "def main ():"}, {"x": 303.0, "y": 274.0, "w": 773.0, "h": 74.0, "line_num": 2, "text": "num = int (input (\" Enter a Nmbu :"}, {"x": 300.0, "y": 336.0, "w": 1105.0, "h": 61.0, "line_num": 3, "text": "print (f\"Enums is &'prime if is_ prime (nom)"}, {"x": 812.0, "y": 396.0, "w": 476.0, "h": 60.0, "line_num": 4, "text": "else not prim\u00e9 3\")"}, {"x": 256.0, "y": 469.0, "w": 533.0, "h": 78.0, "line_num": 5, "text": "def is- prone (1) :"}, {"x": 379.0, "y": 542.0, "w": 390.0, "h": 68.0, "line_num": 6, "text": "if n <= 12"}, {"x": 470.0, "y": 610.0, "w": 435.0, "h": 66.0, "line_num": 7, "text": "return false"}, {"x": 384.0, "y": 702.0, "w": 480.0, "h": 82.0, "line_num": 8, "text": "elif > <= 3:"}, {"x": 441.0, "y": 789.0, "w": 462.0, "h": 80.0, "line_num": 9, "text": "return True"}, {"x": 362.0, "y": 889.0, "w": 1019.0, "h": 102.0, "line_num": 10, "text": "elf n/ 2 == x OR 1% 3= 6 ;"}, {"x": 463.0, "y": 995.0, "w": 518.0, "h": 76.0, "line_num": 11, "text": "return False"}, {"x": 324.0, "y": 1127.0, "w": 1200.0, "h": 95.0, "line_num": 12, "text": "for i in Range (5, int (n+\"0.5) + 1,6"}, {"x": 404.0, "y": 1221.0, "w": 1082.0, "h": 82.0, "line_num": 13, "text": "if 1% i =x or 1%(i+2) =6:"}, {"x": 537.0, "y": 1306.0, "w": 485.0, "h": 75.0, "line_num": 14, "text": "return False"}, {"x": 368.0, "y": 1386.0, "w": 550.0, "h": 79.0, "line_num": 15, "text": "return True"}, {"x": 280.0, "y": 1512.0, "w": 234.0, "h": 141.0, "line_num": 16, "text": "- nor"}, {"x": 810.0, "y": 1547.0, "w": 457.0, "h": 95.0, "line_num": 17, "text": "= - - main"}, {"x": 349.0, "y": 1662.0, "w": 394.0, "h": 103.0, "line_num": 18, "text": "main ()"}], "ir_algo_name": "none", "ir_algo_output_code": "def main ():\nnum = int (input (\" Enter a Nmbu :\nprint (f\"Enums is &'prime if is_ prime (nom)\nelse not prim\u00e9 3\")\ndef is- prone (1) :\nif n <= 12\nreturn false\nelif > <= 3:\nreturn True\nelf n/ 2 == x OR 1% 3= 6 ;\nreturn False\nfor i in Range (5, int (n+\"0.5) + 1,6\nif 1% i =x or 1%(i+2) =6:\nreturn False\nreturn True\n- nor\n= - - main\nmain ()", "ir_algo_output_edit_distance": 166, "prompting_method": "simple-test3", "lm_post_processed_code": "def main():\n    num = int(input(\"Enter a Num:\"))\n    print(f\"Num is prime\" if is_prime(num) else \"not prime\")\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(n**0.5) + 1, 6):\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 16}, {"image_id": 19, "image_height": 2048, "image_width": 1536, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 298.0, "y": 194.0, "w": 303.0, "h": 72.0, "line_num": 1, "text": "def main ():"}, {"x": 303.0, "y": 274.0, "w": 773.0, "h": 74.0, "line_num": 2, "text": "num = int (input (\" Enter a Nmbu :"}, {"x": 300.0, "y": 336.0, "w": 1105.0, "h": 61.0, "line_num": 3, "text": "print (f\"Enums is &'prime if is_ prime (nom)"}, {"x": 812.0, "y": 396.0, "w": 476.0, "h": 60.0, "line_num": 4, "text": "else not prim\u00e9 3\")"}, {"x": 256.0, "y": 469.0, "w": 533.0, "h": 78.0, "line_num": 5, "text": "def is- prone (1) :"}, {"x": 379.0, "y": 542.0, "w": 390.0, "h": 68.0, "line_num": 6, "text": "if n <= 12"}, {"x": 470.0, "y": 610.0, "w": 435.0, "h": 66.0, "line_num": 7, "text": "return false"}, {"x": 384.0, "y": 702.0, "w": 480.0, "h": 82.0, "line_num": 8, "text": "elif > <= 3:"}, {"x": 441.0, "y": 789.0, "w": 462.0, "h": 80.0, "line_num": 9, "text": "return True"}, {"x": 362.0, "y": 889.0, "w": 1019.0, "h": 102.0, "line_num": 10, "text": "elf n/ 2 == x OR 1% 3= 6 ;"}, {"x": 463.0, "y": 995.0, "w": 518.0, "h": 76.0, "line_num": 11, "text": "return False"}, {"x": 324.0, "y": 1127.0, "w": 1200.0, "h": 95.0, "line_num": 12, "text": "for i in Range (5, int (n+\"0.5) + 1,6"}, {"x": 404.0, "y": 1221.0, "w": 1082.0, "h": 82.0, "line_num": 13, "text": "if 1% i =x or 1%(i+2) =6:"}, {"x": 537.0, "y": 1306.0, "w": 485.0, "h": 75.0, "line_num": 14, "text": "return False"}, {"x": 368.0, "y": 1386.0, "w": 550.0, "h": 79.0, "line_num": 15, "text": "return True"}, {"x": 280.0, "y": 1512.0, "w": 234.0, "h": 141.0, "line_num": 16, "text": "- nor"}, {"x": 810.0, "y": 1547.0, "w": 457.0, "h": 95.0, "line_num": 17, "text": "= - - main"}, {"x": 349.0, "y": 1662.0, "w": 394.0, "h": 103.0, "line_num": 18, "text": "main ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 124.08333333333334, "ir_algo_output_code": "def main ():\nnum = int (input (\" Enter a Nmbu :\nprint (f\"Enums is &'prime if is_ prime (nom)\n    else not prim\u00e9 3\")\ndef is- prone (1) :\nif n <= 12\nreturn false\nelif > <= 3:\nreturn True\nelf n/ 2 == x OR 1% 3= 6 ;\nreturn False\nfor i in Range (5, int (n+\"0.5) + 1,6\nif 1% i =x or 1%(i+2) =6:\nreturn False\nreturn True\n- nor\n    = - - main\nmain ()\n", "ir_algo_output_indented_lines": [{"x": 298.0, "y": 194.0, "w": 303.0, "h": 72.0, "line_num": 1, "text": "def main ():", "cluster_label": 0, "indentation": 0}, {"x": 303.0, "y": 274.0, "w": 773.0, "h": 74.0, "line_num": 2, "text": "num = int (input (\" Enter a Nmbu :", "cluster_label": 0, "indentation": 0}, {"x": 300.0, "y": 336.0, "w": 1105.0, "h": 61.0, "line_num": 3, "text": "print (f\"Enums is &'prime if is_ prime (nom)", "cluster_label": 0, "indentation": 0}, {"x": 812.0, "y": 396.0, "w": 476.0, "h": 60.0, "line_num": 4, "text": "else not prim\u00e9 3\")", "cluster_label": 1, "indentation": 1}, {"x": 256.0, "y": 469.0, "w": 533.0, "h": 78.0, "line_num": 5, "text": "def is- prone (1) :", "cluster_label": 0, "indentation": 0}, {"x": 379.0, "y": 542.0, "w": 390.0, "h": 68.0, "line_num": 6, "text": "if n <= 12", "cluster_label": 0, "indentation": 0}, {"x": 470.0, "y": 610.0, "w": 435.0, "h": 66.0, "line_num": 7, "text": "return false", "cluster_label": 0, "indentation": 0}, {"x": 384.0, "y": 702.0, "w": 480.0, "h": 82.0, "line_num": 8, "text": "elif > <= 3:", "cluster_label": 0, "indentation": 0}, {"x": 441.0, "y": 789.0, "w": 462.0, "h": 80.0, "line_num": 9, "text": "return True", "cluster_label": 0, "indentation": 0}, {"x": 362.0, "y": 889.0, "w": 1019.0, "h": 102.0, "line_num": 10, "text": "elf n/ 2 == x OR 1% 3= 6 ;", "cluster_label": 0, "indentation": 0}, {"x": 463.0, "y": 995.0, "w": 518.0, "h": 76.0, "line_num": 11, "text": "return False", "cluster_label": 0, "indentation": 0}, {"x": 324.0, "y": 1127.0, "w": 1200.0, "h": 95.0, "line_num": 12, "text": "for i in Range (5, int (n+\"0.5) + 1,6", "cluster_label": 0, "indentation": 0}, {"x": 404.0, "y": 1221.0, "w": 1082.0, "h": 82.0, "line_num": 13, "text": "if 1% i =x or 1%(i+2) =6:", "cluster_label": 0, "indentation": 0}, {"x": 537.0, "y": 1306.0, "w": 485.0, "h": 75.0, "line_num": 14, "text": "return False", "cluster_label": 0, "indentation": 0}, {"x": 368.0, "y": 1386.0, "w": 550.0, "h": 79.0, "line_num": 15, "text": "return True", "cluster_label": 0, "indentation": 0}, {"x": 280.0, "y": 1512.0, "w": 234.0, "h": 141.0, "line_num": 16, "text": "- nor", "cluster_label": 0, "indentation": 0}, {"x": 810.0, "y": 1547.0, "w": 457.0, "h": 95.0, "line_num": 17, "text": "= - - main", "cluster_label": 1, "indentation": 1}, {"x": 349.0, "y": 1662.0, "w": 394.0, "h": 103.0, "line_num": 18, "text": "main ()", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 168, "prompting_method": "none", "lm_post_processed_code": "def main ():\nnum = int (input (\" Enter a Nmbu :\nprint (f\"Enums is &'prime if is_ prime (nom)\n    else not prim\u00e9 3\")\ndef is- prone (1) :\nif n <= 12\nreturn false\nelif > <= 3:\nreturn True\nelf n/ 2 == x OR 1% 3= 6 ;\nreturn False\nfor i in Range (5, int (n+\"0.5) + 1,6\nif 1% i =x or 1%(i+2) =6:\nreturn False\nreturn True\n- nor\n    = - - main\nmain ()\n", "lm_post_processed_edit_distance": 168}, {"image_id": 19, "image_height": 2048, "image_width": 1536, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 298.0, "y": 194.0, "w": 303.0, "h": 72.0, "line_num": 1, "text": "def main ():"}, {"x": 303.0, "y": 274.0, "w": 773.0, "h": 74.0, "line_num": 2, "text": "num = int (input (\" Enter a Nmbu :"}, {"x": 300.0, "y": 336.0, "w": 1105.0, "h": 61.0, "line_num": 3, "text": "print (f\"Enums is &'prime if is_ prime (nom)"}, {"x": 812.0, "y": 396.0, "w": 476.0, "h": 60.0, "line_num": 4, "text": "else not prim\u00e9 3\")"}, {"x": 256.0, "y": 469.0, "w": 533.0, "h": 78.0, "line_num": 5, "text": "def is- prone (1) :"}, {"x": 379.0, "y": 542.0, "w": 390.0, "h": 68.0, "line_num": 6, "text": "if n <= 12"}, {"x": 470.0, "y": 610.0, "w": 435.0, "h": 66.0, "line_num": 7, "text": "return false"}, {"x": 384.0, "y": 702.0, "w": 480.0, "h": 82.0, "line_num": 8, "text": "elif > <= 3:"}, {"x": 441.0, "y": 789.0, "w": 462.0, "h": 80.0, "line_num": 9, "text": "return True"}, {"x": 362.0, "y": 889.0, "w": 1019.0, "h": 102.0, "line_num": 10, "text": "elf n/ 2 == x OR 1% 3= 6 ;"}, {"x": 463.0, "y": 995.0, "w": 518.0, "h": 76.0, "line_num": 11, "text": "return False"}, {"x": 324.0, "y": 1127.0, "w": 1200.0, "h": 95.0, "line_num": 12, "text": "for i in Range (5, int (n+\"0.5) + 1,6"}, {"x": 404.0, "y": 1221.0, "w": 1082.0, "h": 82.0, "line_num": 13, "text": "if 1% i =x or 1%(i+2) =6:"}, {"x": 537.0, "y": 1306.0, "w": 485.0, "h": 75.0, "line_num": 14, "text": "return False"}, {"x": 368.0, "y": 1386.0, "w": 550.0, "h": 79.0, "line_num": 15, "text": "return True"}, {"x": 280.0, "y": 1512.0, "w": 234.0, "h": 141.0, "line_num": 16, "text": "- nor"}, {"x": 810.0, "y": 1547.0, "w": 457.0, "h": 95.0, "line_num": 17, "text": "= - - main"}, {"x": 349.0, "y": 1662.0, "w": 394.0, "h": 103.0, "line_num": 18, "text": "main ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 124.08333333333334, "ir_algo_output_code": "def main ():\nnum = int (input (\" Enter a Nmbu :\nprint (f\"Enums is &'prime if is_ prime (nom)\n    else not prim\u00e9 3\")\ndef is- prone (1) :\nif n <= 12\nreturn false\nelif > <= 3:\nreturn True\nelf n/ 2 == x OR 1% 3= 6 ;\nreturn False\nfor i in Range (5, int (n+\"0.5) + 1,6\nif 1% i =x or 1%(i+2) =6:\nreturn False\nreturn True\n- nor\n    = - - main\nmain ()\n", "ir_algo_output_indented_lines": [{"x": 298.0, "y": 194.0, "w": 303.0, "h": 72.0, "line_num": 1, "text": "def main ():", "cluster_label": 0, "indentation": 0}, {"x": 303.0, "y": 274.0, "w": 773.0, "h": 74.0, "line_num": 2, "text": "num = int (input (\" Enter a Nmbu :", "cluster_label": 0, "indentation": 0}, {"x": 300.0, "y": 336.0, "w": 1105.0, "h": 61.0, "line_num": 3, "text": "print (f\"Enums is &'prime if is_ prime (nom)", "cluster_label": 0, "indentation": 0}, {"x": 812.0, "y": 396.0, "w": 476.0, "h": 60.0, "line_num": 4, "text": "else not prim\u00e9 3\")", "cluster_label": 1, "indentation": 1}, {"x": 256.0, "y": 469.0, "w": 533.0, "h": 78.0, "line_num": 5, "text": "def is- prone (1) :", "cluster_label": 0, "indentation": 0}, {"x": 379.0, "y": 542.0, "w": 390.0, "h": 68.0, "line_num": 6, "text": "if n <= 12", "cluster_label": 0, "indentation": 0}, {"x": 470.0, "y": 610.0, "w": 435.0, "h": 66.0, "line_num": 7, "text": "return false", "cluster_label": 0, "indentation": 0}, {"x": 384.0, "y": 702.0, "w": 480.0, "h": 82.0, "line_num": 8, "text": "elif > <= 3:", "cluster_label": 0, "indentation": 0}, {"x": 441.0, "y": 789.0, "w": 462.0, "h": 80.0, "line_num": 9, "text": "return True", "cluster_label": 0, "indentation": 0}, {"x": 362.0, "y": 889.0, "w": 1019.0, "h": 102.0, "line_num": 10, "text": "elf n/ 2 == x OR 1% 3= 6 ;", "cluster_label": 0, "indentation": 0}, {"x": 463.0, "y": 995.0, "w": 518.0, "h": 76.0, "line_num": 11, "text": "return False", "cluster_label": 0, "indentation": 0}, {"x": 324.0, "y": 1127.0, "w": 1200.0, "h": 95.0, "line_num": 12, "text": "for i in Range (5, int (n+\"0.5) + 1,6", "cluster_label": 0, "indentation": 0}, {"x": 404.0, "y": 1221.0, "w": 1082.0, "h": 82.0, "line_num": 13, "text": "if 1% i =x or 1%(i+2) =6:", "cluster_label": 0, "indentation": 0}, {"x": 537.0, "y": 1306.0, "w": 485.0, "h": 75.0, "line_num": 14, "text": "return False", "cluster_label": 0, "indentation": 0}, {"x": 368.0, "y": 1386.0, "w": 550.0, "h": 79.0, "line_num": 15, "text": "return True", "cluster_label": 0, "indentation": 0}, {"x": 280.0, "y": 1512.0, "w": 234.0, "h": 141.0, "line_num": 16, "text": "- nor", "cluster_label": 0, "indentation": 0}, {"x": 810.0, "y": 1547.0, "w": 457.0, "h": 95.0, "line_num": 17, "text": "= - - main", "cluster_label": 1, "indentation": 1}, {"x": 349.0, "y": 1662.0, "w": 394.0, "h": 103.0, "line_num": 18, "text": "main ()", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 168, "prompting_method": "cot-test1", "lm_post_processed_code": "def main ():\nnum = int (input (\"Enter a Num:\"))\nprint (f\"Num is prime\" if is_prime(num)\n    else \"not prime\")\n\ndef is_prime(n):\nif n <= 1:\nreturn False\nelif n <= 3:\nreturn True\nelif n % 2 == 0 or n % 3 == 0:\nreturn False\nfor i in range(5, int(n**0.5) + 1, 6):\nif n % i == 0 or n % (i+2) == 0:\nreturn False\nreturn True\n\nif __name__ == \"__main__\":\nmain ()\n", "lm_post_processed_edit_distance": 101}, {"image_id": 19, "image_height": 2048, "image_width": 1536, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 298.0, "y": 194.0, "w": 303.0, "h": 72.0, "line_num": 1, "text": "def main ():"}, {"x": 303.0, "y": 274.0, "w": 773.0, "h": 74.0, "line_num": 2, "text": "num = int (input (\" Enter a Nmbu :"}, {"x": 300.0, "y": 336.0, "w": 1105.0, "h": 61.0, "line_num": 3, "text": "print (f\"Enums is &'prime if is_ prime (nom)"}, {"x": 812.0, "y": 396.0, "w": 476.0, "h": 60.0, "line_num": 4, "text": "else not prim\u00e9 3\")"}, {"x": 256.0, "y": 469.0, "w": 533.0, "h": 78.0, "line_num": 5, "text": "def is- prone (1) :"}, {"x": 379.0, "y": 542.0, "w": 390.0, "h": 68.0, "line_num": 6, "text": "if n <= 12"}, {"x": 470.0, "y": 610.0, "w": 435.0, "h": 66.0, "line_num": 7, "text": "return false"}, {"x": 384.0, "y": 702.0, "w": 480.0, "h": 82.0, "line_num": 8, "text": "elif > <= 3:"}, {"x": 441.0, "y": 789.0, "w": 462.0, "h": 80.0, "line_num": 9, "text": "return True"}, {"x": 362.0, "y": 889.0, "w": 1019.0, "h": 102.0, "line_num": 10, "text": "elf n/ 2 == x OR 1% 3= 6 ;"}, {"x": 463.0, "y": 995.0, "w": 518.0, "h": 76.0, "line_num": 11, "text": "return False"}, {"x": 324.0, "y": 1127.0, "w": 1200.0, "h": 95.0, "line_num": 12, "text": "for i in Range (5, int (n+\"0.5) + 1,6"}, {"x": 404.0, "y": 1221.0, "w": 1082.0, "h": 82.0, "line_num": 13, "text": "if 1% i =x or 1%(i+2) =6:"}, {"x": 537.0, "y": 1306.0, "w": 485.0, "h": 75.0, "line_num": 14, "text": "return False"}, {"x": 368.0, "y": 1386.0, "w": 550.0, "h": 79.0, "line_num": 15, "text": "return True"}, {"x": 280.0, "y": 1512.0, "w": 234.0, "h": 141.0, "line_num": 16, "text": "- nor"}, {"x": 810.0, "y": 1547.0, "w": 457.0, "h": 95.0, "line_num": 17, "text": "= - - main"}, {"x": 349.0, "y": 1662.0, "w": 394.0, "h": 103.0, "line_num": 18, "text": "main ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 124.08333333333334, "ir_algo_output_code": "def main ():\nnum = int (input (\" Enter a Nmbu :\nprint (f\"Enums is &'prime if is_ prime (nom)\n    else not prim\u00e9 3\")\ndef is- prone (1) :\nif n <= 12\nreturn false\nelif > <= 3:\nreturn True\nelf n/ 2 == x OR 1% 3= 6 ;\nreturn False\nfor i in Range (5, int (n+\"0.5) + 1,6\nif 1% i =x or 1%(i+2) =6:\nreturn False\nreturn True\n- nor\n    = - - main\nmain ()\n", "ir_algo_output_indented_lines": [{"x": 298.0, "y": 194.0, "w": 303.0, "h": 72.0, "line_num": 1, "text": "def main ():", "cluster_label": 0, "indentation": 0}, {"x": 303.0, "y": 274.0, "w": 773.0, "h": 74.0, "line_num": 2, "text": "num = int (input (\" Enter a Nmbu :", "cluster_label": 0, "indentation": 0}, {"x": 300.0, "y": 336.0, "w": 1105.0, "h": 61.0, "line_num": 3, "text": "print (f\"Enums is &'prime if is_ prime (nom)", "cluster_label": 0, "indentation": 0}, {"x": 812.0, "y": 396.0, "w": 476.0, "h": 60.0, "line_num": 4, "text": "else not prim\u00e9 3\")", "cluster_label": 1, "indentation": 1}, {"x": 256.0, "y": 469.0, "w": 533.0, "h": 78.0, "line_num": 5, "text": "def is- prone (1) :", "cluster_label": 0, "indentation": 0}, {"x": 379.0, "y": 542.0, "w": 390.0, "h": 68.0, "line_num": 6, "text": "if n <= 12", "cluster_label": 0, "indentation": 0}, {"x": 470.0, "y": 610.0, "w": 435.0, "h": 66.0, "line_num": 7, "text": "return false", "cluster_label": 0, "indentation": 0}, {"x": 384.0, "y": 702.0, "w": 480.0, "h": 82.0, "line_num": 8, "text": "elif > <= 3:", "cluster_label": 0, "indentation": 0}, {"x": 441.0, "y": 789.0, "w": 462.0, "h": 80.0, "line_num": 9, "text": "return True", "cluster_label": 0, "indentation": 0}, {"x": 362.0, "y": 889.0, "w": 1019.0, "h": 102.0, "line_num": 10, "text": "elf n/ 2 == x OR 1% 3= 6 ;", "cluster_label": 0, "indentation": 0}, {"x": 463.0, "y": 995.0, "w": 518.0, "h": 76.0, "line_num": 11, "text": "return False", "cluster_label": 0, "indentation": 0}, {"x": 324.0, "y": 1127.0, "w": 1200.0, "h": 95.0, "line_num": 12, "text": "for i in Range (5, int (n+\"0.5) + 1,6", "cluster_label": 0, "indentation": 0}, {"x": 404.0, "y": 1221.0, "w": 1082.0, "h": 82.0, "line_num": 13, "text": "if 1% i =x or 1%(i+2) =6:", "cluster_label": 0, "indentation": 0}, {"x": 537.0, "y": 1306.0, "w": 485.0, "h": 75.0, "line_num": 14, "text": "return False", "cluster_label": 0, "indentation": 0}, {"x": 368.0, "y": 1386.0, "w": 550.0, "h": 79.0, "line_num": 15, "text": "return True", "cluster_label": 0, "indentation": 0}, {"x": 280.0, "y": 1512.0, "w": 234.0, "h": 141.0, "line_num": 16, "text": "- nor", "cluster_label": 0, "indentation": 0}, {"x": 810.0, "y": 1547.0, "w": 457.0, "h": 95.0, "line_num": 17, "text": "= - - main", "cluster_label": 1, "indentation": 1}, {"x": 349.0, "y": 1662.0, "w": 394.0, "h": 103.0, "line_num": 18, "text": "main ()", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 168, "prompting_method": "cot-test5", "lm_post_processed_code": "def main():\nnum = int(input(\"Enter a Num:\"))\nprint(f\"Num is prime\" if is_prime(num) else \"not prime\")\n\ndef is_prime(n):\nif n <= 1:\nreturn False\nelif n <= 3:\nreturn True\nelif n % 2 == 0 or n % 3 == 0:\nreturn False\nfor i in range(5, int(n**0.5) + 1, 6):\nif n % i == 0 or n % (i+2) == 0:\nreturn False\nreturn True\n\nif __name__ == \"__main__\":\nmain()\n", "lm_post_processed_edit_distance": 92}, {"image_id": 19, "image_height": 2048, "image_width": 1536, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 298.0, "y": 194.0, "w": 303.0, "h": 72.0, "line_num": 1, "text": "def main ():"}, {"x": 303.0, "y": 274.0, "w": 773.0, "h": 74.0, "line_num": 2, "text": "num = int (input (\" Enter a Nmbu :"}, {"x": 300.0, "y": 336.0, "w": 1105.0, "h": 61.0, "line_num": 3, "text": "print (f\"Enums is &'prime if is_ prime (nom)"}, {"x": 812.0, "y": 396.0, "w": 476.0, "h": 60.0, "line_num": 4, "text": "else not prim\u00e9 3\")"}, {"x": 256.0, "y": 469.0, "w": 533.0, "h": 78.0, "line_num": 5, "text": "def is- prone (1) :"}, {"x": 379.0, "y": 542.0, "w": 390.0, "h": 68.0, "line_num": 6, "text": "if n <= 12"}, {"x": 470.0, "y": 610.0, "w": 435.0, "h": 66.0, "line_num": 7, "text": "return false"}, {"x": 384.0, "y": 702.0, "w": 480.0, "h": 82.0, "line_num": 8, "text": "elif > <= 3:"}, {"x": 441.0, "y": 789.0, "w": 462.0, "h": 80.0, "line_num": 9, "text": "return True"}, {"x": 362.0, "y": 889.0, "w": 1019.0, "h": 102.0, "line_num": 10, "text": "elf n/ 2 == x OR 1% 3= 6 ;"}, {"x": 463.0, "y": 995.0, "w": 518.0, "h": 76.0, "line_num": 11, "text": "return False"}, {"x": 324.0, "y": 1127.0, "w": 1200.0, "h": 95.0, "line_num": 12, "text": "for i in Range (5, int (n+\"0.5) + 1,6"}, {"x": 404.0, "y": 1221.0, "w": 1082.0, "h": 82.0, "line_num": 13, "text": "if 1% i =x or 1%(i+2) =6:"}, {"x": 537.0, "y": 1306.0, "w": 485.0, "h": 75.0, "line_num": 14, "text": "return False"}, {"x": 368.0, "y": 1386.0, "w": 550.0, "h": 79.0, "line_num": 15, "text": "return True"}, {"x": 280.0, "y": 1512.0, "w": 234.0, "h": 141.0, "line_num": 16, "text": "- nor"}, {"x": 810.0, "y": 1547.0, "w": 457.0, "h": 95.0, "line_num": 17, "text": "= - - main"}, {"x": 349.0, "y": 1662.0, "w": 394.0, "h": 103.0, "line_num": 18, "text": "main ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 124.08333333333334, "ir_algo_output_code": "def main ():\nnum = int (input (\" Enter a Nmbu :\nprint (f\"Enums is &'prime if is_ prime (nom)\n    else not prim\u00e9 3\")\ndef is- prone (1) :\nif n <= 12\nreturn false\nelif > <= 3:\nreturn True\nelf n/ 2 == x OR 1% 3= 6 ;\nreturn False\nfor i in Range (5, int (n+\"0.5) + 1,6\nif 1% i =x or 1%(i+2) =6:\nreturn False\nreturn True\n- nor\n    = - - main\nmain ()\n", "ir_algo_output_indented_lines": [{"x": 298.0, "y": 194.0, "w": 303.0, "h": 72.0, "line_num": 1, "text": "def main ():", "cluster_label": 0, "indentation": 0}, {"x": 303.0, "y": 274.0, "w": 773.0, "h": 74.0, "line_num": 2, "text": "num = int (input (\" Enter a Nmbu :", "cluster_label": 0, "indentation": 0}, {"x": 300.0, "y": 336.0, "w": 1105.0, "h": 61.0, "line_num": 3, "text": "print (f\"Enums is &'prime if is_ prime (nom)", "cluster_label": 0, "indentation": 0}, {"x": 812.0, "y": 396.0, "w": 476.0, "h": 60.0, "line_num": 4, "text": "else not prim\u00e9 3\")", "cluster_label": 1, "indentation": 1}, {"x": 256.0, "y": 469.0, "w": 533.0, "h": 78.0, "line_num": 5, "text": "def is- prone (1) :", "cluster_label": 0, "indentation": 0}, {"x": 379.0, "y": 542.0, "w": 390.0, "h": 68.0, "line_num": 6, "text": "if n <= 12", "cluster_label": 0, "indentation": 0}, {"x": 470.0, "y": 610.0, "w": 435.0, "h": 66.0, "line_num": 7, "text": "return false", "cluster_label": 0, "indentation": 0}, {"x": 384.0, "y": 702.0, "w": 480.0, "h": 82.0, "line_num": 8, "text": "elif > <= 3:", "cluster_label": 0, "indentation": 0}, {"x": 441.0, "y": 789.0, "w": 462.0, "h": 80.0, "line_num": 9, "text": "return True", "cluster_label": 0, "indentation": 0}, {"x": 362.0, "y": 889.0, "w": 1019.0, "h": 102.0, "line_num": 10, "text": "elf n/ 2 == x OR 1% 3= 6 ;", "cluster_label": 0, "indentation": 0}, {"x": 463.0, "y": 995.0, "w": 518.0, "h": 76.0, "line_num": 11, "text": "return False", "cluster_label": 0, "indentation": 0}, {"x": 324.0, "y": 1127.0, "w": 1200.0, "h": 95.0, "line_num": 12, "text": "for i in Range (5, int (n+\"0.5) + 1,6", "cluster_label": 0, "indentation": 0}, {"x": 404.0, "y": 1221.0, "w": 1082.0, "h": 82.0, "line_num": 13, "text": "if 1% i =x or 1%(i+2) =6:", "cluster_label": 0, "indentation": 0}, {"x": 537.0, "y": 1306.0, "w": 485.0, "h": 75.0, "line_num": 14, "text": "return False", "cluster_label": 0, "indentation": 0}, {"x": 368.0, "y": 1386.0, "w": 550.0, "h": 79.0, "line_num": 15, "text": "return True", "cluster_label": 0, "indentation": 0}, {"x": 280.0, "y": 1512.0, "w": 234.0, "h": 141.0, "line_num": 16, "text": "- nor", "cluster_label": 0, "indentation": 0}, {"x": 810.0, "y": 1547.0, "w": 457.0, "h": 95.0, "line_num": 17, "text": "= - - main", "cluster_label": 1, "indentation": 1}, {"x": 349.0, "y": 1662.0, "w": 394.0, "h": 103.0, "line_num": 18, "text": "main ()", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 168, "prompting_method": "simple-test2", "lm_post_processed_code": "def main():\n    num = int(input(\"Enter a Num:\"))\n    print(f\"Num is prime\" if is_prime(num) else \"not prime\")\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(n**0.5) + 1, 6):\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 16}, {"image_id": 19, "image_height": 2048, "image_width": 1536, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 298.0, "y": 194.0, "w": 303.0, "h": 72.0, "line_num": 1, "text": "def main ():"}, {"x": 303.0, "y": 274.0, "w": 773.0, "h": 74.0, "line_num": 2, "text": "num = int (input (\" Enter a Nmbu :"}, {"x": 300.0, "y": 336.0, "w": 1105.0, "h": 61.0, "line_num": 3, "text": "print (f\"Enums is &'prime if is_ prime (nom)"}, {"x": 812.0, "y": 396.0, "w": 476.0, "h": 60.0, "line_num": 4, "text": "else not prim\u00e9 3\")"}, {"x": 256.0, "y": 469.0, "w": 533.0, "h": 78.0, "line_num": 5, "text": "def is- prone (1) :"}, {"x": 379.0, "y": 542.0, "w": 390.0, "h": 68.0, "line_num": 6, "text": "if n <= 12"}, {"x": 470.0, "y": 610.0, "w": 435.0, "h": 66.0, "line_num": 7, "text": "return false"}, {"x": 384.0, "y": 702.0, "w": 480.0, "h": 82.0, "line_num": 8, "text": "elif > <= 3:"}, {"x": 441.0, "y": 789.0, "w": 462.0, "h": 80.0, "line_num": 9, "text": "return True"}, {"x": 362.0, "y": 889.0, "w": 1019.0, "h": 102.0, "line_num": 10, "text": "elf n/ 2 == x OR 1% 3= 6 ;"}, {"x": 463.0, "y": 995.0, "w": 518.0, "h": 76.0, "line_num": 11, "text": "return False"}, {"x": 324.0, "y": 1127.0, "w": 1200.0, "h": 95.0, "line_num": 12, "text": "for i in Range (5, int (n+\"0.5) + 1,6"}, {"x": 404.0, "y": 1221.0, "w": 1082.0, "h": 82.0, "line_num": 13, "text": "if 1% i =x or 1%(i+2) =6:"}, {"x": 537.0, "y": 1306.0, "w": 485.0, "h": 75.0, "line_num": 14, "text": "return False"}, {"x": 368.0, "y": 1386.0, "w": 550.0, "h": 79.0, "line_num": 15, "text": "return True"}, {"x": 280.0, "y": 1512.0, "w": 234.0, "h": 141.0, "line_num": 16, "text": "- nor"}, {"x": 810.0, "y": 1547.0, "w": 457.0, "h": 95.0, "line_num": 17, "text": "= - - main"}, {"x": 349.0, "y": 1662.0, "w": 394.0, "h": 103.0, "line_num": 18, "text": "main ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 124.08333333333334, "ir_algo_output_code": "def main ():\nnum = int (input (\" Enter a Nmbu :\nprint (f\"Enums is &'prime if is_ prime (nom)\n    else not prim\u00e9 3\")\ndef is- prone (1) :\nif n <= 12\nreturn false\nelif > <= 3:\nreturn True\nelf n/ 2 == x OR 1% 3= 6 ;\nreturn False\nfor i in Range (5, int (n+\"0.5) + 1,6\nif 1% i =x or 1%(i+2) =6:\nreturn False\nreturn True\n- nor\n    = - - main\nmain ()\n", "ir_algo_output_indented_lines": [{"x": 298.0, "y": 194.0, "w": 303.0, "h": 72.0, "line_num": 1, "text": "def main ():", "cluster_label": 0, "indentation": 0}, {"x": 303.0, "y": 274.0, "w": 773.0, "h": 74.0, "line_num": 2, "text": "num = int (input (\" Enter a Nmbu :", "cluster_label": 0, "indentation": 0}, {"x": 300.0, "y": 336.0, "w": 1105.0, "h": 61.0, "line_num": 3, "text": "print (f\"Enums is &'prime if is_ prime (nom)", "cluster_label": 0, "indentation": 0}, {"x": 812.0, "y": 396.0, "w": 476.0, "h": 60.0, "line_num": 4, "text": "else not prim\u00e9 3\")", "cluster_label": 1, "indentation": 1}, {"x": 256.0, "y": 469.0, "w": 533.0, "h": 78.0, "line_num": 5, "text": "def is- prone (1) :", "cluster_label": 0, "indentation": 0}, {"x": 379.0, "y": 542.0, "w": 390.0, "h": 68.0, "line_num": 6, "text": "if n <= 12", "cluster_label": 0, "indentation": 0}, {"x": 470.0, "y": 610.0, "w": 435.0, "h": 66.0, "line_num": 7, "text": "return false", "cluster_label": 0, "indentation": 0}, {"x": 384.0, "y": 702.0, "w": 480.0, "h": 82.0, "line_num": 8, "text": "elif > <= 3:", "cluster_label": 0, "indentation": 0}, {"x": 441.0, "y": 789.0, "w": 462.0, "h": 80.0, "line_num": 9, "text": "return True", "cluster_label": 0, "indentation": 0}, {"x": 362.0, "y": 889.0, "w": 1019.0, "h": 102.0, "line_num": 10, "text": "elf n/ 2 == x OR 1% 3= 6 ;", "cluster_label": 0, "indentation": 0}, {"x": 463.0, "y": 995.0, "w": 518.0, "h": 76.0, "line_num": 11, "text": "return False", "cluster_label": 0, "indentation": 0}, {"x": 324.0, "y": 1127.0, "w": 1200.0, "h": 95.0, "line_num": 12, "text": "for i in Range (5, int (n+\"0.5) + 1,6", "cluster_label": 0, "indentation": 0}, {"x": 404.0, "y": 1221.0, "w": 1082.0, "h": 82.0, "line_num": 13, "text": "if 1% i =x or 1%(i+2) =6:", "cluster_label": 0, "indentation": 0}, {"x": 537.0, "y": 1306.0, "w": 485.0, "h": 75.0, "line_num": 14, "text": "return False", "cluster_label": 0, "indentation": 0}, {"x": 368.0, "y": 1386.0, "w": 550.0, "h": 79.0, "line_num": 15, "text": "return True", "cluster_label": 0, "indentation": 0}, {"x": 280.0, "y": 1512.0, "w": 234.0, "h": 141.0, "line_num": 16, "text": "- nor", "cluster_label": 0, "indentation": 0}, {"x": 810.0, "y": 1547.0, "w": 457.0, "h": 95.0, "line_num": 17, "text": "= - - main", "cluster_label": 1, "indentation": 1}, {"x": 349.0, "y": 1662.0, "w": 394.0, "h": 103.0, "line_num": 18, "text": "main ()", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 168, "prompting_method": "simple-test3", "lm_post_processed_code": "def main():\n    num = int(input(\"Enter a Num:\"))\n    print(f\"Num is prime\" if is_prime(num) else \"not prime\")\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(n**0.5) + 1, 6):\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 16}, {"image_id": 19, "image_height": 2048, "image_width": 1536, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 298.0, "y": 194.0, "w": 303.0, "h": 72.0, "line_num": 1, "text": "def main ():"}, {"x": 303.0, "y": 274.0, "w": 773.0, "h": 74.0, "line_num": 2, "text": "num = int (input (\" Enter a Nmbu :"}, {"x": 300.0, "y": 336.0, "w": 1105.0, "h": 61.0, "line_num": 3, "text": "print (f\"Enums is &'prime if is_ prime (nom)"}, {"x": 812.0, "y": 396.0, "w": 476.0, "h": 60.0, "line_num": 4, "text": "else not prim\u00e9 3\")"}, {"x": 256.0, "y": 469.0, "w": 533.0, "h": 78.0, "line_num": 5, "text": "def is- prone (1) :"}, {"x": 379.0, "y": 542.0, "w": 390.0, "h": 68.0, "line_num": 6, "text": "if n <= 12"}, {"x": 470.0, "y": 610.0, "w": 435.0, "h": 66.0, "line_num": 7, "text": "return false"}, {"x": 384.0, "y": 702.0, "w": 480.0, "h": 82.0, "line_num": 8, "text": "elif > <= 3:"}, {"x": 441.0, "y": 789.0, "w": 462.0, "h": 80.0, "line_num": 9, "text": "return True"}, {"x": 362.0, "y": 889.0, "w": 1019.0, "h": 102.0, "line_num": 10, "text": "elf n/ 2 == x OR 1% 3= 6 ;"}, {"x": 463.0, "y": 995.0, "w": 518.0, "h": 76.0, "line_num": 11, "text": "return False"}, {"x": 324.0, "y": 1127.0, "w": 1200.0, "h": 95.0, "line_num": 12, "text": "for i in Range (5, int (n+\"0.5) + 1,6"}, {"x": 404.0, "y": 1221.0, "w": 1082.0, "h": 82.0, "line_num": 13, "text": "if 1% i =x or 1%(i+2) =6:"}, {"x": 537.0, "y": 1306.0, "w": 485.0, "h": 75.0, "line_num": 14, "text": "return False"}, {"x": 368.0, "y": 1386.0, "w": 550.0, "h": 79.0, "line_num": 15, "text": "return True"}, {"x": 280.0, "y": 1512.0, "w": 234.0, "h": 141.0, "line_num": 16, "text": "- nor"}, {"x": 810.0, "y": 1547.0, "w": 457.0, "h": 95.0, "line_num": 17, "text": "= - - main"}, {"x": 349.0, "y": 1662.0, "w": 394.0, "h": 103.0, "line_num": 18, "text": "main ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main ():\nnum = int (input (\" Enter a Nmbu :\nprint (f\"Enums is &'prime if is_ prime (nom)\n    else not prim\u00e9 3\")\ndef is- prone (1) :\n    if n <= 12\n        return false\n    elif > <= 3:\n        return True\n    elf n/ 2 == x OR 1% 3= 6 ;\n        return False\n    for i in Range (5, int (n+\"0.5) + 1,6\n        if 1% i =x or 1%(i+2) =6:\n            return False\n        return True\n- nor\n    = - - main\n        main ()\n", "ir_algo_output_indented_lines": [{"x": 298.0, "y": 194.0, "w": 303.0, "h": 72.0, "line_num": 1, "text": "def main ():", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 303.0, "y": 274.0, "w": 773.0, "h": 74.0, "line_num": 2, "text": "num = int (input (\" Enter a Nmbu :", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 300.0, "y": 336.0, "w": 1105.0, "h": 61.0, "line_num": 3, "text": "print (f\"Enums is &'prime if is_ prime (nom)", "delta": -3.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 812.0, "y": 396.0, "w": 476.0, "h": 60.0, "line_num": 4, "text": "else not prim\u00e9 3\")", "delta": 512.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 256.0, "y": 469.0, "w": 533.0, "h": 78.0, "line_num": 5, "text": "def is- prone (1) :", "delta": -556.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 379.0, "y": 542.0, "w": 390.0, "h": 68.0, "line_num": 6, "text": "if n <= 12", "delta": 123.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 470.0, "y": 610.0, "w": 435.0, "h": 66.0, "line_num": 7, "text": "return false", "delta": 91.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 384.0, "y": 702.0, "w": 480.0, "h": 82.0, "line_num": 8, "text": "elif > <= 3:", "delta": -86.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 441.0, "y": 789.0, "w": 462.0, "h": 80.0, "line_num": 9, "text": "return True", "delta": 57.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 362.0, "y": 889.0, "w": 1019.0, "h": 102.0, "line_num": 10, "text": "elf n/ 2 == x OR 1% 3= 6 ;", "delta": -79.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 463.0, "y": 995.0, "w": 518.0, "h": 76.0, "line_num": 11, "text": "return False", "delta": 101.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 324.0, "y": 1127.0, "w": 1200.0, "h": 95.0, "line_num": 12, "text": "for i in Range (5, int (n+\"0.5) + 1,6", "delta": -139.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 404.0, "y": 1221.0, "w": 1082.0, "h": 82.0, "line_num": 13, "text": "if 1% i =x or 1%(i+2) =6:", "delta": 80.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 537.0, "y": 1306.0, "w": 485.0, "h": 75.0, "line_num": 14, "text": "return False", "delta": 133.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 368.0, "y": 1386.0, "w": 550.0, "h": 79.0, "line_num": 15, "text": "return True", "delta": -169.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 280.0, "y": 1512.0, "w": 234.0, "h": 141.0, "line_num": 16, "text": "- nor", "delta": -88.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 810.0, "y": 1547.0, "w": 457.0, "h": 95.0, "line_num": 17, "text": "= - - main", "delta": 530.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 349.0, "y": 1662.0, "w": 394.0, "h": 103.0, "line_num": 18, "text": "main ()", "delta": -461.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}], "ir_algo_output_edit_distance": 106, "prompting_method": "none", "lm_post_processed_code": "def main ():\nnum = int (input (\" Enter a Nmbu :\nprint (f\"Enums is &'prime if is_ prime (nom)\n    else not prim\u00e9 3\")\ndef is- prone (1) :\n    if n <= 12\n        return false\n    elif > <= 3:\n        return True\n    elf n/ 2 == x OR 1% 3= 6 ;\n        return False\n    for i in Range (5, int (n+\"0.5) + 1,6\n        if 1% i =x or 1%(i+2) =6:\n            return False\n        return True\n- nor\n    = - - main\n        main ()\n", "lm_post_processed_edit_distance": 106}, {"image_id": 19, "image_height": 2048, "image_width": 1536, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 298.0, "y": 194.0, "w": 303.0, "h": 72.0, "line_num": 1, "text": "def main ():"}, {"x": 303.0, "y": 274.0, "w": 773.0, "h": 74.0, "line_num": 2, "text": "num = int (input (\" Enter a Nmbu :"}, {"x": 300.0, "y": 336.0, "w": 1105.0, "h": 61.0, "line_num": 3, "text": "print (f\"Enums is &'prime if is_ prime (nom)"}, {"x": 812.0, "y": 396.0, "w": 476.0, "h": 60.0, "line_num": 4, "text": "else not prim\u00e9 3\")"}, {"x": 256.0, "y": 469.0, "w": 533.0, "h": 78.0, "line_num": 5, "text": "def is- prone (1) :"}, {"x": 379.0, "y": 542.0, "w": 390.0, "h": 68.0, "line_num": 6, "text": "if n <= 12"}, {"x": 470.0, "y": 610.0, "w": 435.0, "h": 66.0, "line_num": 7, "text": "return false"}, {"x": 384.0, "y": 702.0, "w": 480.0, "h": 82.0, "line_num": 8, "text": "elif > <= 3:"}, {"x": 441.0, "y": 789.0, "w": 462.0, "h": 80.0, "line_num": 9, "text": "return True"}, {"x": 362.0, "y": 889.0, "w": 1019.0, "h": 102.0, "line_num": 10, "text": "elf n/ 2 == x OR 1% 3= 6 ;"}, {"x": 463.0, "y": 995.0, "w": 518.0, "h": 76.0, "line_num": 11, "text": "return False"}, {"x": 324.0, "y": 1127.0, "w": 1200.0, "h": 95.0, "line_num": 12, "text": "for i in Range (5, int (n+\"0.5) + 1,6"}, {"x": 404.0, "y": 1221.0, "w": 1082.0, "h": 82.0, "line_num": 13, "text": "if 1% i =x or 1%(i+2) =6:"}, {"x": 537.0, "y": 1306.0, "w": 485.0, "h": 75.0, "line_num": 14, "text": "return False"}, {"x": 368.0, "y": 1386.0, "w": 550.0, "h": 79.0, "line_num": 15, "text": "return True"}, {"x": 280.0, "y": 1512.0, "w": 234.0, "h": 141.0, "line_num": 16, "text": "- nor"}, {"x": 810.0, "y": 1547.0, "w": 457.0, "h": 95.0, "line_num": 17, "text": "= - - main"}, {"x": 349.0, "y": 1662.0, "w": 394.0, "h": 103.0, "line_num": 18, "text": "main ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main ():\nnum = int (input (\" Enter a Nmbu :\nprint (f\"Enums is &'prime if is_ prime (nom)\n    else not prim\u00e9 3\")\ndef is- prone (1) :\n    if n <= 12\n        return false\n    elif > <= 3:\n        return True\n    elf n/ 2 == x OR 1% 3= 6 ;\n        return False\n    for i in Range (5, int (n+\"0.5) + 1,6\n        if 1% i =x or 1%(i+2) =6:\n            return False\n        return True\n- nor\n    = - - main\n        main ()\n", "ir_algo_output_indented_lines": [{"x": 298.0, "y": 194.0, "w": 303.0, "h": 72.0, "line_num": 1, "text": "def main ():", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 303.0, "y": 274.0, "w": 773.0, "h": 74.0, "line_num": 2, "text": "num = int (input (\" Enter a Nmbu :", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 300.0, "y": 336.0, "w": 1105.0, "h": 61.0, "line_num": 3, "text": "print (f\"Enums is &'prime if is_ prime (nom)", "delta": -3.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 812.0, "y": 396.0, "w": 476.0, "h": 60.0, "line_num": 4, "text": "else not prim\u00e9 3\")", "delta": 512.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 256.0, "y": 469.0, "w": 533.0, "h": 78.0, "line_num": 5, "text": "def is- prone (1) :", "delta": -556.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 379.0, "y": 542.0, "w": 390.0, "h": 68.0, "line_num": 6, "text": "if n <= 12", "delta": 123.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 470.0, "y": 610.0, "w": 435.0, "h": 66.0, "line_num": 7, "text": "return false", "delta": 91.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 384.0, "y": 702.0, "w": 480.0, "h": 82.0, "line_num": 8, "text": "elif > <= 3:", "delta": -86.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 441.0, "y": 789.0, "w": 462.0, "h": 80.0, "line_num": 9, "text": "return True", "delta": 57.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 362.0, "y": 889.0, "w": 1019.0, "h": 102.0, "line_num": 10, "text": "elf n/ 2 == x OR 1% 3= 6 ;", "delta": -79.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 463.0, "y": 995.0, "w": 518.0, "h": 76.0, "line_num": 11, "text": "return False", "delta": 101.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 324.0, "y": 1127.0, "w": 1200.0, "h": 95.0, "line_num": 12, "text": "for i in Range (5, int (n+\"0.5) + 1,6", "delta": -139.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 404.0, "y": 1221.0, "w": 1082.0, "h": 82.0, "line_num": 13, "text": "if 1% i =x or 1%(i+2) =6:", "delta": 80.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 537.0, "y": 1306.0, "w": 485.0, "h": 75.0, "line_num": 14, "text": "return False", "delta": 133.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 368.0, "y": 1386.0, "w": 550.0, "h": 79.0, "line_num": 15, "text": "return True", "delta": -169.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 280.0, "y": 1512.0, "w": 234.0, "h": 141.0, "line_num": 16, "text": "- nor", "delta": -88.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 810.0, "y": 1547.0, "w": 457.0, "h": 95.0, "line_num": 17, "text": "= - - main", "delta": 530.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 349.0, "y": 1662.0, "w": 394.0, "h": 103.0, "line_num": 18, "text": "main ()", "delta": -461.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}], "ir_algo_output_edit_distance": 106, "prompting_method": "cot-test1", "lm_post_processed_code": "def main ():\nnum = int (input (\"Enter a Num:\"))\nprint (f\"Num is prime\" if is_prime(num)\nelse \"not prime\")\n\ndef is_prime(n) :\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range (5, int (n**0.5) + 1, 6):\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n        return True\n\nif __name__ == \"__main__\":\n    main ()\n", "lm_post_processed_edit_distance": 37}, {"image_id": 19, "image_height": 2048, "image_width": 1536, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 298.0, "y": 194.0, "w": 303.0, "h": 72.0, "line_num": 1, "text": "def main ():"}, {"x": 303.0, "y": 274.0, "w": 773.0, "h": 74.0, "line_num": 2, "text": "num = int (input (\" Enter a Nmbu :"}, {"x": 300.0, "y": 336.0, "w": 1105.0, "h": 61.0, "line_num": 3, "text": "print (f\"Enums is &'prime if is_ prime (nom)"}, {"x": 812.0, "y": 396.0, "w": 476.0, "h": 60.0, "line_num": 4, "text": "else not prim\u00e9 3\")"}, {"x": 256.0, "y": 469.0, "w": 533.0, "h": 78.0, "line_num": 5, "text": "def is- prone (1) :"}, {"x": 379.0, "y": 542.0, "w": 390.0, "h": 68.0, "line_num": 6, "text": "if n <= 12"}, {"x": 470.0, "y": 610.0, "w": 435.0, "h": 66.0, "line_num": 7, "text": "return false"}, {"x": 384.0, "y": 702.0, "w": 480.0, "h": 82.0, "line_num": 8, "text": "elif > <= 3:"}, {"x": 441.0, "y": 789.0, "w": 462.0, "h": 80.0, "line_num": 9, "text": "return True"}, {"x": 362.0, "y": 889.0, "w": 1019.0, "h": 102.0, "line_num": 10, "text": "elf n/ 2 == x OR 1% 3= 6 ;"}, {"x": 463.0, "y": 995.0, "w": 518.0, "h": 76.0, "line_num": 11, "text": "return False"}, {"x": 324.0, "y": 1127.0, "w": 1200.0, "h": 95.0, "line_num": 12, "text": "for i in Range (5, int (n+\"0.5) + 1,6"}, {"x": 404.0, "y": 1221.0, "w": 1082.0, "h": 82.0, "line_num": 13, "text": "if 1% i =x or 1%(i+2) =6:"}, {"x": 537.0, "y": 1306.0, "w": 485.0, "h": 75.0, "line_num": 14, "text": "return False"}, {"x": 368.0, "y": 1386.0, "w": 550.0, "h": 79.0, "line_num": 15, "text": "return True"}, {"x": 280.0, "y": 1512.0, "w": 234.0, "h": 141.0, "line_num": 16, "text": "- nor"}, {"x": 810.0, "y": 1547.0, "w": 457.0, "h": 95.0, "line_num": 17, "text": "= - - main"}, {"x": 349.0, "y": 1662.0, "w": 394.0, "h": 103.0, "line_num": 18, "text": "main ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main ():\nnum = int (input (\" Enter a Nmbu :\nprint (f\"Enums is &'prime if is_ prime (nom)\n    else not prim\u00e9 3\")\ndef is- prone (1) :\n    if n <= 12\n        return false\n    elif > <= 3:\n        return True\n    elf n/ 2 == x OR 1% 3= 6 ;\n        return False\n    for i in Range (5, int (n+\"0.5) + 1,6\n        if 1% i =x or 1%(i+2) =6:\n            return False\n        return True\n- nor\n    = - - main\n        main ()\n", "ir_algo_output_indented_lines": [{"x": 298.0, "y": 194.0, "w": 303.0, "h": 72.0, "line_num": 1, "text": "def main ():", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 303.0, "y": 274.0, "w": 773.0, "h": 74.0, "line_num": 2, "text": "num = int (input (\" Enter a Nmbu :", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 300.0, "y": 336.0, "w": 1105.0, "h": 61.0, "line_num": 3, "text": "print (f\"Enums is &'prime if is_ prime (nom)", "delta": -3.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 812.0, "y": 396.0, "w": 476.0, "h": 60.0, "line_num": 4, "text": "else not prim\u00e9 3\")", "delta": 512.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 256.0, "y": 469.0, "w": 533.0, "h": 78.0, "line_num": 5, "text": "def is- prone (1) :", "delta": -556.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 379.0, "y": 542.0, "w": 390.0, "h": 68.0, "line_num": 6, "text": "if n <= 12", "delta": 123.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 470.0, "y": 610.0, "w": 435.0, "h": 66.0, "line_num": 7, "text": "return false", "delta": 91.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 384.0, "y": 702.0, "w": 480.0, "h": 82.0, "line_num": 8, "text": "elif > <= 3:", "delta": -86.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 441.0, "y": 789.0, "w": 462.0, "h": 80.0, "line_num": 9, "text": "return True", "delta": 57.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 362.0, "y": 889.0, "w": 1019.0, "h": 102.0, "line_num": 10, "text": "elf n/ 2 == x OR 1% 3= 6 ;", "delta": -79.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 463.0, "y": 995.0, "w": 518.0, "h": 76.0, "line_num": 11, "text": "return False", "delta": 101.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 324.0, "y": 1127.0, "w": 1200.0, "h": 95.0, "line_num": 12, "text": "for i in Range (5, int (n+\"0.5) + 1,6", "delta": -139.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 404.0, "y": 1221.0, "w": 1082.0, "h": 82.0, "line_num": 13, "text": "if 1% i =x or 1%(i+2) =6:", "delta": 80.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 537.0, "y": 1306.0, "w": 485.0, "h": 75.0, "line_num": 14, "text": "return False", "delta": 133.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 368.0, "y": 1386.0, "w": 550.0, "h": 79.0, "line_num": 15, "text": "return True", "delta": -169.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 280.0, "y": 1512.0, "w": 234.0, "h": 141.0, "line_num": 16, "text": "- nor", "delta": -88.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 810.0, "y": 1547.0, "w": 457.0, "h": 95.0, "line_num": 17, "text": "= - - main", "delta": 530.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 349.0, "y": 1662.0, "w": 394.0, "h": 103.0, "line_num": 18, "text": "main ()", "delta": -461.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}], "ir_algo_output_edit_distance": 106, "prompting_method": "cot-test5", "lm_post_processed_code": "def main():\nnum = int(input(\"Enter a Num:\"))\nprint(f\"Num is prime\" if is_prime(num) else \"not prime\")\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(n**0.5) + 1, 6):\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 24}, {"image_id": 19, "image_height": 2048, "image_width": 1536, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 298.0, "y": 194.0, "w": 303.0, "h": 72.0, "line_num": 1, "text": "def main ():"}, {"x": 303.0, "y": 274.0, "w": 773.0, "h": 74.0, "line_num": 2, "text": "num = int (input (\" Enter a Nmbu :"}, {"x": 300.0, "y": 336.0, "w": 1105.0, "h": 61.0, "line_num": 3, "text": "print (f\"Enums is &'prime if is_ prime (nom)"}, {"x": 812.0, "y": 396.0, "w": 476.0, "h": 60.0, "line_num": 4, "text": "else not prim\u00e9 3\")"}, {"x": 256.0, "y": 469.0, "w": 533.0, "h": 78.0, "line_num": 5, "text": "def is- prone (1) :"}, {"x": 379.0, "y": 542.0, "w": 390.0, "h": 68.0, "line_num": 6, "text": "if n <= 12"}, {"x": 470.0, "y": 610.0, "w": 435.0, "h": 66.0, "line_num": 7, "text": "return false"}, {"x": 384.0, "y": 702.0, "w": 480.0, "h": 82.0, "line_num": 8, "text": "elif > <= 3:"}, {"x": 441.0, "y": 789.0, "w": 462.0, "h": 80.0, "line_num": 9, "text": "return True"}, {"x": 362.0, "y": 889.0, "w": 1019.0, "h": 102.0, "line_num": 10, "text": "elf n/ 2 == x OR 1% 3= 6 ;"}, {"x": 463.0, "y": 995.0, "w": 518.0, "h": 76.0, "line_num": 11, "text": "return False"}, {"x": 324.0, "y": 1127.0, "w": 1200.0, "h": 95.0, "line_num": 12, "text": "for i in Range (5, int (n+\"0.5) + 1,6"}, {"x": 404.0, "y": 1221.0, "w": 1082.0, "h": 82.0, "line_num": 13, "text": "if 1% i =x or 1%(i+2) =6:"}, {"x": 537.0, "y": 1306.0, "w": 485.0, "h": 75.0, "line_num": 14, "text": "return False"}, {"x": 368.0, "y": 1386.0, "w": 550.0, "h": 79.0, "line_num": 15, "text": "return True"}, {"x": 280.0, "y": 1512.0, "w": 234.0, "h": 141.0, "line_num": 16, "text": "- nor"}, {"x": 810.0, "y": 1547.0, "w": 457.0, "h": 95.0, "line_num": 17, "text": "= - - main"}, {"x": 349.0, "y": 1662.0, "w": 394.0, "h": 103.0, "line_num": 18, "text": "main ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main ():\nnum = int (input (\" Enter a Nmbu :\nprint (f\"Enums is &'prime if is_ prime (nom)\n    else not prim\u00e9 3\")\ndef is- prone (1) :\n    if n <= 12\n        return false\n    elif > <= 3:\n        return True\n    elf n/ 2 == x OR 1% 3= 6 ;\n        return False\n    for i in Range (5, int (n+\"0.5) + 1,6\n        if 1% i =x or 1%(i+2) =6:\n            return False\n        return True\n- nor\n    = - - main\n        main ()\n", "ir_algo_output_indented_lines": [{"x": 298.0, "y": 194.0, "w": 303.0, "h": 72.0, "line_num": 1, "text": "def main ():", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 303.0, "y": 274.0, "w": 773.0, "h": 74.0, "line_num": 2, "text": "num = int (input (\" Enter a Nmbu :", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 300.0, "y": 336.0, "w": 1105.0, "h": 61.0, "line_num": 3, "text": "print (f\"Enums is &'prime if is_ prime (nom)", "delta": -3.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 812.0, "y": 396.0, "w": 476.0, "h": 60.0, "line_num": 4, "text": "else not prim\u00e9 3\")", "delta": 512.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 256.0, "y": 469.0, "w": 533.0, "h": 78.0, "line_num": 5, "text": "def is- prone (1) :", "delta": -556.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 379.0, "y": 542.0, "w": 390.0, "h": 68.0, "line_num": 6, "text": "if n <= 12", "delta": 123.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 470.0, "y": 610.0, "w": 435.0, "h": 66.0, "line_num": 7, "text": "return false", "delta": 91.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 384.0, "y": 702.0, "w": 480.0, "h": 82.0, "line_num": 8, "text": "elif > <= 3:", "delta": -86.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 441.0, "y": 789.0, "w": 462.0, "h": 80.0, "line_num": 9, "text": "return True", "delta": 57.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 362.0, "y": 889.0, "w": 1019.0, "h": 102.0, "line_num": 10, "text": "elf n/ 2 == x OR 1% 3= 6 ;", "delta": -79.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 463.0, "y": 995.0, "w": 518.0, "h": 76.0, "line_num": 11, "text": "return False", "delta": 101.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 324.0, "y": 1127.0, "w": 1200.0, "h": 95.0, "line_num": 12, "text": "for i in Range (5, int (n+\"0.5) + 1,6", "delta": -139.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 404.0, "y": 1221.0, "w": 1082.0, "h": 82.0, "line_num": 13, "text": "if 1% i =x or 1%(i+2) =6:", "delta": 80.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 537.0, "y": 1306.0, "w": 485.0, "h": 75.0, "line_num": 14, "text": "return False", "delta": 133.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 368.0, "y": 1386.0, "w": 550.0, "h": 79.0, "line_num": 15, "text": "return True", "delta": -169.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 280.0, "y": 1512.0, "w": 234.0, "h": 141.0, "line_num": 16, "text": "- nor", "delta": -88.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 810.0, "y": 1547.0, "w": 457.0, "h": 95.0, "line_num": 17, "text": "= - - main", "delta": 530.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 349.0, "y": 1662.0, "w": 394.0, "h": 103.0, "line_num": 18, "text": "main ()", "delta": -461.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}], "ir_algo_output_edit_distance": 106, "prompting_method": "simple-test2", "lm_post_processed_code": "def main():\n    num = int(input(\"Enter a Num:\"))\n    print(f\"Num is prime\" if is_prime(num) else \"not prime\")\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(n**0.5) + 1, 6):\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 16}, {"image_id": 19, "image_height": 2048, "image_width": 1536, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 298.0, "y": 194.0, "w": 303.0, "h": 72.0, "line_num": 1, "text": "def main ():"}, {"x": 303.0, "y": 274.0, "w": 773.0, "h": 74.0, "line_num": 2, "text": "num = int (input (\" Enter a Nmbu :"}, {"x": 300.0, "y": 336.0, "w": 1105.0, "h": 61.0, "line_num": 3, "text": "print (f\"Enums is &'prime if is_ prime (nom)"}, {"x": 812.0, "y": 396.0, "w": 476.0, "h": 60.0, "line_num": 4, "text": "else not prim\u00e9 3\")"}, {"x": 256.0, "y": 469.0, "w": 533.0, "h": 78.0, "line_num": 5, "text": "def is- prone (1) :"}, {"x": 379.0, "y": 542.0, "w": 390.0, "h": 68.0, "line_num": 6, "text": "if n <= 12"}, {"x": 470.0, "y": 610.0, "w": 435.0, "h": 66.0, "line_num": 7, "text": "return false"}, {"x": 384.0, "y": 702.0, "w": 480.0, "h": 82.0, "line_num": 8, "text": "elif > <= 3:"}, {"x": 441.0, "y": 789.0, "w": 462.0, "h": 80.0, "line_num": 9, "text": "return True"}, {"x": 362.0, "y": 889.0, "w": 1019.0, "h": 102.0, "line_num": 10, "text": "elf n/ 2 == x OR 1% 3= 6 ;"}, {"x": 463.0, "y": 995.0, "w": 518.0, "h": 76.0, "line_num": 11, "text": "return False"}, {"x": 324.0, "y": 1127.0, "w": 1200.0, "h": 95.0, "line_num": 12, "text": "for i in Range (5, int (n+\"0.5) + 1,6"}, {"x": 404.0, "y": 1221.0, "w": 1082.0, "h": 82.0, "line_num": 13, "text": "if 1% i =x or 1%(i+2) =6:"}, {"x": 537.0, "y": 1306.0, "w": 485.0, "h": 75.0, "line_num": 14, "text": "return False"}, {"x": 368.0, "y": 1386.0, "w": 550.0, "h": 79.0, "line_num": 15, "text": "return True"}, {"x": 280.0, "y": 1512.0, "w": 234.0, "h": 141.0, "line_num": 16, "text": "- nor"}, {"x": 810.0, "y": 1547.0, "w": 457.0, "h": 95.0, "line_num": 17, "text": "= - - main"}, {"x": 349.0, "y": 1662.0, "w": 394.0, "h": 103.0, "line_num": 18, "text": "main ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main ():\nnum = int (input (\" Enter a Nmbu :\nprint (f\"Enums is &'prime if is_ prime (nom)\n    else not prim\u00e9 3\")\ndef is- prone (1) :\n    if n <= 12\n        return false\n    elif > <= 3:\n        return True\n    elf n/ 2 == x OR 1% 3= 6 ;\n        return False\n    for i in Range (5, int (n+\"0.5) + 1,6\n        if 1% i =x or 1%(i+2) =6:\n            return False\n        return True\n- nor\n    = - - main\n        main ()\n", "ir_algo_output_indented_lines": [{"x": 298.0, "y": 194.0, "w": 303.0, "h": 72.0, "line_num": 1, "text": "def main ():", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 303.0, "y": 274.0, "w": 773.0, "h": 74.0, "line_num": 2, "text": "num = int (input (\" Enter a Nmbu :", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 300.0, "y": 336.0, "w": 1105.0, "h": 61.0, "line_num": 3, "text": "print (f\"Enums is &'prime if is_ prime (nom)", "delta": -3.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 812.0, "y": 396.0, "w": 476.0, "h": 60.0, "line_num": 4, "text": "else not prim\u00e9 3\")", "delta": 512.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 256.0, "y": 469.0, "w": 533.0, "h": 78.0, "line_num": 5, "text": "def is- prone (1) :", "delta": -556.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 379.0, "y": 542.0, "w": 390.0, "h": 68.0, "line_num": 6, "text": "if n <= 12", "delta": 123.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 470.0, "y": 610.0, "w": 435.0, "h": 66.0, "line_num": 7, "text": "return false", "delta": 91.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 384.0, "y": 702.0, "w": 480.0, "h": 82.0, "line_num": 8, "text": "elif > <= 3:", "delta": -86.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 441.0, "y": 789.0, "w": 462.0, "h": 80.0, "line_num": 9, "text": "return True", "delta": 57.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 362.0, "y": 889.0, "w": 1019.0, "h": 102.0, "line_num": 10, "text": "elf n/ 2 == x OR 1% 3= 6 ;", "delta": -79.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 463.0, "y": 995.0, "w": 518.0, "h": 76.0, "line_num": 11, "text": "return False", "delta": 101.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 324.0, "y": 1127.0, "w": 1200.0, "h": 95.0, "line_num": 12, "text": "for i in Range (5, int (n+\"0.5) + 1,6", "delta": -139.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 404.0, "y": 1221.0, "w": 1082.0, "h": 82.0, "line_num": 13, "text": "if 1% i =x or 1%(i+2) =6:", "delta": 80.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 537.0, "y": 1306.0, "w": 485.0, "h": 75.0, "line_num": 14, "text": "return False", "delta": 133.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 368.0, "y": 1386.0, "w": 550.0, "h": 79.0, "line_num": 15, "text": "return True", "delta": -169.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 280.0, "y": 1512.0, "w": 234.0, "h": 141.0, "line_num": 16, "text": "- nor", "delta": -88.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 810.0, "y": 1547.0, "w": 457.0, "h": 95.0, "line_num": 17, "text": "= - - main", "delta": 530.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 349.0, "y": 1662.0, "w": 394.0, "h": 103.0, "line_num": 18, "text": "main ()", "delta": -461.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}], "ir_algo_output_edit_distance": 106, "prompting_method": "simple-test3", "lm_post_processed_code": "def main():\n    num = int(input(\"Enter a Num:\"))\n    print(f\"Num is prime\" if is_prime(num) else \"not prime\")\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(n**0.5) + 1, 6):\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 16}, {"image_id": 20, "image_height": 2287, "image_width": 1620, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 75.0, "y": 69.0, "w": 1425.0, "h": 81.0, "line_num": 1, "text": "from karel . stamfordkarel import *"}, {"x": 66.0, "y": 189.0, "w": 424.0, "h": 83.0, "line_num": 2, "text": "def mais ():"}, {"x": 169.0, "y": 313.0, "w": 449.0, "h": 79.0, "line_num": 3, "text": "turn-left ():"}, {"x": 168.0, "y": 432.0, "w": 981.0, "h": 79.0, "line_num": 4, "text": "while frent_ is_ alpar () ;"}, {"x": 381.0, "y": 544.0, "w": 445.0, "h": 73.0, "line_num": 5, "text": "turn-right ()"}, {"x": 404.0, "y": 656.0, "w": 348.0, "h": 85.0, "line_num": 6, "text": "fill-row( )"}, {"x": 400.0, "y": 781.0, "w": 634.0, "h": 71.0, "line_num": 7, "text": "return _to_ home()"}, {"x": 405.0, "y": 904.0, "w": 364.0, "h": 71.0, "line_num": 8, "text": "Jumprow ()"}, {"x": 169.0, "y": 1027.0, "w": 471.0, "h": 69.0, "line_num": 9, "text": "turn-right ()"}, {"x": 175.0, "y": 1147.0, "w": 362.0, "h": 84.0, "line_num": 10, "text": "fill-row ()"}, {"x": 172.0, "y": 1252.0, "w": 712.0, "h": 72.0, "line_num": 11, "text": "returnkte - home ()"}, {"x": 180.0, "y": 1366.0, "w": 880.0, "h": 85.0, "line_num": 12, "text": "while front- is- Elcar ()"}, {"x": 423.0, "y": 1493.0, "w": 234.0, "h": 62.0, "line_num": 13, "text": "meve()"}, {"x": 109.0, "y": 1605.0, "w": 584.0, "h": 90.0, "line_num": 14, "text": "def fill-row() ;"}, {"x": 167.0, "y": 1725.0, "w": 894.0, "h": 85.0, "line_num": 15, "text": "while front- is clear()"}, {"x": 352.0, "y": 1847.0, "w": 525.0, "h": 81.0, "line_num": 16, "text": "put - beeper()"}, {"x": 366.0, "y": 1975.0, "w": 269.0, "h": 62.0, "line_num": 17, "text": "move ()"}, {"x": 164.0, "y": 2093.0, "w": 451.0, "h": 84.0, "line_num": 18, "text": "put-beeper ()"}], "ir_algo_name": "none", "ir_algo_output_code": "from karel . stamfordkarel import *\ndef mais ():\nturn-left ():\nwhile frent_ is_ alpar () ;\nturn-right ()\nfill-row( )\nreturn _to_ home()\nJumprow ()\nturn-right ()\nfill-row ()\nreturnkte - home ()\nwhile front- is- Elcar ()\nmeve()\ndef fill-row() ;\nwhile front- is clear()\nput - beeper()\nmove ()\nput-beeper ()", "ir_algo_output_edit_distance": 145, "prompting_method": "none", "lm_post_processed_code": "from karel . stamfordkarel import *\ndef mais ():\nturn-left ():\nwhile frent_ is_ alpar () ;\nturn-right ()\nfill-row( )\nreturn _to_ home()\nJumprow ()\nturn-right ()\nfill-row ()\nreturnkte - home ()\nwhile front- is- Elcar ()\nmeve()\ndef fill-row() ;\nwhile front- is clear()\nput - beeper()\nmove ()\nput-beeper ()", "lm_post_processed_edit_distance": 145}, {"image_id": 20, "image_height": 2287, "image_width": 1620, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 75.0, "y": 69.0, "w": 1425.0, "h": 81.0, "line_num": 1, "text": "from karel . stamfordkarel import *"}, {"x": 66.0, "y": 189.0, "w": 424.0, "h": 83.0, "line_num": 2, "text": "def mais ():"}, {"x": 169.0, "y": 313.0, "w": 449.0, "h": 79.0, "line_num": 3, "text": "turn-left ():"}, {"x": 168.0, "y": 432.0, "w": 981.0, "h": 79.0, "line_num": 4, "text": "while frent_ is_ alpar () ;"}, {"x": 381.0, "y": 544.0, "w": 445.0, "h": 73.0, "line_num": 5, "text": "turn-right ()"}, {"x": 404.0, "y": 656.0, "w": 348.0, "h": 85.0, "line_num": 6, "text": "fill-row( )"}, {"x": 400.0, "y": 781.0, "w": 634.0, "h": 71.0, "line_num": 7, "text": "return _to_ home()"}, {"x": 405.0, "y": 904.0, "w": 364.0, "h": 71.0, "line_num": 8, "text": "Jumprow ()"}, {"x": 169.0, "y": 1027.0, "w": 471.0, "h": 69.0, "line_num": 9, "text": "turn-right ()"}, {"x": 175.0, "y": 1147.0, "w": 362.0, "h": 84.0, "line_num": 10, "text": "fill-row ()"}, {"x": 172.0, "y": 1252.0, "w": 712.0, "h": 72.0, "line_num": 11, "text": "returnkte - home ()"}, {"x": 180.0, "y": 1366.0, "w": 880.0, "h": 85.0, "line_num": 12, "text": "while front- is- Elcar ()"}, {"x": 423.0, "y": 1493.0, "w": 234.0, "h": 62.0, "line_num": 13, "text": "meve()"}, {"x": 109.0, "y": 1605.0, "w": 584.0, "h": 90.0, "line_num": 14, "text": "def fill-row() ;"}, {"x": 167.0, "y": 1725.0, "w": 894.0, "h": 85.0, "line_num": 15, "text": "while front- is clear()"}, {"x": 352.0, "y": 1847.0, "w": 525.0, "h": 81.0, "line_num": 16, "text": "put - beeper()"}, {"x": 366.0, "y": 1975.0, "w": 269.0, "h": 62.0, "line_num": 17, "text": "move ()"}, {"x": 164.0, "y": 2093.0, "w": 451.0, "h": 84.0, "line_num": 18, "text": "put-beeper ()"}], "ir_algo_name": "none", "ir_algo_output_code": "from karel . stamfordkarel import *\ndef mais ():\nturn-left ():\nwhile frent_ is_ alpar () ;\nturn-right ()\nfill-row( )\nreturn _to_ home()\nJumprow ()\nturn-right ()\nfill-row ()\nreturnkte - home ()\nwhile front- is- Elcar ()\nmeve()\ndef fill-row() ;\nwhile front- is clear()\nput - beeper()\nmove ()\nput-beeper ()", "ir_algo_output_edit_distance": 145, "prompting_method": "cot-test1", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\nturn_left()\nwhile front_is_clear():\nturn_right()\nfill_row()\nreturn_to_home()\njump_row()\nturn_right()\nfill_row()\nreturn_to_home()\nwhile front_is_clear():\nmove()\n\ndef fill_row():\nwhile front_is_clear():\nput_beeper()\nmove()\nput_beeper()\n", "lm_post_processed_edit_distance": 88}, {"image_id": 20, "image_height": 2287, "image_width": 1620, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 75.0, "y": 69.0, "w": 1425.0, "h": 81.0, "line_num": 1, "text": "from karel . stamfordkarel import *"}, {"x": 66.0, "y": 189.0, "w": 424.0, "h": 83.0, "line_num": 2, "text": "def mais ():"}, {"x": 169.0, "y": 313.0, "w": 449.0, "h": 79.0, "line_num": 3, "text": "turn-left ():"}, {"x": 168.0, "y": 432.0, "w": 981.0, "h": 79.0, "line_num": 4, "text": "while frent_ is_ alpar () ;"}, {"x": 381.0, "y": 544.0, "w": 445.0, "h": 73.0, "line_num": 5, "text": "turn-right ()"}, {"x": 404.0, "y": 656.0, "w": 348.0, "h": 85.0, "line_num": 6, "text": "fill-row( )"}, {"x": 400.0, "y": 781.0, "w": 634.0, "h": 71.0, "line_num": 7, "text": "return _to_ home()"}, {"x": 405.0, "y": 904.0, "w": 364.0, "h": 71.0, "line_num": 8, "text": "Jumprow ()"}, {"x": 169.0, "y": 1027.0, "w": 471.0, "h": 69.0, "line_num": 9, "text": "turn-right ()"}, {"x": 175.0, "y": 1147.0, "w": 362.0, "h": 84.0, "line_num": 10, "text": "fill-row ()"}, {"x": 172.0, "y": 1252.0, "w": 712.0, "h": 72.0, "line_num": 11, "text": "returnkte - home ()"}, {"x": 180.0, "y": 1366.0, "w": 880.0, "h": 85.0, "line_num": 12, "text": "while front- is- Elcar ()"}, {"x": 423.0, "y": 1493.0, "w": 234.0, "h": 62.0, "line_num": 13, "text": "meve()"}, {"x": 109.0, "y": 1605.0, "w": 584.0, "h": 90.0, "line_num": 14, "text": "def fill-row() ;"}, {"x": 167.0, "y": 1725.0, "w": 894.0, "h": 85.0, "line_num": 15, "text": "while front- is clear()"}, {"x": 352.0, "y": 1847.0, "w": 525.0, "h": 81.0, "line_num": 16, "text": "put - beeper()"}, {"x": 366.0, "y": 1975.0, "w": 269.0, "h": 62.0, "line_num": 17, "text": "move ()"}, {"x": 164.0, "y": 2093.0, "w": 451.0, "h": 84.0, "line_num": 18, "text": "put-beeper ()"}], "ir_algo_name": "none", "ir_algo_output_code": "from karel . stamfordkarel import *\ndef mais ():\nturn-left ():\nwhile frent_ is_ alpar () ;\nturn-right ()\nfill-row( )\nreturn _to_ home()\nJumprow ()\nturn-right ()\nfill-row ()\nreturnkte - home ()\nwhile front- is- Elcar ()\nmeve()\ndef fill-row() ;\nwhile front- is clear()\nput - beeper()\nmove ()\nput-beeper ()", "ir_algo_output_edit_distance": 145, "prompting_method": "cot-test5", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\nturn_left()\nwhile front_is_clear():\nturn_right()\nfill_row()\nreturn_to_home()\njump_row()\nturn_right()\nfill_row()\nreturn_to_home()\nwhile front_is_clear():\nmove()\n\ndef fill_row():\nwhile front_is_clear():\nput_beeper()\nmove()\nput_beeper()\n", "lm_post_processed_edit_distance": 88}, {"image_id": 20, "image_height": 2287, "image_width": 1620, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 75.0, "y": 69.0, "w": 1425.0, "h": 81.0, "line_num": 1, "text": "from karel . stamfordkarel import *"}, {"x": 66.0, "y": 189.0, "w": 424.0, "h": 83.0, "line_num": 2, "text": "def mais ():"}, {"x": 169.0, "y": 313.0, "w": 449.0, "h": 79.0, "line_num": 3, "text": "turn-left ():"}, {"x": 168.0, "y": 432.0, "w": 981.0, "h": 79.0, "line_num": 4, "text": "while frent_ is_ alpar () ;"}, {"x": 381.0, "y": 544.0, "w": 445.0, "h": 73.0, "line_num": 5, "text": "turn-right ()"}, {"x": 404.0, "y": 656.0, "w": 348.0, "h": 85.0, "line_num": 6, "text": "fill-row( )"}, {"x": 400.0, "y": 781.0, "w": 634.0, "h": 71.0, "line_num": 7, "text": "return _to_ home()"}, {"x": 405.0, "y": 904.0, "w": 364.0, "h": 71.0, "line_num": 8, "text": "Jumprow ()"}, {"x": 169.0, "y": 1027.0, "w": 471.0, "h": 69.0, "line_num": 9, "text": "turn-right ()"}, {"x": 175.0, "y": 1147.0, "w": 362.0, "h": 84.0, "line_num": 10, "text": "fill-row ()"}, {"x": 172.0, "y": 1252.0, "w": 712.0, "h": 72.0, "line_num": 11, "text": "returnkte - home ()"}, {"x": 180.0, "y": 1366.0, "w": 880.0, "h": 85.0, "line_num": 12, "text": "while front- is- Elcar ()"}, {"x": 423.0, "y": 1493.0, "w": 234.0, "h": 62.0, "line_num": 13, "text": "meve()"}, {"x": 109.0, "y": 1605.0, "w": 584.0, "h": 90.0, "line_num": 14, "text": "def fill-row() ;"}, {"x": 167.0, "y": 1725.0, "w": 894.0, "h": 85.0, "line_num": 15, "text": "while front- is clear()"}, {"x": 352.0, "y": 1847.0, "w": 525.0, "h": 81.0, "line_num": 16, "text": "put - beeper()"}, {"x": 366.0, "y": 1975.0, "w": 269.0, "h": 62.0, "line_num": 17, "text": "move ()"}, {"x": 164.0, "y": 2093.0, "w": 451.0, "h": 84.0, "line_num": 18, "text": "put-beeper ()"}], "ir_algo_name": "none", "ir_algo_output_code": "from karel . stamfordkarel import *\ndef mais ():\nturn-left ():\nwhile frent_ is_ alpar () ;\nturn-right ()\nfill-row( )\nreturn _to_ home()\nJumprow ()\nturn-right ()\nfill-row ()\nreturnkte - home ()\nwhile front- is- Elcar ()\nmeve()\ndef fill-row() ;\nwhile front- is clear()\nput - beeper()\nmove ()\nput-beeper ()", "ir_algo_output_edit_distance": 145, "prompting_method": "simple-test2", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    turn_left()\n    while front_is_clear():\n        turn_right()\n        fill_row()\n        return_to_home()\n        jump_row()\n        turn_right()\n        fill_row()\n        return_to_home()\n    while front_is_clear():\n        move()\n\ndef fill_row():\n    while front_is_clear():\n        put_beeper()\n        move()\n        put_beeper()\n", "lm_post_processed_edit_distance": 16}, {"image_id": 20, "image_height": 2287, "image_width": 1620, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 75.0, "y": 69.0, "w": 1425.0, "h": 81.0, "line_num": 1, "text": "from karel . stamfordkarel import *"}, {"x": 66.0, "y": 189.0, "w": 424.0, "h": 83.0, "line_num": 2, "text": "def mais ():"}, {"x": 169.0, "y": 313.0, "w": 449.0, "h": 79.0, "line_num": 3, "text": "turn-left ():"}, {"x": 168.0, "y": 432.0, "w": 981.0, "h": 79.0, "line_num": 4, "text": "while frent_ is_ alpar () ;"}, {"x": 381.0, "y": 544.0, "w": 445.0, "h": 73.0, "line_num": 5, "text": "turn-right ()"}, {"x": 404.0, "y": 656.0, "w": 348.0, "h": 85.0, "line_num": 6, "text": "fill-row( )"}, {"x": 400.0, "y": 781.0, "w": 634.0, "h": 71.0, "line_num": 7, "text": "return _to_ home()"}, {"x": 405.0, "y": 904.0, "w": 364.0, "h": 71.0, "line_num": 8, "text": "Jumprow ()"}, {"x": 169.0, "y": 1027.0, "w": 471.0, "h": 69.0, "line_num": 9, "text": "turn-right ()"}, {"x": 175.0, "y": 1147.0, "w": 362.0, "h": 84.0, "line_num": 10, "text": "fill-row ()"}, {"x": 172.0, "y": 1252.0, "w": 712.0, "h": 72.0, "line_num": 11, "text": "returnkte - home ()"}, {"x": 180.0, "y": 1366.0, "w": 880.0, "h": 85.0, "line_num": 12, "text": "while front- is- Elcar ()"}, {"x": 423.0, "y": 1493.0, "w": 234.0, "h": 62.0, "line_num": 13, "text": "meve()"}, {"x": 109.0, "y": 1605.0, "w": 584.0, "h": 90.0, "line_num": 14, "text": "def fill-row() ;"}, {"x": 167.0, "y": 1725.0, "w": 894.0, "h": 85.0, "line_num": 15, "text": "while front- is clear()"}, {"x": 352.0, "y": 1847.0, "w": 525.0, "h": 81.0, "line_num": 16, "text": "put - beeper()"}, {"x": 366.0, "y": 1975.0, "w": 269.0, "h": 62.0, "line_num": 17, "text": "move ()"}, {"x": 164.0, "y": 2093.0, "w": 451.0, "h": 84.0, "line_num": 18, "text": "put-beeper ()"}], "ir_algo_name": "none", "ir_algo_output_code": "from karel . stamfordkarel import *\ndef mais ():\nturn-left ():\nwhile frent_ is_ alpar () ;\nturn-right ()\nfill-row( )\nreturn _to_ home()\nJumprow ()\nturn-right ()\nfill-row ()\nreturnkte - home ()\nwhile front- is- Elcar ()\nmeve()\ndef fill-row() ;\nwhile front- is clear()\nput - beeper()\nmove ()\nput-beeper ()", "ir_algo_output_edit_distance": 145, "prompting_method": "simple-test3", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    turn_left()\n    while front_is_clear():\n        turn_right()\n        fill_row()\n        return_to_home()\n        jump_row()\n        turn_right()\n        fill_row()\n        return_to_home()\n    while front_is_clear():\n        move()\n\ndef fill_row():\n    while front_is_clear():\n        put_beeper()\n        move()\n        put_beeper()\n", "lm_post_processed_edit_distance": 16}, {"image_id": 20, "image_height": 2287, "image_width": 1620, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 75.0, "y": 69.0, "w": 1425.0, "h": 81.0, "line_num": 1, "text": "from karel . stamfordkarel import *"}, {"x": 66.0, "y": 189.0, "w": 424.0, "h": 83.0, "line_num": 2, "text": "def mais ():"}, {"x": 169.0, "y": 313.0, "w": 449.0, "h": 79.0, "line_num": 3, "text": "turn-left ():"}, {"x": 168.0, "y": 432.0, "w": 981.0, "h": 79.0, "line_num": 4, "text": "while frent_ is_ alpar () ;"}, {"x": 381.0, "y": 544.0, "w": 445.0, "h": 73.0, "line_num": 5, "text": "turn-right ()"}, {"x": 404.0, "y": 656.0, "w": 348.0, "h": 85.0, "line_num": 6, "text": "fill-row( )"}, {"x": 400.0, "y": 781.0, "w": 634.0, "h": 71.0, "line_num": 7, "text": "return _to_ home()"}, {"x": 405.0, "y": 904.0, "w": 364.0, "h": 71.0, "line_num": 8, "text": "Jumprow ()"}, {"x": 169.0, "y": 1027.0, "w": 471.0, "h": 69.0, "line_num": 9, "text": "turn-right ()"}, {"x": 175.0, "y": 1147.0, "w": 362.0, "h": 84.0, "line_num": 10, "text": "fill-row ()"}, {"x": 172.0, "y": 1252.0, "w": 712.0, "h": 72.0, "line_num": 11, "text": "returnkte - home ()"}, {"x": 180.0, "y": 1366.0, "w": 880.0, "h": 85.0, "line_num": 12, "text": "while front- is- Elcar ()"}, {"x": 423.0, "y": 1493.0, "w": 234.0, "h": 62.0, "line_num": 13, "text": "meve()"}, {"x": 109.0, "y": 1605.0, "w": 584.0, "h": 90.0, "line_num": 14, "text": "def fill-row() ;"}, {"x": 167.0, "y": 1725.0, "w": 894.0, "h": 85.0, "line_num": 15, "text": "while front- is clear()"}, {"x": 352.0, "y": 1847.0, "w": 525.0, "h": 81.0, "line_num": 16, "text": "put - beeper()"}, {"x": 366.0, "y": 1975.0, "w": 269.0, "h": 62.0, "line_num": 17, "text": "move ()"}, {"x": 164.0, "y": 2093.0, "w": 451.0, "h": 84.0, "line_num": 18, "text": "put-beeper ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 116.33333333333334, "ir_algo_output_code": "from karel . stamfordkarel import *\ndef mais ():\nturn-left ():\nwhile frent_ is_ alpar () ;\n    turn-right ()\n    fill-row( )\n    return _to_ home()\n    Jumprow ()\nturn-right ()\nfill-row ()\nreturnkte - home ()\nwhile front- is- Elcar ()\n    meve()\ndef fill-row() ;\nwhile front- is clear()\n    put - beeper()\n    move ()\nput-beeper ()\n", "ir_algo_output_indented_lines": [{"x": 75.0, "y": 69.0, "w": 1425.0, "h": 81.0, "line_num": 1, "text": "from karel . stamfordkarel import *", "cluster_label": 0, "indentation": 0}, {"x": 66.0, "y": 189.0, "w": 424.0, "h": 83.0, "line_num": 2, "text": "def mais ():", "cluster_label": 0, "indentation": 0}, {"x": 169.0, "y": 313.0, "w": 449.0, "h": 79.0, "line_num": 3, "text": "turn-left ():", "cluster_label": 0, "indentation": 0}, {"x": 168.0, "y": 432.0, "w": 981.0, "h": 79.0, "line_num": 4, "text": "while frent_ is_ alpar () ;", "cluster_label": 0, "indentation": 0}, {"x": 381.0, "y": 544.0, "w": 445.0, "h": 73.0, "line_num": 5, "text": "turn-right ()", "cluster_label": 1, "indentation": 1}, {"x": 404.0, "y": 656.0, "w": 348.0, "h": 85.0, "line_num": 6, "text": "fill-row( )", "cluster_label": 1, "indentation": 1}, {"x": 400.0, "y": 781.0, "w": 634.0, "h": 71.0, "line_num": 7, "text": "return _to_ home()", "cluster_label": 1, "indentation": 1}, {"x": 405.0, "y": 904.0, "w": 364.0, "h": 71.0, "line_num": 8, "text": "Jumprow ()", "cluster_label": 1, "indentation": 1}, {"x": 169.0, "y": 1027.0, "w": 471.0, "h": 69.0, "line_num": 9, "text": "turn-right ()", "cluster_label": 0, "indentation": 0}, {"x": 175.0, "y": 1147.0, "w": 362.0, "h": 84.0, "line_num": 10, "text": "fill-row ()", "cluster_label": 0, "indentation": 0}, {"x": 172.0, "y": 1252.0, "w": 712.0, "h": 72.0, "line_num": 11, "text": "returnkte - home ()", "cluster_label": 0, "indentation": 0}, {"x": 180.0, "y": 1366.0, "w": 880.0, "h": 85.0, "line_num": 12, "text": "while front- is- Elcar ()", "cluster_label": 0, "indentation": 0}, {"x": 423.0, "y": 1493.0, "w": 234.0, "h": 62.0, "line_num": 13, "text": "meve()", "cluster_label": 1, "indentation": 1}, {"x": 109.0, "y": 1605.0, "w": 584.0, "h": 90.0, "line_num": 14, "text": "def fill-row() ;", "cluster_label": 0, "indentation": 0}, {"x": 167.0, "y": 1725.0, "w": 894.0, "h": 85.0, "line_num": 15, "text": "while front- is clear()", "cluster_label": 0, "indentation": 0}, {"x": 352.0, "y": 1847.0, "w": 525.0, "h": 81.0, "line_num": 16, "text": "put - beeper()", "cluster_label": 1, "indentation": 1}, {"x": 366.0, "y": 1975.0, "w": 269.0, "h": 62.0, "line_num": 17, "text": "move ()", "cluster_label": 1, "indentation": 1}, {"x": 164.0, "y": 2093.0, "w": 451.0, "h": 84.0, "line_num": 18, "text": "put-beeper ()", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 117, "prompting_method": "none", "lm_post_processed_code": "from karel . stamfordkarel import *\ndef mais ():\nturn-left ():\nwhile frent_ is_ alpar () ;\n    turn-right ()\n    fill-row( )\n    return _to_ home()\n    Jumprow ()\nturn-right ()\nfill-row ()\nreturnkte - home ()\nwhile front- is- Elcar ()\n    meve()\ndef fill-row() ;\nwhile front- is clear()\n    put - beeper()\n    move ()\nput-beeper ()\n", "lm_post_processed_edit_distance": 117}, {"image_id": 20, "image_height": 2287, "image_width": 1620, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 75.0, "y": 69.0, "w": 1425.0, "h": 81.0, "line_num": 1, "text": "from karel . stamfordkarel import *"}, {"x": 66.0, "y": 189.0, "w": 424.0, "h": 83.0, "line_num": 2, "text": "def mais ():"}, {"x": 169.0, "y": 313.0, "w": 449.0, "h": 79.0, "line_num": 3, "text": "turn-left ():"}, {"x": 168.0, "y": 432.0, "w": 981.0, "h": 79.0, "line_num": 4, "text": "while frent_ is_ alpar () ;"}, {"x": 381.0, "y": 544.0, "w": 445.0, "h": 73.0, "line_num": 5, "text": "turn-right ()"}, {"x": 404.0, "y": 656.0, "w": 348.0, "h": 85.0, "line_num": 6, "text": "fill-row( )"}, {"x": 400.0, "y": 781.0, "w": 634.0, "h": 71.0, "line_num": 7, "text": "return _to_ home()"}, {"x": 405.0, "y": 904.0, "w": 364.0, "h": 71.0, "line_num": 8, "text": "Jumprow ()"}, {"x": 169.0, "y": 1027.0, "w": 471.0, "h": 69.0, "line_num": 9, "text": "turn-right ()"}, {"x": 175.0, "y": 1147.0, "w": 362.0, "h": 84.0, "line_num": 10, "text": "fill-row ()"}, {"x": 172.0, "y": 1252.0, "w": 712.0, "h": 72.0, "line_num": 11, "text": "returnkte - home ()"}, {"x": 180.0, "y": 1366.0, "w": 880.0, "h": 85.0, "line_num": 12, "text": "while front- is- Elcar ()"}, {"x": 423.0, "y": 1493.0, "w": 234.0, "h": 62.0, "line_num": 13, "text": "meve()"}, {"x": 109.0, "y": 1605.0, "w": 584.0, "h": 90.0, "line_num": 14, "text": "def fill-row() ;"}, {"x": 167.0, "y": 1725.0, "w": 894.0, "h": 85.0, "line_num": 15, "text": "while front- is clear()"}, {"x": 352.0, "y": 1847.0, "w": 525.0, "h": 81.0, "line_num": 16, "text": "put - beeper()"}, {"x": 366.0, "y": 1975.0, "w": 269.0, "h": 62.0, "line_num": 17, "text": "move ()"}, {"x": 164.0, "y": 2093.0, "w": 451.0, "h": 84.0, "line_num": 18, "text": "put-beeper ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 116.33333333333334, "ir_algo_output_code": "from karel . stamfordkarel import *\ndef mais ():\nturn-left ():\nwhile frent_ is_ alpar () ;\n    turn-right ()\n    fill-row( )\n    return _to_ home()\n    Jumprow ()\nturn-right ()\nfill-row ()\nreturnkte - home ()\nwhile front- is- Elcar ()\n    meve()\ndef fill-row() ;\nwhile front- is clear()\n    put - beeper()\n    move ()\nput-beeper ()\n", "ir_algo_output_indented_lines": [{"x": 75.0, "y": 69.0, "w": 1425.0, "h": 81.0, "line_num": 1, "text": "from karel . stamfordkarel import *", "cluster_label": 0, "indentation": 0}, {"x": 66.0, "y": 189.0, "w": 424.0, "h": 83.0, "line_num": 2, "text": "def mais ():", "cluster_label": 0, "indentation": 0}, {"x": 169.0, "y": 313.0, "w": 449.0, "h": 79.0, "line_num": 3, "text": "turn-left ():", "cluster_label": 0, "indentation": 0}, {"x": 168.0, "y": 432.0, "w": 981.0, "h": 79.0, "line_num": 4, "text": "while frent_ is_ alpar () ;", "cluster_label": 0, "indentation": 0}, {"x": 381.0, "y": 544.0, "w": 445.0, "h": 73.0, "line_num": 5, "text": "turn-right ()", "cluster_label": 1, "indentation": 1}, {"x": 404.0, "y": 656.0, "w": 348.0, "h": 85.0, "line_num": 6, "text": "fill-row( )", "cluster_label": 1, "indentation": 1}, {"x": 400.0, "y": 781.0, "w": 634.0, "h": 71.0, "line_num": 7, "text": "return _to_ home()", "cluster_label": 1, "indentation": 1}, {"x": 405.0, "y": 904.0, "w": 364.0, "h": 71.0, "line_num": 8, "text": "Jumprow ()", "cluster_label": 1, "indentation": 1}, {"x": 169.0, "y": 1027.0, "w": 471.0, "h": 69.0, "line_num": 9, "text": "turn-right ()", "cluster_label": 0, "indentation": 0}, {"x": 175.0, "y": 1147.0, "w": 362.0, "h": 84.0, "line_num": 10, "text": "fill-row ()", "cluster_label": 0, "indentation": 0}, {"x": 172.0, "y": 1252.0, "w": 712.0, "h": 72.0, "line_num": 11, "text": "returnkte - home ()", "cluster_label": 0, "indentation": 0}, {"x": 180.0, "y": 1366.0, "w": 880.0, "h": 85.0, "line_num": 12, "text": "while front- is- Elcar ()", "cluster_label": 0, "indentation": 0}, {"x": 423.0, "y": 1493.0, "w": 234.0, "h": 62.0, "line_num": 13, "text": "meve()", "cluster_label": 1, "indentation": 1}, {"x": 109.0, "y": 1605.0, "w": 584.0, "h": 90.0, "line_num": 14, "text": "def fill-row() ;", "cluster_label": 0, "indentation": 0}, {"x": 167.0, "y": 1725.0, "w": 894.0, "h": 85.0, "line_num": 15, "text": "while front- is clear()", "cluster_label": 0, "indentation": 0}, {"x": 352.0, "y": 1847.0, "w": 525.0, "h": 81.0, "line_num": 16, "text": "put - beeper()", "cluster_label": 1, "indentation": 1}, {"x": 366.0, "y": 1975.0, "w": 269.0, "h": 62.0, "line_num": 17, "text": "move ()", "cluster_label": 1, "indentation": 1}, {"x": 164.0, "y": 2093.0, "w": 451.0, "h": 84.0, "line_num": 18, "text": "put-beeper ()", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 117, "prompting_method": "cot-test1", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\nturn_left()\nwhile front_is_clear():\n    turn_right()\n    fill_row()\n    return_to_home()\n    jump_row()\nturn_right()\nfill_row()\nreturn_to_home()\nwhile front_is_clear():\n    move()\n\ndef fill_row():\nwhile front_is_clear():\n    put_beeper()\n    move()\nput_beeper()\n", "lm_post_processed_edit_distance": 60}, {"image_id": 20, "image_height": 2287, "image_width": 1620, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 75.0, "y": 69.0, "w": 1425.0, "h": 81.0, "line_num": 1, "text": "from karel . stamfordkarel import *"}, {"x": 66.0, "y": 189.0, "w": 424.0, "h": 83.0, "line_num": 2, "text": "def mais ():"}, {"x": 169.0, "y": 313.0, "w": 449.0, "h": 79.0, "line_num": 3, "text": "turn-left ():"}, {"x": 168.0, "y": 432.0, "w": 981.0, "h": 79.0, "line_num": 4, "text": "while frent_ is_ alpar () ;"}, {"x": 381.0, "y": 544.0, "w": 445.0, "h": 73.0, "line_num": 5, "text": "turn-right ()"}, {"x": 404.0, "y": 656.0, "w": 348.0, "h": 85.0, "line_num": 6, "text": "fill-row( )"}, {"x": 400.0, "y": 781.0, "w": 634.0, "h": 71.0, "line_num": 7, "text": "return _to_ home()"}, {"x": 405.0, "y": 904.0, "w": 364.0, "h": 71.0, "line_num": 8, "text": "Jumprow ()"}, {"x": 169.0, "y": 1027.0, "w": 471.0, "h": 69.0, "line_num": 9, "text": "turn-right ()"}, {"x": 175.0, "y": 1147.0, "w": 362.0, "h": 84.0, "line_num": 10, "text": "fill-row ()"}, {"x": 172.0, "y": 1252.0, "w": 712.0, "h": 72.0, "line_num": 11, "text": "returnkte - home ()"}, {"x": 180.0, "y": 1366.0, "w": 880.0, "h": 85.0, "line_num": 12, "text": "while front- is- Elcar ()"}, {"x": 423.0, "y": 1493.0, "w": 234.0, "h": 62.0, "line_num": 13, "text": "meve()"}, {"x": 109.0, "y": 1605.0, "w": 584.0, "h": 90.0, "line_num": 14, "text": "def fill-row() ;"}, {"x": 167.0, "y": 1725.0, "w": 894.0, "h": 85.0, "line_num": 15, "text": "while front- is clear()"}, {"x": 352.0, "y": 1847.0, "w": 525.0, "h": 81.0, "line_num": 16, "text": "put - beeper()"}, {"x": 366.0, "y": 1975.0, "w": 269.0, "h": 62.0, "line_num": 17, "text": "move ()"}, {"x": 164.0, "y": 2093.0, "w": 451.0, "h": 84.0, "line_num": 18, "text": "put-beeper ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 116.33333333333334, "ir_algo_output_code": "from karel . stamfordkarel import *\ndef mais ():\nturn-left ():\nwhile frent_ is_ alpar () ;\n    turn-right ()\n    fill-row( )\n    return _to_ home()\n    Jumprow ()\nturn-right ()\nfill-row ()\nreturnkte - home ()\nwhile front- is- Elcar ()\n    meve()\ndef fill-row() ;\nwhile front- is clear()\n    put - beeper()\n    move ()\nput-beeper ()\n", "ir_algo_output_indented_lines": [{"x": 75.0, "y": 69.0, "w": 1425.0, "h": 81.0, "line_num": 1, "text": "from karel . stamfordkarel import *", "cluster_label": 0, "indentation": 0}, {"x": 66.0, "y": 189.0, "w": 424.0, "h": 83.0, "line_num": 2, "text": "def mais ():", "cluster_label": 0, "indentation": 0}, {"x": 169.0, "y": 313.0, "w": 449.0, "h": 79.0, "line_num": 3, "text": "turn-left ():", "cluster_label": 0, "indentation": 0}, {"x": 168.0, "y": 432.0, "w": 981.0, "h": 79.0, "line_num": 4, "text": "while frent_ is_ alpar () ;", "cluster_label": 0, "indentation": 0}, {"x": 381.0, "y": 544.0, "w": 445.0, "h": 73.0, "line_num": 5, "text": "turn-right ()", "cluster_label": 1, "indentation": 1}, {"x": 404.0, "y": 656.0, "w": 348.0, "h": 85.0, "line_num": 6, "text": "fill-row( )", "cluster_label": 1, "indentation": 1}, {"x": 400.0, "y": 781.0, "w": 634.0, "h": 71.0, "line_num": 7, "text": "return _to_ home()", "cluster_label": 1, "indentation": 1}, {"x": 405.0, "y": 904.0, "w": 364.0, "h": 71.0, "line_num": 8, "text": "Jumprow ()", "cluster_label": 1, "indentation": 1}, {"x": 169.0, "y": 1027.0, "w": 471.0, "h": 69.0, "line_num": 9, "text": "turn-right ()", "cluster_label": 0, "indentation": 0}, {"x": 175.0, "y": 1147.0, "w": 362.0, "h": 84.0, "line_num": 10, "text": "fill-row ()", "cluster_label": 0, "indentation": 0}, {"x": 172.0, "y": 1252.0, "w": 712.0, "h": 72.0, "line_num": 11, "text": "returnkte - home ()", "cluster_label": 0, "indentation": 0}, {"x": 180.0, "y": 1366.0, "w": 880.0, "h": 85.0, "line_num": 12, "text": "while front- is- Elcar ()", "cluster_label": 0, "indentation": 0}, {"x": 423.0, "y": 1493.0, "w": 234.0, "h": 62.0, "line_num": 13, "text": "meve()", "cluster_label": 1, "indentation": 1}, {"x": 109.0, "y": 1605.0, "w": 584.0, "h": 90.0, "line_num": 14, "text": "def fill-row() ;", "cluster_label": 0, "indentation": 0}, {"x": 167.0, "y": 1725.0, "w": 894.0, "h": 85.0, "line_num": 15, "text": "while front- is clear()", "cluster_label": 0, "indentation": 0}, {"x": 352.0, "y": 1847.0, "w": 525.0, "h": 81.0, "line_num": 16, "text": "put - beeper()", "cluster_label": 1, "indentation": 1}, {"x": 366.0, "y": 1975.0, "w": 269.0, "h": 62.0, "line_num": 17, "text": "move ()", "cluster_label": 1, "indentation": 1}, {"x": 164.0, "y": 2093.0, "w": 451.0, "h": 84.0, "line_num": 18, "text": "put-beeper ()", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 117, "prompting_method": "cot-test5", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\nturn_left()\nwhile front_is_clear():\n    turn_right()\n    fill_row()\n    return_to_home()\n    jump_row()\nturn_right()\nfill_row()\nreturn_to_home()\nwhile front_is_clear():\n    move()\n\ndef fill_row():\nwhile front_is_clear():\n    put_beeper()\n    move()\nput_beeper()\n", "lm_post_processed_edit_distance": 60}, {"image_id": 20, "image_height": 2287, "image_width": 1620, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 75.0, "y": 69.0, "w": 1425.0, "h": 81.0, "line_num": 1, "text": "from karel . stamfordkarel import *"}, {"x": 66.0, "y": 189.0, "w": 424.0, "h": 83.0, "line_num": 2, "text": "def mais ():"}, {"x": 169.0, "y": 313.0, "w": 449.0, "h": 79.0, "line_num": 3, "text": "turn-left ():"}, {"x": 168.0, "y": 432.0, "w": 981.0, "h": 79.0, "line_num": 4, "text": "while frent_ is_ alpar () ;"}, {"x": 381.0, "y": 544.0, "w": 445.0, "h": 73.0, "line_num": 5, "text": "turn-right ()"}, {"x": 404.0, "y": 656.0, "w": 348.0, "h": 85.0, "line_num": 6, "text": "fill-row( )"}, {"x": 400.0, "y": 781.0, "w": 634.0, "h": 71.0, "line_num": 7, "text": "return _to_ home()"}, {"x": 405.0, "y": 904.0, "w": 364.0, "h": 71.0, "line_num": 8, "text": "Jumprow ()"}, {"x": 169.0, "y": 1027.0, "w": 471.0, "h": 69.0, "line_num": 9, "text": "turn-right ()"}, {"x": 175.0, "y": 1147.0, "w": 362.0, "h": 84.0, "line_num": 10, "text": "fill-row ()"}, {"x": 172.0, "y": 1252.0, "w": 712.0, "h": 72.0, "line_num": 11, "text": "returnkte - home ()"}, {"x": 180.0, "y": 1366.0, "w": 880.0, "h": 85.0, "line_num": 12, "text": "while front- is- Elcar ()"}, {"x": 423.0, "y": 1493.0, "w": 234.0, "h": 62.0, "line_num": 13, "text": "meve()"}, {"x": 109.0, "y": 1605.0, "w": 584.0, "h": 90.0, "line_num": 14, "text": "def fill-row() ;"}, {"x": 167.0, "y": 1725.0, "w": 894.0, "h": 85.0, "line_num": 15, "text": "while front- is clear()"}, {"x": 352.0, "y": 1847.0, "w": 525.0, "h": 81.0, "line_num": 16, "text": "put - beeper()"}, {"x": 366.0, "y": 1975.0, "w": 269.0, "h": 62.0, "line_num": 17, "text": "move ()"}, {"x": 164.0, "y": 2093.0, "w": 451.0, "h": 84.0, "line_num": 18, "text": "put-beeper ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 116.33333333333334, "ir_algo_output_code": "from karel . stamfordkarel import *\ndef mais ():\nturn-left ():\nwhile frent_ is_ alpar () ;\n    turn-right ()\n    fill-row( )\n    return _to_ home()\n    Jumprow ()\nturn-right ()\nfill-row ()\nreturnkte - home ()\nwhile front- is- Elcar ()\n    meve()\ndef fill-row() ;\nwhile front- is clear()\n    put - beeper()\n    move ()\nput-beeper ()\n", "ir_algo_output_indented_lines": [{"x": 75.0, "y": 69.0, "w": 1425.0, "h": 81.0, "line_num": 1, "text": "from karel . stamfordkarel import *", "cluster_label": 0, "indentation": 0}, {"x": 66.0, "y": 189.0, "w": 424.0, "h": 83.0, "line_num": 2, "text": "def mais ():", "cluster_label": 0, "indentation": 0}, {"x": 169.0, "y": 313.0, "w": 449.0, "h": 79.0, "line_num": 3, "text": "turn-left ():", "cluster_label": 0, "indentation": 0}, {"x": 168.0, "y": 432.0, "w": 981.0, "h": 79.0, "line_num": 4, "text": "while frent_ is_ alpar () ;", "cluster_label": 0, "indentation": 0}, {"x": 381.0, "y": 544.0, "w": 445.0, "h": 73.0, "line_num": 5, "text": "turn-right ()", "cluster_label": 1, "indentation": 1}, {"x": 404.0, "y": 656.0, "w": 348.0, "h": 85.0, "line_num": 6, "text": "fill-row( )", "cluster_label": 1, "indentation": 1}, {"x": 400.0, "y": 781.0, "w": 634.0, "h": 71.0, "line_num": 7, "text": "return _to_ home()", "cluster_label": 1, "indentation": 1}, {"x": 405.0, "y": 904.0, "w": 364.0, "h": 71.0, "line_num": 8, "text": "Jumprow ()", "cluster_label": 1, "indentation": 1}, {"x": 169.0, "y": 1027.0, "w": 471.0, "h": 69.0, "line_num": 9, "text": "turn-right ()", "cluster_label": 0, "indentation": 0}, {"x": 175.0, "y": 1147.0, "w": 362.0, "h": 84.0, "line_num": 10, "text": "fill-row ()", "cluster_label": 0, "indentation": 0}, {"x": 172.0, "y": 1252.0, "w": 712.0, "h": 72.0, "line_num": 11, "text": "returnkte - home ()", "cluster_label": 0, "indentation": 0}, {"x": 180.0, "y": 1366.0, "w": 880.0, "h": 85.0, "line_num": 12, "text": "while front- is- Elcar ()", "cluster_label": 0, "indentation": 0}, {"x": 423.0, "y": 1493.0, "w": 234.0, "h": 62.0, "line_num": 13, "text": "meve()", "cluster_label": 1, "indentation": 1}, {"x": 109.0, "y": 1605.0, "w": 584.0, "h": 90.0, "line_num": 14, "text": "def fill-row() ;", "cluster_label": 0, "indentation": 0}, {"x": 167.0, "y": 1725.0, "w": 894.0, "h": 85.0, "line_num": 15, "text": "while front- is clear()", "cluster_label": 0, "indentation": 0}, {"x": 352.0, "y": 1847.0, "w": 525.0, "h": 81.0, "line_num": 16, "text": "put - beeper()", "cluster_label": 1, "indentation": 1}, {"x": 366.0, "y": 1975.0, "w": 269.0, "h": 62.0, "line_num": 17, "text": "move ()", "cluster_label": 1, "indentation": 1}, {"x": 164.0, "y": 2093.0, "w": 451.0, "h": 84.0, "line_num": 18, "text": "put-beeper ()", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 117, "prompting_method": "simple-test2", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    turn_left()\n    while front_is_clear():\n        turn_right()\n        fill_row()\n        return_to_home()\n        jump_row()\n    turn_right()\n    fill_row()\n    return_to_home()\n    while front_is_clear():\n        move()\n\ndef fill_row():\n    while front_is_clear():\n        put_beeper()\n        move()\n    put_beeper()\n", "lm_post_processed_edit_distance": 0}, {"image_id": 20, "image_height": 2287, "image_width": 1620, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 75.0, "y": 69.0, "w": 1425.0, "h": 81.0, "line_num": 1, "text": "from karel . stamfordkarel import *"}, {"x": 66.0, "y": 189.0, "w": 424.0, "h": 83.0, "line_num": 2, "text": "def mais ():"}, {"x": 169.0, "y": 313.0, "w": 449.0, "h": 79.0, "line_num": 3, "text": "turn-left ():"}, {"x": 168.0, "y": 432.0, "w": 981.0, "h": 79.0, "line_num": 4, "text": "while frent_ is_ alpar () ;"}, {"x": 381.0, "y": 544.0, "w": 445.0, "h": 73.0, "line_num": 5, "text": "turn-right ()"}, {"x": 404.0, "y": 656.0, "w": 348.0, "h": 85.0, "line_num": 6, "text": "fill-row( )"}, {"x": 400.0, "y": 781.0, "w": 634.0, "h": 71.0, "line_num": 7, "text": "return _to_ home()"}, {"x": 405.0, "y": 904.0, "w": 364.0, "h": 71.0, "line_num": 8, "text": "Jumprow ()"}, {"x": 169.0, "y": 1027.0, "w": 471.0, "h": 69.0, "line_num": 9, "text": "turn-right ()"}, {"x": 175.0, "y": 1147.0, "w": 362.0, "h": 84.0, "line_num": 10, "text": "fill-row ()"}, {"x": 172.0, "y": 1252.0, "w": 712.0, "h": 72.0, "line_num": 11, "text": "returnkte - home ()"}, {"x": 180.0, "y": 1366.0, "w": 880.0, "h": 85.0, "line_num": 12, "text": "while front- is- Elcar ()"}, {"x": 423.0, "y": 1493.0, "w": 234.0, "h": 62.0, "line_num": 13, "text": "meve()"}, {"x": 109.0, "y": 1605.0, "w": 584.0, "h": 90.0, "line_num": 14, "text": "def fill-row() ;"}, {"x": 167.0, "y": 1725.0, "w": 894.0, "h": 85.0, "line_num": 15, "text": "while front- is clear()"}, {"x": 352.0, "y": 1847.0, "w": 525.0, "h": 81.0, "line_num": 16, "text": "put - beeper()"}, {"x": 366.0, "y": 1975.0, "w": 269.0, "h": 62.0, "line_num": 17, "text": "move ()"}, {"x": 164.0, "y": 2093.0, "w": 451.0, "h": 84.0, "line_num": 18, "text": "put-beeper ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 116.33333333333334, "ir_algo_output_code": "from karel . stamfordkarel import *\ndef mais ():\nturn-left ():\nwhile frent_ is_ alpar () ;\n    turn-right ()\n    fill-row( )\n    return _to_ home()\n    Jumprow ()\nturn-right ()\nfill-row ()\nreturnkte - home ()\nwhile front- is- Elcar ()\n    meve()\ndef fill-row() ;\nwhile front- is clear()\n    put - beeper()\n    move ()\nput-beeper ()\n", "ir_algo_output_indented_lines": [{"x": 75.0, "y": 69.0, "w": 1425.0, "h": 81.0, "line_num": 1, "text": "from karel . stamfordkarel import *", "cluster_label": 0, "indentation": 0}, {"x": 66.0, "y": 189.0, "w": 424.0, "h": 83.0, "line_num": 2, "text": "def mais ():", "cluster_label": 0, "indentation": 0}, {"x": 169.0, "y": 313.0, "w": 449.0, "h": 79.0, "line_num": 3, "text": "turn-left ():", "cluster_label": 0, "indentation": 0}, {"x": 168.0, "y": 432.0, "w": 981.0, "h": 79.0, "line_num": 4, "text": "while frent_ is_ alpar () ;", "cluster_label": 0, "indentation": 0}, {"x": 381.0, "y": 544.0, "w": 445.0, "h": 73.0, "line_num": 5, "text": "turn-right ()", "cluster_label": 1, "indentation": 1}, {"x": 404.0, "y": 656.0, "w": 348.0, "h": 85.0, "line_num": 6, "text": "fill-row( )", "cluster_label": 1, "indentation": 1}, {"x": 400.0, "y": 781.0, "w": 634.0, "h": 71.0, "line_num": 7, "text": "return _to_ home()", "cluster_label": 1, "indentation": 1}, {"x": 405.0, "y": 904.0, "w": 364.0, "h": 71.0, "line_num": 8, "text": "Jumprow ()", "cluster_label": 1, "indentation": 1}, {"x": 169.0, "y": 1027.0, "w": 471.0, "h": 69.0, "line_num": 9, "text": "turn-right ()", "cluster_label": 0, "indentation": 0}, {"x": 175.0, "y": 1147.0, "w": 362.0, "h": 84.0, "line_num": 10, "text": "fill-row ()", "cluster_label": 0, "indentation": 0}, {"x": 172.0, "y": 1252.0, "w": 712.0, "h": 72.0, "line_num": 11, "text": "returnkte - home ()", "cluster_label": 0, "indentation": 0}, {"x": 180.0, "y": 1366.0, "w": 880.0, "h": 85.0, "line_num": 12, "text": "while front- is- Elcar ()", "cluster_label": 0, "indentation": 0}, {"x": 423.0, "y": 1493.0, "w": 234.0, "h": 62.0, "line_num": 13, "text": "meve()", "cluster_label": 1, "indentation": 1}, {"x": 109.0, "y": 1605.0, "w": 584.0, "h": 90.0, "line_num": 14, "text": "def fill-row() ;", "cluster_label": 0, "indentation": 0}, {"x": 167.0, "y": 1725.0, "w": 894.0, "h": 85.0, "line_num": 15, "text": "while front- is clear()", "cluster_label": 0, "indentation": 0}, {"x": 352.0, "y": 1847.0, "w": 525.0, "h": 81.0, "line_num": 16, "text": "put - beeper()", "cluster_label": 1, "indentation": 1}, {"x": 366.0, "y": 1975.0, "w": 269.0, "h": 62.0, "line_num": 17, "text": "move ()", "cluster_label": 1, "indentation": 1}, {"x": 164.0, "y": 2093.0, "w": 451.0, "h": 84.0, "line_num": 18, "text": "put-beeper ()", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 117, "prompting_method": "simple-test3", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    turn_left()\n    while front_is_clear():\n        turn_right()\n        fill_row()\n        return_to_home()\n        jump_row()\n    turn_right()\n    fill_row()\n    return_to_home()\n    while front_is_clear():\n        move()\n\ndef fill_row():\n    while front_is_clear():\n        put_beeper()\n        move()\n    put_beeper()\n", "lm_post_processed_edit_distance": 0}, {"image_id": 20, "image_height": 2287, "image_width": 1620, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 75.0, "y": 69.0, "w": 1425.0, "h": 81.0, "line_num": 1, "text": "from karel . stamfordkarel import *"}, {"x": 66.0, "y": 189.0, "w": 424.0, "h": 83.0, "line_num": 2, "text": "def mais ():"}, {"x": 169.0, "y": 313.0, "w": 449.0, "h": 79.0, "line_num": 3, "text": "turn-left ():"}, {"x": 168.0, "y": 432.0, "w": 981.0, "h": 79.0, "line_num": 4, "text": "while frent_ is_ alpar () ;"}, {"x": 381.0, "y": 544.0, "w": 445.0, "h": 73.0, "line_num": 5, "text": "turn-right ()"}, {"x": 404.0, "y": 656.0, "w": 348.0, "h": 85.0, "line_num": 6, "text": "fill-row( )"}, {"x": 400.0, "y": 781.0, "w": 634.0, "h": 71.0, "line_num": 7, "text": "return _to_ home()"}, {"x": 405.0, "y": 904.0, "w": 364.0, "h": 71.0, "line_num": 8, "text": "Jumprow ()"}, {"x": 169.0, "y": 1027.0, "w": 471.0, "h": 69.0, "line_num": 9, "text": "turn-right ()"}, {"x": 175.0, "y": 1147.0, "w": 362.0, "h": 84.0, "line_num": 10, "text": "fill-row ()"}, {"x": 172.0, "y": 1252.0, "w": 712.0, "h": 72.0, "line_num": 11, "text": "returnkte - home ()"}, {"x": 180.0, "y": 1366.0, "w": 880.0, "h": 85.0, "line_num": 12, "text": "while front- is- Elcar ()"}, {"x": 423.0, "y": 1493.0, "w": 234.0, "h": 62.0, "line_num": 13, "text": "meve()"}, {"x": 109.0, "y": 1605.0, "w": 584.0, "h": 90.0, "line_num": 14, "text": "def fill-row() ;"}, {"x": 167.0, "y": 1725.0, "w": 894.0, "h": 85.0, "line_num": 15, "text": "while front- is clear()"}, {"x": 352.0, "y": 1847.0, "w": 525.0, "h": 81.0, "line_num": 16, "text": "put - beeper()"}, {"x": 366.0, "y": 1975.0, "w": 269.0, "h": 62.0, "line_num": 17, "text": "move ()"}, {"x": 164.0, "y": 2093.0, "w": 451.0, "h": 84.0, "line_num": 18, "text": "put-beeper ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "from karel . stamfordkarel import *\ndef mais ():\n    turn-left ():\n    while frent_ is_ alpar () ;\n        turn-right ()\n        fill-row( )\n        return _to_ home()\n        Jumprow ()\n    turn-right ()\n    fill-row ()\n    returnkte - home ()\n    while front- is- Elcar ()\n        meve()\ndef fill-row() ;\n    while front- is clear()\n        put - beeper()\n        move ()\n    put-beeper ()\n", "ir_algo_output_indented_lines": [{"x": 75.0, "y": 69.0, "w": 1425.0, "h": 81.0, "line_num": 1, "text": "from karel . stamfordkarel import *", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 66.0, "y": 189.0, "w": 424.0, "h": 83.0, "line_num": 2, "text": "def mais ():", "delta": -9.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 169.0, "y": 313.0, "w": 449.0, "h": 79.0, "line_num": 3, "text": "turn-left ():", "delta": 103.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 168.0, "y": 432.0, "w": 981.0, "h": 79.0, "line_num": 4, "text": "while frent_ is_ alpar () ;", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 381.0, "y": 544.0, "w": 445.0, "h": 73.0, "line_num": 5, "text": "turn-right ()", "delta": 213.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 404.0, "y": 656.0, "w": 348.0, "h": 85.0, "line_num": 6, "text": "fill-row( )", "delta": 23.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 400.0, "y": 781.0, "w": 634.0, "h": 71.0, "line_num": 7, "text": "return _to_ home()", "delta": -4.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 405.0, "y": 904.0, "w": 364.0, "h": 71.0, "line_num": 8, "text": "Jumprow ()", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 169.0, "y": 1027.0, "w": 471.0, "h": 69.0, "line_num": 9, "text": "turn-right ()", "delta": -236.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 175.0, "y": 1147.0, "w": 362.0, "h": 84.0, "line_num": 10, "text": "fill-row ()", "delta": 6.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 172.0, "y": 1252.0, "w": 712.0, "h": 72.0, "line_num": 11, "text": "returnkte - home ()", "delta": -3.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 180.0, "y": 1366.0, "w": 880.0, "h": 85.0, "line_num": 12, "text": "while front- is- Elcar ()", "delta": 8.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 423.0, "y": 1493.0, "w": 234.0, "h": 62.0, "line_num": 13, "text": "meve()", "delta": 243.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 109.0, "y": 1605.0, "w": 584.0, "h": 90.0, "line_num": 14, "text": "def fill-row() ;", "delta": -314.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 167.0, "y": 1725.0, "w": 894.0, "h": 85.0, "line_num": 15, "text": "while front- is clear()", "delta": 58.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 352.0, "y": 1847.0, "w": 525.0, "h": 81.0, "line_num": 16, "text": "put - beeper()", "delta": 185.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 366.0, "y": 1975.0, "w": 269.0, "h": 62.0, "line_num": 17, "text": "move ()", "delta": 14.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 164.0, "y": 2093.0, "w": 451.0, "h": 84.0, "line_num": 18, "text": "put-beeper ()", "delta": -202.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 59, "prompting_method": "none", "lm_post_processed_code": "from karel . stamfordkarel import *\ndef mais ():\n    turn-left ():\n    while frent_ is_ alpar () ;\n        turn-right ()\n        fill-row( )\n        return _to_ home()\n        Jumprow ()\n    turn-right ()\n    fill-row ()\n    returnkte - home ()\n    while front- is- Elcar ()\n        meve()\ndef fill-row() ;\n    while front- is clear()\n        put - beeper()\n        move ()\n    put-beeper ()\n", "lm_post_processed_edit_distance": 59}, {"image_id": 20, "image_height": 2287, "image_width": 1620, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 75.0, "y": 69.0, "w": 1425.0, "h": 81.0, "line_num": 1, "text": "from karel . stamfordkarel import *"}, {"x": 66.0, "y": 189.0, "w": 424.0, "h": 83.0, "line_num": 2, "text": "def mais ():"}, {"x": 169.0, "y": 313.0, "w": 449.0, "h": 79.0, "line_num": 3, "text": "turn-left ():"}, {"x": 168.0, "y": 432.0, "w": 981.0, "h": 79.0, "line_num": 4, "text": "while frent_ is_ alpar () ;"}, {"x": 381.0, "y": 544.0, "w": 445.0, "h": 73.0, "line_num": 5, "text": "turn-right ()"}, {"x": 404.0, "y": 656.0, "w": 348.0, "h": 85.0, "line_num": 6, "text": "fill-row( )"}, {"x": 400.0, "y": 781.0, "w": 634.0, "h": 71.0, "line_num": 7, "text": "return _to_ home()"}, {"x": 405.0, "y": 904.0, "w": 364.0, "h": 71.0, "line_num": 8, "text": "Jumprow ()"}, {"x": 169.0, "y": 1027.0, "w": 471.0, "h": 69.0, "line_num": 9, "text": "turn-right ()"}, {"x": 175.0, "y": 1147.0, "w": 362.0, "h": 84.0, "line_num": 10, "text": "fill-row ()"}, {"x": 172.0, "y": 1252.0, "w": 712.0, "h": 72.0, "line_num": 11, "text": "returnkte - home ()"}, {"x": 180.0, "y": 1366.0, "w": 880.0, "h": 85.0, "line_num": 12, "text": "while front- is- Elcar ()"}, {"x": 423.0, "y": 1493.0, "w": 234.0, "h": 62.0, "line_num": 13, "text": "meve()"}, {"x": 109.0, "y": 1605.0, "w": 584.0, "h": 90.0, "line_num": 14, "text": "def fill-row() ;"}, {"x": 167.0, "y": 1725.0, "w": 894.0, "h": 85.0, "line_num": 15, "text": "while front- is clear()"}, {"x": 352.0, "y": 1847.0, "w": 525.0, "h": 81.0, "line_num": 16, "text": "put - beeper()"}, {"x": 366.0, "y": 1975.0, "w": 269.0, "h": 62.0, "line_num": 17, "text": "move ()"}, {"x": 164.0, "y": 2093.0, "w": 451.0, "h": 84.0, "line_num": 18, "text": "put-beeper ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "from karel . stamfordkarel import *\ndef mais ():\n    turn-left ():\n    while frent_ is_ alpar () ;\n        turn-right ()\n        fill-row( )\n        return _to_ home()\n        Jumprow ()\n    turn-right ()\n    fill-row ()\n    returnkte - home ()\n    while front- is- Elcar ()\n        meve()\ndef fill-row() ;\n    while front- is clear()\n        put - beeper()\n        move ()\n    put-beeper ()\n", "ir_algo_output_indented_lines": [{"x": 75.0, "y": 69.0, "w": 1425.0, "h": 81.0, "line_num": 1, "text": "from karel . stamfordkarel import *", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 66.0, "y": 189.0, "w": 424.0, "h": 83.0, "line_num": 2, "text": "def mais ():", "delta": -9.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 169.0, "y": 313.0, "w": 449.0, "h": 79.0, "line_num": 3, "text": "turn-left ():", "delta": 103.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 168.0, "y": 432.0, "w": 981.0, "h": 79.0, "line_num": 4, "text": "while frent_ is_ alpar () ;", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 381.0, "y": 544.0, "w": 445.0, "h": 73.0, "line_num": 5, "text": "turn-right ()", "delta": 213.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 404.0, "y": 656.0, "w": 348.0, "h": 85.0, "line_num": 6, "text": "fill-row( )", "delta": 23.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 400.0, "y": 781.0, "w": 634.0, "h": 71.0, "line_num": 7, "text": "return _to_ home()", "delta": -4.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 405.0, "y": 904.0, "w": 364.0, "h": 71.0, "line_num": 8, "text": "Jumprow ()", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 169.0, "y": 1027.0, "w": 471.0, "h": 69.0, "line_num": 9, "text": "turn-right ()", "delta": -236.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 175.0, "y": 1147.0, "w": 362.0, "h": 84.0, "line_num": 10, "text": "fill-row ()", "delta": 6.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 172.0, "y": 1252.0, "w": 712.0, "h": 72.0, "line_num": 11, "text": "returnkte - home ()", "delta": -3.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 180.0, "y": 1366.0, "w": 880.0, "h": 85.0, "line_num": 12, "text": "while front- is- Elcar ()", "delta": 8.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 423.0, "y": 1493.0, "w": 234.0, "h": 62.0, "line_num": 13, "text": "meve()", "delta": 243.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 109.0, "y": 1605.0, "w": 584.0, "h": 90.0, "line_num": 14, "text": "def fill-row() ;", "delta": -314.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 167.0, "y": 1725.0, "w": 894.0, "h": 85.0, "line_num": 15, "text": "while front- is clear()", "delta": 58.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 352.0, "y": 1847.0, "w": 525.0, "h": 81.0, "line_num": 16, "text": "put - beeper()", "delta": 185.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 366.0, "y": 1975.0, "w": 269.0, "h": 62.0, "line_num": 17, "text": "move ()", "delta": 14.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 164.0, "y": 2093.0, "w": 451.0, "h": 84.0, "line_num": 18, "text": "put-beeper ()", "delta": -202.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 59, "prompting_method": "cot-test1", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    turn_left()\n    while front_is_clear():\n        turn_right()\n        fill_row()\n        return_to_home()\n    jump_row()\n    turn_right()\n    fill_row()\n    return_to_home()\n    while front_is_clear():\n        move()\n\ndef fill_row():\n    while front_is_clear():\n        put_beeper()\n        move()\n    put_beeper()\n", "lm_post_processed_edit_distance": 4}, {"image_id": 20, "image_height": 2287, "image_width": 1620, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 75.0, "y": 69.0, "w": 1425.0, "h": 81.0, "line_num": 1, "text": "from karel . stamfordkarel import *"}, {"x": 66.0, "y": 189.0, "w": 424.0, "h": 83.0, "line_num": 2, "text": "def mais ():"}, {"x": 169.0, "y": 313.0, "w": 449.0, "h": 79.0, "line_num": 3, "text": "turn-left ():"}, {"x": 168.0, "y": 432.0, "w": 981.0, "h": 79.0, "line_num": 4, "text": "while frent_ is_ alpar () ;"}, {"x": 381.0, "y": 544.0, "w": 445.0, "h": 73.0, "line_num": 5, "text": "turn-right ()"}, {"x": 404.0, "y": 656.0, "w": 348.0, "h": 85.0, "line_num": 6, "text": "fill-row( )"}, {"x": 400.0, "y": 781.0, "w": 634.0, "h": 71.0, "line_num": 7, "text": "return _to_ home()"}, {"x": 405.0, "y": 904.0, "w": 364.0, "h": 71.0, "line_num": 8, "text": "Jumprow ()"}, {"x": 169.0, "y": 1027.0, "w": 471.0, "h": 69.0, "line_num": 9, "text": "turn-right ()"}, {"x": 175.0, "y": 1147.0, "w": 362.0, "h": 84.0, "line_num": 10, "text": "fill-row ()"}, {"x": 172.0, "y": 1252.0, "w": 712.0, "h": 72.0, "line_num": 11, "text": "returnkte - home ()"}, {"x": 180.0, "y": 1366.0, "w": 880.0, "h": 85.0, "line_num": 12, "text": "while front- is- Elcar ()"}, {"x": 423.0, "y": 1493.0, "w": 234.0, "h": 62.0, "line_num": 13, "text": "meve()"}, {"x": 109.0, "y": 1605.0, "w": 584.0, "h": 90.0, "line_num": 14, "text": "def fill-row() ;"}, {"x": 167.0, "y": 1725.0, "w": 894.0, "h": 85.0, "line_num": 15, "text": "while front- is clear()"}, {"x": 352.0, "y": 1847.0, "w": 525.0, "h": 81.0, "line_num": 16, "text": "put - beeper()"}, {"x": 366.0, "y": 1975.0, "w": 269.0, "h": 62.0, "line_num": 17, "text": "move ()"}, {"x": 164.0, "y": 2093.0, "w": 451.0, "h": 84.0, "line_num": 18, "text": "put-beeper ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "from karel . stamfordkarel import *\ndef mais ():\n    turn-left ():\n    while frent_ is_ alpar () ;\n        turn-right ()\n        fill-row( )\n        return _to_ home()\n        Jumprow ()\n    turn-right ()\n    fill-row ()\n    returnkte - home ()\n    while front- is- Elcar ()\n        meve()\ndef fill-row() ;\n    while front- is clear()\n        put - beeper()\n        move ()\n    put-beeper ()\n", "ir_algo_output_indented_lines": [{"x": 75.0, "y": 69.0, "w": 1425.0, "h": 81.0, "line_num": 1, "text": "from karel . stamfordkarel import *", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 66.0, "y": 189.0, "w": 424.0, "h": 83.0, "line_num": 2, "text": "def mais ():", "delta": -9.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 169.0, "y": 313.0, "w": 449.0, "h": 79.0, "line_num": 3, "text": "turn-left ():", "delta": 103.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 168.0, "y": 432.0, "w": 981.0, "h": 79.0, "line_num": 4, "text": "while frent_ is_ alpar () ;", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 381.0, "y": 544.0, "w": 445.0, "h": 73.0, "line_num": 5, "text": "turn-right ()", "delta": 213.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 404.0, "y": 656.0, "w": 348.0, "h": 85.0, "line_num": 6, "text": "fill-row( )", "delta": 23.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 400.0, "y": 781.0, "w": 634.0, "h": 71.0, "line_num": 7, "text": "return _to_ home()", "delta": -4.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 405.0, "y": 904.0, "w": 364.0, "h": 71.0, "line_num": 8, "text": "Jumprow ()", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 169.0, "y": 1027.0, "w": 471.0, "h": 69.0, "line_num": 9, "text": "turn-right ()", "delta": -236.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 175.0, "y": 1147.0, "w": 362.0, "h": 84.0, "line_num": 10, "text": "fill-row ()", "delta": 6.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 172.0, "y": 1252.0, "w": 712.0, "h": 72.0, "line_num": 11, "text": "returnkte - home ()", "delta": -3.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 180.0, "y": 1366.0, "w": 880.0, "h": 85.0, "line_num": 12, "text": "while front- is- Elcar ()", "delta": 8.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 423.0, "y": 1493.0, "w": 234.0, "h": 62.0, "line_num": 13, "text": "meve()", "delta": 243.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 109.0, "y": 1605.0, "w": 584.0, "h": 90.0, "line_num": 14, "text": "def fill-row() ;", "delta": -314.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 167.0, "y": 1725.0, "w": 894.0, "h": 85.0, "line_num": 15, "text": "while front- is clear()", "delta": 58.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 352.0, "y": 1847.0, "w": 525.0, "h": 81.0, "line_num": 16, "text": "put - beeper()", "delta": 185.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 366.0, "y": 1975.0, "w": 269.0, "h": 62.0, "line_num": 17, "text": "move ()", "delta": 14.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 164.0, "y": 2093.0, "w": 451.0, "h": 84.0, "line_num": 18, "text": "put-beeper ()", "delta": -202.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 59, "prompting_method": "cot-test5", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    turn_left()\n    while front_is_clear():\n        turn_right()\n        fill_row()\n        return_to_home()\n        jump_row()\n    turn_right()\n    fill_row()\n    return_to_home()\n    while front_is_clear():\n        move()\n\ndef fill_row():\n    while front_is_clear():\n        put_beeper()\n        move()\n    put_beeper()\n", "lm_post_processed_edit_distance": 0}, {"image_id": 20, "image_height": 2287, "image_width": 1620, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 75.0, "y": 69.0, "w": 1425.0, "h": 81.0, "line_num": 1, "text": "from karel . stamfordkarel import *"}, {"x": 66.0, "y": 189.0, "w": 424.0, "h": 83.0, "line_num": 2, "text": "def mais ():"}, {"x": 169.0, "y": 313.0, "w": 449.0, "h": 79.0, "line_num": 3, "text": "turn-left ():"}, {"x": 168.0, "y": 432.0, "w": 981.0, "h": 79.0, "line_num": 4, "text": "while frent_ is_ alpar () ;"}, {"x": 381.0, "y": 544.0, "w": 445.0, "h": 73.0, "line_num": 5, "text": "turn-right ()"}, {"x": 404.0, "y": 656.0, "w": 348.0, "h": 85.0, "line_num": 6, "text": "fill-row( )"}, {"x": 400.0, "y": 781.0, "w": 634.0, "h": 71.0, "line_num": 7, "text": "return _to_ home()"}, {"x": 405.0, "y": 904.0, "w": 364.0, "h": 71.0, "line_num": 8, "text": "Jumprow ()"}, {"x": 169.0, "y": 1027.0, "w": 471.0, "h": 69.0, "line_num": 9, "text": "turn-right ()"}, {"x": 175.0, "y": 1147.0, "w": 362.0, "h": 84.0, "line_num": 10, "text": "fill-row ()"}, {"x": 172.0, "y": 1252.0, "w": 712.0, "h": 72.0, "line_num": 11, "text": "returnkte - home ()"}, {"x": 180.0, "y": 1366.0, "w": 880.0, "h": 85.0, "line_num": 12, "text": "while front- is- Elcar ()"}, {"x": 423.0, "y": 1493.0, "w": 234.0, "h": 62.0, "line_num": 13, "text": "meve()"}, {"x": 109.0, "y": 1605.0, "w": 584.0, "h": 90.0, "line_num": 14, "text": "def fill-row() ;"}, {"x": 167.0, "y": 1725.0, "w": 894.0, "h": 85.0, "line_num": 15, "text": "while front- is clear()"}, {"x": 352.0, "y": 1847.0, "w": 525.0, "h": 81.0, "line_num": 16, "text": "put - beeper()"}, {"x": 366.0, "y": 1975.0, "w": 269.0, "h": 62.0, "line_num": 17, "text": "move ()"}, {"x": 164.0, "y": 2093.0, "w": 451.0, "h": 84.0, "line_num": 18, "text": "put-beeper ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "from karel . stamfordkarel import *\ndef mais ():\n    turn-left ():\n    while frent_ is_ alpar () ;\n        turn-right ()\n        fill-row( )\n        return _to_ home()\n        Jumprow ()\n    turn-right ()\n    fill-row ()\n    returnkte - home ()\n    while front- is- Elcar ()\n        meve()\ndef fill-row() ;\n    while front- is clear()\n        put - beeper()\n        move ()\n    put-beeper ()\n", "ir_algo_output_indented_lines": [{"x": 75.0, "y": 69.0, "w": 1425.0, "h": 81.0, "line_num": 1, "text": "from karel . stamfordkarel import *", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 66.0, "y": 189.0, "w": 424.0, "h": 83.0, "line_num": 2, "text": "def mais ():", "delta": -9.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 169.0, "y": 313.0, "w": 449.0, "h": 79.0, "line_num": 3, "text": "turn-left ():", "delta": 103.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 168.0, "y": 432.0, "w": 981.0, "h": 79.0, "line_num": 4, "text": "while frent_ is_ alpar () ;", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 381.0, "y": 544.0, "w": 445.0, "h": 73.0, "line_num": 5, "text": "turn-right ()", "delta": 213.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 404.0, "y": 656.0, "w": 348.0, "h": 85.0, "line_num": 6, "text": "fill-row( )", "delta": 23.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 400.0, "y": 781.0, "w": 634.0, "h": 71.0, "line_num": 7, "text": "return _to_ home()", "delta": -4.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 405.0, "y": 904.0, "w": 364.0, "h": 71.0, "line_num": 8, "text": "Jumprow ()", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 169.0, "y": 1027.0, "w": 471.0, "h": 69.0, "line_num": 9, "text": "turn-right ()", "delta": -236.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 175.0, "y": 1147.0, "w": 362.0, "h": 84.0, "line_num": 10, "text": "fill-row ()", "delta": 6.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 172.0, "y": 1252.0, "w": 712.0, "h": 72.0, "line_num": 11, "text": "returnkte - home ()", "delta": -3.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 180.0, "y": 1366.0, "w": 880.0, "h": 85.0, "line_num": 12, "text": "while front- is- Elcar ()", "delta": 8.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 423.0, "y": 1493.0, "w": 234.0, "h": 62.0, "line_num": 13, "text": "meve()", "delta": 243.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 109.0, "y": 1605.0, "w": 584.0, "h": 90.0, "line_num": 14, "text": "def fill-row() ;", "delta": -314.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 167.0, "y": 1725.0, "w": 894.0, "h": 85.0, "line_num": 15, "text": "while front- is clear()", "delta": 58.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 352.0, "y": 1847.0, "w": 525.0, "h": 81.0, "line_num": 16, "text": "put - beeper()", "delta": 185.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 366.0, "y": 1975.0, "w": 269.0, "h": 62.0, "line_num": 17, "text": "move ()", "delta": 14.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 164.0, "y": 2093.0, "w": 451.0, "h": 84.0, "line_num": 18, "text": "put-beeper ()", "delta": -202.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 59, "prompting_method": "simple-test2", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    turn_left()\n    while front_is_clear():\n        turn_right()\n        fill_row()\n        return_to_home()\n        jump_row()\n    turn_right()\n    fill_row()\n    return_to_home()\n    while front_is_clear():\n        move()\n\ndef fill_row():\n    while front_is_clear():\n        put_beeper()\n        move()\n    put_beeper()\n", "lm_post_processed_edit_distance": 0}, {"image_id": 20, "image_height": 2287, "image_width": 1620, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 75.0, "y": 69.0, "w": 1425.0, "h": 81.0, "line_num": 1, "text": "from karel . stamfordkarel import *"}, {"x": 66.0, "y": 189.0, "w": 424.0, "h": 83.0, "line_num": 2, "text": "def mais ():"}, {"x": 169.0, "y": 313.0, "w": 449.0, "h": 79.0, "line_num": 3, "text": "turn-left ():"}, {"x": 168.0, "y": 432.0, "w": 981.0, "h": 79.0, "line_num": 4, "text": "while frent_ is_ alpar () ;"}, {"x": 381.0, "y": 544.0, "w": 445.0, "h": 73.0, "line_num": 5, "text": "turn-right ()"}, {"x": 404.0, "y": 656.0, "w": 348.0, "h": 85.0, "line_num": 6, "text": "fill-row( )"}, {"x": 400.0, "y": 781.0, "w": 634.0, "h": 71.0, "line_num": 7, "text": "return _to_ home()"}, {"x": 405.0, "y": 904.0, "w": 364.0, "h": 71.0, "line_num": 8, "text": "Jumprow ()"}, {"x": 169.0, "y": 1027.0, "w": 471.0, "h": 69.0, "line_num": 9, "text": "turn-right ()"}, {"x": 175.0, "y": 1147.0, "w": 362.0, "h": 84.0, "line_num": 10, "text": "fill-row ()"}, {"x": 172.0, "y": 1252.0, "w": 712.0, "h": 72.0, "line_num": 11, "text": "returnkte - home ()"}, {"x": 180.0, "y": 1366.0, "w": 880.0, "h": 85.0, "line_num": 12, "text": "while front- is- Elcar ()"}, {"x": 423.0, "y": 1493.0, "w": 234.0, "h": 62.0, "line_num": 13, "text": "meve()"}, {"x": 109.0, "y": 1605.0, "w": 584.0, "h": 90.0, "line_num": 14, "text": "def fill-row() ;"}, {"x": 167.0, "y": 1725.0, "w": 894.0, "h": 85.0, "line_num": 15, "text": "while front- is clear()"}, {"x": 352.0, "y": 1847.0, "w": 525.0, "h": 81.0, "line_num": 16, "text": "put - beeper()"}, {"x": 366.0, "y": 1975.0, "w": 269.0, "h": 62.0, "line_num": 17, "text": "move ()"}, {"x": 164.0, "y": 2093.0, "w": 451.0, "h": 84.0, "line_num": 18, "text": "put-beeper ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "from karel . stamfordkarel import *\ndef mais ():\n    turn-left ():\n    while frent_ is_ alpar () ;\n        turn-right ()\n        fill-row( )\n        return _to_ home()\n        Jumprow ()\n    turn-right ()\n    fill-row ()\n    returnkte - home ()\n    while front- is- Elcar ()\n        meve()\ndef fill-row() ;\n    while front- is clear()\n        put - beeper()\n        move ()\n    put-beeper ()\n", "ir_algo_output_indented_lines": [{"x": 75.0, "y": 69.0, "w": 1425.0, "h": 81.0, "line_num": 1, "text": "from karel . stamfordkarel import *", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 66.0, "y": 189.0, "w": 424.0, "h": 83.0, "line_num": 2, "text": "def mais ():", "delta": -9.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 169.0, "y": 313.0, "w": 449.0, "h": 79.0, "line_num": 3, "text": "turn-left ():", "delta": 103.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 168.0, "y": 432.0, "w": 981.0, "h": 79.0, "line_num": 4, "text": "while frent_ is_ alpar () ;", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 381.0, "y": 544.0, "w": 445.0, "h": 73.0, "line_num": 5, "text": "turn-right ()", "delta": 213.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 404.0, "y": 656.0, "w": 348.0, "h": 85.0, "line_num": 6, "text": "fill-row( )", "delta": 23.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 400.0, "y": 781.0, "w": 634.0, "h": 71.0, "line_num": 7, "text": "return _to_ home()", "delta": -4.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 405.0, "y": 904.0, "w": 364.0, "h": 71.0, "line_num": 8, "text": "Jumprow ()", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 169.0, "y": 1027.0, "w": 471.0, "h": 69.0, "line_num": 9, "text": "turn-right ()", "delta": -236.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 175.0, "y": 1147.0, "w": 362.0, "h": 84.0, "line_num": 10, "text": "fill-row ()", "delta": 6.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 172.0, "y": 1252.0, "w": 712.0, "h": 72.0, "line_num": 11, "text": "returnkte - home ()", "delta": -3.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 180.0, "y": 1366.0, "w": 880.0, "h": 85.0, "line_num": 12, "text": "while front- is- Elcar ()", "delta": 8.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 423.0, "y": 1493.0, "w": 234.0, "h": 62.0, "line_num": 13, "text": "meve()", "delta": 243.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 109.0, "y": 1605.0, "w": 584.0, "h": 90.0, "line_num": 14, "text": "def fill-row() ;", "delta": -314.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 167.0, "y": 1725.0, "w": 894.0, "h": 85.0, "line_num": 15, "text": "while front- is clear()", "delta": 58.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 352.0, "y": 1847.0, "w": 525.0, "h": 81.0, "line_num": 16, "text": "put - beeper()", "delta": 185.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 366.0, "y": 1975.0, "w": 269.0, "h": 62.0, "line_num": 17, "text": "move ()", "delta": 14.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 164.0, "y": 2093.0, "w": 451.0, "h": 84.0, "line_num": 18, "text": "put-beeper ()", "delta": -202.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 59, "prompting_method": "simple-test3", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    turn_left()\n    while front_is_clear():\n        turn_right()\n        fill_row()\n        return_to_home()\n        jump_row()\n    turn_right()\n    fill_row()\n    return_to_home()\n    while front_is_clear():\n        move()\n\ndef fill_row():\n    while front_is_clear():\n        put_beeper()\n        move()\n    put_beeper()\n", "lm_post_processed_edit_distance": 0}, {"image_id": 22, "image_height": 2165, "image_width": 2795, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 34.0, "y": 130.0, "w": 2681.0, "h": 102.0, "line_num": 1, "text": "#karel needs to move to the bottom of the next noch to como"}, {"x": 52.0, "y": 248.0, "w": 1434.0, "h": 73.0, "line_num": 2, "text": "Hence building the next column."}, {"x": 46.0, "y": 348.0, "w": 1439.0, "h": 88.0, "line_num": 3, "text": "# Precondition: Karel is facing east"}, {"x": 26.0, "y": 450.0, "w": 2522.0, "h": 101.0, "line_num": 4, "text": "# post-condition: Karel is facing east at the next column site."}, {"x": 58.0, "y": 682.0, "w": 1436.0, "h": 105.0, "line_num": 5, "text": "def move_to_next_arch botton () ;"}, {"x": 271.0, "y": 802.0, "w": 855.0, "h": 104.0, "line_num": 6, "text": "if front is clear ():"}, {"x": 417.0, "y": 925.0, "w": 831.0, "h": 86.0, "line_num": 7, "text": "for i in range (4) :"}, {"x": 573.0, "y": 1042.0, "w": 341.0, "h": 76.0, "line_num": 8, "text": "move ( )"}, {"x": 52.0, "y": 1251.0, "w": 850.0, "h": 87.0, "line_num": 9, "text": "def turn around ():"}, {"x": 250.0, "y": 1370.0, "w": 504.0, "h": 84.0, "line_num": 10, "text": "turn left ( )"}, {"x": 267.0, "y": 1474.0, "w": 532.0, "h": 99.0, "line_num": 11, "text": "turn_left ()"}, {"x": 32.0, "y": 1719.0, "w": 453.0, "h": 102.0, "line_num": 12, "text": "if __ name."}, {"x": 1025.0, "y": 1762.0, "w": 205.0, "h": 52.0, "line_num": 13, "text": "main"}, {"x": 186.0, "y": 1843.0, "w": 342.0, "h": 71.0, "line_num": 14, "text": "main ()"}], "ir_algo_name": "none", "ir_algo_output_code": "#karel needs to move to the bottom of the next noch to como\nHence building the next column.\n# Precondition: Karel is facing east\n# post-condition: Karel is facing east at the next column site.\ndef move_to_next_arch botton () ;\nif front is clear ():\nfor i in range (4) :\nmove ( )\ndef turn around ():\nturn left ( )\nturn_left ()\nif __ name.\nmain\nmain ()", "ir_algo_output_edit_distance": 91, "prompting_method": "none", "lm_post_processed_code": "#karel needs to move to the bottom of the next noch to como\nHence building the next column.\n# Precondition: Karel is facing east\n# post-condition: Karel is facing east at the next column site.\ndef move_to_next_arch botton () ;\nif front is clear ():\nfor i in range (4) :\nmove ( )\ndef turn around ():\nturn left ( )\nturn_left ()\nif __ name.\nmain\nmain ()", "lm_post_processed_edit_distance": 91}, {"image_id": 22, "image_height": 2165, "image_width": 2795, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 34.0, "y": 130.0, "w": 2681.0, "h": 102.0, "line_num": 1, "text": "#karel needs to move to the bottom of the next noch to como"}, {"x": 52.0, "y": 248.0, "w": 1434.0, "h": 73.0, "line_num": 2, "text": "Hence building the next column."}, {"x": 46.0, "y": 348.0, "w": 1439.0, "h": 88.0, "line_num": 3, "text": "# Precondition: Karel is facing east"}, {"x": 26.0, "y": 450.0, "w": 2522.0, "h": 101.0, "line_num": 4, "text": "# post-condition: Karel is facing east at the next column site."}, {"x": 58.0, "y": 682.0, "w": 1436.0, "h": 105.0, "line_num": 5, "text": "def move_to_next_arch botton () ;"}, {"x": 271.0, "y": 802.0, "w": 855.0, "h": 104.0, "line_num": 6, "text": "if front is clear ():"}, {"x": 417.0, "y": 925.0, "w": 831.0, "h": 86.0, "line_num": 7, "text": "for i in range (4) :"}, {"x": 573.0, "y": 1042.0, "w": 341.0, "h": 76.0, "line_num": 8, "text": "move ( )"}, {"x": 52.0, "y": 1251.0, "w": 850.0, "h": 87.0, "line_num": 9, "text": "def turn around ():"}, {"x": 250.0, "y": 1370.0, "w": 504.0, "h": 84.0, "line_num": 10, "text": "turn left ( )"}, {"x": 267.0, "y": 1474.0, "w": 532.0, "h": 99.0, "line_num": 11, "text": "turn_left ()"}, {"x": 32.0, "y": 1719.0, "w": 453.0, "h": 102.0, "line_num": 12, "text": "if __ name."}, {"x": 1025.0, "y": 1762.0, "w": 205.0, "h": 52.0, "line_num": 13, "text": "main"}, {"x": 186.0, "y": 1843.0, "w": 342.0, "h": 71.0, "line_num": 14, "text": "main ()"}], "ir_algo_name": "none", "ir_algo_output_code": "#karel needs to move to the bottom of the next noch to como\nHence building the next column.\n# Precondition: Karel is facing east\n# post-condition: Karel is facing east at the next column site.\ndef move_to_next_arch botton () ;\nif front is clear ():\nfor i in range (4) :\nmove ( )\ndef turn around ():\nturn left ( )\nturn_left ()\nif __ name.\nmain\nmain ()", "ir_algo_output_edit_distance": 91, "prompting_method": "cot-test1", "lm_post_processed_code": "#karel needs to move to the bottom of the next notch to come\n#Hence building the next column.\n# Precondition: Karel is facing east\n# post-condition: Karel is facing east at the next column site.\n\ndef move_to_next_notch_bottom() :\nif front_is_clear():\nfor i in range (4) :\nmove ( )\n\ndef turn_around():\nturn_left ( )\nturn_left ()\n\nif __name__ == \"__main__\":\nmain ()\n", "lm_post_processed_edit_distance": 73}, {"image_id": 22, "image_height": 2165, "image_width": 2795, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 34.0, "y": 130.0, "w": 2681.0, "h": 102.0, "line_num": 1, "text": "#karel needs to move to the bottom of the next noch to como"}, {"x": 52.0, "y": 248.0, "w": 1434.0, "h": 73.0, "line_num": 2, "text": "Hence building the next column."}, {"x": 46.0, "y": 348.0, "w": 1439.0, "h": 88.0, "line_num": 3, "text": "# Precondition: Karel is facing east"}, {"x": 26.0, "y": 450.0, "w": 2522.0, "h": 101.0, "line_num": 4, "text": "# post-condition: Karel is facing east at the next column site."}, {"x": 58.0, "y": 682.0, "w": 1436.0, "h": 105.0, "line_num": 5, "text": "def move_to_next_arch botton () ;"}, {"x": 271.0, "y": 802.0, "w": 855.0, "h": 104.0, "line_num": 6, "text": "if front is clear ():"}, {"x": 417.0, "y": 925.0, "w": 831.0, "h": 86.0, "line_num": 7, "text": "for i in range (4) :"}, {"x": 573.0, "y": 1042.0, "w": 341.0, "h": 76.0, "line_num": 8, "text": "move ( )"}, {"x": 52.0, "y": 1251.0, "w": 850.0, "h": 87.0, "line_num": 9, "text": "def turn around ():"}, {"x": 250.0, "y": 1370.0, "w": 504.0, "h": 84.0, "line_num": 10, "text": "turn left ( )"}, {"x": 267.0, "y": 1474.0, "w": 532.0, "h": 99.0, "line_num": 11, "text": "turn_left ()"}, {"x": 32.0, "y": 1719.0, "w": 453.0, "h": 102.0, "line_num": 12, "text": "if __ name."}, {"x": 1025.0, "y": 1762.0, "w": 205.0, "h": 52.0, "line_num": 13, "text": "main"}, {"x": 186.0, "y": 1843.0, "w": 342.0, "h": 71.0, "line_num": 14, "text": "main ()"}], "ir_algo_name": "none", "ir_algo_output_code": "#karel needs to move to the bottom of the next noch to como\nHence building the next column.\n# Precondition: Karel is facing east\n# post-condition: Karel is facing east at the next column site.\ndef move_to_next_arch botton () ;\nif front is clear ():\nfor i in range (4) :\nmove ( )\ndef turn around ():\nturn left ( )\nturn_left ()\nif __ name.\nmain\nmain ()", "ir_algo_output_edit_distance": 91, "prompting_method": "cot-test5", "lm_post_processed_code": "#karel needs to move to the bottom of the next notch to come\n#Hence building the next column.\n# Precondition: Karel is facing east\n# post-condition: Karel is facing east at the next column site.\n\ndef move_to_next_notch_bottom():\nif front_is_clear():\nfor i in range (4) :\nmove ()\n\ndef turn_around():\nturn_left ()\nturn_left ()\n\nif __name__ == \"__main__\":\nmain ()\n", "lm_post_processed_edit_distance": 70}, {"image_id": 22, "image_height": 2165, "image_width": 2795, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 34.0, "y": 130.0, "w": 2681.0, "h": 102.0, "line_num": 1, "text": "#karel needs to move to the bottom of the next noch to como"}, {"x": 52.0, "y": 248.0, "w": 1434.0, "h": 73.0, "line_num": 2, "text": "Hence building the next column."}, {"x": 46.0, "y": 348.0, "w": 1439.0, "h": 88.0, "line_num": 3, "text": "# Precondition: Karel is facing east"}, {"x": 26.0, "y": 450.0, "w": 2522.0, "h": 101.0, "line_num": 4, "text": "# post-condition: Karel is facing east at the next column site."}, {"x": 58.0, "y": 682.0, "w": 1436.0, "h": 105.0, "line_num": 5, "text": "def move_to_next_arch botton () ;"}, {"x": 271.0, "y": 802.0, "w": 855.0, "h": 104.0, "line_num": 6, "text": "if front is clear ():"}, {"x": 417.0, "y": 925.0, "w": 831.0, "h": 86.0, "line_num": 7, "text": "for i in range (4) :"}, {"x": 573.0, "y": 1042.0, "w": 341.0, "h": 76.0, "line_num": 8, "text": "move ( )"}, {"x": 52.0, "y": 1251.0, "w": 850.0, "h": 87.0, "line_num": 9, "text": "def turn around ():"}, {"x": 250.0, "y": 1370.0, "w": 504.0, "h": 84.0, "line_num": 10, "text": "turn left ( )"}, {"x": 267.0, "y": 1474.0, "w": 532.0, "h": 99.0, "line_num": 11, "text": "turn_left ()"}, {"x": 32.0, "y": 1719.0, "w": 453.0, "h": 102.0, "line_num": 12, "text": "if __ name."}, {"x": 1025.0, "y": 1762.0, "w": 205.0, "h": 52.0, "line_num": 13, "text": "main"}, {"x": 186.0, "y": 1843.0, "w": 342.0, "h": 71.0, "line_num": 14, "text": "main ()"}], "ir_algo_name": "none", "ir_algo_output_code": "#karel needs to move to the bottom of the next noch to como\nHence building the next column.\n# Precondition: Karel is facing east\n# post-condition: Karel is facing east at the next column site.\ndef move_to_next_arch botton () ;\nif front is clear ():\nfor i in range (4) :\nmove ( )\ndef turn around ():\nturn left ( )\nturn_left ()\nif __ name.\nmain\nmain ()", "ir_algo_output_edit_distance": 91, "prompting_method": "simple-test2", "lm_post_processed_code": "# Karel needs to move to the bottom of the next notch to come\n# Hence building the next column.\n# Precondition: Karel is facing east\n# post-condition: Karel is facing east at the next column site.\n\ndef move_to_next_notch_bottom():\n    if front_is_clear():\n        for i in range(4):\n            move()\n\ndef turn_around():\n    turn_left()\n    turn_left()\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 31}, {"image_id": 22, "image_height": 2165, "image_width": 2795, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 34.0, "y": 130.0, "w": 2681.0, "h": 102.0, "line_num": 1, "text": "#karel needs to move to the bottom of the next noch to como"}, {"x": 52.0, "y": 248.0, "w": 1434.0, "h": 73.0, "line_num": 2, "text": "Hence building the next column."}, {"x": 46.0, "y": 348.0, "w": 1439.0, "h": 88.0, "line_num": 3, "text": "# Precondition: Karel is facing east"}, {"x": 26.0, "y": 450.0, "w": 2522.0, "h": 101.0, "line_num": 4, "text": "# post-condition: Karel is facing east at the next column site."}, {"x": 58.0, "y": 682.0, "w": 1436.0, "h": 105.0, "line_num": 5, "text": "def move_to_next_arch botton () ;"}, {"x": 271.0, "y": 802.0, "w": 855.0, "h": 104.0, "line_num": 6, "text": "if front is clear ():"}, {"x": 417.0, "y": 925.0, "w": 831.0, "h": 86.0, "line_num": 7, "text": "for i in range (4) :"}, {"x": 573.0, "y": 1042.0, "w": 341.0, "h": 76.0, "line_num": 8, "text": "move ( )"}, {"x": 52.0, "y": 1251.0, "w": 850.0, "h": 87.0, "line_num": 9, "text": "def turn around ():"}, {"x": 250.0, "y": 1370.0, "w": 504.0, "h": 84.0, "line_num": 10, "text": "turn left ( )"}, {"x": 267.0, "y": 1474.0, "w": 532.0, "h": 99.0, "line_num": 11, "text": "turn_left ()"}, {"x": 32.0, "y": 1719.0, "w": 453.0, "h": 102.0, "line_num": 12, "text": "if __ name."}, {"x": 1025.0, "y": 1762.0, "w": 205.0, "h": 52.0, "line_num": 13, "text": "main"}, {"x": 186.0, "y": 1843.0, "w": 342.0, "h": 71.0, "line_num": 14, "text": "main ()"}], "ir_algo_name": "none", "ir_algo_output_code": "#karel needs to move to the bottom of the next noch to como\nHence building the next column.\n# Precondition: Karel is facing east\n# post-condition: Karel is facing east at the next column site.\ndef move_to_next_arch botton () ;\nif front is clear ():\nfor i in range (4) :\nmove ( )\ndef turn around ():\nturn left ( )\nturn_left ()\nif __ name.\nmain\nmain ()", "ir_algo_output_edit_distance": 91, "prompting_method": "simple-test3", "lm_post_processed_code": "# Karel needs to move to the bottom of the next notch to come\n# Hence building the next column.\n# Precondition: Karel is facing east\n# post-condition: Karel is facing east at the next column site.\n\ndef move_to_next_notch_bottom():\n    if front_is_clear():\n        for i in range(4):\n            move()\n\ndef turn_around():\n    turn_left()\n    turn_left()\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 31}, {"image_id": 22, "image_height": 2165, "image_width": 2795, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 34.0, "y": 130.0, "w": 2681.0, "h": 102.0, "line_num": 1, "text": "#karel needs to move to the bottom of the next noch to como"}, {"x": 52.0, "y": 248.0, "w": 1434.0, "h": 73.0, "line_num": 2, "text": "Hence building the next column."}, {"x": 46.0, "y": 348.0, "w": 1439.0, "h": 88.0, "line_num": 3, "text": "# Precondition: Karel is facing east"}, {"x": 26.0, "y": 450.0, "w": 2522.0, "h": 101.0, "line_num": 4, "text": "# post-condition: Karel is facing east at the next column site."}, {"x": 58.0, "y": 682.0, "w": 1436.0, "h": 105.0, "line_num": 5, "text": "def move_to_next_arch botton () ;"}, {"x": 271.0, "y": 802.0, "w": 855.0, "h": 104.0, "line_num": 6, "text": "if front is clear ():"}, {"x": 417.0, "y": 925.0, "w": 831.0, "h": 86.0, "line_num": 7, "text": "for i in range (4) :"}, {"x": 573.0, "y": 1042.0, "w": 341.0, "h": 76.0, "line_num": 8, "text": "move ( )"}, {"x": 52.0, "y": 1251.0, "w": 850.0, "h": 87.0, "line_num": 9, "text": "def turn around ():"}, {"x": 250.0, "y": 1370.0, "w": 504.0, "h": 84.0, "line_num": 10, "text": "turn left ( )"}, {"x": 267.0, "y": 1474.0, "w": 532.0, "h": 99.0, "line_num": 11, "text": "turn_left ()"}, {"x": 32.0, "y": 1719.0, "w": 453.0, "h": 102.0, "line_num": 12, "text": "if __ name."}, {"x": 1025.0, "y": 1762.0, "w": 205.0, "h": 52.0, "line_num": 13, "text": "main"}, {"x": 186.0, "y": 1843.0, "w": 342.0, "h": 71.0, "line_num": 14, "text": "main ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 131.78571428571428, "ir_algo_output_code": "#karel needs to move to the bottom of the next noch to como\nHence building the next column.\n# Precondition: Karel is facing east\n# post-condition: Karel is facing east at the next column site.\ndef move_to_next_arch botton () ;\n    if front is clear ():\n        for i in range (4) :\n            move ( )\ndef turn around ():\n    turn left ( )\n    turn_left ()\nif __ name.\n                main\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 34.0, "y": 130.0, "w": 2681.0, "h": 102.0, "line_num": 1, "text": "#karel needs to move to the bottom of the next noch to como", "cluster_label": 0, "indentation": 0}, {"x": 52.0, "y": 248.0, "w": 1434.0, "h": 73.0, "line_num": 2, "text": "Hence building the next column.", "cluster_label": 0, "indentation": 0}, {"x": 46.0, "y": 348.0, "w": 1439.0, "h": 88.0, "line_num": 3, "text": "# Precondition: Karel is facing east", "cluster_label": 0, "indentation": 0}, {"x": 26.0, "y": 450.0, "w": 2522.0, "h": 101.0, "line_num": 4, "text": "# post-condition: Karel is facing east at the next column site.", "cluster_label": 0, "indentation": 0}, {"x": 58.0, "y": 682.0, "w": 1436.0, "h": 105.0, "line_num": 5, "text": "def move_to_next_arch botton () ;", "cluster_label": 0, "indentation": 0}, {"x": 271.0, "y": 802.0, "w": 855.0, "h": 104.0, "line_num": 6, "text": "if front is clear ():", "cluster_label": 1, "indentation": 1}, {"x": 417.0, "y": 925.0, "w": 831.0, "h": 86.0, "line_num": 7, "text": "for i in range (4) :", "cluster_label": 4, "indentation": 2}, {"x": 573.0, "y": 1042.0, "w": 341.0, "h": 76.0, "line_num": 8, "text": "move ( )", "cluster_label": 3, "indentation": 3}, {"x": 52.0, "y": 1251.0, "w": 850.0, "h": 87.0, "line_num": 9, "text": "def turn around ():", "cluster_label": 0, "indentation": 0}, {"x": 250.0, "y": 1370.0, "w": 504.0, "h": 84.0, "line_num": 10, "text": "turn left ( )", "cluster_label": 1, "indentation": 1}, {"x": 267.0, "y": 1474.0, "w": 532.0, "h": 99.0, "line_num": 11, "text": "turn_left ()", "cluster_label": 1, "indentation": 1}, {"x": 32.0, "y": 1719.0, "w": 453.0, "h": 102.0, "line_num": 12, "text": "if __ name.", "cluster_label": 0, "indentation": 0}, {"x": 1025.0, "y": 1762.0, "w": 205.0, "h": 52.0, "line_num": 13, "text": "main", "cluster_label": 2, "indentation": 4}, {"x": 186.0, "y": 1843.0, "w": 342.0, "h": 71.0, "line_num": 14, "text": "main ()", "cluster_label": 1, "indentation": 1}], "ir_algo_output_edit_distance": 62, "prompting_method": "none", "lm_post_processed_code": "#karel needs to move to the bottom of the next noch to como\nHence building the next column.\n# Precondition: Karel is facing east\n# post-condition: Karel is facing east at the next column site.\ndef move_to_next_arch botton () ;\n    if front is clear ():\n        for i in range (4) :\n            move ( )\ndef turn around ():\n    turn left ( )\n    turn_left ()\nif __ name.\n                main\n    main ()\n", "lm_post_processed_edit_distance": 62}, {"image_id": 22, "image_height": 2165, "image_width": 2795, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 34.0, "y": 130.0, "w": 2681.0, "h": 102.0, "line_num": 1, "text": "#karel needs to move to the bottom of the next noch to como"}, {"x": 52.0, "y": 248.0, "w": 1434.0, "h": 73.0, "line_num": 2, "text": "Hence building the next column."}, {"x": 46.0, "y": 348.0, "w": 1439.0, "h": 88.0, "line_num": 3, "text": "# Precondition: Karel is facing east"}, {"x": 26.0, "y": 450.0, "w": 2522.0, "h": 101.0, "line_num": 4, "text": "# post-condition: Karel is facing east at the next column site."}, {"x": 58.0, "y": 682.0, "w": 1436.0, "h": 105.0, "line_num": 5, "text": "def move_to_next_arch botton () ;"}, {"x": 271.0, "y": 802.0, "w": 855.0, "h": 104.0, "line_num": 6, "text": "if front is clear ():"}, {"x": 417.0, "y": 925.0, "w": 831.0, "h": 86.0, "line_num": 7, "text": "for i in range (4) :"}, {"x": 573.0, "y": 1042.0, "w": 341.0, "h": 76.0, "line_num": 8, "text": "move ( )"}, {"x": 52.0, "y": 1251.0, "w": 850.0, "h": 87.0, "line_num": 9, "text": "def turn around ():"}, {"x": 250.0, "y": 1370.0, "w": 504.0, "h": 84.0, "line_num": 10, "text": "turn left ( )"}, {"x": 267.0, "y": 1474.0, "w": 532.0, "h": 99.0, "line_num": 11, "text": "turn_left ()"}, {"x": 32.0, "y": 1719.0, "w": 453.0, "h": 102.0, "line_num": 12, "text": "if __ name."}, {"x": 1025.0, "y": 1762.0, "w": 205.0, "h": 52.0, "line_num": 13, "text": "main"}, {"x": 186.0, "y": 1843.0, "w": 342.0, "h": 71.0, "line_num": 14, "text": "main ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 131.78571428571428, "ir_algo_output_code": "#karel needs to move to the bottom of the next noch to como\nHence building the next column.\n# Precondition: Karel is facing east\n# post-condition: Karel is facing east at the next column site.\ndef move_to_next_arch botton () ;\n    if front is clear ():\n        for i in range (4) :\n            move ( )\ndef turn around ():\n    turn left ( )\n    turn_left ()\nif __ name.\n                main\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 34.0, "y": 130.0, "w": 2681.0, "h": 102.0, "line_num": 1, "text": "#karel needs to move to the bottom of the next noch to como", "cluster_label": 0, "indentation": 0}, {"x": 52.0, "y": 248.0, "w": 1434.0, "h": 73.0, "line_num": 2, "text": "Hence building the next column.", "cluster_label": 0, "indentation": 0}, {"x": 46.0, "y": 348.0, "w": 1439.0, "h": 88.0, "line_num": 3, "text": "# Precondition: Karel is facing east", "cluster_label": 0, "indentation": 0}, {"x": 26.0, "y": 450.0, "w": 2522.0, "h": 101.0, "line_num": 4, "text": "# post-condition: Karel is facing east at the next column site.", "cluster_label": 0, "indentation": 0}, {"x": 58.0, "y": 682.0, "w": 1436.0, "h": 105.0, "line_num": 5, "text": "def move_to_next_arch botton () ;", "cluster_label": 0, "indentation": 0}, {"x": 271.0, "y": 802.0, "w": 855.0, "h": 104.0, "line_num": 6, "text": "if front is clear ():", "cluster_label": 1, "indentation": 1}, {"x": 417.0, "y": 925.0, "w": 831.0, "h": 86.0, "line_num": 7, "text": "for i in range (4) :", "cluster_label": 4, "indentation": 2}, {"x": 573.0, "y": 1042.0, "w": 341.0, "h": 76.0, "line_num": 8, "text": "move ( )", "cluster_label": 3, "indentation": 3}, {"x": 52.0, "y": 1251.0, "w": 850.0, "h": 87.0, "line_num": 9, "text": "def turn around ():", "cluster_label": 0, "indentation": 0}, {"x": 250.0, "y": 1370.0, "w": 504.0, "h": 84.0, "line_num": 10, "text": "turn left ( )", "cluster_label": 1, "indentation": 1}, {"x": 267.0, "y": 1474.0, "w": 532.0, "h": 99.0, "line_num": 11, "text": "turn_left ()", "cluster_label": 1, "indentation": 1}, {"x": 32.0, "y": 1719.0, "w": 453.0, "h": 102.0, "line_num": 12, "text": "if __ name.", "cluster_label": 0, "indentation": 0}, {"x": 1025.0, "y": 1762.0, "w": 205.0, "h": 52.0, "line_num": 13, "text": "main", "cluster_label": 2, "indentation": 4}, {"x": 186.0, "y": 1843.0, "w": 342.0, "h": 71.0, "line_num": 14, "text": "main ()", "cluster_label": 1, "indentation": 1}], "ir_algo_output_edit_distance": 62, "prompting_method": "cot-test1", "lm_post_processed_code": "#karel needs to move to the bottom of the next notch to come\n#Hence building the next column.\n# Precondition: Karel is facing east\n# post-condition: Karel is facing east at the next column site.\n\ndef move_to_next_notch_bottom():\n    if front_is_clear():\n        for i in range(4):\n            move()\n\ndef turn_around():\n    turn_left()\n    turn_left()\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 28}, {"image_id": 22, "image_height": 2165, "image_width": 2795, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 34.0, "y": 130.0, "w": 2681.0, "h": 102.0, "line_num": 1, "text": "#karel needs to move to the bottom of the next noch to como"}, {"x": 52.0, "y": 248.0, "w": 1434.0, "h": 73.0, "line_num": 2, "text": "Hence building the next column."}, {"x": 46.0, "y": 348.0, "w": 1439.0, "h": 88.0, "line_num": 3, "text": "# Precondition: Karel is facing east"}, {"x": 26.0, "y": 450.0, "w": 2522.0, "h": 101.0, "line_num": 4, "text": "# post-condition: Karel is facing east at the next column site."}, {"x": 58.0, "y": 682.0, "w": 1436.0, "h": 105.0, "line_num": 5, "text": "def move_to_next_arch botton () ;"}, {"x": 271.0, "y": 802.0, "w": 855.0, "h": 104.0, "line_num": 6, "text": "if front is clear ():"}, {"x": 417.0, "y": 925.0, "w": 831.0, "h": 86.0, "line_num": 7, "text": "for i in range (4) :"}, {"x": 573.0, "y": 1042.0, "w": 341.0, "h": 76.0, "line_num": 8, "text": "move ( )"}, {"x": 52.0, "y": 1251.0, "w": 850.0, "h": 87.0, "line_num": 9, "text": "def turn around ():"}, {"x": 250.0, "y": 1370.0, "w": 504.0, "h": 84.0, "line_num": 10, "text": "turn left ( )"}, {"x": 267.0, "y": 1474.0, "w": 532.0, "h": 99.0, "line_num": 11, "text": "turn_left ()"}, {"x": 32.0, "y": 1719.0, "w": 453.0, "h": 102.0, "line_num": 12, "text": "if __ name."}, {"x": 1025.0, "y": 1762.0, "w": 205.0, "h": 52.0, "line_num": 13, "text": "main"}, {"x": 186.0, "y": 1843.0, "w": 342.0, "h": 71.0, "line_num": 14, "text": "main ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 131.78571428571428, "ir_algo_output_code": "#karel needs to move to the bottom of the next noch to como\nHence building the next column.\n# Precondition: Karel is facing east\n# post-condition: Karel is facing east at the next column site.\ndef move_to_next_arch botton () ;\n    if front is clear ():\n        for i in range (4) :\n            move ( )\ndef turn around ():\n    turn left ( )\n    turn_left ()\nif __ name.\n                main\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 34.0, "y": 130.0, "w": 2681.0, "h": 102.0, "line_num": 1, "text": "#karel needs to move to the bottom of the next noch to como", "cluster_label": 0, "indentation": 0}, {"x": 52.0, "y": 248.0, "w": 1434.0, "h": 73.0, "line_num": 2, "text": "Hence building the next column.", "cluster_label": 0, "indentation": 0}, {"x": 46.0, "y": 348.0, "w": 1439.0, "h": 88.0, "line_num": 3, "text": "# Precondition: Karel is facing east", "cluster_label": 0, "indentation": 0}, {"x": 26.0, "y": 450.0, "w": 2522.0, "h": 101.0, "line_num": 4, "text": "# post-condition: Karel is facing east at the next column site.", "cluster_label": 0, "indentation": 0}, {"x": 58.0, "y": 682.0, "w": 1436.0, "h": 105.0, "line_num": 5, "text": "def move_to_next_arch botton () ;", "cluster_label": 0, "indentation": 0}, {"x": 271.0, "y": 802.0, "w": 855.0, "h": 104.0, "line_num": 6, "text": "if front is clear ():", "cluster_label": 1, "indentation": 1}, {"x": 417.0, "y": 925.0, "w": 831.0, "h": 86.0, "line_num": 7, "text": "for i in range (4) :", "cluster_label": 4, "indentation": 2}, {"x": 573.0, "y": 1042.0, "w": 341.0, "h": 76.0, "line_num": 8, "text": "move ( )", "cluster_label": 3, "indentation": 3}, {"x": 52.0, "y": 1251.0, "w": 850.0, "h": 87.0, "line_num": 9, "text": "def turn around ():", "cluster_label": 0, "indentation": 0}, {"x": 250.0, "y": 1370.0, "w": 504.0, "h": 84.0, "line_num": 10, "text": "turn left ( )", "cluster_label": 1, "indentation": 1}, {"x": 267.0, "y": 1474.0, "w": 532.0, "h": 99.0, "line_num": 11, "text": "turn_left ()", "cluster_label": 1, "indentation": 1}, {"x": 32.0, "y": 1719.0, "w": 453.0, "h": 102.0, "line_num": 12, "text": "if __ name.", "cluster_label": 0, "indentation": 0}, {"x": 1025.0, "y": 1762.0, "w": 205.0, "h": 52.0, "line_num": 13, "text": "main", "cluster_label": 2, "indentation": 4}, {"x": 186.0, "y": 1843.0, "w": 342.0, "h": 71.0, "line_num": 14, "text": "main ()", "cluster_label": 1, "indentation": 1}], "ir_algo_output_edit_distance": 62, "prompting_method": "cot-test5", "lm_post_processed_code": "#karel needs to move to the bottom of the next notch to come\n#Hence building the next column.\n# Precondition: Karel is facing east\n# post-condition: Karel is facing east at the next column site.\n\ndef move_to_next_notch_bottom():\n    if front_is_clear():\n        for i in range(4):\n            move()\n\ndef turn_around():\n    turn_left()\n    turn_left()\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 28}, {"image_id": 22, "image_height": 2165, "image_width": 2795, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 34.0, "y": 130.0, "w": 2681.0, "h": 102.0, "line_num": 1, "text": "#karel needs to move to the bottom of the next noch to como"}, {"x": 52.0, "y": 248.0, "w": 1434.0, "h": 73.0, "line_num": 2, "text": "Hence building the next column."}, {"x": 46.0, "y": 348.0, "w": 1439.0, "h": 88.0, "line_num": 3, "text": "# Precondition: Karel is facing east"}, {"x": 26.0, "y": 450.0, "w": 2522.0, "h": 101.0, "line_num": 4, "text": "# post-condition: Karel is facing east at the next column site."}, {"x": 58.0, "y": 682.0, "w": 1436.0, "h": 105.0, "line_num": 5, "text": "def move_to_next_arch botton () ;"}, {"x": 271.0, "y": 802.0, "w": 855.0, "h": 104.0, "line_num": 6, "text": "if front is clear ():"}, {"x": 417.0, "y": 925.0, "w": 831.0, "h": 86.0, "line_num": 7, "text": "for i in range (4) :"}, {"x": 573.0, "y": 1042.0, "w": 341.0, "h": 76.0, "line_num": 8, "text": "move ( )"}, {"x": 52.0, "y": 1251.0, "w": 850.0, "h": 87.0, "line_num": 9, "text": "def turn around ():"}, {"x": 250.0, "y": 1370.0, "w": 504.0, "h": 84.0, "line_num": 10, "text": "turn left ( )"}, {"x": 267.0, "y": 1474.0, "w": 532.0, "h": 99.0, "line_num": 11, "text": "turn_left ()"}, {"x": 32.0, "y": 1719.0, "w": 453.0, "h": 102.0, "line_num": 12, "text": "if __ name."}, {"x": 1025.0, "y": 1762.0, "w": 205.0, "h": 52.0, "line_num": 13, "text": "main"}, {"x": 186.0, "y": 1843.0, "w": 342.0, "h": 71.0, "line_num": 14, "text": "main ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 131.78571428571428, "ir_algo_output_code": "#karel needs to move to the bottom of the next noch to como\nHence building the next column.\n# Precondition: Karel is facing east\n# post-condition: Karel is facing east at the next column site.\ndef move_to_next_arch botton () ;\n    if front is clear ():\n        for i in range (4) :\n            move ( )\ndef turn around ():\n    turn left ( )\n    turn_left ()\nif __ name.\n                main\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 34.0, "y": 130.0, "w": 2681.0, "h": 102.0, "line_num": 1, "text": "#karel needs to move to the bottom of the next noch to como", "cluster_label": 0, "indentation": 0}, {"x": 52.0, "y": 248.0, "w": 1434.0, "h": 73.0, "line_num": 2, "text": "Hence building the next column.", "cluster_label": 0, "indentation": 0}, {"x": 46.0, "y": 348.0, "w": 1439.0, "h": 88.0, "line_num": 3, "text": "# Precondition: Karel is facing east", "cluster_label": 0, "indentation": 0}, {"x": 26.0, "y": 450.0, "w": 2522.0, "h": 101.0, "line_num": 4, "text": "# post-condition: Karel is facing east at the next column site.", "cluster_label": 0, "indentation": 0}, {"x": 58.0, "y": 682.0, "w": 1436.0, "h": 105.0, "line_num": 5, "text": "def move_to_next_arch botton () ;", "cluster_label": 0, "indentation": 0}, {"x": 271.0, "y": 802.0, "w": 855.0, "h": 104.0, "line_num": 6, "text": "if front is clear ():", "cluster_label": 1, "indentation": 1}, {"x": 417.0, "y": 925.0, "w": 831.0, "h": 86.0, "line_num": 7, "text": "for i in range (4) :", "cluster_label": 4, "indentation": 2}, {"x": 573.0, "y": 1042.0, "w": 341.0, "h": 76.0, "line_num": 8, "text": "move ( )", "cluster_label": 3, "indentation": 3}, {"x": 52.0, "y": 1251.0, "w": 850.0, "h": 87.0, "line_num": 9, "text": "def turn around ():", "cluster_label": 0, "indentation": 0}, {"x": 250.0, "y": 1370.0, "w": 504.0, "h": 84.0, "line_num": 10, "text": "turn left ( )", "cluster_label": 1, "indentation": 1}, {"x": 267.0, "y": 1474.0, "w": 532.0, "h": 99.0, "line_num": 11, "text": "turn_left ()", "cluster_label": 1, "indentation": 1}, {"x": 32.0, "y": 1719.0, "w": 453.0, "h": 102.0, "line_num": 12, "text": "if __ name.", "cluster_label": 0, "indentation": 0}, {"x": 1025.0, "y": 1762.0, "w": 205.0, "h": 52.0, "line_num": 13, "text": "main", "cluster_label": 2, "indentation": 4}, {"x": 186.0, "y": 1843.0, "w": 342.0, "h": 71.0, "line_num": 14, "text": "main ()", "cluster_label": 1, "indentation": 1}], "ir_algo_output_edit_distance": 62, "prompting_method": "simple-test2", "lm_post_processed_code": "# Karel needs to move to the bottom of the next notch to come\n# Hence building the next column.\n# Precondition: Karel is facing east\n# post-condition: Karel is facing east at the next column site.\n\ndef move_to_next_notch_bottom():\n    if front_is_clear():\n        for i in range(4):\n            move()\n\ndef turn_around():\n    turn_left()\n    turn_left()\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 31}, {"image_id": 22, "image_height": 2165, "image_width": 2795, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 34.0, "y": 130.0, "w": 2681.0, "h": 102.0, "line_num": 1, "text": "#karel needs to move to the bottom of the next noch to como"}, {"x": 52.0, "y": 248.0, "w": 1434.0, "h": 73.0, "line_num": 2, "text": "Hence building the next column."}, {"x": 46.0, "y": 348.0, "w": 1439.0, "h": 88.0, "line_num": 3, "text": "# Precondition: Karel is facing east"}, {"x": 26.0, "y": 450.0, "w": 2522.0, "h": 101.0, "line_num": 4, "text": "# post-condition: Karel is facing east at the next column site."}, {"x": 58.0, "y": 682.0, "w": 1436.0, "h": 105.0, "line_num": 5, "text": "def move_to_next_arch botton () ;"}, {"x": 271.0, "y": 802.0, "w": 855.0, "h": 104.0, "line_num": 6, "text": "if front is clear ():"}, {"x": 417.0, "y": 925.0, "w": 831.0, "h": 86.0, "line_num": 7, "text": "for i in range (4) :"}, {"x": 573.0, "y": 1042.0, "w": 341.0, "h": 76.0, "line_num": 8, "text": "move ( )"}, {"x": 52.0, "y": 1251.0, "w": 850.0, "h": 87.0, "line_num": 9, "text": "def turn around ():"}, {"x": 250.0, "y": 1370.0, "w": 504.0, "h": 84.0, "line_num": 10, "text": "turn left ( )"}, {"x": 267.0, "y": 1474.0, "w": 532.0, "h": 99.0, "line_num": 11, "text": "turn_left ()"}, {"x": 32.0, "y": 1719.0, "w": 453.0, "h": 102.0, "line_num": 12, "text": "if __ name."}, {"x": 1025.0, "y": 1762.0, "w": 205.0, "h": 52.0, "line_num": 13, "text": "main"}, {"x": 186.0, "y": 1843.0, "w": 342.0, "h": 71.0, "line_num": 14, "text": "main ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 131.78571428571428, "ir_algo_output_code": "#karel needs to move to the bottom of the next noch to como\nHence building the next column.\n# Precondition: Karel is facing east\n# post-condition: Karel is facing east at the next column site.\ndef move_to_next_arch botton () ;\n    if front is clear ():\n        for i in range (4) :\n            move ( )\ndef turn around ():\n    turn left ( )\n    turn_left ()\nif __ name.\n                main\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 34.0, "y": 130.0, "w": 2681.0, "h": 102.0, "line_num": 1, "text": "#karel needs to move to the bottom of the next noch to como", "cluster_label": 0, "indentation": 0}, {"x": 52.0, "y": 248.0, "w": 1434.0, "h": 73.0, "line_num": 2, "text": "Hence building the next column.", "cluster_label": 0, "indentation": 0}, {"x": 46.0, "y": 348.0, "w": 1439.0, "h": 88.0, "line_num": 3, "text": "# Precondition: Karel is facing east", "cluster_label": 0, "indentation": 0}, {"x": 26.0, "y": 450.0, "w": 2522.0, "h": 101.0, "line_num": 4, "text": "# post-condition: Karel is facing east at the next column site.", "cluster_label": 0, "indentation": 0}, {"x": 58.0, "y": 682.0, "w": 1436.0, "h": 105.0, "line_num": 5, "text": "def move_to_next_arch botton () ;", "cluster_label": 0, "indentation": 0}, {"x": 271.0, "y": 802.0, "w": 855.0, "h": 104.0, "line_num": 6, "text": "if front is clear ():", "cluster_label": 1, "indentation": 1}, {"x": 417.0, "y": 925.0, "w": 831.0, "h": 86.0, "line_num": 7, "text": "for i in range (4) :", "cluster_label": 4, "indentation": 2}, {"x": 573.0, "y": 1042.0, "w": 341.0, "h": 76.0, "line_num": 8, "text": "move ( )", "cluster_label": 3, "indentation": 3}, {"x": 52.0, "y": 1251.0, "w": 850.0, "h": 87.0, "line_num": 9, "text": "def turn around ():", "cluster_label": 0, "indentation": 0}, {"x": 250.0, "y": 1370.0, "w": 504.0, "h": 84.0, "line_num": 10, "text": "turn left ( )", "cluster_label": 1, "indentation": 1}, {"x": 267.0, "y": 1474.0, "w": 532.0, "h": 99.0, "line_num": 11, "text": "turn_left ()", "cluster_label": 1, "indentation": 1}, {"x": 32.0, "y": 1719.0, "w": 453.0, "h": 102.0, "line_num": 12, "text": "if __ name.", "cluster_label": 0, "indentation": 0}, {"x": 1025.0, "y": 1762.0, "w": 205.0, "h": 52.0, "line_num": 13, "text": "main", "cluster_label": 2, "indentation": 4}, {"x": 186.0, "y": 1843.0, "w": 342.0, "h": 71.0, "line_num": 14, "text": "main ()", "cluster_label": 1, "indentation": 1}], "ir_algo_output_edit_distance": 62, "prompting_method": "simple-test3", "lm_post_processed_code": "# Karel needs to move to the bottom of the next notch to come\n# Hence building the next column.\n# Precondition: Karel is facing east\n# post-condition: Karel is facing east at the next column site.\n\ndef move_to_next_notch_bottom():\n    if front_is_clear():\n        for i in range(4):\n            move()\n\ndef turn_around():\n    turn_left()\n    turn_left()\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 31}, {"image_id": 22, "image_height": 2165, "image_width": 2795, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 34.0, "y": 130.0, "w": 2681.0, "h": 102.0, "line_num": 1, "text": "#karel needs to move to the bottom of the next noch to como"}, {"x": 52.0, "y": 248.0, "w": 1434.0, "h": 73.0, "line_num": 2, "text": "Hence building the next column."}, {"x": 46.0, "y": 348.0, "w": 1439.0, "h": 88.0, "line_num": 3, "text": "# Precondition: Karel is facing east"}, {"x": 26.0, "y": 450.0, "w": 2522.0, "h": 101.0, "line_num": 4, "text": "# post-condition: Karel is facing east at the next column site."}, {"x": 58.0, "y": 682.0, "w": 1436.0, "h": 105.0, "line_num": 5, "text": "def move_to_next_arch botton () ;"}, {"x": 271.0, "y": 802.0, "w": 855.0, "h": 104.0, "line_num": 6, "text": "if front is clear ():"}, {"x": 417.0, "y": 925.0, "w": 831.0, "h": 86.0, "line_num": 7, "text": "for i in range (4) :"}, {"x": 573.0, "y": 1042.0, "w": 341.0, "h": 76.0, "line_num": 8, "text": "move ( )"}, {"x": 52.0, "y": 1251.0, "w": 850.0, "h": 87.0, "line_num": 9, "text": "def turn around ():"}, {"x": 250.0, "y": 1370.0, "w": 504.0, "h": 84.0, "line_num": 10, "text": "turn left ( )"}, {"x": 267.0, "y": 1474.0, "w": 532.0, "h": 99.0, "line_num": 11, "text": "turn_left ()"}, {"x": 32.0, "y": 1719.0, "w": 453.0, "h": 102.0, "line_num": 12, "text": "if __ name."}, {"x": 1025.0, "y": 1762.0, "w": 205.0, "h": 52.0, "line_num": 13, "text": "main"}, {"x": 186.0, "y": 1843.0, "w": 342.0, "h": 71.0, "line_num": 14, "text": "main ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "#karel needs to move to the bottom of the next noch to como\nHence building the next column.\n# Precondition: Karel is facing east\n# post-condition: Karel is facing east at the next column site.\ndef move_to_next_arch botton () ;\n    if front is clear ():\n        for i in range (4) :\n            move ( )\ndef turn around ():\n    turn left ( )\n    turn_left ()\nif __ name.\n    main\nmain ()\n", "ir_algo_output_indented_lines": [{"x": 34.0, "y": 130.0, "w": 2681.0, "h": 102.0, "line_num": 1, "text": "#karel needs to move to the bottom of the next noch to como", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 52.0, "y": 248.0, "w": 1434.0, "h": 73.0, "line_num": 2, "text": "Hence building the next column.", "delta": 18.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 46.0, "y": 348.0, "w": 1439.0, "h": 88.0, "line_num": 3, "text": "# Precondition: Karel is facing east", "delta": -6.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 26.0, "y": 450.0, "w": 2522.0, "h": 101.0, "line_num": 4, "text": "# post-condition: Karel is facing east at the next column site.", "delta": -20.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 58.0, "y": 682.0, "w": 1436.0, "h": 105.0, "line_num": 5, "text": "def move_to_next_arch botton () ;", "delta": 32.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 271.0, "y": 802.0, "w": 855.0, "h": 104.0, "line_num": 6, "text": "if front is clear ():", "delta": 213.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 417.0, "y": 925.0, "w": 831.0, "h": 86.0, "line_num": 7, "text": "for i in range (4) :", "delta": 146.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 573.0, "y": 1042.0, "w": 341.0, "h": 76.0, "line_num": 8, "text": "move ( )", "delta": 156.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 52.0, "y": 1251.0, "w": 850.0, "h": 87.0, "line_num": 9, "text": "def turn around ():", "delta": -521.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 250.0, "y": 1370.0, "w": 504.0, "h": 84.0, "line_num": 10, "text": "turn left ( )", "delta": 198.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 267.0, "y": 1474.0, "w": 532.0, "h": 99.0, "line_num": 11, "text": "turn_left ()", "delta": 17.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 32.0, "y": 1719.0, "w": 453.0, "h": 102.0, "line_num": 12, "text": "if __ name.", "delta": -235.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1025.0, "y": 1762.0, "w": 205.0, "h": 52.0, "line_num": 13, "text": "main", "delta": 993.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 186.0, "y": 1843.0, "w": 342.0, "h": 71.0, "line_num": 14, "text": "main ()", "delta": -839.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 57, "prompting_method": "none", "lm_post_processed_code": "#karel needs to move to the bottom of the next noch to como\nHence building the next column.\n# Precondition: Karel is facing east\n# post-condition: Karel is facing east at the next column site.\ndef move_to_next_arch botton () ;\n    if front is clear ():\n        for i in range (4) :\n            move ( )\ndef turn around ():\n    turn left ( )\n    turn_left ()\nif __ name.\n    main\nmain ()\n", "lm_post_processed_edit_distance": 57}, {"image_id": 22, "image_height": 2165, "image_width": 2795, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 34.0, "y": 130.0, "w": 2681.0, "h": 102.0, "line_num": 1, "text": "#karel needs to move to the bottom of the next noch to como"}, {"x": 52.0, "y": 248.0, "w": 1434.0, "h": 73.0, "line_num": 2, "text": "Hence building the next column."}, {"x": 46.0, "y": 348.0, "w": 1439.0, "h": 88.0, "line_num": 3, "text": "# Precondition: Karel is facing east"}, {"x": 26.0, "y": 450.0, "w": 2522.0, "h": 101.0, "line_num": 4, "text": "# post-condition: Karel is facing east at the next column site."}, {"x": 58.0, "y": 682.0, "w": 1436.0, "h": 105.0, "line_num": 5, "text": "def move_to_next_arch botton () ;"}, {"x": 271.0, "y": 802.0, "w": 855.0, "h": 104.0, "line_num": 6, "text": "if front is clear ():"}, {"x": 417.0, "y": 925.0, "w": 831.0, "h": 86.0, "line_num": 7, "text": "for i in range (4) :"}, {"x": 573.0, "y": 1042.0, "w": 341.0, "h": 76.0, "line_num": 8, "text": "move ( )"}, {"x": 52.0, "y": 1251.0, "w": 850.0, "h": 87.0, "line_num": 9, "text": "def turn around ():"}, {"x": 250.0, "y": 1370.0, "w": 504.0, "h": 84.0, "line_num": 10, "text": "turn left ( )"}, {"x": 267.0, "y": 1474.0, "w": 532.0, "h": 99.0, "line_num": 11, "text": "turn_left ()"}, {"x": 32.0, "y": 1719.0, "w": 453.0, "h": 102.0, "line_num": 12, "text": "if __ name."}, {"x": 1025.0, "y": 1762.0, "w": 205.0, "h": 52.0, "line_num": 13, "text": "main"}, {"x": 186.0, "y": 1843.0, "w": 342.0, "h": 71.0, "line_num": 14, "text": "main ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "#karel needs to move to the bottom of the next noch to como\nHence building the next column.\n# Precondition: Karel is facing east\n# post-condition: Karel is facing east at the next column site.\ndef move_to_next_arch botton () ;\n    if front is clear ():\n        for i in range (4) :\n            move ( )\ndef turn around ():\n    turn left ( )\n    turn_left ()\nif __ name.\n    main\nmain ()\n", "ir_algo_output_indented_lines": [{"x": 34.0, "y": 130.0, "w": 2681.0, "h": 102.0, "line_num": 1, "text": "#karel needs to move to the bottom of the next noch to como", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 52.0, "y": 248.0, "w": 1434.0, "h": 73.0, "line_num": 2, "text": "Hence building the next column.", "delta": 18.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 46.0, "y": 348.0, "w": 1439.0, "h": 88.0, "line_num": 3, "text": "# Precondition: Karel is facing east", "delta": -6.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 26.0, "y": 450.0, "w": 2522.0, "h": 101.0, "line_num": 4, "text": "# post-condition: Karel is facing east at the next column site.", "delta": -20.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 58.0, "y": 682.0, "w": 1436.0, "h": 105.0, "line_num": 5, "text": "def move_to_next_arch botton () ;", "delta": 32.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 271.0, "y": 802.0, "w": 855.0, "h": 104.0, "line_num": 6, "text": "if front is clear ():", "delta": 213.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 417.0, "y": 925.0, "w": 831.0, "h": 86.0, "line_num": 7, "text": "for i in range (4) :", "delta": 146.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 573.0, "y": 1042.0, "w": 341.0, "h": 76.0, "line_num": 8, "text": "move ( )", "delta": 156.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 52.0, "y": 1251.0, "w": 850.0, "h": 87.0, "line_num": 9, "text": "def turn around ():", "delta": -521.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 250.0, "y": 1370.0, "w": 504.0, "h": 84.0, "line_num": 10, "text": "turn left ( )", "delta": 198.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 267.0, "y": 1474.0, "w": 532.0, "h": 99.0, "line_num": 11, "text": "turn_left ()", "delta": 17.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 32.0, "y": 1719.0, "w": 453.0, "h": 102.0, "line_num": 12, "text": "if __ name.", "delta": -235.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1025.0, "y": 1762.0, "w": 205.0, "h": 52.0, "line_num": 13, "text": "main", "delta": 993.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 186.0, "y": 1843.0, "w": 342.0, "h": 71.0, "line_num": 14, "text": "main ()", "delta": -839.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 57, "prompting_method": "cot-test1", "lm_post_processed_code": "#karel needs to move to the bottom of the next notch to come\n#Hence building the next column.\n# Precondition: Karel is facing east\n# post-condition: Karel is facing east at the next column site.\n\ndef move_to_next_notch_bottom():\nif front_is_clear():\nfor i in range(4):\nmove()\n\ndef turn_around():\nturn_left()\nturn_left()\n\nif __name__ == \"__main__\":\nmain()\n", "lm_post_processed_edit_distance": 64}, {"image_id": 22, "image_height": 2165, "image_width": 2795, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 34.0, "y": 130.0, "w": 2681.0, "h": 102.0, "line_num": 1, "text": "#karel needs to move to the bottom of the next noch to como"}, {"x": 52.0, "y": 248.0, "w": 1434.0, "h": 73.0, "line_num": 2, "text": "Hence building the next column."}, {"x": 46.0, "y": 348.0, "w": 1439.0, "h": 88.0, "line_num": 3, "text": "# Precondition: Karel is facing east"}, {"x": 26.0, "y": 450.0, "w": 2522.0, "h": 101.0, "line_num": 4, "text": "# post-condition: Karel is facing east at the next column site."}, {"x": 58.0, "y": 682.0, "w": 1436.0, "h": 105.0, "line_num": 5, "text": "def move_to_next_arch botton () ;"}, {"x": 271.0, "y": 802.0, "w": 855.0, "h": 104.0, "line_num": 6, "text": "if front is clear ():"}, {"x": 417.0, "y": 925.0, "w": 831.0, "h": 86.0, "line_num": 7, "text": "for i in range (4) :"}, {"x": 573.0, "y": 1042.0, "w": 341.0, "h": 76.0, "line_num": 8, "text": "move ( )"}, {"x": 52.0, "y": 1251.0, "w": 850.0, "h": 87.0, "line_num": 9, "text": "def turn around ():"}, {"x": 250.0, "y": 1370.0, "w": 504.0, "h": 84.0, "line_num": 10, "text": "turn left ( )"}, {"x": 267.0, "y": 1474.0, "w": 532.0, "h": 99.0, "line_num": 11, "text": "turn_left ()"}, {"x": 32.0, "y": 1719.0, "w": 453.0, "h": 102.0, "line_num": 12, "text": "if __ name."}, {"x": 1025.0, "y": 1762.0, "w": 205.0, "h": 52.0, "line_num": 13, "text": "main"}, {"x": 186.0, "y": 1843.0, "w": 342.0, "h": 71.0, "line_num": 14, "text": "main ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "#karel needs to move to the bottom of the next noch to como\nHence building the next column.\n# Precondition: Karel is facing east\n# post-condition: Karel is facing east at the next column site.\ndef move_to_next_arch botton () ;\n    if front is clear ():\n        for i in range (4) :\n            move ( )\ndef turn around ():\n    turn left ( )\n    turn_left ()\nif __ name.\n    main\nmain ()\n", "ir_algo_output_indented_lines": [{"x": 34.0, "y": 130.0, "w": 2681.0, "h": 102.0, "line_num": 1, "text": "#karel needs to move to the bottom of the next noch to como", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 52.0, "y": 248.0, "w": 1434.0, "h": 73.0, "line_num": 2, "text": "Hence building the next column.", "delta": 18.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 46.0, "y": 348.0, "w": 1439.0, "h": 88.0, "line_num": 3, "text": "# Precondition: Karel is facing east", "delta": -6.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 26.0, "y": 450.0, "w": 2522.0, "h": 101.0, "line_num": 4, "text": "# post-condition: Karel is facing east at the next column site.", "delta": -20.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 58.0, "y": 682.0, "w": 1436.0, "h": 105.0, "line_num": 5, "text": "def move_to_next_arch botton () ;", "delta": 32.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 271.0, "y": 802.0, "w": 855.0, "h": 104.0, "line_num": 6, "text": "if front is clear ():", "delta": 213.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 417.0, "y": 925.0, "w": 831.0, "h": 86.0, "line_num": 7, "text": "for i in range (4) :", "delta": 146.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 573.0, "y": 1042.0, "w": 341.0, "h": 76.0, "line_num": 8, "text": "move ( )", "delta": 156.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 52.0, "y": 1251.0, "w": 850.0, "h": 87.0, "line_num": 9, "text": "def turn around ():", "delta": -521.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 250.0, "y": 1370.0, "w": 504.0, "h": 84.0, "line_num": 10, "text": "turn left ( )", "delta": 198.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 267.0, "y": 1474.0, "w": 532.0, "h": 99.0, "line_num": 11, "text": "turn_left ()", "delta": 17.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 32.0, "y": 1719.0, "w": 453.0, "h": 102.0, "line_num": 12, "text": "if __ name.", "delta": -235.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1025.0, "y": 1762.0, "w": 205.0, "h": 52.0, "line_num": 13, "text": "main", "delta": 993.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 186.0, "y": 1843.0, "w": 342.0, "h": 71.0, "line_num": 14, "text": "main ()", "delta": -839.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 57, "prompting_method": "cot-test5", "lm_post_processed_code": "#karel needs to move to the bottom of the next notch to come\n#Hence building the next column.\n# Precondition: Karel is facing east\n# post-condition: Karel is facing east at the next column site.\n\ndef move_to_next_notch_bottom():\n    if front_is_clear():\n        for i in range(4):\n            move()\n\ndef turn_around():\n    turn_left()\n    turn_left()\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 28}, {"image_id": 22, "image_height": 2165, "image_width": 2795, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 34.0, "y": 130.0, "w": 2681.0, "h": 102.0, "line_num": 1, "text": "#karel needs to move to the bottom of the next noch to como"}, {"x": 52.0, "y": 248.0, "w": 1434.0, "h": 73.0, "line_num": 2, "text": "Hence building the next column."}, {"x": 46.0, "y": 348.0, "w": 1439.0, "h": 88.0, "line_num": 3, "text": "# Precondition: Karel is facing east"}, {"x": 26.0, "y": 450.0, "w": 2522.0, "h": 101.0, "line_num": 4, "text": "# post-condition: Karel is facing east at the next column site."}, {"x": 58.0, "y": 682.0, "w": 1436.0, "h": 105.0, "line_num": 5, "text": "def move_to_next_arch botton () ;"}, {"x": 271.0, "y": 802.0, "w": 855.0, "h": 104.0, "line_num": 6, "text": "if front is clear ():"}, {"x": 417.0, "y": 925.0, "w": 831.0, "h": 86.0, "line_num": 7, "text": "for i in range (4) :"}, {"x": 573.0, "y": 1042.0, "w": 341.0, "h": 76.0, "line_num": 8, "text": "move ( )"}, {"x": 52.0, "y": 1251.0, "w": 850.0, "h": 87.0, "line_num": 9, "text": "def turn around ():"}, {"x": 250.0, "y": 1370.0, "w": 504.0, "h": 84.0, "line_num": 10, "text": "turn left ( )"}, {"x": 267.0, "y": 1474.0, "w": 532.0, "h": 99.0, "line_num": 11, "text": "turn_left ()"}, {"x": 32.0, "y": 1719.0, "w": 453.0, "h": 102.0, "line_num": 12, "text": "if __ name."}, {"x": 1025.0, "y": 1762.0, "w": 205.0, "h": 52.0, "line_num": 13, "text": "main"}, {"x": 186.0, "y": 1843.0, "w": 342.0, "h": 71.0, "line_num": 14, "text": "main ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "#karel needs to move to the bottom of the next noch to como\nHence building the next column.\n# Precondition: Karel is facing east\n# post-condition: Karel is facing east at the next column site.\ndef move_to_next_arch botton () ;\n    if front is clear ():\n        for i in range (4) :\n            move ( )\ndef turn around ():\n    turn left ( )\n    turn_left ()\nif __ name.\n    main\nmain ()\n", "ir_algo_output_indented_lines": [{"x": 34.0, "y": 130.0, "w": 2681.0, "h": 102.0, "line_num": 1, "text": "#karel needs to move to the bottom of the next noch to como", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 52.0, "y": 248.0, "w": 1434.0, "h": 73.0, "line_num": 2, "text": "Hence building the next column.", "delta": 18.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 46.0, "y": 348.0, "w": 1439.0, "h": 88.0, "line_num": 3, "text": "# Precondition: Karel is facing east", "delta": -6.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 26.0, "y": 450.0, "w": 2522.0, "h": 101.0, "line_num": 4, "text": "# post-condition: Karel is facing east at the next column site.", "delta": -20.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 58.0, "y": 682.0, "w": 1436.0, "h": 105.0, "line_num": 5, "text": "def move_to_next_arch botton () ;", "delta": 32.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 271.0, "y": 802.0, "w": 855.0, "h": 104.0, "line_num": 6, "text": "if front is clear ():", "delta": 213.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 417.0, "y": 925.0, "w": 831.0, "h": 86.0, "line_num": 7, "text": "for i in range (4) :", "delta": 146.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 573.0, "y": 1042.0, "w": 341.0, "h": 76.0, "line_num": 8, "text": "move ( )", "delta": 156.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 52.0, "y": 1251.0, "w": 850.0, "h": 87.0, "line_num": 9, "text": "def turn around ():", "delta": -521.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 250.0, "y": 1370.0, "w": 504.0, "h": 84.0, "line_num": 10, "text": "turn left ( )", "delta": 198.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 267.0, "y": 1474.0, "w": 532.0, "h": 99.0, "line_num": 11, "text": "turn_left ()", "delta": 17.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 32.0, "y": 1719.0, "w": 453.0, "h": 102.0, "line_num": 12, "text": "if __ name.", "delta": -235.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1025.0, "y": 1762.0, "w": 205.0, "h": 52.0, "line_num": 13, "text": "main", "delta": 993.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 186.0, "y": 1843.0, "w": 342.0, "h": 71.0, "line_num": 14, "text": "main ()", "delta": -839.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 57, "prompting_method": "simple-test2", "lm_post_processed_code": "# Karel needs to move to the bottom of the next notch to come\n# Hence building the next column.\n# Precondition: Karel is facing east\n# post-condition: Karel is facing east at the next column site.\n\ndef move_to_next_notch_bottom():\n    if front_is_clear():\n        for i in range(4):\n            move()\n\ndef turn_around():\n    turn_left()\n    turn_left()\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 31}, {"image_id": 22, "image_height": 2165, "image_width": 2795, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 34.0, "y": 130.0, "w": 2681.0, "h": 102.0, "line_num": 1, "text": "#karel needs to move to the bottom of the next noch to como"}, {"x": 52.0, "y": 248.0, "w": 1434.0, "h": 73.0, "line_num": 2, "text": "Hence building the next column."}, {"x": 46.0, "y": 348.0, "w": 1439.0, "h": 88.0, "line_num": 3, "text": "# Precondition: Karel is facing east"}, {"x": 26.0, "y": 450.0, "w": 2522.0, "h": 101.0, "line_num": 4, "text": "# post-condition: Karel is facing east at the next column site."}, {"x": 58.0, "y": 682.0, "w": 1436.0, "h": 105.0, "line_num": 5, "text": "def move_to_next_arch botton () ;"}, {"x": 271.0, "y": 802.0, "w": 855.0, "h": 104.0, "line_num": 6, "text": "if front is clear ():"}, {"x": 417.0, "y": 925.0, "w": 831.0, "h": 86.0, "line_num": 7, "text": "for i in range (4) :"}, {"x": 573.0, "y": 1042.0, "w": 341.0, "h": 76.0, "line_num": 8, "text": "move ( )"}, {"x": 52.0, "y": 1251.0, "w": 850.0, "h": 87.0, "line_num": 9, "text": "def turn around ():"}, {"x": 250.0, "y": 1370.0, "w": 504.0, "h": 84.0, "line_num": 10, "text": "turn left ( )"}, {"x": 267.0, "y": 1474.0, "w": 532.0, "h": 99.0, "line_num": 11, "text": "turn_left ()"}, {"x": 32.0, "y": 1719.0, "w": 453.0, "h": 102.0, "line_num": 12, "text": "if __ name."}, {"x": 1025.0, "y": 1762.0, "w": 205.0, "h": 52.0, "line_num": 13, "text": "main"}, {"x": 186.0, "y": 1843.0, "w": 342.0, "h": 71.0, "line_num": 14, "text": "main ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "#karel needs to move to the bottom of the next noch to como\nHence building the next column.\n# Precondition: Karel is facing east\n# post-condition: Karel is facing east at the next column site.\ndef move_to_next_arch botton () ;\n    if front is clear ():\n        for i in range (4) :\n            move ( )\ndef turn around ():\n    turn left ( )\n    turn_left ()\nif __ name.\n    main\nmain ()\n", "ir_algo_output_indented_lines": [{"x": 34.0, "y": 130.0, "w": 2681.0, "h": 102.0, "line_num": 1, "text": "#karel needs to move to the bottom of the next noch to como", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 52.0, "y": 248.0, "w": 1434.0, "h": 73.0, "line_num": 2, "text": "Hence building the next column.", "delta": 18.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 46.0, "y": 348.0, "w": 1439.0, "h": 88.0, "line_num": 3, "text": "# Precondition: Karel is facing east", "delta": -6.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 26.0, "y": 450.0, "w": 2522.0, "h": 101.0, "line_num": 4, "text": "# post-condition: Karel is facing east at the next column site.", "delta": -20.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 58.0, "y": 682.0, "w": 1436.0, "h": 105.0, "line_num": 5, "text": "def move_to_next_arch botton () ;", "delta": 32.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 271.0, "y": 802.0, "w": 855.0, "h": 104.0, "line_num": 6, "text": "if front is clear ():", "delta": 213.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 417.0, "y": 925.0, "w": 831.0, "h": 86.0, "line_num": 7, "text": "for i in range (4) :", "delta": 146.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 573.0, "y": 1042.0, "w": 341.0, "h": 76.0, "line_num": 8, "text": "move ( )", "delta": 156.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 52.0, "y": 1251.0, "w": 850.0, "h": 87.0, "line_num": 9, "text": "def turn around ():", "delta": -521.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 250.0, "y": 1370.0, "w": 504.0, "h": 84.0, "line_num": 10, "text": "turn left ( )", "delta": 198.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 267.0, "y": 1474.0, "w": 532.0, "h": 99.0, "line_num": 11, "text": "turn_left ()", "delta": 17.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 32.0, "y": 1719.0, "w": 453.0, "h": 102.0, "line_num": 12, "text": "if __ name.", "delta": -235.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1025.0, "y": 1762.0, "w": 205.0, "h": 52.0, "line_num": 13, "text": "main", "delta": 993.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 186.0, "y": 1843.0, "w": 342.0, "h": 71.0, "line_num": 14, "text": "main ()", "delta": -839.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 57, "prompting_method": "simple-test3", "lm_post_processed_code": "# Karel needs to move to the bottom of the next notch to come\n# Hence building the next column.\n# Precondition: Karel is facing east\n# post-condition: Karel is facing east at the next column site.\n\ndef move_to_next_notch_bottom():\n    if front_is_clear():\n        for i in range(4):\n            move()\n\ndef turn_around():\n    turn_left()\n    turn_left()\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 31}, {"image_id": 23, "image_height": 4160, "image_width": 3120, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 497.0, "y": 307.0, "w": 1733.0, "h": 140.0, "line_num": 1, "text": "def find_Ligst_smallst (number):"}, {"x": 782.0, "y": 529.0, "w": 888.0, "h": 111.0, "line_num": 2, "text": "if not numbers:"}, {"x": 1091.0, "y": 682.0, "w": 795.0, "h": 102.0, "line_num": 3, "text": "Return none"}, {"x": 827.0, "y": 902.0, "w": 1653.0, "h": 124.0, "line_num": 4, "text": "Smallest= largest = number [0]"}, {"x": 762.0, "y": 1234.0, "w": 618.0, "h": 105.0, "line_num": 5, "text": "for num in"}, {"x": 1258.0, "y": 1181.0, "w": 805.0, "h": 123.0, "line_num": 6, "text": "in numbers :"}, {"x": 1110.0, "y": 1378.0, "w": 1095.0, "h": 149.0, "line_num": 7, "text": "if num < smallest:"}, {"x": 1486.0, "y": 1561.0, "w": 947.0, "h": 114.0, "line_num": 8, "text": "smallest = num"}, {"x": 1155.0, "y": 1697.0, "w": 1023.0, "h": 163.0, "line_num": 9, "text": "if num > Largest :"}, {"x": 1599.0, "y": 1911.0, "w": 907.0, "h": 114.0, "line_num": 10, "text": "Largest = num"}, {"x": 788.0, "y": 2143.0, "w": 1690.0, "h": 139.0, "line_num": 11, "text": "tieturin smallest, Largest"}, {"x": 420.0, "y": 2489.0, "w": 1104.0, "h": 146.0, "line_num": 12, "text": "# Example usage."}, {"x": 553.0, "y": 2699.0, "w": 2028.0, "h": 139.0, "line_num": 13, "text": "numbers = [1,2,3, 4,5,6,7,8,9]"}, {"x": 522.0, "y": 2933.0, "w": 2258.0, "h": 160.0, "line_num": 14, "text": "result = find_Ligst_smallst (numberis)"}, {"x": 555.0, "y": 3217.0, "w": 859.0, "h": 171.0, "line_num": 15, "text": "print (result)"}, {"x": 2100.0, "y": 3896.0, "w": 727.0, "h": 99.0, "line_num": 16, "text": "\u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c"}], "ir_algo_name": "none", "ir_algo_output_code": "def find_Ligst_smallst (number):\nif not numbers:\nReturn none\nSmallest= largest = number [0]\nfor num in\nin numbers :\nif num < smallest:\nsmallest = num\nif num > Largest :\nLargest = num\ntieturin smallest, Largest\n# Example usage.\nnumbers = [1,2,3, 4,5,6,7,8,9]\nresult = find_Ligst_smallst (numberis)\nprint (result)\n\u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c", "ir_algo_output_edit_distance": 121, "prompting_method": "none", "lm_post_processed_code": "def find_Ligst_smallst (number):\nif not numbers:\nReturn none\nSmallest= largest = number [0]\nfor num in\nin numbers :\nif num < smallest:\nsmallest = num\nif num > Largest :\nLargest = num\ntieturin smallest, Largest\n# Example usage.\nnumbers = [1,2,3, 4,5,6,7,8,9]\nresult = find_Ligst_smallst (numberis)\nprint (result)\n\u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c", "lm_post_processed_edit_distance": 121}, {"image_id": 23, "image_height": 4160, "image_width": 3120, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 497.0, "y": 307.0, "w": 1733.0, "h": 140.0, "line_num": 1, "text": "def find_Ligst_smallst (number):"}, {"x": 782.0, "y": 529.0, "w": 888.0, "h": 111.0, "line_num": 2, "text": "if not numbers:"}, {"x": 1091.0, "y": 682.0, "w": 795.0, "h": 102.0, "line_num": 3, "text": "Return none"}, {"x": 827.0, "y": 902.0, "w": 1653.0, "h": 124.0, "line_num": 4, "text": "Smallest= largest = number [0]"}, {"x": 762.0, "y": 1234.0, "w": 618.0, "h": 105.0, "line_num": 5, "text": "for num in"}, {"x": 1258.0, "y": 1181.0, "w": 805.0, "h": 123.0, "line_num": 6, "text": "in numbers :"}, {"x": 1110.0, "y": 1378.0, "w": 1095.0, "h": 149.0, "line_num": 7, "text": "if num < smallest:"}, {"x": 1486.0, "y": 1561.0, "w": 947.0, "h": 114.0, "line_num": 8, "text": "smallest = num"}, {"x": 1155.0, "y": 1697.0, "w": 1023.0, "h": 163.0, "line_num": 9, "text": "if num > Largest :"}, {"x": 1599.0, "y": 1911.0, "w": 907.0, "h": 114.0, "line_num": 10, "text": "Largest = num"}, {"x": 788.0, "y": 2143.0, "w": 1690.0, "h": 139.0, "line_num": 11, "text": "tieturin smallest, Largest"}, {"x": 420.0, "y": 2489.0, "w": 1104.0, "h": 146.0, "line_num": 12, "text": "# Example usage."}, {"x": 553.0, "y": 2699.0, "w": 2028.0, "h": 139.0, "line_num": 13, "text": "numbers = [1,2,3, 4,5,6,7,8,9]"}, {"x": 522.0, "y": 2933.0, "w": 2258.0, "h": 160.0, "line_num": 14, "text": "result = find_Ligst_smallst (numberis)"}, {"x": 555.0, "y": 3217.0, "w": 859.0, "h": 171.0, "line_num": 15, "text": "print (result)"}, {"x": 2100.0, "y": 3896.0, "w": 727.0, "h": 99.0, "line_num": 16, "text": "\u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c"}], "ir_algo_name": "none", "ir_algo_output_code": "def find_Ligst_smallst (number):\nif not numbers:\nReturn none\nSmallest= largest = number [0]\nfor num in\nin numbers :\nif num < smallest:\nsmallest = num\nif num > Largest :\nLargest = num\ntieturin smallest, Largest\n# Example usage.\nnumbers = [1,2,3, 4,5,6,7,8,9]\nresult = find_Ligst_smallst (numberis)\nprint (result)\n\u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c", "ir_algo_output_edit_distance": 121, "prompting_method": "cot-test1", "lm_post_processed_code": "def find_Largest_smallest(numbers):\nif not numbers:\nReturn None\nSmallest = largest = numbers[0]\nfor num in numbers:\nif num < Smallest:\nSmallest = num\nif num > largest:\nlargest = num\nreturn Smallest, largest\n# Example usage.\nnumbers = [1,2,3, 4,5,6,7,8,9]\nresult = find_Largest_smallest(numbers)\nprint(result)\n", "lm_post_processed_edit_distance": 89}, {"image_id": 23, "image_height": 4160, "image_width": 3120, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 497.0, "y": 307.0, "w": 1733.0, "h": 140.0, "line_num": 1, "text": "def find_Ligst_smallst (number):"}, {"x": 782.0, "y": 529.0, "w": 888.0, "h": 111.0, "line_num": 2, "text": "if not numbers:"}, {"x": 1091.0, "y": 682.0, "w": 795.0, "h": 102.0, "line_num": 3, "text": "Return none"}, {"x": 827.0, "y": 902.0, "w": 1653.0, "h": 124.0, "line_num": 4, "text": "Smallest= largest = number [0]"}, {"x": 762.0, "y": 1234.0, "w": 618.0, "h": 105.0, "line_num": 5, "text": "for num in"}, {"x": 1258.0, "y": 1181.0, "w": 805.0, "h": 123.0, "line_num": 6, "text": "in numbers :"}, {"x": 1110.0, "y": 1378.0, "w": 1095.0, "h": 149.0, "line_num": 7, "text": "if num < smallest:"}, {"x": 1486.0, "y": 1561.0, "w": 947.0, "h": 114.0, "line_num": 8, "text": "smallest = num"}, {"x": 1155.0, "y": 1697.0, "w": 1023.0, "h": 163.0, "line_num": 9, "text": "if num > Largest :"}, {"x": 1599.0, "y": 1911.0, "w": 907.0, "h": 114.0, "line_num": 10, "text": "Largest = num"}, {"x": 788.0, "y": 2143.0, "w": 1690.0, "h": 139.0, "line_num": 11, "text": "tieturin smallest, Largest"}, {"x": 420.0, "y": 2489.0, "w": 1104.0, "h": 146.0, "line_num": 12, "text": "# Example usage."}, {"x": 553.0, "y": 2699.0, "w": 2028.0, "h": 139.0, "line_num": 13, "text": "numbers = [1,2,3, 4,5,6,7,8,9]"}, {"x": 522.0, "y": 2933.0, "w": 2258.0, "h": 160.0, "line_num": 14, "text": "result = find_Ligst_smallst (numberis)"}, {"x": 555.0, "y": 3217.0, "w": 859.0, "h": 171.0, "line_num": 15, "text": "print (result)"}, {"x": 2100.0, "y": 3896.0, "w": 727.0, "h": 99.0, "line_num": 16, "text": "\u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c"}], "ir_algo_name": "none", "ir_algo_output_code": "def find_Ligst_smallst (number):\nif not numbers:\nReturn none\nSmallest= largest = number [0]\nfor num in\nin numbers :\nif num < smallest:\nsmallest = num\nif num > Largest :\nLargest = num\ntieturin smallest, Largest\n# Example usage.\nnumbers = [1,2,3, 4,5,6,7,8,9]\nresult = find_Ligst_smallst (numberis)\nprint (result)\n\u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c", "ir_algo_output_edit_distance": 121, "prompting_method": "cot-test5", "lm_post_processed_code": "def find_largest_smallest(number):\nif not numbers:\nReturn none\nSmallest= largest = number[0]\nfor num in numbers:\nif num < smallest:\nsmallest = num\nif num > largest:\nlargest = num\nreturn smallest, largest\n# Example usage.\nnumbers = [1,2,3, 4,5,6,7,8,9]\nresult = find_largest_smallest(numbers)\nprint(result)\n", "lm_post_processed_edit_distance": 82}, {"image_id": 23, "image_height": 4160, "image_width": 3120, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 497.0, "y": 307.0, "w": 1733.0, "h": 140.0, "line_num": 1, "text": "def find_Ligst_smallst (number):"}, {"x": 782.0, "y": 529.0, "w": 888.0, "h": 111.0, "line_num": 2, "text": "if not numbers:"}, {"x": 1091.0, "y": 682.0, "w": 795.0, "h": 102.0, "line_num": 3, "text": "Return none"}, {"x": 827.0, "y": 902.0, "w": 1653.0, "h": 124.0, "line_num": 4, "text": "Smallest= largest = number [0]"}, {"x": 762.0, "y": 1234.0, "w": 618.0, "h": 105.0, "line_num": 5, "text": "for num in"}, {"x": 1258.0, "y": 1181.0, "w": 805.0, "h": 123.0, "line_num": 6, "text": "in numbers :"}, {"x": 1110.0, "y": 1378.0, "w": 1095.0, "h": 149.0, "line_num": 7, "text": "if num < smallest:"}, {"x": 1486.0, "y": 1561.0, "w": 947.0, "h": 114.0, "line_num": 8, "text": "smallest = num"}, {"x": 1155.0, "y": 1697.0, "w": 1023.0, "h": 163.0, "line_num": 9, "text": "if num > Largest :"}, {"x": 1599.0, "y": 1911.0, "w": 907.0, "h": 114.0, "line_num": 10, "text": "Largest = num"}, {"x": 788.0, "y": 2143.0, "w": 1690.0, "h": 139.0, "line_num": 11, "text": "tieturin smallest, Largest"}, {"x": 420.0, "y": 2489.0, "w": 1104.0, "h": 146.0, "line_num": 12, "text": "# Example usage."}, {"x": 553.0, "y": 2699.0, "w": 2028.0, "h": 139.0, "line_num": 13, "text": "numbers = [1,2,3, 4,5,6,7,8,9]"}, {"x": 522.0, "y": 2933.0, "w": 2258.0, "h": 160.0, "line_num": 14, "text": "result = find_Ligst_smallst (numberis)"}, {"x": 555.0, "y": 3217.0, "w": 859.0, "h": 171.0, "line_num": 15, "text": "print (result)"}, {"x": 2100.0, "y": 3896.0, "w": 727.0, "h": 99.0, "line_num": 16, "text": "\u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c"}], "ir_algo_name": "none", "ir_algo_output_code": "def find_Ligst_smallst (number):\nif not numbers:\nReturn none\nSmallest= largest = number [0]\nfor num in\nin numbers :\nif num < smallest:\nsmallest = num\nif num > Largest :\nLargest = num\ntieturin smallest, Largest\n# Example usage.\nnumbers = [1,2,3, 4,5,6,7,8,9]\nresult = find_Ligst_smallst (numberis)\nprint (result)\n\u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c", "ir_algo_output_edit_distance": 121, "prompting_method": "simple-test2", "lm_post_processed_code": "def find_Largest_smallest(numbers):\nif not numbers:\nreturn None\nSmallest = Largest = numbers[0]\nfor num in numbers:\nif num < Smallest:\nSmallest = num\nif num > Largest:\nLargest = num\nreturn Smallest, Largest\n# Example usage.\nnumbers = [1,2,3, 4,5,6,7,8,9]\nresult = find_Largest_smallest(numbers)\nprint(result)\n", "lm_post_processed_edit_distance": 92}, {"image_id": 23, "image_height": 4160, "image_width": 3120, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 497.0, "y": 307.0, "w": 1733.0, "h": 140.0, "line_num": 1, "text": "def find_Ligst_smallst (number):"}, {"x": 782.0, "y": 529.0, "w": 888.0, "h": 111.0, "line_num": 2, "text": "if not numbers:"}, {"x": 1091.0, "y": 682.0, "w": 795.0, "h": 102.0, "line_num": 3, "text": "Return none"}, {"x": 827.0, "y": 902.0, "w": 1653.0, "h": 124.0, "line_num": 4, "text": "Smallest= largest = number [0]"}, {"x": 762.0, "y": 1234.0, "w": 618.0, "h": 105.0, "line_num": 5, "text": "for num in"}, {"x": 1258.0, "y": 1181.0, "w": 805.0, "h": 123.0, "line_num": 6, "text": "in numbers :"}, {"x": 1110.0, "y": 1378.0, "w": 1095.0, "h": 149.0, "line_num": 7, "text": "if num < smallest:"}, {"x": 1486.0, "y": 1561.0, "w": 947.0, "h": 114.0, "line_num": 8, "text": "smallest = num"}, {"x": 1155.0, "y": 1697.0, "w": 1023.0, "h": 163.0, "line_num": 9, "text": "if num > Largest :"}, {"x": 1599.0, "y": 1911.0, "w": 907.0, "h": 114.0, "line_num": 10, "text": "Largest = num"}, {"x": 788.0, "y": 2143.0, "w": 1690.0, "h": 139.0, "line_num": 11, "text": "tieturin smallest, Largest"}, {"x": 420.0, "y": 2489.0, "w": 1104.0, "h": 146.0, "line_num": 12, "text": "# Example usage."}, {"x": 553.0, "y": 2699.0, "w": 2028.0, "h": 139.0, "line_num": 13, "text": "numbers = [1,2,3, 4,5,6,7,8,9]"}, {"x": 522.0, "y": 2933.0, "w": 2258.0, "h": 160.0, "line_num": 14, "text": "result = find_Ligst_smallst (numberis)"}, {"x": 555.0, "y": 3217.0, "w": 859.0, "h": 171.0, "line_num": 15, "text": "print (result)"}, {"x": 2100.0, "y": 3896.0, "w": 727.0, "h": 99.0, "line_num": 16, "text": "\u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c"}], "ir_algo_name": "none", "ir_algo_output_code": "def find_Ligst_smallst (number):\nif not numbers:\nReturn none\nSmallest= largest = number [0]\nfor num in\nin numbers :\nif num < smallest:\nsmallest = num\nif num > Largest :\nLargest = num\ntieturin smallest, Largest\n# Example usage.\nnumbers = [1,2,3, 4,5,6,7,8,9]\nresult = find_Ligst_smallst (numberis)\nprint (result)\n\u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c", "ir_algo_output_edit_distance": 121, "prompting_method": "simple-test3", "lm_post_processed_code": "def find_Largest_smallest(numbers):\n    if not numbers:\n        return None\n    Smallest = Largest = numbers[0]\n    for num in numbers:\n        if num < Smallest:\n            Smallest = num\n        if num > Largest:\n            Largest = num\n    return Smallest, Largest\n# Example usage.\nnumbers = [1,2,3, 4,5,6,7,8,9]\nresult = find_Largest_smallest(numbers)\nprint(result)\n", "lm_post_processed_edit_distance": 28}, {"image_id": 23, "image_height": 4160, "image_width": 3120, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 497.0, "y": 307.0, "w": 1733.0, "h": 140.0, "line_num": 1, "text": "def find_Ligst_smallst (number):"}, {"x": 782.0, "y": 529.0, "w": 888.0, "h": 111.0, "line_num": 2, "text": "if not numbers:"}, {"x": 1091.0, "y": 682.0, "w": 795.0, "h": 102.0, "line_num": 3, "text": "Return none"}, {"x": 827.0, "y": 902.0, "w": 1653.0, "h": 124.0, "line_num": 4, "text": "Smallest= largest = number [0]"}, {"x": 762.0, "y": 1234.0, "w": 618.0, "h": 105.0, "line_num": 5, "text": "for num in"}, {"x": 1258.0, "y": 1181.0, "w": 805.0, "h": 123.0, "line_num": 6, "text": "in numbers :"}, {"x": 1110.0, "y": 1378.0, "w": 1095.0, "h": 149.0, "line_num": 7, "text": "if num < smallest:"}, {"x": 1486.0, "y": 1561.0, "w": 947.0, "h": 114.0, "line_num": 8, "text": "smallest = num"}, {"x": 1155.0, "y": 1697.0, "w": 1023.0, "h": 163.0, "line_num": 9, "text": "if num > Largest :"}, {"x": 1599.0, "y": 1911.0, "w": 907.0, "h": 114.0, "line_num": 10, "text": "Largest = num"}, {"x": 788.0, "y": 2143.0, "w": 1690.0, "h": 139.0, "line_num": 11, "text": "tieturin smallest, Largest"}, {"x": 420.0, "y": 2489.0, "w": 1104.0, "h": 146.0, "line_num": 12, "text": "# Example usage."}, {"x": 553.0, "y": 2699.0, "w": 2028.0, "h": 139.0, "line_num": 13, "text": "numbers = [1,2,3, 4,5,6,7,8,9]"}, {"x": 522.0, "y": 2933.0, "w": 2258.0, "h": 160.0, "line_num": 14, "text": "result = find_Ligst_smallst (numberis)"}, {"x": 555.0, "y": 3217.0, "w": 859.0, "h": 171.0, "line_num": 15, "text": "print (result)"}, {"x": 2100.0, "y": 3896.0, "w": 727.0, "h": 99.0, "line_num": 16, "text": "\u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 196.78125, "ir_algo_output_code": "def find_Ligst_smallst (number):\n    if not numbers:\n        Return none\n    Smallest= largest = number [0]\n    for num in\n        in numbers :\n        if num < smallest:\n            smallest = num\n        if num > Largest :\n            Largest = num\n    tieturin smallest, Largest\n# Example usage.\nnumbers = [1,2,3, 4,5,6,7,8,9]\nresult = find_Ligst_smallst (numberis)\nprint (result)\n                \u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c\n", "ir_algo_output_indented_lines": [{"x": 497.0, "y": 307.0, "w": 1733.0, "h": 140.0, "line_num": 1, "text": "def find_Ligst_smallst (number):", "cluster_label": 0, "indentation": 0}, {"x": 782.0, "y": 529.0, "w": 888.0, "h": 111.0, "line_num": 2, "text": "if not numbers:", "cluster_label": 2, "indentation": 1}, {"x": 1091.0, "y": 682.0, "w": 795.0, "h": 102.0, "line_num": 3, "text": "Return none", "cluster_label": 1, "indentation": 2}, {"x": 827.0, "y": 902.0, "w": 1653.0, "h": 124.0, "line_num": 4, "text": "Smallest= largest = number [0]", "cluster_label": 2, "indentation": 1}, {"x": 762.0, "y": 1234.0, "w": 618.0, "h": 105.0, "line_num": 5, "text": "for num in", "cluster_label": 2, "indentation": 1}, {"x": 1258.0, "y": 1181.0, "w": 805.0, "h": 123.0, "line_num": 6, "text": "in numbers :", "cluster_label": 1, "indentation": 2}, {"x": 1110.0, "y": 1378.0, "w": 1095.0, "h": 149.0, "line_num": 7, "text": "if num < smallest:", "cluster_label": 1, "indentation": 2}, {"x": 1486.0, "y": 1561.0, "w": 947.0, "h": 114.0, "line_num": 8, "text": "smallest = num", "cluster_label": 3, "indentation": 3}, {"x": 1155.0, "y": 1697.0, "w": 1023.0, "h": 163.0, "line_num": 9, "text": "if num > Largest :", "cluster_label": 1, "indentation": 2}, {"x": 1599.0, "y": 1911.0, "w": 907.0, "h": 114.0, "line_num": 10, "text": "Largest = num", "cluster_label": 3, "indentation": 3}, {"x": 788.0, "y": 2143.0, "w": 1690.0, "h": 139.0, "line_num": 11, "text": "tieturin smallest, Largest", "cluster_label": 2, "indentation": 1}, {"x": 420.0, "y": 2489.0, "w": 1104.0, "h": 146.0, "line_num": 12, "text": "# Example usage.", "cluster_label": 0, "indentation": 0}, {"x": 553.0, "y": 2699.0, "w": 2028.0, "h": 139.0, "line_num": 13, "text": "numbers = [1,2,3, 4,5,6,7,8,9]", "cluster_label": 0, "indentation": 0}, {"x": 522.0, "y": 2933.0, "w": 2258.0, "h": 160.0, "line_num": 14, "text": "result = find_Ligst_smallst (numberis)", "cluster_label": 0, "indentation": 0}, {"x": 555.0, "y": 3217.0, "w": 859.0, "h": 171.0, "line_num": 15, "text": "print (result)", "cluster_label": 0, "indentation": 0}, {"x": 2100.0, "y": 3896.0, "w": 727.0, "h": 99.0, "line_num": 16, "text": "\u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c", "cluster_label": 4, "indentation": 4}], "ir_algo_output_edit_distance": 83, "prompting_method": "none", "lm_post_processed_code": "def find_Ligst_smallst (number):\n    if not numbers:\n        Return none\n    Smallest= largest = number [0]\n    for num in\n        in numbers :\n        if num < smallest:\n            smallest = num\n        if num > Largest :\n            Largest = num\n    tieturin smallest, Largest\n# Example usage.\nnumbers = [1,2,3, 4,5,6,7,8,9]\nresult = find_Ligst_smallst (numberis)\nprint (result)\n                \u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c\n", "lm_post_processed_edit_distance": 83}, {"image_id": 23, "image_height": 4160, "image_width": 3120, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 497.0, "y": 307.0, "w": 1733.0, "h": 140.0, "line_num": 1, "text": "def find_Ligst_smallst (number):"}, {"x": 782.0, "y": 529.0, "w": 888.0, "h": 111.0, "line_num": 2, "text": "if not numbers:"}, {"x": 1091.0, "y": 682.0, "w": 795.0, "h": 102.0, "line_num": 3, "text": "Return none"}, {"x": 827.0, "y": 902.0, "w": 1653.0, "h": 124.0, "line_num": 4, "text": "Smallest= largest = number [0]"}, {"x": 762.0, "y": 1234.0, "w": 618.0, "h": 105.0, "line_num": 5, "text": "for num in"}, {"x": 1258.0, "y": 1181.0, "w": 805.0, "h": 123.0, "line_num": 6, "text": "in numbers :"}, {"x": 1110.0, "y": 1378.0, "w": 1095.0, "h": 149.0, "line_num": 7, "text": "if num < smallest:"}, {"x": 1486.0, "y": 1561.0, "w": 947.0, "h": 114.0, "line_num": 8, "text": "smallest = num"}, {"x": 1155.0, "y": 1697.0, "w": 1023.0, "h": 163.0, "line_num": 9, "text": "if num > Largest :"}, {"x": 1599.0, "y": 1911.0, "w": 907.0, "h": 114.0, "line_num": 10, "text": "Largest = num"}, {"x": 788.0, "y": 2143.0, "w": 1690.0, "h": 139.0, "line_num": 11, "text": "tieturin smallest, Largest"}, {"x": 420.0, "y": 2489.0, "w": 1104.0, "h": 146.0, "line_num": 12, "text": "# Example usage."}, {"x": 553.0, "y": 2699.0, "w": 2028.0, "h": 139.0, "line_num": 13, "text": "numbers = [1,2,3, 4,5,6,7,8,9]"}, {"x": 522.0, "y": 2933.0, "w": 2258.0, "h": 160.0, "line_num": 14, "text": "result = find_Ligst_smallst (numberis)"}, {"x": 555.0, "y": 3217.0, "w": 859.0, "h": 171.0, "line_num": 15, "text": "print (result)"}, {"x": 2100.0, "y": 3896.0, "w": 727.0, "h": 99.0, "line_num": 16, "text": "\u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 196.78125, "ir_algo_output_code": "def find_Ligst_smallst (number):\n    if not numbers:\n        Return none\n    Smallest= largest = number [0]\n    for num in\n        in numbers :\n        if num < smallest:\n            smallest = num\n        if num > Largest :\n            Largest = num\n    tieturin smallest, Largest\n# Example usage.\nnumbers = [1,2,3, 4,5,6,7,8,9]\nresult = find_Ligst_smallst (numberis)\nprint (result)\n                \u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c\n", "ir_algo_output_indented_lines": [{"x": 497.0, "y": 307.0, "w": 1733.0, "h": 140.0, "line_num": 1, "text": "def find_Ligst_smallst (number):", "cluster_label": 0, "indentation": 0}, {"x": 782.0, "y": 529.0, "w": 888.0, "h": 111.0, "line_num": 2, "text": "if not numbers:", "cluster_label": 2, "indentation": 1}, {"x": 1091.0, "y": 682.0, "w": 795.0, "h": 102.0, "line_num": 3, "text": "Return none", "cluster_label": 1, "indentation": 2}, {"x": 827.0, "y": 902.0, "w": 1653.0, "h": 124.0, "line_num": 4, "text": "Smallest= largest = number [0]", "cluster_label": 2, "indentation": 1}, {"x": 762.0, "y": 1234.0, "w": 618.0, "h": 105.0, "line_num": 5, "text": "for num in", "cluster_label": 2, "indentation": 1}, {"x": 1258.0, "y": 1181.0, "w": 805.0, "h": 123.0, "line_num": 6, "text": "in numbers :", "cluster_label": 1, "indentation": 2}, {"x": 1110.0, "y": 1378.0, "w": 1095.0, "h": 149.0, "line_num": 7, "text": "if num < smallest:", "cluster_label": 1, "indentation": 2}, {"x": 1486.0, "y": 1561.0, "w": 947.0, "h": 114.0, "line_num": 8, "text": "smallest = num", "cluster_label": 3, "indentation": 3}, {"x": 1155.0, "y": 1697.0, "w": 1023.0, "h": 163.0, "line_num": 9, "text": "if num > Largest :", "cluster_label": 1, "indentation": 2}, {"x": 1599.0, "y": 1911.0, "w": 907.0, "h": 114.0, "line_num": 10, "text": "Largest = num", "cluster_label": 3, "indentation": 3}, {"x": 788.0, "y": 2143.0, "w": 1690.0, "h": 139.0, "line_num": 11, "text": "tieturin smallest, Largest", "cluster_label": 2, "indentation": 1}, {"x": 420.0, "y": 2489.0, "w": 1104.0, "h": 146.0, "line_num": 12, "text": "# Example usage.", "cluster_label": 0, "indentation": 0}, {"x": 553.0, "y": 2699.0, "w": 2028.0, "h": 139.0, "line_num": 13, "text": "numbers = [1,2,3, 4,5,6,7,8,9]", "cluster_label": 0, "indentation": 0}, {"x": 522.0, "y": 2933.0, "w": 2258.0, "h": 160.0, "line_num": 14, "text": "result = find_Ligst_smallst (numberis)", "cluster_label": 0, "indentation": 0}, {"x": 555.0, "y": 3217.0, "w": 859.0, "h": 171.0, "line_num": 15, "text": "print (result)", "cluster_label": 0, "indentation": 0}, {"x": 2100.0, "y": 3896.0, "w": 727.0, "h": 99.0, "line_num": 16, "text": "\u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c", "cluster_label": 4, "indentation": 4}], "ir_algo_output_edit_distance": 83, "prompting_method": "cot-test1", "lm_post_processed_code": "def find_Largest_smallest(numbers):\n    if not numbers:\n        Return None\n    Smallest = largest = numbers[0]\n    for num in numbers:\n        if num < Smallest:\n            Smallest = num\n        if num > largest:\n            largest = num\n    return Smallest, largest\n# Example usage.\nnumbers = [1,2,3, 4,5,6,7,8,9]\nresult = find_Largest_smallest(numbers)\nprint(result)\n", "lm_post_processed_edit_distance": 25}, {"image_id": 23, "image_height": 4160, "image_width": 3120, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 497.0, "y": 307.0, "w": 1733.0, "h": 140.0, "line_num": 1, "text": "def find_Ligst_smallst (number):"}, {"x": 782.0, "y": 529.0, "w": 888.0, "h": 111.0, "line_num": 2, "text": "if not numbers:"}, {"x": 1091.0, "y": 682.0, "w": 795.0, "h": 102.0, "line_num": 3, "text": "Return none"}, {"x": 827.0, "y": 902.0, "w": 1653.0, "h": 124.0, "line_num": 4, "text": "Smallest= largest = number [0]"}, {"x": 762.0, "y": 1234.0, "w": 618.0, "h": 105.0, "line_num": 5, "text": "for num in"}, {"x": 1258.0, "y": 1181.0, "w": 805.0, "h": 123.0, "line_num": 6, "text": "in numbers :"}, {"x": 1110.0, "y": 1378.0, "w": 1095.0, "h": 149.0, "line_num": 7, "text": "if num < smallest:"}, {"x": 1486.0, "y": 1561.0, "w": 947.0, "h": 114.0, "line_num": 8, "text": "smallest = num"}, {"x": 1155.0, "y": 1697.0, "w": 1023.0, "h": 163.0, "line_num": 9, "text": "if num > Largest :"}, {"x": 1599.0, "y": 1911.0, "w": 907.0, "h": 114.0, "line_num": 10, "text": "Largest = num"}, {"x": 788.0, "y": 2143.0, "w": 1690.0, "h": 139.0, "line_num": 11, "text": "tieturin smallest, Largest"}, {"x": 420.0, "y": 2489.0, "w": 1104.0, "h": 146.0, "line_num": 12, "text": "# Example usage."}, {"x": 553.0, "y": 2699.0, "w": 2028.0, "h": 139.0, "line_num": 13, "text": "numbers = [1,2,3, 4,5,6,7,8,9]"}, {"x": 522.0, "y": 2933.0, "w": 2258.0, "h": 160.0, "line_num": 14, "text": "result = find_Ligst_smallst (numberis)"}, {"x": 555.0, "y": 3217.0, "w": 859.0, "h": 171.0, "line_num": 15, "text": "print (result)"}, {"x": 2100.0, "y": 3896.0, "w": 727.0, "h": 99.0, "line_num": 16, "text": "\u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 196.78125, "ir_algo_output_code": "def find_Ligst_smallst (number):\n    if not numbers:\n        Return none\n    Smallest= largest = number [0]\n    for num in\n        in numbers :\n        if num < smallest:\n            smallest = num\n        if num > Largest :\n            Largest = num\n    tieturin smallest, Largest\n# Example usage.\nnumbers = [1,2,3, 4,5,6,7,8,9]\nresult = find_Ligst_smallst (numberis)\nprint (result)\n                \u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c\n", "ir_algo_output_indented_lines": [{"x": 497.0, "y": 307.0, "w": 1733.0, "h": 140.0, "line_num": 1, "text": "def find_Ligst_smallst (number):", "cluster_label": 0, "indentation": 0}, {"x": 782.0, "y": 529.0, "w": 888.0, "h": 111.0, "line_num": 2, "text": "if not numbers:", "cluster_label": 2, "indentation": 1}, {"x": 1091.0, "y": 682.0, "w": 795.0, "h": 102.0, "line_num": 3, "text": "Return none", "cluster_label": 1, "indentation": 2}, {"x": 827.0, "y": 902.0, "w": 1653.0, "h": 124.0, "line_num": 4, "text": "Smallest= largest = number [0]", "cluster_label": 2, "indentation": 1}, {"x": 762.0, "y": 1234.0, "w": 618.0, "h": 105.0, "line_num": 5, "text": "for num in", "cluster_label": 2, "indentation": 1}, {"x": 1258.0, "y": 1181.0, "w": 805.0, "h": 123.0, "line_num": 6, "text": "in numbers :", "cluster_label": 1, "indentation": 2}, {"x": 1110.0, "y": 1378.0, "w": 1095.0, "h": 149.0, "line_num": 7, "text": "if num < smallest:", "cluster_label": 1, "indentation": 2}, {"x": 1486.0, "y": 1561.0, "w": 947.0, "h": 114.0, "line_num": 8, "text": "smallest = num", "cluster_label": 3, "indentation": 3}, {"x": 1155.0, "y": 1697.0, "w": 1023.0, "h": 163.0, "line_num": 9, "text": "if num > Largest :", "cluster_label": 1, "indentation": 2}, {"x": 1599.0, "y": 1911.0, "w": 907.0, "h": 114.0, "line_num": 10, "text": "Largest = num", "cluster_label": 3, "indentation": 3}, {"x": 788.0, "y": 2143.0, "w": 1690.0, "h": 139.0, "line_num": 11, "text": "tieturin smallest, Largest", "cluster_label": 2, "indentation": 1}, {"x": 420.0, "y": 2489.0, "w": 1104.0, "h": 146.0, "line_num": 12, "text": "# Example usage.", "cluster_label": 0, "indentation": 0}, {"x": 553.0, "y": 2699.0, "w": 2028.0, "h": 139.0, "line_num": 13, "text": "numbers = [1,2,3, 4,5,6,7,8,9]", "cluster_label": 0, "indentation": 0}, {"x": 522.0, "y": 2933.0, "w": 2258.0, "h": 160.0, "line_num": 14, "text": "result = find_Ligst_smallst (numberis)", "cluster_label": 0, "indentation": 0}, {"x": 555.0, "y": 3217.0, "w": 859.0, "h": 171.0, "line_num": 15, "text": "print (result)", "cluster_label": 0, "indentation": 0}, {"x": 2100.0, "y": 3896.0, "w": 727.0, "h": 99.0, "line_num": 16, "text": "\u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c", "cluster_label": 4, "indentation": 4}], "ir_algo_output_edit_distance": 83, "prompting_method": "cot-test5", "lm_post_processed_code": "def find_largest_smallest (numbers):\n    if not numbers:\n        return None\n    smallest = largest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    return smallest, largest\n# Example usage.\nnumbers = [1,2,3, 4,5,6,7,8,9]\nresult = find_largest_smallest (numbers)\nprint (result)\n", "lm_post_processed_edit_distance": 21}, {"image_id": 23, "image_height": 4160, "image_width": 3120, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 497.0, "y": 307.0, "w": 1733.0, "h": 140.0, "line_num": 1, "text": "def find_Ligst_smallst (number):"}, {"x": 782.0, "y": 529.0, "w": 888.0, "h": 111.0, "line_num": 2, "text": "if not numbers:"}, {"x": 1091.0, "y": 682.0, "w": 795.0, "h": 102.0, "line_num": 3, "text": "Return none"}, {"x": 827.0, "y": 902.0, "w": 1653.0, "h": 124.0, "line_num": 4, "text": "Smallest= largest = number [0]"}, {"x": 762.0, "y": 1234.0, "w": 618.0, "h": 105.0, "line_num": 5, "text": "for num in"}, {"x": 1258.0, "y": 1181.0, "w": 805.0, "h": 123.0, "line_num": 6, "text": "in numbers :"}, {"x": 1110.0, "y": 1378.0, "w": 1095.0, "h": 149.0, "line_num": 7, "text": "if num < smallest:"}, {"x": 1486.0, "y": 1561.0, "w": 947.0, "h": 114.0, "line_num": 8, "text": "smallest = num"}, {"x": 1155.0, "y": 1697.0, "w": 1023.0, "h": 163.0, "line_num": 9, "text": "if num > Largest :"}, {"x": 1599.0, "y": 1911.0, "w": 907.0, "h": 114.0, "line_num": 10, "text": "Largest = num"}, {"x": 788.0, "y": 2143.0, "w": 1690.0, "h": 139.0, "line_num": 11, "text": "tieturin smallest, Largest"}, {"x": 420.0, "y": 2489.0, "w": 1104.0, "h": 146.0, "line_num": 12, "text": "# Example usage."}, {"x": 553.0, "y": 2699.0, "w": 2028.0, "h": 139.0, "line_num": 13, "text": "numbers = [1,2,3, 4,5,6,7,8,9]"}, {"x": 522.0, "y": 2933.0, "w": 2258.0, "h": 160.0, "line_num": 14, "text": "result = find_Ligst_smallst (numberis)"}, {"x": 555.0, "y": 3217.0, "w": 859.0, "h": 171.0, "line_num": 15, "text": "print (result)"}, {"x": 2100.0, "y": 3896.0, "w": 727.0, "h": 99.0, "line_num": 16, "text": "\u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 196.78125, "ir_algo_output_code": "def find_Ligst_smallst (number):\n    if not numbers:\n        Return none\n    Smallest= largest = number [0]\n    for num in\n        in numbers :\n        if num < smallest:\n            smallest = num\n        if num > Largest :\n            Largest = num\n    tieturin smallest, Largest\n# Example usage.\nnumbers = [1,2,3, 4,5,6,7,8,9]\nresult = find_Ligst_smallst (numberis)\nprint (result)\n                \u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c\n", "ir_algo_output_indented_lines": [{"x": 497.0, "y": 307.0, "w": 1733.0, "h": 140.0, "line_num": 1, "text": "def find_Ligst_smallst (number):", "cluster_label": 0, "indentation": 0}, {"x": 782.0, "y": 529.0, "w": 888.0, "h": 111.0, "line_num": 2, "text": "if not numbers:", "cluster_label": 2, "indentation": 1}, {"x": 1091.0, "y": 682.0, "w": 795.0, "h": 102.0, "line_num": 3, "text": "Return none", "cluster_label": 1, "indentation": 2}, {"x": 827.0, "y": 902.0, "w": 1653.0, "h": 124.0, "line_num": 4, "text": "Smallest= largest = number [0]", "cluster_label": 2, "indentation": 1}, {"x": 762.0, "y": 1234.0, "w": 618.0, "h": 105.0, "line_num": 5, "text": "for num in", "cluster_label": 2, "indentation": 1}, {"x": 1258.0, "y": 1181.0, "w": 805.0, "h": 123.0, "line_num": 6, "text": "in numbers :", "cluster_label": 1, "indentation": 2}, {"x": 1110.0, "y": 1378.0, "w": 1095.0, "h": 149.0, "line_num": 7, "text": "if num < smallest:", "cluster_label": 1, "indentation": 2}, {"x": 1486.0, "y": 1561.0, "w": 947.0, "h": 114.0, "line_num": 8, "text": "smallest = num", "cluster_label": 3, "indentation": 3}, {"x": 1155.0, "y": 1697.0, "w": 1023.0, "h": 163.0, "line_num": 9, "text": "if num > Largest :", "cluster_label": 1, "indentation": 2}, {"x": 1599.0, "y": 1911.0, "w": 907.0, "h": 114.0, "line_num": 10, "text": "Largest = num", "cluster_label": 3, "indentation": 3}, {"x": 788.0, "y": 2143.0, "w": 1690.0, "h": 139.0, "line_num": 11, "text": "tieturin smallest, Largest", "cluster_label": 2, "indentation": 1}, {"x": 420.0, "y": 2489.0, "w": 1104.0, "h": 146.0, "line_num": 12, "text": "# Example usage.", "cluster_label": 0, "indentation": 0}, {"x": 553.0, "y": 2699.0, "w": 2028.0, "h": 139.0, "line_num": 13, "text": "numbers = [1,2,3, 4,5,6,7,8,9]", "cluster_label": 0, "indentation": 0}, {"x": 522.0, "y": 2933.0, "w": 2258.0, "h": 160.0, "line_num": 14, "text": "result = find_Ligst_smallst (numberis)", "cluster_label": 0, "indentation": 0}, {"x": 555.0, "y": 3217.0, "w": 859.0, "h": 171.0, "line_num": 15, "text": "print (result)", "cluster_label": 0, "indentation": 0}, {"x": 2100.0, "y": 3896.0, "w": 727.0, "h": 99.0, "line_num": 16, "text": "\u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c", "cluster_label": 4, "indentation": 4}], "ir_algo_output_edit_distance": 83, "prompting_method": "simple-test2", "lm_post_processed_code": "def find_Largest_smallest(numbers):\n    if not numbers:\n        return None\n    smallest = largest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    return smallest, largest\n# Example usage.\nnumbers = [1,2,3, 4,5,6,7,8,9]\nresult = find_Largest_smallest(numbers)\nprint(result)\n", "lm_post_processed_edit_distance": 20}, {"image_id": 23, "image_height": 4160, "image_width": 3120, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 497.0, "y": 307.0, "w": 1733.0, "h": 140.0, "line_num": 1, "text": "def find_Ligst_smallst (number):"}, {"x": 782.0, "y": 529.0, "w": 888.0, "h": 111.0, "line_num": 2, "text": "if not numbers:"}, {"x": 1091.0, "y": 682.0, "w": 795.0, "h": 102.0, "line_num": 3, "text": "Return none"}, {"x": 827.0, "y": 902.0, "w": 1653.0, "h": 124.0, "line_num": 4, "text": "Smallest= largest = number [0]"}, {"x": 762.0, "y": 1234.0, "w": 618.0, "h": 105.0, "line_num": 5, "text": "for num in"}, {"x": 1258.0, "y": 1181.0, "w": 805.0, "h": 123.0, "line_num": 6, "text": "in numbers :"}, {"x": 1110.0, "y": 1378.0, "w": 1095.0, "h": 149.0, "line_num": 7, "text": "if num < smallest:"}, {"x": 1486.0, "y": 1561.0, "w": 947.0, "h": 114.0, "line_num": 8, "text": "smallest = num"}, {"x": 1155.0, "y": 1697.0, "w": 1023.0, "h": 163.0, "line_num": 9, "text": "if num > Largest :"}, {"x": 1599.0, "y": 1911.0, "w": 907.0, "h": 114.0, "line_num": 10, "text": "Largest = num"}, {"x": 788.0, "y": 2143.0, "w": 1690.0, "h": 139.0, "line_num": 11, "text": "tieturin smallest, Largest"}, {"x": 420.0, "y": 2489.0, "w": 1104.0, "h": 146.0, "line_num": 12, "text": "# Example usage."}, {"x": 553.0, "y": 2699.0, "w": 2028.0, "h": 139.0, "line_num": 13, "text": "numbers = [1,2,3, 4,5,6,7,8,9]"}, {"x": 522.0, "y": 2933.0, "w": 2258.0, "h": 160.0, "line_num": 14, "text": "result = find_Ligst_smallst (numberis)"}, {"x": 555.0, "y": 3217.0, "w": 859.0, "h": 171.0, "line_num": 15, "text": "print (result)"}, {"x": 2100.0, "y": 3896.0, "w": 727.0, "h": 99.0, "line_num": 16, "text": "\u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 196.78125, "ir_algo_output_code": "def find_Ligst_smallst (number):\n    if not numbers:\n        Return none\n    Smallest= largest = number [0]\n    for num in\n        in numbers :\n        if num < smallest:\n            smallest = num\n        if num > Largest :\n            Largest = num\n    tieturin smallest, Largest\n# Example usage.\nnumbers = [1,2,3, 4,5,6,7,8,9]\nresult = find_Ligst_smallst (numberis)\nprint (result)\n                \u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c\n", "ir_algo_output_indented_lines": [{"x": 497.0, "y": 307.0, "w": 1733.0, "h": 140.0, "line_num": 1, "text": "def find_Ligst_smallst (number):", "cluster_label": 0, "indentation": 0}, {"x": 782.0, "y": 529.0, "w": 888.0, "h": 111.0, "line_num": 2, "text": "if not numbers:", "cluster_label": 2, "indentation": 1}, {"x": 1091.0, "y": 682.0, "w": 795.0, "h": 102.0, "line_num": 3, "text": "Return none", "cluster_label": 1, "indentation": 2}, {"x": 827.0, "y": 902.0, "w": 1653.0, "h": 124.0, "line_num": 4, "text": "Smallest= largest = number [0]", "cluster_label": 2, "indentation": 1}, {"x": 762.0, "y": 1234.0, "w": 618.0, "h": 105.0, "line_num": 5, "text": "for num in", "cluster_label": 2, "indentation": 1}, {"x": 1258.0, "y": 1181.0, "w": 805.0, "h": 123.0, "line_num": 6, "text": "in numbers :", "cluster_label": 1, "indentation": 2}, {"x": 1110.0, "y": 1378.0, "w": 1095.0, "h": 149.0, "line_num": 7, "text": "if num < smallest:", "cluster_label": 1, "indentation": 2}, {"x": 1486.0, "y": 1561.0, "w": 947.0, "h": 114.0, "line_num": 8, "text": "smallest = num", "cluster_label": 3, "indentation": 3}, {"x": 1155.0, "y": 1697.0, "w": 1023.0, "h": 163.0, "line_num": 9, "text": "if num > Largest :", "cluster_label": 1, "indentation": 2}, {"x": 1599.0, "y": 1911.0, "w": 907.0, "h": 114.0, "line_num": 10, "text": "Largest = num", "cluster_label": 3, "indentation": 3}, {"x": 788.0, "y": 2143.0, "w": 1690.0, "h": 139.0, "line_num": 11, "text": "tieturin smallest, Largest", "cluster_label": 2, "indentation": 1}, {"x": 420.0, "y": 2489.0, "w": 1104.0, "h": 146.0, "line_num": 12, "text": "# Example usage.", "cluster_label": 0, "indentation": 0}, {"x": 553.0, "y": 2699.0, "w": 2028.0, "h": 139.0, "line_num": 13, "text": "numbers = [1,2,3, 4,5,6,7,8,9]", "cluster_label": 0, "indentation": 0}, {"x": 522.0, "y": 2933.0, "w": 2258.0, "h": 160.0, "line_num": 14, "text": "result = find_Ligst_smallst (numberis)", "cluster_label": 0, "indentation": 0}, {"x": 555.0, "y": 3217.0, "w": 859.0, "h": 171.0, "line_num": 15, "text": "print (result)", "cluster_label": 0, "indentation": 0}, {"x": 2100.0, "y": 3896.0, "w": 727.0, "h": 99.0, "line_num": 16, "text": "\u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c", "cluster_label": 4, "indentation": 4}], "ir_algo_output_edit_distance": 83, "prompting_method": "simple-test3", "lm_post_processed_code": "def find_largest_smallest(numbers):\n    if not numbers:\n        return None\n    smallest = largest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    return smallest, largest\n# Example usage.\nnumbers = [1,2,3, 4,5,6,7,8,9]\nresult = find_largest_smallest(numbers)\nprint(result)\n", "lm_post_processed_edit_distance": 18}, {"image_id": 23, "image_height": 4160, "image_width": 3120, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 497.0, "y": 307.0, "w": 1733.0, "h": 140.0, "line_num": 1, "text": "def find_Ligst_smallst (number):"}, {"x": 782.0, "y": 529.0, "w": 888.0, "h": 111.0, "line_num": 2, "text": "if not numbers:"}, {"x": 1091.0, "y": 682.0, "w": 795.0, "h": 102.0, "line_num": 3, "text": "Return none"}, {"x": 827.0, "y": 902.0, "w": 1653.0, "h": 124.0, "line_num": 4, "text": "Smallest= largest = number [0]"}, {"x": 762.0, "y": 1234.0, "w": 618.0, "h": 105.0, "line_num": 5, "text": "for num in"}, {"x": 1258.0, "y": 1181.0, "w": 805.0, "h": 123.0, "line_num": 6, "text": "in numbers :"}, {"x": 1110.0, "y": 1378.0, "w": 1095.0, "h": 149.0, "line_num": 7, "text": "if num < smallest:"}, {"x": 1486.0, "y": 1561.0, "w": 947.0, "h": 114.0, "line_num": 8, "text": "smallest = num"}, {"x": 1155.0, "y": 1697.0, "w": 1023.0, "h": 163.0, "line_num": 9, "text": "if num > Largest :"}, {"x": 1599.0, "y": 1911.0, "w": 907.0, "h": 114.0, "line_num": 10, "text": "Largest = num"}, {"x": 788.0, "y": 2143.0, "w": 1690.0, "h": 139.0, "line_num": 11, "text": "tieturin smallest, Largest"}, {"x": 420.0, "y": 2489.0, "w": 1104.0, "h": 146.0, "line_num": 12, "text": "# Example usage."}, {"x": 553.0, "y": 2699.0, "w": 2028.0, "h": 139.0, "line_num": 13, "text": "numbers = [1,2,3, 4,5,6,7,8,9]"}, {"x": 522.0, "y": 2933.0, "w": 2258.0, "h": 160.0, "line_num": 14, "text": "result = find_Ligst_smallst (numberis)"}, {"x": 555.0, "y": 3217.0, "w": 859.0, "h": 171.0, "line_num": 15, "text": "print (result)"}, {"x": 2100.0, "y": 3896.0, "w": 727.0, "h": 99.0, "line_num": 16, "text": "\u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def find_Ligst_smallst (number):\n    if not numbers:\n        Return none\n    Smallest= largest = number [0]\n    for num in\n        in numbers :\n        if num < smallest:\n            smallest = num\n        if num > Largest :\n            Largest = num\n    tieturin smallest, Largest\n# Example usage.\n    numbers = [1,2,3, 4,5,6,7,8,9]\n    result = find_Ligst_smallst (numberis)\n    print (result)\n        \u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c\n", "ir_algo_output_indented_lines": [{"x": 497.0, "y": 307.0, "w": 1733.0, "h": 140.0, "line_num": 1, "text": "def find_Ligst_smallst (number):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 782.0, "y": 529.0, "w": 888.0, "h": 111.0, "line_num": 2, "text": "if not numbers:", "delta": 285.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 1091.0, "y": 682.0, "w": 795.0, "h": 102.0, "line_num": 3, "text": "Return none", "delta": 309.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 827.0, "y": 902.0, "w": 1653.0, "h": 124.0, "line_num": 4, "text": "Smallest= largest = number [0]", "delta": -264.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 762.0, "y": 1234.0, "w": 618.0, "h": 105.0, "line_num": 5, "text": "for num in", "delta": -65.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 1258.0, "y": 1181.0, "w": 805.0, "h": 123.0, "line_num": 6, "text": "in numbers :", "delta": 496.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 1110.0, "y": 1378.0, "w": 1095.0, "h": 149.0, "line_num": 7, "text": "if num < smallest:", "delta": -148.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 1486.0, "y": 1561.0, "w": 947.0, "h": 114.0, "line_num": 8, "text": "smallest = num", "delta": 376.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 1155.0, "y": 1697.0, "w": 1023.0, "h": 163.0, "line_num": 9, "text": "if num > Largest :", "delta": -331.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 1599.0, "y": 1911.0, "w": 907.0, "h": 114.0, "line_num": 10, "text": "Largest = num", "delta": 444.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 788.0, "y": 2143.0, "w": 1690.0, "h": 139.0, "line_num": 11, "text": "tieturin smallest, Largest", "delta": -811.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 420.0, "y": 2489.0, "w": 1104.0, "h": 146.0, "line_num": 12, "text": "# Example usage.", "delta": -368.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 553.0, "y": 2699.0, "w": 2028.0, "h": 139.0, "line_num": 13, "text": "numbers = [1,2,3, 4,5,6,7,8,9]", "delta": 133.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 522.0, "y": 2933.0, "w": 2258.0, "h": 160.0, "line_num": 14, "text": "result = find_Ligst_smallst (numberis)", "delta": -31.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 555.0, "y": 3217.0, "w": 859.0, "h": 171.0, "line_num": 15, "text": "print (result)", "delta": 33.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 2100.0, "y": 3896.0, "w": 727.0, "h": 99.0, "line_num": 16, "text": "\u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c", "delta": 1545.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}], "ir_algo_output_edit_distance": 87, "prompting_method": "none", "lm_post_processed_code": "def find_Ligst_smallst (number):\n    if not numbers:\n        Return none\n    Smallest= largest = number [0]\n    for num in\n        in numbers :\n        if num < smallest:\n            smallest = num\n        if num > Largest :\n            Largest = num\n    tieturin smallest, Largest\n# Example usage.\n    numbers = [1,2,3, 4,5,6,7,8,9]\n    result = find_Ligst_smallst (numberis)\n    print (result)\n        \u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c\n", "lm_post_processed_edit_distance": 87}, {"image_id": 23, "image_height": 4160, "image_width": 3120, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 497.0, "y": 307.0, "w": 1733.0, "h": 140.0, "line_num": 1, "text": "def find_Ligst_smallst (number):"}, {"x": 782.0, "y": 529.0, "w": 888.0, "h": 111.0, "line_num": 2, "text": "if not numbers:"}, {"x": 1091.0, "y": 682.0, "w": 795.0, "h": 102.0, "line_num": 3, "text": "Return none"}, {"x": 827.0, "y": 902.0, "w": 1653.0, "h": 124.0, "line_num": 4, "text": "Smallest= largest = number [0]"}, {"x": 762.0, "y": 1234.0, "w": 618.0, "h": 105.0, "line_num": 5, "text": "for num in"}, {"x": 1258.0, "y": 1181.0, "w": 805.0, "h": 123.0, "line_num": 6, "text": "in numbers :"}, {"x": 1110.0, "y": 1378.0, "w": 1095.0, "h": 149.0, "line_num": 7, "text": "if num < smallest:"}, {"x": 1486.0, "y": 1561.0, "w": 947.0, "h": 114.0, "line_num": 8, "text": "smallest = num"}, {"x": 1155.0, "y": 1697.0, "w": 1023.0, "h": 163.0, "line_num": 9, "text": "if num > Largest :"}, {"x": 1599.0, "y": 1911.0, "w": 907.0, "h": 114.0, "line_num": 10, "text": "Largest = num"}, {"x": 788.0, "y": 2143.0, "w": 1690.0, "h": 139.0, "line_num": 11, "text": "tieturin smallest, Largest"}, {"x": 420.0, "y": 2489.0, "w": 1104.0, "h": 146.0, "line_num": 12, "text": "# Example usage."}, {"x": 553.0, "y": 2699.0, "w": 2028.0, "h": 139.0, "line_num": 13, "text": "numbers = [1,2,3, 4,5,6,7,8,9]"}, {"x": 522.0, "y": 2933.0, "w": 2258.0, "h": 160.0, "line_num": 14, "text": "result = find_Ligst_smallst (numberis)"}, {"x": 555.0, "y": 3217.0, "w": 859.0, "h": 171.0, "line_num": 15, "text": "print (result)"}, {"x": 2100.0, "y": 3896.0, "w": 727.0, "h": 99.0, "line_num": 16, "text": "\u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def find_Ligst_smallst (number):\n    if not numbers:\n        Return none\n    Smallest= largest = number [0]\n    for num in\n        in numbers :\n        if num < smallest:\n            smallest = num\n        if num > Largest :\n            Largest = num\n    tieturin smallest, Largest\n# Example usage.\n    numbers = [1,2,3, 4,5,6,7,8,9]\n    result = find_Ligst_smallst (numberis)\n    print (result)\n        \u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c\n", "ir_algo_output_indented_lines": [{"x": 497.0, "y": 307.0, "w": 1733.0, "h": 140.0, "line_num": 1, "text": "def find_Ligst_smallst (number):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 782.0, "y": 529.0, "w": 888.0, "h": 111.0, "line_num": 2, "text": "if not numbers:", "delta": 285.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 1091.0, "y": 682.0, "w": 795.0, "h": 102.0, "line_num": 3, "text": "Return none", "delta": 309.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 827.0, "y": 902.0, "w": 1653.0, "h": 124.0, "line_num": 4, "text": "Smallest= largest = number [0]", "delta": -264.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 762.0, "y": 1234.0, "w": 618.0, "h": 105.0, "line_num": 5, "text": "for num in", "delta": -65.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 1258.0, "y": 1181.0, "w": 805.0, "h": 123.0, "line_num": 6, "text": "in numbers :", "delta": 496.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 1110.0, "y": 1378.0, "w": 1095.0, "h": 149.0, "line_num": 7, "text": "if num < smallest:", "delta": -148.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 1486.0, "y": 1561.0, "w": 947.0, "h": 114.0, "line_num": 8, "text": "smallest = num", "delta": 376.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 1155.0, "y": 1697.0, "w": 1023.0, "h": 163.0, "line_num": 9, "text": "if num > Largest :", "delta": -331.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 1599.0, "y": 1911.0, "w": 907.0, "h": 114.0, "line_num": 10, "text": "Largest = num", "delta": 444.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 788.0, "y": 2143.0, "w": 1690.0, "h": 139.0, "line_num": 11, "text": "tieturin smallest, Largest", "delta": -811.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 420.0, "y": 2489.0, "w": 1104.0, "h": 146.0, "line_num": 12, "text": "# Example usage.", "delta": -368.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 553.0, "y": 2699.0, "w": 2028.0, "h": 139.0, "line_num": 13, "text": "numbers = [1,2,3, 4,5,6,7,8,9]", "delta": 133.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 522.0, "y": 2933.0, "w": 2258.0, "h": 160.0, "line_num": 14, "text": "result = find_Ligst_smallst (numberis)", "delta": -31.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 555.0, "y": 3217.0, "w": 859.0, "h": 171.0, "line_num": 15, "text": "print (result)", "delta": 33.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 2100.0, "y": 3896.0, "w": 727.0, "h": 99.0, "line_num": 16, "text": "\u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c", "delta": 1545.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}], "ir_algo_output_edit_distance": 87, "prompting_method": "cot-test1", "lm_post_processed_code": "def find_Largest_smallest (numbers):\n    if not numbers:\n        return None\n    Smallest= largest = numbers [0]\n    for num in numbers :\n        if num < Smallest:\n            Smallest = num\n        if num > largest :\n            largest = num\n    return Smallest, largest\n# Example usage.\nnumbers = [1,2,3, 4,5,6,7,8,9]\nresult = find_Largest_smallest (numbers)\nprint (result)\n", "lm_post_processed_edit_distance": 31}, {"image_id": 23, "image_height": 4160, "image_width": 3120, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 497.0, "y": 307.0, "w": 1733.0, "h": 140.0, "line_num": 1, "text": "def find_Ligst_smallst (number):"}, {"x": 782.0, "y": 529.0, "w": 888.0, "h": 111.0, "line_num": 2, "text": "if not numbers:"}, {"x": 1091.0, "y": 682.0, "w": 795.0, "h": 102.0, "line_num": 3, "text": "Return none"}, {"x": 827.0, "y": 902.0, "w": 1653.0, "h": 124.0, "line_num": 4, "text": "Smallest= largest = number [0]"}, {"x": 762.0, "y": 1234.0, "w": 618.0, "h": 105.0, "line_num": 5, "text": "for num in"}, {"x": 1258.0, "y": 1181.0, "w": 805.0, "h": 123.0, "line_num": 6, "text": "in numbers :"}, {"x": 1110.0, "y": 1378.0, "w": 1095.0, "h": 149.0, "line_num": 7, "text": "if num < smallest:"}, {"x": 1486.0, "y": 1561.0, "w": 947.0, "h": 114.0, "line_num": 8, "text": "smallest = num"}, {"x": 1155.0, "y": 1697.0, "w": 1023.0, "h": 163.0, "line_num": 9, "text": "if num > Largest :"}, {"x": 1599.0, "y": 1911.0, "w": 907.0, "h": 114.0, "line_num": 10, "text": "Largest = num"}, {"x": 788.0, "y": 2143.0, "w": 1690.0, "h": 139.0, "line_num": 11, "text": "tieturin smallest, Largest"}, {"x": 420.0, "y": 2489.0, "w": 1104.0, "h": 146.0, "line_num": 12, "text": "# Example usage."}, {"x": 553.0, "y": 2699.0, "w": 2028.0, "h": 139.0, "line_num": 13, "text": "numbers = [1,2,3, 4,5,6,7,8,9]"}, {"x": 522.0, "y": 2933.0, "w": 2258.0, "h": 160.0, "line_num": 14, "text": "result = find_Ligst_smallst (numberis)"}, {"x": 555.0, "y": 3217.0, "w": 859.0, "h": 171.0, "line_num": 15, "text": "print (result)"}, {"x": 2100.0, "y": 3896.0, "w": 727.0, "h": 99.0, "line_num": 16, "text": "\u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def find_Ligst_smallst (number):\n    if not numbers:\n        Return none\n    Smallest= largest = number [0]\n    for num in\n        in numbers :\n        if num < smallest:\n            smallest = num\n        if num > Largest :\n            Largest = num\n    tieturin smallest, Largest\n# Example usage.\n    numbers = [1,2,3, 4,5,6,7,8,9]\n    result = find_Ligst_smallst (numberis)\n    print (result)\n        \u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c\n", "ir_algo_output_indented_lines": [{"x": 497.0, "y": 307.0, "w": 1733.0, "h": 140.0, "line_num": 1, "text": "def find_Ligst_smallst (number):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 782.0, "y": 529.0, "w": 888.0, "h": 111.0, "line_num": 2, "text": "if not numbers:", "delta": 285.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 1091.0, "y": 682.0, "w": 795.0, "h": 102.0, "line_num": 3, "text": "Return none", "delta": 309.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 827.0, "y": 902.0, "w": 1653.0, "h": 124.0, "line_num": 4, "text": "Smallest= largest = number [0]", "delta": -264.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 762.0, "y": 1234.0, "w": 618.0, "h": 105.0, "line_num": 5, "text": "for num in", "delta": -65.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 1258.0, "y": 1181.0, "w": 805.0, "h": 123.0, "line_num": 6, "text": "in numbers :", "delta": 496.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 1110.0, "y": 1378.0, "w": 1095.0, "h": 149.0, "line_num": 7, "text": "if num < smallest:", "delta": -148.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 1486.0, "y": 1561.0, "w": 947.0, "h": 114.0, "line_num": 8, "text": "smallest = num", "delta": 376.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 1155.0, "y": 1697.0, "w": 1023.0, "h": 163.0, "line_num": 9, "text": "if num > Largest :", "delta": -331.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 1599.0, "y": 1911.0, "w": 907.0, "h": 114.0, "line_num": 10, "text": "Largest = num", "delta": 444.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 788.0, "y": 2143.0, "w": 1690.0, "h": 139.0, "line_num": 11, "text": "tieturin smallest, Largest", "delta": -811.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 420.0, "y": 2489.0, "w": 1104.0, "h": 146.0, "line_num": 12, "text": "# Example usage.", "delta": -368.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 553.0, "y": 2699.0, "w": 2028.0, "h": 139.0, "line_num": 13, "text": "numbers = [1,2,3, 4,5,6,7,8,9]", "delta": 133.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 522.0, "y": 2933.0, "w": 2258.0, "h": 160.0, "line_num": 14, "text": "result = find_Ligst_smallst (numberis)", "delta": -31.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 555.0, "y": 3217.0, "w": 859.0, "h": 171.0, "line_num": 15, "text": "print (result)", "delta": 33.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 2100.0, "y": 3896.0, "w": 727.0, "h": 99.0, "line_num": 16, "text": "\u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c", "delta": 1545.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}], "ir_algo_output_edit_distance": 87, "prompting_method": "cot-test5", "lm_post_processed_code": "def find_Largest_smallest(numbers):\n    if not numbers:\n        return None\n    Smallest = largest = numbers[0]\n    for num in numbers:\n        if num < Smallest:\n            Smallest = num\n        if num > largest:\n            largest = num\n    return Smallest, largest\n# Example usage.\nnumbers = [1,2,3, 4,5,6,7,8,9]\nresult = find_Largest_smallest(numbers)\nprint(result)\n", "lm_post_processed_edit_distance": 24}, {"image_id": 23, "image_height": 4160, "image_width": 3120, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 497.0, "y": 307.0, "w": 1733.0, "h": 140.0, "line_num": 1, "text": "def find_Ligst_smallst (number):"}, {"x": 782.0, "y": 529.0, "w": 888.0, "h": 111.0, "line_num": 2, "text": "if not numbers:"}, {"x": 1091.0, "y": 682.0, "w": 795.0, "h": 102.0, "line_num": 3, "text": "Return none"}, {"x": 827.0, "y": 902.0, "w": 1653.0, "h": 124.0, "line_num": 4, "text": "Smallest= largest = number [0]"}, {"x": 762.0, "y": 1234.0, "w": 618.0, "h": 105.0, "line_num": 5, "text": "for num in"}, {"x": 1258.0, "y": 1181.0, "w": 805.0, "h": 123.0, "line_num": 6, "text": "in numbers :"}, {"x": 1110.0, "y": 1378.0, "w": 1095.0, "h": 149.0, "line_num": 7, "text": "if num < smallest:"}, {"x": 1486.0, "y": 1561.0, "w": 947.0, "h": 114.0, "line_num": 8, "text": "smallest = num"}, {"x": 1155.0, "y": 1697.0, "w": 1023.0, "h": 163.0, "line_num": 9, "text": "if num > Largest :"}, {"x": 1599.0, "y": 1911.0, "w": 907.0, "h": 114.0, "line_num": 10, "text": "Largest = num"}, {"x": 788.0, "y": 2143.0, "w": 1690.0, "h": 139.0, "line_num": 11, "text": "tieturin smallest, Largest"}, {"x": 420.0, "y": 2489.0, "w": 1104.0, "h": 146.0, "line_num": 12, "text": "# Example usage."}, {"x": 553.0, "y": 2699.0, "w": 2028.0, "h": 139.0, "line_num": 13, "text": "numbers = [1,2,3, 4,5,6,7,8,9]"}, {"x": 522.0, "y": 2933.0, "w": 2258.0, "h": 160.0, "line_num": 14, "text": "result = find_Ligst_smallst (numberis)"}, {"x": 555.0, "y": 3217.0, "w": 859.0, "h": 171.0, "line_num": 15, "text": "print (result)"}, {"x": 2100.0, "y": 3896.0, "w": 727.0, "h": 99.0, "line_num": 16, "text": "\u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def find_Ligst_smallst (number):\n    if not numbers:\n        Return none\n    Smallest= largest = number [0]\n    for num in\n        in numbers :\n        if num < smallest:\n            smallest = num\n        if num > Largest :\n            Largest = num\n    tieturin smallest, Largest\n# Example usage.\n    numbers = [1,2,3, 4,5,6,7,8,9]\n    result = find_Ligst_smallst (numberis)\n    print (result)\n        \u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c\n", "ir_algo_output_indented_lines": [{"x": 497.0, "y": 307.0, "w": 1733.0, "h": 140.0, "line_num": 1, "text": "def find_Ligst_smallst (number):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 782.0, "y": 529.0, "w": 888.0, "h": 111.0, "line_num": 2, "text": "if not numbers:", "delta": 285.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 1091.0, "y": 682.0, "w": 795.0, "h": 102.0, "line_num": 3, "text": "Return none", "delta": 309.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 827.0, "y": 902.0, "w": 1653.0, "h": 124.0, "line_num": 4, "text": "Smallest= largest = number [0]", "delta": -264.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 762.0, "y": 1234.0, "w": 618.0, "h": 105.0, "line_num": 5, "text": "for num in", "delta": -65.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 1258.0, "y": 1181.0, "w": 805.0, "h": 123.0, "line_num": 6, "text": "in numbers :", "delta": 496.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 1110.0, "y": 1378.0, "w": 1095.0, "h": 149.0, "line_num": 7, "text": "if num < smallest:", "delta": -148.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 1486.0, "y": 1561.0, "w": 947.0, "h": 114.0, "line_num": 8, "text": "smallest = num", "delta": 376.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 1155.0, "y": 1697.0, "w": 1023.0, "h": 163.0, "line_num": 9, "text": "if num > Largest :", "delta": -331.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 1599.0, "y": 1911.0, "w": 907.0, "h": 114.0, "line_num": 10, "text": "Largest = num", "delta": 444.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 788.0, "y": 2143.0, "w": 1690.0, "h": 139.0, "line_num": 11, "text": "tieturin smallest, Largest", "delta": -811.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 420.0, "y": 2489.0, "w": 1104.0, "h": 146.0, "line_num": 12, "text": "# Example usage.", "delta": -368.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 553.0, "y": 2699.0, "w": 2028.0, "h": 139.0, "line_num": 13, "text": "numbers = [1,2,3, 4,5,6,7,8,9]", "delta": 133.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 522.0, "y": 2933.0, "w": 2258.0, "h": 160.0, "line_num": 14, "text": "result = find_Ligst_smallst (numberis)", "delta": -31.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 555.0, "y": 3217.0, "w": 859.0, "h": 171.0, "line_num": 15, "text": "print (result)", "delta": 33.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 2100.0, "y": 3896.0, "w": 727.0, "h": 99.0, "line_num": 16, "text": "\u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c", "delta": 1545.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}], "ir_algo_output_edit_distance": 87, "prompting_method": "simple-test2", "lm_post_processed_code": "def find_Largest_smallest(numbers):\n    if not numbers:\n        return None\n    smallest = largest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    return smallest, largest\n# Example usage.\nnumbers = [1,2,3, 4,5,6,7,8,9]\nresult = find_Largest_smallest(numbers)\nprint(result)\n", "lm_post_processed_edit_distance": 20}, {"image_id": 23, "image_height": 4160, "image_width": 3120, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 497.0, "y": 307.0, "w": 1733.0, "h": 140.0, "line_num": 1, "text": "def find_Ligst_smallst (number):"}, {"x": 782.0, "y": 529.0, "w": 888.0, "h": 111.0, "line_num": 2, "text": "if not numbers:"}, {"x": 1091.0, "y": 682.0, "w": 795.0, "h": 102.0, "line_num": 3, "text": "Return none"}, {"x": 827.0, "y": 902.0, "w": 1653.0, "h": 124.0, "line_num": 4, "text": "Smallest= largest = number [0]"}, {"x": 762.0, "y": 1234.0, "w": 618.0, "h": 105.0, "line_num": 5, "text": "for num in"}, {"x": 1258.0, "y": 1181.0, "w": 805.0, "h": 123.0, "line_num": 6, "text": "in numbers :"}, {"x": 1110.0, "y": 1378.0, "w": 1095.0, "h": 149.0, "line_num": 7, "text": "if num < smallest:"}, {"x": 1486.0, "y": 1561.0, "w": 947.0, "h": 114.0, "line_num": 8, "text": "smallest = num"}, {"x": 1155.0, "y": 1697.0, "w": 1023.0, "h": 163.0, "line_num": 9, "text": "if num > Largest :"}, {"x": 1599.0, "y": 1911.0, "w": 907.0, "h": 114.0, "line_num": 10, "text": "Largest = num"}, {"x": 788.0, "y": 2143.0, "w": 1690.0, "h": 139.0, "line_num": 11, "text": "tieturin smallest, Largest"}, {"x": 420.0, "y": 2489.0, "w": 1104.0, "h": 146.0, "line_num": 12, "text": "# Example usage."}, {"x": 553.0, "y": 2699.0, "w": 2028.0, "h": 139.0, "line_num": 13, "text": "numbers = [1,2,3, 4,5,6,7,8,9]"}, {"x": 522.0, "y": 2933.0, "w": 2258.0, "h": 160.0, "line_num": 14, "text": "result = find_Ligst_smallst (numberis)"}, {"x": 555.0, "y": 3217.0, "w": 859.0, "h": 171.0, "line_num": 15, "text": "print (result)"}, {"x": 2100.0, "y": 3896.0, "w": 727.0, "h": 99.0, "line_num": 16, "text": "\u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def find_Ligst_smallst (number):\n    if not numbers:\n        Return none\n    Smallest= largest = number [0]\n    for num in\n        in numbers :\n        if num < smallest:\n            smallest = num\n        if num > Largest :\n            Largest = num\n    tieturin smallest, Largest\n# Example usage.\n    numbers = [1,2,3, 4,5,6,7,8,9]\n    result = find_Ligst_smallst (numberis)\n    print (result)\n        \u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c\n", "ir_algo_output_indented_lines": [{"x": 497.0, "y": 307.0, "w": 1733.0, "h": 140.0, "line_num": 1, "text": "def find_Ligst_smallst (number):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 782.0, "y": 529.0, "w": 888.0, "h": 111.0, "line_num": 2, "text": "if not numbers:", "delta": 285.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 1091.0, "y": 682.0, "w": 795.0, "h": 102.0, "line_num": 3, "text": "Return none", "delta": 309.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 827.0, "y": 902.0, "w": 1653.0, "h": 124.0, "line_num": 4, "text": "Smallest= largest = number [0]", "delta": -264.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 762.0, "y": 1234.0, "w": 618.0, "h": 105.0, "line_num": 5, "text": "for num in", "delta": -65.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 1258.0, "y": 1181.0, "w": 805.0, "h": 123.0, "line_num": 6, "text": "in numbers :", "delta": 496.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 1110.0, "y": 1378.0, "w": 1095.0, "h": 149.0, "line_num": 7, "text": "if num < smallest:", "delta": -148.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 1486.0, "y": 1561.0, "w": 947.0, "h": 114.0, "line_num": 8, "text": "smallest = num", "delta": 376.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 1155.0, "y": 1697.0, "w": 1023.0, "h": 163.0, "line_num": 9, "text": "if num > Largest :", "delta": -331.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 1599.0, "y": 1911.0, "w": 907.0, "h": 114.0, "line_num": 10, "text": "Largest = num", "delta": 444.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 788.0, "y": 2143.0, "w": 1690.0, "h": 139.0, "line_num": 11, "text": "tieturin smallest, Largest", "delta": -811.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 420.0, "y": 2489.0, "w": 1104.0, "h": 146.0, "line_num": 12, "text": "# Example usage.", "delta": -368.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 553.0, "y": 2699.0, "w": 2028.0, "h": 139.0, "line_num": 13, "text": "numbers = [1,2,3, 4,5,6,7,8,9]", "delta": 133.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 522.0, "y": 2933.0, "w": 2258.0, "h": 160.0, "line_num": 14, "text": "result = find_Ligst_smallst (numberis)", "delta": -31.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 555.0, "y": 3217.0, "w": 859.0, "h": 171.0, "line_num": 15, "text": "print (result)", "delta": 33.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 2100.0, "y": 3896.0, "w": 727.0, "h": 99.0, "line_num": 16, "text": "\u0907\u092e\u093e\u092e-\u091c\u0924\u094d\u0930\u093e\u0938 \u092e\u093f\u0915\u094d\u0915\u093e \u0936\u0928\u093f\u0935\u093e\u091c\u093c", "delta": 1545.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}], "ir_algo_output_edit_distance": 87, "prompting_method": "simple-test3", "lm_post_processed_code": "def find_largest_smallest(numbers):\n    if not numbers:\n        return None\n    smallest = largest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    return smallest, largest\n# Example usage.\nnumbers = [1,2,3, 4,5,6,7,8,9]\nresult = find_largest_smallest(numbers)\nprint(result)\n", "lm_post_processed_edit_distance": 18}, {"image_id": 25, "image_height": 3393, "image_width": 2984, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 263.0, "y": 39.0, "w": 597.0, "h": 83.0, "line_num": 1, "text": "def is-prime (n):"}, {"x": 423.0, "y": 168.0, "w": 91.0, "h": 41.0, "line_num": 2, "text": "1104"}, {"x": 434.0, "y": 240.0, "w": 1471.0, "h": 96.0, "line_num": 3, "text": "Returns True if n is prime, False otherwise"}, {"x": 435.0, "y": 395.0, "w": 79.0, "h": 41.0, "line_num": 4, "text": "11011"}, {"x": 426.0, "y": 487.0, "w": 397.0, "h": 81.0, "line_num": 5, "text": "if n < = 1 :"}, {"x": 606.0, "y": 627.0, "w": 461.0, "h": 72.0, "line_num": 6, "text": "return False"}, {"x": 420.0, "y": 752.0, "w": 1117.0, "h": 86.0, "line_num": 7, "text": "for i in range (2, int(n* 0.5) +1):"}, {"x": 552.0, "y": 903.0, "w": 571.0, "h": 86.0, "line_num": 8, "text": "if n % i == 0."}, {"x": 725.0, "y": 1068.0, "w": 429.0, "h": 71.0, "line_num": 9, "text": "return False"}, {"x": 427.0, "y": 1166.0, "w": 499.0, "h": 127.0, "line_num": 10, "text": "return True"}, {"x": 281.0, "y": 1481.0, "w": 437.0, "h": 80.0, "line_num": 11, "text": "def main () :"}, {"x": 491.0, "y": 1609.0, "w": 85.0, "h": 44.0, "line_num": 12, "text": "11 /11"}, {"x": 457.0, "y": 1694.0, "w": 621.0, "h": 134.0, "line_num": 13, "text": "The main function ."}, {"x": 477.0, "y": 1846.0, "w": 118.0, "h": 39.0, "line_num": 14, "text": "/11.11"}, {"x": 474.0, "y": 1934.0, "w": 1157.0, "h": 82.0, "line_num": 15, "text": "n = int ( input (\"Enter a number: \")"}, {"x": 470.0, "y": 2057.0, "w": 511.0, "h": 88.0, "line_num": 16, "text": "if is-prime (n):"}, {"x": 589.0, "y": 2186.0, "w": 1057.0, "h": 92.0, "line_num": 17, "text": "print (n, \" is a prime number. \")"}, {"x": 451.0, "y": 2349.0, "w": 178.0, "h": 72.0, "line_num": 18, "text": "else :"}, {"x": 587.0, "y": 2471.0, "w": 1181.0, "h": 84.0, "line_num": 19, "text": "print( n, \" is not a prime number. \")"}, {"x": 333.0, "y": 2650.0, "w": 87.0, "h": 85.0, "line_num": 20, "text": "if"}, {"x": 462.0, "y": 2678.0, "w": 642.0, "h": 80.0, "line_num": 21, "text": "-- name __ == \""}, {"x": 974.0, "y": 2706.0, "w": 503.0, "h": 84.0, "line_num": 22, "text": "- - main __ :"}, {"x": 474.0, "y": 2838.0, "w": 210.0, "h": 75.0, "line_num": 23, "text": "main ( )"}], "ir_algo_name": "none", "ir_algo_output_code": "def is-prime (n):\n1104\nReturns True if n is prime, False otherwise\n11011\nif n < = 1 :\nreturn False\nfor i in range (2, int(n* 0.5) +1):\nif n % i == 0.\nreturn False\nreturn True\ndef main () :\n11 /11\nThe main function .\n/11.11\nn = int ( input (\"Enter a number: \")\nif is-prime (n):\nprint (n, \" is a prime number. \")\nelse :\nprint( n, \" is not a prime number. \")\nif\n-- name __ == \"\n- - main __ :\nmain ( )", "ir_algo_output_edit_distance": 149, "prompting_method": "none", "lm_post_processed_code": "def is-prime (n):\n1104\nReturns True if n is prime, False otherwise\n11011\nif n < = 1 :\nreturn False\nfor i in range (2, int(n* 0.5) +1):\nif n % i == 0.\nreturn False\nreturn True\ndef main () :\n11 /11\nThe main function .\n/11.11\nn = int ( input (\"Enter a number: \")\nif is-prime (n):\nprint (n, \" is a prime number. \")\nelse :\nprint( n, \" is not a prime number. \")\nif\n-- name __ == \"\n- - main __ :\nmain ( )", "lm_post_processed_edit_distance": 149}, {"image_id": 25, "image_height": 3393, "image_width": 2984, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 263.0, "y": 39.0, "w": 597.0, "h": 83.0, "line_num": 1, "text": "def is-prime (n):"}, {"x": 423.0, "y": 168.0, "w": 91.0, "h": 41.0, "line_num": 2, "text": "1104"}, {"x": 434.0, "y": 240.0, "w": 1471.0, "h": 96.0, "line_num": 3, "text": "Returns True if n is prime, False otherwise"}, {"x": 435.0, "y": 395.0, "w": 79.0, "h": 41.0, "line_num": 4, "text": "11011"}, {"x": 426.0, "y": 487.0, "w": 397.0, "h": 81.0, "line_num": 5, "text": "if n < = 1 :"}, {"x": 606.0, "y": 627.0, "w": 461.0, "h": 72.0, "line_num": 6, "text": "return False"}, {"x": 420.0, "y": 752.0, "w": 1117.0, "h": 86.0, "line_num": 7, "text": "for i in range (2, int(n* 0.5) +1):"}, {"x": 552.0, "y": 903.0, "w": 571.0, "h": 86.0, "line_num": 8, "text": "if n % i == 0."}, {"x": 725.0, "y": 1068.0, "w": 429.0, "h": 71.0, "line_num": 9, "text": "return False"}, {"x": 427.0, "y": 1166.0, "w": 499.0, "h": 127.0, "line_num": 10, "text": "return True"}, {"x": 281.0, "y": 1481.0, "w": 437.0, "h": 80.0, "line_num": 11, "text": "def main () :"}, {"x": 491.0, "y": 1609.0, "w": 85.0, "h": 44.0, "line_num": 12, "text": "11 /11"}, {"x": 457.0, "y": 1694.0, "w": 621.0, "h": 134.0, "line_num": 13, "text": "The main function ."}, {"x": 477.0, "y": 1846.0, "w": 118.0, "h": 39.0, "line_num": 14, "text": "/11.11"}, {"x": 474.0, "y": 1934.0, "w": 1157.0, "h": 82.0, "line_num": 15, "text": "n = int ( input (\"Enter a number: \")"}, {"x": 470.0, "y": 2057.0, "w": 511.0, "h": 88.0, "line_num": 16, "text": "if is-prime (n):"}, {"x": 589.0, "y": 2186.0, "w": 1057.0, "h": 92.0, "line_num": 17, "text": "print (n, \" is a prime number. \")"}, {"x": 451.0, "y": 2349.0, "w": 178.0, "h": 72.0, "line_num": 18, "text": "else :"}, {"x": 587.0, "y": 2471.0, "w": 1181.0, "h": 84.0, "line_num": 19, "text": "print( n, \" is not a prime number. \")"}, {"x": 333.0, "y": 2650.0, "w": 87.0, "h": 85.0, "line_num": 20, "text": "if"}, {"x": 462.0, "y": 2678.0, "w": 642.0, "h": 80.0, "line_num": 21, "text": "-- name __ == \""}, {"x": 974.0, "y": 2706.0, "w": 503.0, "h": 84.0, "line_num": 22, "text": "- - main __ :"}, {"x": 474.0, "y": 2838.0, "w": 210.0, "h": 75.0, "line_num": 23, "text": "main ( )"}], "ir_algo_name": "none", "ir_algo_output_code": "def is-prime (n):\n1104\nReturns True if n is prime, False otherwise\n11011\nif n < = 1 :\nreturn False\nfor i in range (2, int(n* 0.5) +1):\nif n % i == 0.\nreturn False\nreturn True\ndef main () :\n11 /11\nThe main function .\n/11.11\nn = int ( input (\"Enter a number: \")\nif is-prime (n):\nprint (n, \" is a prime number. \")\nelse :\nprint( n, \" is not a prime number. \")\nif\n-- name __ == \"\n- - main __ :\nmain ( )", "ir_algo_output_edit_distance": 149, "prompting_method": "cot-test1", "lm_post_processed_code": "def is_prime(n):\nReturns True if n is prime, False otherwise\nif n <= 1 :\nreturn False\nfor i in range (2, int(n* 0.5) +1):\nif n % i == 0:\nreturn False\nreturn True\n\ndef main () :\nThe main function .\nn = int ( input (\"Enter a number: \")\nif is_prime (n):\nprint (n, \" is a prime number. \")\nelse :\nprint( n, \" is not a prime number. \")\n\nif __name__ == \"__main__\":\nmain ()\n", "lm_post_processed_edit_distance": 131}, {"image_id": 25, "image_height": 3393, "image_width": 2984, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 263.0, "y": 39.0, "w": 597.0, "h": 83.0, "line_num": 1, "text": "def is-prime (n):"}, {"x": 423.0, "y": 168.0, "w": 91.0, "h": 41.0, "line_num": 2, "text": "1104"}, {"x": 434.0, "y": 240.0, "w": 1471.0, "h": 96.0, "line_num": 3, "text": "Returns True if n is prime, False otherwise"}, {"x": 435.0, "y": 395.0, "w": 79.0, "h": 41.0, "line_num": 4, "text": "11011"}, {"x": 426.0, "y": 487.0, "w": 397.0, "h": 81.0, "line_num": 5, "text": "if n < = 1 :"}, {"x": 606.0, "y": 627.0, "w": 461.0, "h": 72.0, "line_num": 6, "text": "return False"}, {"x": 420.0, "y": 752.0, "w": 1117.0, "h": 86.0, "line_num": 7, "text": "for i in range (2, int(n* 0.5) +1):"}, {"x": 552.0, "y": 903.0, "w": 571.0, "h": 86.0, "line_num": 8, "text": "if n % i == 0."}, {"x": 725.0, "y": 1068.0, "w": 429.0, "h": 71.0, "line_num": 9, "text": "return False"}, {"x": 427.0, "y": 1166.0, "w": 499.0, "h": 127.0, "line_num": 10, "text": "return True"}, {"x": 281.0, "y": 1481.0, "w": 437.0, "h": 80.0, "line_num": 11, "text": "def main () :"}, {"x": 491.0, "y": 1609.0, "w": 85.0, "h": 44.0, "line_num": 12, "text": "11 /11"}, {"x": 457.0, "y": 1694.0, "w": 621.0, "h": 134.0, "line_num": 13, "text": "The main function ."}, {"x": 477.0, "y": 1846.0, "w": 118.0, "h": 39.0, "line_num": 14, "text": "/11.11"}, {"x": 474.0, "y": 1934.0, "w": 1157.0, "h": 82.0, "line_num": 15, "text": "n = int ( input (\"Enter a number: \")"}, {"x": 470.0, "y": 2057.0, "w": 511.0, "h": 88.0, "line_num": 16, "text": "if is-prime (n):"}, {"x": 589.0, "y": 2186.0, "w": 1057.0, "h": 92.0, "line_num": 17, "text": "print (n, \" is a prime number. \")"}, {"x": 451.0, "y": 2349.0, "w": 178.0, "h": 72.0, "line_num": 18, "text": "else :"}, {"x": 587.0, "y": 2471.0, "w": 1181.0, "h": 84.0, "line_num": 19, "text": "print( n, \" is not a prime number. \")"}, {"x": 333.0, "y": 2650.0, "w": 87.0, "h": 85.0, "line_num": 20, "text": "if"}, {"x": 462.0, "y": 2678.0, "w": 642.0, "h": 80.0, "line_num": 21, "text": "-- name __ == \""}, {"x": 974.0, "y": 2706.0, "w": 503.0, "h": 84.0, "line_num": 22, "text": "- - main __ :"}, {"x": 474.0, "y": 2838.0, "w": 210.0, "h": 75.0, "line_num": 23, "text": "main ( )"}], "ir_algo_name": "none", "ir_algo_output_code": "def is-prime (n):\n1104\nReturns True if n is prime, False otherwise\n11011\nif n < = 1 :\nreturn False\nfor i in range (2, int(n* 0.5) +1):\nif n % i == 0.\nreturn False\nreturn True\ndef main () :\n11 /11\nThe main function .\n/11.11\nn = int ( input (\"Enter a number: \")\nif is-prime (n):\nprint (n, \" is a prime number. \")\nelse :\nprint( n, \" is not a prime number. \")\nif\n-- name __ == \"\n- - main __ :\nmain ( )", "ir_algo_output_edit_distance": 149, "prompting_method": "cot-test5", "lm_post_processed_code": "def is_prime(n):\nReturns True if n is prime, False otherwise\nif n <= 1 :\nreturn False\nfor i in range (2, int(n* 0.5) +1):\nif n % i == 0:\nreturn False\nreturn True\n\ndef main () :\nThe main function .\nn = int ( input (\"Enter a number: \"))\nif is_prime(n):\nprint (n, \" is a prime number. \")\nelse :\nprint( n, \" is not a prime number. \")\n\nif __name__ == \"__main__\":\nmain ()\n", "lm_post_processed_edit_distance": 129}, {"image_id": 25, "image_height": 3393, "image_width": 2984, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 263.0, "y": 39.0, "w": 597.0, "h": 83.0, "line_num": 1, "text": "def is-prime (n):"}, {"x": 423.0, "y": 168.0, "w": 91.0, "h": 41.0, "line_num": 2, "text": "1104"}, {"x": 434.0, "y": 240.0, "w": 1471.0, "h": 96.0, "line_num": 3, "text": "Returns True if n is prime, False otherwise"}, {"x": 435.0, "y": 395.0, "w": 79.0, "h": 41.0, "line_num": 4, "text": "11011"}, {"x": 426.0, "y": 487.0, "w": 397.0, "h": 81.0, "line_num": 5, "text": "if n < = 1 :"}, {"x": 606.0, "y": 627.0, "w": 461.0, "h": 72.0, "line_num": 6, "text": "return False"}, {"x": 420.0, "y": 752.0, "w": 1117.0, "h": 86.0, "line_num": 7, "text": "for i in range (2, int(n* 0.5) +1):"}, {"x": 552.0, "y": 903.0, "w": 571.0, "h": 86.0, "line_num": 8, "text": "if n % i == 0."}, {"x": 725.0, "y": 1068.0, "w": 429.0, "h": 71.0, "line_num": 9, "text": "return False"}, {"x": 427.0, "y": 1166.0, "w": 499.0, "h": 127.0, "line_num": 10, "text": "return True"}, {"x": 281.0, "y": 1481.0, "w": 437.0, "h": 80.0, "line_num": 11, "text": "def main () :"}, {"x": 491.0, "y": 1609.0, "w": 85.0, "h": 44.0, "line_num": 12, "text": "11 /11"}, {"x": 457.0, "y": 1694.0, "w": 621.0, "h": 134.0, "line_num": 13, "text": "The main function ."}, {"x": 477.0, "y": 1846.0, "w": 118.0, "h": 39.0, "line_num": 14, "text": "/11.11"}, {"x": 474.0, "y": 1934.0, "w": 1157.0, "h": 82.0, "line_num": 15, "text": "n = int ( input (\"Enter a number: \")"}, {"x": 470.0, "y": 2057.0, "w": 511.0, "h": 88.0, "line_num": 16, "text": "if is-prime (n):"}, {"x": 589.0, "y": 2186.0, "w": 1057.0, "h": 92.0, "line_num": 17, "text": "print (n, \" is a prime number. \")"}, {"x": 451.0, "y": 2349.0, "w": 178.0, "h": 72.0, "line_num": 18, "text": "else :"}, {"x": 587.0, "y": 2471.0, "w": 1181.0, "h": 84.0, "line_num": 19, "text": "print( n, \" is not a prime number. \")"}, {"x": 333.0, "y": 2650.0, "w": 87.0, "h": 85.0, "line_num": 20, "text": "if"}, {"x": 462.0, "y": 2678.0, "w": 642.0, "h": 80.0, "line_num": 21, "text": "-- name __ == \""}, {"x": 974.0, "y": 2706.0, "w": 503.0, "h": 84.0, "line_num": 22, "text": "- - main __ :"}, {"x": 474.0, "y": 2838.0, "w": 210.0, "h": 75.0, "line_num": 23, "text": "main ( )"}], "ir_algo_name": "none", "ir_algo_output_code": "def is-prime (n):\n1104\nReturns True if n is prime, False otherwise\n11011\nif n < = 1 :\nreturn False\nfor i in range (2, int(n* 0.5) +1):\nif n % i == 0.\nreturn False\nreturn True\ndef main () :\n11 /11\nThe main function .\n/11.11\nn = int ( input (\"Enter a number: \")\nif is-prime (n):\nprint (n, \" is a prime number. \")\nelse :\nprint( n, \" is not a prime number. \")\nif\n-- name __ == \"\n- - main __ :\nmain ( )", "ir_algo_output_edit_distance": 149, "prompting_method": "simple-test2", "lm_post_processed_code": "def is_prime(n):\n    # Returns True if n is prime, False otherwise\n    if n <= 1:\n        return False\n    for i in range(2, int(n*0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef main():\n    # The main function.\n    n = int(input(\"Enter a number: \"))\n    if is_prime(n):\n        print(n, \"is a prime number.\")\n    else:\n        print(n, \"is not a prime number.\")\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 32}, {"image_id": 25, "image_height": 3393, "image_width": 2984, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 263.0, "y": 39.0, "w": 597.0, "h": 83.0, "line_num": 1, "text": "def is-prime (n):"}, {"x": 423.0, "y": 168.0, "w": 91.0, "h": 41.0, "line_num": 2, "text": "1104"}, {"x": 434.0, "y": 240.0, "w": 1471.0, "h": 96.0, "line_num": 3, "text": "Returns True if n is prime, False otherwise"}, {"x": 435.0, "y": 395.0, "w": 79.0, "h": 41.0, "line_num": 4, "text": "11011"}, {"x": 426.0, "y": 487.0, "w": 397.0, "h": 81.0, "line_num": 5, "text": "if n < = 1 :"}, {"x": 606.0, "y": 627.0, "w": 461.0, "h": 72.0, "line_num": 6, "text": "return False"}, {"x": 420.0, "y": 752.0, "w": 1117.0, "h": 86.0, "line_num": 7, "text": "for i in range (2, int(n* 0.5) +1):"}, {"x": 552.0, "y": 903.0, "w": 571.0, "h": 86.0, "line_num": 8, "text": "if n % i == 0."}, {"x": 725.0, "y": 1068.0, "w": 429.0, "h": 71.0, "line_num": 9, "text": "return False"}, {"x": 427.0, "y": 1166.0, "w": 499.0, "h": 127.0, "line_num": 10, "text": "return True"}, {"x": 281.0, "y": 1481.0, "w": 437.0, "h": 80.0, "line_num": 11, "text": "def main () :"}, {"x": 491.0, "y": 1609.0, "w": 85.0, "h": 44.0, "line_num": 12, "text": "11 /11"}, {"x": 457.0, "y": 1694.0, "w": 621.0, "h": 134.0, "line_num": 13, "text": "The main function ."}, {"x": 477.0, "y": 1846.0, "w": 118.0, "h": 39.0, "line_num": 14, "text": "/11.11"}, {"x": 474.0, "y": 1934.0, "w": 1157.0, "h": 82.0, "line_num": 15, "text": "n = int ( input (\"Enter a number: \")"}, {"x": 470.0, "y": 2057.0, "w": 511.0, "h": 88.0, "line_num": 16, "text": "if is-prime (n):"}, {"x": 589.0, "y": 2186.0, "w": 1057.0, "h": 92.0, "line_num": 17, "text": "print (n, \" is a prime number. \")"}, {"x": 451.0, "y": 2349.0, "w": 178.0, "h": 72.0, "line_num": 18, "text": "else :"}, {"x": 587.0, "y": 2471.0, "w": 1181.0, "h": 84.0, "line_num": 19, "text": "print( n, \" is not a prime number. \")"}, {"x": 333.0, "y": 2650.0, "w": 87.0, "h": 85.0, "line_num": 20, "text": "if"}, {"x": 462.0, "y": 2678.0, "w": 642.0, "h": 80.0, "line_num": 21, "text": "-- name __ == \""}, {"x": 974.0, "y": 2706.0, "w": 503.0, "h": 84.0, "line_num": 22, "text": "- - main __ :"}, {"x": 474.0, "y": 2838.0, "w": 210.0, "h": 75.0, "line_num": 23, "text": "main ( )"}], "ir_algo_name": "none", "ir_algo_output_code": "def is-prime (n):\n1104\nReturns True if n is prime, False otherwise\n11011\nif n < = 1 :\nreturn False\nfor i in range (2, int(n* 0.5) +1):\nif n % i == 0.\nreturn False\nreturn True\ndef main () :\n11 /11\nThe main function .\n/11.11\nn = int ( input (\"Enter a number: \")\nif is-prime (n):\nprint (n, \" is a prime number. \")\nelse :\nprint( n, \" is not a prime number. \")\nif\n-- name __ == \"\n- - main __ :\nmain ( )", "ir_algo_output_edit_distance": 149, "prompting_method": "simple-test3", "lm_post_processed_code": "def is_prime(n):\n    # Returns True if n is prime, False otherwise\n    if n <= 1:\n        return False\n    for i in range(2, int(n*0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef main():\n    # The main function.\n    n = int(input(\"Enter a number: \"))\n    if is_prime(n):\n        print(n, \"is a prime number.\")\n    else:\n        print(n, \"is not a prime number.\")\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 32}, {"image_id": 25, "image_height": 3393, "image_width": 2984, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 263.0, "y": 39.0, "w": 597.0, "h": 83.0, "line_num": 1, "text": "def is-prime (n):"}, {"x": 423.0, "y": 168.0, "w": 91.0, "h": 41.0, "line_num": 2, "text": "1104"}, {"x": 434.0, "y": 240.0, "w": 1471.0, "h": 96.0, "line_num": 3, "text": "Returns True if n is prime, False otherwise"}, {"x": 435.0, "y": 395.0, "w": 79.0, "h": 41.0, "line_num": 4, "text": "11011"}, {"x": 426.0, "y": 487.0, "w": 397.0, "h": 81.0, "line_num": 5, "text": "if n < = 1 :"}, {"x": 606.0, "y": 627.0, "w": 461.0, "h": 72.0, "line_num": 6, "text": "return False"}, {"x": 420.0, "y": 752.0, "w": 1117.0, "h": 86.0, "line_num": 7, "text": "for i in range (2, int(n* 0.5) +1):"}, {"x": 552.0, "y": 903.0, "w": 571.0, "h": 86.0, "line_num": 8, "text": "if n % i == 0."}, {"x": 725.0, "y": 1068.0, "w": 429.0, "h": 71.0, "line_num": 9, "text": "return False"}, {"x": 427.0, "y": 1166.0, "w": 499.0, "h": 127.0, "line_num": 10, "text": "return True"}, {"x": 281.0, "y": 1481.0, "w": 437.0, "h": 80.0, "line_num": 11, "text": "def main () :"}, {"x": 491.0, "y": 1609.0, "w": 85.0, "h": 44.0, "line_num": 12, "text": "11 /11"}, {"x": 457.0, "y": 1694.0, "w": 621.0, "h": 134.0, "line_num": 13, "text": "The main function ."}, {"x": 477.0, "y": 1846.0, "w": 118.0, "h": 39.0, "line_num": 14, "text": "/11.11"}, {"x": 474.0, "y": 1934.0, "w": 1157.0, "h": 82.0, "line_num": 15, "text": "n = int ( input (\"Enter a number: \")"}, {"x": 470.0, "y": 2057.0, "w": 511.0, "h": 88.0, "line_num": 16, "text": "if is-prime (n):"}, {"x": 589.0, "y": 2186.0, "w": 1057.0, "h": 92.0, "line_num": 17, "text": "print (n, \" is a prime number. \")"}, {"x": 451.0, "y": 2349.0, "w": 178.0, "h": 72.0, "line_num": 18, "text": "else :"}, {"x": 587.0, "y": 2471.0, "w": 1181.0, "h": 84.0, "line_num": 19, "text": "print( n, \" is not a prime number. \")"}, {"x": 333.0, "y": 2650.0, "w": 87.0, "h": 85.0, "line_num": 20, "text": "if"}, {"x": 462.0, "y": 2678.0, "w": 642.0, "h": 80.0, "line_num": 21, "text": "-- name __ == \""}, {"x": 974.0, "y": 2706.0, "w": 503.0, "h": 84.0, "line_num": 22, "text": "- - main __ :"}, {"x": 474.0, "y": 2838.0, "w": 210.0, "h": 75.0, "line_num": 23, "text": "main ( )"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 118.8913043478261, "ir_algo_output_code": "def is-prime (n):\n    1104\n    Returns True if n is prime, False otherwise\n    11011\n    if n < = 1 :\n        return False\n    for i in range (2, int(n* 0.5) +1):\n    if n % i == 0.\n        return False\n    return True\ndef main () :\n    11 /11\n    The main function .\n    /11.11\n    n = int ( input (\"Enter a number: \")\n    if is-prime (n):\n    print (n, \" is a prime number. \")\n    else :\n    print( n, \" is not a prime number. \")\nif\n    -- name __ == \"\n            - - main __ :\n    main ( )\n", "ir_algo_output_indented_lines": [{"x": 263.0, "y": 39.0, "w": 597.0, "h": 83.0, "line_num": 1, "text": "def is-prime (n):", "cluster_label": 1, "indentation": 0}, {"x": 423.0, "y": 168.0, "w": 91.0, "h": 41.0, "line_num": 2, "text": "1104", "cluster_label": 0, "indentation": 1}, {"x": 434.0, "y": 240.0, "w": 1471.0, "h": 96.0, "line_num": 3, "text": "Returns True if n is prime, False otherwise", "cluster_label": 0, "indentation": 1}, {"x": 435.0, "y": 395.0, "w": 79.0, "h": 41.0, "line_num": 4, "text": "11011", "cluster_label": 0, "indentation": 1}, {"x": 426.0, "y": 487.0, "w": 397.0, "h": 81.0, "line_num": 5, "text": "if n < = 1 :", "cluster_label": 0, "indentation": 1}, {"x": 606.0, "y": 627.0, "w": 461.0, "h": 72.0, "line_num": 6, "text": "return False", "cluster_label": 3, "indentation": 2}, {"x": 420.0, "y": 752.0, "w": 1117.0, "h": 86.0, "line_num": 7, "text": "for i in range (2, int(n* 0.5) +1):", "cluster_label": 0, "indentation": 1}, {"x": 552.0, "y": 903.0, "w": 571.0, "h": 86.0, "line_num": 8, "text": "if n % i == 0.", "cluster_label": 0, "indentation": 1}, {"x": 725.0, "y": 1068.0, "w": 429.0, "h": 71.0, "line_num": 9, "text": "return False", "cluster_label": 3, "indentation": 2}, {"x": 427.0, "y": 1166.0, "w": 499.0, "h": 127.0, "line_num": 10, "text": "return True", "cluster_label": 0, "indentation": 1}, {"x": 281.0, "y": 1481.0, "w": 437.0, "h": 80.0, "line_num": 11, "text": "def main () :", "cluster_label": 1, "indentation": 0}, {"x": 491.0, "y": 1609.0, "w": 85.0, "h": 44.0, "line_num": 12, "text": "11 /11", "cluster_label": 0, "indentation": 1}, {"x": 457.0, "y": 1694.0, "w": 621.0, "h": 134.0, "line_num": 13, "text": "The main function .", "cluster_label": 0, "indentation": 1}, {"x": 477.0, "y": 1846.0, "w": 118.0, "h": 39.0, "line_num": 14, "text": "/11.11", "cluster_label": 0, "indentation": 1}, {"x": 474.0, "y": 1934.0, "w": 1157.0, "h": 82.0, "line_num": 15, "text": "n = int ( input (\"Enter a number: \")", "cluster_label": 0, "indentation": 1}, {"x": 470.0, "y": 2057.0, "w": 511.0, "h": 88.0, "line_num": 16, "text": "if is-prime (n):", "cluster_label": 0, "indentation": 1}, {"x": 589.0, "y": 2186.0, "w": 1057.0, "h": 92.0, "line_num": 17, "text": "print (n, \" is a prime number. \")", "cluster_label": 0, "indentation": 1}, {"x": 451.0, "y": 2349.0, "w": 178.0, "h": 72.0, "line_num": 18, "text": "else :", "cluster_label": 0, "indentation": 1}, {"x": 587.0, "y": 2471.0, "w": 1181.0, "h": 84.0, "line_num": 19, "text": "print( n, \" is not a prime number. \")", "cluster_label": 0, "indentation": 1}, {"x": 333.0, "y": 2650.0, "w": 87.0, "h": 85.0, "line_num": 20, "text": "if", "cluster_label": 1, "indentation": 0}, {"x": 462.0, "y": 2678.0, "w": 642.0, "h": 80.0, "line_num": 21, "text": "-- name __ == \"", "cluster_label": 0, "indentation": 1}, {"x": 974.0, "y": 2706.0, "w": 503.0, "h": 84.0, "line_num": 22, "text": "- - main __ :", "cluster_label": 2, "indentation": 3}, {"x": 474.0, "y": 2838.0, "w": 210.0, "h": 75.0, "line_num": 23, "text": "main ( )", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 93, "prompting_method": "none", "lm_post_processed_code": "def is-prime (n):\n    1104\n    Returns True if n is prime, False otherwise\n    11011\n    if n < = 1 :\n        return False\n    for i in range (2, int(n* 0.5) +1):\n    if n % i == 0.\n        return False\n    return True\ndef main () :\n    11 /11\n    The main function .\n    /11.11\n    n = int ( input (\"Enter a number: \")\n    if is-prime (n):\n    print (n, \" is a prime number. \")\n    else :\n    print( n, \" is not a prime number. \")\nif\n    -- name __ == \"\n            - - main __ :\n    main ( )\n", "lm_post_processed_edit_distance": 93}, {"image_id": 25, "image_height": 3393, "image_width": 2984, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 263.0, "y": 39.0, "w": 597.0, "h": 83.0, "line_num": 1, "text": "def is-prime (n):"}, {"x": 423.0, "y": 168.0, "w": 91.0, "h": 41.0, "line_num": 2, "text": "1104"}, {"x": 434.0, "y": 240.0, "w": 1471.0, "h": 96.0, "line_num": 3, "text": "Returns True if n is prime, False otherwise"}, {"x": 435.0, "y": 395.0, "w": 79.0, "h": 41.0, "line_num": 4, "text": "11011"}, {"x": 426.0, "y": 487.0, "w": 397.0, "h": 81.0, "line_num": 5, "text": "if n < = 1 :"}, {"x": 606.0, "y": 627.0, "w": 461.0, "h": 72.0, "line_num": 6, "text": "return False"}, {"x": 420.0, "y": 752.0, "w": 1117.0, "h": 86.0, "line_num": 7, "text": "for i in range (2, int(n* 0.5) +1):"}, {"x": 552.0, "y": 903.0, "w": 571.0, "h": 86.0, "line_num": 8, "text": "if n % i == 0."}, {"x": 725.0, "y": 1068.0, "w": 429.0, "h": 71.0, "line_num": 9, "text": "return False"}, {"x": 427.0, "y": 1166.0, "w": 499.0, "h": 127.0, "line_num": 10, "text": "return True"}, {"x": 281.0, "y": 1481.0, "w": 437.0, "h": 80.0, "line_num": 11, "text": "def main () :"}, {"x": 491.0, "y": 1609.0, "w": 85.0, "h": 44.0, "line_num": 12, "text": "11 /11"}, {"x": 457.0, "y": 1694.0, "w": 621.0, "h": 134.0, "line_num": 13, "text": "The main function ."}, {"x": 477.0, "y": 1846.0, "w": 118.0, "h": 39.0, "line_num": 14, "text": "/11.11"}, {"x": 474.0, "y": 1934.0, "w": 1157.0, "h": 82.0, "line_num": 15, "text": "n = int ( input (\"Enter a number: \")"}, {"x": 470.0, "y": 2057.0, "w": 511.0, "h": 88.0, "line_num": 16, "text": "if is-prime (n):"}, {"x": 589.0, "y": 2186.0, "w": 1057.0, "h": 92.0, "line_num": 17, "text": "print (n, \" is a prime number. \")"}, {"x": 451.0, "y": 2349.0, "w": 178.0, "h": 72.0, "line_num": 18, "text": "else :"}, {"x": 587.0, "y": 2471.0, "w": 1181.0, "h": 84.0, "line_num": 19, "text": "print( n, \" is not a prime number. \")"}, {"x": 333.0, "y": 2650.0, "w": 87.0, "h": 85.0, "line_num": 20, "text": "if"}, {"x": 462.0, "y": 2678.0, "w": 642.0, "h": 80.0, "line_num": 21, "text": "-- name __ == \""}, {"x": 974.0, "y": 2706.0, "w": 503.0, "h": 84.0, "line_num": 22, "text": "- - main __ :"}, {"x": 474.0, "y": 2838.0, "w": 210.0, "h": 75.0, "line_num": 23, "text": "main ( )"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 118.8913043478261, "ir_algo_output_code": "def is-prime (n):\n    1104\n    Returns True if n is prime, False otherwise\n    11011\n    if n < = 1 :\n        return False\n    for i in range (2, int(n* 0.5) +1):\n    if n % i == 0.\n        return False\n    return True\ndef main () :\n    11 /11\n    The main function .\n    /11.11\n    n = int ( input (\"Enter a number: \")\n    if is-prime (n):\n    print (n, \" is a prime number. \")\n    else :\n    print( n, \" is not a prime number. \")\nif\n    -- name __ == \"\n            - - main __ :\n    main ( )\n", "ir_algo_output_indented_lines": [{"x": 263.0, "y": 39.0, "w": 597.0, "h": 83.0, "line_num": 1, "text": "def is-prime (n):", "cluster_label": 1, "indentation": 0}, {"x": 423.0, "y": 168.0, "w": 91.0, "h": 41.0, "line_num": 2, "text": "1104", "cluster_label": 0, "indentation": 1}, {"x": 434.0, "y": 240.0, "w": 1471.0, "h": 96.0, "line_num": 3, "text": "Returns True if n is prime, False otherwise", "cluster_label": 0, "indentation": 1}, {"x": 435.0, "y": 395.0, "w": 79.0, "h": 41.0, "line_num": 4, "text": "11011", "cluster_label": 0, "indentation": 1}, {"x": 426.0, "y": 487.0, "w": 397.0, "h": 81.0, "line_num": 5, "text": "if n < = 1 :", "cluster_label": 0, "indentation": 1}, {"x": 606.0, "y": 627.0, "w": 461.0, "h": 72.0, "line_num": 6, "text": "return False", "cluster_label": 3, "indentation": 2}, {"x": 420.0, "y": 752.0, "w": 1117.0, "h": 86.0, "line_num": 7, "text": "for i in range (2, int(n* 0.5) +1):", "cluster_label": 0, "indentation": 1}, {"x": 552.0, "y": 903.0, "w": 571.0, "h": 86.0, "line_num": 8, "text": "if n % i == 0.", "cluster_label": 0, "indentation": 1}, {"x": 725.0, "y": 1068.0, "w": 429.0, "h": 71.0, "line_num": 9, "text": "return False", "cluster_label": 3, "indentation": 2}, {"x": 427.0, "y": 1166.0, "w": 499.0, "h": 127.0, "line_num": 10, "text": "return True", "cluster_label": 0, "indentation": 1}, {"x": 281.0, "y": 1481.0, "w": 437.0, "h": 80.0, "line_num": 11, "text": "def main () :", "cluster_label": 1, "indentation": 0}, {"x": 491.0, "y": 1609.0, "w": 85.0, "h": 44.0, "line_num": 12, "text": "11 /11", "cluster_label": 0, "indentation": 1}, {"x": 457.0, "y": 1694.0, "w": 621.0, "h": 134.0, "line_num": 13, "text": "The main function .", "cluster_label": 0, "indentation": 1}, {"x": 477.0, "y": 1846.0, "w": 118.0, "h": 39.0, "line_num": 14, "text": "/11.11", "cluster_label": 0, "indentation": 1}, {"x": 474.0, "y": 1934.0, "w": 1157.0, "h": 82.0, "line_num": 15, "text": "n = int ( input (\"Enter a number: \")", "cluster_label": 0, "indentation": 1}, {"x": 470.0, "y": 2057.0, "w": 511.0, "h": 88.0, "line_num": 16, "text": "if is-prime (n):", "cluster_label": 0, "indentation": 1}, {"x": 589.0, "y": 2186.0, "w": 1057.0, "h": 92.0, "line_num": 17, "text": "print (n, \" is a prime number. \")", "cluster_label": 0, "indentation": 1}, {"x": 451.0, "y": 2349.0, "w": 178.0, "h": 72.0, "line_num": 18, "text": "else :", "cluster_label": 0, "indentation": 1}, {"x": 587.0, "y": 2471.0, "w": 1181.0, "h": 84.0, "line_num": 19, "text": "print( n, \" is not a prime number. \")", "cluster_label": 0, "indentation": 1}, {"x": 333.0, "y": 2650.0, "w": 87.0, "h": 85.0, "line_num": 20, "text": "if", "cluster_label": 1, "indentation": 0}, {"x": 462.0, "y": 2678.0, "w": 642.0, "h": 80.0, "line_num": 21, "text": "-- name __ == \"", "cluster_label": 0, "indentation": 1}, {"x": 974.0, "y": 2706.0, "w": 503.0, "h": 84.0, "line_num": 22, "text": "- - main __ :", "cluster_label": 2, "indentation": 3}, {"x": 474.0, "y": 2838.0, "w": 210.0, "h": 75.0, "line_num": 23, "text": "main ( )", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 93, "prompting_method": "cot-test1", "lm_post_processed_code": "def is_prime(n):\nReturns True if n is prime, False otherwise\nif n <= 1:\nreturn False\nfor i in range(2, int(n* 0.5) +1):\nif n % i == 0:\nreturn False\nreturn True\n\ndef main():\nThe main function.\nn = int(input(\"Enter a number: \"))\nif is_prime(n):\nprint(n, \" is a prime number. \")\nelse:\nprint(n, \" is not a prime number. \")\n\nif __name__ == \"__main__\":\nmain()\n", "lm_post_processed_edit_distance": 119}, {"image_id": 25, "image_height": 3393, "image_width": 2984, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 263.0, "y": 39.0, "w": 597.0, "h": 83.0, "line_num": 1, "text": "def is-prime (n):"}, {"x": 423.0, "y": 168.0, "w": 91.0, "h": 41.0, "line_num": 2, "text": "1104"}, {"x": 434.0, "y": 240.0, "w": 1471.0, "h": 96.0, "line_num": 3, "text": "Returns True if n is prime, False otherwise"}, {"x": 435.0, "y": 395.0, "w": 79.0, "h": 41.0, "line_num": 4, "text": "11011"}, {"x": 426.0, "y": 487.0, "w": 397.0, "h": 81.0, "line_num": 5, "text": "if n < = 1 :"}, {"x": 606.0, "y": 627.0, "w": 461.0, "h": 72.0, "line_num": 6, "text": "return False"}, {"x": 420.0, "y": 752.0, "w": 1117.0, "h": 86.0, "line_num": 7, "text": "for i in range (2, int(n* 0.5) +1):"}, {"x": 552.0, "y": 903.0, "w": 571.0, "h": 86.0, "line_num": 8, "text": "if n % i == 0."}, {"x": 725.0, "y": 1068.0, "w": 429.0, "h": 71.0, "line_num": 9, "text": "return False"}, {"x": 427.0, "y": 1166.0, "w": 499.0, "h": 127.0, "line_num": 10, "text": "return True"}, {"x": 281.0, "y": 1481.0, "w": 437.0, "h": 80.0, "line_num": 11, "text": "def main () :"}, {"x": 491.0, "y": 1609.0, "w": 85.0, "h": 44.0, "line_num": 12, "text": "11 /11"}, {"x": 457.0, "y": 1694.0, "w": 621.0, "h": 134.0, "line_num": 13, "text": "The main function ."}, {"x": 477.0, "y": 1846.0, "w": 118.0, "h": 39.0, "line_num": 14, "text": "/11.11"}, {"x": 474.0, "y": 1934.0, "w": 1157.0, "h": 82.0, "line_num": 15, "text": "n = int ( input (\"Enter a number: \")"}, {"x": 470.0, "y": 2057.0, "w": 511.0, "h": 88.0, "line_num": 16, "text": "if is-prime (n):"}, {"x": 589.0, "y": 2186.0, "w": 1057.0, "h": 92.0, "line_num": 17, "text": "print (n, \" is a prime number. \")"}, {"x": 451.0, "y": 2349.0, "w": 178.0, "h": 72.0, "line_num": 18, "text": "else :"}, {"x": 587.0, "y": 2471.0, "w": 1181.0, "h": 84.0, "line_num": 19, "text": "print( n, \" is not a prime number. \")"}, {"x": 333.0, "y": 2650.0, "w": 87.0, "h": 85.0, "line_num": 20, "text": "if"}, {"x": 462.0, "y": 2678.0, "w": 642.0, "h": 80.0, "line_num": 21, "text": "-- name __ == \""}, {"x": 974.0, "y": 2706.0, "w": 503.0, "h": 84.0, "line_num": 22, "text": "- - main __ :"}, {"x": 474.0, "y": 2838.0, "w": 210.0, "h": 75.0, "line_num": 23, "text": "main ( )"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 118.8913043478261, "ir_algo_output_code": "def is-prime (n):\n    1104\n    Returns True if n is prime, False otherwise\n    11011\n    if n < = 1 :\n        return False\n    for i in range (2, int(n* 0.5) +1):\n    if n % i == 0.\n        return False\n    return True\ndef main () :\n    11 /11\n    The main function .\n    /11.11\n    n = int ( input (\"Enter a number: \")\n    if is-prime (n):\n    print (n, \" is a prime number. \")\n    else :\n    print( n, \" is not a prime number. \")\nif\n    -- name __ == \"\n            - - main __ :\n    main ( )\n", "ir_algo_output_indented_lines": [{"x": 263.0, "y": 39.0, "w": 597.0, "h": 83.0, "line_num": 1, "text": "def is-prime (n):", "cluster_label": 1, "indentation": 0}, {"x": 423.0, "y": 168.0, "w": 91.0, "h": 41.0, "line_num": 2, "text": "1104", "cluster_label": 0, "indentation": 1}, {"x": 434.0, "y": 240.0, "w": 1471.0, "h": 96.0, "line_num": 3, "text": "Returns True if n is prime, False otherwise", "cluster_label": 0, "indentation": 1}, {"x": 435.0, "y": 395.0, "w": 79.0, "h": 41.0, "line_num": 4, "text": "11011", "cluster_label": 0, "indentation": 1}, {"x": 426.0, "y": 487.0, "w": 397.0, "h": 81.0, "line_num": 5, "text": "if n < = 1 :", "cluster_label": 0, "indentation": 1}, {"x": 606.0, "y": 627.0, "w": 461.0, "h": 72.0, "line_num": 6, "text": "return False", "cluster_label": 3, "indentation": 2}, {"x": 420.0, "y": 752.0, "w": 1117.0, "h": 86.0, "line_num": 7, "text": "for i in range (2, int(n* 0.5) +1):", "cluster_label": 0, "indentation": 1}, {"x": 552.0, "y": 903.0, "w": 571.0, "h": 86.0, "line_num": 8, "text": "if n % i == 0.", "cluster_label": 0, "indentation": 1}, {"x": 725.0, "y": 1068.0, "w": 429.0, "h": 71.0, "line_num": 9, "text": "return False", "cluster_label": 3, "indentation": 2}, {"x": 427.0, "y": 1166.0, "w": 499.0, "h": 127.0, "line_num": 10, "text": "return True", "cluster_label": 0, "indentation": 1}, {"x": 281.0, "y": 1481.0, "w": 437.0, "h": 80.0, "line_num": 11, "text": "def main () :", "cluster_label": 1, "indentation": 0}, {"x": 491.0, "y": 1609.0, "w": 85.0, "h": 44.0, "line_num": 12, "text": "11 /11", "cluster_label": 0, "indentation": 1}, {"x": 457.0, "y": 1694.0, "w": 621.0, "h": 134.0, "line_num": 13, "text": "The main function .", "cluster_label": 0, "indentation": 1}, {"x": 477.0, "y": 1846.0, "w": 118.0, "h": 39.0, "line_num": 14, "text": "/11.11", "cluster_label": 0, "indentation": 1}, {"x": 474.0, "y": 1934.0, "w": 1157.0, "h": 82.0, "line_num": 15, "text": "n = int ( input (\"Enter a number: \")", "cluster_label": 0, "indentation": 1}, {"x": 470.0, "y": 2057.0, "w": 511.0, "h": 88.0, "line_num": 16, "text": "if is-prime (n):", "cluster_label": 0, "indentation": 1}, {"x": 589.0, "y": 2186.0, "w": 1057.0, "h": 92.0, "line_num": 17, "text": "print (n, \" is a prime number. \")", "cluster_label": 0, "indentation": 1}, {"x": 451.0, "y": 2349.0, "w": 178.0, "h": 72.0, "line_num": 18, "text": "else :", "cluster_label": 0, "indentation": 1}, {"x": 587.0, "y": 2471.0, "w": 1181.0, "h": 84.0, "line_num": 19, "text": "print( n, \" is not a prime number. \")", "cluster_label": 0, "indentation": 1}, {"x": 333.0, "y": 2650.0, "w": 87.0, "h": 85.0, "line_num": 20, "text": "if", "cluster_label": 1, "indentation": 0}, {"x": 462.0, "y": 2678.0, "w": 642.0, "h": 80.0, "line_num": 21, "text": "-- name __ == \"", "cluster_label": 0, "indentation": 1}, {"x": 974.0, "y": 2706.0, "w": 503.0, "h": 84.0, "line_num": 22, "text": "- - main __ :", "cluster_label": 2, "indentation": 3}, {"x": 474.0, "y": 2838.0, "w": 210.0, "h": 75.0, "line_num": 23, "text": "main ( )", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 93, "prompting_method": "cot-test5", "lm_post_processed_code": "def is_prime(n):\n    \"\"\"\n    Returns True if n is prime, False otherwise\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n * 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef main():\n    \"\"\"\n    The main function.\n    \"\"\"\n    n = int(input(\"Enter a number: \"))\n    if is_prime(n):\n        print(n, \"is a prime number.\")\n    else:\n        print(n, \"is not a prime number.\")\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 3}, {"image_id": 25, "image_height": 3393, "image_width": 2984, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 263.0, "y": 39.0, "w": 597.0, "h": 83.0, "line_num": 1, "text": "def is-prime (n):"}, {"x": 423.0, "y": 168.0, "w": 91.0, "h": 41.0, "line_num": 2, "text": "1104"}, {"x": 434.0, "y": 240.0, "w": 1471.0, "h": 96.0, "line_num": 3, "text": "Returns True if n is prime, False otherwise"}, {"x": 435.0, "y": 395.0, "w": 79.0, "h": 41.0, "line_num": 4, "text": "11011"}, {"x": 426.0, "y": 487.0, "w": 397.0, "h": 81.0, "line_num": 5, "text": "if n < = 1 :"}, {"x": 606.0, "y": 627.0, "w": 461.0, "h": 72.0, "line_num": 6, "text": "return False"}, {"x": 420.0, "y": 752.0, "w": 1117.0, "h": 86.0, "line_num": 7, "text": "for i in range (2, int(n* 0.5) +1):"}, {"x": 552.0, "y": 903.0, "w": 571.0, "h": 86.0, "line_num": 8, "text": "if n % i == 0."}, {"x": 725.0, "y": 1068.0, "w": 429.0, "h": 71.0, "line_num": 9, "text": "return False"}, {"x": 427.0, "y": 1166.0, "w": 499.0, "h": 127.0, "line_num": 10, "text": "return True"}, {"x": 281.0, "y": 1481.0, "w": 437.0, "h": 80.0, "line_num": 11, "text": "def main () :"}, {"x": 491.0, "y": 1609.0, "w": 85.0, "h": 44.0, "line_num": 12, "text": "11 /11"}, {"x": 457.0, "y": 1694.0, "w": 621.0, "h": 134.0, "line_num": 13, "text": "The main function ."}, {"x": 477.0, "y": 1846.0, "w": 118.0, "h": 39.0, "line_num": 14, "text": "/11.11"}, {"x": 474.0, "y": 1934.0, "w": 1157.0, "h": 82.0, "line_num": 15, "text": "n = int ( input (\"Enter a number: \")"}, {"x": 470.0, "y": 2057.0, "w": 511.0, "h": 88.0, "line_num": 16, "text": "if is-prime (n):"}, {"x": 589.0, "y": 2186.0, "w": 1057.0, "h": 92.0, "line_num": 17, "text": "print (n, \" is a prime number. \")"}, {"x": 451.0, "y": 2349.0, "w": 178.0, "h": 72.0, "line_num": 18, "text": "else :"}, {"x": 587.0, "y": 2471.0, "w": 1181.0, "h": 84.0, "line_num": 19, "text": "print( n, \" is not a prime number. \")"}, {"x": 333.0, "y": 2650.0, "w": 87.0, "h": 85.0, "line_num": 20, "text": "if"}, {"x": 462.0, "y": 2678.0, "w": 642.0, "h": 80.0, "line_num": 21, "text": "-- name __ == \""}, {"x": 974.0, "y": 2706.0, "w": 503.0, "h": 84.0, "line_num": 22, "text": "- - main __ :"}, {"x": 474.0, "y": 2838.0, "w": 210.0, "h": 75.0, "line_num": 23, "text": "main ( )"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 118.8913043478261, "ir_algo_output_code": "def is-prime (n):\n    1104\n    Returns True if n is prime, False otherwise\n    11011\n    if n < = 1 :\n        return False\n    for i in range (2, int(n* 0.5) +1):\n    if n % i == 0.\n        return False\n    return True\ndef main () :\n    11 /11\n    The main function .\n    /11.11\n    n = int ( input (\"Enter a number: \")\n    if is-prime (n):\n    print (n, \" is a prime number. \")\n    else :\n    print( n, \" is not a prime number. \")\nif\n    -- name __ == \"\n            - - main __ :\n    main ( )\n", "ir_algo_output_indented_lines": [{"x": 263.0, "y": 39.0, "w": 597.0, "h": 83.0, "line_num": 1, "text": "def is-prime (n):", "cluster_label": 1, "indentation": 0}, {"x": 423.0, "y": 168.0, "w": 91.0, "h": 41.0, "line_num": 2, "text": "1104", "cluster_label": 0, "indentation": 1}, {"x": 434.0, "y": 240.0, "w": 1471.0, "h": 96.0, "line_num": 3, "text": "Returns True if n is prime, False otherwise", "cluster_label": 0, "indentation": 1}, {"x": 435.0, "y": 395.0, "w": 79.0, "h": 41.0, "line_num": 4, "text": "11011", "cluster_label": 0, "indentation": 1}, {"x": 426.0, "y": 487.0, "w": 397.0, "h": 81.0, "line_num": 5, "text": "if n < = 1 :", "cluster_label": 0, "indentation": 1}, {"x": 606.0, "y": 627.0, "w": 461.0, "h": 72.0, "line_num": 6, "text": "return False", "cluster_label": 3, "indentation": 2}, {"x": 420.0, "y": 752.0, "w": 1117.0, "h": 86.0, "line_num": 7, "text": "for i in range (2, int(n* 0.5) +1):", "cluster_label": 0, "indentation": 1}, {"x": 552.0, "y": 903.0, "w": 571.0, "h": 86.0, "line_num": 8, "text": "if n % i == 0.", "cluster_label": 0, "indentation": 1}, {"x": 725.0, "y": 1068.0, "w": 429.0, "h": 71.0, "line_num": 9, "text": "return False", "cluster_label": 3, "indentation": 2}, {"x": 427.0, "y": 1166.0, "w": 499.0, "h": 127.0, "line_num": 10, "text": "return True", "cluster_label": 0, "indentation": 1}, {"x": 281.0, "y": 1481.0, "w": 437.0, "h": 80.0, "line_num": 11, "text": "def main () :", "cluster_label": 1, "indentation": 0}, {"x": 491.0, "y": 1609.0, "w": 85.0, "h": 44.0, "line_num": 12, "text": "11 /11", "cluster_label": 0, "indentation": 1}, {"x": 457.0, "y": 1694.0, "w": 621.0, "h": 134.0, "line_num": 13, "text": "The main function .", "cluster_label": 0, "indentation": 1}, {"x": 477.0, "y": 1846.0, "w": 118.0, "h": 39.0, "line_num": 14, "text": "/11.11", "cluster_label": 0, "indentation": 1}, {"x": 474.0, "y": 1934.0, "w": 1157.0, "h": 82.0, "line_num": 15, "text": "n = int ( input (\"Enter a number: \")", "cluster_label": 0, "indentation": 1}, {"x": 470.0, "y": 2057.0, "w": 511.0, "h": 88.0, "line_num": 16, "text": "if is-prime (n):", "cluster_label": 0, "indentation": 1}, {"x": 589.0, "y": 2186.0, "w": 1057.0, "h": 92.0, "line_num": 17, "text": "print (n, \" is a prime number. \")", "cluster_label": 0, "indentation": 1}, {"x": 451.0, "y": 2349.0, "w": 178.0, "h": 72.0, "line_num": 18, "text": "else :", "cluster_label": 0, "indentation": 1}, {"x": 587.0, "y": 2471.0, "w": 1181.0, "h": 84.0, "line_num": 19, "text": "print( n, \" is not a prime number. \")", "cluster_label": 0, "indentation": 1}, {"x": 333.0, "y": 2650.0, "w": 87.0, "h": 85.0, "line_num": 20, "text": "if", "cluster_label": 1, "indentation": 0}, {"x": 462.0, "y": 2678.0, "w": 642.0, "h": 80.0, "line_num": 21, "text": "-- name __ == \"", "cluster_label": 0, "indentation": 1}, {"x": 974.0, "y": 2706.0, "w": 503.0, "h": 84.0, "line_num": 22, "text": "- - main __ :", "cluster_label": 2, "indentation": 3}, {"x": 474.0, "y": 2838.0, "w": 210.0, "h": 75.0, "line_num": 23, "text": "main ( )", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 93, "prompting_method": "simple-test2", "lm_post_processed_code": "def is_prime(n):\n    # Returns True if n is prime, False otherwise\n    if n <= 1:\n        return False\n    for i in range(2, int(n * 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef main():\n    # The main function\n    n = int(input(\"Enter a number: \"))\n    if is_prime(n):\n        print(n, \" is a prime number.\")\n    else:\n        print(n, \" is not a prime number.\")\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 36}, {"image_id": 25, "image_height": 3393, "image_width": 2984, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 263.0, "y": 39.0, "w": 597.0, "h": 83.0, "line_num": 1, "text": "def is-prime (n):"}, {"x": 423.0, "y": 168.0, "w": 91.0, "h": 41.0, "line_num": 2, "text": "1104"}, {"x": 434.0, "y": 240.0, "w": 1471.0, "h": 96.0, "line_num": 3, "text": "Returns True if n is prime, False otherwise"}, {"x": 435.0, "y": 395.0, "w": 79.0, "h": 41.0, "line_num": 4, "text": "11011"}, {"x": 426.0, "y": 487.0, "w": 397.0, "h": 81.0, "line_num": 5, "text": "if n < = 1 :"}, {"x": 606.0, "y": 627.0, "w": 461.0, "h": 72.0, "line_num": 6, "text": "return False"}, {"x": 420.0, "y": 752.0, "w": 1117.0, "h": 86.0, "line_num": 7, "text": "for i in range (2, int(n* 0.5) +1):"}, {"x": 552.0, "y": 903.0, "w": 571.0, "h": 86.0, "line_num": 8, "text": "if n % i == 0."}, {"x": 725.0, "y": 1068.0, "w": 429.0, "h": 71.0, "line_num": 9, "text": "return False"}, {"x": 427.0, "y": 1166.0, "w": 499.0, "h": 127.0, "line_num": 10, "text": "return True"}, {"x": 281.0, "y": 1481.0, "w": 437.0, "h": 80.0, "line_num": 11, "text": "def main () :"}, {"x": 491.0, "y": 1609.0, "w": 85.0, "h": 44.0, "line_num": 12, "text": "11 /11"}, {"x": 457.0, "y": 1694.0, "w": 621.0, "h": 134.0, "line_num": 13, "text": "The main function ."}, {"x": 477.0, "y": 1846.0, "w": 118.0, "h": 39.0, "line_num": 14, "text": "/11.11"}, {"x": 474.0, "y": 1934.0, "w": 1157.0, "h": 82.0, "line_num": 15, "text": "n = int ( input (\"Enter a number: \")"}, {"x": 470.0, "y": 2057.0, "w": 511.0, "h": 88.0, "line_num": 16, "text": "if is-prime (n):"}, {"x": 589.0, "y": 2186.0, "w": 1057.0, "h": 92.0, "line_num": 17, "text": "print (n, \" is a prime number. \")"}, {"x": 451.0, "y": 2349.0, "w": 178.0, "h": 72.0, "line_num": 18, "text": "else :"}, {"x": 587.0, "y": 2471.0, "w": 1181.0, "h": 84.0, "line_num": 19, "text": "print( n, \" is not a prime number. \")"}, {"x": 333.0, "y": 2650.0, "w": 87.0, "h": 85.0, "line_num": 20, "text": "if"}, {"x": 462.0, "y": 2678.0, "w": 642.0, "h": 80.0, "line_num": 21, "text": "-- name __ == \""}, {"x": 974.0, "y": 2706.0, "w": 503.0, "h": 84.0, "line_num": 22, "text": "- - main __ :"}, {"x": 474.0, "y": 2838.0, "w": 210.0, "h": 75.0, "line_num": 23, "text": "main ( )"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 118.8913043478261, "ir_algo_output_code": "def is-prime (n):\n    1104\n    Returns True if n is prime, False otherwise\n    11011\n    if n < = 1 :\n        return False\n    for i in range (2, int(n* 0.5) +1):\n    if n % i == 0.\n        return False\n    return True\ndef main () :\n    11 /11\n    The main function .\n    /11.11\n    n = int ( input (\"Enter a number: \")\n    if is-prime (n):\n    print (n, \" is a prime number. \")\n    else :\n    print( n, \" is not a prime number. \")\nif\n    -- name __ == \"\n            - - main __ :\n    main ( )\n", "ir_algo_output_indented_lines": [{"x": 263.0, "y": 39.0, "w": 597.0, "h": 83.0, "line_num": 1, "text": "def is-prime (n):", "cluster_label": 1, "indentation": 0}, {"x": 423.0, "y": 168.0, "w": 91.0, "h": 41.0, "line_num": 2, "text": "1104", "cluster_label": 0, "indentation": 1}, {"x": 434.0, "y": 240.0, "w": 1471.0, "h": 96.0, "line_num": 3, "text": "Returns True if n is prime, False otherwise", "cluster_label": 0, "indentation": 1}, {"x": 435.0, "y": 395.0, "w": 79.0, "h": 41.0, "line_num": 4, "text": "11011", "cluster_label": 0, "indentation": 1}, {"x": 426.0, "y": 487.0, "w": 397.0, "h": 81.0, "line_num": 5, "text": "if n < = 1 :", "cluster_label": 0, "indentation": 1}, {"x": 606.0, "y": 627.0, "w": 461.0, "h": 72.0, "line_num": 6, "text": "return False", "cluster_label": 3, "indentation": 2}, {"x": 420.0, "y": 752.0, "w": 1117.0, "h": 86.0, "line_num": 7, "text": "for i in range (2, int(n* 0.5) +1):", "cluster_label": 0, "indentation": 1}, {"x": 552.0, "y": 903.0, "w": 571.0, "h": 86.0, "line_num": 8, "text": "if n % i == 0.", "cluster_label": 0, "indentation": 1}, {"x": 725.0, "y": 1068.0, "w": 429.0, "h": 71.0, "line_num": 9, "text": "return False", "cluster_label": 3, "indentation": 2}, {"x": 427.0, "y": 1166.0, "w": 499.0, "h": 127.0, "line_num": 10, "text": "return True", "cluster_label": 0, "indentation": 1}, {"x": 281.0, "y": 1481.0, "w": 437.0, "h": 80.0, "line_num": 11, "text": "def main () :", "cluster_label": 1, "indentation": 0}, {"x": 491.0, "y": 1609.0, "w": 85.0, "h": 44.0, "line_num": 12, "text": "11 /11", "cluster_label": 0, "indentation": 1}, {"x": 457.0, "y": 1694.0, "w": 621.0, "h": 134.0, "line_num": 13, "text": "The main function .", "cluster_label": 0, "indentation": 1}, {"x": 477.0, "y": 1846.0, "w": 118.0, "h": 39.0, "line_num": 14, "text": "/11.11", "cluster_label": 0, "indentation": 1}, {"x": 474.0, "y": 1934.0, "w": 1157.0, "h": 82.0, "line_num": 15, "text": "n = int ( input (\"Enter a number: \")", "cluster_label": 0, "indentation": 1}, {"x": 470.0, "y": 2057.0, "w": 511.0, "h": 88.0, "line_num": 16, "text": "if is-prime (n):", "cluster_label": 0, "indentation": 1}, {"x": 589.0, "y": 2186.0, "w": 1057.0, "h": 92.0, "line_num": 17, "text": "print (n, \" is a prime number. \")", "cluster_label": 0, "indentation": 1}, {"x": 451.0, "y": 2349.0, "w": 178.0, "h": 72.0, "line_num": 18, "text": "else :", "cluster_label": 0, "indentation": 1}, {"x": 587.0, "y": 2471.0, "w": 1181.0, "h": 84.0, "line_num": 19, "text": "print( n, \" is not a prime number. \")", "cluster_label": 0, "indentation": 1}, {"x": 333.0, "y": 2650.0, "w": 87.0, "h": 85.0, "line_num": 20, "text": "if", "cluster_label": 1, "indentation": 0}, {"x": 462.0, "y": 2678.0, "w": 642.0, "h": 80.0, "line_num": 21, "text": "-- name __ == \"", "cluster_label": 0, "indentation": 1}, {"x": 974.0, "y": 2706.0, "w": 503.0, "h": 84.0, "line_num": 22, "text": "- - main __ :", "cluster_label": 2, "indentation": 3}, {"x": 474.0, "y": 2838.0, "w": 210.0, "h": 75.0, "line_num": 23, "text": "main ( )", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 93, "prompting_method": "simple-test3", "lm_post_processed_code": "def is_prime(n):\n    # Returns True if n is prime, False otherwise\n    if n <= 1:\n        return False\n    for i in range(2, int(n*0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef main():\n    # The main function\n    n = int(input(\"Enter a number: \"))\n    if is_prime(n):\n        print(n, \" is a prime number.\")\n    else:\n        print(n, \" is not a prime number.\")\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 35}, {"image_id": 25, "image_height": 3393, "image_width": 2984, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 263.0, "y": 39.0, "w": 597.0, "h": 83.0, "line_num": 1, "text": "def is-prime (n):"}, {"x": 423.0, "y": 168.0, "w": 91.0, "h": 41.0, "line_num": 2, "text": "1104"}, {"x": 434.0, "y": 240.0, "w": 1471.0, "h": 96.0, "line_num": 3, "text": "Returns True if n is prime, False otherwise"}, {"x": 435.0, "y": 395.0, "w": 79.0, "h": 41.0, "line_num": 4, "text": "11011"}, {"x": 426.0, "y": 487.0, "w": 397.0, "h": 81.0, "line_num": 5, "text": "if n < = 1 :"}, {"x": 606.0, "y": 627.0, "w": 461.0, "h": 72.0, "line_num": 6, "text": "return False"}, {"x": 420.0, "y": 752.0, "w": 1117.0, "h": 86.0, "line_num": 7, "text": "for i in range (2, int(n* 0.5) +1):"}, {"x": 552.0, "y": 903.0, "w": 571.0, "h": 86.0, "line_num": 8, "text": "if n % i == 0."}, {"x": 725.0, "y": 1068.0, "w": 429.0, "h": 71.0, "line_num": 9, "text": "return False"}, {"x": 427.0, "y": 1166.0, "w": 499.0, "h": 127.0, "line_num": 10, "text": "return True"}, {"x": 281.0, "y": 1481.0, "w": 437.0, "h": 80.0, "line_num": 11, "text": "def main () :"}, {"x": 491.0, "y": 1609.0, "w": 85.0, "h": 44.0, "line_num": 12, "text": "11 /11"}, {"x": 457.0, "y": 1694.0, "w": 621.0, "h": 134.0, "line_num": 13, "text": "The main function ."}, {"x": 477.0, "y": 1846.0, "w": 118.0, "h": 39.0, "line_num": 14, "text": "/11.11"}, {"x": 474.0, "y": 1934.0, "w": 1157.0, "h": 82.0, "line_num": 15, "text": "n = int ( input (\"Enter a number: \")"}, {"x": 470.0, "y": 2057.0, "w": 511.0, "h": 88.0, "line_num": 16, "text": "if is-prime (n):"}, {"x": 589.0, "y": 2186.0, "w": 1057.0, "h": 92.0, "line_num": 17, "text": "print (n, \" is a prime number. \")"}, {"x": 451.0, "y": 2349.0, "w": 178.0, "h": 72.0, "line_num": 18, "text": "else :"}, {"x": 587.0, "y": 2471.0, "w": 1181.0, "h": 84.0, "line_num": 19, "text": "print( n, \" is not a prime number. \")"}, {"x": 333.0, "y": 2650.0, "w": 87.0, "h": 85.0, "line_num": 20, "text": "if"}, {"x": 462.0, "y": 2678.0, "w": 642.0, "h": 80.0, "line_num": 21, "text": "-- name __ == \""}, {"x": 974.0, "y": 2706.0, "w": 503.0, "h": 84.0, "line_num": 22, "text": "- - main __ :"}, {"x": 474.0, "y": 2838.0, "w": 210.0, "h": 75.0, "line_num": 23, "text": "main ( )"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def is-prime (n):\n    1104\n    Returns True if n is prime, False otherwise\n    11011\n    if n < = 1 :\n        return False\n    for i in range (2, int(n* 0.5) +1):\n        if n % i == 0.\n            return False\n    return True\ndef main () :\n    11 /11\n    The main function .\n    /11.11\n    n = int ( input (\"Enter a number: \")\n    if is-prime (n):\n        print (n, \" is a prime number. \")\n    else :\n        print( n, \" is not a prime number. \")\nif\n    -- name __ == \"\n        - - main __ :\n    main ( )\n", "ir_algo_output_indented_lines": [{"x": 263.0, "y": 39.0, "w": 597.0, "h": 83.0, "line_num": 1, "text": "def is-prime (n):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 423.0, "y": 168.0, "w": 91.0, "h": 41.0, "line_num": 2, "text": "1104", "delta": 160.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 434.0, "y": 240.0, "w": 1471.0, "h": 96.0, "line_num": 3, "text": "Returns True if n is prime, False otherwise", "delta": 11.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 435.0, "y": 395.0, "w": 79.0, "h": 41.0, "line_num": 4, "text": "11011", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 426.0, "y": 487.0, "w": 397.0, "h": 81.0, "line_num": 5, "text": "if n < = 1 :", "delta": -9.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 606.0, "y": 627.0, "w": 461.0, "h": 72.0, "line_num": 6, "text": "return False", "delta": 180.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 420.0, "y": 752.0, "w": 1117.0, "h": 86.0, "line_num": 7, "text": "for i in range (2, int(n* 0.5) +1):", "delta": -186.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 552.0, "y": 903.0, "w": 571.0, "h": 86.0, "line_num": 8, "text": "if n % i == 0.", "delta": 132.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 725.0, "y": 1068.0, "w": 429.0, "h": 71.0, "line_num": 9, "text": "return False", "delta": 173.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 427.0, "y": 1166.0, "w": 499.0, "h": 127.0, "line_num": 10, "text": "return True", "delta": -298.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 281.0, "y": 1481.0, "w": 437.0, "h": 80.0, "line_num": 11, "text": "def main () :", "delta": -146.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 491.0, "y": 1609.0, "w": 85.0, "h": 44.0, "line_num": 12, "text": "11 /11", "delta": 210.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 457.0, "y": 1694.0, "w": 621.0, "h": 134.0, "line_num": 13, "text": "The main function .", "delta": -34.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 477.0, "y": 1846.0, "w": 118.0, "h": 39.0, "line_num": 14, "text": "/11.11", "delta": 20.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 474.0, "y": 1934.0, "w": 1157.0, "h": 82.0, "line_num": 15, "text": "n = int ( input (\"Enter a number: \")", "delta": -3.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 470.0, "y": 2057.0, "w": 511.0, "h": 88.0, "line_num": 16, "text": "if is-prime (n):", "delta": -4.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 589.0, "y": 2186.0, "w": 1057.0, "h": 92.0, "line_num": 17, "text": "print (n, \" is a prime number. \")", "delta": 119.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 451.0, "y": 2349.0, "w": 178.0, "h": 72.0, "line_num": 18, "text": "else :", "delta": -138.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 587.0, "y": 2471.0, "w": 1181.0, "h": 84.0, "line_num": 19, "text": "print( n, \" is not a prime number. \")", "delta": 136.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 333.0, "y": 2650.0, "w": 87.0, "h": 85.0, "line_num": 20, "text": "if", "delta": -254.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 462.0, "y": 2678.0, "w": 642.0, "h": 80.0, "line_num": 21, "text": "-- name __ == \"", "delta": 129.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 974.0, "y": 2706.0, "w": 503.0, "h": 84.0, "line_num": 22, "text": "- - main __ :", "delta": 512.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 474.0, "y": 2838.0, "w": 210.0, "h": 75.0, "line_num": 23, "text": "main ( )", "delta": -500.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 73, "prompting_method": "none", "lm_post_processed_code": "def is-prime (n):\n    1104\n    Returns True if n is prime, False otherwise\n    11011\n    if n < = 1 :\n        return False\n    for i in range (2, int(n* 0.5) +1):\n        if n % i == 0.\n            return False\n    return True\ndef main () :\n    11 /11\n    The main function .\n    /11.11\n    n = int ( input (\"Enter a number: \")\n    if is-prime (n):\n        print (n, \" is a prime number. \")\n    else :\n        print( n, \" is not a prime number. \")\nif\n    -- name __ == \"\n        - - main __ :\n    main ( )\n", "lm_post_processed_edit_distance": 73}, {"image_id": 25, "image_height": 3393, "image_width": 2984, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 263.0, "y": 39.0, "w": 597.0, "h": 83.0, "line_num": 1, "text": "def is-prime (n):"}, {"x": 423.0, "y": 168.0, "w": 91.0, "h": 41.0, "line_num": 2, "text": "1104"}, {"x": 434.0, "y": 240.0, "w": 1471.0, "h": 96.0, "line_num": 3, "text": "Returns True if n is prime, False otherwise"}, {"x": 435.0, "y": 395.0, "w": 79.0, "h": 41.0, "line_num": 4, "text": "11011"}, {"x": 426.0, "y": 487.0, "w": 397.0, "h": 81.0, "line_num": 5, "text": "if n < = 1 :"}, {"x": 606.0, "y": 627.0, "w": 461.0, "h": 72.0, "line_num": 6, "text": "return False"}, {"x": 420.0, "y": 752.0, "w": 1117.0, "h": 86.0, "line_num": 7, "text": "for i in range (2, int(n* 0.5) +1):"}, {"x": 552.0, "y": 903.0, "w": 571.0, "h": 86.0, "line_num": 8, "text": "if n % i == 0."}, {"x": 725.0, "y": 1068.0, "w": 429.0, "h": 71.0, "line_num": 9, "text": "return False"}, {"x": 427.0, "y": 1166.0, "w": 499.0, "h": 127.0, "line_num": 10, "text": "return True"}, {"x": 281.0, "y": 1481.0, "w": 437.0, "h": 80.0, "line_num": 11, "text": "def main () :"}, {"x": 491.0, "y": 1609.0, "w": 85.0, "h": 44.0, "line_num": 12, "text": "11 /11"}, {"x": 457.0, "y": 1694.0, "w": 621.0, "h": 134.0, "line_num": 13, "text": "The main function ."}, {"x": 477.0, "y": 1846.0, "w": 118.0, "h": 39.0, "line_num": 14, "text": "/11.11"}, {"x": 474.0, "y": 1934.0, "w": 1157.0, "h": 82.0, "line_num": 15, "text": "n = int ( input (\"Enter a number: \")"}, {"x": 470.0, "y": 2057.0, "w": 511.0, "h": 88.0, "line_num": 16, "text": "if is-prime (n):"}, {"x": 589.0, "y": 2186.0, "w": 1057.0, "h": 92.0, "line_num": 17, "text": "print (n, \" is a prime number. \")"}, {"x": 451.0, "y": 2349.0, "w": 178.0, "h": 72.0, "line_num": 18, "text": "else :"}, {"x": 587.0, "y": 2471.0, "w": 1181.0, "h": 84.0, "line_num": 19, "text": "print( n, \" is not a prime number. \")"}, {"x": 333.0, "y": 2650.0, "w": 87.0, "h": 85.0, "line_num": 20, "text": "if"}, {"x": 462.0, "y": 2678.0, "w": 642.0, "h": 80.0, "line_num": 21, "text": "-- name __ == \""}, {"x": 974.0, "y": 2706.0, "w": 503.0, "h": 84.0, "line_num": 22, "text": "- - main __ :"}, {"x": 474.0, "y": 2838.0, "w": 210.0, "h": 75.0, "line_num": 23, "text": "main ( )"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def is-prime (n):\n    1104\n    Returns True if n is prime, False otherwise\n    11011\n    if n < = 1 :\n        return False\n    for i in range (2, int(n* 0.5) +1):\n        if n % i == 0.\n            return False\n    return True\ndef main () :\n    11 /11\n    The main function .\n    /11.11\n    n = int ( input (\"Enter a number: \")\n    if is-prime (n):\n        print (n, \" is a prime number. \")\n    else :\n        print( n, \" is not a prime number. \")\nif\n    -- name __ == \"\n        - - main __ :\n    main ( )\n", "ir_algo_output_indented_lines": [{"x": 263.0, "y": 39.0, "w": 597.0, "h": 83.0, "line_num": 1, "text": "def is-prime (n):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 423.0, "y": 168.0, "w": 91.0, "h": 41.0, "line_num": 2, "text": "1104", "delta": 160.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 434.0, "y": 240.0, "w": 1471.0, "h": 96.0, "line_num": 3, "text": "Returns True if n is prime, False otherwise", "delta": 11.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 435.0, "y": 395.0, "w": 79.0, "h": 41.0, "line_num": 4, "text": "11011", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 426.0, "y": 487.0, "w": 397.0, "h": 81.0, "line_num": 5, "text": "if n < = 1 :", "delta": -9.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 606.0, "y": 627.0, "w": 461.0, "h": 72.0, "line_num": 6, "text": "return False", "delta": 180.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 420.0, "y": 752.0, "w": 1117.0, "h": 86.0, "line_num": 7, "text": "for i in range (2, int(n* 0.5) +1):", "delta": -186.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 552.0, "y": 903.0, "w": 571.0, "h": 86.0, "line_num": 8, "text": "if n % i == 0.", "delta": 132.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 725.0, "y": 1068.0, "w": 429.0, "h": 71.0, "line_num": 9, "text": "return False", "delta": 173.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 427.0, "y": 1166.0, "w": 499.0, "h": 127.0, "line_num": 10, "text": "return True", "delta": -298.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 281.0, "y": 1481.0, "w": 437.0, "h": 80.0, "line_num": 11, "text": "def main () :", "delta": -146.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 491.0, "y": 1609.0, "w": 85.0, "h": 44.0, "line_num": 12, "text": "11 /11", "delta": 210.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 457.0, "y": 1694.0, "w": 621.0, "h": 134.0, "line_num": 13, "text": "The main function .", "delta": -34.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 477.0, "y": 1846.0, "w": 118.0, "h": 39.0, "line_num": 14, "text": "/11.11", "delta": 20.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 474.0, "y": 1934.0, "w": 1157.0, "h": 82.0, "line_num": 15, "text": "n = int ( input (\"Enter a number: \")", "delta": -3.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 470.0, "y": 2057.0, "w": 511.0, "h": 88.0, "line_num": 16, "text": "if is-prime (n):", "delta": -4.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 589.0, "y": 2186.0, "w": 1057.0, "h": 92.0, "line_num": 17, "text": "print (n, \" is a prime number. \")", "delta": 119.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 451.0, "y": 2349.0, "w": 178.0, "h": 72.0, "line_num": 18, "text": "else :", "delta": -138.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 587.0, "y": 2471.0, "w": 1181.0, "h": 84.0, "line_num": 19, "text": "print( n, \" is not a prime number. \")", "delta": 136.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 333.0, "y": 2650.0, "w": 87.0, "h": 85.0, "line_num": 20, "text": "if", "delta": -254.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 462.0, "y": 2678.0, "w": 642.0, "h": 80.0, "line_num": 21, "text": "-- name __ == \"", "delta": 129.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 974.0, "y": 2706.0, "w": 503.0, "h": 84.0, "line_num": 22, "text": "- - main __ :", "delta": 512.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 474.0, "y": 2838.0, "w": 210.0, "h": 75.0, "line_num": 23, "text": "main ( )", "delta": -500.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 73, "prompting_method": "cot-test1", "lm_post_processed_code": "def is_prime(n):\n    \"\"\"\n    Returns True if n is prime, False otherwise\n    \"\"\"\n    if n <= 1 :\n        return False\n    for i in range (2, int(n* 0.5) +1):\n        if n % i == 0:\n            return False\n    return True\n\ndef main () :\n    \"\"\"\n    The main function .\n    \"\"\"\n    n = int ( input (\"Enter a number: \"))\n    if is_prime (n):\n        print (n, \" is a prime number. \")\n    else :\n        print( n, \" is not a prime number. \")\n\nif __name__ == \"__main__\":\n    main ()\n", "lm_post_processed_edit_distance": 20}, {"image_id": 25, "image_height": 3393, "image_width": 2984, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 263.0, "y": 39.0, "w": 597.0, "h": 83.0, "line_num": 1, "text": "def is-prime (n):"}, {"x": 423.0, "y": 168.0, "w": 91.0, "h": 41.0, "line_num": 2, "text": "1104"}, {"x": 434.0, "y": 240.0, "w": 1471.0, "h": 96.0, "line_num": 3, "text": "Returns True if n is prime, False otherwise"}, {"x": 435.0, "y": 395.0, "w": 79.0, "h": 41.0, "line_num": 4, "text": "11011"}, {"x": 426.0, "y": 487.0, "w": 397.0, "h": 81.0, "line_num": 5, "text": "if n < = 1 :"}, {"x": 606.0, "y": 627.0, "w": 461.0, "h": 72.0, "line_num": 6, "text": "return False"}, {"x": 420.0, "y": 752.0, "w": 1117.0, "h": 86.0, "line_num": 7, "text": "for i in range (2, int(n* 0.5) +1):"}, {"x": 552.0, "y": 903.0, "w": 571.0, "h": 86.0, "line_num": 8, "text": "if n % i == 0."}, {"x": 725.0, "y": 1068.0, "w": 429.0, "h": 71.0, "line_num": 9, "text": "return False"}, {"x": 427.0, "y": 1166.0, "w": 499.0, "h": 127.0, "line_num": 10, "text": "return True"}, {"x": 281.0, "y": 1481.0, "w": 437.0, "h": 80.0, "line_num": 11, "text": "def main () :"}, {"x": 491.0, "y": 1609.0, "w": 85.0, "h": 44.0, "line_num": 12, "text": "11 /11"}, {"x": 457.0, "y": 1694.0, "w": 621.0, "h": 134.0, "line_num": 13, "text": "The main function ."}, {"x": 477.0, "y": 1846.0, "w": 118.0, "h": 39.0, "line_num": 14, "text": "/11.11"}, {"x": 474.0, "y": 1934.0, "w": 1157.0, "h": 82.0, "line_num": 15, "text": "n = int ( input (\"Enter a number: \")"}, {"x": 470.0, "y": 2057.0, "w": 511.0, "h": 88.0, "line_num": 16, "text": "if is-prime (n):"}, {"x": 589.0, "y": 2186.0, "w": 1057.0, "h": 92.0, "line_num": 17, "text": "print (n, \" is a prime number. \")"}, {"x": 451.0, "y": 2349.0, "w": 178.0, "h": 72.0, "line_num": 18, "text": "else :"}, {"x": 587.0, "y": 2471.0, "w": 1181.0, "h": 84.0, "line_num": 19, "text": "print( n, \" is not a prime number. \")"}, {"x": 333.0, "y": 2650.0, "w": 87.0, "h": 85.0, "line_num": 20, "text": "if"}, {"x": 462.0, "y": 2678.0, "w": 642.0, "h": 80.0, "line_num": 21, "text": "-- name __ == \""}, {"x": 974.0, "y": 2706.0, "w": 503.0, "h": 84.0, "line_num": 22, "text": "- - main __ :"}, {"x": 474.0, "y": 2838.0, "w": 210.0, "h": 75.0, "line_num": 23, "text": "main ( )"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def is-prime (n):\n    1104\n    Returns True if n is prime, False otherwise\n    11011\n    if n < = 1 :\n        return False\n    for i in range (2, int(n* 0.5) +1):\n        if n % i == 0.\n            return False\n    return True\ndef main () :\n    11 /11\n    The main function .\n    /11.11\n    n = int ( input (\"Enter a number: \")\n    if is-prime (n):\n        print (n, \" is a prime number. \")\n    else :\n        print( n, \" is not a prime number. \")\nif\n    -- name __ == \"\n        - - main __ :\n    main ( )\n", "ir_algo_output_indented_lines": [{"x": 263.0, "y": 39.0, "w": 597.0, "h": 83.0, "line_num": 1, "text": "def is-prime (n):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 423.0, "y": 168.0, "w": 91.0, "h": 41.0, "line_num": 2, "text": "1104", "delta": 160.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 434.0, "y": 240.0, "w": 1471.0, "h": 96.0, "line_num": 3, "text": "Returns True if n is prime, False otherwise", "delta": 11.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 435.0, "y": 395.0, "w": 79.0, "h": 41.0, "line_num": 4, "text": "11011", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 426.0, "y": 487.0, "w": 397.0, "h": 81.0, "line_num": 5, "text": "if n < = 1 :", "delta": -9.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 606.0, "y": 627.0, "w": 461.0, "h": 72.0, "line_num": 6, "text": "return False", "delta": 180.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 420.0, "y": 752.0, "w": 1117.0, "h": 86.0, "line_num": 7, "text": "for i in range (2, int(n* 0.5) +1):", "delta": -186.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 552.0, "y": 903.0, "w": 571.0, "h": 86.0, "line_num": 8, "text": "if n % i == 0.", "delta": 132.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 725.0, "y": 1068.0, "w": 429.0, "h": 71.0, "line_num": 9, "text": "return False", "delta": 173.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 427.0, "y": 1166.0, "w": 499.0, "h": 127.0, "line_num": 10, "text": "return True", "delta": -298.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 281.0, "y": 1481.0, "w": 437.0, "h": 80.0, "line_num": 11, "text": "def main () :", "delta": -146.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 491.0, "y": 1609.0, "w": 85.0, "h": 44.0, "line_num": 12, "text": "11 /11", "delta": 210.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 457.0, "y": 1694.0, "w": 621.0, "h": 134.0, "line_num": 13, "text": "The main function .", "delta": -34.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 477.0, "y": 1846.0, "w": 118.0, "h": 39.0, "line_num": 14, "text": "/11.11", "delta": 20.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 474.0, "y": 1934.0, "w": 1157.0, "h": 82.0, "line_num": 15, "text": "n = int ( input (\"Enter a number: \")", "delta": -3.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 470.0, "y": 2057.0, "w": 511.0, "h": 88.0, "line_num": 16, "text": "if is-prime (n):", "delta": -4.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 589.0, "y": 2186.0, "w": 1057.0, "h": 92.0, "line_num": 17, "text": "print (n, \" is a prime number. \")", "delta": 119.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 451.0, "y": 2349.0, "w": 178.0, "h": 72.0, "line_num": 18, "text": "else :", "delta": -138.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 587.0, "y": 2471.0, "w": 1181.0, "h": 84.0, "line_num": 19, "text": "print( n, \" is not a prime number. \")", "delta": 136.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 333.0, "y": 2650.0, "w": 87.0, "h": 85.0, "line_num": 20, "text": "if", "delta": -254.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 462.0, "y": 2678.0, "w": 642.0, "h": 80.0, "line_num": 21, "text": "-- name __ == \"", "delta": 129.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 974.0, "y": 2706.0, "w": 503.0, "h": 84.0, "line_num": 22, "text": "- - main __ :", "delta": 512.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 474.0, "y": 2838.0, "w": 210.0, "h": 75.0, "line_num": 23, "text": "main ( )", "delta": -500.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 73, "prompting_method": "cot-test5", "lm_post_processed_code": "def is_prime(n):\n1104\nReturns True if n is prime, False otherwise\n11011\nif n <= 1 :\n    return False\nfor i in range (2, int(n* 0.5) +1):\n    if n % i == 0:\n        return False\nreturn True\n\ndef main() :\n11 /11\nThe main function .\n/11.11\nn = int(input(\"Enter a number: \"))\nif is_prime(n):\n    print(n, \" is a prime number. \")\nelse :\n    print(n, \" is not a prime number. \")\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 91}, {"image_id": 25, "image_height": 3393, "image_width": 2984, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 263.0, "y": 39.0, "w": 597.0, "h": 83.0, "line_num": 1, "text": "def is-prime (n):"}, {"x": 423.0, "y": 168.0, "w": 91.0, "h": 41.0, "line_num": 2, "text": "1104"}, {"x": 434.0, "y": 240.0, "w": 1471.0, "h": 96.0, "line_num": 3, "text": "Returns True if n is prime, False otherwise"}, {"x": 435.0, "y": 395.0, "w": 79.0, "h": 41.0, "line_num": 4, "text": "11011"}, {"x": 426.0, "y": 487.0, "w": 397.0, "h": 81.0, "line_num": 5, "text": "if n < = 1 :"}, {"x": 606.0, "y": 627.0, "w": 461.0, "h": 72.0, "line_num": 6, "text": "return False"}, {"x": 420.0, "y": 752.0, "w": 1117.0, "h": 86.0, "line_num": 7, "text": "for i in range (2, int(n* 0.5) +1):"}, {"x": 552.0, "y": 903.0, "w": 571.0, "h": 86.0, "line_num": 8, "text": "if n % i == 0."}, {"x": 725.0, "y": 1068.0, "w": 429.0, "h": 71.0, "line_num": 9, "text": "return False"}, {"x": 427.0, "y": 1166.0, "w": 499.0, "h": 127.0, "line_num": 10, "text": "return True"}, {"x": 281.0, "y": 1481.0, "w": 437.0, "h": 80.0, "line_num": 11, "text": "def main () :"}, {"x": 491.0, "y": 1609.0, "w": 85.0, "h": 44.0, "line_num": 12, "text": "11 /11"}, {"x": 457.0, "y": 1694.0, "w": 621.0, "h": 134.0, "line_num": 13, "text": "The main function ."}, {"x": 477.0, "y": 1846.0, "w": 118.0, "h": 39.0, "line_num": 14, "text": "/11.11"}, {"x": 474.0, "y": 1934.0, "w": 1157.0, "h": 82.0, "line_num": 15, "text": "n = int ( input (\"Enter a number: \")"}, {"x": 470.0, "y": 2057.0, "w": 511.0, "h": 88.0, "line_num": 16, "text": "if is-prime (n):"}, {"x": 589.0, "y": 2186.0, "w": 1057.0, "h": 92.0, "line_num": 17, "text": "print (n, \" is a prime number. \")"}, {"x": 451.0, "y": 2349.0, "w": 178.0, "h": 72.0, "line_num": 18, "text": "else :"}, {"x": 587.0, "y": 2471.0, "w": 1181.0, "h": 84.0, "line_num": 19, "text": "print( n, \" is not a prime number. \")"}, {"x": 333.0, "y": 2650.0, "w": 87.0, "h": 85.0, "line_num": 20, "text": "if"}, {"x": 462.0, "y": 2678.0, "w": 642.0, "h": 80.0, "line_num": 21, "text": "-- name __ == \""}, {"x": 974.0, "y": 2706.0, "w": 503.0, "h": 84.0, "line_num": 22, "text": "- - main __ :"}, {"x": 474.0, "y": 2838.0, "w": 210.0, "h": 75.0, "line_num": 23, "text": "main ( )"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def is-prime (n):\n    1104\n    Returns True if n is prime, False otherwise\n    11011\n    if n < = 1 :\n        return False\n    for i in range (2, int(n* 0.5) +1):\n        if n % i == 0.\n            return False\n    return True\ndef main () :\n    11 /11\n    The main function .\n    /11.11\n    n = int ( input (\"Enter a number: \")\n    if is-prime (n):\n        print (n, \" is a prime number. \")\n    else :\n        print( n, \" is not a prime number. \")\nif\n    -- name __ == \"\n        - - main __ :\n    main ( )\n", "ir_algo_output_indented_lines": [{"x": 263.0, "y": 39.0, "w": 597.0, "h": 83.0, "line_num": 1, "text": "def is-prime (n):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 423.0, "y": 168.0, "w": 91.0, "h": 41.0, "line_num": 2, "text": "1104", "delta": 160.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 434.0, "y": 240.0, "w": 1471.0, "h": 96.0, "line_num": 3, "text": "Returns True if n is prime, False otherwise", "delta": 11.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 435.0, "y": 395.0, "w": 79.0, "h": 41.0, "line_num": 4, "text": "11011", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 426.0, "y": 487.0, "w": 397.0, "h": 81.0, "line_num": 5, "text": "if n < = 1 :", "delta": -9.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 606.0, "y": 627.0, "w": 461.0, "h": 72.0, "line_num": 6, "text": "return False", "delta": 180.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 420.0, "y": 752.0, "w": 1117.0, "h": 86.0, "line_num": 7, "text": "for i in range (2, int(n* 0.5) +1):", "delta": -186.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 552.0, "y": 903.0, "w": 571.0, "h": 86.0, "line_num": 8, "text": "if n % i == 0.", "delta": 132.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 725.0, "y": 1068.0, "w": 429.0, "h": 71.0, "line_num": 9, "text": "return False", "delta": 173.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 427.0, "y": 1166.0, "w": 499.0, "h": 127.0, "line_num": 10, "text": "return True", "delta": -298.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 281.0, "y": 1481.0, "w": 437.0, "h": 80.0, "line_num": 11, "text": "def main () :", "delta": -146.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 491.0, "y": 1609.0, "w": 85.0, "h": 44.0, "line_num": 12, "text": "11 /11", "delta": 210.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 457.0, "y": 1694.0, "w": 621.0, "h": 134.0, "line_num": 13, "text": "The main function .", "delta": -34.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 477.0, "y": 1846.0, "w": 118.0, "h": 39.0, "line_num": 14, "text": "/11.11", "delta": 20.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 474.0, "y": 1934.0, "w": 1157.0, "h": 82.0, "line_num": 15, "text": "n = int ( input (\"Enter a number: \")", "delta": -3.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 470.0, "y": 2057.0, "w": 511.0, "h": 88.0, "line_num": 16, "text": "if is-prime (n):", "delta": -4.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 589.0, "y": 2186.0, "w": 1057.0, "h": 92.0, "line_num": 17, "text": "print (n, \" is a prime number. \")", "delta": 119.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 451.0, "y": 2349.0, "w": 178.0, "h": 72.0, "line_num": 18, "text": "else :", "delta": -138.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 587.0, "y": 2471.0, "w": 1181.0, "h": 84.0, "line_num": 19, "text": "print( n, \" is not a prime number. \")", "delta": 136.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 333.0, "y": 2650.0, "w": 87.0, "h": 85.0, "line_num": 20, "text": "if", "delta": -254.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 462.0, "y": 2678.0, "w": 642.0, "h": 80.0, "line_num": 21, "text": "-- name __ == \"", "delta": 129.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 974.0, "y": 2706.0, "w": 503.0, "h": 84.0, "line_num": 22, "text": "- - main __ :", "delta": 512.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 474.0, "y": 2838.0, "w": 210.0, "h": 75.0, "line_num": 23, "text": "main ( )", "delta": -500.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 73, "prompting_method": "simple-test2", "lm_post_processed_code": "def is_prime(n):\n    \"\"\"\n    Returns True if n is prime, False otherwise\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n * 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef main():\n    \"\"\"\n    The main function.\n    \"\"\"\n    n = int(input(\"Enter a number: \"))\n    if is_prime(n):\n        print(n, \"is a prime number.\")\n    else:\n        print(n, \"is not a prime number.\")\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 3}, {"image_id": 25, "image_height": 3393, "image_width": 2984, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 263.0, "y": 39.0, "w": 597.0, "h": 83.0, "line_num": 1, "text": "def is-prime (n):"}, {"x": 423.0, "y": 168.0, "w": 91.0, "h": 41.0, "line_num": 2, "text": "1104"}, {"x": 434.0, "y": 240.0, "w": 1471.0, "h": 96.0, "line_num": 3, "text": "Returns True if n is prime, False otherwise"}, {"x": 435.0, "y": 395.0, "w": 79.0, "h": 41.0, "line_num": 4, "text": "11011"}, {"x": 426.0, "y": 487.0, "w": 397.0, "h": 81.0, "line_num": 5, "text": "if n < = 1 :"}, {"x": 606.0, "y": 627.0, "w": 461.0, "h": 72.0, "line_num": 6, "text": "return False"}, {"x": 420.0, "y": 752.0, "w": 1117.0, "h": 86.0, "line_num": 7, "text": "for i in range (2, int(n* 0.5) +1):"}, {"x": 552.0, "y": 903.0, "w": 571.0, "h": 86.0, "line_num": 8, "text": "if n % i == 0."}, {"x": 725.0, "y": 1068.0, "w": 429.0, "h": 71.0, "line_num": 9, "text": "return False"}, {"x": 427.0, "y": 1166.0, "w": 499.0, "h": 127.0, "line_num": 10, "text": "return True"}, {"x": 281.0, "y": 1481.0, "w": 437.0, "h": 80.0, "line_num": 11, "text": "def main () :"}, {"x": 491.0, "y": 1609.0, "w": 85.0, "h": 44.0, "line_num": 12, "text": "11 /11"}, {"x": 457.0, "y": 1694.0, "w": 621.0, "h": 134.0, "line_num": 13, "text": "The main function ."}, {"x": 477.0, "y": 1846.0, "w": 118.0, "h": 39.0, "line_num": 14, "text": "/11.11"}, {"x": 474.0, "y": 1934.0, "w": 1157.0, "h": 82.0, "line_num": 15, "text": "n = int ( input (\"Enter a number: \")"}, {"x": 470.0, "y": 2057.0, "w": 511.0, "h": 88.0, "line_num": 16, "text": "if is-prime (n):"}, {"x": 589.0, "y": 2186.0, "w": 1057.0, "h": 92.0, "line_num": 17, "text": "print (n, \" is a prime number. \")"}, {"x": 451.0, "y": 2349.0, "w": 178.0, "h": 72.0, "line_num": 18, "text": "else :"}, {"x": 587.0, "y": 2471.0, "w": 1181.0, "h": 84.0, "line_num": 19, "text": "print( n, \" is not a prime number. \")"}, {"x": 333.0, "y": 2650.0, "w": 87.0, "h": 85.0, "line_num": 20, "text": "if"}, {"x": 462.0, "y": 2678.0, "w": 642.0, "h": 80.0, "line_num": 21, "text": "-- name __ == \""}, {"x": 974.0, "y": 2706.0, "w": 503.0, "h": 84.0, "line_num": 22, "text": "- - main __ :"}, {"x": 474.0, "y": 2838.0, "w": 210.0, "h": 75.0, "line_num": 23, "text": "main ( )"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def is-prime (n):\n    1104\n    Returns True if n is prime, False otherwise\n    11011\n    if n < = 1 :\n        return False\n    for i in range (2, int(n* 0.5) +1):\n        if n % i == 0.\n            return False\n    return True\ndef main () :\n    11 /11\n    The main function .\n    /11.11\n    n = int ( input (\"Enter a number: \")\n    if is-prime (n):\n        print (n, \" is a prime number. \")\n    else :\n        print( n, \" is not a prime number. \")\nif\n    -- name __ == \"\n        - - main __ :\n    main ( )\n", "ir_algo_output_indented_lines": [{"x": 263.0, "y": 39.0, "w": 597.0, "h": 83.0, "line_num": 1, "text": "def is-prime (n):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 423.0, "y": 168.0, "w": 91.0, "h": 41.0, "line_num": 2, "text": "1104", "delta": 160.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 434.0, "y": 240.0, "w": 1471.0, "h": 96.0, "line_num": 3, "text": "Returns True if n is prime, False otherwise", "delta": 11.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 435.0, "y": 395.0, "w": 79.0, "h": 41.0, "line_num": 4, "text": "11011", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 426.0, "y": 487.0, "w": 397.0, "h": 81.0, "line_num": 5, "text": "if n < = 1 :", "delta": -9.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 606.0, "y": 627.0, "w": 461.0, "h": 72.0, "line_num": 6, "text": "return False", "delta": 180.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 420.0, "y": 752.0, "w": 1117.0, "h": 86.0, "line_num": 7, "text": "for i in range (2, int(n* 0.5) +1):", "delta": -186.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 552.0, "y": 903.0, "w": 571.0, "h": 86.0, "line_num": 8, "text": "if n % i == 0.", "delta": 132.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 725.0, "y": 1068.0, "w": 429.0, "h": 71.0, "line_num": 9, "text": "return False", "delta": 173.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 427.0, "y": 1166.0, "w": 499.0, "h": 127.0, "line_num": 10, "text": "return True", "delta": -298.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 281.0, "y": 1481.0, "w": 437.0, "h": 80.0, "line_num": 11, "text": "def main () :", "delta": -146.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 491.0, "y": 1609.0, "w": 85.0, "h": 44.0, "line_num": 12, "text": "11 /11", "delta": 210.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 457.0, "y": 1694.0, "w": 621.0, "h": 134.0, "line_num": 13, "text": "The main function .", "delta": -34.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 477.0, "y": 1846.0, "w": 118.0, "h": 39.0, "line_num": 14, "text": "/11.11", "delta": 20.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 474.0, "y": 1934.0, "w": 1157.0, "h": 82.0, "line_num": 15, "text": "n = int ( input (\"Enter a number: \")", "delta": -3.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 470.0, "y": 2057.0, "w": 511.0, "h": 88.0, "line_num": 16, "text": "if is-prime (n):", "delta": -4.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 589.0, "y": 2186.0, "w": 1057.0, "h": 92.0, "line_num": 17, "text": "print (n, \" is a prime number. \")", "delta": 119.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 451.0, "y": 2349.0, "w": 178.0, "h": 72.0, "line_num": 18, "text": "else :", "delta": -138.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 587.0, "y": 2471.0, "w": 1181.0, "h": 84.0, "line_num": 19, "text": "print( n, \" is not a prime number. \")", "delta": 136.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 333.0, "y": 2650.0, "w": 87.0, "h": 85.0, "line_num": 20, "text": "if", "delta": -254.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 462.0, "y": 2678.0, "w": 642.0, "h": 80.0, "line_num": 21, "text": "-- name __ == \"", "delta": 129.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 974.0, "y": 2706.0, "w": 503.0, "h": 84.0, "line_num": 22, "text": "- - main __ :", "delta": 512.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 474.0, "y": 2838.0, "w": 210.0, "h": 75.0, "line_num": 23, "text": "main ( )", "delta": -500.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 73, "prompting_method": "simple-test3", "lm_post_processed_code": "def is_prime(n):\n    \"\"\"\n    Returns True if n is prime, False otherwise\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n*0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef main():\n    \"\"\"\n    The main function.\n    \"\"\"\n    n = int(input(\"Enter a number: \"))\n    if is_prime(n):\n        print(n, \" is a prime number.\")\n    else:\n        print(n, \" is not a prime number.\")\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 4}, {"image_id": 29, "image_height": 2980, "image_width": 2016, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 131.0, "w": 360.0, "h": 91.0, "line_num": 1, "text": "def main ( ) :"}, {"x": 339.0, "y": 270.0, "w": 1567.0, "h": 65.0, "line_num": 2, "text": "The program should determine whether the given year is a leap year"}, {"x": 340.0, "y": 326.0, "w": 1136.0, "h": 69.0, "line_num": 3, "text": "( divisible by 4, divisible by 100 but also by 400)."}, {"x": 335.0, "y": 471.0, "w": 1555.0, "h": 70.0, "line_num": 4, "text": "print ( \" This program will help you identify if a given year is a leap"}, {"x": 546.0, "y": 542.0, "w": 357.0, "h": 60.0, "line_num": 5, "text": "year or not . \")"}, {"x": 335.0, "y": 622.0, "w": 215.0, "h": 85.0, "line_num": 6, "text": "print ( \""}, {"x": 338.0, "y": 704.0, "w": 484.0, "h": 68.0, "line_num": 7, "text": "identify_a_ leap year ()"}, {"x": 343.0, "y": 780.0, "w": 689.0, "h": 65.0, "line_num": 8, "text": "ask _ for _ a _ new _year _ to _identify ( )"}, {"x": 161.0, "y": 897.0, "w": 624.0, "h": 73.0, "line_num": 9, "text": "def identify_ a_ leap-year () :"}, {"x": 349.0, "y": 983.0, "w": 1121.0, "h": 74.0, "line_num": 10, "text": "print (\"Please input a year below ( in number form). \")"}, {"x": 346.0, "y": 1054.0, "w": 587.0, "h": 63.0, "line_num": 11, "text": "Year = int (input (\"Year:"}, {"x": 353.0, "y": 1121.0, "w": 272.0, "h": 63.0, "line_num": 12, "text": "print (\" \")"}, {"x": 345.0, "y": 1204.0, "w": 1448.0, "h": 75.0, "line_num": 13, "text": "if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;"}, {"x": 516.0, "y": 1283.0, "w": 1322.0, "h": 85.0, "line_num": 14, "text": "print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")"}, {"x": 340.0, "y": 1405.0, "w": 105.0, "h": 56.0, "line_num": 15, "text": "else :"}, {"x": 518.0, "y": 1450.0, "w": 1399.0, "h": 92.0, "line_num": 16, "text": "print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )"}, {"x": 154.0, "y": 1595.0, "w": 918.0, "h": 73.0, "line_num": 17, "text": "def ask-for-a-new year_ to _ identify ( ) :"}, {"x": 336.0, "y": 1709.0, "w": 263.0, "h": 56.0, "line_num": 18, "text": "while True :"}, {"x": 506.0, "y": 1782.0, "w": 244.0, "h": 67.0, "line_num": 19, "text": "print (\" \")"}, {"x": 511.0, "y": 1847.0, "w": 1390.0, "h": 78.0, "line_num": 20, "text": "ask - input ( \" Do you want to identify a new year ? Yes / No : \" )"}, {"x": 508.0, "y": 1921.0, "w": 275.0, "h": 60.0, "line_num": 21, "text": "print (\" \")"}, {"x": 511.0, "y": 2004.0, "w": 801.0, "h": 65.0, "line_num": 22, "text": "if ask == \"Yes \" or ask == \"yes\":"}, {"x": 618.0, "y": 2078.0, "w": 542.0, "h": 70.0, "line_num": 23, "text": "identify_ a _ leap - year ( )"}, {"x": 509.0, "y": 2170.0, "w": 788.0, "h": 62.0, "line_num": 24, "text": "elif ask == \"No\" or ask = \"no\":"}, {"x": 605.0, "y": 2245.0, "w": 837.0, "h": 73.0, "line_num": 25, "text": "print ( \" Thank you . See you again ! \")"}, {"x": 611.0, "y": 2324.0, "w": 124.0, "h": 57.0, "line_num": 26, "text": "break"}, {"x": 505.0, "y": 2407.0, "w": 1469.0, "h": 65.0, "line_num": 27, "text": "elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\"."}, {"x": 613.0, "y": 2483.0, "w": 1325.0, "h": 78.0, "line_num": 28, "text": "print ( \" Wrong keyword . Please type the exact keyword . \")"}, {"x": 155.0, "y": 2663.0, "w": 43.0, "h": 56.0, "line_num": 29, "text": "if"}, {"x": 202.0, "y": 2674.0, "w": 607.0, "h": 63.0, "line_num": 30, "text": "_ name_ == \" __ main __ \":"}, {"x": 327.0, "y": 2765.0, "w": 186.0, "h": 63.0, "line_num": 31, "text": "main ()"}], "ir_algo_name": "none", "ir_algo_output_code": "def main ( ) :\nThe program should determine whether the given year is a leap year\n( divisible by 4, divisible by 100 but also by 400).\nprint ( \" This program will help you identify if a given year is a leap\nyear or not . \")\nprint ( \"\nidentify_a_ leap year ()\nask _ for _ a _ new _year _ to _identify ( )\ndef identify_ a_ leap-year () :\nprint (\"Please input a year below ( in number form). \")\nYear = int (input (\"Year:\nprint (\" \")\nif (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;\nprint (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")\nelse :\nprint ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )\ndef ask-for-a-new year_ to _ identify ( ) :\nwhile True :\nprint (\" \")\nask - input ( \" Do you want to identify a new year ? Yes / No : \" )\nprint (\" \")\nif ask == \"Yes \" or ask == \"yes\":\nidentify_ a _ leap - year ( )\nelif ask == \"No\" or ask = \"no\":\nprint ( \" Thank you . See you again ! \")\nbreak\nelif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\".\nprint ( \" Wrong keyword . Please type the exact keyword . \")\nif\n_ name_ == \" __ main __ \":\nmain ()", "ir_algo_output_edit_distance": 302, "prompting_method": "none", "lm_post_processed_code": "def main ( ) :\nThe program should determine whether the given year is a leap year\n( divisible by 4, divisible by 100 but also by 400).\nprint ( \" This program will help you identify if a given year is a leap\nyear or not . \")\nprint ( \"\nidentify_a_ leap year ()\nask _ for _ a _ new _year _ to _identify ( )\ndef identify_ a_ leap-year () :\nprint (\"Please input a year below ( in number form). \")\nYear = int (input (\"Year:\nprint (\" \")\nif (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;\nprint (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")\nelse :\nprint ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )\ndef ask-for-a-new year_ to _ identify ( ) :\nwhile True :\nprint (\" \")\nask - input ( \" Do you want to identify a new year ? Yes / No : \" )\nprint (\" \")\nif ask == \"Yes \" or ask == \"yes\":\nidentify_ a _ leap - year ( )\nelif ask == \"No\" or ask = \"no\":\nprint ( \" Thank you . See you again ! \")\nbreak\nelif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\".\nprint ( \" Wrong keyword . Please type the exact keyword . \")\nif\n_ name_ == \" __ main __ \":\nmain ()", "lm_post_processed_edit_distance": 302}, {"image_id": 29, "image_height": 2980, "image_width": 2016, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 131.0, "w": 360.0, "h": 91.0, "line_num": 1, "text": "def main ( ) :"}, {"x": 339.0, "y": 270.0, "w": 1567.0, "h": 65.0, "line_num": 2, "text": "The program should determine whether the given year is a leap year"}, {"x": 340.0, "y": 326.0, "w": 1136.0, "h": 69.0, "line_num": 3, "text": "( divisible by 4, divisible by 100 but also by 400)."}, {"x": 335.0, "y": 471.0, "w": 1555.0, "h": 70.0, "line_num": 4, "text": "print ( \" This program will help you identify if a given year is a leap"}, {"x": 546.0, "y": 542.0, "w": 357.0, "h": 60.0, "line_num": 5, "text": "year or not . \")"}, {"x": 335.0, "y": 622.0, "w": 215.0, "h": 85.0, "line_num": 6, "text": "print ( \""}, {"x": 338.0, "y": 704.0, "w": 484.0, "h": 68.0, "line_num": 7, "text": "identify_a_ leap year ()"}, {"x": 343.0, "y": 780.0, "w": 689.0, "h": 65.0, "line_num": 8, "text": "ask _ for _ a _ new _year _ to _identify ( )"}, {"x": 161.0, "y": 897.0, "w": 624.0, "h": 73.0, "line_num": 9, "text": "def identify_ a_ leap-year () :"}, {"x": 349.0, "y": 983.0, "w": 1121.0, "h": 74.0, "line_num": 10, "text": "print (\"Please input a year below ( in number form). \")"}, {"x": 346.0, "y": 1054.0, "w": 587.0, "h": 63.0, "line_num": 11, "text": "Year = int (input (\"Year:"}, {"x": 353.0, "y": 1121.0, "w": 272.0, "h": 63.0, "line_num": 12, "text": "print (\" \")"}, {"x": 345.0, "y": 1204.0, "w": 1448.0, "h": 75.0, "line_num": 13, "text": "if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;"}, {"x": 516.0, "y": 1283.0, "w": 1322.0, "h": 85.0, "line_num": 14, "text": "print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")"}, {"x": 340.0, "y": 1405.0, "w": 105.0, "h": 56.0, "line_num": 15, "text": "else :"}, {"x": 518.0, "y": 1450.0, "w": 1399.0, "h": 92.0, "line_num": 16, "text": "print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )"}, {"x": 154.0, "y": 1595.0, "w": 918.0, "h": 73.0, "line_num": 17, "text": "def ask-for-a-new year_ to _ identify ( ) :"}, {"x": 336.0, "y": 1709.0, "w": 263.0, "h": 56.0, "line_num": 18, "text": "while True :"}, {"x": 506.0, "y": 1782.0, "w": 244.0, "h": 67.0, "line_num": 19, "text": "print (\" \")"}, {"x": 511.0, "y": 1847.0, "w": 1390.0, "h": 78.0, "line_num": 20, "text": "ask - input ( \" Do you want to identify a new year ? Yes / No : \" )"}, {"x": 508.0, "y": 1921.0, "w": 275.0, "h": 60.0, "line_num": 21, "text": "print (\" \")"}, {"x": 511.0, "y": 2004.0, "w": 801.0, "h": 65.0, "line_num": 22, "text": "if ask == \"Yes \" or ask == \"yes\":"}, {"x": 618.0, "y": 2078.0, "w": 542.0, "h": 70.0, "line_num": 23, "text": "identify_ a _ leap - year ( )"}, {"x": 509.0, "y": 2170.0, "w": 788.0, "h": 62.0, "line_num": 24, "text": "elif ask == \"No\" or ask = \"no\":"}, {"x": 605.0, "y": 2245.0, "w": 837.0, "h": 73.0, "line_num": 25, "text": "print ( \" Thank you . See you again ! \")"}, {"x": 611.0, "y": 2324.0, "w": 124.0, "h": 57.0, "line_num": 26, "text": "break"}, {"x": 505.0, "y": 2407.0, "w": 1469.0, "h": 65.0, "line_num": 27, "text": "elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\"."}, {"x": 613.0, "y": 2483.0, "w": 1325.0, "h": 78.0, "line_num": 28, "text": "print ( \" Wrong keyword . Please type the exact keyword . \")"}, {"x": 155.0, "y": 2663.0, "w": 43.0, "h": 56.0, "line_num": 29, "text": "if"}, {"x": 202.0, "y": 2674.0, "w": 607.0, "h": 63.0, "line_num": 30, "text": "_ name_ == \" __ main __ \":"}, {"x": 327.0, "y": 2765.0, "w": 186.0, "h": 63.0, "line_num": 31, "text": "main ()"}], "ir_algo_name": "none", "ir_algo_output_code": "def main ( ) :\nThe program should determine whether the given year is a leap year\n( divisible by 4, divisible by 100 but also by 400).\nprint ( \" This program will help you identify if a given year is a leap\nyear or not . \")\nprint ( \"\nidentify_a_ leap year ()\nask _ for _ a _ new _year _ to _identify ( )\ndef identify_ a_ leap-year () :\nprint (\"Please input a year below ( in number form). \")\nYear = int (input (\"Year:\nprint (\" \")\nif (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;\nprint (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")\nelse :\nprint ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )\ndef ask-for-a-new year_ to _ identify ( ) :\nwhile True :\nprint (\" \")\nask - input ( \" Do you want to identify a new year ? Yes / No : \" )\nprint (\" \")\nif ask == \"Yes \" or ask == \"yes\":\nidentify_ a _ leap - year ( )\nelif ask == \"No\" or ask = \"no\":\nprint ( \" Thank you . See you again ! \")\nbreak\nelif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\".\nprint ( \" Wrong keyword . Please type the exact keyword . \")\nif\n_ name_ == \" __ main __ \":\nmain ()", "ir_algo_output_edit_distance": 302, "prompting_method": "cot-test1", "lm_post_processed_code": "def main():\nThe program should determine whether the given year is a leap year\n(divisible by 4, divisible by 100 but also by 400).\nprint(\"This program will help you identify if a given year is a leap year or not.\")\nprint(\"\")\nidentify_a_leap_year()\nask_for_a_new_year_to_identify()\n\ndef identify_a_leap_year():\nprint(\"Please input a year below (in number form).\")\nYear = int(input(\"Year: \"))\nprint(\"\")\nif (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):\nprint(\"The Year\" + str(Year) + \" \" + \"is a leap year.\")\nelse:\nprint(\"The Year\" + str(Year) + \" \" + \"is not a leap year.\")\n\ndef ask_for_a_new_year_to_identify():\nwhile True:\nprint(\"\")\nask = input(\"Do you want to identify a new year? Yes/No: \")\nprint(\"\")\nif ask == \"Yes\" or ask == \"yes\":\nidentify_a_leap_year()\nelif ask == \"No\" or ask == \"no\":\nprint(\"Thank you. See you again!\")\nbreak\nelif ask != \"Yes\" or ask != \"yes\" or ask != \"No\" or ask != \"no\":\nprint(\"Wrong keyword. Please type the exact keyword.\")\n\nif __name__ == \"__main__\":\nmain()\n", "lm_post_processed_edit_distance": 188}, {"image_id": 29, "image_height": 2980, "image_width": 2016, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 131.0, "w": 360.0, "h": 91.0, "line_num": 1, "text": "def main ( ) :"}, {"x": 339.0, "y": 270.0, "w": 1567.0, "h": 65.0, "line_num": 2, "text": "The program should determine whether the given year is a leap year"}, {"x": 340.0, "y": 326.0, "w": 1136.0, "h": 69.0, "line_num": 3, "text": "( divisible by 4, divisible by 100 but also by 400)."}, {"x": 335.0, "y": 471.0, "w": 1555.0, "h": 70.0, "line_num": 4, "text": "print ( \" This program will help you identify if a given year is a leap"}, {"x": 546.0, "y": 542.0, "w": 357.0, "h": 60.0, "line_num": 5, "text": "year or not . \")"}, {"x": 335.0, "y": 622.0, "w": 215.0, "h": 85.0, "line_num": 6, "text": "print ( \""}, {"x": 338.0, "y": 704.0, "w": 484.0, "h": 68.0, "line_num": 7, "text": "identify_a_ leap year ()"}, {"x": 343.0, "y": 780.0, "w": 689.0, "h": 65.0, "line_num": 8, "text": "ask _ for _ a _ new _year _ to _identify ( )"}, {"x": 161.0, "y": 897.0, "w": 624.0, "h": 73.0, "line_num": 9, "text": "def identify_ a_ leap-year () :"}, {"x": 349.0, "y": 983.0, "w": 1121.0, "h": 74.0, "line_num": 10, "text": "print (\"Please input a year below ( in number form). \")"}, {"x": 346.0, "y": 1054.0, "w": 587.0, "h": 63.0, "line_num": 11, "text": "Year = int (input (\"Year:"}, {"x": 353.0, "y": 1121.0, "w": 272.0, "h": 63.0, "line_num": 12, "text": "print (\" \")"}, {"x": 345.0, "y": 1204.0, "w": 1448.0, "h": 75.0, "line_num": 13, "text": "if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;"}, {"x": 516.0, "y": 1283.0, "w": 1322.0, "h": 85.0, "line_num": 14, "text": "print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")"}, {"x": 340.0, "y": 1405.0, "w": 105.0, "h": 56.0, "line_num": 15, "text": "else :"}, {"x": 518.0, "y": 1450.0, "w": 1399.0, "h": 92.0, "line_num": 16, "text": "print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )"}, {"x": 154.0, "y": 1595.0, "w": 918.0, "h": 73.0, "line_num": 17, "text": "def ask-for-a-new year_ to _ identify ( ) :"}, {"x": 336.0, "y": 1709.0, "w": 263.0, "h": 56.0, "line_num": 18, "text": "while True :"}, {"x": 506.0, "y": 1782.0, "w": 244.0, "h": 67.0, "line_num": 19, "text": "print (\" \")"}, {"x": 511.0, "y": 1847.0, "w": 1390.0, "h": 78.0, "line_num": 20, "text": "ask - input ( \" Do you want to identify a new year ? Yes / No : \" )"}, {"x": 508.0, "y": 1921.0, "w": 275.0, "h": 60.0, "line_num": 21, "text": "print (\" \")"}, {"x": 511.0, "y": 2004.0, "w": 801.0, "h": 65.0, "line_num": 22, "text": "if ask == \"Yes \" or ask == \"yes\":"}, {"x": 618.0, "y": 2078.0, "w": 542.0, "h": 70.0, "line_num": 23, "text": "identify_ a _ leap - year ( )"}, {"x": 509.0, "y": 2170.0, "w": 788.0, "h": 62.0, "line_num": 24, "text": "elif ask == \"No\" or ask = \"no\":"}, {"x": 605.0, "y": 2245.0, "w": 837.0, "h": 73.0, "line_num": 25, "text": "print ( \" Thank you . See you again ! \")"}, {"x": 611.0, "y": 2324.0, "w": 124.0, "h": 57.0, "line_num": 26, "text": "break"}, {"x": 505.0, "y": 2407.0, "w": 1469.0, "h": 65.0, "line_num": 27, "text": "elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\"."}, {"x": 613.0, "y": 2483.0, "w": 1325.0, "h": 78.0, "line_num": 28, "text": "print ( \" Wrong keyword . Please type the exact keyword . \")"}, {"x": 155.0, "y": 2663.0, "w": 43.0, "h": 56.0, "line_num": 29, "text": "if"}, {"x": 202.0, "y": 2674.0, "w": 607.0, "h": 63.0, "line_num": 30, "text": "_ name_ == \" __ main __ \":"}, {"x": 327.0, "y": 2765.0, "w": 186.0, "h": 63.0, "line_num": 31, "text": "main ()"}], "ir_algo_name": "none", "ir_algo_output_code": "def main ( ) :\nThe program should determine whether the given year is a leap year\n( divisible by 4, divisible by 100 but also by 400).\nprint ( \" This program will help you identify if a given year is a leap\nyear or not . \")\nprint ( \"\nidentify_a_ leap year ()\nask _ for _ a _ new _year _ to _identify ( )\ndef identify_ a_ leap-year () :\nprint (\"Please input a year below ( in number form). \")\nYear = int (input (\"Year:\nprint (\" \")\nif (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;\nprint (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")\nelse :\nprint ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )\ndef ask-for-a-new year_ to _ identify ( ) :\nwhile True :\nprint (\" \")\nask - input ( \" Do you want to identify a new year ? Yes / No : \" )\nprint (\" \")\nif ask == \"Yes \" or ask == \"yes\":\nidentify_ a _ leap - year ( )\nelif ask == \"No\" or ask = \"no\":\nprint ( \" Thank you . See you again ! \")\nbreak\nelif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\".\nprint ( \" Wrong keyword . Please type the exact keyword . \")\nif\n_ name_ == \" __ main __ \":\nmain ()", "ir_algo_output_edit_distance": 302, "prompting_method": "cot-test5", "lm_post_processed_code": "def main():\n# The program should determine whether the given year is a leap year\n# (divisible by 4, divisible by 100 but also by 400).\nprint(\"This program will help you identify if a given year is a leap year or not.\")\nprint(\"\")\nidentify_a_leap_year()\nask_for_a_new_year_to_identify()\n\ndef identify_a_leap_year():\nprint(\"Please input a year below (in number form).\")\nYear = int(input(\"Year:\"))\nprint(\"\")\nif (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):\n    print(\"The Year\" + str(Year) + \" \" + \"is a leap year.\")\nelse:\n    print(\"The Year\" + str(Year) + \" \" + \"is not a leap year.\")\n\ndef ask_for_a_new_year_to_identify():\nwhile True:\n    print(\"\")\n    ask = input(\"Do you want to identify a new year? Yes/No: \")\n    print(\"\")\n    if ask == \"Yes\" or ask == \"yes\":\n        identify_a_leap_year()\n    elif ask == \"No\" or ask == \"no\":\n        print(\"Thank you. See you again!\")\n        break\n    elif ask != \"Yes\" or ask != \"yes\" or ask != \"No\" or ask != \"no\":\n        print(\"Wrong keyword. Please type the exact keyword.\")\n\nif __name__ == \"__main__\":\nmain()\n", "lm_post_processed_edit_distance": 123}, {"image_id": 29, "image_height": 2980, "image_width": 2016, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 131.0, "w": 360.0, "h": 91.0, "line_num": 1, "text": "def main ( ) :"}, {"x": 339.0, "y": 270.0, "w": 1567.0, "h": 65.0, "line_num": 2, "text": "The program should determine whether the given year is a leap year"}, {"x": 340.0, "y": 326.0, "w": 1136.0, "h": 69.0, "line_num": 3, "text": "( divisible by 4, divisible by 100 but also by 400)."}, {"x": 335.0, "y": 471.0, "w": 1555.0, "h": 70.0, "line_num": 4, "text": "print ( \" This program will help you identify if a given year is a leap"}, {"x": 546.0, "y": 542.0, "w": 357.0, "h": 60.0, "line_num": 5, "text": "year or not . \")"}, {"x": 335.0, "y": 622.0, "w": 215.0, "h": 85.0, "line_num": 6, "text": "print ( \""}, {"x": 338.0, "y": 704.0, "w": 484.0, "h": 68.0, "line_num": 7, "text": "identify_a_ leap year ()"}, {"x": 343.0, "y": 780.0, "w": 689.0, "h": 65.0, "line_num": 8, "text": "ask _ for _ a _ new _year _ to _identify ( )"}, {"x": 161.0, "y": 897.0, "w": 624.0, "h": 73.0, "line_num": 9, "text": "def identify_ a_ leap-year () :"}, {"x": 349.0, "y": 983.0, "w": 1121.0, "h": 74.0, "line_num": 10, "text": "print (\"Please input a year below ( in number form). \")"}, {"x": 346.0, "y": 1054.0, "w": 587.0, "h": 63.0, "line_num": 11, "text": "Year = int (input (\"Year:"}, {"x": 353.0, "y": 1121.0, "w": 272.0, "h": 63.0, "line_num": 12, "text": "print (\" \")"}, {"x": 345.0, "y": 1204.0, "w": 1448.0, "h": 75.0, "line_num": 13, "text": "if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;"}, {"x": 516.0, "y": 1283.0, "w": 1322.0, "h": 85.0, "line_num": 14, "text": "print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")"}, {"x": 340.0, "y": 1405.0, "w": 105.0, "h": 56.0, "line_num": 15, "text": "else :"}, {"x": 518.0, "y": 1450.0, "w": 1399.0, "h": 92.0, "line_num": 16, "text": "print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )"}, {"x": 154.0, "y": 1595.0, "w": 918.0, "h": 73.0, "line_num": 17, "text": "def ask-for-a-new year_ to _ identify ( ) :"}, {"x": 336.0, "y": 1709.0, "w": 263.0, "h": 56.0, "line_num": 18, "text": "while True :"}, {"x": 506.0, "y": 1782.0, "w": 244.0, "h": 67.0, "line_num": 19, "text": "print (\" \")"}, {"x": 511.0, "y": 1847.0, "w": 1390.0, "h": 78.0, "line_num": 20, "text": "ask - input ( \" Do you want to identify a new year ? Yes / No : \" )"}, {"x": 508.0, "y": 1921.0, "w": 275.0, "h": 60.0, "line_num": 21, "text": "print (\" \")"}, {"x": 511.0, "y": 2004.0, "w": 801.0, "h": 65.0, "line_num": 22, "text": "if ask == \"Yes \" or ask == \"yes\":"}, {"x": 618.0, "y": 2078.0, "w": 542.0, "h": 70.0, "line_num": 23, "text": "identify_ a _ leap - year ( )"}, {"x": 509.0, "y": 2170.0, "w": 788.0, "h": 62.0, "line_num": 24, "text": "elif ask == \"No\" or ask = \"no\":"}, {"x": 605.0, "y": 2245.0, "w": 837.0, "h": 73.0, "line_num": 25, "text": "print ( \" Thank you . See you again ! \")"}, {"x": 611.0, "y": 2324.0, "w": 124.0, "h": 57.0, "line_num": 26, "text": "break"}, {"x": 505.0, "y": 2407.0, "w": 1469.0, "h": 65.0, "line_num": 27, "text": "elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\"."}, {"x": 613.0, "y": 2483.0, "w": 1325.0, "h": 78.0, "line_num": 28, "text": "print ( \" Wrong keyword . Please type the exact keyword . \")"}, {"x": 155.0, "y": 2663.0, "w": 43.0, "h": 56.0, "line_num": 29, "text": "if"}, {"x": 202.0, "y": 2674.0, "w": 607.0, "h": 63.0, "line_num": 30, "text": "_ name_ == \" __ main __ \":"}, {"x": 327.0, "y": 2765.0, "w": 186.0, "h": 63.0, "line_num": 31, "text": "main ()"}], "ir_algo_name": "none", "ir_algo_output_code": "def main ( ) :\nThe program should determine whether the given year is a leap year\n( divisible by 4, divisible by 100 but also by 400).\nprint ( \" This program will help you identify if a given year is a leap\nyear or not . \")\nprint ( \"\nidentify_a_ leap year ()\nask _ for _ a _ new _year _ to _identify ( )\ndef identify_ a_ leap-year () :\nprint (\"Please input a year below ( in number form). \")\nYear = int (input (\"Year:\nprint (\" \")\nif (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;\nprint (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")\nelse :\nprint ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )\ndef ask-for-a-new year_ to _ identify ( ) :\nwhile True :\nprint (\" \")\nask - input ( \" Do you want to identify a new year ? Yes / No : \" )\nprint (\" \")\nif ask == \"Yes \" or ask == \"yes\":\nidentify_ a _ leap - year ( )\nelif ask == \"No\" or ask = \"no\":\nprint ( \" Thank you . See you again ! \")\nbreak\nelif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\".\nprint ( \" Wrong keyword . Please type the exact keyword . \")\nif\n_ name_ == \" __ main __ \":\nmain ()", "ir_algo_output_edit_distance": 302, "prompting_method": "simple-test2", "lm_post_processed_code": "def main():\n    print(\"This program will help you identify if a given year is a leap year or not.\")\n    identify_a_leap_year()\n    ask_for_a_new_year_to_identify()\n\ndef identify_a_leap_year():\n    print(\"Please input a year below (in number form).\")\n    Year = int(input(\"Year: \"))\n    print(\" \")\n    if (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):\n        print(\"The Year\" + str(Year) + \" \" + \"is a leap year.\")\n    else:\n        print(\"The Year\" + str(Year) + \" \" + \"is not a leap year.\")\n\ndef ask_for_a_new_year_to_identify():\n    while True:\n        print(\" \")\n        ask = input(\"Do you want to identify a new year? Yes/No: \")\n        print(\" \")\n        if ask == \"Yes\" or ask == \"yes\":\n            identify_a_leap_year()\n        elif ask == \"No\" or ask == \"no\":\n            print(\"Thank you. See you again!\")\n            break\n        elif ask != \"Yes\" or ask != \"yes\" or ask != \"No\" or ask != \"no\":\n            print(\"Wrong keyword. Please type the exact keyword.\")\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 162}, {"image_id": 29, "image_height": 2980, "image_width": 2016, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 131.0, "w": 360.0, "h": 91.0, "line_num": 1, "text": "def main ( ) :"}, {"x": 339.0, "y": 270.0, "w": 1567.0, "h": 65.0, "line_num": 2, "text": "The program should determine whether the given year is a leap year"}, {"x": 340.0, "y": 326.0, "w": 1136.0, "h": 69.0, "line_num": 3, "text": "( divisible by 4, divisible by 100 but also by 400)."}, {"x": 335.0, "y": 471.0, "w": 1555.0, "h": 70.0, "line_num": 4, "text": "print ( \" This program will help you identify if a given year is a leap"}, {"x": 546.0, "y": 542.0, "w": 357.0, "h": 60.0, "line_num": 5, "text": "year or not . \")"}, {"x": 335.0, "y": 622.0, "w": 215.0, "h": 85.0, "line_num": 6, "text": "print ( \""}, {"x": 338.0, "y": 704.0, "w": 484.0, "h": 68.0, "line_num": 7, "text": "identify_a_ leap year ()"}, {"x": 343.0, "y": 780.0, "w": 689.0, "h": 65.0, "line_num": 8, "text": "ask _ for _ a _ new _year _ to _identify ( )"}, {"x": 161.0, "y": 897.0, "w": 624.0, "h": 73.0, "line_num": 9, "text": "def identify_ a_ leap-year () :"}, {"x": 349.0, "y": 983.0, "w": 1121.0, "h": 74.0, "line_num": 10, "text": "print (\"Please input a year below ( in number form). \")"}, {"x": 346.0, "y": 1054.0, "w": 587.0, "h": 63.0, "line_num": 11, "text": "Year = int (input (\"Year:"}, {"x": 353.0, "y": 1121.0, "w": 272.0, "h": 63.0, "line_num": 12, "text": "print (\" \")"}, {"x": 345.0, "y": 1204.0, "w": 1448.0, "h": 75.0, "line_num": 13, "text": "if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;"}, {"x": 516.0, "y": 1283.0, "w": 1322.0, "h": 85.0, "line_num": 14, "text": "print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")"}, {"x": 340.0, "y": 1405.0, "w": 105.0, "h": 56.0, "line_num": 15, "text": "else :"}, {"x": 518.0, "y": 1450.0, "w": 1399.0, "h": 92.0, "line_num": 16, "text": "print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )"}, {"x": 154.0, "y": 1595.0, "w": 918.0, "h": 73.0, "line_num": 17, "text": "def ask-for-a-new year_ to _ identify ( ) :"}, {"x": 336.0, "y": 1709.0, "w": 263.0, "h": 56.0, "line_num": 18, "text": "while True :"}, {"x": 506.0, "y": 1782.0, "w": 244.0, "h": 67.0, "line_num": 19, "text": "print (\" \")"}, {"x": 511.0, "y": 1847.0, "w": 1390.0, "h": 78.0, "line_num": 20, "text": "ask - input ( \" Do you want to identify a new year ? Yes / No : \" )"}, {"x": 508.0, "y": 1921.0, "w": 275.0, "h": 60.0, "line_num": 21, "text": "print (\" \")"}, {"x": 511.0, "y": 2004.0, "w": 801.0, "h": 65.0, "line_num": 22, "text": "if ask == \"Yes \" or ask == \"yes\":"}, {"x": 618.0, "y": 2078.0, "w": 542.0, "h": 70.0, "line_num": 23, "text": "identify_ a _ leap - year ( )"}, {"x": 509.0, "y": 2170.0, "w": 788.0, "h": 62.0, "line_num": 24, "text": "elif ask == \"No\" or ask = \"no\":"}, {"x": 605.0, "y": 2245.0, "w": 837.0, "h": 73.0, "line_num": 25, "text": "print ( \" Thank you . See you again ! \")"}, {"x": 611.0, "y": 2324.0, "w": 124.0, "h": 57.0, "line_num": 26, "text": "break"}, {"x": 505.0, "y": 2407.0, "w": 1469.0, "h": 65.0, "line_num": 27, "text": "elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\"."}, {"x": 613.0, "y": 2483.0, "w": 1325.0, "h": 78.0, "line_num": 28, "text": "print ( \" Wrong keyword . Please type the exact keyword . \")"}, {"x": 155.0, "y": 2663.0, "w": 43.0, "h": 56.0, "line_num": 29, "text": "if"}, {"x": 202.0, "y": 2674.0, "w": 607.0, "h": 63.0, "line_num": 30, "text": "_ name_ == \" __ main __ \":"}, {"x": 327.0, "y": 2765.0, "w": 186.0, "h": 63.0, "line_num": 31, "text": "main ()"}], "ir_algo_name": "none", "ir_algo_output_code": "def main ( ) :\nThe program should determine whether the given year is a leap year\n( divisible by 4, divisible by 100 but also by 400).\nprint ( \" This program will help you identify if a given year is a leap\nyear or not . \")\nprint ( \"\nidentify_a_ leap year ()\nask _ for _ a _ new _year _ to _identify ( )\ndef identify_ a_ leap-year () :\nprint (\"Please input a year below ( in number form). \")\nYear = int (input (\"Year:\nprint (\" \")\nif (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;\nprint (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")\nelse :\nprint ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )\ndef ask-for-a-new year_ to _ identify ( ) :\nwhile True :\nprint (\" \")\nask - input ( \" Do you want to identify a new year ? Yes / No : \" )\nprint (\" \")\nif ask == \"Yes \" or ask == \"yes\":\nidentify_ a _ leap - year ( )\nelif ask == \"No\" or ask = \"no\":\nprint ( \" Thank you . See you again ! \")\nbreak\nelif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\".\nprint ( \" Wrong keyword . Please type the exact keyword . \")\nif\n_ name_ == \" __ main __ \":\nmain ()", "ir_algo_output_edit_distance": 302, "prompting_method": "simple-test3", "lm_post_processed_code": "def main():\n    print(\"This program will help you identify if a given year is a leap year or not.\")\n    identify_a_leap_year()\n    ask_for_a_new_year_to_identify()\n\ndef identify_a_leap_year():\n    print(\"Please input a year below (in number form).\")\n    Year = int(input(\"Year:\"))\n    print(\"\")\n    if (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):\n        print(\"The Year\" + str(Year) + \" \" + \"is a leap year.\")\n    else:\n        print(\"The Year\" + str(Year) + \" \" + \"is not a leap year.\")\n\ndef ask_for_a_new_year_to_identify():\n    while True:\n        print(\"\")\n        ask = input(\"Do you want to identify a new year? Yes/No: \")\n        print(\"\")\n        if ask == \"Yes\" or ask == \"yes\":\n            identify_a_leap_year()\n        elif ask == \"No\" or ask == \"no\":\n            print(\"Thank you. See you again!\")\n            break\n        elif ask != \"Yes\" or ask != \"yes\" or ask != \"No\" or ask != \"no\":\n            print(\"Wrong keyword. Please type the exact keyword.\")\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 166}, {"image_id": 29, "image_height": 2980, "image_width": 2016, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 131.0, "w": 360.0, "h": 91.0, "line_num": 1, "text": "def main ( ) :"}, {"x": 339.0, "y": 270.0, "w": 1567.0, "h": 65.0, "line_num": 2, "text": "The program should determine whether the given year is a leap year"}, {"x": 340.0, "y": 326.0, "w": 1136.0, "h": 69.0, "line_num": 3, "text": "( divisible by 4, divisible by 100 but also by 400)."}, {"x": 335.0, "y": 471.0, "w": 1555.0, "h": 70.0, "line_num": 4, "text": "print ( \" This program will help you identify if a given year is a leap"}, {"x": 546.0, "y": 542.0, "w": 357.0, "h": 60.0, "line_num": 5, "text": "year or not . \")"}, {"x": 335.0, "y": 622.0, "w": 215.0, "h": 85.0, "line_num": 6, "text": "print ( \""}, {"x": 338.0, "y": 704.0, "w": 484.0, "h": 68.0, "line_num": 7, "text": "identify_a_ leap year ()"}, {"x": 343.0, "y": 780.0, "w": 689.0, "h": 65.0, "line_num": 8, "text": "ask _ for _ a _ new _year _ to _identify ( )"}, {"x": 161.0, "y": 897.0, "w": 624.0, "h": 73.0, "line_num": 9, "text": "def identify_ a_ leap-year () :"}, {"x": 349.0, "y": 983.0, "w": 1121.0, "h": 74.0, "line_num": 10, "text": "print (\"Please input a year below ( in number form). \")"}, {"x": 346.0, "y": 1054.0, "w": 587.0, "h": 63.0, "line_num": 11, "text": "Year = int (input (\"Year:"}, {"x": 353.0, "y": 1121.0, "w": 272.0, "h": 63.0, "line_num": 12, "text": "print (\" \")"}, {"x": 345.0, "y": 1204.0, "w": 1448.0, "h": 75.0, "line_num": 13, "text": "if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;"}, {"x": 516.0, "y": 1283.0, "w": 1322.0, "h": 85.0, "line_num": 14, "text": "print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")"}, {"x": 340.0, "y": 1405.0, "w": 105.0, "h": 56.0, "line_num": 15, "text": "else :"}, {"x": 518.0, "y": 1450.0, "w": 1399.0, "h": 92.0, "line_num": 16, "text": "print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )"}, {"x": 154.0, "y": 1595.0, "w": 918.0, "h": 73.0, "line_num": 17, "text": "def ask-for-a-new year_ to _ identify ( ) :"}, {"x": 336.0, "y": 1709.0, "w": 263.0, "h": 56.0, "line_num": 18, "text": "while True :"}, {"x": 506.0, "y": 1782.0, "w": 244.0, "h": 67.0, "line_num": 19, "text": "print (\" \")"}, {"x": 511.0, "y": 1847.0, "w": 1390.0, "h": 78.0, "line_num": 20, "text": "ask - input ( \" Do you want to identify a new year ? Yes / No : \" )"}, {"x": 508.0, "y": 1921.0, "w": 275.0, "h": 60.0, "line_num": 21, "text": "print (\" \")"}, {"x": 511.0, "y": 2004.0, "w": 801.0, "h": 65.0, "line_num": 22, "text": "if ask == \"Yes \" or ask == \"yes\":"}, {"x": 618.0, "y": 2078.0, "w": 542.0, "h": 70.0, "line_num": 23, "text": "identify_ a _ leap - year ( )"}, {"x": 509.0, "y": 2170.0, "w": 788.0, "h": 62.0, "line_num": 24, "text": "elif ask == \"No\" or ask = \"no\":"}, {"x": 605.0, "y": 2245.0, "w": 837.0, "h": 73.0, "line_num": 25, "text": "print ( \" Thank you . See you again ! \")"}, {"x": 611.0, "y": 2324.0, "w": 124.0, "h": 57.0, "line_num": 26, "text": "break"}, {"x": 505.0, "y": 2407.0, "w": 1469.0, "h": 65.0, "line_num": 27, "text": "elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\"."}, {"x": 613.0, "y": 2483.0, "w": 1325.0, "h": 78.0, "line_num": 28, "text": "print ( \" Wrong keyword . Please type the exact keyword . \")"}, {"x": 155.0, "y": 2663.0, "w": 43.0, "h": 56.0, "line_num": 29, "text": "if"}, {"x": 202.0, "y": 2674.0, "w": 607.0, "h": 63.0, "line_num": 30, "text": "_ name_ == \" __ main __ \":"}, {"x": 327.0, "y": 2765.0, "w": 186.0, "h": 63.0, "line_num": 31, "text": "main ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 103.54838709677419, "ir_algo_output_code": "def main ( ) :\n    The program should determine whether the given year is a leap year\n    ( divisible by 4, divisible by 100 but also by 400).\n    print ( \" This program will help you identify if a given year is a leap\n        year or not . \")\n    print ( \"\n    identify_a_ leap year ()\n    ask _ for _ a _ new _year _ to _identify ( )\ndef identify_ a_ leap-year () :\n    print (\"Please input a year below ( in number form). \")\n    Year = int (input (\"Year:\n    print (\" \")\n    if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;\n        print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")\n    else :\n        print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )\ndef ask-for-a-new year_ to _ identify ( ) :\n    while True :\n        print (\" \")\n        ask - input ( \" Do you want to identify a new year ? Yes / No : \" )\n        print (\" \")\n        if ask == \"Yes \" or ask == \"yes\":\n        identify_ a _ leap - year ( )\n        elif ask == \"No\" or ask = \"no\":\n        print ( \" Thank you . See you again ! \")\n        break\n        elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\".\n        print ( \" Wrong keyword . Please type the exact keyword . \")\nif\n_ name_ == \" __ main __ \":\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 155.0, "y": 131.0, "w": 360.0, "h": 91.0, "line_num": 1, "text": "def main ( ) :", "cluster_label": 2, "indentation": 0}, {"x": 339.0, "y": 270.0, "w": 1567.0, "h": 65.0, "line_num": 2, "text": "The program should determine whether the given year is a leap year", "cluster_label": 1, "indentation": 1}, {"x": 340.0, "y": 326.0, "w": 1136.0, "h": 69.0, "line_num": 3, "text": "( divisible by 4, divisible by 100 but also by 400).", "cluster_label": 1, "indentation": 1}, {"x": 335.0, "y": 471.0, "w": 1555.0, "h": 70.0, "line_num": 4, "text": "print ( \" This program will help you identify if a given year is a leap", "cluster_label": 1, "indentation": 1}, {"x": 546.0, "y": 542.0, "w": 357.0, "h": 60.0, "line_num": 5, "text": "year or not . \")", "cluster_label": 0, "indentation": 2}, {"x": 335.0, "y": 622.0, "w": 215.0, "h": 85.0, "line_num": 6, "text": "print ( \"", "cluster_label": 1, "indentation": 1}, {"x": 338.0, "y": 704.0, "w": 484.0, "h": 68.0, "line_num": 7, "text": "identify_a_ leap year ()", "cluster_label": 1, "indentation": 1}, {"x": 343.0, "y": 780.0, "w": 689.0, "h": 65.0, "line_num": 8, "text": "ask _ for _ a _ new _year _ to _identify ( )", "cluster_label": 1, "indentation": 1}, {"x": 161.0, "y": 897.0, "w": 624.0, "h": 73.0, "line_num": 9, "text": "def identify_ a_ leap-year () :", "cluster_label": 2, "indentation": 0}, {"x": 349.0, "y": 983.0, "w": 1121.0, "h": 74.0, "line_num": 10, "text": "print (\"Please input a year below ( in number form). \")", "cluster_label": 1, "indentation": 1}, {"x": 346.0, "y": 1054.0, "w": 587.0, "h": 63.0, "line_num": 11, "text": "Year = int (input (\"Year:", "cluster_label": 1, "indentation": 1}, {"x": 353.0, "y": 1121.0, "w": 272.0, "h": 63.0, "line_num": 12, "text": "print (\" \")", "cluster_label": 1, "indentation": 1}, {"x": 345.0, "y": 1204.0, "w": 1448.0, "h": 75.0, "line_num": 13, "text": "if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;", "cluster_label": 1, "indentation": 1}, {"x": 516.0, "y": 1283.0, "w": 1322.0, "h": 85.0, "line_num": 14, "text": "print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")", "cluster_label": 0, "indentation": 2}, {"x": 340.0, "y": 1405.0, "w": 105.0, "h": 56.0, "line_num": 15, "text": "else :", "cluster_label": 1, "indentation": 1}, {"x": 518.0, "y": 1450.0, "w": 1399.0, "h": 92.0, "line_num": 16, "text": "print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )", "cluster_label": 0, "indentation": 2}, {"x": 154.0, "y": 1595.0, "w": 918.0, "h": 73.0, "line_num": 17, "text": "def ask-for-a-new year_ to _ identify ( ) :", "cluster_label": 2, "indentation": 0}, {"x": 336.0, "y": 1709.0, "w": 263.0, "h": 56.0, "line_num": 18, "text": "while True :", "cluster_label": 1, "indentation": 1}, {"x": 506.0, "y": 1782.0, "w": 244.0, "h": 67.0, "line_num": 19, "text": "print (\" \")", "cluster_label": 0, "indentation": 2}, {"x": 511.0, "y": 1847.0, "w": 1390.0, "h": 78.0, "line_num": 20, "text": "ask - input ( \" Do you want to identify a new year ? Yes / No : \" )", "cluster_label": 0, "indentation": 2}, {"x": 508.0, "y": 1921.0, "w": 275.0, "h": 60.0, "line_num": 21, "text": "print (\" \")", "cluster_label": 0, "indentation": 2}, {"x": 511.0, "y": 2004.0, "w": 801.0, "h": 65.0, "line_num": 22, "text": "if ask == \"Yes \" or ask == \"yes\":", "cluster_label": 0, "indentation": 2}, {"x": 618.0, "y": 2078.0, "w": 542.0, "h": 70.0, "line_num": 23, "text": "identify_ a _ leap - year ( )", "cluster_label": 0, "indentation": 2}, {"x": 509.0, "y": 2170.0, "w": 788.0, "h": 62.0, "line_num": 24, "text": "elif ask == \"No\" or ask = \"no\":", "cluster_label": 0, "indentation": 2}, {"x": 605.0, "y": 2245.0, "w": 837.0, "h": 73.0, "line_num": 25, "text": "print ( \" Thank you . See you again ! \")", "cluster_label": 0, "indentation": 2}, {"x": 611.0, "y": 2324.0, "w": 124.0, "h": 57.0, "line_num": 26, "text": "break", "cluster_label": 0, "indentation": 2}, {"x": 505.0, "y": 2407.0, "w": 1469.0, "h": 65.0, "line_num": 27, "text": "elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\".", "cluster_label": 0, "indentation": 2}, {"x": 613.0, "y": 2483.0, "w": 1325.0, "h": 78.0, "line_num": 28, "text": "print ( \" Wrong keyword . Please type the exact keyword . \")", "cluster_label": 0, "indentation": 2}, {"x": 155.0, "y": 2663.0, "w": 43.0, "h": 56.0, "line_num": 29, "text": "if", "cluster_label": 2, "indentation": 0}, {"x": 202.0, "y": 2674.0, "w": 607.0, "h": 63.0, "line_num": 30, "text": "_ name_ == \" __ main __ \":", "cluster_label": 2, "indentation": 0}, {"x": 327.0, "y": 2765.0, "w": 186.0, "h": 63.0, "line_num": 31, "text": "main ()", "cluster_label": 1, "indentation": 1}], "ir_algo_output_edit_distance": 163, "prompting_method": "none", "lm_post_processed_code": "def main ( ) :\n    The program should determine whether the given year is a leap year\n    ( divisible by 4, divisible by 100 but also by 400).\n    print ( \" This program will help you identify if a given year is a leap\n        year or not . \")\n    print ( \"\n    identify_a_ leap year ()\n    ask _ for _ a _ new _year _ to _identify ( )\ndef identify_ a_ leap-year () :\n    print (\"Please input a year below ( in number form). \")\n    Year = int (input (\"Year:\n    print (\" \")\n    if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;\n        print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")\n    else :\n        print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )\ndef ask-for-a-new year_ to _ identify ( ) :\n    while True :\n        print (\" \")\n        ask - input ( \" Do you want to identify a new year ? Yes / No : \" )\n        print (\" \")\n        if ask == \"Yes \" or ask == \"yes\":\n        identify_ a _ leap - year ( )\n        elif ask == \"No\" or ask = \"no\":\n        print ( \" Thank you . See you again ! \")\n        break\n        elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\".\n        print ( \" Wrong keyword . Please type the exact keyword . \")\nif\n_ name_ == \" __ main __ \":\n    main ()\n", "lm_post_processed_edit_distance": 163}, {"image_id": 29, "image_height": 2980, "image_width": 2016, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 131.0, "w": 360.0, "h": 91.0, "line_num": 1, "text": "def main ( ) :"}, {"x": 339.0, "y": 270.0, "w": 1567.0, "h": 65.0, "line_num": 2, "text": "The program should determine whether the given year is a leap year"}, {"x": 340.0, "y": 326.0, "w": 1136.0, "h": 69.0, "line_num": 3, "text": "( divisible by 4, divisible by 100 but also by 400)."}, {"x": 335.0, "y": 471.0, "w": 1555.0, "h": 70.0, "line_num": 4, "text": "print ( \" This program will help you identify if a given year is a leap"}, {"x": 546.0, "y": 542.0, "w": 357.0, "h": 60.0, "line_num": 5, "text": "year or not . \")"}, {"x": 335.0, "y": 622.0, "w": 215.0, "h": 85.0, "line_num": 6, "text": "print ( \""}, {"x": 338.0, "y": 704.0, "w": 484.0, "h": 68.0, "line_num": 7, "text": "identify_a_ leap year ()"}, {"x": 343.0, "y": 780.0, "w": 689.0, "h": 65.0, "line_num": 8, "text": "ask _ for _ a _ new _year _ to _identify ( )"}, {"x": 161.0, "y": 897.0, "w": 624.0, "h": 73.0, "line_num": 9, "text": "def identify_ a_ leap-year () :"}, {"x": 349.0, "y": 983.0, "w": 1121.0, "h": 74.0, "line_num": 10, "text": "print (\"Please input a year below ( in number form). \")"}, {"x": 346.0, "y": 1054.0, "w": 587.0, "h": 63.0, "line_num": 11, "text": "Year = int (input (\"Year:"}, {"x": 353.0, "y": 1121.0, "w": 272.0, "h": 63.0, "line_num": 12, "text": "print (\" \")"}, {"x": 345.0, "y": 1204.0, "w": 1448.0, "h": 75.0, "line_num": 13, "text": "if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;"}, {"x": 516.0, "y": 1283.0, "w": 1322.0, "h": 85.0, "line_num": 14, "text": "print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")"}, {"x": 340.0, "y": 1405.0, "w": 105.0, "h": 56.0, "line_num": 15, "text": "else :"}, {"x": 518.0, "y": 1450.0, "w": 1399.0, "h": 92.0, "line_num": 16, "text": "print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )"}, {"x": 154.0, "y": 1595.0, "w": 918.0, "h": 73.0, "line_num": 17, "text": "def ask-for-a-new year_ to _ identify ( ) :"}, {"x": 336.0, "y": 1709.0, "w": 263.0, "h": 56.0, "line_num": 18, "text": "while True :"}, {"x": 506.0, "y": 1782.0, "w": 244.0, "h": 67.0, "line_num": 19, "text": "print (\" \")"}, {"x": 511.0, "y": 1847.0, "w": 1390.0, "h": 78.0, "line_num": 20, "text": "ask - input ( \" Do you want to identify a new year ? Yes / No : \" )"}, {"x": 508.0, "y": 1921.0, "w": 275.0, "h": 60.0, "line_num": 21, "text": "print (\" \")"}, {"x": 511.0, "y": 2004.0, "w": 801.0, "h": 65.0, "line_num": 22, "text": "if ask == \"Yes \" or ask == \"yes\":"}, {"x": 618.0, "y": 2078.0, "w": 542.0, "h": 70.0, "line_num": 23, "text": "identify_ a _ leap - year ( )"}, {"x": 509.0, "y": 2170.0, "w": 788.0, "h": 62.0, "line_num": 24, "text": "elif ask == \"No\" or ask = \"no\":"}, {"x": 605.0, "y": 2245.0, "w": 837.0, "h": 73.0, "line_num": 25, "text": "print ( \" Thank you . See you again ! \")"}, {"x": 611.0, "y": 2324.0, "w": 124.0, "h": 57.0, "line_num": 26, "text": "break"}, {"x": 505.0, "y": 2407.0, "w": 1469.0, "h": 65.0, "line_num": 27, "text": "elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\"."}, {"x": 613.0, "y": 2483.0, "w": 1325.0, "h": 78.0, "line_num": 28, "text": "print ( \" Wrong keyword . Please type the exact keyword . \")"}, {"x": 155.0, "y": 2663.0, "w": 43.0, "h": 56.0, "line_num": 29, "text": "if"}, {"x": 202.0, "y": 2674.0, "w": 607.0, "h": 63.0, "line_num": 30, "text": "_ name_ == \" __ main __ \":"}, {"x": 327.0, "y": 2765.0, "w": 186.0, "h": 63.0, "line_num": 31, "text": "main ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 103.54838709677419, "ir_algo_output_code": "def main ( ) :\n    The program should determine whether the given year is a leap year\n    ( divisible by 4, divisible by 100 but also by 400).\n    print ( \" This program will help you identify if a given year is a leap\n        year or not . \")\n    print ( \"\n    identify_a_ leap year ()\n    ask _ for _ a _ new _year _ to _identify ( )\ndef identify_ a_ leap-year () :\n    print (\"Please input a year below ( in number form). \")\n    Year = int (input (\"Year:\n    print (\" \")\n    if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;\n        print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")\n    else :\n        print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )\ndef ask-for-a-new year_ to _ identify ( ) :\n    while True :\n        print (\" \")\n        ask - input ( \" Do you want to identify a new year ? Yes / No : \" )\n        print (\" \")\n        if ask == \"Yes \" or ask == \"yes\":\n        identify_ a _ leap - year ( )\n        elif ask == \"No\" or ask = \"no\":\n        print ( \" Thank you . See you again ! \")\n        break\n        elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\".\n        print ( \" Wrong keyword . Please type the exact keyword . \")\nif\n_ name_ == \" __ main __ \":\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 155.0, "y": 131.0, "w": 360.0, "h": 91.0, "line_num": 1, "text": "def main ( ) :", "cluster_label": 2, "indentation": 0}, {"x": 339.0, "y": 270.0, "w": 1567.0, "h": 65.0, "line_num": 2, "text": "The program should determine whether the given year is a leap year", "cluster_label": 1, "indentation": 1}, {"x": 340.0, "y": 326.0, "w": 1136.0, "h": 69.0, "line_num": 3, "text": "( divisible by 4, divisible by 100 but also by 400).", "cluster_label": 1, "indentation": 1}, {"x": 335.0, "y": 471.0, "w": 1555.0, "h": 70.0, "line_num": 4, "text": "print ( \" This program will help you identify if a given year is a leap", "cluster_label": 1, "indentation": 1}, {"x": 546.0, "y": 542.0, "w": 357.0, "h": 60.0, "line_num": 5, "text": "year or not . \")", "cluster_label": 0, "indentation": 2}, {"x": 335.0, "y": 622.0, "w": 215.0, "h": 85.0, "line_num": 6, "text": "print ( \"", "cluster_label": 1, "indentation": 1}, {"x": 338.0, "y": 704.0, "w": 484.0, "h": 68.0, "line_num": 7, "text": "identify_a_ leap year ()", "cluster_label": 1, "indentation": 1}, {"x": 343.0, "y": 780.0, "w": 689.0, "h": 65.0, "line_num": 8, "text": "ask _ for _ a _ new _year _ to _identify ( )", "cluster_label": 1, "indentation": 1}, {"x": 161.0, "y": 897.0, "w": 624.0, "h": 73.0, "line_num": 9, "text": "def identify_ a_ leap-year () :", "cluster_label": 2, "indentation": 0}, {"x": 349.0, "y": 983.0, "w": 1121.0, "h": 74.0, "line_num": 10, "text": "print (\"Please input a year below ( in number form). \")", "cluster_label": 1, "indentation": 1}, {"x": 346.0, "y": 1054.0, "w": 587.0, "h": 63.0, "line_num": 11, "text": "Year = int (input (\"Year:", "cluster_label": 1, "indentation": 1}, {"x": 353.0, "y": 1121.0, "w": 272.0, "h": 63.0, "line_num": 12, "text": "print (\" \")", "cluster_label": 1, "indentation": 1}, {"x": 345.0, "y": 1204.0, "w": 1448.0, "h": 75.0, "line_num": 13, "text": "if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;", "cluster_label": 1, "indentation": 1}, {"x": 516.0, "y": 1283.0, "w": 1322.0, "h": 85.0, "line_num": 14, "text": "print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")", "cluster_label": 0, "indentation": 2}, {"x": 340.0, "y": 1405.0, "w": 105.0, "h": 56.0, "line_num": 15, "text": "else :", "cluster_label": 1, "indentation": 1}, {"x": 518.0, "y": 1450.0, "w": 1399.0, "h": 92.0, "line_num": 16, "text": "print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )", "cluster_label": 0, "indentation": 2}, {"x": 154.0, "y": 1595.0, "w": 918.0, "h": 73.0, "line_num": 17, "text": "def ask-for-a-new year_ to _ identify ( ) :", "cluster_label": 2, "indentation": 0}, {"x": 336.0, "y": 1709.0, "w": 263.0, "h": 56.0, "line_num": 18, "text": "while True :", "cluster_label": 1, "indentation": 1}, {"x": 506.0, "y": 1782.0, "w": 244.0, "h": 67.0, "line_num": 19, "text": "print (\" \")", "cluster_label": 0, "indentation": 2}, {"x": 511.0, "y": 1847.0, "w": 1390.0, "h": 78.0, "line_num": 20, "text": "ask - input ( \" Do you want to identify a new year ? Yes / No : \" )", "cluster_label": 0, "indentation": 2}, {"x": 508.0, "y": 1921.0, "w": 275.0, "h": 60.0, "line_num": 21, "text": "print (\" \")", "cluster_label": 0, "indentation": 2}, {"x": 511.0, "y": 2004.0, "w": 801.0, "h": 65.0, "line_num": 22, "text": "if ask == \"Yes \" or ask == \"yes\":", "cluster_label": 0, "indentation": 2}, {"x": 618.0, "y": 2078.0, "w": 542.0, "h": 70.0, "line_num": 23, "text": "identify_ a _ leap - year ( )", "cluster_label": 0, "indentation": 2}, {"x": 509.0, "y": 2170.0, "w": 788.0, "h": 62.0, "line_num": 24, "text": "elif ask == \"No\" or ask = \"no\":", "cluster_label": 0, "indentation": 2}, {"x": 605.0, "y": 2245.0, "w": 837.0, "h": 73.0, "line_num": 25, "text": "print ( \" Thank you . See you again ! \")", "cluster_label": 0, "indentation": 2}, {"x": 611.0, "y": 2324.0, "w": 124.0, "h": 57.0, "line_num": 26, "text": "break", "cluster_label": 0, "indentation": 2}, {"x": 505.0, "y": 2407.0, "w": 1469.0, "h": 65.0, "line_num": 27, "text": "elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\".", "cluster_label": 0, "indentation": 2}, {"x": 613.0, "y": 2483.0, "w": 1325.0, "h": 78.0, "line_num": 28, "text": "print ( \" Wrong keyword . Please type the exact keyword . \")", "cluster_label": 0, "indentation": 2}, {"x": 155.0, "y": 2663.0, "w": 43.0, "h": 56.0, "line_num": 29, "text": "if", "cluster_label": 2, "indentation": 0}, {"x": 202.0, "y": 2674.0, "w": 607.0, "h": 63.0, "line_num": 30, "text": "_ name_ == \" __ main __ \":", "cluster_label": 2, "indentation": 0}, {"x": 327.0, "y": 2765.0, "w": 186.0, "h": 63.0, "line_num": 31, "text": "main ()", "cluster_label": 1, "indentation": 1}], "ir_algo_output_edit_distance": 163, "prompting_method": "cot-test1", "lm_post_processed_code": "def main():\nprint(\"This program will help you identify if a given year is a leap year or not.\")\nidentify_a_leap_year()\nask_for_a_new_year_to_identify()\n\ndef identify_a_leap_year():\nprint(\"Please input a year below (in number form).\")\nYear = int(input(\"Year:\"))\nprint(\" \")\nif (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):\n    print(\"The Year\" + str(Year) + \" \" + \"is a leap year.\")\nelse:\n    print(\"The Year\" + str(Year) + \" \" + \"is not a leap year.\")\n\ndef ask_for_a_new_year_to_identify():\nwhile True:\n    print(\" \")\n    ask = input(\"Do you want to identify a new year? Yes/No: \")\n    print(\" \")\n    if ask == \"Yes\" or ask == \"yes\":\n        identify_a_leap_year()\n    elif ask == \"No\" or ask == \"no\":\n        print(\"Thank you. See you again!\")\n        break\n    elif ask != \"Yes\" or ask != \"yes\" or ask != \"No\" or ask != \"no\":\n        print(\"Wrong keyword. Please type the exact keyword.\")\n\nif __name__ == \"__main__\":\nmain()\n", "lm_post_processed_edit_distance": 251}, {"image_id": 29, "image_height": 2980, "image_width": 2016, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 131.0, "w": 360.0, "h": 91.0, "line_num": 1, "text": "def main ( ) :"}, {"x": 339.0, "y": 270.0, "w": 1567.0, "h": 65.0, "line_num": 2, "text": "The program should determine whether the given year is a leap year"}, {"x": 340.0, "y": 326.0, "w": 1136.0, "h": 69.0, "line_num": 3, "text": "( divisible by 4, divisible by 100 but also by 400)."}, {"x": 335.0, "y": 471.0, "w": 1555.0, "h": 70.0, "line_num": 4, "text": "print ( \" This program will help you identify if a given year is a leap"}, {"x": 546.0, "y": 542.0, "w": 357.0, "h": 60.0, "line_num": 5, "text": "year or not . \")"}, {"x": 335.0, "y": 622.0, "w": 215.0, "h": 85.0, "line_num": 6, "text": "print ( \""}, {"x": 338.0, "y": 704.0, "w": 484.0, "h": 68.0, "line_num": 7, "text": "identify_a_ leap year ()"}, {"x": 343.0, "y": 780.0, "w": 689.0, "h": 65.0, "line_num": 8, "text": "ask _ for _ a _ new _year _ to _identify ( )"}, {"x": 161.0, "y": 897.0, "w": 624.0, "h": 73.0, "line_num": 9, "text": "def identify_ a_ leap-year () :"}, {"x": 349.0, "y": 983.0, "w": 1121.0, "h": 74.0, "line_num": 10, "text": "print (\"Please input a year below ( in number form). \")"}, {"x": 346.0, "y": 1054.0, "w": 587.0, "h": 63.0, "line_num": 11, "text": "Year = int (input (\"Year:"}, {"x": 353.0, "y": 1121.0, "w": 272.0, "h": 63.0, "line_num": 12, "text": "print (\" \")"}, {"x": 345.0, "y": 1204.0, "w": 1448.0, "h": 75.0, "line_num": 13, "text": "if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;"}, {"x": 516.0, "y": 1283.0, "w": 1322.0, "h": 85.0, "line_num": 14, "text": "print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")"}, {"x": 340.0, "y": 1405.0, "w": 105.0, "h": 56.0, "line_num": 15, "text": "else :"}, {"x": 518.0, "y": 1450.0, "w": 1399.0, "h": 92.0, "line_num": 16, "text": "print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )"}, {"x": 154.0, "y": 1595.0, "w": 918.0, "h": 73.0, "line_num": 17, "text": "def ask-for-a-new year_ to _ identify ( ) :"}, {"x": 336.0, "y": 1709.0, "w": 263.0, "h": 56.0, "line_num": 18, "text": "while True :"}, {"x": 506.0, "y": 1782.0, "w": 244.0, "h": 67.0, "line_num": 19, "text": "print (\" \")"}, {"x": 511.0, "y": 1847.0, "w": 1390.0, "h": 78.0, "line_num": 20, "text": "ask - input ( \" Do you want to identify a new year ? Yes / No : \" )"}, {"x": 508.0, "y": 1921.0, "w": 275.0, "h": 60.0, "line_num": 21, "text": "print (\" \")"}, {"x": 511.0, "y": 2004.0, "w": 801.0, "h": 65.0, "line_num": 22, "text": "if ask == \"Yes \" or ask == \"yes\":"}, {"x": 618.0, "y": 2078.0, "w": 542.0, "h": 70.0, "line_num": 23, "text": "identify_ a _ leap - year ( )"}, {"x": 509.0, "y": 2170.0, "w": 788.0, "h": 62.0, "line_num": 24, "text": "elif ask == \"No\" or ask = \"no\":"}, {"x": 605.0, "y": 2245.0, "w": 837.0, "h": 73.0, "line_num": 25, "text": "print ( \" Thank you . See you again ! \")"}, {"x": 611.0, "y": 2324.0, "w": 124.0, "h": 57.0, "line_num": 26, "text": "break"}, {"x": 505.0, "y": 2407.0, "w": 1469.0, "h": 65.0, "line_num": 27, "text": "elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\"."}, {"x": 613.0, "y": 2483.0, "w": 1325.0, "h": 78.0, "line_num": 28, "text": "print ( \" Wrong keyword . Please type the exact keyword . \")"}, {"x": 155.0, "y": 2663.0, "w": 43.0, "h": 56.0, "line_num": 29, "text": "if"}, {"x": 202.0, "y": 2674.0, "w": 607.0, "h": 63.0, "line_num": 30, "text": "_ name_ == \" __ main __ \":"}, {"x": 327.0, "y": 2765.0, "w": 186.0, "h": 63.0, "line_num": 31, "text": "main ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 103.54838709677419, "ir_algo_output_code": "def main ( ) :\n    The program should determine whether the given year is a leap year\n    ( divisible by 4, divisible by 100 but also by 400).\n    print ( \" This program will help you identify if a given year is a leap\n        year or not . \")\n    print ( \"\n    identify_a_ leap year ()\n    ask _ for _ a _ new _year _ to _identify ( )\ndef identify_ a_ leap-year () :\n    print (\"Please input a year below ( in number form). \")\n    Year = int (input (\"Year:\n    print (\" \")\n    if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;\n        print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")\n    else :\n        print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )\ndef ask-for-a-new year_ to _ identify ( ) :\n    while True :\n        print (\" \")\n        ask - input ( \" Do you want to identify a new year ? Yes / No : \" )\n        print (\" \")\n        if ask == \"Yes \" or ask == \"yes\":\n        identify_ a _ leap - year ( )\n        elif ask == \"No\" or ask = \"no\":\n        print ( \" Thank you . See you again ! \")\n        break\n        elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\".\n        print ( \" Wrong keyword . Please type the exact keyword . \")\nif\n_ name_ == \" __ main __ \":\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 155.0, "y": 131.0, "w": 360.0, "h": 91.0, "line_num": 1, "text": "def main ( ) :", "cluster_label": 2, "indentation": 0}, {"x": 339.0, "y": 270.0, "w": 1567.0, "h": 65.0, "line_num": 2, "text": "The program should determine whether the given year is a leap year", "cluster_label": 1, "indentation": 1}, {"x": 340.0, "y": 326.0, "w": 1136.0, "h": 69.0, "line_num": 3, "text": "( divisible by 4, divisible by 100 but also by 400).", "cluster_label": 1, "indentation": 1}, {"x": 335.0, "y": 471.0, "w": 1555.0, "h": 70.0, "line_num": 4, "text": "print ( \" This program will help you identify if a given year is a leap", "cluster_label": 1, "indentation": 1}, {"x": 546.0, "y": 542.0, "w": 357.0, "h": 60.0, "line_num": 5, "text": "year or not . \")", "cluster_label": 0, "indentation": 2}, {"x": 335.0, "y": 622.0, "w": 215.0, "h": 85.0, "line_num": 6, "text": "print ( \"", "cluster_label": 1, "indentation": 1}, {"x": 338.0, "y": 704.0, "w": 484.0, "h": 68.0, "line_num": 7, "text": "identify_a_ leap year ()", "cluster_label": 1, "indentation": 1}, {"x": 343.0, "y": 780.0, "w": 689.0, "h": 65.0, "line_num": 8, "text": "ask _ for _ a _ new _year _ to _identify ( )", "cluster_label": 1, "indentation": 1}, {"x": 161.0, "y": 897.0, "w": 624.0, "h": 73.0, "line_num": 9, "text": "def identify_ a_ leap-year () :", "cluster_label": 2, "indentation": 0}, {"x": 349.0, "y": 983.0, "w": 1121.0, "h": 74.0, "line_num": 10, "text": "print (\"Please input a year below ( in number form). \")", "cluster_label": 1, "indentation": 1}, {"x": 346.0, "y": 1054.0, "w": 587.0, "h": 63.0, "line_num": 11, "text": "Year = int (input (\"Year:", "cluster_label": 1, "indentation": 1}, {"x": 353.0, "y": 1121.0, "w": 272.0, "h": 63.0, "line_num": 12, "text": "print (\" \")", "cluster_label": 1, "indentation": 1}, {"x": 345.0, "y": 1204.0, "w": 1448.0, "h": 75.0, "line_num": 13, "text": "if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;", "cluster_label": 1, "indentation": 1}, {"x": 516.0, "y": 1283.0, "w": 1322.0, "h": 85.0, "line_num": 14, "text": "print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")", "cluster_label": 0, "indentation": 2}, {"x": 340.0, "y": 1405.0, "w": 105.0, "h": 56.0, "line_num": 15, "text": "else :", "cluster_label": 1, "indentation": 1}, {"x": 518.0, "y": 1450.0, "w": 1399.0, "h": 92.0, "line_num": 16, "text": "print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )", "cluster_label": 0, "indentation": 2}, {"x": 154.0, "y": 1595.0, "w": 918.0, "h": 73.0, "line_num": 17, "text": "def ask-for-a-new year_ to _ identify ( ) :", "cluster_label": 2, "indentation": 0}, {"x": 336.0, "y": 1709.0, "w": 263.0, "h": 56.0, "line_num": 18, "text": "while True :", "cluster_label": 1, "indentation": 1}, {"x": 506.0, "y": 1782.0, "w": 244.0, "h": 67.0, "line_num": 19, "text": "print (\" \")", "cluster_label": 0, "indentation": 2}, {"x": 511.0, "y": 1847.0, "w": 1390.0, "h": 78.0, "line_num": 20, "text": "ask - input ( \" Do you want to identify a new year ? Yes / No : \" )", "cluster_label": 0, "indentation": 2}, {"x": 508.0, "y": 1921.0, "w": 275.0, "h": 60.0, "line_num": 21, "text": "print (\" \")", "cluster_label": 0, "indentation": 2}, {"x": 511.0, "y": 2004.0, "w": 801.0, "h": 65.0, "line_num": 22, "text": "if ask == \"Yes \" or ask == \"yes\":", "cluster_label": 0, "indentation": 2}, {"x": 618.0, "y": 2078.0, "w": 542.0, "h": 70.0, "line_num": 23, "text": "identify_ a _ leap - year ( )", "cluster_label": 0, "indentation": 2}, {"x": 509.0, "y": 2170.0, "w": 788.0, "h": 62.0, "line_num": 24, "text": "elif ask == \"No\" or ask = \"no\":", "cluster_label": 0, "indentation": 2}, {"x": 605.0, "y": 2245.0, "w": 837.0, "h": 73.0, "line_num": 25, "text": "print ( \" Thank you . See you again ! \")", "cluster_label": 0, "indentation": 2}, {"x": 611.0, "y": 2324.0, "w": 124.0, "h": 57.0, "line_num": 26, "text": "break", "cluster_label": 0, "indentation": 2}, {"x": 505.0, "y": 2407.0, "w": 1469.0, "h": 65.0, "line_num": 27, "text": "elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\".", "cluster_label": 0, "indentation": 2}, {"x": 613.0, "y": 2483.0, "w": 1325.0, "h": 78.0, "line_num": 28, "text": "print ( \" Wrong keyword . Please type the exact keyword . \")", "cluster_label": 0, "indentation": 2}, {"x": 155.0, "y": 2663.0, "w": 43.0, "h": 56.0, "line_num": 29, "text": "if", "cluster_label": 2, "indentation": 0}, {"x": 202.0, "y": 2674.0, "w": 607.0, "h": 63.0, "line_num": 30, "text": "_ name_ == \" __ main __ \":", "cluster_label": 2, "indentation": 0}, {"x": 327.0, "y": 2765.0, "w": 186.0, "h": 63.0, "line_num": 31, "text": "main ()", "cluster_label": 1, "indentation": 1}], "ir_algo_output_edit_distance": 163, "prompting_method": "cot-test5", "lm_post_processed_code": "def main():\nprint(\"This program will help you identify if a given year is a leap year or not.\")\nidentify_a_leap_year()\nask_for_a_new_year_to_identify()\n\ndef identify_a_leap_year():\nprint(\"Please input a year below (in number form).\")\nYear = int(input(\"Year:\"))\nprint(\" \")\nif (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):\n    print(\"The Year\" + str(Year) + \" \" + \"is a leap year.\")\nelse:\n    print(\"The Year\" + str(Year) + \" \" + \"is not a leap year.\")\n\ndef ask_for_a_new_year_to_identify():\nwhile True:\n    print(\" \")\n    ask = input(\"Do you want to identify a new year? Yes/No: \")\n    print(\" \")\n    if ask == \"Yes\" or ask == \"yes\":\n        identify_a_leap_year()\n    elif ask == \"No\" or ask == \"no\":\n        print(\"Thank you. See you again!\")\n        break\n    elif ask != \"Yes\" or ask != \"yes\" or ask != \"No\" or ask != \"no\":\n        print(\"Wrong keyword. Please type the exact keyword.\")\n\nif __name__ == \"__main__\":\nmain()\n", "lm_post_processed_edit_distance": 251}, {"image_id": 29, "image_height": 2980, "image_width": 2016, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 131.0, "w": 360.0, "h": 91.0, "line_num": 1, "text": "def main ( ) :"}, {"x": 339.0, "y": 270.0, "w": 1567.0, "h": 65.0, "line_num": 2, "text": "The program should determine whether the given year is a leap year"}, {"x": 340.0, "y": 326.0, "w": 1136.0, "h": 69.0, "line_num": 3, "text": "( divisible by 4, divisible by 100 but also by 400)."}, {"x": 335.0, "y": 471.0, "w": 1555.0, "h": 70.0, "line_num": 4, "text": "print ( \" This program will help you identify if a given year is a leap"}, {"x": 546.0, "y": 542.0, "w": 357.0, "h": 60.0, "line_num": 5, "text": "year or not . \")"}, {"x": 335.0, "y": 622.0, "w": 215.0, "h": 85.0, "line_num": 6, "text": "print ( \""}, {"x": 338.0, "y": 704.0, "w": 484.0, "h": 68.0, "line_num": 7, "text": "identify_a_ leap year ()"}, {"x": 343.0, "y": 780.0, "w": 689.0, "h": 65.0, "line_num": 8, "text": "ask _ for _ a _ new _year _ to _identify ( )"}, {"x": 161.0, "y": 897.0, "w": 624.0, "h": 73.0, "line_num": 9, "text": "def identify_ a_ leap-year () :"}, {"x": 349.0, "y": 983.0, "w": 1121.0, "h": 74.0, "line_num": 10, "text": "print (\"Please input a year below ( in number form). \")"}, {"x": 346.0, "y": 1054.0, "w": 587.0, "h": 63.0, "line_num": 11, "text": "Year = int (input (\"Year:"}, {"x": 353.0, "y": 1121.0, "w": 272.0, "h": 63.0, "line_num": 12, "text": "print (\" \")"}, {"x": 345.0, "y": 1204.0, "w": 1448.0, "h": 75.0, "line_num": 13, "text": "if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;"}, {"x": 516.0, "y": 1283.0, "w": 1322.0, "h": 85.0, "line_num": 14, "text": "print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")"}, {"x": 340.0, "y": 1405.0, "w": 105.0, "h": 56.0, "line_num": 15, "text": "else :"}, {"x": 518.0, "y": 1450.0, "w": 1399.0, "h": 92.0, "line_num": 16, "text": "print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )"}, {"x": 154.0, "y": 1595.0, "w": 918.0, "h": 73.0, "line_num": 17, "text": "def ask-for-a-new year_ to _ identify ( ) :"}, {"x": 336.0, "y": 1709.0, "w": 263.0, "h": 56.0, "line_num": 18, "text": "while True :"}, {"x": 506.0, "y": 1782.0, "w": 244.0, "h": 67.0, "line_num": 19, "text": "print (\" \")"}, {"x": 511.0, "y": 1847.0, "w": 1390.0, "h": 78.0, "line_num": 20, "text": "ask - input ( \" Do you want to identify a new year ? Yes / No : \" )"}, {"x": 508.0, "y": 1921.0, "w": 275.0, "h": 60.0, "line_num": 21, "text": "print (\" \")"}, {"x": 511.0, "y": 2004.0, "w": 801.0, "h": 65.0, "line_num": 22, "text": "if ask == \"Yes \" or ask == \"yes\":"}, {"x": 618.0, "y": 2078.0, "w": 542.0, "h": 70.0, "line_num": 23, "text": "identify_ a _ leap - year ( )"}, {"x": 509.0, "y": 2170.0, "w": 788.0, "h": 62.0, "line_num": 24, "text": "elif ask == \"No\" or ask = \"no\":"}, {"x": 605.0, "y": 2245.0, "w": 837.0, "h": 73.0, "line_num": 25, "text": "print ( \" Thank you . See you again ! \")"}, {"x": 611.0, "y": 2324.0, "w": 124.0, "h": 57.0, "line_num": 26, "text": "break"}, {"x": 505.0, "y": 2407.0, "w": 1469.0, "h": 65.0, "line_num": 27, "text": "elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\"."}, {"x": 613.0, "y": 2483.0, "w": 1325.0, "h": 78.0, "line_num": 28, "text": "print ( \" Wrong keyword . Please type the exact keyword . \")"}, {"x": 155.0, "y": 2663.0, "w": 43.0, "h": 56.0, "line_num": 29, "text": "if"}, {"x": 202.0, "y": 2674.0, "w": 607.0, "h": 63.0, "line_num": 30, "text": "_ name_ == \" __ main __ \":"}, {"x": 327.0, "y": 2765.0, "w": 186.0, "h": 63.0, "line_num": 31, "text": "main ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 103.54838709677419, "ir_algo_output_code": "def main ( ) :\n    The program should determine whether the given year is a leap year\n    ( divisible by 4, divisible by 100 but also by 400).\n    print ( \" This program will help you identify if a given year is a leap\n        year or not . \")\n    print ( \"\n    identify_a_ leap year ()\n    ask _ for _ a _ new _year _ to _identify ( )\ndef identify_ a_ leap-year () :\n    print (\"Please input a year below ( in number form). \")\n    Year = int (input (\"Year:\n    print (\" \")\n    if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;\n        print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")\n    else :\n        print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )\ndef ask-for-a-new year_ to _ identify ( ) :\n    while True :\n        print (\" \")\n        ask - input ( \" Do you want to identify a new year ? Yes / No : \" )\n        print (\" \")\n        if ask == \"Yes \" or ask == \"yes\":\n        identify_ a _ leap - year ( )\n        elif ask == \"No\" or ask = \"no\":\n        print ( \" Thank you . See you again ! \")\n        break\n        elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\".\n        print ( \" Wrong keyword . Please type the exact keyword . \")\nif\n_ name_ == \" __ main __ \":\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 155.0, "y": 131.0, "w": 360.0, "h": 91.0, "line_num": 1, "text": "def main ( ) :", "cluster_label": 2, "indentation": 0}, {"x": 339.0, "y": 270.0, "w": 1567.0, "h": 65.0, "line_num": 2, "text": "The program should determine whether the given year is a leap year", "cluster_label": 1, "indentation": 1}, {"x": 340.0, "y": 326.0, "w": 1136.0, "h": 69.0, "line_num": 3, "text": "( divisible by 4, divisible by 100 but also by 400).", "cluster_label": 1, "indentation": 1}, {"x": 335.0, "y": 471.0, "w": 1555.0, "h": 70.0, "line_num": 4, "text": "print ( \" This program will help you identify if a given year is a leap", "cluster_label": 1, "indentation": 1}, {"x": 546.0, "y": 542.0, "w": 357.0, "h": 60.0, "line_num": 5, "text": "year or not . \")", "cluster_label": 0, "indentation": 2}, {"x": 335.0, "y": 622.0, "w": 215.0, "h": 85.0, "line_num": 6, "text": "print ( \"", "cluster_label": 1, "indentation": 1}, {"x": 338.0, "y": 704.0, "w": 484.0, "h": 68.0, "line_num": 7, "text": "identify_a_ leap year ()", "cluster_label": 1, "indentation": 1}, {"x": 343.0, "y": 780.0, "w": 689.0, "h": 65.0, "line_num": 8, "text": "ask _ for _ a _ new _year _ to _identify ( )", "cluster_label": 1, "indentation": 1}, {"x": 161.0, "y": 897.0, "w": 624.0, "h": 73.0, "line_num": 9, "text": "def identify_ a_ leap-year () :", "cluster_label": 2, "indentation": 0}, {"x": 349.0, "y": 983.0, "w": 1121.0, "h": 74.0, "line_num": 10, "text": "print (\"Please input a year below ( in number form). \")", "cluster_label": 1, "indentation": 1}, {"x": 346.0, "y": 1054.0, "w": 587.0, "h": 63.0, "line_num": 11, "text": "Year = int (input (\"Year:", "cluster_label": 1, "indentation": 1}, {"x": 353.0, "y": 1121.0, "w": 272.0, "h": 63.0, "line_num": 12, "text": "print (\" \")", "cluster_label": 1, "indentation": 1}, {"x": 345.0, "y": 1204.0, "w": 1448.0, "h": 75.0, "line_num": 13, "text": "if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;", "cluster_label": 1, "indentation": 1}, {"x": 516.0, "y": 1283.0, "w": 1322.0, "h": 85.0, "line_num": 14, "text": "print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")", "cluster_label": 0, "indentation": 2}, {"x": 340.0, "y": 1405.0, "w": 105.0, "h": 56.0, "line_num": 15, "text": "else :", "cluster_label": 1, "indentation": 1}, {"x": 518.0, "y": 1450.0, "w": 1399.0, "h": 92.0, "line_num": 16, "text": "print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )", "cluster_label": 0, "indentation": 2}, {"x": 154.0, "y": 1595.0, "w": 918.0, "h": 73.0, "line_num": 17, "text": "def ask-for-a-new year_ to _ identify ( ) :", "cluster_label": 2, "indentation": 0}, {"x": 336.0, "y": 1709.0, "w": 263.0, "h": 56.0, "line_num": 18, "text": "while True :", "cluster_label": 1, "indentation": 1}, {"x": 506.0, "y": 1782.0, "w": 244.0, "h": 67.0, "line_num": 19, "text": "print (\" \")", "cluster_label": 0, "indentation": 2}, {"x": 511.0, "y": 1847.0, "w": 1390.0, "h": 78.0, "line_num": 20, "text": "ask - input ( \" Do you want to identify a new year ? Yes / No : \" )", "cluster_label": 0, "indentation": 2}, {"x": 508.0, "y": 1921.0, "w": 275.0, "h": 60.0, "line_num": 21, "text": "print (\" \")", "cluster_label": 0, "indentation": 2}, {"x": 511.0, "y": 2004.0, "w": 801.0, "h": 65.0, "line_num": 22, "text": "if ask == \"Yes \" or ask == \"yes\":", "cluster_label": 0, "indentation": 2}, {"x": 618.0, "y": 2078.0, "w": 542.0, "h": 70.0, "line_num": 23, "text": "identify_ a _ leap - year ( )", "cluster_label": 0, "indentation": 2}, {"x": 509.0, "y": 2170.0, "w": 788.0, "h": 62.0, "line_num": 24, "text": "elif ask == \"No\" or ask = \"no\":", "cluster_label": 0, "indentation": 2}, {"x": 605.0, "y": 2245.0, "w": 837.0, "h": 73.0, "line_num": 25, "text": "print ( \" Thank you . See you again ! \")", "cluster_label": 0, "indentation": 2}, {"x": 611.0, "y": 2324.0, "w": 124.0, "h": 57.0, "line_num": 26, "text": "break", "cluster_label": 0, "indentation": 2}, {"x": 505.0, "y": 2407.0, "w": 1469.0, "h": 65.0, "line_num": 27, "text": "elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\".", "cluster_label": 0, "indentation": 2}, {"x": 613.0, "y": 2483.0, "w": 1325.0, "h": 78.0, "line_num": 28, "text": "print ( \" Wrong keyword . Please type the exact keyword . \")", "cluster_label": 0, "indentation": 2}, {"x": 155.0, "y": 2663.0, "w": 43.0, "h": 56.0, "line_num": 29, "text": "if", "cluster_label": 2, "indentation": 0}, {"x": 202.0, "y": 2674.0, "w": 607.0, "h": 63.0, "line_num": 30, "text": "_ name_ == \" __ main __ \":", "cluster_label": 2, "indentation": 0}, {"x": 327.0, "y": 2765.0, "w": 186.0, "h": 63.0, "line_num": 31, "text": "main ()", "cluster_label": 1, "indentation": 1}], "ir_algo_output_edit_distance": 163, "prompting_method": "simple-test2", "lm_post_processed_code": "def main():\n    print(\"This program will help you identify if a given year is a leap year or not.\")\n    identify_a_leap_year()\n    ask_for_a_new_year_to_identify()\n\ndef identify_a_leap_year():\n    print(\"Please input a year below (in number form).\")\n    Year = int(input(\"Year:\"))\n    print(\" \")\n    if (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):\n        print(\"The Year\" + str(Year) + \" \" + \"is a leap year.\")\n    else:\n        print(\"The Year\" + str(Year) + \" \" + \"is not a leap year.\")\n\ndef ask_for_a_new_year_to_identify():\n    while True:\n        print(\" \")\n        ask = input(\"Do you want to identify a new year? Yes/No: \")\n        print(\" \")\n        if ask == \"Yes\" or ask == \"yes\":\n            identify_a_leap_year()\n        elif ask == \"No\" or ask == \"no\":\n            print(\"Thank you. See you again!\")\n            break\n        elif ask != \"Yes\" and ask != \"yes\" and ask != \"No\" and ask != \"no\":\n            print(\"Wrong keyword. Please type the exact keyword.\")\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 172}, {"image_id": 29, "image_height": 2980, "image_width": 2016, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 131.0, "w": 360.0, "h": 91.0, "line_num": 1, "text": "def main ( ) :"}, {"x": 339.0, "y": 270.0, "w": 1567.0, "h": 65.0, "line_num": 2, "text": "The program should determine whether the given year is a leap year"}, {"x": 340.0, "y": 326.0, "w": 1136.0, "h": 69.0, "line_num": 3, "text": "( divisible by 4, divisible by 100 but also by 400)."}, {"x": 335.0, "y": 471.0, "w": 1555.0, "h": 70.0, "line_num": 4, "text": "print ( \" This program will help you identify if a given year is a leap"}, {"x": 546.0, "y": 542.0, "w": 357.0, "h": 60.0, "line_num": 5, "text": "year or not . \")"}, {"x": 335.0, "y": 622.0, "w": 215.0, "h": 85.0, "line_num": 6, "text": "print ( \""}, {"x": 338.0, "y": 704.0, "w": 484.0, "h": 68.0, "line_num": 7, "text": "identify_a_ leap year ()"}, {"x": 343.0, "y": 780.0, "w": 689.0, "h": 65.0, "line_num": 8, "text": "ask _ for _ a _ new _year _ to _identify ( )"}, {"x": 161.0, "y": 897.0, "w": 624.0, "h": 73.0, "line_num": 9, "text": "def identify_ a_ leap-year () :"}, {"x": 349.0, "y": 983.0, "w": 1121.0, "h": 74.0, "line_num": 10, "text": "print (\"Please input a year below ( in number form). \")"}, {"x": 346.0, "y": 1054.0, "w": 587.0, "h": 63.0, "line_num": 11, "text": "Year = int (input (\"Year:"}, {"x": 353.0, "y": 1121.0, "w": 272.0, "h": 63.0, "line_num": 12, "text": "print (\" \")"}, {"x": 345.0, "y": 1204.0, "w": 1448.0, "h": 75.0, "line_num": 13, "text": "if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;"}, {"x": 516.0, "y": 1283.0, "w": 1322.0, "h": 85.0, "line_num": 14, "text": "print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")"}, {"x": 340.0, "y": 1405.0, "w": 105.0, "h": 56.0, "line_num": 15, "text": "else :"}, {"x": 518.0, "y": 1450.0, "w": 1399.0, "h": 92.0, "line_num": 16, "text": "print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )"}, {"x": 154.0, "y": 1595.0, "w": 918.0, "h": 73.0, "line_num": 17, "text": "def ask-for-a-new year_ to _ identify ( ) :"}, {"x": 336.0, "y": 1709.0, "w": 263.0, "h": 56.0, "line_num": 18, "text": "while True :"}, {"x": 506.0, "y": 1782.0, "w": 244.0, "h": 67.0, "line_num": 19, "text": "print (\" \")"}, {"x": 511.0, "y": 1847.0, "w": 1390.0, "h": 78.0, "line_num": 20, "text": "ask - input ( \" Do you want to identify a new year ? Yes / No : \" )"}, {"x": 508.0, "y": 1921.0, "w": 275.0, "h": 60.0, "line_num": 21, "text": "print (\" \")"}, {"x": 511.0, "y": 2004.0, "w": 801.0, "h": 65.0, "line_num": 22, "text": "if ask == \"Yes \" or ask == \"yes\":"}, {"x": 618.0, "y": 2078.0, "w": 542.0, "h": 70.0, "line_num": 23, "text": "identify_ a _ leap - year ( )"}, {"x": 509.0, "y": 2170.0, "w": 788.0, "h": 62.0, "line_num": 24, "text": "elif ask == \"No\" or ask = \"no\":"}, {"x": 605.0, "y": 2245.0, "w": 837.0, "h": 73.0, "line_num": 25, "text": "print ( \" Thank you . See you again ! \")"}, {"x": 611.0, "y": 2324.0, "w": 124.0, "h": 57.0, "line_num": 26, "text": "break"}, {"x": 505.0, "y": 2407.0, "w": 1469.0, "h": 65.0, "line_num": 27, "text": "elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\"."}, {"x": 613.0, "y": 2483.0, "w": 1325.0, "h": 78.0, "line_num": 28, "text": "print ( \" Wrong keyword . Please type the exact keyword . \")"}, {"x": 155.0, "y": 2663.0, "w": 43.0, "h": 56.0, "line_num": 29, "text": "if"}, {"x": 202.0, "y": 2674.0, "w": 607.0, "h": 63.0, "line_num": 30, "text": "_ name_ == \" __ main __ \":"}, {"x": 327.0, "y": 2765.0, "w": 186.0, "h": 63.0, "line_num": 31, "text": "main ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 103.54838709677419, "ir_algo_output_code": "def main ( ) :\n    The program should determine whether the given year is a leap year\n    ( divisible by 4, divisible by 100 but also by 400).\n    print ( \" This program will help you identify if a given year is a leap\n        year or not . \")\n    print ( \"\n    identify_a_ leap year ()\n    ask _ for _ a _ new _year _ to _identify ( )\ndef identify_ a_ leap-year () :\n    print (\"Please input a year below ( in number form). \")\n    Year = int (input (\"Year:\n    print (\" \")\n    if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;\n        print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")\n    else :\n        print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )\ndef ask-for-a-new year_ to _ identify ( ) :\n    while True :\n        print (\" \")\n        ask - input ( \" Do you want to identify a new year ? Yes / No : \" )\n        print (\" \")\n        if ask == \"Yes \" or ask == \"yes\":\n        identify_ a _ leap - year ( )\n        elif ask == \"No\" or ask = \"no\":\n        print ( \" Thank you . See you again ! \")\n        break\n        elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\".\n        print ( \" Wrong keyword . Please type the exact keyword . \")\nif\n_ name_ == \" __ main __ \":\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 155.0, "y": 131.0, "w": 360.0, "h": 91.0, "line_num": 1, "text": "def main ( ) :", "cluster_label": 2, "indentation": 0}, {"x": 339.0, "y": 270.0, "w": 1567.0, "h": 65.0, "line_num": 2, "text": "The program should determine whether the given year is a leap year", "cluster_label": 1, "indentation": 1}, {"x": 340.0, "y": 326.0, "w": 1136.0, "h": 69.0, "line_num": 3, "text": "( divisible by 4, divisible by 100 but also by 400).", "cluster_label": 1, "indentation": 1}, {"x": 335.0, "y": 471.0, "w": 1555.0, "h": 70.0, "line_num": 4, "text": "print ( \" This program will help you identify if a given year is a leap", "cluster_label": 1, "indentation": 1}, {"x": 546.0, "y": 542.0, "w": 357.0, "h": 60.0, "line_num": 5, "text": "year or not . \")", "cluster_label": 0, "indentation": 2}, {"x": 335.0, "y": 622.0, "w": 215.0, "h": 85.0, "line_num": 6, "text": "print ( \"", "cluster_label": 1, "indentation": 1}, {"x": 338.0, "y": 704.0, "w": 484.0, "h": 68.0, "line_num": 7, "text": "identify_a_ leap year ()", "cluster_label": 1, "indentation": 1}, {"x": 343.0, "y": 780.0, "w": 689.0, "h": 65.0, "line_num": 8, "text": "ask _ for _ a _ new _year _ to _identify ( )", "cluster_label": 1, "indentation": 1}, {"x": 161.0, "y": 897.0, "w": 624.0, "h": 73.0, "line_num": 9, "text": "def identify_ a_ leap-year () :", "cluster_label": 2, "indentation": 0}, {"x": 349.0, "y": 983.0, "w": 1121.0, "h": 74.0, "line_num": 10, "text": "print (\"Please input a year below ( in number form). \")", "cluster_label": 1, "indentation": 1}, {"x": 346.0, "y": 1054.0, "w": 587.0, "h": 63.0, "line_num": 11, "text": "Year = int (input (\"Year:", "cluster_label": 1, "indentation": 1}, {"x": 353.0, "y": 1121.0, "w": 272.0, "h": 63.0, "line_num": 12, "text": "print (\" \")", "cluster_label": 1, "indentation": 1}, {"x": 345.0, "y": 1204.0, "w": 1448.0, "h": 75.0, "line_num": 13, "text": "if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;", "cluster_label": 1, "indentation": 1}, {"x": 516.0, "y": 1283.0, "w": 1322.0, "h": 85.0, "line_num": 14, "text": "print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")", "cluster_label": 0, "indentation": 2}, {"x": 340.0, "y": 1405.0, "w": 105.0, "h": 56.0, "line_num": 15, "text": "else :", "cluster_label": 1, "indentation": 1}, {"x": 518.0, "y": 1450.0, "w": 1399.0, "h": 92.0, "line_num": 16, "text": "print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )", "cluster_label": 0, "indentation": 2}, {"x": 154.0, "y": 1595.0, "w": 918.0, "h": 73.0, "line_num": 17, "text": "def ask-for-a-new year_ to _ identify ( ) :", "cluster_label": 2, "indentation": 0}, {"x": 336.0, "y": 1709.0, "w": 263.0, "h": 56.0, "line_num": 18, "text": "while True :", "cluster_label": 1, "indentation": 1}, {"x": 506.0, "y": 1782.0, "w": 244.0, "h": 67.0, "line_num": 19, "text": "print (\" \")", "cluster_label": 0, "indentation": 2}, {"x": 511.0, "y": 1847.0, "w": 1390.0, "h": 78.0, "line_num": 20, "text": "ask - input ( \" Do you want to identify a new year ? Yes / No : \" )", "cluster_label": 0, "indentation": 2}, {"x": 508.0, "y": 1921.0, "w": 275.0, "h": 60.0, "line_num": 21, "text": "print (\" \")", "cluster_label": 0, "indentation": 2}, {"x": 511.0, "y": 2004.0, "w": 801.0, "h": 65.0, "line_num": 22, "text": "if ask == \"Yes \" or ask == \"yes\":", "cluster_label": 0, "indentation": 2}, {"x": 618.0, "y": 2078.0, "w": 542.0, "h": 70.0, "line_num": 23, "text": "identify_ a _ leap - year ( )", "cluster_label": 0, "indentation": 2}, {"x": 509.0, "y": 2170.0, "w": 788.0, "h": 62.0, "line_num": 24, "text": "elif ask == \"No\" or ask = \"no\":", "cluster_label": 0, "indentation": 2}, {"x": 605.0, "y": 2245.0, "w": 837.0, "h": 73.0, "line_num": 25, "text": "print ( \" Thank you . See you again ! \")", "cluster_label": 0, "indentation": 2}, {"x": 611.0, "y": 2324.0, "w": 124.0, "h": 57.0, "line_num": 26, "text": "break", "cluster_label": 0, "indentation": 2}, {"x": 505.0, "y": 2407.0, "w": 1469.0, "h": 65.0, "line_num": 27, "text": "elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\".", "cluster_label": 0, "indentation": 2}, {"x": 613.0, "y": 2483.0, "w": 1325.0, "h": 78.0, "line_num": 28, "text": "print ( \" Wrong keyword . Please type the exact keyword . \")", "cluster_label": 0, "indentation": 2}, {"x": 155.0, "y": 2663.0, "w": 43.0, "h": 56.0, "line_num": 29, "text": "if", "cluster_label": 2, "indentation": 0}, {"x": 202.0, "y": 2674.0, "w": 607.0, "h": 63.0, "line_num": 30, "text": "_ name_ == \" __ main __ \":", "cluster_label": 2, "indentation": 0}, {"x": 327.0, "y": 2765.0, "w": 186.0, "h": 63.0, "line_num": 31, "text": "main ()", "cluster_label": 1, "indentation": 1}], "ir_algo_output_edit_distance": 163, "prompting_method": "simple-test3", "lm_post_processed_code": "def main():\n    print(\"This program will help you identify if a given year is a leap year or not.\")\n    identify_a_leap_year()\n    ask_for_a_new_year_to_identify()\n\ndef identify_a_leap_year():\n    print(\"Please input a year below (in number form).\")\n    Year = int(input(\"Year:\"))\n    print(\" \")\n    if (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):\n        print(\"The Year\" + str(Year) + \" \" + \"is a leap year.\")\n    else:\n        print(\"The Year\" + str(Year) + \" \" + \"is not a leap year.\")\n\ndef ask_for_a_new_year_to_identify():\n    while True:\n        print(\" \")\n        ask = input(\"Do you want to identify a new year? Yes/No: \")\n        print(\" \")\n        if ask == \"Yes\" or ask == \"yes\":\n            identify_a_leap_year()\n        elif ask == \"No\" or ask == \"no\":\n            print(\"Thank you. See you again!\")\n            break\n        elif ask != \"Yes\" or ask != \"yes\" or ask != \"No\" or ask != \"no\":\n            print(\"Wrong keyword. Please type the exact keyword.\")\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 163}, {"image_id": 29, "image_height": 2980, "image_width": 2016, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 131.0, "w": 360.0, "h": 91.0, "line_num": 1, "text": "def main ( ) :"}, {"x": 339.0, "y": 270.0, "w": 1567.0, "h": 65.0, "line_num": 2, "text": "The program should determine whether the given year is a leap year"}, {"x": 340.0, "y": 326.0, "w": 1136.0, "h": 69.0, "line_num": 3, "text": "( divisible by 4, divisible by 100 but also by 400)."}, {"x": 335.0, "y": 471.0, "w": 1555.0, "h": 70.0, "line_num": 4, "text": "print ( \" This program will help you identify if a given year is a leap"}, {"x": 546.0, "y": 542.0, "w": 357.0, "h": 60.0, "line_num": 5, "text": "year or not . \")"}, {"x": 335.0, "y": 622.0, "w": 215.0, "h": 85.0, "line_num": 6, "text": "print ( \""}, {"x": 338.0, "y": 704.0, "w": 484.0, "h": 68.0, "line_num": 7, "text": "identify_a_ leap year ()"}, {"x": 343.0, "y": 780.0, "w": 689.0, "h": 65.0, "line_num": 8, "text": "ask _ for _ a _ new _year _ to _identify ( )"}, {"x": 161.0, "y": 897.0, "w": 624.0, "h": 73.0, "line_num": 9, "text": "def identify_ a_ leap-year () :"}, {"x": 349.0, "y": 983.0, "w": 1121.0, "h": 74.0, "line_num": 10, "text": "print (\"Please input a year below ( in number form). \")"}, {"x": 346.0, "y": 1054.0, "w": 587.0, "h": 63.0, "line_num": 11, "text": "Year = int (input (\"Year:"}, {"x": 353.0, "y": 1121.0, "w": 272.0, "h": 63.0, "line_num": 12, "text": "print (\" \")"}, {"x": 345.0, "y": 1204.0, "w": 1448.0, "h": 75.0, "line_num": 13, "text": "if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;"}, {"x": 516.0, "y": 1283.0, "w": 1322.0, "h": 85.0, "line_num": 14, "text": "print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")"}, {"x": 340.0, "y": 1405.0, "w": 105.0, "h": 56.0, "line_num": 15, "text": "else :"}, {"x": 518.0, "y": 1450.0, "w": 1399.0, "h": 92.0, "line_num": 16, "text": "print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )"}, {"x": 154.0, "y": 1595.0, "w": 918.0, "h": 73.0, "line_num": 17, "text": "def ask-for-a-new year_ to _ identify ( ) :"}, {"x": 336.0, "y": 1709.0, "w": 263.0, "h": 56.0, "line_num": 18, "text": "while True :"}, {"x": 506.0, "y": 1782.0, "w": 244.0, "h": 67.0, "line_num": 19, "text": "print (\" \")"}, {"x": 511.0, "y": 1847.0, "w": 1390.0, "h": 78.0, "line_num": 20, "text": "ask - input ( \" Do you want to identify a new year ? Yes / No : \" )"}, {"x": 508.0, "y": 1921.0, "w": 275.0, "h": 60.0, "line_num": 21, "text": "print (\" \")"}, {"x": 511.0, "y": 2004.0, "w": 801.0, "h": 65.0, "line_num": 22, "text": "if ask == \"Yes \" or ask == \"yes\":"}, {"x": 618.0, "y": 2078.0, "w": 542.0, "h": 70.0, "line_num": 23, "text": "identify_ a _ leap - year ( )"}, {"x": 509.0, "y": 2170.0, "w": 788.0, "h": 62.0, "line_num": 24, "text": "elif ask == \"No\" or ask = \"no\":"}, {"x": 605.0, "y": 2245.0, "w": 837.0, "h": 73.0, "line_num": 25, "text": "print ( \" Thank you . See you again ! \")"}, {"x": 611.0, "y": 2324.0, "w": 124.0, "h": 57.0, "line_num": 26, "text": "break"}, {"x": 505.0, "y": 2407.0, "w": 1469.0, "h": 65.0, "line_num": 27, "text": "elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\"."}, {"x": 613.0, "y": 2483.0, "w": 1325.0, "h": 78.0, "line_num": 28, "text": "print ( \" Wrong keyword . Please type the exact keyword . \")"}, {"x": 155.0, "y": 2663.0, "w": 43.0, "h": 56.0, "line_num": 29, "text": "if"}, {"x": 202.0, "y": 2674.0, "w": 607.0, "h": 63.0, "line_num": 30, "text": "_ name_ == \" __ main __ \":"}, {"x": 327.0, "y": 2765.0, "w": 186.0, "h": 63.0, "line_num": 31, "text": "main ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main ( ) :\n    The program should determine whether the given year is a leap year\n    ( divisible by 4, divisible by 100 but also by 400).\n    print ( \" This program will help you identify if a given year is a leap\n        year or not . \")\n    print ( \"\n    identify_a_ leap year ()\n    ask _ for _ a _ new _year _ to _identify ( )\ndef identify_ a_ leap-year () :\n    print (\"Please input a year below ( in number form). \")\n    Year = int (input (\"Year:\n    print (\" \")\n    if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;\n        print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")\n    else :\n        print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )\ndef ask-for-a-new year_ to _ identify ( ) :\n    while True :\n        print (\" \")\n        ask - input ( \" Do you want to identify a new year ? Yes / No : \" )\n        print (\" \")\n        if ask == \"Yes \" or ask == \"yes\":\n            identify_ a _ leap - year ( )\n        elif ask == \"No\" or ask = \"no\":\n            print ( \" Thank you . See you again ! \")\n            break\n        elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\".\n            print ( \" Wrong keyword . Please type the exact keyword . \")\nif\n_ name_ == \" __ main __ \":\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 155.0, "y": 131.0, "w": 360.0, "h": 91.0, "line_num": 1, "text": "def main ( ) :", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 339.0, "y": 270.0, "w": 1567.0, "h": 65.0, "line_num": 2, "text": "The program should determine whether the given year is a leap year", "delta": 184.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 340.0, "y": 326.0, "w": 1136.0, "h": 69.0, "line_num": 3, "text": "( divisible by 4, divisible by 100 but also by 400).", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 335.0, "y": 471.0, "w": 1555.0, "h": 70.0, "line_num": 4, "text": "print ( \" This program will help you identify if a given year is a leap", "delta": -5.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 546.0, "y": 542.0, "w": 357.0, "h": 60.0, "line_num": 5, "text": "year or not . \")", "delta": 211.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 335.0, "y": 622.0, "w": 215.0, "h": 85.0, "line_num": 6, "text": "print ( \"", "delta": -211.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 338.0, "y": 704.0, "w": 484.0, "h": 68.0, "line_num": 7, "text": "identify_a_ leap year ()", "delta": 3.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 343.0, "y": 780.0, "w": 689.0, "h": 65.0, "line_num": 8, "text": "ask _ for _ a _ new _year _ to _identify ( )", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 161.0, "y": 897.0, "w": 624.0, "h": 73.0, "line_num": 9, "text": "def identify_ a_ leap-year () :", "delta": -182.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 349.0, "y": 983.0, "w": 1121.0, "h": 74.0, "line_num": 10, "text": "print (\"Please input a year below ( in number form). \")", "delta": 188.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 346.0, "y": 1054.0, "w": 587.0, "h": 63.0, "line_num": 11, "text": "Year = int (input (\"Year:", "delta": -3.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 353.0, "y": 1121.0, "w": 272.0, "h": 63.0, "line_num": 12, "text": "print (\" \")", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 345.0, "y": 1204.0, "w": 1448.0, "h": 75.0, "line_num": 13, "text": "if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;", "delta": -8.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 516.0, "y": 1283.0, "w": 1322.0, "h": 85.0, "line_num": 14, "text": "print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")", "delta": 171.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 340.0, "y": 1405.0, "w": 105.0, "h": 56.0, "line_num": 15, "text": "else :", "delta": -176.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 518.0, "y": 1450.0, "w": 1399.0, "h": 92.0, "line_num": 16, "text": "print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )", "delta": 178.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 154.0, "y": 1595.0, "w": 918.0, "h": 73.0, "line_num": 17, "text": "def ask-for-a-new year_ to _ identify ( ) :", "delta": -364.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 336.0, "y": 1709.0, "w": 263.0, "h": 56.0, "line_num": 18, "text": "while True :", "delta": 182.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 506.0, "y": 1782.0, "w": 244.0, "h": 67.0, "line_num": 19, "text": "print (\" \")", "delta": 170.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 511.0, "y": 1847.0, "w": 1390.0, "h": 78.0, "line_num": 20, "text": "ask - input ( \" Do you want to identify a new year ? Yes / No : \" )", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 508.0, "y": 1921.0, "w": 275.0, "h": 60.0, "line_num": 21, "text": "print (\" \")", "delta": -3.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 511.0, "y": 2004.0, "w": 801.0, "h": 65.0, "line_num": 22, "text": "if ask == \"Yes \" or ask == \"yes\":", "delta": 3.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 618.0, "y": 2078.0, "w": 542.0, "h": 70.0, "line_num": 23, "text": "identify_ a _ leap - year ( )", "delta": 107.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 509.0, "y": 2170.0, "w": 788.0, "h": 62.0, "line_num": 24, "text": "elif ask == \"No\" or ask = \"no\":", "delta": -109.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 605.0, "y": 2245.0, "w": 837.0, "h": 73.0, "line_num": 25, "text": "print ( \" Thank you . See you again ! \")", "delta": 96.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 611.0, "y": 2324.0, "w": 124.0, "h": 57.0, "line_num": 26, "text": "break", "delta": 6.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 3}, {"x": 505.0, "y": 2407.0, "w": 1469.0, "h": 65.0, "line_num": 27, "text": "elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\".", "delta": -106.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 613.0, "y": 2483.0, "w": 1325.0, "h": 78.0, "line_num": 28, "text": "print ( \" Wrong keyword . Please type the exact keyword . \")", "delta": 108.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 155.0, "y": 2663.0, "w": 43.0, "h": 56.0, "line_num": 29, "text": "if", "delta": -458.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 202.0, "y": 2674.0, "w": 607.0, "h": 63.0, "line_num": 30, "text": "_ name_ == \" __ main __ \":", "delta": 47.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 327.0, "y": 2765.0, "w": 186.0, "h": 63.0, "line_num": 31, "text": "main ()", "delta": 125.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}], "ir_algo_output_edit_distance": 147, "prompting_method": "none", "lm_post_processed_code": "def main ( ) :\n    The program should determine whether the given year is a leap year\n    ( divisible by 4, divisible by 100 but also by 400).\n    print ( \" This program will help you identify if a given year is a leap\n        year or not . \")\n    print ( \"\n    identify_a_ leap year ()\n    ask _ for _ a _ new _year _ to _identify ( )\ndef identify_ a_ leap-year () :\n    print (\"Please input a year below ( in number form). \")\n    Year = int (input (\"Year:\n    print (\" \")\n    if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;\n        print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")\n    else :\n        print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )\ndef ask-for-a-new year_ to _ identify ( ) :\n    while True :\n        print (\" \")\n        ask - input ( \" Do you want to identify a new year ? Yes / No : \" )\n        print (\" \")\n        if ask == \"Yes \" or ask == \"yes\":\n            identify_ a _ leap - year ( )\n        elif ask == \"No\" or ask = \"no\":\n            print ( \" Thank you . See you again ! \")\n            break\n        elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\".\n            print ( \" Wrong keyword . Please type the exact keyword . \")\nif\n_ name_ == \" __ main __ \":\n    main ()\n", "lm_post_processed_edit_distance": 147}, {"image_id": 29, "image_height": 2980, "image_width": 2016, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 131.0, "w": 360.0, "h": 91.0, "line_num": 1, "text": "def main ( ) :"}, {"x": 339.0, "y": 270.0, "w": 1567.0, "h": 65.0, "line_num": 2, "text": "The program should determine whether the given year is a leap year"}, {"x": 340.0, "y": 326.0, "w": 1136.0, "h": 69.0, "line_num": 3, "text": "( divisible by 4, divisible by 100 but also by 400)."}, {"x": 335.0, "y": 471.0, "w": 1555.0, "h": 70.0, "line_num": 4, "text": "print ( \" This program will help you identify if a given year is a leap"}, {"x": 546.0, "y": 542.0, "w": 357.0, "h": 60.0, "line_num": 5, "text": "year or not . \")"}, {"x": 335.0, "y": 622.0, "w": 215.0, "h": 85.0, "line_num": 6, "text": "print ( \""}, {"x": 338.0, "y": 704.0, "w": 484.0, "h": 68.0, "line_num": 7, "text": "identify_a_ leap year ()"}, {"x": 343.0, "y": 780.0, "w": 689.0, "h": 65.0, "line_num": 8, "text": "ask _ for _ a _ new _year _ to _identify ( )"}, {"x": 161.0, "y": 897.0, "w": 624.0, "h": 73.0, "line_num": 9, "text": "def identify_ a_ leap-year () :"}, {"x": 349.0, "y": 983.0, "w": 1121.0, "h": 74.0, "line_num": 10, "text": "print (\"Please input a year below ( in number form). \")"}, {"x": 346.0, "y": 1054.0, "w": 587.0, "h": 63.0, "line_num": 11, "text": "Year = int (input (\"Year:"}, {"x": 353.0, "y": 1121.0, "w": 272.0, "h": 63.0, "line_num": 12, "text": "print (\" \")"}, {"x": 345.0, "y": 1204.0, "w": 1448.0, "h": 75.0, "line_num": 13, "text": "if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;"}, {"x": 516.0, "y": 1283.0, "w": 1322.0, "h": 85.0, "line_num": 14, "text": "print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")"}, {"x": 340.0, "y": 1405.0, "w": 105.0, "h": 56.0, "line_num": 15, "text": "else :"}, {"x": 518.0, "y": 1450.0, "w": 1399.0, "h": 92.0, "line_num": 16, "text": "print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )"}, {"x": 154.0, "y": 1595.0, "w": 918.0, "h": 73.0, "line_num": 17, "text": "def ask-for-a-new year_ to _ identify ( ) :"}, {"x": 336.0, "y": 1709.0, "w": 263.0, "h": 56.0, "line_num": 18, "text": "while True :"}, {"x": 506.0, "y": 1782.0, "w": 244.0, "h": 67.0, "line_num": 19, "text": "print (\" \")"}, {"x": 511.0, "y": 1847.0, "w": 1390.0, "h": 78.0, "line_num": 20, "text": "ask - input ( \" Do you want to identify a new year ? Yes / No : \" )"}, {"x": 508.0, "y": 1921.0, "w": 275.0, "h": 60.0, "line_num": 21, "text": "print (\" \")"}, {"x": 511.0, "y": 2004.0, "w": 801.0, "h": 65.0, "line_num": 22, "text": "if ask == \"Yes \" or ask == \"yes\":"}, {"x": 618.0, "y": 2078.0, "w": 542.0, "h": 70.0, "line_num": 23, "text": "identify_ a _ leap - year ( )"}, {"x": 509.0, "y": 2170.0, "w": 788.0, "h": 62.0, "line_num": 24, "text": "elif ask == \"No\" or ask = \"no\":"}, {"x": 605.0, "y": 2245.0, "w": 837.0, "h": 73.0, "line_num": 25, "text": "print ( \" Thank you . See you again ! \")"}, {"x": 611.0, "y": 2324.0, "w": 124.0, "h": 57.0, "line_num": 26, "text": "break"}, {"x": 505.0, "y": 2407.0, "w": 1469.0, "h": 65.0, "line_num": 27, "text": "elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\"."}, {"x": 613.0, "y": 2483.0, "w": 1325.0, "h": 78.0, "line_num": 28, "text": "print ( \" Wrong keyword . Please type the exact keyword . \")"}, {"x": 155.0, "y": 2663.0, "w": 43.0, "h": 56.0, "line_num": 29, "text": "if"}, {"x": 202.0, "y": 2674.0, "w": 607.0, "h": 63.0, "line_num": 30, "text": "_ name_ == \" __ main __ \":"}, {"x": 327.0, "y": 2765.0, "w": 186.0, "h": 63.0, "line_num": 31, "text": "main ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main ( ) :\n    The program should determine whether the given year is a leap year\n    ( divisible by 4, divisible by 100 but also by 400).\n    print ( \" This program will help you identify if a given year is a leap\n        year or not . \")\n    print ( \"\n    identify_a_ leap year ()\n    ask _ for _ a _ new _year _ to _identify ( )\ndef identify_ a_ leap-year () :\n    print (\"Please input a year below ( in number form). \")\n    Year = int (input (\"Year:\n    print (\" \")\n    if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;\n        print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")\n    else :\n        print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )\ndef ask-for-a-new year_ to _ identify ( ) :\n    while True :\n        print (\" \")\n        ask - input ( \" Do you want to identify a new year ? Yes / No : \" )\n        print (\" \")\n        if ask == \"Yes \" or ask == \"yes\":\n            identify_ a _ leap - year ( )\n        elif ask == \"No\" or ask = \"no\":\n            print ( \" Thank you . See you again ! \")\n            break\n        elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\".\n            print ( \" Wrong keyword . Please type the exact keyword . \")\nif\n_ name_ == \" __ main __ \":\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 155.0, "y": 131.0, "w": 360.0, "h": 91.0, "line_num": 1, "text": "def main ( ) :", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 339.0, "y": 270.0, "w": 1567.0, "h": 65.0, "line_num": 2, "text": "The program should determine whether the given year is a leap year", "delta": 184.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 340.0, "y": 326.0, "w": 1136.0, "h": 69.0, "line_num": 3, "text": "( divisible by 4, divisible by 100 but also by 400).", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 335.0, "y": 471.0, "w": 1555.0, "h": 70.0, "line_num": 4, "text": "print ( \" This program will help you identify if a given year is a leap", "delta": -5.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 546.0, "y": 542.0, "w": 357.0, "h": 60.0, "line_num": 5, "text": "year or not . \")", "delta": 211.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 335.0, "y": 622.0, "w": 215.0, "h": 85.0, "line_num": 6, "text": "print ( \"", "delta": -211.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 338.0, "y": 704.0, "w": 484.0, "h": 68.0, "line_num": 7, "text": "identify_a_ leap year ()", "delta": 3.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 343.0, "y": 780.0, "w": 689.0, "h": 65.0, "line_num": 8, "text": "ask _ for _ a _ new _year _ to _identify ( )", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 161.0, "y": 897.0, "w": 624.0, "h": 73.0, "line_num": 9, "text": "def identify_ a_ leap-year () :", "delta": -182.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 349.0, "y": 983.0, "w": 1121.0, "h": 74.0, "line_num": 10, "text": "print (\"Please input a year below ( in number form). \")", "delta": 188.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 346.0, "y": 1054.0, "w": 587.0, "h": 63.0, "line_num": 11, "text": "Year = int (input (\"Year:", "delta": -3.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 353.0, "y": 1121.0, "w": 272.0, "h": 63.0, "line_num": 12, "text": "print (\" \")", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 345.0, "y": 1204.0, "w": 1448.0, "h": 75.0, "line_num": 13, "text": "if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;", "delta": -8.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 516.0, "y": 1283.0, "w": 1322.0, "h": 85.0, "line_num": 14, "text": "print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")", "delta": 171.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 340.0, "y": 1405.0, "w": 105.0, "h": 56.0, "line_num": 15, "text": "else :", "delta": -176.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 518.0, "y": 1450.0, "w": 1399.0, "h": 92.0, "line_num": 16, "text": "print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )", "delta": 178.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 154.0, "y": 1595.0, "w": 918.0, "h": 73.0, "line_num": 17, "text": "def ask-for-a-new year_ to _ identify ( ) :", "delta": -364.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 336.0, "y": 1709.0, "w": 263.0, "h": 56.0, "line_num": 18, "text": "while True :", "delta": 182.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 506.0, "y": 1782.0, "w": 244.0, "h": 67.0, "line_num": 19, "text": "print (\" \")", "delta": 170.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 511.0, "y": 1847.0, "w": 1390.0, "h": 78.0, "line_num": 20, "text": "ask - input ( \" Do you want to identify a new year ? Yes / No : \" )", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 508.0, "y": 1921.0, "w": 275.0, "h": 60.0, "line_num": 21, "text": "print (\" \")", "delta": -3.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 511.0, "y": 2004.0, "w": 801.0, "h": 65.0, "line_num": 22, "text": "if ask == \"Yes \" or ask == \"yes\":", "delta": 3.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 618.0, "y": 2078.0, "w": 542.0, "h": 70.0, "line_num": 23, "text": "identify_ a _ leap - year ( )", "delta": 107.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 509.0, "y": 2170.0, "w": 788.0, "h": 62.0, "line_num": 24, "text": "elif ask == \"No\" or ask = \"no\":", "delta": -109.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 605.0, "y": 2245.0, "w": 837.0, "h": 73.0, "line_num": 25, "text": "print ( \" Thank you . See you again ! \")", "delta": 96.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 611.0, "y": 2324.0, "w": 124.0, "h": 57.0, "line_num": 26, "text": "break", "delta": 6.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 3}, {"x": 505.0, "y": 2407.0, "w": 1469.0, "h": 65.0, "line_num": 27, "text": "elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\".", "delta": -106.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 613.0, "y": 2483.0, "w": 1325.0, "h": 78.0, "line_num": 28, "text": "print ( \" Wrong keyword . Please type the exact keyword . \")", "delta": 108.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 155.0, "y": 2663.0, "w": 43.0, "h": 56.0, "line_num": 29, "text": "if", "delta": -458.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 202.0, "y": 2674.0, "w": 607.0, "h": 63.0, "line_num": 30, "text": "_ name_ == \" __ main __ \":", "delta": 47.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 327.0, "y": 2765.0, "w": 186.0, "h": 63.0, "line_num": 31, "text": "main ()", "delta": 125.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}], "ir_algo_output_edit_distance": 147, "prompting_method": "cot-test1", "lm_post_processed_code": "def main():\nprint(\"This program will help you identify if a given year is a leap year or not.\")\nprint(\" \")\nidentify_a_leap_year()\nask_for_a_new_year_to_identify()\n\ndef identify_a_leap_year():\nprint(\"Please input a year below (in number form).\")\nYear = int(input(\"Year:\"))\nprint(\" \")\nif (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):\n    print(\"The Year\" + str(Year) + \" \" + \"is a leap year.\")\nelse:\n    print(\"The Year\" + str(Year) + \" \" + \"is not a leap year.\")\n\ndef ask_for_a_new_year_to_identify():\nwhile True:\n    print(\" \")\n    ask = input(\"Do you want to identify a new year? Yes/No: \")\n    print(\" \")\n    if ask == \"Yes\" or ask == \"yes\":\n        identify_a_leap_year()\n    elif ask == \"No\" or ask == \"no\":\n        print(\"Thank you. See you again!\")\n        break\n    elif ask != \"Yes\" or ask != \"yes\" or ask != \"No\" or ask != \"no\":\n        print(\"Wrong keyword. Please type the exact keyword.\")\n\nif __name__ == \"__main__\":\nmain()\n", "lm_post_processed_edit_distance": 240}, {"image_id": 29, "image_height": 2980, "image_width": 2016, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 131.0, "w": 360.0, "h": 91.0, "line_num": 1, "text": "def main ( ) :"}, {"x": 339.0, "y": 270.0, "w": 1567.0, "h": 65.0, "line_num": 2, "text": "The program should determine whether the given year is a leap year"}, {"x": 340.0, "y": 326.0, "w": 1136.0, "h": 69.0, "line_num": 3, "text": "( divisible by 4, divisible by 100 but also by 400)."}, {"x": 335.0, "y": 471.0, "w": 1555.0, "h": 70.0, "line_num": 4, "text": "print ( \" This program will help you identify if a given year is a leap"}, {"x": 546.0, "y": 542.0, "w": 357.0, "h": 60.0, "line_num": 5, "text": "year or not . \")"}, {"x": 335.0, "y": 622.0, "w": 215.0, "h": 85.0, "line_num": 6, "text": "print ( \""}, {"x": 338.0, "y": 704.0, "w": 484.0, "h": 68.0, "line_num": 7, "text": "identify_a_ leap year ()"}, {"x": 343.0, "y": 780.0, "w": 689.0, "h": 65.0, "line_num": 8, "text": "ask _ for _ a _ new _year _ to _identify ( )"}, {"x": 161.0, "y": 897.0, "w": 624.0, "h": 73.0, "line_num": 9, "text": "def identify_ a_ leap-year () :"}, {"x": 349.0, "y": 983.0, "w": 1121.0, "h": 74.0, "line_num": 10, "text": "print (\"Please input a year below ( in number form). \")"}, {"x": 346.0, "y": 1054.0, "w": 587.0, "h": 63.0, "line_num": 11, "text": "Year = int (input (\"Year:"}, {"x": 353.0, "y": 1121.0, "w": 272.0, "h": 63.0, "line_num": 12, "text": "print (\" \")"}, {"x": 345.0, "y": 1204.0, "w": 1448.0, "h": 75.0, "line_num": 13, "text": "if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;"}, {"x": 516.0, "y": 1283.0, "w": 1322.0, "h": 85.0, "line_num": 14, "text": "print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")"}, {"x": 340.0, "y": 1405.0, "w": 105.0, "h": 56.0, "line_num": 15, "text": "else :"}, {"x": 518.0, "y": 1450.0, "w": 1399.0, "h": 92.0, "line_num": 16, "text": "print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )"}, {"x": 154.0, "y": 1595.0, "w": 918.0, "h": 73.0, "line_num": 17, "text": "def ask-for-a-new year_ to _ identify ( ) :"}, {"x": 336.0, "y": 1709.0, "w": 263.0, "h": 56.0, "line_num": 18, "text": "while True :"}, {"x": 506.0, "y": 1782.0, "w": 244.0, "h": 67.0, "line_num": 19, "text": "print (\" \")"}, {"x": 511.0, "y": 1847.0, "w": 1390.0, "h": 78.0, "line_num": 20, "text": "ask - input ( \" Do you want to identify a new year ? Yes / No : \" )"}, {"x": 508.0, "y": 1921.0, "w": 275.0, "h": 60.0, "line_num": 21, "text": "print (\" \")"}, {"x": 511.0, "y": 2004.0, "w": 801.0, "h": 65.0, "line_num": 22, "text": "if ask == \"Yes \" or ask == \"yes\":"}, {"x": 618.0, "y": 2078.0, "w": 542.0, "h": 70.0, "line_num": 23, "text": "identify_ a _ leap - year ( )"}, {"x": 509.0, "y": 2170.0, "w": 788.0, "h": 62.0, "line_num": 24, "text": "elif ask == \"No\" or ask = \"no\":"}, {"x": 605.0, "y": 2245.0, "w": 837.0, "h": 73.0, "line_num": 25, "text": "print ( \" Thank you . See you again ! \")"}, {"x": 611.0, "y": 2324.0, "w": 124.0, "h": 57.0, "line_num": 26, "text": "break"}, {"x": 505.0, "y": 2407.0, "w": 1469.0, "h": 65.0, "line_num": 27, "text": "elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\"."}, {"x": 613.0, "y": 2483.0, "w": 1325.0, "h": 78.0, "line_num": 28, "text": "print ( \" Wrong keyword . Please type the exact keyword . \")"}, {"x": 155.0, "y": 2663.0, "w": 43.0, "h": 56.0, "line_num": 29, "text": "if"}, {"x": 202.0, "y": 2674.0, "w": 607.0, "h": 63.0, "line_num": 30, "text": "_ name_ == \" __ main __ \":"}, {"x": 327.0, "y": 2765.0, "w": 186.0, "h": 63.0, "line_num": 31, "text": "main ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main ( ) :\n    The program should determine whether the given year is a leap year\n    ( divisible by 4, divisible by 100 but also by 400).\n    print ( \" This program will help you identify if a given year is a leap\n        year or not . \")\n    print ( \"\n    identify_a_ leap year ()\n    ask _ for _ a _ new _year _ to _identify ( )\ndef identify_ a_ leap-year () :\n    print (\"Please input a year below ( in number form). \")\n    Year = int (input (\"Year:\n    print (\" \")\n    if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;\n        print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")\n    else :\n        print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )\ndef ask-for-a-new year_ to _ identify ( ) :\n    while True :\n        print (\" \")\n        ask - input ( \" Do you want to identify a new year ? Yes / No : \" )\n        print (\" \")\n        if ask == \"Yes \" or ask == \"yes\":\n            identify_ a _ leap - year ( )\n        elif ask == \"No\" or ask = \"no\":\n            print ( \" Thank you . See you again ! \")\n            break\n        elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\".\n            print ( \" Wrong keyword . Please type the exact keyword . \")\nif\n_ name_ == \" __ main __ \":\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 155.0, "y": 131.0, "w": 360.0, "h": 91.0, "line_num": 1, "text": "def main ( ) :", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 339.0, "y": 270.0, "w": 1567.0, "h": 65.0, "line_num": 2, "text": "The program should determine whether the given year is a leap year", "delta": 184.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 340.0, "y": 326.0, "w": 1136.0, "h": 69.0, "line_num": 3, "text": "( divisible by 4, divisible by 100 but also by 400).", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 335.0, "y": 471.0, "w": 1555.0, "h": 70.0, "line_num": 4, "text": "print ( \" This program will help you identify if a given year is a leap", "delta": -5.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 546.0, "y": 542.0, "w": 357.0, "h": 60.0, "line_num": 5, "text": "year or not . \")", "delta": 211.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 335.0, "y": 622.0, "w": 215.0, "h": 85.0, "line_num": 6, "text": "print ( \"", "delta": -211.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 338.0, "y": 704.0, "w": 484.0, "h": 68.0, "line_num": 7, "text": "identify_a_ leap year ()", "delta": 3.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 343.0, "y": 780.0, "w": 689.0, "h": 65.0, "line_num": 8, "text": "ask _ for _ a _ new _year _ to _identify ( )", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 161.0, "y": 897.0, "w": 624.0, "h": 73.0, "line_num": 9, "text": "def identify_ a_ leap-year () :", "delta": -182.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 349.0, "y": 983.0, "w": 1121.0, "h": 74.0, "line_num": 10, "text": "print (\"Please input a year below ( in number form). \")", "delta": 188.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 346.0, "y": 1054.0, "w": 587.0, "h": 63.0, "line_num": 11, "text": "Year = int (input (\"Year:", "delta": -3.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 353.0, "y": 1121.0, "w": 272.0, "h": 63.0, "line_num": 12, "text": "print (\" \")", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 345.0, "y": 1204.0, "w": 1448.0, "h": 75.0, "line_num": 13, "text": "if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;", "delta": -8.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 516.0, "y": 1283.0, "w": 1322.0, "h": 85.0, "line_num": 14, "text": "print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")", "delta": 171.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 340.0, "y": 1405.0, "w": 105.0, "h": 56.0, "line_num": 15, "text": "else :", "delta": -176.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 518.0, "y": 1450.0, "w": 1399.0, "h": 92.0, "line_num": 16, "text": "print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )", "delta": 178.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 154.0, "y": 1595.0, "w": 918.0, "h": 73.0, "line_num": 17, "text": "def ask-for-a-new year_ to _ identify ( ) :", "delta": -364.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 336.0, "y": 1709.0, "w": 263.0, "h": 56.0, "line_num": 18, "text": "while True :", "delta": 182.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 506.0, "y": 1782.0, "w": 244.0, "h": 67.0, "line_num": 19, "text": "print (\" \")", "delta": 170.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 511.0, "y": 1847.0, "w": 1390.0, "h": 78.0, "line_num": 20, "text": "ask - input ( \" Do you want to identify a new year ? Yes / No : \" )", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 508.0, "y": 1921.0, "w": 275.0, "h": 60.0, "line_num": 21, "text": "print (\" \")", "delta": -3.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 511.0, "y": 2004.0, "w": 801.0, "h": 65.0, "line_num": 22, "text": "if ask == \"Yes \" or ask == \"yes\":", "delta": 3.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 618.0, "y": 2078.0, "w": 542.0, "h": 70.0, "line_num": 23, "text": "identify_ a _ leap - year ( )", "delta": 107.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 509.0, "y": 2170.0, "w": 788.0, "h": 62.0, "line_num": 24, "text": "elif ask == \"No\" or ask = \"no\":", "delta": -109.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 605.0, "y": 2245.0, "w": 837.0, "h": 73.0, "line_num": 25, "text": "print ( \" Thank you . See you again ! \")", "delta": 96.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 611.0, "y": 2324.0, "w": 124.0, "h": 57.0, "line_num": 26, "text": "break", "delta": 6.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 3}, {"x": 505.0, "y": 2407.0, "w": 1469.0, "h": 65.0, "line_num": 27, "text": "elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\".", "delta": -106.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 613.0, "y": 2483.0, "w": 1325.0, "h": 78.0, "line_num": 28, "text": "print ( \" Wrong keyword . Please type the exact keyword . \")", "delta": 108.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 155.0, "y": 2663.0, "w": 43.0, "h": 56.0, "line_num": 29, "text": "if", "delta": -458.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 202.0, "y": 2674.0, "w": 607.0, "h": 63.0, "line_num": 30, "text": "_ name_ == \" __ main __ \":", "delta": 47.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 327.0, "y": 2765.0, "w": 186.0, "h": 63.0, "line_num": 31, "text": "main ()", "delta": 125.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}], "ir_algo_output_edit_distance": 147, "prompting_method": "cot-test5", "lm_post_processed_code": "def main():\nprint(\"This program will help you identify if a given year is a leap year or not.\")\nidentify_a_leap_year()\nask_for_a_new_year_to_identify()\n\ndef identify_a_leap_year():\nprint(\"Please input a year below (in number form).\")\nYear = int(input(\"Year:\"))\nprint(\" \")\nif (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):\n    print(\"The Year\" + str(Year) + \" \" + \"is a leap year.\")\nelse:\n    print(\"The Year\" + str(Year) + \" \" + \"is not a leap year.\")\n\ndef ask_for_a_new_year_to_identify():\nwhile True:\n    print(\" \")\n    ask = input(\"Do you want to identify a new year? Yes/No: \")\n    print(\" \")\n    if ask == \"Yes\" or ask == \"yes\":\n        identify_a_leap_year()\n    elif ask == \"No\" or ask == \"no\":\n        print(\"Thank you. See you again!\")\n        break\n    elif ask != \"Yes\" or ask != \"yes\" or ask != \"No\" or ask != \"no\":\n        print(\"Wrong keyword. Please type the exact keyword.\")\n\nif __name__ == \"__main__\":\nmain()\n", "lm_post_processed_edit_distance": 251}, {"image_id": 29, "image_height": 2980, "image_width": 2016, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 131.0, "w": 360.0, "h": 91.0, "line_num": 1, "text": "def main ( ) :"}, {"x": 339.0, "y": 270.0, "w": 1567.0, "h": 65.0, "line_num": 2, "text": "The program should determine whether the given year is a leap year"}, {"x": 340.0, "y": 326.0, "w": 1136.0, "h": 69.0, "line_num": 3, "text": "( divisible by 4, divisible by 100 but also by 400)."}, {"x": 335.0, "y": 471.0, "w": 1555.0, "h": 70.0, "line_num": 4, "text": "print ( \" This program will help you identify if a given year is a leap"}, {"x": 546.0, "y": 542.0, "w": 357.0, "h": 60.0, "line_num": 5, "text": "year or not . \")"}, {"x": 335.0, "y": 622.0, "w": 215.0, "h": 85.0, "line_num": 6, "text": "print ( \""}, {"x": 338.0, "y": 704.0, "w": 484.0, "h": 68.0, "line_num": 7, "text": "identify_a_ leap year ()"}, {"x": 343.0, "y": 780.0, "w": 689.0, "h": 65.0, "line_num": 8, "text": "ask _ for _ a _ new _year _ to _identify ( )"}, {"x": 161.0, "y": 897.0, "w": 624.0, "h": 73.0, "line_num": 9, "text": "def identify_ a_ leap-year () :"}, {"x": 349.0, "y": 983.0, "w": 1121.0, "h": 74.0, "line_num": 10, "text": "print (\"Please input a year below ( in number form). \")"}, {"x": 346.0, "y": 1054.0, "w": 587.0, "h": 63.0, "line_num": 11, "text": "Year = int (input (\"Year:"}, {"x": 353.0, "y": 1121.0, "w": 272.0, "h": 63.0, "line_num": 12, "text": "print (\" \")"}, {"x": 345.0, "y": 1204.0, "w": 1448.0, "h": 75.0, "line_num": 13, "text": "if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;"}, {"x": 516.0, "y": 1283.0, "w": 1322.0, "h": 85.0, "line_num": 14, "text": "print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")"}, {"x": 340.0, "y": 1405.0, "w": 105.0, "h": 56.0, "line_num": 15, "text": "else :"}, {"x": 518.0, "y": 1450.0, "w": 1399.0, "h": 92.0, "line_num": 16, "text": "print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )"}, {"x": 154.0, "y": 1595.0, "w": 918.0, "h": 73.0, "line_num": 17, "text": "def ask-for-a-new year_ to _ identify ( ) :"}, {"x": 336.0, "y": 1709.0, "w": 263.0, "h": 56.0, "line_num": 18, "text": "while True :"}, {"x": 506.0, "y": 1782.0, "w": 244.0, "h": 67.0, "line_num": 19, "text": "print (\" \")"}, {"x": 511.0, "y": 1847.0, "w": 1390.0, "h": 78.0, "line_num": 20, "text": "ask - input ( \" Do you want to identify a new year ? Yes / No : \" )"}, {"x": 508.0, "y": 1921.0, "w": 275.0, "h": 60.0, "line_num": 21, "text": "print (\" \")"}, {"x": 511.0, "y": 2004.0, "w": 801.0, "h": 65.0, "line_num": 22, "text": "if ask == \"Yes \" or ask == \"yes\":"}, {"x": 618.0, "y": 2078.0, "w": 542.0, "h": 70.0, "line_num": 23, "text": "identify_ a _ leap - year ( )"}, {"x": 509.0, "y": 2170.0, "w": 788.0, "h": 62.0, "line_num": 24, "text": "elif ask == \"No\" or ask = \"no\":"}, {"x": 605.0, "y": 2245.0, "w": 837.0, "h": 73.0, "line_num": 25, "text": "print ( \" Thank you . See you again ! \")"}, {"x": 611.0, "y": 2324.0, "w": 124.0, "h": 57.0, "line_num": 26, "text": "break"}, {"x": 505.0, "y": 2407.0, "w": 1469.0, "h": 65.0, "line_num": 27, "text": "elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\"."}, {"x": 613.0, "y": 2483.0, "w": 1325.0, "h": 78.0, "line_num": 28, "text": "print ( \" Wrong keyword . Please type the exact keyword . \")"}, {"x": 155.0, "y": 2663.0, "w": 43.0, "h": 56.0, "line_num": 29, "text": "if"}, {"x": 202.0, "y": 2674.0, "w": 607.0, "h": 63.0, "line_num": 30, "text": "_ name_ == \" __ main __ \":"}, {"x": 327.0, "y": 2765.0, "w": 186.0, "h": 63.0, "line_num": 31, "text": "main ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main ( ) :\n    The program should determine whether the given year is a leap year\n    ( divisible by 4, divisible by 100 but also by 400).\n    print ( \" This program will help you identify if a given year is a leap\n        year or not . \")\n    print ( \"\n    identify_a_ leap year ()\n    ask _ for _ a _ new _year _ to _identify ( )\ndef identify_ a_ leap-year () :\n    print (\"Please input a year below ( in number form). \")\n    Year = int (input (\"Year:\n    print (\" \")\n    if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;\n        print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")\n    else :\n        print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )\ndef ask-for-a-new year_ to _ identify ( ) :\n    while True :\n        print (\" \")\n        ask - input ( \" Do you want to identify a new year ? Yes / No : \" )\n        print (\" \")\n        if ask == \"Yes \" or ask == \"yes\":\n            identify_ a _ leap - year ( )\n        elif ask == \"No\" or ask = \"no\":\n            print ( \" Thank you . See you again ! \")\n            break\n        elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\".\n            print ( \" Wrong keyword . Please type the exact keyword . \")\nif\n_ name_ == \" __ main __ \":\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 155.0, "y": 131.0, "w": 360.0, "h": 91.0, "line_num": 1, "text": "def main ( ) :", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 339.0, "y": 270.0, "w": 1567.0, "h": 65.0, "line_num": 2, "text": "The program should determine whether the given year is a leap year", "delta": 184.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 340.0, "y": 326.0, "w": 1136.0, "h": 69.0, "line_num": 3, "text": "( divisible by 4, divisible by 100 but also by 400).", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 335.0, "y": 471.0, "w": 1555.0, "h": 70.0, "line_num": 4, "text": "print ( \" This program will help you identify if a given year is a leap", "delta": -5.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 546.0, "y": 542.0, "w": 357.0, "h": 60.0, "line_num": 5, "text": "year or not . \")", "delta": 211.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 335.0, "y": 622.0, "w": 215.0, "h": 85.0, "line_num": 6, "text": "print ( \"", "delta": -211.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 338.0, "y": 704.0, "w": 484.0, "h": 68.0, "line_num": 7, "text": "identify_a_ leap year ()", "delta": 3.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 343.0, "y": 780.0, "w": 689.0, "h": 65.0, "line_num": 8, "text": "ask _ for _ a _ new _year _ to _identify ( )", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 161.0, "y": 897.0, "w": 624.0, "h": 73.0, "line_num": 9, "text": "def identify_ a_ leap-year () :", "delta": -182.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 349.0, "y": 983.0, "w": 1121.0, "h": 74.0, "line_num": 10, "text": "print (\"Please input a year below ( in number form). \")", "delta": 188.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 346.0, "y": 1054.0, "w": 587.0, "h": 63.0, "line_num": 11, "text": "Year = int (input (\"Year:", "delta": -3.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 353.0, "y": 1121.0, "w": 272.0, "h": 63.0, "line_num": 12, "text": "print (\" \")", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 345.0, "y": 1204.0, "w": 1448.0, "h": 75.0, "line_num": 13, "text": "if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;", "delta": -8.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 516.0, "y": 1283.0, "w": 1322.0, "h": 85.0, "line_num": 14, "text": "print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")", "delta": 171.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 340.0, "y": 1405.0, "w": 105.0, "h": 56.0, "line_num": 15, "text": "else :", "delta": -176.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 518.0, "y": 1450.0, "w": 1399.0, "h": 92.0, "line_num": 16, "text": "print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )", "delta": 178.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 154.0, "y": 1595.0, "w": 918.0, "h": 73.0, "line_num": 17, "text": "def ask-for-a-new year_ to _ identify ( ) :", "delta": -364.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 336.0, "y": 1709.0, "w": 263.0, "h": 56.0, "line_num": 18, "text": "while True :", "delta": 182.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 506.0, "y": 1782.0, "w": 244.0, "h": 67.0, "line_num": 19, "text": "print (\" \")", "delta": 170.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 511.0, "y": 1847.0, "w": 1390.0, "h": 78.0, "line_num": 20, "text": "ask - input ( \" Do you want to identify a new year ? Yes / No : \" )", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 508.0, "y": 1921.0, "w": 275.0, "h": 60.0, "line_num": 21, "text": "print (\" \")", "delta": -3.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 511.0, "y": 2004.0, "w": 801.0, "h": 65.0, "line_num": 22, "text": "if ask == \"Yes \" or ask == \"yes\":", "delta": 3.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 618.0, "y": 2078.0, "w": 542.0, "h": 70.0, "line_num": 23, "text": "identify_ a _ leap - year ( )", "delta": 107.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 509.0, "y": 2170.0, "w": 788.0, "h": 62.0, "line_num": 24, "text": "elif ask == \"No\" or ask = \"no\":", "delta": -109.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 605.0, "y": 2245.0, "w": 837.0, "h": 73.0, "line_num": 25, "text": "print ( \" Thank you . See you again ! \")", "delta": 96.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 611.0, "y": 2324.0, "w": 124.0, "h": 57.0, "line_num": 26, "text": "break", "delta": 6.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 3}, {"x": 505.0, "y": 2407.0, "w": 1469.0, "h": 65.0, "line_num": 27, "text": "elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\".", "delta": -106.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 613.0, "y": 2483.0, "w": 1325.0, "h": 78.0, "line_num": 28, "text": "print ( \" Wrong keyword . Please type the exact keyword . \")", "delta": 108.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 155.0, "y": 2663.0, "w": 43.0, "h": 56.0, "line_num": 29, "text": "if", "delta": -458.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 202.0, "y": 2674.0, "w": 607.0, "h": 63.0, "line_num": 30, "text": "_ name_ == \" __ main __ \":", "delta": 47.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 327.0, "y": 2765.0, "w": 186.0, "h": 63.0, "line_num": 31, "text": "main ()", "delta": 125.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}], "ir_algo_output_edit_distance": 147, "prompting_method": "simple-test2", "lm_post_processed_code": "def main():\n    print(\"This program will help you identify if a given year is a leap year or not.\")\n    identify_a_leap_year()\n    ask_for_a_new_year_to_identify()\n\ndef identify_a_leap_year():\n    print(\"Please input a year below (in number form).\")\n    Year = int(input(\"Year:\"))\n    print(\" \")\n    if (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):\n        print(\"The Year\" + str(Year) + \" \" + \"is a leap year.\")\n    else:\n        print(\"The Year\" + str(Year) + \" \" + \"is not a leap year.\")\n\ndef ask_for_a_new_year_to_identify():\n    while True:\n        print(\" \")\n        ask = input(\"Do you want to identify a new year? Yes/No: \")\n        print(\" \")\n        if ask == \"Yes\" or ask == \"yes\":\n            identify_a_leap_year()\n        elif ask == \"No\" or ask == \"no\":\n            print(\"Thank you. See you again!\")\n            break\n        elif ask != \"Yes\" and ask != \"yes\" and ask != \"No\" and ask != \"no\":\n            print(\"Wrong keyword. Please type the exact keyword.\")\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 172}, {"image_id": 29, "image_height": 2980, "image_width": 2016, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 131.0, "w": 360.0, "h": 91.0, "line_num": 1, "text": "def main ( ) :"}, {"x": 339.0, "y": 270.0, "w": 1567.0, "h": 65.0, "line_num": 2, "text": "The program should determine whether the given year is a leap year"}, {"x": 340.0, "y": 326.0, "w": 1136.0, "h": 69.0, "line_num": 3, "text": "( divisible by 4, divisible by 100 but also by 400)."}, {"x": 335.0, "y": 471.0, "w": 1555.0, "h": 70.0, "line_num": 4, "text": "print ( \" This program will help you identify if a given year is a leap"}, {"x": 546.0, "y": 542.0, "w": 357.0, "h": 60.0, "line_num": 5, "text": "year or not . \")"}, {"x": 335.0, "y": 622.0, "w": 215.0, "h": 85.0, "line_num": 6, "text": "print ( \""}, {"x": 338.0, "y": 704.0, "w": 484.0, "h": 68.0, "line_num": 7, "text": "identify_a_ leap year ()"}, {"x": 343.0, "y": 780.0, "w": 689.0, "h": 65.0, "line_num": 8, "text": "ask _ for _ a _ new _year _ to _identify ( )"}, {"x": 161.0, "y": 897.0, "w": 624.0, "h": 73.0, "line_num": 9, "text": "def identify_ a_ leap-year () :"}, {"x": 349.0, "y": 983.0, "w": 1121.0, "h": 74.0, "line_num": 10, "text": "print (\"Please input a year below ( in number form). \")"}, {"x": 346.0, "y": 1054.0, "w": 587.0, "h": 63.0, "line_num": 11, "text": "Year = int (input (\"Year:"}, {"x": 353.0, "y": 1121.0, "w": 272.0, "h": 63.0, "line_num": 12, "text": "print (\" \")"}, {"x": 345.0, "y": 1204.0, "w": 1448.0, "h": 75.0, "line_num": 13, "text": "if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;"}, {"x": 516.0, "y": 1283.0, "w": 1322.0, "h": 85.0, "line_num": 14, "text": "print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")"}, {"x": 340.0, "y": 1405.0, "w": 105.0, "h": 56.0, "line_num": 15, "text": "else :"}, {"x": 518.0, "y": 1450.0, "w": 1399.0, "h": 92.0, "line_num": 16, "text": "print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )"}, {"x": 154.0, "y": 1595.0, "w": 918.0, "h": 73.0, "line_num": 17, "text": "def ask-for-a-new year_ to _ identify ( ) :"}, {"x": 336.0, "y": 1709.0, "w": 263.0, "h": 56.0, "line_num": 18, "text": "while True :"}, {"x": 506.0, "y": 1782.0, "w": 244.0, "h": 67.0, "line_num": 19, "text": "print (\" \")"}, {"x": 511.0, "y": 1847.0, "w": 1390.0, "h": 78.0, "line_num": 20, "text": "ask - input ( \" Do you want to identify a new year ? Yes / No : \" )"}, {"x": 508.0, "y": 1921.0, "w": 275.0, "h": 60.0, "line_num": 21, "text": "print (\" \")"}, {"x": 511.0, "y": 2004.0, "w": 801.0, "h": 65.0, "line_num": 22, "text": "if ask == \"Yes \" or ask == \"yes\":"}, {"x": 618.0, "y": 2078.0, "w": 542.0, "h": 70.0, "line_num": 23, "text": "identify_ a _ leap - year ( )"}, {"x": 509.0, "y": 2170.0, "w": 788.0, "h": 62.0, "line_num": 24, "text": "elif ask == \"No\" or ask = \"no\":"}, {"x": 605.0, "y": 2245.0, "w": 837.0, "h": 73.0, "line_num": 25, "text": "print ( \" Thank you . See you again ! \")"}, {"x": 611.0, "y": 2324.0, "w": 124.0, "h": 57.0, "line_num": 26, "text": "break"}, {"x": 505.0, "y": 2407.0, "w": 1469.0, "h": 65.0, "line_num": 27, "text": "elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\"."}, {"x": 613.0, "y": 2483.0, "w": 1325.0, "h": 78.0, "line_num": 28, "text": "print ( \" Wrong keyword . Please type the exact keyword . \")"}, {"x": 155.0, "y": 2663.0, "w": 43.0, "h": 56.0, "line_num": 29, "text": "if"}, {"x": 202.0, "y": 2674.0, "w": 607.0, "h": 63.0, "line_num": 30, "text": "_ name_ == \" __ main __ \":"}, {"x": 327.0, "y": 2765.0, "w": 186.0, "h": 63.0, "line_num": 31, "text": "main ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main ( ) :\n    The program should determine whether the given year is a leap year\n    ( divisible by 4, divisible by 100 but also by 400).\n    print ( \" This program will help you identify if a given year is a leap\n        year or not . \")\n    print ( \"\n    identify_a_ leap year ()\n    ask _ for _ a _ new _year _ to _identify ( )\ndef identify_ a_ leap-year () :\n    print (\"Please input a year below ( in number form). \")\n    Year = int (input (\"Year:\n    print (\" \")\n    if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;\n        print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")\n    else :\n        print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )\ndef ask-for-a-new year_ to _ identify ( ) :\n    while True :\n        print (\" \")\n        ask - input ( \" Do you want to identify a new year ? Yes / No : \" )\n        print (\" \")\n        if ask == \"Yes \" or ask == \"yes\":\n            identify_ a _ leap - year ( )\n        elif ask == \"No\" or ask = \"no\":\n            print ( \" Thank you . See you again ! \")\n            break\n        elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\".\n            print ( \" Wrong keyword . Please type the exact keyword . \")\nif\n_ name_ == \" __ main __ \":\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 155.0, "y": 131.0, "w": 360.0, "h": 91.0, "line_num": 1, "text": "def main ( ) :", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 339.0, "y": 270.0, "w": 1567.0, "h": 65.0, "line_num": 2, "text": "The program should determine whether the given year is a leap year", "delta": 184.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 340.0, "y": 326.0, "w": 1136.0, "h": 69.0, "line_num": 3, "text": "( divisible by 4, divisible by 100 but also by 400).", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 335.0, "y": 471.0, "w": 1555.0, "h": 70.0, "line_num": 4, "text": "print ( \" This program will help you identify if a given year is a leap", "delta": -5.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 546.0, "y": 542.0, "w": 357.0, "h": 60.0, "line_num": 5, "text": "year or not . \")", "delta": 211.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 335.0, "y": 622.0, "w": 215.0, "h": 85.0, "line_num": 6, "text": "print ( \"", "delta": -211.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 338.0, "y": 704.0, "w": 484.0, "h": 68.0, "line_num": 7, "text": "identify_a_ leap year ()", "delta": 3.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 343.0, "y": 780.0, "w": 689.0, "h": 65.0, "line_num": 8, "text": "ask _ for _ a _ new _year _ to _identify ( )", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 161.0, "y": 897.0, "w": 624.0, "h": 73.0, "line_num": 9, "text": "def identify_ a_ leap-year () :", "delta": -182.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 349.0, "y": 983.0, "w": 1121.0, "h": 74.0, "line_num": 10, "text": "print (\"Please input a year below ( in number form). \")", "delta": 188.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 346.0, "y": 1054.0, "w": 587.0, "h": 63.0, "line_num": 11, "text": "Year = int (input (\"Year:", "delta": -3.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 353.0, "y": 1121.0, "w": 272.0, "h": 63.0, "line_num": 12, "text": "print (\" \")", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 345.0, "y": 1204.0, "w": 1448.0, "h": 75.0, "line_num": 13, "text": "if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;", "delta": -8.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 516.0, "y": 1283.0, "w": 1322.0, "h": 85.0, "line_num": 14, "text": "print (\"The Year\" + str (Year) + \" \"+ \" is a leap year. \")", "delta": 171.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 340.0, "y": 1405.0, "w": 105.0, "h": 56.0, "line_num": 15, "text": "else :", "delta": -176.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 518.0, "y": 1450.0, "w": 1399.0, "h": 92.0, "line_num": 16, "text": "print ( \" the Year \" + str ( Year ) + \" \" + \" is not a leap year . \" )", "delta": 178.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 154.0, "y": 1595.0, "w": 918.0, "h": 73.0, "line_num": 17, "text": "def ask-for-a-new year_ to _ identify ( ) :", "delta": -364.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 336.0, "y": 1709.0, "w": 263.0, "h": 56.0, "line_num": 18, "text": "while True :", "delta": 182.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 506.0, "y": 1782.0, "w": 244.0, "h": 67.0, "line_num": 19, "text": "print (\" \")", "delta": 170.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 511.0, "y": 1847.0, "w": 1390.0, "h": 78.0, "line_num": 20, "text": "ask - input ( \" Do you want to identify a new year ? Yes / No : \" )", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 508.0, "y": 1921.0, "w": 275.0, "h": 60.0, "line_num": 21, "text": "print (\" \")", "delta": -3.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 511.0, "y": 2004.0, "w": 801.0, "h": 65.0, "line_num": 22, "text": "if ask == \"Yes \" or ask == \"yes\":", "delta": 3.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 618.0, "y": 2078.0, "w": 542.0, "h": 70.0, "line_num": 23, "text": "identify_ a _ leap - year ( )", "delta": 107.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 509.0, "y": 2170.0, "w": 788.0, "h": 62.0, "line_num": 24, "text": "elif ask == \"No\" or ask = \"no\":", "delta": -109.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 605.0, "y": 2245.0, "w": 837.0, "h": 73.0, "line_num": 25, "text": "print ( \" Thank you . See you again ! \")", "delta": 96.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 611.0, "y": 2324.0, "w": 124.0, "h": 57.0, "line_num": 26, "text": "break", "delta": 6.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 3}, {"x": 505.0, "y": 2407.0, "w": 1469.0, "h": 65.0, "line_num": 27, "text": "elif ask != \"Yes or ask ! = \"yes\" a ask != \"No\" or ask != \"no\".", "delta": -106.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 613.0, "y": 2483.0, "w": 1325.0, "h": 78.0, "line_num": 28, "text": "print ( \" Wrong keyword . Please type the exact keyword . \")", "delta": 108.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 155.0, "y": 2663.0, "w": 43.0, "h": 56.0, "line_num": 29, "text": "if", "delta": -458.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 202.0, "y": 2674.0, "w": 607.0, "h": 63.0, "line_num": 30, "text": "_ name_ == \" __ main __ \":", "delta": 47.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 327.0, "y": 2765.0, "w": 186.0, "h": 63.0, "line_num": 31, "text": "main ()", "delta": 125.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}], "ir_algo_output_edit_distance": 147, "prompting_method": "simple-test3", "lm_post_processed_code": "def main():\n    print(\"This program will help you identify if a given year is a leap year or not.\")\n    identify_a_leap_year()\n    ask_for_a_new_year_to_identify()\n\ndef identify_a_leap_year():\n    print(\"Please input a year below (in number form).\")\n    Year = int(input(\"Year:\"))\n    print(\" \")\n    if (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):\n        print(\"The Year\" + str(Year) + \" \" + \"is a leap year.\")\n    else:\n        print(\"The Year\" + str(Year) + \" \" + \"is not a leap year.\")\n\ndef ask_for_a_new_year_to_identify():\n    while True:\n        print(\" \")\n        ask = input(\"Do you want to identify a new year? Yes/No: \")\n        print(\" \")\n        if ask == \"Yes\" or ask == \"yes\":\n            identify_a_leap_year()\n        elif ask == \"No\" or ask == \"no\":\n            print(\"Thank you. See you again!\")\n            break\n        elif ask != \"Yes\" or ask != \"yes\" or ask != \"No\" or ask != \"no\":\n            print(\"Wrong keyword. Please type the exact keyword.\")\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 163}, {"image_id": 30, "image_height": 2447, "image_width": 2798, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 268.0, "y": 249.0, "w": 782.0, "h": 144.0, "line_num": 1, "text": "Sun = D"}, {"x": 241.0, "y": 510.0, "w": 1954.0, "h": 197.0, "line_num": 2, "text": "number = input ()"}, {"x": 214.0, "y": 861.0, "w": 2085.0, "h": 276.0, "line_num": 3, "text": "for i in number :"}, {"x": 831.0, "y": 1226.0, "w": 1590.0, "h": 190.0, "line_num": 4, "text": "Sun + = int (i)"}, {"x": 234.0, "y": 1619.0, "w": 1304.0, "h": 297.0, "line_num": 5, "text": "Print (Sum)"}], "ir_algo_name": "none", "ir_algo_output_code": "Sun = D\nnumber = input ()\nfor i in number :\nSun + = int (i)\nPrint (Sum)", "ir_algo_output_edit_distance": 16, "prompting_method": "none", "lm_post_processed_code": "Sun = D\nnumber = input ()\nfor i in number :\nSun + = int (i)\nPrint (Sum)", "lm_post_processed_edit_distance": 16}, {"image_id": 30, "image_height": 2447, "image_width": 2798, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 268.0, "y": 249.0, "w": 782.0, "h": 144.0, "line_num": 1, "text": "Sun = D"}, {"x": 241.0, "y": 510.0, "w": 1954.0, "h": 197.0, "line_num": 2, "text": "number = input ()"}, {"x": 214.0, "y": 861.0, "w": 2085.0, "h": 276.0, "line_num": 3, "text": "for i in number :"}, {"x": 831.0, "y": 1226.0, "w": 1590.0, "h": 190.0, "line_num": 4, "text": "Sun + = int (i)"}, {"x": 234.0, "y": 1619.0, "w": 1304.0, "h": 297.0, "line_num": 5, "text": "Print (Sum)"}], "ir_algo_name": "none", "ir_algo_output_code": "Sun = D\nnumber = input ()\nfor i in number :\nSun + = int (i)\nPrint (Sum)", "ir_algo_output_edit_distance": 16, "prompting_method": "cot-test1", "lm_post_processed_code": "Sum = 0\nnumber = input ()\nfor i in number :\n    Sum += int (i)\nprint (Sum)\n", "lm_post_processed_edit_distance": 8}, {"image_id": 30, "image_height": 2447, "image_width": 2798, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 268.0, "y": 249.0, "w": 782.0, "h": 144.0, "line_num": 1, "text": "Sun = D"}, {"x": 241.0, "y": 510.0, "w": 1954.0, "h": 197.0, "line_num": 2, "text": "number = input ()"}, {"x": 214.0, "y": 861.0, "w": 2085.0, "h": 276.0, "line_num": 3, "text": "for i in number :"}, {"x": 831.0, "y": 1226.0, "w": 1590.0, "h": 190.0, "line_num": 4, "text": "Sun + = int (i)"}, {"x": 234.0, "y": 1619.0, "w": 1304.0, "h": 297.0, "line_num": 5, "text": "Print (Sum)"}], "ir_algo_name": "none", "ir_algo_output_code": "Sun = D\nnumber = input ()\nfor i in number :\nSun + = int (i)\nPrint (Sum)", "ir_algo_output_edit_distance": 16, "prompting_method": "cot-test5", "lm_post_processed_code": "Sum = 0\nnumber = input()\nfor i in number :\n    Sum += int(i)\nprint(Sum)\n", "lm_post_processed_edit_distance": 5}, {"image_id": 30, "image_height": 2447, "image_width": 2798, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 268.0, "y": 249.0, "w": 782.0, "h": 144.0, "line_num": 1, "text": "Sun = D"}, {"x": 241.0, "y": 510.0, "w": 1954.0, "h": 197.0, "line_num": 2, "text": "number = input ()"}, {"x": 214.0, "y": 861.0, "w": 2085.0, "h": 276.0, "line_num": 3, "text": "for i in number :"}, {"x": 831.0, "y": 1226.0, "w": 1590.0, "h": 190.0, "line_num": 4, "text": "Sun + = int (i)"}, {"x": 234.0, "y": 1619.0, "w": 1304.0, "h": 297.0, "line_num": 5, "text": "Print (Sum)"}], "ir_algo_name": "none", "ir_algo_output_code": "Sun = D\nnumber = input ()\nfor i in number :\nSun + = int (i)\nPrint (Sum)", "ir_algo_output_edit_distance": 16, "prompting_method": "simple-test2", "lm_post_processed_code": "Sum = 0\nnumber = input()\nfor i in number:\n    Sum += int(i)\nprint(Sum)\n", "lm_post_processed_edit_distance": 4}, {"image_id": 30, "image_height": 2447, "image_width": 2798, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 268.0, "y": 249.0, "w": 782.0, "h": 144.0, "line_num": 1, "text": "Sun = D"}, {"x": 241.0, "y": 510.0, "w": 1954.0, "h": 197.0, "line_num": 2, "text": "number = input ()"}, {"x": 214.0, "y": 861.0, "w": 2085.0, "h": 276.0, "line_num": 3, "text": "for i in number :"}, {"x": 831.0, "y": 1226.0, "w": 1590.0, "h": 190.0, "line_num": 4, "text": "Sun + = int (i)"}, {"x": 234.0, "y": 1619.0, "w": 1304.0, "h": 297.0, "line_num": 5, "text": "Print (Sum)"}], "ir_algo_name": "none", "ir_algo_output_code": "Sun = D\nnumber = input ()\nfor i in number :\nSun + = int (i)\nPrint (Sum)", "ir_algo_output_edit_distance": 16, "prompting_method": "simple-test3", "lm_post_processed_code": "Sum = 0\nnumber = input()\nfor i in number:\n    Sum += int(i)\nprint(Sum)\n", "lm_post_processed_edit_distance": 4}, {"image_id": 30, "image_height": 2447, "image_width": 2798, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 268.0, "y": 249.0, "w": 782.0, "h": 144.0, "line_num": 1, "text": "Sun = D"}, {"x": 241.0, "y": 510.0, "w": 1954.0, "h": 197.0, "line_num": 2, "text": "number = input ()"}, {"x": 214.0, "y": 861.0, "w": 2085.0, "h": 276.0, "line_num": 3, "text": "for i in number :"}, {"x": 831.0, "y": 1226.0, "w": 1590.0, "h": 190.0, "line_num": 4, "text": "Sun + = int (i)"}, {"x": 234.0, "y": 1619.0, "w": 1304.0, "h": 297.0, "line_num": 5, "text": "Print (Sum)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 331.20000000000005, "ir_algo_output_code": "Sun = D\nnumber = input ()\nfor i in number :\n    Sun + = int (i)\nPrint (Sum)\n", "ir_algo_output_indented_lines": [{"x": 268.0, "y": 249.0, "w": 782.0, "h": 144.0, "line_num": 1, "text": "Sun = D", "cluster_label": 0, "indentation": 0}, {"x": 241.0, "y": 510.0, "w": 1954.0, "h": 197.0, "line_num": 2, "text": "number = input ()", "cluster_label": 0, "indentation": 0}, {"x": 214.0, "y": 861.0, "w": 2085.0, "h": 276.0, "line_num": 3, "text": "for i in number :", "cluster_label": 0, "indentation": 0}, {"x": 831.0, "y": 1226.0, "w": 1590.0, "h": 190.0, "line_num": 4, "text": "Sun + = int (i)", "cluster_label": 1, "indentation": 1}, {"x": 234.0, "y": 1619.0, "w": 1304.0, "h": 297.0, "line_num": 5, "text": "Print (Sum)", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 11, "prompting_method": "none", "lm_post_processed_code": "Sun = D\nnumber = input ()\nfor i in number :\n    Sun + = int (i)\nPrint (Sum)\n", "lm_post_processed_edit_distance": 11}, {"image_id": 30, "image_height": 2447, "image_width": 2798, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 268.0, "y": 249.0, "w": 782.0, "h": 144.0, "line_num": 1, "text": "Sun = D"}, {"x": 241.0, "y": 510.0, "w": 1954.0, "h": 197.0, "line_num": 2, "text": "number = input ()"}, {"x": 214.0, "y": 861.0, "w": 2085.0, "h": 276.0, "line_num": 3, "text": "for i in number :"}, {"x": 831.0, "y": 1226.0, "w": 1590.0, "h": 190.0, "line_num": 4, "text": "Sun + = int (i)"}, {"x": 234.0, "y": 1619.0, "w": 1304.0, "h": 297.0, "line_num": 5, "text": "Print (Sum)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 331.20000000000005, "ir_algo_output_code": "Sun = D\nnumber = input ()\nfor i in number :\n    Sun + = int (i)\nPrint (Sum)\n", "ir_algo_output_indented_lines": [{"x": 268.0, "y": 249.0, "w": 782.0, "h": 144.0, "line_num": 1, "text": "Sun = D", "cluster_label": 0, "indentation": 0}, {"x": 241.0, "y": 510.0, "w": 1954.0, "h": 197.0, "line_num": 2, "text": "number = input ()", "cluster_label": 0, "indentation": 0}, {"x": 214.0, "y": 861.0, "w": 2085.0, "h": 276.0, "line_num": 3, "text": "for i in number :", "cluster_label": 0, "indentation": 0}, {"x": 831.0, "y": 1226.0, "w": 1590.0, "h": 190.0, "line_num": 4, "text": "Sun + = int (i)", "cluster_label": 1, "indentation": 1}, {"x": 234.0, "y": 1619.0, "w": 1304.0, "h": 297.0, "line_num": 5, "text": "Print (Sum)", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 11, "prompting_method": "cot-test1", "lm_post_processed_code": "Sum = 0\nnumber = input ()\nfor i in number :\n    Sum += int (i)\nprint (Sum)\n", "lm_post_processed_edit_distance": 8}, {"image_id": 30, "image_height": 2447, "image_width": 2798, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 268.0, "y": 249.0, "w": 782.0, "h": 144.0, "line_num": 1, "text": "Sun = D"}, {"x": 241.0, "y": 510.0, "w": 1954.0, "h": 197.0, "line_num": 2, "text": "number = input ()"}, {"x": 214.0, "y": 861.0, "w": 2085.0, "h": 276.0, "line_num": 3, "text": "for i in number :"}, {"x": 831.0, "y": 1226.0, "w": 1590.0, "h": 190.0, "line_num": 4, "text": "Sun + = int (i)"}, {"x": 234.0, "y": 1619.0, "w": 1304.0, "h": 297.0, "line_num": 5, "text": "Print (Sum)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 331.20000000000005, "ir_algo_output_code": "Sun = D\nnumber = input ()\nfor i in number :\n    Sun + = int (i)\nPrint (Sum)\n", "ir_algo_output_indented_lines": [{"x": 268.0, "y": 249.0, "w": 782.0, "h": 144.0, "line_num": 1, "text": "Sun = D", "cluster_label": 0, "indentation": 0}, {"x": 241.0, "y": 510.0, "w": 1954.0, "h": 197.0, "line_num": 2, "text": "number = input ()", "cluster_label": 0, "indentation": 0}, {"x": 214.0, "y": 861.0, "w": 2085.0, "h": 276.0, "line_num": 3, "text": "for i in number :", "cluster_label": 0, "indentation": 0}, {"x": 831.0, "y": 1226.0, "w": 1590.0, "h": 190.0, "line_num": 4, "text": "Sun + = int (i)", "cluster_label": 1, "indentation": 1}, {"x": 234.0, "y": 1619.0, "w": 1304.0, "h": 297.0, "line_num": 5, "text": "Print (Sum)", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 11, "prompting_method": "cot-test5", "lm_post_processed_code": "Sum = 0\nnumber = input()\nfor i in number :\n    Sum += int (i)\nprint (Sum)\n", "lm_post_processed_edit_distance": 7}, {"image_id": 30, "image_height": 2447, "image_width": 2798, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 268.0, "y": 249.0, "w": 782.0, "h": 144.0, "line_num": 1, "text": "Sun = D"}, {"x": 241.0, "y": 510.0, "w": 1954.0, "h": 197.0, "line_num": 2, "text": "number = input ()"}, {"x": 214.0, "y": 861.0, "w": 2085.0, "h": 276.0, "line_num": 3, "text": "for i in number :"}, {"x": 831.0, "y": 1226.0, "w": 1590.0, "h": 190.0, "line_num": 4, "text": "Sun + = int (i)"}, {"x": 234.0, "y": 1619.0, "w": 1304.0, "h": 297.0, "line_num": 5, "text": "Print (Sum)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 331.20000000000005, "ir_algo_output_code": "Sun = D\nnumber = input ()\nfor i in number :\n    Sun + = int (i)\nPrint (Sum)\n", "ir_algo_output_indented_lines": [{"x": 268.0, "y": 249.0, "w": 782.0, "h": 144.0, "line_num": 1, "text": "Sun = D", "cluster_label": 0, "indentation": 0}, {"x": 241.0, "y": 510.0, "w": 1954.0, "h": 197.0, "line_num": 2, "text": "number = input ()", "cluster_label": 0, "indentation": 0}, {"x": 214.0, "y": 861.0, "w": 2085.0, "h": 276.0, "line_num": 3, "text": "for i in number :", "cluster_label": 0, "indentation": 0}, {"x": 831.0, "y": 1226.0, "w": 1590.0, "h": 190.0, "line_num": 4, "text": "Sun + = int (i)", "cluster_label": 1, "indentation": 1}, {"x": 234.0, "y": 1619.0, "w": 1304.0, "h": 297.0, "line_num": 5, "text": "Print (Sum)", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 11, "prompting_method": "simple-test2", "lm_post_processed_code": "Sum = 0\nnumber = input()\nfor i in number:\n    Sum += int(i)\nprint(Sum)\n", "lm_post_processed_edit_distance": 4}, {"image_id": 30, "image_height": 2447, "image_width": 2798, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 268.0, "y": 249.0, "w": 782.0, "h": 144.0, "line_num": 1, "text": "Sun = D"}, {"x": 241.0, "y": 510.0, "w": 1954.0, "h": 197.0, "line_num": 2, "text": "number = input ()"}, {"x": 214.0, "y": 861.0, "w": 2085.0, "h": 276.0, "line_num": 3, "text": "for i in number :"}, {"x": 831.0, "y": 1226.0, "w": 1590.0, "h": 190.0, "line_num": 4, "text": "Sun + = int (i)"}, {"x": 234.0, "y": 1619.0, "w": 1304.0, "h": 297.0, "line_num": 5, "text": "Print (Sum)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 331.20000000000005, "ir_algo_output_code": "Sun = D\nnumber = input ()\nfor i in number :\n    Sun + = int (i)\nPrint (Sum)\n", "ir_algo_output_indented_lines": [{"x": 268.0, "y": 249.0, "w": 782.0, "h": 144.0, "line_num": 1, "text": "Sun = D", "cluster_label": 0, "indentation": 0}, {"x": 241.0, "y": 510.0, "w": 1954.0, "h": 197.0, "line_num": 2, "text": "number = input ()", "cluster_label": 0, "indentation": 0}, {"x": 214.0, "y": 861.0, "w": 2085.0, "h": 276.0, "line_num": 3, "text": "for i in number :", "cluster_label": 0, "indentation": 0}, {"x": 831.0, "y": 1226.0, "w": 1590.0, "h": 190.0, "line_num": 4, "text": "Sun + = int (i)", "cluster_label": 1, "indentation": 1}, {"x": 234.0, "y": 1619.0, "w": 1304.0, "h": 297.0, "line_num": 5, "text": "Print (Sum)", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 11, "prompting_method": "simple-test3", "lm_post_processed_code": "Sum = 0\nnumber = input()\nfor i in number:\n    Sum += int(i)\nprint(Sum)\n", "lm_post_processed_edit_distance": 4}, {"image_id": 30, "image_height": 2447, "image_width": 2798, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 268.0, "y": 249.0, "w": 782.0, "h": 144.0, "line_num": 1, "text": "Sun = D"}, {"x": 241.0, "y": 510.0, "w": 1954.0, "h": 197.0, "line_num": 2, "text": "number = input ()"}, {"x": 214.0, "y": 861.0, "w": 2085.0, "h": 276.0, "line_num": 3, "text": "for i in number :"}, {"x": 831.0, "y": 1226.0, "w": 1590.0, "h": 190.0, "line_num": 4, "text": "Sun + = int (i)"}, {"x": 234.0, "y": 1619.0, "w": 1304.0, "h": 297.0, "line_num": 5, "text": "Print (Sum)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "Sun = D\nnumber = input ()\nfor i in number :\n    Sun + = int (i)\nPrint (Sum)\n", "ir_algo_output_indented_lines": [{"x": 268.0, "y": 249.0, "w": 782.0, "h": 144.0, "line_num": 1, "text": "Sun = D", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 241.0, "y": 510.0, "w": 1954.0, "h": 197.0, "line_num": 2, "text": "number = input ()", "delta": -27.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 214.0, "y": 861.0, "w": 2085.0, "h": 276.0, "line_num": 3, "text": "for i in number :", "delta": -27.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 831.0, "y": 1226.0, "w": 1590.0, "h": 190.0, "line_num": 4, "text": "Sun + = int (i)", "delta": 617.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 234.0, "y": 1619.0, "w": 1304.0, "h": 297.0, "line_num": 5, "text": "Print (Sum)", "delta": -597.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 11, "prompting_method": "none", "lm_post_processed_code": "Sun = D\nnumber = input ()\nfor i in number :\n    Sun + = int (i)\nPrint (Sum)\n", "lm_post_processed_edit_distance": 11}, {"image_id": 30, "image_height": 2447, "image_width": 2798, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 268.0, "y": 249.0, "w": 782.0, "h": 144.0, "line_num": 1, "text": "Sun = D"}, {"x": 241.0, "y": 510.0, "w": 1954.0, "h": 197.0, "line_num": 2, "text": "number = input ()"}, {"x": 214.0, "y": 861.0, "w": 2085.0, "h": 276.0, "line_num": 3, "text": "for i in number :"}, {"x": 831.0, "y": 1226.0, "w": 1590.0, "h": 190.0, "line_num": 4, "text": "Sun + = int (i)"}, {"x": 234.0, "y": 1619.0, "w": 1304.0, "h": 297.0, "line_num": 5, "text": "Print (Sum)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "Sun = D\nnumber = input ()\nfor i in number :\n    Sun + = int (i)\nPrint (Sum)\n", "ir_algo_output_indented_lines": [{"x": 268.0, "y": 249.0, "w": 782.0, "h": 144.0, "line_num": 1, "text": "Sun = D", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 241.0, "y": 510.0, "w": 1954.0, "h": 197.0, "line_num": 2, "text": "number = input ()", "delta": -27.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 214.0, "y": 861.0, "w": 2085.0, "h": 276.0, "line_num": 3, "text": "for i in number :", "delta": -27.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 831.0, "y": 1226.0, "w": 1590.0, "h": 190.0, "line_num": 4, "text": "Sun + = int (i)", "delta": 617.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 234.0, "y": 1619.0, "w": 1304.0, "h": 297.0, "line_num": 5, "text": "Print (Sum)", "delta": -597.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 11, "prompting_method": "cot-test1", "lm_post_processed_code": "Sum = D\nnumber = input()\nfor i in number :\n    Sum += int (i)\nprint (Sum)\n", "lm_post_processed_edit_distance": 8}, {"image_id": 30, "image_height": 2447, "image_width": 2798, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 268.0, "y": 249.0, "w": 782.0, "h": 144.0, "line_num": 1, "text": "Sun = D"}, {"x": 241.0, "y": 510.0, "w": 1954.0, "h": 197.0, "line_num": 2, "text": "number = input ()"}, {"x": 214.0, "y": 861.0, "w": 2085.0, "h": 276.0, "line_num": 3, "text": "for i in number :"}, {"x": 831.0, "y": 1226.0, "w": 1590.0, "h": 190.0, "line_num": 4, "text": "Sun + = int (i)"}, {"x": 234.0, "y": 1619.0, "w": 1304.0, "h": 297.0, "line_num": 5, "text": "Print (Sum)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "Sun = D\nnumber = input ()\nfor i in number :\n    Sun + = int (i)\nPrint (Sum)\n", "ir_algo_output_indented_lines": [{"x": 268.0, "y": 249.0, "w": 782.0, "h": 144.0, "line_num": 1, "text": "Sun = D", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 241.0, "y": 510.0, "w": 1954.0, "h": 197.0, "line_num": 2, "text": "number = input ()", "delta": -27.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 214.0, "y": 861.0, "w": 2085.0, "h": 276.0, "line_num": 3, "text": "for i in number :", "delta": -27.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 831.0, "y": 1226.0, "w": 1590.0, "h": 190.0, "line_num": 4, "text": "Sun + = int (i)", "delta": 617.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 234.0, "y": 1619.0, "w": 1304.0, "h": 297.0, "line_num": 5, "text": "Print (Sum)", "delta": -597.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 11, "prompting_method": "cot-test5", "lm_post_processed_code": "Sum = 0\nnumber = input()\nfor i in number :\n    Sum += int (i)\nprint (Sum)\n", "lm_post_processed_edit_distance": 7}, {"image_id": 30, "image_height": 2447, "image_width": 2798, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 268.0, "y": 249.0, "w": 782.0, "h": 144.0, "line_num": 1, "text": "Sun = D"}, {"x": 241.0, "y": 510.0, "w": 1954.0, "h": 197.0, "line_num": 2, "text": "number = input ()"}, {"x": 214.0, "y": 861.0, "w": 2085.0, "h": 276.0, "line_num": 3, "text": "for i in number :"}, {"x": 831.0, "y": 1226.0, "w": 1590.0, "h": 190.0, "line_num": 4, "text": "Sun + = int (i)"}, {"x": 234.0, "y": 1619.0, "w": 1304.0, "h": 297.0, "line_num": 5, "text": "Print (Sum)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "Sun = D\nnumber = input ()\nfor i in number :\n    Sun + = int (i)\nPrint (Sum)\n", "ir_algo_output_indented_lines": [{"x": 268.0, "y": 249.0, "w": 782.0, "h": 144.0, "line_num": 1, "text": "Sun = D", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 241.0, "y": 510.0, "w": 1954.0, "h": 197.0, "line_num": 2, "text": "number = input ()", "delta": -27.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 214.0, "y": 861.0, "w": 2085.0, "h": 276.0, "line_num": 3, "text": "for i in number :", "delta": -27.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 831.0, "y": 1226.0, "w": 1590.0, "h": 190.0, "line_num": 4, "text": "Sun + = int (i)", "delta": 617.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 234.0, "y": 1619.0, "w": 1304.0, "h": 297.0, "line_num": 5, "text": "Print (Sum)", "delta": -597.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 11, "prompting_method": "simple-test2", "lm_post_processed_code": "Sum = 0\nnumber = input()\nfor i in number:\n    Sum += int(i)\nprint(Sum)\n", "lm_post_processed_edit_distance": 4}, {"image_id": 30, "image_height": 2447, "image_width": 2798, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 268.0, "y": 249.0, "w": 782.0, "h": 144.0, "line_num": 1, "text": "Sun = D"}, {"x": 241.0, "y": 510.0, "w": 1954.0, "h": 197.0, "line_num": 2, "text": "number = input ()"}, {"x": 214.0, "y": 861.0, "w": 2085.0, "h": 276.0, "line_num": 3, "text": "for i in number :"}, {"x": 831.0, "y": 1226.0, "w": 1590.0, "h": 190.0, "line_num": 4, "text": "Sun + = int (i)"}, {"x": 234.0, "y": 1619.0, "w": 1304.0, "h": 297.0, "line_num": 5, "text": "Print (Sum)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "Sun = D\nnumber = input ()\nfor i in number :\n    Sun + = int (i)\nPrint (Sum)\n", "ir_algo_output_indented_lines": [{"x": 268.0, "y": 249.0, "w": 782.0, "h": 144.0, "line_num": 1, "text": "Sun = D", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 241.0, "y": 510.0, "w": 1954.0, "h": 197.0, "line_num": 2, "text": "number = input ()", "delta": -27.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 214.0, "y": 861.0, "w": 2085.0, "h": 276.0, "line_num": 3, "text": "for i in number :", "delta": -27.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 831.0, "y": 1226.0, "w": 1590.0, "h": 190.0, "line_num": 4, "text": "Sun + = int (i)", "delta": 617.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 234.0, "y": 1619.0, "w": 1304.0, "h": 297.0, "line_num": 5, "text": "Print (Sum)", "delta": -597.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 11, "prompting_method": "simple-test3", "lm_post_processed_code": "Sum = 0\nnumber = input()\nfor i in number:\n    Sum += int(i)\nprint(Sum)\n", "lm_post_processed_edit_distance": 4}, {"image_id": 31, "image_height": 2096, "image_width": 2957, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 138.0, "y": 216.0, "w": 1396.0, "h": 210.0, "line_num": 1, "text": "def factorial (n) :"}, {"x": 541.0, "y": 490.0, "w": 809.0, "h": 157.0, "line_num": 2, "text": "if n <= 1 :"}, {"x": 830.0, "y": 697.0, "w": 585.0, "h": 128.0, "line_num": 3, "text": "Return 1"}, {"x": 578.0, "y": 897.0, "w": 318.0, "h": 123.0, "line_num": 4, "text": "else :"}, {"x": 884.0, "y": 995.0, "w": 1802.0, "h": 145.0, "line_num": 5, "text": "Return factorial (n-1) * h"}, {"x": 146.0, "y": 1428.0, "w": 1924.0, "h": 171.0, "line_num": 6, "text": "Print (factorial (int (input ())))"}], "ir_algo_name": "none", "ir_algo_output_code": "def factorial (n) :\nif n <= 1 :\nReturn 1\nelse :\nReturn factorial (n-1) * h\nPrint (factorial (int (input ())))", "ir_algo_output_edit_distance": 40, "prompting_method": "none", "lm_post_processed_code": "def factorial (n) :\nif n <= 1 :\nReturn 1\nelse :\nReturn factorial (n-1) * h\nPrint (factorial (int (input ())))", "lm_post_processed_edit_distance": 40}, {"image_id": 31, "image_height": 2096, "image_width": 2957, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 138.0, "y": 216.0, "w": 1396.0, "h": 210.0, "line_num": 1, "text": "def factorial (n) :"}, {"x": 541.0, "y": 490.0, "w": 809.0, "h": 157.0, "line_num": 2, "text": "if n <= 1 :"}, {"x": 830.0, "y": 697.0, "w": 585.0, "h": 128.0, "line_num": 3, "text": "Return 1"}, {"x": 578.0, "y": 897.0, "w": 318.0, "h": 123.0, "line_num": 4, "text": "else :"}, {"x": 884.0, "y": 995.0, "w": 1802.0, "h": 145.0, "line_num": 5, "text": "Return factorial (n-1) * h"}, {"x": 146.0, "y": 1428.0, "w": 1924.0, "h": 171.0, "line_num": 6, "text": "Print (factorial (int (input ())))"}], "ir_algo_name": "none", "ir_algo_output_code": "def factorial (n) :\nif n <= 1 :\nReturn 1\nelse :\nReturn factorial (n-1) * h\nPrint (factorial (int (input ())))", "ir_algo_output_edit_distance": 40, "prompting_method": "cot-test1", "lm_post_processed_code": "def factorial(n):\nif n <= 1:\nreturn 1\nelse:\nreturn factorial(n-1) * h\nprint(factorial(int(input())))\n", "lm_post_processed_edit_distance": 27}, {"image_id": 31, "image_height": 2096, "image_width": 2957, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 138.0, "y": 216.0, "w": 1396.0, "h": 210.0, "line_num": 1, "text": "def factorial (n) :"}, {"x": 541.0, "y": 490.0, "w": 809.0, "h": 157.0, "line_num": 2, "text": "if n <= 1 :"}, {"x": 830.0, "y": 697.0, "w": 585.0, "h": 128.0, "line_num": 3, "text": "Return 1"}, {"x": 578.0, "y": 897.0, "w": 318.0, "h": 123.0, "line_num": 4, "text": "else :"}, {"x": 884.0, "y": 995.0, "w": 1802.0, "h": 145.0, "line_num": 5, "text": "Return factorial (n-1) * h"}, {"x": 146.0, "y": 1428.0, "w": 1924.0, "h": 171.0, "line_num": 6, "text": "Print (factorial (int (input ())))"}], "ir_algo_name": "none", "ir_algo_output_code": "def factorial (n) :\nif n <= 1 :\nReturn 1\nelse :\nReturn factorial (n-1) * h\nPrint (factorial (int (input ())))", "ir_algo_output_edit_distance": 40, "prompting_method": "cot-test5", "lm_post_processed_code": "def factorial(n):\nif n <= 1:\nreturn 1\nelse:\nreturn factorial(n-1) * h\nprint(factorial(int(input())))\n", "lm_post_processed_edit_distance": 27}, {"image_id": 31, "image_height": 2096, "image_width": 2957, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 138.0, "y": 216.0, "w": 1396.0, "h": 210.0, "line_num": 1, "text": "def factorial (n) :"}, {"x": 541.0, "y": 490.0, "w": 809.0, "h": 157.0, "line_num": 2, "text": "if n <= 1 :"}, {"x": 830.0, "y": 697.0, "w": 585.0, "h": 128.0, "line_num": 3, "text": "Return 1"}, {"x": 578.0, "y": 897.0, "w": 318.0, "h": 123.0, "line_num": 4, "text": "else :"}, {"x": 884.0, "y": 995.0, "w": 1802.0, "h": 145.0, "line_num": 5, "text": "Return factorial (n-1) * h"}, {"x": 146.0, "y": 1428.0, "w": 1924.0, "h": 171.0, "line_num": 6, "text": "Print (factorial (int (input ())))"}], "ir_algo_name": "none", "ir_algo_output_code": "def factorial (n) :\nif n <= 1 :\nReturn 1\nelse :\nReturn factorial (n-1) * h\nPrint (factorial (int (input ())))", "ir_algo_output_edit_distance": 40, "prompting_method": "simple-test2", "lm_post_processed_code": "def factorial(n):\nif n <= 1:\nreturn 1\nelse:\nreturn factorial(n-1) * n\nprint(factorial(int(input())))\n", "lm_post_processed_edit_distance": 26}, {"image_id": 31, "image_height": 2096, "image_width": 2957, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 138.0, "y": 216.0, "w": 1396.0, "h": 210.0, "line_num": 1, "text": "def factorial (n) :"}, {"x": 541.0, "y": 490.0, "w": 809.0, "h": 157.0, "line_num": 2, "text": "if n <= 1 :"}, {"x": 830.0, "y": 697.0, "w": 585.0, "h": 128.0, "line_num": 3, "text": "Return 1"}, {"x": 578.0, "y": 897.0, "w": 318.0, "h": 123.0, "line_num": 4, "text": "else :"}, {"x": 884.0, "y": 995.0, "w": 1802.0, "h": 145.0, "line_num": 5, "text": "Return factorial (n-1) * h"}, {"x": 146.0, "y": 1428.0, "w": 1924.0, "h": 171.0, "line_num": 6, "text": "Print (factorial (int (input ())))"}], "ir_algo_name": "none", "ir_algo_output_code": "def factorial (n) :\nif n <= 1 :\nReturn 1\nelse :\nReturn factorial (n-1) * h\nPrint (factorial (int (input ())))", "ir_algo_output_edit_distance": 40, "prompting_method": "simple-test3", "lm_post_processed_code": "def factorial(n):\nif n <= 1:\nreturn 1\nelse:\nreturn factorial(n-1) * n\nprint(factorial(int(input())))\n", "lm_post_processed_edit_distance": 26}, {"image_id": 31, "image_height": 2096, "image_width": 2957, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 138.0, "y": 216.0, "w": 1396.0, "h": 210.0, "line_num": 1, "text": "def factorial (n) :"}, {"x": 541.0, "y": 490.0, "w": 809.0, "h": 157.0, "line_num": 2, "text": "if n <= 1 :"}, {"x": 830.0, "y": 697.0, "w": 585.0, "h": 128.0, "line_num": 3, "text": "Return 1"}, {"x": 578.0, "y": 897.0, "w": 318.0, "h": 123.0, "line_num": 4, "text": "else :"}, {"x": 884.0, "y": 995.0, "w": 1802.0, "h": 145.0, "line_num": 5, "text": "Return factorial (n-1) * h"}, {"x": 146.0, "y": 1428.0, "w": 1924.0, "h": 171.0, "line_num": 6, "text": "Print (factorial (int (input ())))"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 233.5, "ir_algo_output_code": "def factorial (n) :\n    if n <= 1 :\n        Return 1\n    else :\n        Return factorial (n-1) * h\nPrint (factorial (int (input ())))\n", "ir_algo_output_indented_lines": [{"x": 138.0, "y": 216.0, "w": 1396.0, "h": 210.0, "line_num": 1, "text": "def factorial (n) :", "cluster_label": 2, "indentation": 0}, {"x": 541.0, "y": 490.0, "w": 809.0, "h": 157.0, "line_num": 2, "text": "if n <= 1 :", "cluster_label": 1, "indentation": 1}, {"x": 830.0, "y": 697.0, "w": 585.0, "h": 128.0, "line_num": 3, "text": "Return 1", "cluster_label": 0, "indentation": 2}, {"x": 578.0, "y": 897.0, "w": 318.0, "h": 123.0, "line_num": 4, "text": "else :", "cluster_label": 1, "indentation": 1}, {"x": 884.0, "y": 995.0, "w": 1802.0, "h": 145.0, "line_num": 5, "text": "Return factorial (n-1) * h", "cluster_label": 0, "indentation": 2}, {"x": 146.0, "y": 1428.0, "w": 1924.0, "h": 171.0, "line_num": 6, "text": "Print (factorial (int (input ())))", "cluster_label": 2, "indentation": 0}], "ir_algo_output_edit_distance": 15, "prompting_method": "none", "lm_post_processed_code": "def factorial (n) :\n    if n <= 1 :\n        Return 1\n    else :\n        Return factorial (n-1) * h\nPrint (factorial (int (input ())))\n", "lm_post_processed_edit_distance": 15}, {"image_id": 31, "image_height": 2096, "image_width": 2957, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 138.0, "y": 216.0, "w": 1396.0, "h": 210.0, "line_num": 1, "text": "def factorial (n) :"}, {"x": 541.0, "y": 490.0, "w": 809.0, "h": 157.0, "line_num": 2, "text": "if n <= 1 :"}, {"x": 830.0, "y": 697.0, "w": 585.0, "h": 128.0, "line_num": 3, "text": "Return 1"}, {"x": 578.0, "y": 897.0, "w": 318.0, "h": 123.0, "line_num": 4, "text": "else :"}, {"x": 884.0, "y": 995.0, "w": 1802.0, "h": 145.0, "line_num": 5, "text": "Return factorial (n-1) * h"}, {"x": 146.0, "y": 1428.0, "w": 1924.0, "h": 171.0, "line_num": 6, "text": "Print (factorial (int (input ())))"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 233.5, "ir_algo_output_code": "def factorial (n) :\n    if n <= 1 :\n        Return 1\n    else :\n        Return factorial (n-1) * h\nPrint (factorial (int (input ())))\n", "ir_algo_output_indented_lines": [{"x": 138.0, "y": 216.0, "w": 1396.0, "h": 210.0, "line_num": 1, "text": "def factorial (n) :", "cluster_label": 2, "indentation": 0}, {"x": 541.0, "y": 490.0, "w": 809.0, "h": 157.0, "line_num": 2, "text": "if n <= 1 :", "cluster_label": 1, "indentation": 1}, {"x": 830.0, "y": 697.0, "w": 585.0, "h": 128.0, "line_num": 3, "text": "Return 1", "cluster_label": 0, "indentation": 2}, {"x": 578.0, "y": 897.0, "w": 318.0, "h": 123.0, "line_num": 4, "text": "else :", "cluster_label": 1, "indentation": 1}, {"x": 884.0, "y": 995.0, "w": 1802.0, "h": 145.0, "line_num": 5, "text": "Return factorial (n-1) * h", "cluster_label": 0, "indentation": 2}, {"x": 146.0, "y": 1428.0, "w": 1924.0, "h": 171.0, "line_num": 6, "text": "Print (factorial (int (input ())))", "cluster_label": 2, "indentation": 0}], "ir_algo_output_edit_distance": 15, "prompting_method": "cot-test1", "lm_post_processed_code": "def factorial (n) :\n    if n <= 1 :\n        return 1\n    else :\n        return factorial (n-1) * h\nprint (factorial (int (input ())))\n", "lm_post_processed_edit_distance": 12}, {"image_id": 31, "image_height": 2096, "image_width": 2957, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 138.0, "y": 216.0, "w": 1396.0, "h": 210.0, "line_num": 1, "text": "def factorial (n) :"}, {"x": 541.0, "y": 490.0, "w": 809.0, "h": 157.0, "line_num": 2, "text": "if n <= 1 :"}, {"x": 830.0, "y": 697.0, "w": 585.0, "h": 128.0, "line_num": 3, "text": "Return 1"}, {"x": 578.0, "y": 897.0, "w": 318.0, "h": 123.0, "line_num": 4, "text": "else :"}, {"x": 884.0, "y": 995.0, "w": 1802.0, "h": 145.0, "line_num": 5, "text": "Return factorial (n-1) * h"}, {"x": 146.0, "y": 1428.0, "w": 1924.0, "h": 171.0, "line_num": 6, "text": "Print (factorial (int (input ())))"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 233.5, "ir_algo_output_code": "def factorial (n) :\n    if n <= 1 :\n        Return 1\n    else :\n        Return factorial (n-1) * h\nPrint (factorial (int (input ())))\n", "ir_algo_output_indented_lines": [{"x": 138.0, "y": 216.0, "w": 1396.0, "h": 210.0, "line_num": 1, "text": "def factorial (n) :", "cluster_label": 2, "indentation": 0}, {"x": 541.0, "y": 490.0, "w": 809.0, "h": 157.0, "line_num": 2, "text": "if n <= 1 :", "cluster_label": 1, "indentation": 1}, {"x": 830.0, "y": 697.0, "w": 585.0, "h": 128.0, "line_num": 3, "text": "Return 1", "cluster_label": 0, "indentation": 2}, {"x": 578.0, "y": 897.0, "w": 318.0, "h": 123.0, "line_num": 4, "text": "else :", "cluster_label": 1, "indentation": 1}, {"x": 884.0, "y": 995.0, "w": 1802.0, "h": 145.0, "line_num": 5, "text": "Return factorial (n-1) * h", "cluster_label": 0, "indentation": 2}, {"x": 146.0, "y": 1428.0, "w": 1924.0, "h": 171.0, "line_num": 6, "text": "Print (factorial (int (input ())))", "cluster_label": 2, "indentation": 0}], "ir_algo_output_edit_distance": 15, "prompting_method": "cot-test5", "lm_post_processed_code": "def factorial (n) :\n    if n <= 1 :\n        return 1\n    else :\n        return factorial (n-1) * h\nprint (factorial (int (input ())))\n", "lm_post_processed_edit_distance": 12}, {"image_id": 31, "image_height": 2096, "image_width": 2957, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 138.0, "y": 216.0, "w": 1396.0, "h": 210.0, "line_num": 1, "text": "def factorial (n) :"}, {"x": 541.0, "y": 490.0, "w": 809.0, "h": 157.0, "line_num": 2, "text": "if n <= 1 :"}, {"x": 830.0, "y": 697.0, "w": 585.0, "h": 128.0, "line_num": 3, "text": "Return 1"}, {"x": 578.0, "y": 897.0, "w": 318.0, "h": 123.0, "line_num": 4, "text": "else :"}, {"x": 884.0, "y": 995.0, "w": 1802.0, "h": 145.0, "line_num": 5, "text": "Return factorial (n-1) * h"}, {"x": 146.0, "y": 1428.0, "w": 1924.0, "h": 171.0, "line_num": 6, "text": "Print (factorial (int (input ())))"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 233.5, "ir_algo_output_code": "def factorial (n) :\n    if n <= 1 :\n        Return 1\n    else :\n        Return factorial (n-1) * h\nPrint (factorial (int (input ())))\n", "ir_algo_output_indented_lines": [{"x": 138.0, "y": 216.0, "w": 1396.0, "h": 210.0, "line_num": 1, "text": "def factorial (n) :", "cluster_label": 2, "indentation": 0}, {"x": 541.0, "y": 490.0, "w": 809.0, "h": 157.0, "line_num": 2, "text": "if n <= 1 :", "cluster_label": 1, "indentation": 1}, {"x": 830.0, "y": 697.0, "w": 585.0, "h": 128.0, "line_num": 3, "text": "Return 1", "cluster_label": 0, "indentation": 2}, {"x": 578.0, "y": 897.0, "w": 318.0, "h": 123.0, "line_num": 4, "text": "else :", "cluster_label": 1, "indentation": 1}, {"x": 884.0, "y": 995.0, "w": 1802.0, "h": 145.0, "line_num": 5, "text": "Return factorial (n-1) * h", "cluster_label": 0, "indentation": 2}, {"x": 146.0, "y": 1428.0, "w": 1924.0, "h": 171.0, "line_num": 6, "text": "Print (factorial (int (input ())))", "cluster_label": 2, "indentation": 0}], "ir_algo_output_edit_distance": 15, "prompting_method": "simple-test2", "lm_post_processed_code": "def factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return factorial(n-1) * n\nprint(factorial(int(input())))\n", "lm_post_processed_edit_distance": 2}, {"image_id": 31, "image_height": 2096, "image_width": 2957, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 138.0, "y": 216.0, "w": 1396.0, "h": 210.0, "line_num": 1, "text": "def factorial (n) :"}, {"x": 541.0, "y": 490.0, "w": 809.0, "h": 157.0, "line_num": 2, "text": "if n <= 1 :"}, {"x": 830.0, "y": 697.0, "w": 585.0, "h": 128.0, "line_num": 3, "text": "Return 1"}, {"x": 578.0, "y": 897.0, "w": 318.0, "h": 123.0, "line_num": 4, "text": "else :"}, {"x": 884.0, "y": 995.0, "w": 1802.0, "h": 145.0, "line_num": 5, "text": "Return factorial (n-1) * h"}, {"x": 146.0, "y": 1428.0, "w": 1924.0, "h": 171.0, "line_num": 6, "text": "Print (factorial (int (input ())))"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 233.5, "ir_algo_output_code": "def factorial (n) :\n    if n <= 1 :\n        Return 1\n    else :\n        Return factorial (n-1) * h\nPrint (factorial (int (input ())))\n", "ir_algo_output_indented_lines": [{"x": 138.0, "y": 216.0, "w": 1396.0, "h": 210.0, "line_num": 1, "text": "def factorial (n) :", "cluster_label": 2, "indentation": 0}, {"x": 541.0, "y": 490.0, "w": 809.0, "h": 157.0, "line_num": 2, "text": "if n <= 1 :", "cluster_label": 1, "indentation": 1}, {"x": 830.0, "y": 697.0, "w": 585.0, "h": 128.0, "line_num": 3, "text": "Return 1", "cluster_label": 0, "indentation": 2}, {"x": 578.0, "y": 897.0, "w": 318.0, "h": 123.0, "line_num": 4, "text": "else :", "cluster_label": 1, "indentation": 1}, {"x": 884.0, "y": 995.0, "w": 1802.0, "h": 145.0, "line_num": 5, "text": "Return factorial (n-1) * h", "cluster_label": 0, "indentation": 2}, {"x": 146.0, "y": 1428.0, "w": 1924.0, "h": 171.0, "line_num": 6, "text": "Print (factorial (int (input ())))", "cluster_label": 2, "indentation": 0}], "ir_algo_output_edit_distance": 15, "prompting_method": "simple-test3", "lm_post_processed_code": "def factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return factorial(n-1) * n\nprint(factorial(int(input())))\n", "lm_post_processed_edit_distance": 2}, {"image_id": 31, "image_height": 2096, "image_width": 2957, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 138.0, "y": 216.0, "w": 1396.0, "h": 210.0, "line_num": 1, "text": "def factorial (n) :"}, {"x": 541.0, "y": 490.0, "w": 809.0, "h": 157.0, "line_num": 2, "text": "if n <= 1 :"}, {"x": 830.0, "y": 697.0, "w": 585.0, "h": 128.0, "line_num": 3, "text": "Return 1"}, {"x": 578.0, "y": 897.0, "w": 318.0, "h": 123.0, "line_num": 4, "text": "else :"}, {"x": 884.0, "y": 995.0, "w": 1802.0, "h": 145.0, "line_num": 5, "text": "Return factorial (n-1) * h"}, {"x": 146.0, "y": 1428.0, "w": 1924.0, "h": 171.0, "line_num": 6, "text": "Print (factorial (int (input ())))"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def factorial (n) :\n    if n <= 1 :\n        Return 1\n    else :\n        Return factorial (n-1) * h\nPrint (factorial (int (input ())))\n", "ir_algo_output_indented_lines": [{"x": 138.0, "y": 216.0, "w": 1396.0, "h": 210.0, "line_num": 1, "text": "def factorial (n) :", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 541.0, "y": 490.0, "w": 809.0, "h": 157.0, "line_num": 2, "text": "if n <= 1 :", "delta": 403.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 830.0, "y": 697.0, "w": 585.0, "h": 128.0, "line_num": 3, "text": "Return 1", "delta": 289.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 578.0, "y": 897.0, "w": 318.0, "h": 123.0, "line_num": 4, "text": "else :", "delta": -252.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 884.0, "y": 995.0, "w": 1802.0, "h": 145.0, "line_num": 5, "text": "Return factorial (n-1) * h", "delta": 306.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 146.0, "y": 1428.0, "w": 1924.0, "h": 171.0, "line_num": 6, "text": "Print (factorial (int (input ())))", "delta": -738.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 15, "prompting_method": "none", "lm_post_processed_code": "def factorial (n) :\n    if n <= 1 :\n        Return 1\n    else :\n        Return factorial (n-1) * h\nPrint (factorial (int (input ())))\n", "lm_post_processed_edit_distance": 15}, {"image_id": 31, "image_height": 2096, "image_width": 2957, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 138.0, "y": 216.0, "w": 1396.0, "h": 210.0, "line_num": 1, "text": "def factorial (n) :"}, {"x": 541.0, "y": 490.0, "w": 809.0, "h": 157.0, "line_num": 2, "text": "if n <= 1 :"}, {"x": 830.0, "y": 697.0, "w": 585.0, "h": 128.0, "line_num": 3, "text": "Return 1"}, {"x": 578.0, "y": 897.0, "w": 318.0, "h": 123.0, "line_num": 4, "text": "else :"}, {"x": 884.0, "y": 995.0, "w": 1802.0, "h": 145.0, "line_num": 5, "text": "Return factorial (n-1) * h"}, {"x": 146.0, "y": 1428.0, "w": 1924.0, "h": 171.0, "line_num": 6, "text": "Print (factorial (int (input ())))"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def factorial (n) :\n    if n <= 1 :\n        Return 1\n    else :\n        Return factorial (n-1) * h\nPrint (factorial (int (input ())))\n", "ir_algo_output_indented_lines": [{"x": 138.0, "y": 216.0, "w": 1396.0, "h": 210.0, "line_num": 1, "text": "def factorial (n) :", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 541.0, "y": 490.0, "w": 809.0, "h": 157.0, "line_num": 2, "text": "if n <= 1 :", "delta": 403.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 830.0, "y": 697.0, "w": 585.0, "h": 128.0, "line_num": 3, "text": "Return 1", "delta": 289.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 578.0, "y": 897.0, "w": 318.0, "h": 123.0, "line_num": 4, "text": "else :", "delta": -252.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 884.0, "y": 995.0, "w": 1802.0, "h": 145.0, "line_num": 5, "text": "Return factorial (n-1) * h", "delta": 306.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 146.0, "y": 1428.0, "w": 1924.0, "h": 171.0, "line_num": 6, "text": "Print (factorial (int (input ())))", "delta": -738.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 15, "prompting_method": "cot-test1", "lm_post_processed_code": "def factorial (n) :\n    if n <= 1 :\n        return 1\n    else :\n        return factorial (n-1) * h\nprint (factorial (int (input ())))\n", "lm_post_processed_edit_distance": 12}, {"image_id": 31, "image_height": 2096, "image_width": 2957, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 138.0, "y": 216.0, "w": 1396.0, "h": 210.0, "line_num": 1, "text": "def factorial (n) :"}, {"x": 541.0, "y": 490.0, "w": 809.0, "h": 157.0, "line_num": 2, "text": "if n <= 1 :"}, {"x": 830.0, "y": 697.0, "w": 585.0, "h": 128.0, "line_num": 3, "text": "Return 1"}, {"x": 578.0, "y": 897.0, "w": 318.0, "h": 123.0, "line_num": 4, "text": "else :"}, {"x": 884.0, "y": 995.0, "w": 1802.0, "h": 145.0, "line_num": 5, "text": "Return factorial (n-1) * h"}, {"x": 146.0, "y": 1428.0, "w": 1924.0, "h": 171.0, "line_num": 6, "text": "Print (factorial (int (input ())))"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def factorial (n) :\n    if n <= 1 :\n        Return 1\n    else :\n        Return factorial (n-1) * h\nPrint (factorial (int (input ())))\n", "ir_algo_output_indented_lines": [{"x": 138.0, "y": 216.0, "w": 1396.0, "h": 210.0, "line_num": 1, "text": "def factorial (n) :", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 541.0, "y": 490.0, "w": 809.0, "h": 157.0, "line_num": 2, "text": "if n <= 1 :", "delta": 403.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 830.0, "y": 697.0, "w": 585.0, "h": 128.0, "line_num": 3, "text": "Return 1", "delta": 289.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 578.0, "y": 897.0, "w": 318.0, "h": 123.0, "line_num": 4, "text": "else :", "delta": -252.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 884.0, "y": 995.0, "w": 1802.0, "h": 145.0, "line_num": 5, "text": "Return factorial (n-1) * h", "delta": 306.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 146.0, "y": 1428.0, "w": 1924.0, "h": 171.0, "line_num": 6, "text": "Print (factorial (int (input ())))", "delta": -738.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 15, "prompting_method": "cot-test5", "lm_post_processed_code": "def factorial (n) :\n    if n <= 1 :\n        return 1\n    else :\n        return factorial (n-1) * h\nprint (factorial (int (input ())))\n", "lm_post_processed_edit_distance": 12}, {"image_id": 31, "image_height": 2096, "image_width": 2957, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 138.0, "y": 216.0, "w": 1396.0, "h": 210.0, "line_num": 1, "text": "def factorial (n) :"}, {"x": 541.0, "y": 490.0, "w": 809.0, "h": 157.0, "line_num": 2, "text": "if n <= 1 :"}, {"x": 830.0, "y": 697.0, "w": 585.0, "h": 128.0, "line_num": 3, "text": "Return 1"}, {"x": 578.0, "y": 897.0, "w": 318.0, "h": 123.0, "line_num": 4, "text": "else :"}, {"x": 884.0, "y": 995.0, "w": 1802.0, "h": 145.0, "line_num": 5, "text": "Return factorial (n-1) * h"}, {"x": 146.0, "y": 1428.0, "w": 1924.0, "h": 171.0, "line_num": 6, "text": "Print (factorial (int (input ())))"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def factorial (n) :\n    if n <= 1 :\n        Return 1\n    else :\n        Return factorial (n-1) * h\nPrint (factorial (int (input ())))\n", "ir_algo_output_indented_lines": [{"x": 138.0, "y": 216.0, "w": 1396.0, "h": 210.0, "line_num": 1, "text": "def factorial (n) :", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 541.0, "y": 490.0, "w": 809.0, "h": 157.0, "line_num": 2, "text": "if n <= 1 :", "delta": 403.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 830.0, "y": 697.0, "w": 585.0, "h": 128.0, "line_num": 3, "text": "Return 1", "delta": 289.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 578.0, "y": 897.0, "w": 318.0, "h": 123.0, "line_num": 4, "text": "else :", "delta": -252.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 884.0, "y": 995.0, "w": 1802.0, "h": 145.0, "line_num": 5, "text": "Return factorial (n-1) * h", "delta": 306.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 146.0, "y": 1428.0, "w": 1924.0, "h": 171.0, "line_num": 6, "text": "Print (factorial (int (input ())))", "delta": -738.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 15, "prompting_method": "simple-test2", "lm_post_processed_code": "def factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return factorial(n-1) * n\nprint(factorial(int(input())))\n", "lm_post_processed_edit_distance": 2}, {"image_id": 31, "image_height": 2096, "image_width": 2957, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 138.0, "y": 216.0, "w": 1396.0, "h": 210.0, "line_num": 1, "text": "def factorial (n) :"}, {"x": 541.0, "y": 490.0, "w": 809.0, "h": 157.0, "line_num": 2, "text": "if n <= 1 :"}, {"x": 830.0, "y": 697.0, "w": 585.0, "h": 128.0, "line_num": 3, "text": "Return 1"}, {"x": 578.0, "y": 897.0, "w": 318.0, "h": 123.0, "line_num": 4, "text": "else :"}, {"x": 884.0, "y": 995.0, "w": 1802.0, "h": 145.0, "line_num": 5, "text": "Return factorial (n-1) * h"}, {"x": 146.0, "y": 1428.0, "w": 1924.0, "h": 171.0, "line_num": 6, "text": "Print (factorial (int (input ())))"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def factorial (n) :\n    if n <= 1 :\n        Return 1\n    else :\n        Return factorial (n-1) * h\nPrint (factorial (int (input ())))\n", "ir_algo_output_indented_lines": [{"x": 138.0, "y": 216.0, "w": 1396.0, "h": 210.0, "line_num": 1, "text": "def factorial (n) :", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 541.0, "y": 490.0, "w": 809.0, "h": 157.0, "line_num": 2, "text": "if n <= 1 :", "delta": 403.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 830.0, "y": 697.0, "w": 585.0, "h": 128.0, "line_num": 3, "text": "Return 1", "delta": 289.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 578.0, "y": 897.0, "w": 318.0, "h": 123.0, "line_num": 4, "text": "else :", "delta": -252.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 884.0, "y": 995.0, "w": 1802.0, "h": 145.0, "line_num": 5, "text": "Return factorial (n-1) * h", "delta": 306.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 146.0, "y": 1428.0, "w": 1924.0, "h": 171.0, "line_num": 6, "text": "Print (factorial (int (input ())))", "delta": -738.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 15, "prompting_method": "simple-test3", "lm_post_processed_code": "def factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return factorial(n-1) * n\nprint(factorial(int(input())))\n", "lm_post_processed_edit_distance": 2}, {"image_id": 33, "image_height": 1602, "image_width": 2962, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 189.0, "y": 165.0, "w": 1167.0, "h": 155.0, "line_num": 1, "text": "Word = input ()"}, {"x": 199.0, "y": 582.0, "w": 2650.0, "h": 142.0, "line_num": 2, "text": "Word = \"1\". join ([ i for i in word[ -]"}, {"x": 223.0, "y": 937.0, "w": 781.0, "h": 196.0, "line_num": 3, "text": "Print (Word)"}], "ir_algo_name": "none", "ir_algo_output_code": "Word = input ()\nWord = \"1\". join ([ i for i in word[ -]\nPrint (Word)", "ir_algo_output_edit_distance": 12, "prompting_method": "none", "lm_post_processed_code": "Word = input ()\nWord = \"1\". join ([ i for i in word[ -]\nPrint (Word)", "lm_post_processed_edit_distance": 12}, {"image_id": 33, "image_height": 1602, "image_width": 2962, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 189.0, "y": 165.0, "w": 1167.0, "h": 155.0, "line_num": 1, "text": "Word = input ()"}, {"x": 199.0, "y": 582.0, "w": 2650.0, "h": 142.0, "line_num": 2, "text": "Word = \"1\". join ([ i for i in word[ -]"}, {"x": 223.0, "y": 937.0, "w": 781.0, "h": 196.0, "line_num": 3, "text": "Print (Word)"}], "ir_algo_name": "none", "ir_algo_output_code": "Word = input ()\nWord = \"1\". join ([ i for i in word[ -]\nPrint (Word)", "ir_algo_output_edit_distance": 12, "prompting_method": "cot-test1", "lm_post_processed_code": "word = input()\nword = \"1\".join([ i for i in word[ -1]])\nprint (word)\n", "lm_post_processed_edit_distance": 9}, {"image_id": 33, "image_height": 1602, "image_width": 2962, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 189.0, "y": 165.0, "w": 1167.0, "h": 155.0, "line_num": 1, "text": "Word = input ()"}, {"x": 199.0, "y": 582.0, "w": 2650.0, "h": 142.0, "line_num": 2, "text": "Word = \"1\". join ([ i for i in word[ -]"}, {"x": 223.0, "y": 937.0, "w": 781.0, "h": 196.0, "line_num": 3, "text": "Print (Word)"}], "ir_algo_name": "none", "ir_algo_output_code": "Word = input ()\nWord = \"1\". join ([ i for i in word[ -]\nPrint (Word)", "ir_algo_output_edit_distance": 12, "prompting_method": "cot-test5", "lm_post_processed_code": "word = input()\nword = \"1\".join([i for i in word[-1]])\nprint(word)\n", "lm_post_processed_edit_distance": 7}, {"image_id": 33, "image_height": 1602, "image_width": 2962, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 189.0, "y": 165.0, "w": 1167.0, "h": 155.0, "line_num": 1, "text": "Word = input ()"}, {"x": 199.0, "y": 582.0, "w": 2650.0, "h": 142.0, "line_num": 2, "text": "Word = \"1\". join ([ i for i in word[ -]"}, {"x": 223.0, "y": 937.0, "w": 781.0, "h": 196.0, "line_num": 3, "text": "Print (Word)"}], "ir_algo_name": "none", "ir_algo_output_code": "Word = input ()\nWord = \"1\". join ([ i for i in word[ -]\nPrint (Word)", "ir_algo_output_edit_distance": 12, "prompting_method": "simple-test2", "lm_post_processed_code": "word = input()\nword = \"1\".join([i for i in word])\nprint(word)\n", "lm_post_processed_edit_distance": 11}, {"image_id": 33, "image_height": 1602, "image_width": 2962, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 189.0, "y": 165.0, "w": 1167.0, "h": 155.0, "line_num": 1, "text": "Word = input ()"}, {"x": 199.0, "y": 582.0, "w": 2650.0, "h": 142.0, "line_num": 2, "text": "Word = \"1\". join ([ i for i in word[ -]"}, {"x": 223.0, "y": 937.0, "w": 781.0, "h": 196.0, "line_num": 3, "text": "Print (Word)"}], "ir_algo_name": "none", "ir_algo_output_code": "Word = input ()\nWord = \"1\". join ([ i for i in word[ -]\nPrint (Word)", "ir_algo_output_edit_distance": 12, "prompting_method": "simple-test3", "lm_post_processed_code": "word = input()\nword = \"1\".join([i for i in word])\nprint(word)\n", "lm_post_processed_edit_distance": 11}, {"image_id": 33, "image_height": 1602, "image_width": 2962, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 189.0, "y": 165.0, "w": 1167.0, "h": 155.0, "line_num": 1, "text": "Word = input ()"}, {"x": 199.0, "y": 582.0, "w": 2650.0, "h": 142.0, "line_num": 2, "text": "Word = \"1\". join ([ i for i in word[ -]"}, {"x": 223.0, "y": 937.0, "w": 781.0, "h": 196.0, "line_num": 3, "text": "Print (Word)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 246.5, "ir_algo_output_code": "Word = input ()\nWord = \"1\". join ([ i for i in word[ -]\nPrint (Word)\n", "ir_algo_output_indented_lines": [{"x": 189.0, "y": 165.0, "w": 1167.0, "h": 155.0, "line_num": 1, "text": "Word = input ()", "cluster_label": 0, "indentation": 0}, {"x": 199.0, "y": 582.0, "w": 2650.0, "h": 142.0, "line_num": 2, "text": "Word = \"1\". join ([ i for i in word[ -]", "cluster_label": 0, "indentation": 0}, {"x": 223.0, "y": 937.0, "w": 781.0, "h": 196.0, "line_num": 3, "text": "Print (Word)", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 11, "prompting_method": "none", "lm_post_processed_code": "Word = input ()\nWord = \"1\". join ([ i for i in word[ -]\nPrint (Word)\n", "lm_post_processed_edit_distance": 11}, {"image_id": 33, "image_height": 1602, "image_width": 2962, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 189.0, "y": 165.0, "w": 1167.0, "h": 155.0, "line_num": 1, "text": "Word = input ()"}, {"x": 199.0, "y": 582.0, "w": 2650.0, "h": 142.0, "line_num": 2, "text": "Word = \"1\". join ([ i for i in word[ -]"}, {"x": 223.0, "y": 937.0, "w": 781.0, "h": 196.0, "line_num": 3, "text": "Print (Word)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 246.5, "ir_algo_output_code": "Word = input ()\nWord = \"1\". join ([ i for i in word[ -]\nPrint (Word)\n", "ir_algo_output_indented_lines": [{"x": 189.0, "y": 165.0, "w": 1167.0, "h": 155.0, "line_num": 1, "text": "Word = input ()", "cluster_label": 0, "indentation": 0}, {"x": 199.0, "y": 582.0, "w": 2650.0, "h": 142.0, "line_num": 2, "text": "Word = \"1\". join ([ i for i in word[ -]", "cluster_label": 0, "indentation": 0}, {"x": 223.0, "y": 937.0, "w": 781.0, "h": 196.0, "line_num": 3, "text": "Print (Word)", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 11, "prompting_method": "cot-test1", "lm_post_processed_code": "word = input()\nword = \"1\".join([ i for i in word[ -1]])\nprint (word)\n", "lm_post_processed_edit_distance": 9}, {"image_id": 33, "image_height": 1602, "image_width": 2962, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 189.0, "y": 165.0, "w": 1167.0, "h": 155.0, "line_num": 1, "text": "Word = input ()"}, {"x": 199.0, "y": 582.0, "w": 2650.0, "h": 142.0, "line_num": 2, "text": "Word = \"1\". join ([ i for i in word[ -]"}, {"x": 223.0, "y": 937.0, "w": 781.0, "h": 196.0, "line_num": 3, "text": "Print (Word)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 246.5, "ir_algo_output_code": "Word = input ()\nWord = \"1\". join ([ i for i in word[ -]\nPrint (Word)\n", "ir_algo_output_indented_lines": [{"x": 189.0, "y": 165.0, "w": 1167.0, "h": 155.0, "line_num": 1, "text": "Word = input ()", "cluster_label": 0, "indentation": 0}, {"x": 199.0, "y": 582.0, "w": 2650.0, "h": 142.0, "line_num": 2, "text": "Word = \"1\". join ([ i for i in word[ -]", "cluster_label": 0, "indentation": 0}, {"x": 223.0, "y": 937.0, "w": 781.0, "h": 196.0, "line_num": 3, "text": "Print (Word)", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 11, "prompting_method": "cot-test5", "lm_post_processed_code": "word = input()\nword = \"1\".join([i for i in word[-1]])\nprint(word)\n", "lm_post_processed_edit_distance": 7}, {"image_id": 33, "image_height": 1602, "image_width": 2962, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 189.0, "y": 165.0, "w": 1167.0, "h": 155.0, "line_num": 1, "text": "Word = input ()"}, {"x": 199.0, "y": 582.0, "w": 2650.0, "h": 142.0, "line_num": 2, "text": "Word = \"1\". join ([ i for i in word[ -]"}, {"x": 223.0, "y": 937.0, "w": 781.0, "h": 196.0, "line_num": 3, "text": "Print (Word)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 246.5, "ir_algo_output_code": "Word = input ()\nWord = \"1\". join ([ i for i in word[ -]\nPrint (Word)\n", "ir_algo_output_indented_lines": [{"x": 189.0, "y": 165.0, "w": 1167.0, "h": 155.0, "line_num": 1, "text": "Word = input ()", "cluster_label": 0, "indentation": 0}, {"x": 199.0, "y": 582.0, "w": 2650.0, "h": 142.0, "line_num": 2, "text": "Word = \"1\". join ([ i for i in word[ -]", "cluster_label": 0, "indentation": 0}, {"x": 223.0, "y": 937.0, "w": 781.0, "h": 196.0, "line_num": 3, "text": "Print (Word)", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 11, "prompting_method": "simple-test2", "lm_post_processed_code": "word = input()\nword = \"1\".join([i for i in word])\nprint(word)\n", "lm_post_processed_edit_distance": 11}, {"image_id": 33, "image_height": 1602, "image_width": 2962, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 189.0, "y": 165.0, "w": 1167.0, "h": 155.0, "line_num": 1, "text": "Word = input ()"}, {"x": 199.0, "y": 582.0, "w": 2650.0, "h": 142.0, "line_num": 2, "text": "Word = \"1\". join ([ i for i in word[ -]"}, {"x": 223.0, "y": 937.0, "w": 781.0, "h": 196.0, "line_num": 3, "text": "Print (Word)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 246.5, "ir_algo_output_code": "Word = input ()\nWord = \"1\". join ([ i for i in word[ -]\nPrint (Word)\n", "ir_algo_output_indented_lines": [{"x": 189.0, "y": 165.0, "w": 1167.0, "h": 155.0, "line_num": 1, "text": "Word = input ()", "cluster_label": 0, "indentation": 0}, {"x": 199.0, "y": 582.0, "w": 2650.0, "h": 142.0, "line_num": 2, "text": "Word = \"1\". join ([ i for i in word[ -]", "cluster_label": 0, "indentation": 0}, {"x": 223.0, "y": 937.0, "w": 781.0, "h": 196.0, "line_num": 3, "text": "Print (Word)", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 11, "prompting_method": "simple-test3", "lm_post_processed_code": "word = input()\nword = \"1\".join([i for i in word])\nprint(word)\n", "lm_post_processed_edit_distance": 11}, {"image_id": 33, "image_height": 1602, "image_width": 2962, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 189.0, "y": 165.0, "w": 1167.0, "h": 155.0, "line_num": 1, "text": "Word = input ()"}, {"x": 199.0, "y": 582.0, "w": 2650.0, "h": 142.0, "line_num": 2, "text": "Word = \"1\". join ([ i for i in word[ -]"}, {"x": 223.0, "y": 937.0, "w": 781.0, "h": 196.0, "line_num": 3, "text": "Print (Word)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "Word = input ()\nWord = \"1\". join ([ i for i in word[ -]\nPrint (Word)\n", "ir_algo_output_indented_lines": [{"x": 189.0, "y": 165.0, "w": 1167.0, "h": 155.0, "line_num": 1, "text": "Word = input ()", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 199.0, "y": 582.0, "w": 2650.0, "h": 142.0, "line_num": 2, "text": "Word = \"1\". join ([ i for i in word[ -]", "delta": 10.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 223.0, "y": 937.0, "w": 781.0, "h": 196.0, "line_num": 3, "text": "Print (Word)", "delta": 24.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}], "ir_algo_output_edit_distance": 11, "prompting_method": "none", "lm_post_processed_code": "Word = input ()\nWord = \"1\". join ([ i for i in word[ -]\nPrint (Word)\n", "lm_post_processed_edit_distance": 11}, {"image_id": 33, "image_height": 1602, "image_width": 2962, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 189.0, "y": 165.0, "w": 1167.0, "h": 155.0, "line_num": 1, "text": "Word = input ()"}, {"x": 199.0, "y": 582.0, "w": 2650.0, "h": 142.0, "line_num": 2, "text": "Word = \"1\". join ([ i for i in word[ -]"}, {"x": 223.0, "y": 937.0, "w": 781.0, "h": 196.0, "line_num": 3, "text": "Print (Word)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "Word = input ()\nWord = \"1\". join ([ i for i in word[ -]\nPrint (Word)\n", "ir_algo_output_indented_lines": [{"x": 189.0, "y": 165.0, "w": 1167.0, "h": 155.0, "line_num": 1, "text": "Word = input ()", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 199.0, "y": 582.0, "w": 2650.0, "h": 142.0, "line_num": 2, "text": "Word = \"1\". join ([ i for i in word[ -]", "delta": 10.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 223.0, "y": 937.0, "w": 781.0, "h": 196.0, "line_num": 3, "text": "Print (Word)", "delta": 24.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}], "ir_algo_output_edit_distance": 11, "prompting_method": "cot-test1", "lm_post_processed_code": "word = input ()\nword = \"1\".join ([ i for i in word[-1]])\nprint (word)\n", "lm_post_processed_edit_distance": 11}, {"image_id": 33, "image_height": 1602, "image_width": 2962, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 189.0, "y": 165.0, "w": 1167.0, "h": 155.0, "line_num": 1, "text": "Word = input ()"}, {"x": 199.0, "y": 582.0, "w": 2650.0, "h": 142.0, "line_num": 2, "text": "Word = \"1\". join ([ i for i in word[ -]"}, {"x": 223.0, "y": 937.0, "w": 781.0, "h": 196.0, "line_num": 3, "text": "Print (Word)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "Word = input ()\nWord = \"1\". join ([ i for i in word[ -]\nPrint (Word)\n", "ir_algo_output_indented_lines": [{"x": 189.0, "y": 165.0, "w": 1167.0, "h": 155.0, "line_num": 1, "text": "Word = input ()", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 199.0, "y": 582.0, "w": 2650.0, "h": 142.0, "line_num": 2, "text": "Word = \"1\". join ([ i for i in word[ -]", "delta": 10.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 223.0, "y": 937.0, "w": 781.0, "h": 196.0, "line_num": 3, "text": "Print (Word)", "delta": 24.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}], "ir_algo_output_edit_distance": 11, "prompting_method": "cot-test5", "lm_post_processed_code": "word = input()\nword = \"1\".join([i for i in word[-1]])\nprint(word)\n", "lm_post_processed_edit_distance": 7}, {"image_id": 33, "image_height": 1602, "image_width": 2962, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 189.0, "y": 165.0, "w": 1167.0, "h": 155.0, "line_num": 1, "text": "Word = input ()"}, {"x": 199.0, "y": 582.0, "w": 2650.0, "h": 142.0, "line_num": 2, "text": "Word = \"1\". join ([ i for i in word[ -]"}, {"x": 223.0, "y": 937.0, "w": 781.0, "h": 196.0, "line_num": 3, "text": "Print (Word)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "Word = input ()\nWord = \"1\". join ([ i for i in word[ -]\nPrint (Word)\n", "ir_algo_output_indented_lines": [{"x": 189.0, "y": 165.0, "w": 1167.0, "h": 155.0, "line_num": 1, "text": "Word = input ()", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 199.0, "y": 582.0, "w": 2650.0, "h": 142.0, "line_num": 2, "text": "Word = \"1\". join ([ i for i in word[ -]", "delta": 10.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 223.0, "y": 937.0, "w": 781.0, "h": 196.0, "line_num": 3, "text": "Print (Word)", "delta": 24.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}], "ir_algo_output_edit_distance": 11, "prompting_method": "simple-test2", "lm_post_processed_code": "word = input()\nword = \"1\".join([i for i in word])\nprint(word)\n", "lm_post_processed_edit_distance": 11}, {"image_id": 33, "image_height": 1602, "image_width": 2962, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 189.0, "y": 165.0, "w": 1167.0, "h": 155.0, "line_num": 1, "text": "Word = input ()"}, {"x": 199.0, "y": 582.0, "w": 2650.0, "h": 142.0, "line_num": 2, "text": "Word = \"1\". join ([ i for i in word[ -]"}, {"x": 223.0, "y": 937.0, "w": 781.0, "h": 196.0, "line_num": 3, "text": "Print (Word)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "Word = input ()\nWord = \"1\". join ([ i for i in word[ -]\nPrint (Word)\n", "ir_algo_output_indented_lines": [{"x": 189.0, "y": 165.0, "w": 1167.0, "h": 155.0, "line_num": 1, "text": "Word = input ()", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 199.0, "y": 582.0, "w": 2650.0, "h": 142.0, "line_num": 2, "text": "Word = \"1\". join ([ i for i in word[ -]", "delta": 10.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 223.0, "y": 937.0, "w": 781.0, "h": 196.0, "line_num": 3, "text": "Print (Word)", "delta": 24.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}], "ir_algo_output_edit_distance": 11, "prompting_method": "simple-test3", "lm_post_processed_code": "word = input()\nword = \"1\".join([i for i in word])\nprint(word)\n", "lm_post_processed_edit_distance": 11}, {"image_id": 34, "image_height": 1894, "image_width": 2840, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 111.0, "y": 128.0, "w": 1250.0, "h": 157.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4]"}, {"x": 153.0, "y": 368.0, "w": 1148.0, "h": 198.0, "line_num": 2, "text": "list 2 = [ 3, 4, 5, 6 ]"}, {"x": 136.0, "y": 834.0, "w": 2450.0, "h": 189.0, "line_num": 3, "text": "list 3 = Ji por i in list 1 if i in listz]"}, {"x": 153.0, "y": 1192.0, "w": 682.0, "h": 166.0, "line_num": 4, "text": "Print (list 3)"}], "ir_algo_name": "none", "ir_algo_output_code": "list 1 = [ 1, 2, 3, 4]\nlist 2 = [ 3, 4, 5, 6 ]\nlist 3 = Ji por i in list 1 if i in listz]\nPrint (list 3)", "ir_algo_output_edit_distance": 14, "prompting_method": "none", "lm_post_processed_code": "list 1 = [ 1, 2, 3, 4]\nlist 2 = [ 3, 4, 5, 6 ]\nlist 3 = Ji por i in list 1 if i in listz]\nPrint (list 3)", "lm_post_processed_edit_distance": 14}, {"image_id": 34, "image_height": 1894, "image_width": 2840, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 111.0, "y": 128.0, "w": 1250.0, "h": 157.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4]"}, {"x": 153.0, "y": 368.0, "w": 1148.0, "h": 198.0, "line_num": 2, "text": "list 2 = [ 3, 4, 5, 6 ]"}, {"x": 136.0, "y": 834.0, "w": 2450.0, "h": 189.0, "line_num": 3, "text": "list 3 = Ji por i in list 1 if i in listz]"}, {"x": 153.0, "y": 1192.0, "w": 682.0, "h": 166.0, "line_num": 4, "text": "Print (list 3)"}], "ir_algo_name": "none", "ir_algo_output_code": "list 1 = [ 1, 2, 3, 4]\nlist 2 = [ 3, 4, 5, 6 ]\nlist 3 = Ji por i in list 1 if i in listz]\nPrint (list 3)", "ir_algo_output_edit_distance": 14, "prompting_method": "cot-test1", "lm_post_processed_code": "list1 = [ 1, 2, 3, 4]\nlist2 = [ 3, 4, 5, 6 ]\nlist3 = [i for i in list1 if i in list2]\nPrint(list3)\n", "lm_post_processed_edit_distance": 4}, {"image_id": 34, "image_height": 1894, "image_width": 2840, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 111.0, "y": 128.0, "w": 1250.0, "h": 157.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4]"}, {"x": 153.0, "y": 368.0, "w": 1148.0, "h": 198.0, "line_num": 2, "text": "list 2 = [ 3, 4, 5, 6 ]"}, {"x": 136.0, "y": 834.0, "w": 2450.0, "h": 189.0, "line_num": 3, "text": "list 3 = Ji por i in list 1 if i in listz]"}, {"x": 153.0, "y": 1192.0, "w": 682.0, "h": 166.0, "line_num": 4, "text": "Print (list 3)"}], "ir_algo_name": "none", "ir_algo_output_code": "list 1 = [ 1, 2, 3, 4]\nlist 2 = [ 3, 4, 5, 6 ]\nlist 3 = Ji por i in list 1 if i in listz]\nPrint (list 3)", "ir_algo_output_edit_distance": 14, "prompting_method": "cot-test5", "lm_post_processed_code": "list1 = [ 1, 2, 3, 4]\nlist2 = [ 3, 4, 5, 6 ]\nlist3 = [i for i in list1 if i in list2]\nPrint(list3)\n", "lm_post_processed_edit_distance": 4}, {"image_id": 34, "image_height": 1894, "image_width": 2840, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 111.0, "y": 128.0, "w": 1250.0, "h": 157.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4]"}, {"x": 153.0, "y": 368.0, "w": 1148.0, "h": 198.0, "line_num": 2, "text": "list 2 = [ 3, 4, 5, 6 ]"}, {"x": 136.0, "y": 834.0, "w": 2450.0, "h": 189.0, "line_num": 3, "text": "list 3 = Ji por i in list 1 if i in listz]"}, {"x": 153.0, "y": 1192.0, "w": 682.0, "h": 166.0, "line_num": 4, "text": "Print (list 3)"}], "ir_algo_name": "none", "ir_algo_output_code": "list 1 = [ 1, 2, 3, 4]\nlist 2 = [ 3, 4, 5, 6 ]\nlist 3 = Ji por i in list 1 if i in listz]\nPrint (list 3)", "ir_algo_output_edit_distance": 14, "prompting_method": "simple-test2", "lm_post_processed_code": "list1 = [ 1, 2, 3, 4]\nlist2 = [ 3, 4, 5, 6 ]\nlist3 = [i for i in list1 if i in list2]\nprint(list3)\n", "lm_post_processed_edit_distance": 3}, {"image_id": 34, "image_height": 1894, "image_width": 2840, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 111.0, "y": 128.0, "w": 1250.0, "h": 157.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4]"}, {"x": 153.0, "y": 368.0, "w": 1148.0, "h": 198.0, "line_num": 2, "text": "list 2 = [ 3, 4, 5, 6 ]"}, {"x": 136.0, "y": 834.0, "w": 2450.0, "h": 189.0, "line_num": 3, "text": "list 3 = Ji por i in list 1 if i in listz]"}, {"x": 153.0, "y": 1192.0, "w": 682.0, "h": 166.0, "line_num": 4, "text": "Print (list 3)"}], "ir_algo_name": "none", "ir_algo_output_code": "list 1 = [ 1, 2, 3, 4]\nlist 2 = [ 3, 4, 5, 6 ]\nlist 3 = Ji por i in list 1 if i in listz]\nPrint (list 3)", "ir_algo_output_edit_distance": 14, "prompting_method": "simple-test3", "lm_post_processed_code": "list1 = [ 1, 2, 3, 4]\nlist2 = [ 3, 4, 5, 6 ]\nlist3 = [i for i in list1 if i in list2]\nprint(list3)\n", "lm_post_processed_edit_distance": 3}, {"image_id": 34, "image_height": 1894, "image_width": 2840, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 111.0, "y": 128.0, "w": 1250.0, "h": 157.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4]"}, {"x": 153.0, "y": 368.0, "w": 1148.0, "h": 198.0, "line_num": 2, "text": "list 2 = [ 3, 4, 5, 6 ]"}, {"x": 136.0, "y": 834.0, "w": 2450.0, "h": 189.0, "line_num": 3, "text": "list 3 = Ji por i in list 1 if i in listz]"}, {"x": 153.0, "y": 1192.0, "w": 682.0, "h": 166.0, "line_num": 4, "text": "Print (list 3)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 266.25, "ir_algo_output_code": "list 1 = [ 1, 2, 3, 4]\nlist 2 = [ 3, 4, 5, 6 ]\nlist 3 = Ji por i in list 1 if i in listz]\nPrint (list 3)\n", "ir_algo_output_indented_lines": [{"x": 111.0, "y": 128.0, "w": 1250.0, "h": 157.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4]", "cluster_label": 0, "indentation": 0}, {"x": 153.0, "y": 368.0, "w": 1148.0, "h": 198.0, "line_num": 2, "text": "list 2 = [ 3, 4, 5, 6 ]", "cluster_label": 0, "indentation": 0}, {"x": 136.0, "y": 834.0, "w": 2450.0, "h": 189.0, "line_num": 3, "text": "list 3 = Ji por i in list 1 if i in listz]", "cluster_label": 0, "indentation": 0}, {"x": 153.0, "y": 1192.0, "w": 682.0, "h": 166.0, "line_num": 4, "text": "Print (list 3)", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 13, "prompting_method": "none", "lm_post_processed_code": "list 1 = [ 1, 2, 3, 4]\nlist 2 = [ 3, 4, 5, 6 ]\nlist 3 = Ji por i in list 1 if i in listz]\nPrint (list 3)\n", "lm_post_processed_edit_distance": 13}, {"image_id": 34, "image_height": 1894, "image_width": 2840, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 111.0, "y": 128.0, "w": 1250.0, "h": 157.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4]"}, {"x": 153.0, "y": 368.0, "w": 1148.0, "h": 198.0, "line_num": 2, "text": "list 2 = [ 3, 4, 5, 6 ]"}, {"x": 136.0, "y": 834.0, "w": 2450.0, "h": 189.0, "line_num": 3, "text": "list 3 = Ji por i in list 1 if i in listz]"}, {"x": 153.0, "y": 1192.0, "w": 682.0, "h": 166.0, "line_num": 4, "text": "Print (list 3)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 266.25, "ir_algo_output_code": "list 1 = [ 1, 2, 3, 4]\nlist 2 = [ 3, 4, 5, 6 ]\nlist 3 = Ji por i in list 1 if i in listz]\nPrint (list 3)\n", "ir_algo_output_indented_lines": [{"x": 111.0, "y": 128.0, "w": 1250.0, "h": 157.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4]", "cluster_label": 0, "indentation": 0}, {"x": 153.0, "y": 368.0, "w": 1148.0, "h": 198.0, "line_num": 2, "text": "list 2 = [ 3, 4, 5, 6 ]", "cluster_label": 0, "indentation": 0}, {"x": 136.0, "y": 834.0, "w": 2450.0, "h": 189.0, "line_num": 3, "text": "list 3 = Ji por i in list 1 if i in listz]", "cluster_label": 0, "indentation": 0}, {"x": 153.0, "y": 1192.0, "w": 682.0, "h": 166.0, "line_num": 4, "text": "Print (list 3)", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 13, "prompting_method": "cot-test1", "lm_post_processed_code": "list1 = [ 1, 2, 3, 4]\nlist2 = [ 3, 4, 5, 6 ]\nlist3 = [i for i in list1 if i in list2]\nPrint(list3)\n", "lm_post_processed_edit_distance": 4}, {"image_id": 34, "image_height": 1894, "image_width": 2840, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 111.0, "y": 128.0, "w": 1250.0, "h": 157.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4]"}, {"x": 153.0, "y": 368.0, "w": 1148.0, "h": 198.0, "line_num": 2, "text": "list 2 = [ 3, 4, 5, 6 ]"}, {"x": 136.0, "y": 834.0, "w": 2450.0, "h": 189.0, "line_num": 3, "text": "list 3 = Ji por i in list 1 if i in listz]"}, {"x": 153.0, "y": 1192.0, "w": 682.0, "h": 166.0, "line_num": 4, "text": "Print (list 3)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 266.25, "ir_algo_output_code": "list 1 = [ 1, 2, 3, 4]\nlist 2 = [ 3, 4, 5, 6 ]\nlist 3 = Ji por i in list 1 if i in listz]\nPrint (list 3)\n", "ir_algo_output_indented_lines": [{"x": 111.0, "y": 128.0, "w": 1250.0, "h": 157.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4]", "cluster_label": 0, "indentation": 0}, {"x": 153.0, "y": 368.0, "w": 1148.0, "h": 198.0, "line_num": 2, "text": "list 2 = [ 3, 4, 5, 6 ]", "cluster_label": 0, "indentation": 0}, {"x": 136.0, "y": 834.0, "w": 2450.0, "h": 189.0, "line_num": 3, "text": "list 3 = Ji por i in list 1 if i in listz]", "cluster_label": 0, "indentation": 0}, {"x": 153.0, "y": 1192.0, "w": 682.0, "h": 166.0, "line_num": 4, "text": "Print (list 3)", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 13, "prompting_method": "cot-test5", "lm_post_processed_code": "list1 = [ 1, 2, 3, 4]\nlist2 = [ 3, 4, 5, 6 ]\nlist3 = [i for i in list1 if i in list2]\nprint(list3)\n", "lm_post_processed_edit_distance": 3}, {"image_id": 34, "image_height": 1894, "image_width": 2840, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 111.0, "y": 128.0, "w": 1250.0, "h": 157.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4]"}, {"x": 153.0, "y": 368.0, "w": 1148.0, "h": 198.0, "line_num": 2, "text": "list 2 = [ 3, 4, 5, 6 ]"}, {"x": 136.0, "y": 834.0, "w": 2450.0, "h": 189.0, "line_num": 3, "text": "list 3 = Ji por i in list 1 if i in listz]"}, {"x": 153.0, "y": 1192.0, "w": 682.0, "h": 166.0, "line_num": 4, "text": "Print (list 3)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 266.25, "ir_algo_output_code": "list 1 = [ 1, 2, 3, 4]\nlist 2 = [ 3, 4, 5, 6 ]\nlist 3 = Ji por i in list 1 if i in listz]\nPrint (list 3)\n", "ir_algo_output_indented_lines": [{"x": 111.0, "y": 128.0, "w": 1250.0, "h": 157.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4]", "cluster_label": 0, "indentation": 0}, {"x": 153.0, "y": 368.0, "w": 1148.0, "h": 198.0, "line_num": 2, "text": "list 2 = [ 3, 4, 5, 6 ]", "cluster_label": 0, "indentation": 0}, {"x": 136.0, "y": 834.0, "w": 2450.0, "h": 189.0, "line_num": 3, "text": "list 3 = Ji por i in list 1 if i in listz]", "cluster_label": 0, "indentation": 0}, {"x": 153.0, "y": 1192.0, "w": 682.0, "h": 166.0, "line_num": 4, "text": "Print (list 3)", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 13, "prompting_method": "simple-test2", "lm_post_processed_code": "list1 = [ 1, 2, 3, 4]\nlist2 = [ 3, 4, 5, 6 ]\nlist3 = [i for i in list1 if i in list2]\nprint(list3)\n", "lm_post_processed_edit_distance": 3}, {"image_id": 34, "image_height": 1894, "image_width": 2840, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 111.0, "y": 128.0, "w": 1250.0, "h": 157.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4]"}, {"x": 153.0, "y": 368.0, "w": 1148.0, "h": 198.0, "line_num": 2, "text": "list 2 = [ 3, 4, 5, 6 ]"}, {"x": 136.0, "y": 834.0, "w": 2450.0, "h": 189.0, "line_num": 3, "text": "list 3 = Ji por i in list 1 if i in listz]"}, {"x": 153.0, "y": 1192.0, "w": 682.0, "h": 166.0, "line_num": 4, "text": "Print (list 3)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 266.25, "ir_algo_output_code": "list 1 = [ 1, 2, 3, 4]\nlist 2 = [ 3, 4, 5, 6 ]\nlist 3 = Ji por i in list 1 if i in listz]\nPrint (list 3)\n", "ir_algo_output_indented_lines": [{"x": 111.0, "y": 128.0, "w": 1250.0, "h": 157.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4]", "cluster_label": 0, "indentation": 0}, {"x": 153.0, "y": 368.0, "w": 1148.0, "h": 198.0, "line_num": 2, "text": "list 2 = [ 3, 4, 5, 6 ]", "cluster_label": 0, "indentation": 0}, {"x": 136.0, "y": 834.0, "w": 2450.0, "h": 189.0, "line_num": 3, "text": "list 3 = Ji por i in list 1 if i in listz]", "cluster_label": 0, "indentation": 0}, {"x": 153.0, "y": 1192.0, "w": 682.0, "h": 166.0, "line_num": 4, "text": "Print (list 3)", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 13, "prompting_method": "simple-test3", "lm_post_processed_code": "list1 = [ 1, 2, 3, 4]\nlist2 = [ 3, 4, 5, 6 ]\nlist3 = [i for i in list1 if i in list2]\nprint(list3)\n", "lm_post_processed_edit_distance": 3}, {"image_id": 34, "image_height": 1894, "image_width": 2840, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 111.0, "y": 128.0, "w": 1250.0, "h": 157.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4]"}, {"x": 153.0, "y": 368.0, "w": 1148.0, "h": 198.0, "line_num": 2, "text": "list 2 = [ 3, 4, 5, 6 ]"}, {"x": 136.0, "y": 834.0, "w": 2450.0, "h": 189.0, "line_num": 3, "text": "list 3 = Ji por i in list 1 if i in listz]"}, {"x": 153.0, "y": 1192.0, "w": 682.0, "h": 166.0, "line_num": 4, "text": "Print (list 3)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "list 1 = [ 1, 2, 3, 4]\nlist 2 = [ 3, 4, 5, 6 ]\nlist 3 = Ji por i in list 1 if i in listz]\nPrint (list 3)\n", "ir_algo_output_indented_lines": [{"x": 111.0, "y": 128.0, "w": 1250.0, "h": 157.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4]", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 153.0, "y": 368.0, "w": 1148.0, "h": 198.0, "line_num": 2, "text": "list 2 = [ 3, 4, 5, 6 ]", "delta": 42.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 136.0, "y": 834.0, "w": 2450.0, "h": 189.0, "line_num": 3, "text": "list 3 = Ji por i in list 1 if i in listz]", "delta": -17.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 153.0, "y": 1192.0, "w": 682.0, "h": 166.0, "line_num": 4, "text": "Print (list 3)", "delta": 17.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}], "ir_algo_output_edit_distance": 13, "prompting_method": "none", "lm_post_processed_code": "list 1 = [ 1, 2, 3, 4]\nlist 2 = [ 3, 4, 5, 6 ]\nlist 3 = Ji por i in list 1 if i in listz]\nPrint (list 3)\n", "lm_post_processed_edit_distance": 13}, {"image_id": 34, "image_height": 1894, "image_width": 2840, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 111.0, "y": 128.0, "w": 1250.0, "h": 157.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4]"}, {"x": 153.0, "y": 368.0, "w": 1148.0, "h": 198.0, "line_num": 2, "text": "list 2 = [ 3, 4, 5, 6 ]"}, {"x": 136.0, "y": 834.0, "w": 2450.0, "h": 189.0, "line_num": 3, "text": "list 3 = Ji por i in list 1 if i in listz]"}, {"x": 153.0, "y": 1192.0, "w": 682.0, "h": 166.0, "line_num": 4, "text": "Print (list 3)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "list 1 = [ 1, 2, 3, 4]\nlist 2 = [ 3, 4, 5, 6 ]\nlist 3 = Ji por i in list 1 if i in listz]\nPrint (list 3)\n", "ir_algo_output_indented_lines": [{"x": 111.0, "y": 128.0, "w": 1250.0, "h": 157.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4]", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 153.0, "y": 368.0, "w": 1148.0, "h": 198.0, "line_num": 2, "text": "list 2 = [ 3, 4, 5, 6 ]", "delta": 42.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 136.0, "y": 834.0, "w": 2450.0, "h": 189.0, "line_num": 3, "text": "list 3 = Ji por i in list 1 if i in listz]", "delta": -17.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 153.0, "y": 1192.0, "w": 682.0, "h": 166.0, "line_num": 4, "text": "Print (list 3)", "delta": 17.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}], "ir_algo_output_edit_distance": 13, "prompting_method": "cot-test1", "lm_post_processed_code": "list1 = [ 1, 2, 3, 4]\nlist2 = [ 3, 4, 5, 6 ]\nlist3 = [i for i in list1 if i in list2]\nPrint(list3)\n", "lm_post_processed_edit_distance": 4}, {"image_id": 34, "image_height": 1894, "image_width": 2840, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 111.0, "y": 128.0, "w": 1250.0, "h": 157.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4]"}, {"x": 153.0, "y": 368.0, "w": 1148.0, "h": 198.0, "line_num": 2, "text": "list 2 = [ 3, 4, 5, 6 ]"}, {"x": 136.0, "y": 834.0, "w": 2450.0, "h": 189.0, "line_num": 3, "text": "list 3 = Ji por i in list 1 if i in listz]"}, {"x": 153.0, "y": 1192.0, "w": 682.0, "h": 166.0, "line_num": 4, "text": "Print (list 3)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "list 1 = [ 1, 2, 3, 4]\nlist 2 = [ 3, 4, 5, 6 ]\nlist 3 = Ji por i in list 1 if i in listz]\nPrint (list 3)\n", "ir_algo_output_indented_lines": [{"x": 111.0, "y": 128.0, "w": 1250.0, "h": 157.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4]", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 153.0, "y": 368.0, "w": 1148.0, "h": 198.0, "line_num": 2, "text": "list 2 = [ 3, 4, 5, 6 ]", "delta": 42.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 136.0, "y": 834.0, "w": 2450.0, "h": 189.0, "line_num": 3, "text": "list 3 = Ji por i in list 1 if i in listz]", "delta": -17.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 153.0, "y": 1192.0, "w": 682.0, "h": 166.0, "line_num": 4, "text": "Print (list 3)", "delta": 17.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}], "ir_algo_output_edit_distance": 13, "prompting_method": "cot-test5", "lm_post_processed_code": "list1 = [ 1, 2, 3, 4]\nlist2 = [ 3, 4, 5, 6 ]\nlist3 = [i for i in list1 if i in list2]\nprint(list3)\n", "lm_post_processed_edit_distance": 3}, {"image_id": 34, "image_height": 1894, "image_width": 2840, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 111.0, "y": 128.0, "w": 1250.0, "h": 157.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4]"}, {"x": 153.0, "y": 368.0, "w": 1148.0, "h": 198.0, "line_num": 2, "text": "list 2 = [ 3, 4, 5, 6 ]"}, {"x": 136.0, "y": 834.0, "w": 2450.0, "h": 189.0, "line_num": 3, "text": "list 3 = Ji por i in list 1 if i in listz]"}, {"x": 153.0, "y": 1192.0, "w": 682.0, "h": 166.0, "line_num": 4, "text": "Print (list 3)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "list 1 = [ 1, 2, 3, 4]\nlist 2 = [ 3, 4, 5, 6 ]\nlist 3 = Ji por i in list 1 if i in listz]\nPrint (list 3)\n", "ir_algo_output_indented_lines": [{"x": 111.0, "y": 128.0, "w": 1250.0, "h": 157.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4]", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 153.0, "y": 368.0, "w": 1148.0, "h": 198.0, "line_num": 2, "text": "list 2 = [ 3, 4, 5, 6 ]", "delta": 42.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 136.0, "y": 834.0, "w": 2450.0, "h": 189.0, "line_num": 3, "text": "list 3 = Ji por i in list 1 if i in listz]", "delta": -17.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 153.0, "y": 1192.0, "w": 682.0, "h": 166.0, "line_num": 4, "text": "Print (list 3)", "delta": 17.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}], "ir_algo_output_edit_distance": 13, "prompting_method": "simple-test2", "lm_post_processed_code": "list1 = [ 1, 2, 3, 4]\nlist2 = [ 3, 4, 5, 6 ]\nlist3 = [i for i in list1 if i in list2]\nprint(list3)\n", "lm_post_processed_edit_distance": 3}, {"image_id": 34, "image_height": 1894, "image_width": 2840, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 111.0, "y": 128.0, "w": 1250.0, "h": 157.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4]"}, {"x": 153.0, "y": 368.0, "w": 1148.0, "h": 198.0, "line_num": 2, "text": "list 2 = [ 3, 4, 5, 6 ]"}, {"x": 136.0, "y": 834.0, "w": 2450.0, "h": 189.0, "line_num": 3, "text": "list 3 = Ji por i in list 1 if i in listz]"}, {"x": 153.0, "y": 1192.0, "w": 682.0, "h": 166.0, "line_num": 4, "text": "Print (list 3)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "list 1 = [ 1, 2, 3, 4]\nlist 2 = [ 3, 4, 5, 6 ]\nlist 3 = Ji por i in list 1 if i in listz]\nPrint (list 3)\n", "ir_algo_output_indented_lines": [{"x": 111.0, "y": 128.0, "w": 1250.0, "h": 157.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4]", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 153.0, "y": 368.0, "w": 1148.0, "h": 198.0, "line_num": 2, "text": "list 2 = [ 3, 4, 5, 6 ]", "delta": 42.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 136.0, "y": 834.0, "w": 2450.0, "h": 189.0, "line_num": 3, "text": "list 3 = Ji por i in list 1 if i in listz]", "delta": -17.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 153.0, "y": 1192.0, "w": 682.0, "h": 166.0, "line_num": 4, "text": "Print (list 3)", "delta": 17.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}], "ir_algo_output_edit_distance": 13, "prompting_method": "simple-test3", "lm_post_processed_code": "list1 = [ 1, 2, 3, 4]\nlist2 = [ 3, 4, 5, 6 ]\nlist3 = [i for i in list1 if i in list2]\nprint(list3)\n", "lm_post_processed_edit_distance": 3}, {"image_id": 35, "image_height": 1621, "image_width": 2971, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 108.0, "y": 159.0, "w": 2078.0, "h": 214.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]"}, {"x": 146.0, "y": 602.0, "w": 2714.0, "h": 170.0, "line_num": 2, "text": "even = [\u00e8 for i in list1 if i /2=]"}, {"x": 147.0, "y": 877.0, "w": 906.0, "h": 167.0, "line_num": 3, "text": "Print ( even)"}], "ir_algo_name": "none", "ir_algo_output_code": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]\neven = [\u00e8 for i in list1 if i /2=]\nPrint ( even)", "ir_algo_output_edit_distance": 13, "prompting_method": "none", "lm_post_processed_code": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]\neven = [\u00e8 for i in list1 if i /2=]\nPrint ( even)", "lm_post_processed_edit_distance": 13}, {"image_id": 35, "image_height": 1621, "image_width": 2971, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 108.0, "y": 159.0, "w": 2078.0, "h": 214.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]"}, {"x": 146.0, "y": 602.0, "w": 2714.0, "h": 170.0, "line_num": 2, "text": "even = [\u00e8 for i in list1 if i /2=]"}, {"x": 147.0, "y": 877.0, "w": 906.0, "h": 167.0, "line_num": 3, "text": "Print ( even)"}], "ir_algo_name": "none", "ir_algo_output_code": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]\neven = [\u00e8 for i in list1 if i /2=]\nPrint ( even)", "ir_algo_output_edit_distance": 13, "prompting_method": "cot-test1", "lm_post_processed_code": "list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\neven = [i for i in list1 if i /2=]\nPrint(even)\n", "lm_post_processed_edit_distance": 7}, {"image_id": 35, "image_height": 1621, "image_width": 2971, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 108.0, "y": 159.0, "w": 2078.0, "h": 214.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]"}, {"x": 146.0, "y": 602.0, "w": 2714.0, "h": 170.0, "line_num": 2, "text": "even = [\u00e8 for i in list1 if i /2=]"}, {"x": 147.0, "y": 877.0, "w": 906.0, "h": 167.0, "line_num": 3, "text": "Print ( even)"}], "ir_algo_name": "none", "ir_algo_output_code": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]\neven = [\u00e8 for i in list1 if i /2=]\nPrint ( even)", "ir_algo_output_edit_distance": 13, "prompting_method": "cot-test5", "lm_post_processed_code": "list1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]\neven = [i for i in list1 if i /2==]\nprint (even)\n", "lm_post_processed_edit_distance": 7}, {"image_id": 35, "image_height": 1621, "image_width": 2971, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 108.0, "y": 159.0, "w": 2078.0, "h": 214.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]"}, {"x": 146.0, "y": 602.0, "w": 2714.0, "h": 170.0, "line_num": 2, "text": "even = [\u00e8 for i in list1 if i /2=]"}, {"x": 147.0, "y": 877.0, "w": 906.0, "h": 167.0, "line_num": 3, "text": "Print ( even)"}], "ir_algo_name": "none", "ir_algo_output_code": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]\neven = [\u00e8 for i in list1 if i /2=]\nPrint ( even)", "ir_algo_output_edit_distance": 13, "prompting_method": "simple-test2", "lm_post_processed_code": "list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\neven = [i for i in list1 if i % 2 == 0]\nprint(even)\n", "lm_post_processed_edit_distance": 0}, {"image_id": 35, "image_height": 1621, "image_width": 2971, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 108.0, "y": 159.0, "w": 2078.0, "h": 214.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]"}, {"x": 146.0, "y": 602.0, "w": 2714.0, "h": 170.0, "line_num": 2, "text": "even = [\u00e8 for i in list1 if i /2=]"}, {"x": 147.0, "y": 877.0, "w": 906.0, "h": 167.0, "line_num": 3, "text": "Print ( even)"}], "ir_algo_name": "none", "ir_algo_output_code": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]\neven = [\u00e8 for i in list1 if i /2=]\nPrint ( even)", "ir_algo_output_edit_distance": 13, "prompting_method": "simple-test3", "lm_post_processed_code": "list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\neven = [i for i in list1 if i % 2 == 0]\nprint(even)\n", "lm_post_processed_edit_distance": 0}, {"image_id": 35, "image_height": 1621, "image_width": 2971, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 108.0, "y": 159.0, "w": 2078.0, "h": 214.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]"}, {"x": 146.0, "y": 602.0, "w": 2714.0, "h": 170.0, "line_num": 2, "text": "even = [\u00e8 for i in list1 if i /2=]"}, {"x": 147.0, "y": 877.0, "w": 906.0, "h": 167.0, "line_num": 3, "text": "Print ( even)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 275.5, "ir_algo_output_code": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]\neven = [\u00e8 for i in list1 if i /2=]\nPrint ( even)\n", "ir_algo_output_indented_lines": [{"x": 108.0, "y": 159.0, "w": 2078.0, "h": 214.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]", "cluster_label": 0, "indentation": 0}, {"x": 146.0, "y": 602.0, "w": 2714.0, "h": 170.0, "line_num": 2, "text": "even = [\u00e8 for i in list1 if i /2=]", "cluster_label": 0, "indentation": 0}, {"x": 147.0, "y": 877.0, "w": 906.0, "h": 167.0, "line_num": 3, "text": "Print ( even)", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 12, "prompting_method": "none", "lm_post_processed_code": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]\neven = [\u00e8 for i in list1 if i /2=]\nPrint ( even)\n", "lm_post_processed_edit_distance": 12}, {"image_id": 35, "image_height": 1621, "image_width": 2971, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 108.0, "y": 159.0, "w": 2078.0, "h": 214.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]"}, {"x": 146.0, "y": 602.0, "w": 2714.0, "h": 170.0, "line_num": 2, "text": "even = [\u00e8 for i in list1 if i /2=]"}, {"x": 147.0, "y": 877.0, "w": 906.0, "h": 167.0, "line_num": 3, "text": "Print ( even)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 275.5, "ir_algo_output_code": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]\neven = [\u00e8 for i in list1 if i /2=]\nPrint ( even)\n", "ir_algo_output_indented_lines": [{"x": 108.0, "y": 159.0, "w": 2078.0, "h": 214.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]", "cluster_label": 0, "indentation": 0}, {"x": 146.0, "y": 602.0, "w": 2714.0, "h": 170.0, "line_num": 2, "text": "even = [\u00e8 for i in list1 if i /2=]", "cluster_label": 0, "indentation": 0}, {"x": 147.0, "y": 877.0, "w": 906.0, "h": 167.0, "line_num": 3, "text": "Print ( even)", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 12, "prompting_method": "cot-test1", "lm_post_processed_code": "list1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]\neven = [i for i in list1 if i /2==]\nprint ( even)\n", "lm_post_processed_edit_distance": 8}, {"image_id": 35, "image_height": 1621, "image_width": 2971, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 108.0, "y": 159.0, "w": 2078.0, "h": 214.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]"}, {"x": 146.0, "y": 602.0, "w": 2714.0, "h": 170.0, "line_num": 2, "text": "even = [\u00e8 for i in list1 if i /2=]"}, {"x": 147.0, "y": 877.0, "w": 906.0, "h": 167.0, "line_num": 3, "text": "Print ( even)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 275.5, "ir_algo_output_code": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]\neven = [\u00e8 for i in list1 if i /2=]\nPrint ( even)\n", "ir_algo_output_indented_lines": [{"x": 108.0, "y": 159.0, "w": 2078.0, "h": 214.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]", "cluster_label": 0, "indentation": 0}, {"x": 146.0, "y": 602.0, "w": 2714.0, "h": 170.0, "line_num": 2, "text": "even = [\u00e8 for i in list1 if i /2=]", "cluster_label": 0, "indentation": 0}, {"x": 147.0, "y": 877.0, "w": 906.0, "h": 167.0, "line_num": 3, "text": "Print ( even)", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 12, "prompting_method": "cot-test5", "lm_post_processed_code": "list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\neven = [i for i in list1 if i /2==]\nprint(even)\n", "lm_post_processed_edit_distance": 5}, {"image_id": 35, "image_height": 1621, "image_width": 2971, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 108.0, "y": 159.0, "w": 2078.0, "h": 214.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]"}, {"x": 146.0, "y": 602.0, "w": 2714.0, "h": 170.0, "line_num": 2, "text": "even = [\u00e8 for i in list1 if i /2=]"}, {"x": 147.0, "y": 877.0, "w": 906.0, "h": 167.0, "line_num": 3, "text": "Print ( even)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 275.5, "ir_algo_output_code": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]\neven = [\u00e8 for i in list1 if i /2=]\nPrint ( even)\n", "ir_algo_output_indented_lines": [{"x": 108.0, "y": 159.0, "w": 2078.0, "h": 214.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]", "cluster_label": 0, "indentation": 0}, {"x": 146.0, "y": 602.0, "w": 2714.0, "h": 170.0, "line_num": 2, "text": "even = [\u00e8 for i in list1 if i /2=]", "cluster_label": 0, "indentation": 0}, {"x": 147.0, "y": 877.0, "w": 906.0, "h": 167.0, "line_num": 3, "text": "Print ( even)", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 12, "prompting_method": "simple-test2", "lm_post_processed_code": "list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\neven = [i for i in list1 if i % 2 == 0]\nprint(even)\n", "lm_post_processed_edit_distance": 0}, {"image_id": 35, "image_height": 1621, "image_width": 2971, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 108.0, "y": 159.0, "w": 2078.0, "h": 214.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]"}, {"x": 146.0, "y": 602.0, "w": 2714.0, "h": 170.0, "line_num": 2, "text": "even = [\u00e8 for i in list1 if i /2=]"}, {"x": 147.0, "y": 877.0, "w": 906.0, "h": 167.0, "line_num": 3, "text": "Print ( even)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 275.5, "ir_algo_output_code": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]\neven = [\u00e8 for i in list1 if i /2=]\nPrint ( even)\n", "ir_algo_output_indented_lines": [{"x": 108.0, "y": 159.0, "w": 2078.0, "h": 214.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]", "cluster_label": 0, "indentation": 0}, {"x": 146.0, "y": 602.0, "w": 2714.0, "h": 170.0, "line_num": 2, "text": "even = [\u00e8 for i in list1 if i /2=]", "cluster_label": 0, "indentation": 0}, {"x": 147.0, "y": 877.0, "w": 906.0, "h": 167.0, "line_num": 3, "text": "Print ( even)", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 12, "prompting_method": "simple-test3", "lm_post_processed_code": "list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\neven = [i for i in list1 if i % 2 == 0]\nprint(even)\n", "lm_post_processed_edit_distance": 0}, {"image_id": 35, "image_height": 1621, "image_width": 2971, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 108.0, "y": 159.0, "w": 2078.0, "h": 214.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]"}, {"x": 146.0, "y": 602.0, "w": 2714.0, "h": 170.0, "line_num": 2, "text": "even = [\u00e8 for i in list1 if i /2=]"}, {"x": 147.0, "y": 877.0, "w": 906.0, "h": 167.0, "line_num": 3, "text": "Print ( even)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]\neven = [\u00e8 for i in list1 if i /2=]\nPrint ( even)\n", "ir_algo_output_indented_lines": [{"x": 108.0, "y": 159.0, "w": 2078.0, "h": 214.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 146.0, "y": 602.0, "w": 2714.0, "h": 170.0, "line_num": 2, "text": "even = [\u00e8 for i in list1 if i /2=]", "delta": 38.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 147.0, "y": 877.0, "w": 906.0, "h": 167.0, "line_num": 3, "text": "Print ( even)", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}], "ir_algo_output_edit_distance": 12, "prompting_method": "none", "lm_post_processed_code": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]\neven = [\u00e8 for i in list1 if i /2=]\nPrint ( even)\n", "lm_post_processed_edit_distance": 12}, {"image_id": 35, "image_height": 1621, "image_width": 2971, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 108.0, "y": 159.0, "w": 2078.0, "h": 214.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]"}, {"x": 146.0, "y": 602.0, "w": 2714.0, "h": 170.0, "line_num": 2, "text": "even = [\u00e8 for i in list1 if i /2=]"}, {"x": 147.0, "y": 877.0, "w": 906.0, "h": 167.0, "line_num": 3, "text": "Print ( even)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]\neven = [\u00e8 for i in list1 if i /2=]\nPrint ( even)\n", "ir_algo_output_indented_lines": [{"x": 108.0, "y": 159.0, "w": 2078.0, "h": 214.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 146.0, "y": 602.0, "w": 2714.0, "h": 170.0, "line_num": 2, "text": "even = [\u00e8 for i in list1 if i /2=]", "delta": 38.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 147.0, "y": 877.0, "w": 906.0, "h": 167.0, "line_num": 3, "text": "Print ( even)", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}], "ir_algo_output_edit_distance": 12, "prompting_method": "cot-test1", "lm_post_processed_code": "list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\neven = [i for i in list1 if i /2==]\nprint(even)\n", "lm_post_processed_edit_distance": 5}, {"image_id": 35, "image_height": 1621, "image_width": 2971, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 108.0, "y": 159.0, "w": 2078.0, "h": 214.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]"}, {"x": 146.0, "y": 602.0, "w": 2714.0, "h": 170.0, "line_num": 2, "text": "even = [\u00e8 for i in list1 if i /2=]"}, {"x": 147.0, "y": 877.0, "w": 906.0, "h": 167.0, "line_num": 3, "text": "Print ( even)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]\neven = [\u00e8 for i in list1 if i /2=]\nPrint ( even)\n", "ir_algo_output_indented_lines": [{"x": 108.0, "y": 159.0, "w": 2078.0, "h": 214.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 146.0, "y": 602.0, "w": 2714.0, "h": 170.0, "line_num": 2, "text": "even = [\u00e8 for i in list1 if i /2=]", "delta": 38.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 147.0, "y": 877.0, "w": 906.0, "h": 167.0, "line_num": 3, "text": "Print ( even)", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}], "ir_algo_output_edit_distance": 12, "prompting_method": "cot-test5", "lm_post_processed_code": "list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\neven = [i for i in list1 if i /2==]\nprint(even)\n", "lm_post_processed_edit_distance": 5}, {"image_id": 35, "image_height": 1621, "image_width": 2971, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 108.0, "y": 159.0, "w": 2078.0, "h": 214.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]"}, {"x": 146.0, "y": 602.0, "w": 2714.0, "h": 170.0, "line_num": 2, "text": "even = [\u00e8 for i in list1 if i /2=]"}, {"x": 147.0, "y": 877.0, "w": 906.0, "h": 167.0, "line_num": 3, "text": "Print ( even)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]\neven = [\u00e8 for i in list1 if i /2=]\nPrint ( even)\n", "ir_algo_output_indented_lines": [{"x": 108.0, "y": 159.0, "w": 2078.0, "h": 214.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 146.0, "y": 602.0, "w": 2714.0, "h": 170.0, "line_num": 2, "text": "even = [\u00e8 for i in list1 if i /2=]", "delta": 38.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 147.0, "y": 877.0, "w": 906.0, "h": 167.0, "line_num": 3, "text": "Print ( even)", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}], "ir_algo_output_edit_distance": 12, "prompting_method": "simple-test2", "lm_post_processed_code": "list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\neven = [i for i in list1 if i % 2 == 0]\nprint(even)\n", "lm_post_processed_edit_distance": 0}, {"image_id": 35, "image_height": 1621, "image_width": 2971, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 108.0, "y": 159.0, "w": 2078.0, "h": 214.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]"}, {"x": 146.0, "y": 602.0, "w": 2714.0, "h": 170.0, "line_num": 2, "text": "even = [\u00e8 for i in list1 if i /2=]"}, {"x": 147.0, "y": 877.0, "w": 906.0, "h": 167.0, "line_num": 3, "text": "Print ( even)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]\neven = [\u00e8 for i in list1 if i /2=]\nPrint ( even)\n", "ir_algo_output_indented_lines": [{"x": 108.0, "y": 159.0, "w": 2078.0, "h": 214.0, "line_num": 1, "text": "list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 146.0, "y": 602.0, "w": 2714.0, "h": 170.0, "line_num": 2, "text": "even = [\u00e8 for i in list1 if i /2=]", "delta": 38.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 147.0, "y": 877.0, "w": 906.0, "h": 167.0, "line_num": 3, "text": "Print ( even)", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}], "ir_algo_output_edit_distance": 12, "prompting_method": "simple-test3", "lm_post_processed_code": "list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\neven = [i for i in list1 if i % 2 == 0]\nprint(even)\n", "lm_post_processed_edit_distance": 0}, {"image_id": 36, "image_height": 1696, "image_width": 2260, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 122.0, "y": 166.0, "w": 540.0, "h": 95.0, "line_num": 1, "text": "def main ():"}, {"x": 318.0, "y": 329.0, "w": 895.0, "h": 85.0, "line_num": 2, "text": "year = int (input()"}, {"x": 319.0, "y": 457.0, "w": 1785.0, "h": 97.0, "line_num": 3, "text": "if ( year % 4 == 0 and year % 100 ! = 0):"}, {"x": 549.0, "y": 603.0, "w": 614.0, "h": 98.0, "line_num": 4, "text": "print (\"True\")"}, {"x": 343.0, "y": 740.0, "w": 1841.0, "h": 105.0, "line_num": 5, "text": "elif (year % 100 == 0 and year % 400=0):"}, {"x": 574.0, "y": 895.0, "w": 613.0, "h": 99.0, "line_num": 6, "text": "print (\"True\")"}, {"x": 339.0, "y": 1046.0, "w": 262.0, "h": 93.0, "line_num": 7, "text": "else:"}, {"x": 592.0, "y": 1158.0, "w": 644.0, "h": 104.0, "line_num": 8, "text": "print (\"False\")"}, {"x": 121.0, "y": 1338.0, "w": 104.0, "h": 83.0, "line_num": 9, "text": "if"}, {"x": 226.0, "y": 1354.0, "w": 1211.0, "h": 88.0, "line_num": 10, "text": "__ name _== \" __ main_\":"}, {"x": 349.0, "y": 1505.0, "w": 317.0, "h": 74.0, "line_num": 11, "text": "main ()"}], "ir_algo_name": "none", "ir_algo_output_code": "def main ():\nyear = int (input()\nif ( year % 4 == 0 and year % 100 ! = 0):\nprint (\"True\")\nelif (year % 100 == 0 and year % 400=0):\nprint (\"True\")\nelse:\nprint (\"False\")\nif\n__ name _== \" __ main_\":\nmain ()", "ir_algo_output_edit_distance": 68, "prompting_method": "none", "lm_post_processed_code": "def main ():\nyear = int (input()\nif ( year % 4 == 0 and year % 100 ! = 0):\nprint (\"True\")\nelif (year % 100 == 0 and year % 400=0):\nprint (\"True\")\nelse:\nprint (\"False\")\nif\n__ name _== \" __ main_\":\nmain ()", "lm_post_processed_edit_distance": 68}, {"image_id": 36, "image_height": 1696, "image_width": 2260, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 122.0, "y": 166.0, "w": 540.0, "h": 95.0, "line_num": 1, "text": "def main ():"}, {"x": 318.0, "y": 329.0, "w": 895.0, "h": 85.0, "line_num": 2, "text": "year = int (input()"}, {"x": 319.0, "y": 457.0, "w": 1785.0, "h": 97.0, "line_num": 3, "text": "if ( year % 4 == 0 and year % 100 ! = 0):"}, {"x": 549.0, "y": 603.0, "w": 614.0, "h": 98.0, "line_num": 4, "text": "print (\"True\")"}, {"x": 343.0, "y": 740.0, "w": 1841.0, "h": 105.0, "line_num": 5, "text": "elif (year % 100 == 0 and year % 400=0):"}, {"x": 574.0, "y": 895.0, "w": 613.0, "h": 99.0, "line_num": 6, "text": "print (\"True\")"}, {"x": 339.0, "y": 1046.0, "w": 262.0, "h": 93.0, "line_num": 7, "text": "else:"}, {"x": 592.0, "y": 1158.0, "w": 644.0, "h": 104.0, "line_num": 8, "text": "print (\"False\")"}, {"x": 121.0, "y": 1338.0, "w": 104.0, "h": 83.0, "line_num": 9, "text": "if"}, {"x": 226.0, "y": 1354.0, "w": 1211.0, "h": 88.0, "line_num": 10, "text": "__ name _== \" __ main_\":"}, {"x": 349.0, "y": 1505.0, "w": 317.0, "h": 74.0, "line_num": 11, "text": "main ()"}], "ir_algo_name": "none", "ir_algo_output_code": "def main ():\nyear = int (input()\nif ( year % 4 == 0 and year % 100 ! = 0):\nprint (\"True\")\nelif (year % 100 == 0 and year % 400=0):\nprint (\"True\")\nelse:\nprint (\"False\")\nif\n__ name _== \" __ main_\":\nmain ()", "ir_algo_output_edit_distance": 68, "prompting_method": "cot-test1", "lm_post_processed_code": "def main ():\nyear = int (input()\nif ( year % 4 == 0 and year % 100 != 0):\nprint (\"True\")\nelif (year % 100 == 0 and year % 400 == 0):\nprint (\"True\")\nelse:\nprint (\"False\")\n\nif __name__ == \"__main__\":\nmain ()\n", "lm_post_processed_edit_distance": 55}, {"image_id": 36, "image_height": 1696, "image_width": 2260, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 122.0, "y": 166.0, "w": 540.0, "h": 95.0, "line_num": 1, "text": "def main ():"}, {"x": 318.0, "y": 329.0, "w": 895.0, "h": 85.0, "line_num": 2, "text": "year = int (input()"}, {"x": 319.0, "y": 457.0, "w": 1785.0, "h": 97.0, "line_num": 3, "text": "if ( year % 4 == 0 and year % 100 ! = 0):"}, {"x": 549.0, "y": 603.0, "w": 614.0, "h": 98.0, "line_num": 4, "text": "print (\"True\")"}, {"x": 343.0, "y": 740.0, "w": 1841.0, "h": 105.0, "line_num": 5, "text": "elif (year % 100 == 0 and year % 400=0):"}, {"x": 574.0, "y": 895.0, "w": 613.0, "h": 99.0, "line_num": 6, "text": "print (\"True\")"}, {"x": 339.0, "y": 1046.0, "w": 262.0, "h": 93.0, "line_num": 7, "text": "else:"}, {"x": 592.0, "y": 1158.0, "w": 644.0, "h": 104.0, "line_num": 8, "text": "print (\"False\")"}, {"x": 121.0, "y": 1338.0, "w": 104.0, "h": 83.0, "line_num": 9, "text": "if"}, {"x": 226.0, "y": 1354.0, "w": 1211.0, "h": 88.0, "line_num": 10, "text": "__ name _== \" __ main_\":"}, {"x": 349.0, "y": 1505.0, "w": 317.0, "h": 74.0, "line_num": 11, "text": "main ()"}], "ir_algo_name": "none", "ir_algo_output_code": "def main ():\nyear = int (input()\nif ( year % 4 == 0 and year % 100 ! = 0):\nprint (\"True\")\nelif (year % 100 == 0 and year % 400=0):\nprint (\"True\")\nelse:\nprint (\"False\")\nif\n__ name _== \" __ main_\":\nmain ()", "ir_algo_output_edit_distance": 68, "prompting_method": "cot-test5", "lm_post_processed_code": "def main ():\nyear = int (input())\nif ( year % 4 == 0 and year % 100 != 0):\nprint (\"True\")\nelif (year % 100 == 0 and year % 400 == 0):\nprint (\"True\")\nelse:\nprint (\"False\")\n\nif __name__ == \"__main__\":\nmain ()\n", "lm_post_processed_edit_distance": 54}, {"image_id": 36, "image_height": 1696, "image_width": 2260, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 122.0, "y": 166.0, "w": 540.0, "h": 95.0, "line_num": 1, "text": "def main ():"}, {"x": 318.0, "y": 329.0, "w": 895.0, "h": 85.0, "line_num": 2, "text": "year = int (input()"}, {"x": 319.0, "y": 457.0, "w": 1785.0, "h": 97.0, "line_num": 3, "text": "if ( year % 4 == 0 and year % 100 ! = 0):"}, {"x": 549.0, "y": 603.0, "w": 614.0, "h": 98.0, "line_num": 4, "text": "print (\"True\")"}, {"x": 343.0, "y": 740.0, "w": 1841.0, "h": 105.0, "line_num": 5, "text": "elif (year % 100 == 0 and year % 400=0):"}, {"x": 574.0, "y": 895.0, "w": 613.0, "h": 99.0, "line_num": 6, "text": "print (\"True\")"}, {"x": 339.0, "y": 1046.0, "w": 262.0, "h": 93.0, "line_num": 7, "text": "else:"}, {"x": 592.0, "y": 1158.0, "w": 644.0, "h": 104.0, "line_num": 8, "text": "print (\"False\")"}, {"x": 121.0, "y": 1338.0, "w": 104.0, "h": 83.0, "line_num": 9, "text": "if"}, {"x": 226.0, "y": 1354.0, "w": 1211.0, "h": 88.0, "line_num": 10, "text": "__ name _== \" __ main_\":"}, {"x": 349.0, "y": 1505.0, "w": 317.0, "h": 74.0, "line_num": 11, "text": "main ()"}], "ir_algo_name": "none", "ir_algo_output_code": "def main ():\nyear = int (input()\nif ( year % 4 == 0 and year % 100 ! = 0):\nprint (\"True\")\nelif (year % 100 == 0 and year % 400=0):\nprint (\"True\")\nelse:\nprint (\"False\")\nif\n__ name _== \" __ main_\":\nmain ()", "ir_algo_output_edit_distance": 68, "prompting_method": "simple-test2", "lm_post_processed_code": "def main():\n    year = int(input())\n    if (year % 4 == 0 and year % 100 != 0):\n        print(\"True\")\n    elif (year % 100 == 0 and year % 400 == 0):\n        print(\"True\")\n    else:\n        print(\"False\")\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 4}, {"image_id": 36, "image_height": 1696, "image_width": 2260, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 122.0, "y": 166.0, "w": 540.0, "h": 95.0, "line_num": 1, "text": "def main ():"}, {"x": 318.0, "y": 329.0, "w": 895.0, "h": 85.0, "line_num": 2, "text": "year = int (input()"}, {"x": 319.0, "y": 457.0, "w": 1785.0, "h": 97.0, "line_num": 3, "text": "if ( year % 4 == 0 and year % 100 ! = 0):"}, {"x": 549.0, "y": 603.0, "w": 614.0, "h": 98.0, "line_num": 4, "text": "print (\"True\")"}, {"x": 343.0, "y": 740.0, "w": 1841.0, "h": 105.0, "line_num": 5, "text": "elif (year % 100 == 0 and year % 400=0):"}, {"x": 574.0, "y": 895.0, "w": 613.0, "h": 99.0, "line_num": 6, "text": "print (\"True\")"}, {"x": 339.0, "y": 1046.0, "w": 262.0, "h": 93.0, "line_num": 7, "text": "else:"}, {"x": 592.0, "y": 1158.0, "w": 644.0, "h": 104.0, "line_num": 8, "text": "print (\"False\")"}, {"x": 121.0, "y": 1338.0, "w": 104.0, "h": 83.0, "line_num": 9, "text": "if"}, {"x": 226.0, "y": 1354.0, "w": 1211.0, "h": 88.0, "line_num": 10, "text": "__ name _== \" __ main_\":"}, {"x": 349.0, "y": 1505.0, "w": 317.0, "h": 74.0, "line_num": 11, "text": "main ()"}], "ir_algo_name": "none", "ir_algo_output_code": "def main ():\nyear = int (input()\nif ( year % 4 == 0 and year % 100 ! = 0):\nprint (\"True\")\nelif (year % 100 == 0 and year % 400=0):\nprint (\"True\")\nelse:\nprint (\"False\")\nif\n__ name _== \" __ main_\":\nmain ()", "ir_algo_output_edit_distance": 68, "prompting_method": "simple-test3", "lm_post_processed_code": "def main():\n    year = int(input())\n    if (year % 4 == 0 and year % 100 != 0):\n        print(\"True\")\n    elif (year % 100 == 0 and year % 400 == 0):\n        print(\"True\")\n    else:\n        print(\"False\")\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 4}, {"image_id": 36, "image_height": 1696, "image_width": 2260, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 122.0, "y": 166.0, "w": 540.0, "h": 95.0, "line_num": 1, "text": "def main ():"}, {"x": 318.0, "y": 329.0, "w": 895.0, "h": 85.0, "line_num": 2, "text": "year = int (input()"}, {"x": 319.0, "y": 457.0, "w": 1785.0, "h": 97.0, "line_num": 3, "text": "if ( year % 4 == 0 and year % 100 ! = 0):"}, {"x": 549.0, "y": 603.0, "w": 614.0, "h": 98.0, "line_num": 4, "text": "print (\"True\")"}, {"x": 343.0, "y": 740.0, "w": 1841.0, "h": 105.0, "line_num": 5, "text": "elif (year % 100 == 0 and year % 400=0):"}, {"x": 574.0, "y": 895.0, "w": 613.0, "h": 99.0, "line_num": 6, "text": "print (\"True\")"}, {"x": 339.0, "y": 1046.0, "w": 262.0, "h": 93.0, "line_num": 7, "text": "else:"}, {"x": 592.0, "y": 1158.0, "w": 644.0, "h": 104.0, "line_num": 8, "text": "print (\"False\")"}, {"x": 121.0, "y": 1338.0, "w": 104.0, "h": 83.0, "line_num": 9, "text": "if"}, {"x": 226.0, "y": 1354.0, "w": 1211.0, "h": 88.0, "line_num": 10, "text": "__ name _== \" __ main_\":"}, {"x": 349.0, "y": 1505.0, "w": 317.0, "h": 74.0, "line_num": 11, "text": "main ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 139.22727272727272, "ir_algo_output_code": "def main ():\n    year = int (input()\n    if ( year % 4 == 0 and year % 100 ! = 0):\n        print (\"True\")\n    elif (year % 100 == 0 and year % 400=0):\n        print (\"True\")\n    else:\n        print (\"False\")\nif\n__ name _== \" __ main_\":\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 122.0, "y": 166.0, "w": 540.0, "h": 95.0, "line_num": 1, "text": "def main ():", "cluster_label": 2, "indentation": 0}, {"x": 318.0, "y": 329.0, "w": 895.0, "h": 85.0, "line_num": 2, "text": "year = int (input()", "cluster_label": 0, "indentation": 1}, {"x": 319.0, "y": 457.0, "w": 1785.0, "h": 97.0, "line_num": 3, "text": "if ( year % 4 == 0 and year % 100 ! = 0):", "cluster_label": 0, "indentation": 1}, {"x": 549.0, "y": 603.0, "w": 614.0, "h": 98.0, "line_num": 4, "text": "print (\"True\")", "cluster_label": 1, "indentation": 2}, {"x": 343.0, "y": 740.0, "w": 1841.0, "h": 105.0, "line_num": 5, "text": "elif (year % 100 == 0 and year % 400=0):", "cluster_label": 0, "indentation": 1}, {"x": 574.0, "y": 895.0, "w": 613.0, "h": 99.0, "line_num": 6, "text": "print (\"True\")", "cluster_label": 1, "indentation": 2}, {"x": 339.0, "y": 1046.0, "w": 262.0, "h": 93.0, "line_num": 7, "text": "else:", "cluster_label": 0, "indentation": 1}, {"x": 592.0, "y": 1158.0, "w": 644.0, "h": 104.0, "line_num": 8, "text": "print (\"False\")", "cluster_label": 1, "indentation": 2}, {"x": 121.0, "y": 1338.0, "w": 104.0, "h": 83.0, "line_num": 9, "text": "if", "cluster_label": 2, "indentation": 0}, {"x": 226.0, "y": 1354.0, "w": 1211.0, "h": 88.0, "line_num": 10, "text": "__ name _== \" __ main_\":", "cluster_label": 2, "indentation": 0}, {"x": 349.0, "y": 1505.0, "w": 317.0, "h": 74.0, "line_num": 11, "text": "main ()", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 24, "prompting_method": "none", "lm_post_processed_code": "def main ():\n    year = int (input()\n    if ( year % 4 == 0 and year % 100 ! = 0):\n        print (\"True\")\n    elif (year % 100 == 0 and year % 400=0):\n        print (\"True\")\n    else:\n        print (\"False\")\nif\n__ name _== \" __ main_\":\n    main ()\n", "lm_post_processed_edit_distance": 24}, {"image_id": 36, "image_height": 1696, "image_width": 2260, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 122.0, "y": 166.0, "w": 540.0, "h": 95.0, "line_num": 1, "text": "def main ():"}, {"x": 318.0, "y": 329.0, "w": 895.0, "h": 85.0, "line_num": 2, "text": "year = int (input()"}, {"x": 319.0, "y": 457.0, "w": 1785.0, "h": 97.0, "line_num": 3, "text": "if ( year % 4 == 0 and year % 100 ! = 0):"}, {"x": 549.0, "y": 603.0, "w": 614.0, "h": 98.0, "line_num": 4, "text": "print (\"True\")"}, {"x": 343.0, "y": 740.0, "w": 1841.0, "h": 105.0, "line_num": 5, "text": "elif (year % 100 == 0 and year % 400=0):"}, {"x": 574.0, "y": 895.0, "w": 613.0, "h": 99.0, "line_num": 6, "text": "print (\"True\")"}, {"x": 339.0, "y": 1046.0, "w": 262.0, "h": 93.0, "line_num": 7, "text": "else:"}, {"x": 592.0, "y": 1158.0, "w": 644.0, "h": 104.0, "line_num": 8, "text": "print (\"False\")"}, {"x": 121.0, "y": 1338.0, "w": 104.0, "h": 83.0, "line_num": 9, "text": "if"}, {"x": 226.0, "y": 1354.0, "w": 1211.0, "h": 88.0, "line_num": 10, "text": "__ name _== \" __ main_\":"}, {"x": 349.0, "y": 1505.0, "w": 317.0, "h": 74.0, "line_num": 11, "text": "main ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 139.22727272727272, "ir_algo_output_code": "def main ():\n    year = int (input()\n    if ( year % 4 == 0 and year % 100 ! = 0):\n        print (\"True\")\n    elif (year % 100 == 0 and year % 400=0):\n        print (\"True\")\n    else:\n        print (\"False\")\nif\n__ name _== \" __ main_\":\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 122.0, "y": 166.0, "w": 540.0, "h": 95.0, "line_num": 1, "text": "def main ():", "cluster_label": 2, "indentation": 0}, {"x": 318.0, "y": 329.0, "w": 895.0, "h": 85.0, "line_num": 2, "text": "year = int (input()", "cluster_label": 0, "indentation": 1}, {"x": 319.0, "y": 457.0, "w": 1785.0, "h": 97.0, "line_num": 3, "text": "if ( year % 4 == 0 and year % 100 ! = 0):", "cluster_label": 0, "indentation": 1}, {"x": 549.0, "y": 603.0, "w": 614.0, "h": 98.0, "line_num": 4, "text": "print (\"True\")", "cluster_label": 1, "indentation": 2}, {"x": 343.0, "y": 740.0, "w": 1841.0, "h": 105.0, "line_num": 5, "text": "elif (year % 100 == 0 and year % 400=0):", "cluster_label": 0, "indentation": 1}, {"x": 574.0, "y": 895.0, "w": 613.0, "h": 99.0, "line_num": 6, "text": "print (\"True\")", "cluster_label": 1, "indentation": 2}, {"x": 339.0, "y": 1046.0, "w": 262.0, "h": 93.0, "line_num": 7, "text": "else:", "cluster_label": 0, "indentation": 1}, {"x": 592.0, "y": 1158.0, "w": 644.0, "h": 104.0, "line_num": 8, "text": "print (\"False\")", "cluster_label": 1, "indentation": 2}, {"x": 121.0, "y": 1338.0, "w": 104.0, "h": 83.0, "line_num": 9, "text": "if", "cluster_label": 2, "indentation": 0}, {"x": 226.0, "y": 1354.0, "w": 1211.0, "h": 88.0, "line_num": 10, "text": "__ name _== \" __ main_\":", "cluster_label": 2, "indentation": 0}, {"x": 349.0, "y": 1505.0, "w": 317.0, "h": 74.0, "line_num": 11, "text": "main ()", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 24, "prompting_method": "cot-test1", "lm_post_processed_code": "def main ():\n    year = int (input())\n    if ( year % 4 == 0 and year % 100 != 0):\n        print (\"True\")\n    elif (year % 100 == 0 and year % 400 == 0):\n        print (\"True\")\n    else:\n        print (\"False\")\n\nif __name__ == \"__main__\":\n    main ()\n", "lm_post_processed_edit_distance": 11}, {"image_id": 36, "image_height": 1696, "image_width": 2260, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 122.0, "y": 166.0, "w": 540.0, "h": 95.0, "line_num": 1, "text": "def main ():"}, {"x": 318.0, "y": 329.0, "w": 895.0, "h": 85.0, "line_num": 2, "text": "year = int (input()"}, {"x": 319.0, "y": 457.0, "w": 1785.0, "h": 97.0, "line_num": 3, "text": "if ( year % 4 == 0 and year % 100 ! = 0):"}, {"x": 549.0, "y": 603.0, "w": 614.0, "h": 98.0, "line_num": 4, "text": "print (\"True\")"}, {"x": 343.0, "y": 740.0, "w": 1841.0, "h": 105.0, "line_num": 5, "text": "elif (year % 100 == 0 and year % 400=0):"}, {"x": 574.0, "y": 895.0, "w": 613.0, "h": 99.0, "line_num": 6, "text": "print (\"True\")"}, {"x": 339.0, "y": 1046.0, "w": 262.0, "h": 93.0, "line_num": 7, "text": "else:"}, {"x": 592.0, "y": 1158.0, "w": 644.0, "h": 104.0, "line_num": 8, "text": "print (\"False\")"}, {"x": 121.0, "y": 1338.0, "w": 104.0, "h": 83.0, "line_num": 9, "text": "if"}, {"x": 226.0, "y": 1354.0, "w": 1211.0, "h": 88.0, "line_num": 10, "text": "__ name _== \" __ main_\":"}, {"x": 349.0, "y": 1505.0, "w": 317.0, "h": 74.0, "line_num": 11, "text": "main ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 139.22727272727272, "ir_algo_output_code": "def main ():\n    year = int (input()\n    if ( year % 4 == 0 and year % 100 ! = 0):\n        print (\"True\")\n    elif (year % 100 == 0 and year % 400=0):\n        print (\"True\")\n    else:\n        print (\"False\")\nif\n__ name _== \" __ main_\":\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 122.0, "y": 166.0, "w": 540.0, "h": 95.0, "line_num": 1, "text": "def main ():", "cluster_label": 2, "indentation": 0}, {"x": 318.0, "y": 329.0, "w": 895.0, "h": 85.0, "line_num": 2, "text": "year = int (input()", "cluster_label": 0, "indentation": 1}, {"x": 319.0, "y": 457.0, "w": 1785.0, "h": 97.0, "line_num": 3, "text": "if ( year % 4 == 0 and year % 100 ! = 0):", "cluster_label": 0, "indentation": 1}, {"x": 549.0, "y": 603.0, "w": 614.0, "h": 98.0, "line_num": 4, "text": "print (\"True\")", "cluster_label": 1, "indentation": 2}, {"x": 343.0, "y": 740.0, "w": 1841.0, "h": 105.0, "line_num": 5, "text": "elif (year % 100 == 0 and year % 400=0):", "cluster_label": 0, "indentation": 1}, {"x": 574.0, "y": 895.0, "w": 613.0, "h": 99.0, "line_num": 6, "text": "print (\"True\")", "cluster_label": 1, "indentation": 2}, {"x": 339.0, "y": 1046.0, "w": 262.0, "h": 93.0, "line_num": 7, "text": "else:", "cluster_label": 0, "indentation": 1}, {"x": 592.0, "y": 1158.0, "w": 644.0, "h": 104.0, "line_num": 8, "text": "print (\"False\")", "cluster_label": 1, "indentation": 2}, {"x": 121.0, "y": 1338.0, "w": 104.0, "h": 83.0, "line_num": 9, "text": "if", "cluster_label": 2, "indentation": 0}, {"x": 226.0, "y": 1354.0, "w": 1211.0, "h": 88.0, "line_num": 10, "text": "__ name _== \" __ main_\":", "cluster_label": 2, "indentation": 0}, {"x": 349.0, "y": 1505.0, "w": 317.0, "h": 74.0, "line_num": 11, "text": "main ()", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 24, "prompting_method": "cot-test5", "lm_post_processed_code": "def main ():\n    year = int (input())\n    if ( year % 4 == 0 and year % 100 != 0):\n        print (\"True\")\n    elif (year % 100 == 0 and year % 400 == 0):\n        print (\"True\")\n    else:\n        print (\"False\")\n\nif __name__ == \"__main__\":\n    main ()\n", "lm_post_processed_edit_distance": 11}, {"image_id": 36, "image_height": 1696, "image_width": 2260, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 122.0, "y": 166.0, "w": 540.0, "h": 95.0, "line_num": 1, "text": "def main ():"}, {"x": 318.0, "y": 329.0, "w": 895.0, "h": 85.0, "line_num": 2, "text": "year = int (input()"}, {"x": 319.0, "y": 457.0, "w": 1785.0, "h": 97.0, "line_num": 3, "text": "if ( year % 4 == 0 and year % 100 ! = 0):"}, {"x": 549.0, "y": 603.0, "w": 614.0, "h": 98.0, "line_num": 4, "text": "print (\"True\")"}, {"x": 343.0, "y": 740.0, "w": 1841.0, "h": 105.0, "line_num": 5, "text": "elif (year % 100 == 0 and year % 400=0):"}, {"x": 574.0, "y": 895.0, "w": 613.0, "h": 99.0, "line_num": 6, "text": "print (\"True\")"}, {"x": 339.0, "y": 1046.0, "w": 262.0, "h": 93.0, "line_num": 7, "text": "else:"}, {"x": 592.0, "y": 1158.0, "w": 644.0, "h": 104.0, "line_num": 8, "text": "print (\"False\")"}, {"x": 121.0, "y": 1338.0, "w": 104.0, "h": 83.0, "line_num": 9, "text": "if"}, {"x": 226.0, "y": 1354.0, "w": 1211.0, "h": 88.0, "line_num": 10, "text": "__ name _== \" __ main_\":"}, {"x": 349.0, "y": 1505.0, "w": 317.0, "h": 74.0, "line_num": 11, "text": "main ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 139.22727272727272, "ir_algo_output_code": "def main ():\n    year = int (input()\n    if ( year % 4 == 0 and year % 100 ! = 0):\n        print (\"True\")\n    elif (year % 100 == 0 and year % 400=0):\n        print (\"True\")\n    else:\n        print (\"False\")\nif\n__ name _== \" __ main_\":\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 122.0, "y": 166.0, "w": 540.0, "h": 95.0, "line_num": 1, "text": "def main ():", "cluster_label": 2, "indentation": 0}, {"x": 318.0, "y": 329.0, "w": 895.0, "h": 85.0, "line_num": 2, "text": "year = int (input()", "cluster_label": 0, "indentation": 1}, {"x": 319.0, "y": 457.0, "w": 1785.0, "h": 97.0, "line_num": 3, "text": "if ( year % 4 == 0 and year % 100 ! = 0):", "cluster_label": 0, "indentation": 1}, {"x": 549.0, "y": 603.0, "w": 614.0, "h": 98.0, "line_num": 4, "text": "print (\"True\")", "cluster_label": 1, "indentation": 2}, {"x": 343.0, "y": 740.0, "w": 1841.0, "h": 105.0, "line_num": 5, "text": "elif (year % 100 == 0 and year % 400=0):", "cluster_label": 0, "indentation": 1}, {"x": 574.0, "y": 895.0, "w": 613.0, "h": 99.0, "line_num": 6, "text": "print (\"True\")", "cluster_label": 1, "indentation": 2}, {"x": 339.0, "y": 1046.0, "w": 262.0, "h": 93.0, "line_num": 7, "text": "else:", "cluster_label": 0, "indentation": 1}, {"x": 592.0, "y": 1158.0, "w": 644.0, "h": 104.0, "line_num": 8, "text": "print (\"False\")", "cluster_label": 1, "indentation": 2}, {"x": 121.0, "y": 1338.0, "w": 104.0, "h": 83.0, "line_num": 9, "text": "if", "cluster_label": 2, "indentation": 0}, {"x": 226.0, "y": 1354.0, "w": 1211.0, "h": 88.0, "line_num": 10, "text": "__ name _== \" __ main_\":", "cluster_label": 2, "indentation": 0}, {"x": 349.0, "y": 1505.0, "w": 317.0, "h": 74.0, "line_num": 11, "text": "main ()", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 24, "prompting_method": "simple-test2", "lm_post_processed_code": "def main():\n    year = int(input())\n    if (year % 4 == 0 and year % 100 != 0):\n        print(\"True\")\n    elif (year % 100 == 0 and year % 400 == 0):\n        print(\"True\")\n    else:\n        print(\"False\")\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 4}, {"image_id": 36, "image_height": 1696, "image_width": 2260, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 122.0, "y": 166.0, "w": 540.0, "h": 95.0, "line_num": 1, "text": "def main ():"}, {"x": 318.0, "y": 329.0, "w": 895.0, "h": 85.0, "line_num": 2, "text": "year = int (input()"}, {"x": 319.0, "y": 457.0, "w": 1785.0, "h": 97.0, "line_num": 3, "text": "if ( year % 4 == 0 and year % 100 ! = 0):"}, {"x": 549.0, "y": 603.0, "w": 614.0, "h": 98.0, "line_num": 4, "text": "print (\"True\")"}, {"x": 343.0, "y": 740.0, "w": 1841.0, "h": 105.0, "line_num": 5, "text": "elif (year % 100 == 0 and year % 400=0):"}, {"x": 574.0, "y": 895.0, "w": 613.0, "h": 99.0, "line_num": 6, "text": "print (\"True\")"}, {"x": 339.0, "y": 1046.0, "w": 262.0, "h": 93.0, "line_num": 7, "text": "else:"}, {"x": 592.0, "y": 1158.0, "w": 644.0, "h": 104.0, "line_num": 8, "text": "print (\"False\")"}, {"x": 121.0, "y": 1338.0, "w": 104.0, "h": 83.0, "line_num": 9, "text": "if"}, {"x": 226.0, "y": 1354.0, "w": 1211.0, "h": 88.0, "line_num": 10, "text": "__ name _== \" __ main_\":"}, {"x": 349.0, "y": 1505.0, "w": 317.0, "h": 74.0, "line_num": 11, "text": "main ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 139.22727272727272, "ir_algo_output_code": "def main ():\n    year = int (input()\n    if ( year % 4 == 0 and year % 100 ! = 0):\n        print (\"True\")\n    elif (year % 100 == 0 and year % 400=0):\n        print (\"True\")\n    else:\n        print (\"False\")\nif\n__ name _== \" __ main_\":\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 122.0, "y": 166.0, "w": 540.0, "h": 95.0, "line_num": 1, "text": "def main ():", "cluster_label": 2, "indentation": 0}, {"x": 318.0, "y": 329.0, "w": 895.0, "h": 85.0, "line_num": 2, "text": "year = int (input()", "cluster_label": 0, "indentation": 1}, {"x": 319.0, "y": 457.0, "w": 1785.0, "h": 97.0, "line_num": 3, "text": "if ( year % 4 == 0 and year % 100 ! = 0):", "cluster_label": 0, "indentation": 1}, {"x": 549.0, "y": 603.0, "w": 614.0, "h": 98.0, "line_num": 4, "text": "print (\"True\")", "cluster_label": 1, "indentation": 2}, {"x": 343.0, "y": 740.0, "w": 1841.0, "h": 105.0, "line_num": 5, "text": "elif (year % 100 == 0 and year % 400=0):", "cluster_label": 0, "indentation": 1}, {"x": 574.0, "y": 895.0, "w": 613.0, "h": 99.0, "line_num": 6, "text": "print (\"True\")", "cluster_label": 1, "indentation": 2}, {"x": 339.0, "y": 1046.0, "w": 262.0, "h": 93.0, "line_num": 7, "text": "else:", "cluster_label": 0, "indentation": 1}, {"x": 592.0, "y": 1158.0, "w": 644.0, "h": 104.0, "line_num": 8, "text": "print (\"False\")", "cluster_label": 1, "indentation": 2}, {"x": 121.0, "y": 1338.0, "w": 104.0, "h": 83.0, "line_num": 9, "text": "if", "cluster_label": 2, "indentation": 0}, {"x": 226.0, "y": 1354.0, "w": 1211.0, "h": 88.0, "line_num": 10, "text": "__ name _== \" __ main_\":", "cluster_label": 2, "indentation": 0}, {"x": 349.0, "y": 1505.0, "w": 317.0, "h": 74.0, "line_num": 11, "text": "main ()", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 24, "prompting_method": "simple-test3", "lm_post_processed_code": "def main():\n    year = int(input())\n    if (year % 4 == 0 and year % 100 != 0):\n        print(\"True\")\n    elif (year % 100 == 0 and year % 400 == 0):\n        print(\"True\")\n    else:\n        print(\"False\")\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 4}, {"image_id": 36, "image_height": 1696, "image_width": 2260, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 122.0, "y": 166.0, "w": 540.0, "h": 95.0, "line_num": 1, "text": "def main ():"}, {"x": 318.0, "y": 329.0, "w": 895.0, "h": 85.0, "line_num": 2, "text": "year = int (input()"}, {"x": 319.0, "y": 457.0, "w": 1785.0, "h": 97.0, "line_num": 3, "text": "if ( year % 4 == 0 and year % 100 ! = 0):"}, {"x": 549.0, "y": 603.0, "w": 614.0, "h": 98.0, "line_num": 4, "text": "print (\"True\")"}, {"x": 343.0, "y": 740.0, "w": 1841.0, "h": 105.0, "line_num": 5, "text": "elif (year % 100 == 0 and year % 400=0):"}, {"x": 574.0, "y": 895.0, "w": 613.0, "h": 99.0, "line_num": 6, "text": "print (\"True\")"}, {"x": 339.0, "y": 1046.0, "w": 262.0, "h": 93.0, "line_num": 7, "text": "else:"}, {"x": 592.0, "y": 1158.0, "w": 644.0, "h": 104.0, "line_num": 8, "text": "print (\"False\")"}, {"x": 121.0, "y": 1338.0, "w": 104.0, "h": 83.0, "line_num": 9, "text": "if"}, {"x": 226.0, "y": 1354.0, "w": 1211.0, "h": 88.0, "line_num": 10, "text": "__ name _== \" __ main_\":"}, {"x": 349.0, "y": 1505.0, "w": 317.0, "h": 74.0, "line_num": 11, "text": "main ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main ():\n    year = int (input()\n    if ( year % 4 == 0 and year % 100 ! = 0):\n        print (\"True\")\n    elif (year % 100 == 0 and year % 400=0):\n        print (\"True\")\n    else:\n        print (\"False\")\nif\n    __ name _== \" __ main_\":\n        main ()\n", "ir_algo_output_indented_lines": [{"x": 122.0, "y": 166.0, "w": 540.0, "h": 95.0, "line_num": 1, "text": "def main ():", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 318.0, "y": 329.0, "w": 895.0, "h": 85.0, "line_num": 2, "text": "year = int (input()", "delta": 196.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 319.0, "y": 457.0, "w": 1785.0, "h": 97.0, "line_num": 3, "text": "if ( year % 4 == 0 and year % 100 ! = 0):", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 549.0, "y": 603.0, "w": 614.0, "h": 98.0, "line_num": 4, "text": "print (\"True\")", "delta": 230.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 343.0, "y": 740.0, "w": 1841.0, "h": 105.0, "line_num": 5, "text": "elif (year % 100 == 0 and year % 400=0):", "delta": -206.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 574.0, "y": 895.0, "w": 613.0, "h": 99.0, "line_num": 6, "text": "print (\"True\")", "delta": 231.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 339.0, "y": 1046.0, "w": 262.0, "h": 93.0, "line_num": 7, "text": "else:", "delta": -235.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 592.0, "y": 1158.0, "w": 644.0, "h": 104.0, "line_num": 8, "text": "print (\"False\")", "delta": 253.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 121.0, "y": 1338.0, "w": 104.0, "h": 83.0, "line_num": 9, "text": "if", "delta": -471.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 226.0, "y": 1354.0, "w": 1211.0, "h": 88.0, "line_num": 10, "text": "__ name _== \" __ main_\":", "delta": 105.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 349.0, "y": 1505.0, "w": 317.0, "h": 74.0, "line_num": 11, "text": "main ()", "delta": 123.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}], "ir_algo_output_edit_distance": 31, "prompting_method": "none", "lm_post_processed_code": "def main ():\n    year = int (input()\n    if ( year % 4 == 0 and year % 100 ! = 0):\n        print (\"True\")\n    elif (year % 100 == 0 and year % 400=0):\n        print (\"True\")\n    else:\n        print (\"False\")\nif\n    __ name _== \" __ main_\":\n        main ()\n", "lm_post_processed_edit_distance": 31}, {"image_id": 36, "image_height": 1696, "image_width": 2260, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 122.0, "y": 166.0, "w": 540.0, "h": 95.0, "line_num": 1, "text": "def main ():"}, {"x": 318.0, "y": 329.0, "w": 895.0, "h": 85.0, "line_num": 2, "text": "year = int (input()"}, {"x": 319.0, "y": 457.0, "w": 1785.0, "h": 97.0, "line_num": 3, "text": "if ( year % 4 == 0 and year % 100 ! = 0):"}, {"x": 549.0, "y": 603.0, "w": 614.0, "h": 98.0, "line_num": 4, "text": "print (\"True\")"}, {"x": 343.0, "y": 740.0, "w": 1841.0, "h": 105.0, "line_num": 5, "text": "elif (year % 100 == 0 and year % 400=0):"}, {"x": 574.0, "y": 895.0, "w": 613.0, "h": 99.0, "line_num": 6, "text": "print (\"True\")"}, {"x": 339.0, "y": 1046.0, "w": 262.0, "h": 93.0, "line_num": 7, "text": "else:"}, {"x": 592.0, "y": 1158.0, "w": 644.0, "h": 104.0, "line_num": 8, "text": "print (\"False\")"}, {"x": 121.0, "y": 1338.0, "w": 104.0, "h": 83.0, "line_num": 9, "text": "if"}, {"x": 226.0, "y": 1354.0, "w": 1211.0, "h": 88.0, "line_num": 10, "text": "__ name _== \" __ main_\":"}, {"x": 349.0, "y": 1505.0, "w": 317.0, "h": 74.0, "line_num": 11, "text": "main ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main ():\n    year = int (input()\n    if ( year % 4 == 0 and year % 100 ! = 0):\n        print (\"True\")\n    elif (year % 100 == 0 and year % 400=0):\n        print (\"True\")\n    else:\n        print (\"False\")\nif\n    __ name _== \" __ main_\":\n        main ()\n", "ir_algo_output_indented_lines": [{"x": 122.0, "y": 166.0, "w": 540.0, "h": 95.0, "line_num": 1, "text": "def main ():", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 318.0, "y": 329.0, "w": 895.0, "h": 85.0, "line_num": 2, "text": "year = int (input()", "delta": 196.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 319.0, "y": 457.0, "w": 1785.0, "h": 97.0, "line_num": 3, "text": "if ( year % 4 == 0 and year % 100 ! = 0):", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 549.0, "y": 603.0, "w": 614.0, "h": 98.0, "line_num": 4, "text": "print (\"True\")", "delta": 230.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 343.0, "y": 740.0, "w": 1841.0, "h": 105.0, "line_num": 5, "text": "elif (year % 100 == 0 and year % 400=0):", "delta": -206.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 574.0, "y": 895.0, "w": 613.0, "h": 99.0, "line_num": 6, "text": "print (\"True\")", "delta": 231.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 339.0, "y": 1046.0, "w": 262.0, "h": 93.0, "line_num": 7, "text": "else:", "delta": -235.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 592.0, "y": 1158.0, "w": 644.0, "h": 104.0, "line_num": 8, "text": "print (\"False\")", "delta": 253.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 121.0, "y": 1338.0, "w": 104.0, "h": 83.0, "line_num": 9, "text": "if", "delta": -471.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 226.0, "y": 1354.0, "w": 1211.0, "h": 88.0, "line_num": 10, "text": "__ name _== \" __ main_\":", "delta": 105.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 349.0, "y": 1505.0, "w": 317.0, "h": 74.0, "line_num": 11, "text": "main ()", "delta": 123.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}], "ir_algo_output_edit_distance": 31, "prompting_method": "cot-test1", "lm_post_processed_code": "def main ():\n    year = int (input())\n    if ( year % 4 == 0 and year % 100 != 0):\n        print (\"True\")\n    elif (year % 100 == 0 and year % 400 == 0):\n        print (\"True\")\n    else:\n        print (\"False\")\n\nif __name__ == \"__main__\":\n        main ()\n", "lm_post_processed_edit_distance": 15}, {"image_id": 36, "image_height": 1696, "image_width": 2260, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 122.0, "y": 166.0, "w": 540.0, "h": 95.0, "line_num": 1, "text": "def main ():"}, {"x": 318.0, "y": 329.0, "w": 895.0, "h": 85.0, "line_num": 2, "text": "year = int (input()"}, {"x": 319.0, "y": 457.0, "w": 1785.0, "h": 97.0, "line_num": 3, "text": "if ( year % 4 == 0 and year % 100 ! = 0):"}, {"x": 549.0, "y": 603.0, "w": 614.0, "h": 98.0, "line_num": 4, "text": "print (\"True\")"}, {"x": 343.0, "y": 740.0, "w": 1841.0, "h": 105.0, "line_num": 5, "text": "elif (year % 100 == 0 and year % 400=0):"}, {"x": 574.0, "y": 895.0, "w": 613.0, "h": 99.0, "line_num": 6, "text": "print (\"True\")"}, {"x": 339.0, "y": 1046.0, "w": 262.0, "h": 93.0, "line_num": 7, "text": "else:"}, {"x": 592.0, "y": 1158.0, "w": 644.0, "h": 104.0, "line_num": 8, "text": "print (\"False\")"}, {"x": 121.0, "y": 1338.0, "w": 104.0, "h": 83.0, "line_num": 9, "text": "if"}, {"x": 226.0, "y": 1354.0, "w": 1211.0, "h": 88.0, "line_num": 10, "text": "__ name _== \" __ main_\":"}, {"x": 349.0, "y": 1505.0, "w": 317.0, "h": 74.0, "line_num": 11, "text": "main ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main ():\n    year = int (input()\n    if ( year % 4 == 0 and year % 100 ! = 0):\n        print (\"True\")\n    elif (year % 100 == 0 and year % 400=0):\n        print (\"True\")\n    else:\n        print (\"False\")\nif\n    __ name _== \" __ main_\":\n        main ()\n", "ir_algo_output_indented_lines": [{"x": 122.0, "y": 166.0, "w": 540.0, "h": 95.0, "line_num": 1, "text": "def main ():", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 318.0, "y": 329.0, "w": 895.0, "h": 85.0, "line_num": 2, "text": "year = int (input()", "delta": 196.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 319.0, "y": 457.0, "w": 1785.0, "h": 97.0, "line_num": 3, "text": "if ( year % 4 == 0 and year % 100 ! = 0):", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 549.0, "y": 603.0, "w": 614.0, "h": 98.0, "line_num": 4, "text": "print (\"True\")", "delta": 230.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 343.0, "y": 740.0, "w": 1841.0, "h": 105.0, "line_num": 5, "text": "elif (year % 100 == 0 and year % 400=0):", "delta": -206.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 574.0, "y": 895.0, "w": 613.0, "h": 99.0, "line_num": 6, "text": "print (\"True\")", "delta": 231.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 339.0, "y": 1046.0, "w": 262.0, "h": 93.0, "line_num": 7, "text": "else:", "delta": -235.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 592.0, "y": 1158.0, "w": 644.0, "h": 104.0, "line_num": 8, "text": "print (\"False\")", "delta": 253.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 121.0, "y": 1338.0, "w": 104.0, "h": 83.0, "line_num": 9, "text": "if", "delta": -471.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 226.0, "y": 1354.0, "w": 1211.0, "h": 88.0, "line_num": 10, "text": "__ name _== \" __ main_\":", "delta": 105.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 349.0, "y": 1505.0, "w": 317.0, "h": 74.0, "line_num": 11, "text": "main ()", "delta": 123.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}], "ir_algo_output_edit_distance": 31, "prompting_method": "cot-test5", "lm_post_processed_code": "def main ():\n    year = int (input())\n    if ( year % 4 == 0 and year % 100 != 0):\n        print (\"True\")\n    elif (year % 100 == 0 and year % 400 == 0):\n        print (\"True\")\n    else:\n        print (\"False\")\n\nif __name__ == \"__main__\":\n    main ()\n", "lm_post_processed_edit_distance": 11}, {"image_id": 36, "image_height": 1696, "image_width": 2260, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 122.0, "y": 166.0, "w": 540.0, "h": 95.0, "line_num": 1, "text": "def main ():"}, {"x": 318.0, "y": 329.0, "w": 895.0, "h": 85.0, "line_num": 2, "text": "year = int (input()"}, {"x": 319.0, "y": 457.0, "w": 1785.0, "h": 97.0, "line_num": 3, "text": "if ( year % 4 == 0 and year % 100 ! = 0):"}, {"x": 549.0, "y": 603.0, "w": 614.0, "h": 98.0, "line_num": 4, "text": "print (\"True\")"}, {"x": 343.0, "y": 740.0, "w": 1841.0, "h": 105.0, "line_num": 5, "text": "elif (year % 100 == 0 and year % 400=0):"}, {"x": 574.0, "y": 895.0, "w": 613.0, "h": 99.0, "line_num": 6, "text": "print (\"True\")"}, {"x": 339.0, "y": 1046.0, "w": 262.0, "h": 93.0, "line_num": 7, "text": "else:"}, {"x": 592.0, "y": 1158.0, "w": 644.0, "h": 104.0, "line_num": 8, "text": "print (\"False\")"}, {"x": 121.0, "y": 1338.0, "w": 104.0, "h": 83.0, "line_num": 9, "text": "if"}, {"x": 226.0, "y": 1354.0, "w": 1211.0, "h": 88.0, "line_num": 10, "text": "__ name _== \" __ main_\":"}, {"x": 349.0, "y": 1505.0, "w": 317.0, "h": 74.0, "line_num": 11, "text": "main ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main ():\n    year = int (input()\n    if ( year % 4 == 0 and year % 100 ! = 0):\n        print (\"True\")\n    elif (year % 100 == 0 and year % 400=0):\n        print (\"True\")\n    else:\n        print (\"False\")\nif\n    __ name _== \" __ main_\":\n        main ()\n", "ir_algo_output_indented_lines": [{"x": 122.0, "y": 166.0, "w": 540.0, "h": 95.0, "line_num": 1, "text": "def main ():", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 318.0, "y": 329.0, "w": 895.0, "h": 85.0, "line_num": 2, "text": "year = int (input()", "delta": 196.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 319.0, "y": 457.0, "w": 1785.0, "h": 97.0, "line_num": 3, "text": "if ( year % 4 == 0 and year % 100 ! = 0):", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 549.0, "y": 603.0, "w": 614.0, "h": 98.0, "line_num": 4, "text": "print (\"True\")", "delta": 230.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 343.0, "y": 740.0, "w": 1841.0, "h": 105.0, "line_num": 5, "text": "elif (year % 100 == 0 and year % 400=0):", "delta": -206.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 574.0, "y": 895.0, "w": 613.0, "h": 99.0, "line_num": 6, "text": "print (\"True\")", "delta": 231.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 339.0, "y": 1046.0, "w": 262.0, "h": 93.0, "line_num": 7, "text": "else:", "delta": -235.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 592.0, "y": 1158.0, "w": 644.0, "h": 104.0, "line_num": 8, "text": "print (\"False\")", "delta": 253.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 121.0, "y": 1338.0, "w": 104.0, "h": 83.0, "line_num": 9, "text": "if", "delta": -471.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 226.0, "y": 1354.0, "w": 1211.0, "h": 88.0, "line_num": 10, "text": "__ name _== \" __ main_\":", "delta": 105.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 349.0, "y": 1505.0, "w": 317.0, "h": 74.0, "line_num": 11, "text": "main ()", "delta": 123.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}], "ir_algo_output_edit_distance": 31, "prompting_method": "simple-test2", "lm_post_processed_code": "def main():\n    year = int(input())\n    if (year % 4 == 0 and year % 100 != 0):\n        print(\"True\")\n    elif (year % 100 == 0 and year % 400 == 0):\n        print(\"True\")\n    else:\n        print(\"False\")\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 4}, {"image_id": 36, "image_height": 1696, "image_width": 2260, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 122.0, "y": 166.0, "w": 540.0, "h": 95.0, "line_num": 1, "text": "def main ():"}, {"x": 318.0, "y": 329.0, "w": 895.0, "h": 85.0, "line_num": 2, "text": "year = int (input()"}, {"x": 319.0, "y": 457.0, "w": 1785.0, "h": 97.0, "line_num": 3, "text": "if ( year % 4 == 0 and year % 100 ! = 0):"}, {"x": 549.0, "y": 603.0, "w": 614.0, "h": 98.0, "line_num": 4, "text": "print (\"True\")"}, {"x": 343.0, "y": 740.0, "w": 1841.0, "h": 105.0, "line_num": 5, "text": "elif (year % 100 == 0 and year % 400=0):"}, {"x": 574.0, "y": 895.0, "w": 613.0, "h": 99.0, "line_num": 6, "text": "print (\"True\")"}, {"x": 339.0, "y": 1046.0, "w": 262.0, "h": 93.0, "line_num": 7, "text": "else:"}, {"x": 592.0, "y": 1158.0, "w": 644.0, "h": 104.0, "line_num": 8, "text": "print (\"False\")"}, {"x": 121.0, "y": 1338.0, "w": 104.0, "h": 83.0, "line_num": 9, "text": "if"}, {"x": 226.0, "y": 1354.0, "w": 1211.0, "h": 88.0, "line_num": 10, "text": "__ name _== \" __ main_\":"}, {"x": 349.0, "y": 1505.0, "w": 317.0, "h": 74.0, "line_num": 11, "text": "main ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main ():\n    year = int (input()\n    if ( year % 4 == 0 and year % 100 ! = 0):\n        print (\"True\")\n    elif (year % 100 == 0 and year % 400=0):\n        print (\"True\")\n    else:\n        print (\"False\")\nif\n    __ name _== \" __ main_\":\n        main ()\n", "ir_algo_output_indented_lines": [{"x": 122.0, "y": 166.0, "w": 540.0, "h": 95.0, "line_num": 1, "text": "def main ():", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 318.0, "y": 329.0, "w": 895.0, "h": 85.0, "line_num": 2, "text": "year = int (input()", "delta": 196.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 319.0, "y": 457.0, "w": 1785.0, "h": 97.0, "line_num": 3, "text": "if ( year % 4 == 0 and year % 100 ! = 0):", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 549.0, "y": 603.0, "w": 614.0, "h": 98.0, "line_num": 4, "text": "print (\"True\")", "delta": 230.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 343.0, "y": 740.0, "w": 1841.0, "h": 105.0, "line_num": 5, "text": "elif (year % 100 == 0 and year % 400=0):", "delta": -206.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 574.0, "y": 895.0, "w": 613.0, "h": 99.0, "line_num": 6, "text": "print (\"True\")", "delta": 231.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 339.0, "y": 1046.0, "w": 262.0, "h": 93.0, "line_num": 7, "text": "else:", "delta": -235.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 592.0, "y": 1158.0, "w": 644.0, "h": 104.0, "line_num": 8, "text": "print (\"False\")", "delta": 253.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 121.0, "y": 1338.0, "w": 104.0, "h": 83.0, "line_num": 9, "text": "if", "delta": -471.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 226.0, "y": 1354.0, "w": 1211.0, "h": 88.0, "line_num": 10, "text": "__ name _== \" __ main_\":", "delta": 105.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 349.0, "y": 1505.0, "w": 317.0, "h": 74.0, "line_num": 11, "text": "main ()", "delta": 123.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}], "ir_algo_output_edit_distance": 31, "prompting_method": "simple-test3", "lm_post_processed_code": "def main():\n    year = int(input())\n    if (year % 4 == 0 and year % 100 != 0):\n        print(\"True\")\n    elif (year % 100 == 0 and year % 400 == 0):\n        print(\"True\")\n    else:\n        print(\"False\")\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 4}, {"image_id": 37, "image_height": 4032, "image_width": 3024, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 313.0, "y": 48.0, "w": 1497.0, "h": 76.0, "line_num": 1, "text": "from karel. stanford kavel import *"}, {"x": 331.0, "y": 166.0, "w": 522.0, "h": 62.0, "line_num": 2, "text": "def main ():"}, {"x": 531.0, "y": 267.0, "w": 599.0, "h": 69.0, "line_num": 3, "text": "build-column ( )"}, {"x": 541.0, "y": 360.0, "w": 374.0, "h": 76.0, "line_num": 4, "text": "Step -up ( )"}, {"x": 551.0, "y": 479.0, "w": 596.0, "h": 75.0, "line_num": 5, "text": "build - column ()"}, {"x": 557.0, "y": 606.0, "w": 358.0, "h": 74.0, "line_num": 6, "text": "Step-up()"}, {"x": 567.0, "y": 726.0, "w": 616.0, "h": 74.0, "line_num": 7, "text": "build- column ( )"}, {"x": 574.0, "y": 862.0, "w": 358.0, "h": 75.0, "line_num": 8, "text": "Step-up()"}, {"x": 579.0, "y": 988.0, "w": 645.0, "h": 76.0, "line_num": 9, "text": "build - column ()"}, {"x": 338.0, "y": 1147.0, "w": 128.0, "h": 68.0, "line_num": 10, "text": "def"}, {"x": 577.0, "y": 1157.0, "w": 711.0, "h": 80.0, "line_num": 11, "text": "build - column ( ) :"}, {"x": 566.0, "y": 1296.0, "w": 510.0, "h": 76.0, "line_num": 12, "text": "turn - left ( )"}, {"x": 580.0, "y": 1423.0, "w": 608.0, "h": 77.0, "line_num": 13, "text": "build - beeper ( )"}, {"x": 591.0, "y": 1550.0, "w": 602.0, "h": 79.0, "line_num": 14, "text": "build - beeper ( )"}, {"x": 588.0, "y": 1682.0, "w": 604.0, "h": 75.0, "line_num": 15, "text": "build - beeper ( )"}, {"x": 599.0, "y": 1798.0, "w": 582.0, "h": 74.0, "line_num": 16, "text": "build - beeper ( )"}, {"x": 599.0, "y": 1919.0, "w": 527.0, "h": 71.0, "line_num": 17, "text": "put - beeper ()"}, {"x": 593.0, "y": 2038.0, "w": 452.0, "h": 69.0, "line_num": 18, "text": "go - back ()"}, {"x": 593.0, "y": 2146.0, "w": 470.0, "h": 75.0, "line_num": 19, "text": "turn- left ( )"}, {"x": 355.0, "y": 2305.0, "w": 125.0, "h": 70.0, "line_num": 20, "text": "def"}, {"x": 590.0, "y": 2291.0, "w": 650.0, "h": 76.0, "line_num": 21, "text": "build - beeper ( ):"}, {"x": 612.0, "y": 2414.0, "w": 539.0, "h": 75.0, "line_num": 22, "text": "put- beeper ( )"}, {"x": 613.0, "y": 2544.0, "w": 272.0, "h": 54.0, "line_num": 23, "text": "move ()"}, {"x": 370.0, "y": 2668.0, "w": 128.0, "h": 72.0, "line_num": 24, "text": "det"}, {"x": 625.0, "y": 2682.0, "w": 488.0, "h": 73.0, "line_num": 25, "text": "go - back ():"}, {"x": 627.0, "y": 2800.0, "w": 611.0, "h": 68.0, "line_num": 26, "text": "turn- around ( )"}, {"x": 630.0, "y": 2919.0, "w": 400.0, "h": 72.0, "line_num": 27, "text": "Step -up ()"}, {"x": 394.0, "y": 3068.0, "w": 126.0, "h": 67.0, "line_num": 28, "text": "dex"}, {"x": 611.0, "y": 3061.0, "w": 653.0, "h": 71.0, "line_num": 29, "text": "turn- around ( ) :"}, {"x": 626.0, "y": 3167.0, "w": 483.0, "h": 67.0, "line_num": 30, "text": "turn - left ()"}, {"x": 630.0, "y": 3266.0, "w": 490.0, "h": 67.0, "line_num": 31, "text": "turn - left ()"}, {"x": 399.0, "y": 3387.0, "w": 132.0, "h": 67.0, "line_num": 32, "text": "dex"}, {"x": 645.0, "y": 3383.0, "w": 446.0, "h": 72.0, "line_num": 33, "text": "step -up():"}, {"x": 665.0, "y": 3494.0, "w": 265.0, "h": 60.0, "line_num": 34, "text": "move ( )"}, {"x": 660.0, "y": 3572.0, "w": 264.0, "h": 54.0, "line_num": 35, "text": "move ( )"}, {"x": 664.0, "y": 3660.0, "w": 278.0, "h": 58.0, "line_num": 36, "text": "move ( )"}, {"x": 673.0, "y": 3739.0, "w": 292.0, "h": 58.0, "line_num": 37, "text": "move ( )"}, {"x": 407.0, "y": 3836.0, "w": 1187.0, "h": 79.0, "line_num": 38, "text": "if - name _ = = - main _:"}, {"x": 641.0, "y": 3940.0, "w": 304.0, "h": 65.0, "line_num": 39, "text": "main ( )"}], "ir_algo_name": "none", "ir_algo_output_code": "from karel. stanford kavel import *\ndef main ():\nbuild-column ( )\nStep -up ( )\nbuild - column ()\nStep-up()\nbuild- column ( )\nStep-up()\nbuild - column ()\ndef\nbuild - column ( ) :\nturn - left ( )\nbuild - beeper ( )\nbuild - beeper ( )\nbuild - beeper ( )\nbuild - beeper ( )\nput - beeper ()\ngo - back ()\nturn- left ( )\ndef\nbuild - beeper ( ):\nput- beeper ( )\nmove ()\ndet\ngo - back ():\nturn- around ( )\nStep -up ()\ndex\nturn- around ( ) :\nturn - left ()\nturn - left ()\ndex\nstep -up():\nmove ( )\nmove ( )\nmove ( )\nmove ( )\nif - name _ = = - main _:\nmain ( )", "ir_algo_output_edit_distance": 246, "prompting_method": "none", "lm_post_processed_code": "from karel. stanford kavel import *\ndef main ():\nbuild-column ( )\nStep -up ( )\nbuild - column ()\nStep-up()\nbuild- column ( )\nStep-up()\nbuild - column ()\ndef\nbuild - column ( ) :\nturn - left ( )\nbuild - beeper ( )\nbuild - beeper ( )\nbuild - beeper ( )\nbuild - beeper ( )\nput - beeper ()\ngo - back ()\nturn- left ( )\ndef\nbuild - beeper ( ):\nput- beeper ( )\nmove ()\ndet\ngo - back ():\nturn- around ( )\nStep -up ()\ndex\nturn- around ( ) :\nturn - left ()\nturn - left ()\ndex\nstep -up():\nmove ( )\nmove ( )\nmove ( )\nmove ( )\nif - name _ = = - main _:\nmain ( )", "lm_post_processed_edit_distance": 246}, {"image_id": 37, "image_height": 4032, "image_width": 3024, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 313.0, "y": 48.0, "w": 1497.0, "h": 76.0, "line_num": 1, "text": "from karel. stanford kavel import *"}, {"x": 331.0, "y": 166.0, "w": 522.0, "h": 62.0, "line_num": 2, "text": "def main ():"}, {"x": 531.0, "y": 267.0, "w": 599.0, "h": 69.0, "line_num": 3, "text": "build-column ( )"}, {"x": 541.0, "y": 360.0, "w": 374.0, "h": 76.0, "line_num": 4, "text": "Step -up ( )"}, {"x": 551.0, "y": 479.0, "w": 596.0, "h": 75.0, "line_num": 5, "text": "build - column ()"}, {"x": 557.0, "y": 606.0, "w": 358.0, "h": 74.0, "line_num": 6, "text": "Step-up()"}, {"x": 567.0, "y": 726.0, "w": 616.0, "h": 74.0, "line_num": 7, "text": "build- column ( )"}, {"x": 574.0, "y": 862.0, "w": 358.0, "h": 75.0, "line_num": 8, "text": "Step-up()"}, {"x": 579.0, "y": 988.0, "w": 645.0, "h": 76.0, "line_num": 9, "text": "build - column ()"}, {"x": 338.0, "y": 1147.0, "w": 128.0, "h": 68.0, "line_num": 10, "text": "def"}, {"x": 577.0, "y": 1157.0, "w": 711.0, "h": 80.0, "line_num": 11, "text": "build - column ( ) :"}, {"x": 566.0, "y": 1296.0, "w": 510.0, "h": 76.0, "line_num": 12, "text": "turn - left ( )"}, {"x": 580.0, "y": 1423.0, "w": 608.0, "h": 77.0, "line_num": 13, "text": "build - beeper ( )"}, {"x": 591.0, "y": 1550.0, "w": 602.0, "h": 79.0, "line_num": 14, "text": "build - beeper ( )"}, {"x": 588.0, "y": 1682.0, "w": 604.0, "h": 75.0, "line_num": 15, "text": "build - beeper ( )"}, {"x": 599.0, "y": 1798.0, "w": 582.0, "h": 74.0, "line_num": 16, "text": "build - beeper ( )"}, {"x": 599.0, "y": 1919.0, "w": 527.0, "h": 71.0, "line_num": 17, "text": "put - beeper ()"}, {"x": 593.0, "y": 2038.0, "w": 452.0, "h": 69.0, "line_num": 18, "text": "go - back ()"}, {"x": 593.0, "y": 2146.0, "w": 470.0, "h": 75.0, "line_num": 19, "text": "turn- left ( )"}, {"x": 355.0, "y": 2305.0, "w": 125.0, "h": 70.0, "line_num": 20, "text": "def"}, {"x": 590.0, "y": 2291.0, "w": 650.0, "h": 76.0, "line_num": 21, "text": "build - beeper ( ):"}, {"x": 612.0, "y": 2414.0, "w": 539.0, "h": 75.0, "line_num": 22, "text": "put- beeper ( )"}, {"x": 613.0, "y": 2544.0, "w": 272.0, "h": 54.0, "line_num": 23, "text": "move ()"}, {"x": 370.0, "y": 2668.0, "w": 128.0, "h": 72.0, "line_num": 24, "text": "det"}, {"x": 625.0, "y": 2682.0, "w": 488.0, "h": 73.0, "line_num": 25, "text": "go - back ():"}, {"x": 627.0, "y": 2800.0, "w": 611.0, "h": 68.0, "line_num": 26, "text": "turn- around ( )"}, {"x": 630.0, "y": 2919.0, "w": 400.0, "h": 72.0, "line_num": 27, "text": "Step -up ()"}, {"x": 394.0, "y": 3068.0, "w": 126.0, "h": 67.0, "line_num": 28, "text": "dex"}, {"x": 611.0, "y": 3061.0, "w": 653.0, "h": 71.0, "line_num": 29, "text": "turn- around ( ) :"}, {"x": 626.0, "y": 3167.0, "w": 483.0, "h": 67.0, "line_num": 30, "text": "turn - left ()"}, {"x": 630.0, "y": 3266.0, "w": 490.0, "h": 67.0, "line_num": 31, "text": "turn - left ()"}, {"x": 399.0, "y": 3387.0, "w": 132.0, "h": 67.0, "line_num": 32, "text": "dex"}, {"x": 645.0, "y": 3383.0, "w": 446.0, "h": 72.0, "line_num": 33, "text": "step -up():"}, {"x": 665.0, "y": 3494.0, "w": 265.0, "h": 60.0, "line_num": 34, "text": "move ( )"}, {"x": 660.0, "y": 3572.0, "w": 264.0, "h": 54.0, "line_num": 35, "text": "move ( )"}, {"x": 664.0, "y": 3660.0, "w": 278.0, "h": 58.0, "line_num": 36, "text": "move ( )"}, {"x": 673.0, "y": 3739.0, "w": 292.0, "h": 58.0, "line_num": 37, "text": "move ( )"}, {"x": 407.0, "y": 3836.0, "w": 1187.0, "h": 79.0, "line_num": 38, "text": "if - name _ = = - main _:"}, {"x": 641.0, "y": 3940.0, "w": 304.0, "h": 65.0, "line_num": 39, "text": "main ( )"}], "ir_algo_name": "none", "ir_algo_output_code": "from karel. stanford kavel import *\ndef main ():\nbuild-column ( )\nStep -up ( )\nbuild - column ()\nStep-up()\nbuild- column ( )\nStep-up()\nbuild - column ()\ndef\nbuild - column ( ) :\nturn - left ( )\nbuild - beeper ( )\nbuild - beeper ( )\nbuild - beeper ( )\nbuild - beeper ( )\nput - beeper ()\ngo - back ()\nturn- left ( )\ndef\nbuild - beeper ( ):\nput- beeper ( )\nmove ()\ndet\ngo - back ():\nturn- around ( )\nStep -up ()\ndex\nturn- around ( ) :\nturn - left ()\nturn - left ()\ndex\nstep -up():\nmove ( )\nmove ( )\nmove ( )\nmove ( )\nif - name _ = = - main _:\nmain ( )", "ir_algo_output_edit_distance": 246, "prompting_method": "cot-test1", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main ():\nbuild_column ( )\nstep_up ( )\nbuild_column ()\nstep_up()\nbuild_column ( )\nstep_up()\nbuild_column ()\n\ndef build_column ( ) :\nturn_left ( )\nbuild_beeper ( )\nbuild_beeper ( )\nbuild_beeper ( )\nbuild_beeper ( )\nput_beeper ()\ngo_back ()\nturn_left ( )\n\ndef build_beeper ( ):\nput_beeper ( )\nmove ()\n\ndef go_back ():\nturn_around ( )\nstep_up ()\n\ndef turn_around ( ) :\nturn_left ()\nturn_left ()\n\ndef step_up():\nmove ( )\nmove ( )\nmove ( )\nmove ( )\n\nif __name__ == \"__main__\":\nmain ( )\n", "lm_post_processed_edit_distance": 154}, {"image_id": 37, "image_height": 4032, "image_width": 3024, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 313.0, "y": 48.0, "w": 1497.0, "h": 76.0, "line_num": 1, "text": "from karel. stanford kavel import *"}, {"x": 331.0, "y": 166.0, "w": 522.0, "h": 62.0, "line_num": 2, "text": "def main ():"}, {"x": 531.0, "y": 267.0, "w": 599.0, "h": 69.0, "line_num": 3, "text": "build-column ( )"}, {"x": 541.0, "y": 360.0, "w": 374.0, "h": 76.0, "line_num": 4, "text": "Step -up ( )"}, {"x": 551.0, "y": 479.0, "w": 596.0, "h": 75.0, "line_num": 5, "text": "build - column ()"}, {"x": 557.0, "y": 606.0, "w": 358.0, "h": 74.0, "line_num": 6, "text": "Step-up()"}, {"x": 567.0, "y": 726.0, "w": 616.0, "h": 74.0, "line_num": 7, "text": "build- column ( )"}, {"x": 574.0, "y": 862.0, "w": 358.0, "h": 75.0, "line_num": 8, "text": "Step-up()"}, {"x": 579.0, "y": 988.0, "w": 645.0, "h": 76.0, "line_num": 9, "text": "build - column ()"}, {"x": 338.0, "y": 1147.0, "w": 128.0, "h": 68.0, "line_num": 10, "text": "def"}, {"x": 577.0, "y": 1157.0, "w": 711.0, "h": 80.0, "line_num": 11, "text": "build - column ( ) :"}, {"x": 566.0, "y": 1296.0, "w": 510.0, "h": 76.0, "line_num": 12, "text": "turn - left ( )"}, {"x": 580.0, "y": 1423.0, "w": 608.0, "h": 77.0, "line_num": 13, "text": "build - beeper ( )"}, {"x": 591.0, "y": 1550.0, "w": 602.0, "h": 79.0, "line_num": 14, "text": "build - beeper ( )"}, {"x": 588.0, "y": 1682.0, "w": 604.0, "h": 75.0, "line_num": 15, "text": "build - beeper ( )"}, {"x": 599.0, "y": 1798.0, "w": 582.0, "h": 74.0, "line_num": 16, "text": "build - beeper ( )"}, {"x": 599.0, "y": 1919.0, "w": 527.0, "h": 71.0, "line_num": 17, "text": "put - beeper ()"}, {"x": 593.0, "y": 2038.0, "w": 452.0, "h": 69.0, "line_num": 18, "text": "go - back ()"}, {"x": 593.0, "y": 2146.0, "w": 470.0, "h": 75.0, "line_num": 19, "text": "turn- left ( )"}, {"x": 355.0, "y": 2305.0, "w": 125.0, "h": 70.0, "line_num": 20, "text": "def"}, {"x": 590.0, "y": 2291.0, "w": 650.0, "h": 76.0, "line_num": 21, "text": "build - beeper ( ):"}, {"x": 612.0, "y": 2414.0, "w": 539.0, "h": 75.0, "line_num": 22, "text": "put- beeper ( )"}, {"x": 613.0, "y": 2544.0, "w": 272.0, "h": 54.0, "line_num": 23, "text": "move ()"}, {"x": 370.0, "y": 2668.0, "w": 128.0, "h": 72.0, "line_num": 24, "text": "det"}, {"x": 625.0, "y": 2682.0, "w": 488.0, "h": 73.0, "line_num": 25, "text": "go - back ():"}, {"x": 627.0, "y": 2800.0, "w": 611.0, "h": 68.0, "line_num": 26, "text": "turn- around ( )"}, {"x": 630.0, "y": 2919.0, "w": 400.0, "h": 72.0, "line_num": 27, "text": "Step -up ()"}, {"x": 394.0, "y": 3068.0, "w": 126.0, "h": 67.0, "line_num": 28, "text": "dex"}, {"x": 611.0, "y": 3061.0, "w": 653.0, "h": 71.0, "line_num": 29, "text": "turn- around ( ) :"}, {"x": 626.0, "y": 3167.0, "w": 483.0, "h": 67.0, "line_num": 30, "text": "turn - left ()"}, {"x": 630.0, "y": 3266.0, "w": 490.0, "h": 67.0, "line_num": 31, "text": "turn - left ()"}, {"x": 399.0, "y": 3387.0, "w": 132.0, "h": 67.0, "line_num": 32, "text": "dex"}, {"x": 645.0, "y": 3383.0, "w": 446.0, "h": 72.0, "line_num": 33, "text": "step -up():"}, {"x": 665.0, "y": 3494.0, "w": 265.0, "h": 60.0, "line_num": 34, "text": "move ( )"}, {"x": 660.0, "y": 3572.0, "w": 264.0, "h": 54.0, "line_num": 35, "text": "move ( )"}, {"x": 664.0, "y": 3660.0, "w": 278.0, "h": 58.0, "line_num": 36, "text": "move ( )"}, {"x": 673.0, "y": 3739.0, "w": 292.0, "h": 58.0, "line_num": 37, "text": "move ( )"}, {"x": 407.0, "y": 3836.0, "w": 1187.0, "h": 79.0, "line_num": 38, "text": "if - name _ = = - main _:"}, {"x": 641.0, "y": 3940.0, "w": 304.0, "h": 65.0, "line_num": 39, "text": "main ( )"}], "ir_algo_name": "none", "ir_algo_output_code": "from karel. stanford kavel import *\ndef main ():\nbuild-column ( )\nStep -up ( )\nbuild - column ()\nStep-up()\nbuild- column ( )\nStep-up()\nbuild - column ()\ndef\nbuild - column ( ) :\nturn - left ( )\nbuild - beeper ( )\nbuild - beeper ( )\nbuild - beeper ( )\nbuild - beeper ( )\nput - beeper ()\ngo - back ()\nturn- left ( )\ndef\nbuild - beeper ( ):\nput- beeper ( )\nmove ()\ndet\ngo - back ():\nturn- around ( )\nStep -up ()\ndex\nturn- around ( ) :\nturn - left ()\nturn - left ()\ndex\nstep -up():\nmove ( )\nmove ( )\nmove ( )\nmove ( )\nif - name _ = = - main _:\nmain ( )", "ir_algo_output_edit_distance": 246, "prompting_method": "cot-test5", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\nbuild_column()\nstep_up()\nbuild_column()\nstep_up()\nbuild_column()\nstep_up()\nbuild_column()\n\ndef build_column():\nturn_left()\nbuild_beeper()\nbuild_beeper()\nbuild_beeper()\nbuild_beeper()\nput_beeper()\ngo_back()\nturn_left()\n\ndef build_beeper():\nput_beeper()\nmove()\n\ndef go_back():\nturn_around()\nstep_up()\n\ndef turn_around():\nturn_left()\nturn_left()\n\ndef step_up():\nmove()\nmove()\nmove()\nmove()\n\nif __name__ == \"__main__\":\nmain()\n", "lm_post_processed_edit_distance": 104}, {"image_id": 37, "image_height": 4032, "image_width": 3024, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 313.0, "y": 48.0, "w": 1497.0, "h": 76.0, "line_num": 1, "text": "from karel. stanford kavel import *"}, {"x": 331.0, "y": 166.0, "w": 522.0, "h": 62.0, "line_num": 2, "text": "def main ():"}, {"x": 531.0, "y": 267.0, "w": 599.0, "h": 69.0, "line_num": 3, "text": "build-column ( )"}, {"x": 541.0, "y": 360.0, "w": 374.0, "h": 76.0, "line_num": 4, "text": "Step -up ( )"}, {"x": 551.0, "y": 479.0, "w": 596.0, "h": 75.0, "line_num": 5, "text": "build - column ()"}, {"x": 557.0, "y": 606.0, "w": 358.0, "h": 74.0, "line_num": 6, "text": "Step-up()"}, {"x": 567.0, "y": 726.0, "w": 616.0, "h": 74.0, "line_num": 7, "text": "build- column ( )"}, {"x": 574.0, "y": 862.0, "w": 358.0, "h": 75.0, "line_num": 8, "text": "Step-up()"}, {"x": 579.0, "y": 988.0, "w": 645.0, "h": 76.0, "line_num": 9, "text": "build - column ()"}, {"x": 338.0, "y": 1147.0, "w": 128.0, "h": 68.0, "line_num": 10, "text": "def"}, {"x": 577.0, "y": 1157.0, "w": 711.0, "h": 80.0, "line_num": 11, "text": "build - column ( ) :"}, {"x": 566.0, "y": 1296.0, "w": 510.0, "h": 76.0, "line_num": 12, "text": "turn - left ( )"}, {"x": 580.0, "y": 1423.0, "w": 608.0, "h": 77.0, "line_num": 13, "text": "build - beeper ( )"}, {"x": 591.0, "y": 1550.0, "w": 602.0, "h": 79.0, "line_num": 14, "text": "build - beeper ( )"}, {"x": 588.0, "y": 1682.0, "w": 604.0, "h": 75.0, "line_num": 15, "text": "build - beeper ( )"}, {"x": 599.0, "y": 1798.0, "w": 582.0, "h": 74.0, "line_num": 16, "text": "build - beeper ( )"}, {"x": 599.0, "y": 1919.0, "w": 527.0, "h": 71.0, "line_num": 17, "text": "put - beeper ()"}, {"x": 593.0, "y": 2038.0, "w": 452.0, "h": 69.0, "line_num": 18, "text": "go - back ()"}, {"x": 593.0, "y": 2146.0, "w": 470.0, "h": 75.0, "line_num": 19, "text": "turn- left ( )"}, {"x": 355.0, "y": 2305.0, "w": 125.0, "h": 70.0, "line_num": 20, "text": "def"}, {"x": 590.0, "y": 2291.0, "w": 650.0, "h": 76.0, "line_num": 21, "text": "build - beeper ( ):"}, {"x": 612.0, "y": 2414.0, "w": 539.0, "h": 75.0, "line_num": 22, "text": "put- beeper ( )"}, {"x": 613.0, "y": 2544.0, "w": 272.0, "h": 54.0, "line_num": 23, "text": "move ()"}, {"x": 370.0, "y": 2668.0, "w": 128.0, "h": 72.0, "line_num": 24, "text": "det"}, {"x": 625.0, "y": 2682.0, "w": 488.0, "h": 73.0, "line_num": 25, "text": "go - back ():"}, {"x": 627.0, "y": 2800.0, "w": 611.0, "h": 68.0, "line_num": 26, "text": "turn- around ( )"}, {"x": 630.0, "y": 2919.0, "w": 400.0, "h": 72.0, "line_num": 27, "text": "Step -up ()"}, {"x": 394.0, "y": 3068.0, "w": 126.0, "h": 67.0, "line_num": 28, "text": "dex"}, {"x": 611.0, "y": 3061.0, "w": 653.0, "h": 71.0, "line_num": 29, "text": "turn- around ( ) :"}, {"x": 626.0, "y": 3167.0, "w": 483.0, "h": 67.0, "line_num": 30, "text": "turn - left ()"}, {"x": 630.0, "y": 3266.0, "w": 490.0, "h": 67.0, "line_num": 31, "text": "turn - left ()"}, {"x": 399.0, "y": 3387.0, "w": 132.0, "h": 67.0, "line_num": 32, "text": "dex"}, {"x": 645.0, "y": 3383.0, "w": 446.0, "h": 72.0, "line_num": 33, "text": "step -up():"}, {"x": 665.0, "y": 3494.0, "w": 265.0, "h": 60.0, "line_num": 34, "text": "move ( )"}, {"x": 660.0, "y": 3572.0, "w": 264.0, "h": 54.0, "line_num": 35, "text": "move ( )"}, {"x": 664.0, "y": 3660.0, "w": 278.0, "h": 58.0, "line_num": 36, "text": "move ( )"}, {"x": 673.0, "y": 3739.0, "w": 292.0, "h": 58.0, "line_num": 37, "text": "move ( )"}, {"x": 407.0, "y": 3836.0, "w": 1187.0, "h": 79.0, "line_num": 38, "text": "if - name _ = = - main _:"}, {"x": 641.0, "y": 3940.0, "w": 304.0, "h": 65.0, "line_num": 39, "text": "main ( )"}], "ir_algo_name": "none", "ir_algo_output_code": "from karel. stanford kavel import *\ndef main ():\nbuild-column ( )\nStep -up ( )\nbuild - column ()\nStep-up()\nbuild- column ( )\nStep-up()\nbuild - column ()\ndef\nbuild - column ( ) :\nturn - left ( )\nbuild - beeper ( )\nbuild - beeper ( )\nbuild - beeper ( )\nbuild - beeper ( )\nput - beeper ()\ngo - back ()\nturn- left ( )\ndef\nbuild - beeper ( ):\nput- beeper ( )\nmove ()\ndet\ngo - back ():\nturn- around ( )\nStep -up ()\ndex\nturn- around ( ) :\nturn - left ()\nturn - left ()\ndex\nstep -up():\nmove ( )\nmove ( )\nmove ( )\nmove ( )\nif - name _ = = - main _:\nmain ( )", "ir_algo_output_edit_distance": 246, "prompting_method": "simple-test2", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    build_column()\n    step_up()\n    build_column()\n    step_up()\n    build_column()\n    step_up()\n    build_column()\n\ndef build_column():\n    turn_left()\n    build_beeper()\n    build_beeper()\n    build_beeper()\n    build_beeper()\n    put_beeper()\n    go_back()\n    turn_left()\n\ndef build_beeper():\n    put_beeper()\n    move()\n\ndef go_back():\n    turn_around()\n    step_up()\n\ndef turn_around():\n    turn_left()\n    turn_left()\n\ndef step_up():\n    move()\n    move()\n    move()\n    move()\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 0}, {"image_id": 37, "image_height": 4032, "image_width": 3024, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 313.0, "y": 48.0, "w": 1497.0, "h": 76.0, "line_num": 1, "text": "from karel. stanford kavel import *"}, {"x": 331.0, "y": 166.0, "w": 522.0, "h": 62.0, "line_num": 2, "text": "def main ():"}, {"x": 531.0, "y": 267.0, "w": 599.0, "h": 69.0, "line_num": 3, "text": "build-column ( )"}, {"x": 541.0, "y": 360.0, "w": 374.0, "h": 76.0, "line_num": 4, "text": "Step -up ( )"}, {"x": 551.0, "y": 479.0, "w": 596.0, "h": 75.0, "line_num": 5, "text": "build - column ()"}, {"x": 557.0, "y": 606.0, "w": 358.0, "h": 74.0, "line_num": 6, "text": "Step-up()"}, {"x": 567.0, "y": 726.0, "w": 616.0, "h": 74.0, "line_num": 7, "text": "build- column ( )"}, {"x": 574.0, "y": 862.0, "w": 358.0, "h": 75.0, "line_num": 8, "text": "Step-up()"}, {"x": 579.0, "y": 988.0, "w": 645.0, "h": 76.0, "line_num": 9, "text": "build - column ()"}, {"x": 338.0, "y": 1147.0, "w": 128.0, "h": 68.0, "line_num": 10, "text": "def"}, {"x": 577.0, "y": 1157.0, "w": 711.0, "h": 80.0, "line_num": 11, "text": "build - column ( ) :"}, {"x": 566.0, "y": 1296.0, "w": 510.0, "h": 76.0, "line_num": 12, "text": "turn - left ( )"}, {"x": 580.0, "y": 1423.0, "w": 608.0, "h": 77.0, "line_num": 13, "text": "build - beeper ( )"}, {"x": 591.0, "y": 1550.0, "w": 602.0, "h": 79.0, "line_num": 14, "text": "build - beeper ( )"}, {"x": 588.0, "y": 1682.0, "w": 604.0, "h": 75.0, "line_num": 15, "text": "build - beeper ( )"}, {"x": 599.0, "y": 1798.0, "w": 582.0, "h": 74.0, "line_num": 16, "text": "build - beeper ( )"}, {"x": 599.0, "y": 1919.0, "w": 527.0, "h": 71.0, "line_num": 17, "text": "put - beeper ()"}, {"x": 593.0, "y": 2038.0, "w": 452.0, "h": 69.0, "line_num": 18, "text": "go - back ()"}, {"x": 593.0, "y": 2146.0, "w": 470.0, "h": 75.0, "line_num": 19, "text": "turn- left ( )"}, {"x": 355.0, "y": 2305.0, "w": 125.0, "h": 70.0, "line_num": 20, "text": "def"}, {"x": 590.0, "y": 2291.0, "w": 650.0, "h": 76.0, "line_num": 21, "text": "build - beeper ( ):"}, {"x": 612.0, "y": 2414.0, "w": 539.0, "h": 75.0, "line_num": 22, "text": "put- beeper ( )"}, {"x": 613.0, "y": 2544.0, "w": 272.0, "h": 54.0, "line_num": 23, "text": "move ()"}, {"x": 370.0, "y": 2668.0, "w": 128.0, "h": 72.0, "line_num": 24, "text": "det"}, {"x": 625.0, "y": 2682.0, "w": 488.0, "h": 73.0, "line_num": 25, "text": "go - back ():"}, {"x": 627.0, "y": 2800.0, "w": 611.0, "h": 68.0, "line_num": 26, "text": "turn- around ( )"}, {"x": 630.0, "y": 2919.0, "w": 400.0, "h": 72.0, "line_num": 27, "text": "Step -up ()"}, {"x": 394.0, "y": 3068.0, "w": 126.0, "h": 67.0, "line_num": 28, "text": "dex"}, {"x": 611.0, "y": 3061.0, "w": 653.0, "h": 71.0, "line_num": 29, "text": "turn- around ( ) :"}, {"x": 626.0, "y": 3167.0, "w": 483.0, "h": 67.0, "line_num": 30, "text": "turn - left ()"}, {"x": 630.0, "y": 3266.0, "w": 490.0, "h": 67.0, "line_num": 31, "text": "turn - left ()"}, {"x": 399.0, "y": 3387.0, "w": 132.0, "h": 67.0, "line_num": 32, "text": "dex"}, {"x": 645.0, "y": 3383.0, "w": 446.0, "h": 72.0, "line_num": 33, "text": "step -up():"}, {"x": 665.0, "y": 3494.0, "w": 265.0, "h": 60.0, "line_num": 34, "text": "move ( )"}, {"x": 660.0, "y": 3572.0, "w": 264.0, "h": 54.0, "line_num": 35, "text": "move ( )"}, {"x": 664.0, "y": 3660.0, "w": 278.0, "h": 58.0, "line_num": 36, "text": "move ( )"}, {"x": 673.0, "y": 3739.0, "w": 292.0, "h": 58.0, "line_num": 37, "text": "move ( )"}, {"x": 407.0, "y": 3836.0, "w": 1187.0, "h": 79.0, "line_num": 38, "text": "if - name _ = = - main _:"}, {"x": 641.0, "y": 3940.0, "w": 304.0, "h": 65.0, "line_num": 39, "text": "main ( )"}], "ir_algo_name": "none", "ir_algo_output_code": "from karel. stanford kavel import *\ndef main ():\nbuild-column ( )\nStep -up ( )\nbuild - column ()\nStep-up()\nbuild- column ( )\nStep-up()\nbuild - column ()\ndef\nbuild - column ( ) :\nturn - left ( )\nbuild - beeper ( )\nbuild - beeper ( )\nbuild - beeper ( )\nbuild - beeper ( )\nput - beeper ()\ngo - back ()\nturn- left ( )\ndef\nbuild - beeper ( ):\nput- beeper ( )\nmove ()\ndet\ngo - back ():\nturn- around ( )\nStep -up ()\ndex\nturn- around ( ) :\nturn - left ()\nturn - left ()\ndex\nstep -up():\nmove ( )\nmove ( )\nmove ( )\nmove ( )\nif - name _ = = - main _:\nmain ( )", "ir_algo_output_edit_distance": 246, "prompting_method": "simple-test3", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    build_column()\n    step_up()\n    build_column()\n    step_up()\n    build_column()\n    step_up()\n    build_column()\n\ndef build_column():\n    turn_left()\n    build_beeper()\n    build_beeper()\n    build_beeper()\n    build_beeper()\n    put_beeper()\n    go_back()\n    turn_left()\n\ndef build_beeper():\n    put_beeper()\n    move()\n\ndef go_back():\n    turn_around()\n    step_up()\n\ndef turn_around():\n    turn_left()\n    turn_left()\n\ndef step_up():\n    move()\n    move()\n    move()\n    move()\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 0}, {"image_id": 37, "image_height": 4032, "image_width": 3024, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 313.0, "y": 48.0, "w": 1497.0, "h": 76.0, "line_num": 1, "text": "from karel. stanford kavel import *"}, {"x": 331.0, "y": 166.0, "w": 522.0, "h": 62.0, "line_num": 2, "text": "def main ():"}, {"x": 531.0, "y": 267.0, "w": 599.0, "h": 69.0, "line_num": 3, "text": "build-column ( )"}, {"x": 541.0, "y": 360.0, "w": 374.0, "h": 76.0, "line_num": 4, "text": "Step -up ( )"}, {"x": 551.0, "y": 479.0, "w": 596.0, "h": 75.0, "line_num": 5, "text": "build - column ()"}, {"x": 557.0, "y": 606.0, "w": 358.0, "h": 74.0, "line_num": 6, "text": "Step-up()"}, {"x": 567.0, "y": 726.0, "w": 616.0, "h": 74.0, "line_num": 7, "text": "build- column ( )"}, {"x": 574.0, "y": 862.0, "w": 358.0, "h": 75.0, "line_num": 8, "text": "Step-up()"}, {"x": 579.0, "y": 988.0, "w": 645.0, "h": 76.0, "line_num": 9, "text": "build - column ()"}, {"x": 338.0, "y": 1147.0, "w": 128.0, "h": 68.0, "line_num": 10, "text": "def"}, {"x": 577.0, "y": 1157.0, "w": 711.0, "h": 80.0, "line_num": 11, "text": "build - column ( ) :"}, {"x": 566.0, "y": 1296.0, "w": 510.0, "h": 76.0, "line_num": 12, "text": "turn - left ( )"}, {"x": 580.0, "y": 1423.0, "w": 608.0, "h": 77.0, "line_num": 13, "text": "build - beeper ( )"}, {"x": 591.0, "y": 1550.0, "w": 602.0, "h": 79.0, "line_num": 14, "text": "build - beeper ( )"}, {"x": 588.0, "y": 1682.0, "w": 604.0, "h": 75.0, "line_num": 15, "text": "build - beeper ( )"}, {"x": 599.0, "y": 1798.0, "w": 582.0, "h": 74.0, "line_num": 16, "text": "build - beeper ( )"}, {"x": 599.0, "y": 1919.0, "w": 527.0, "h": 71.0, "line_num": 17, "text": "put - beeper ()"}, {"x": 593.0, "y": 2038.0, "w": 452.0, "h": 69.0, "line_num": 18, "text": "go - back ()"}, {"x": 593.0, "y": 2146.0, "w": 470.0, "h": 75.0, "line_num": 19, "text": "turn- left ( )"}, {"x": 355.0, "y": 2305.0, "w": 125.0, "h": 70.0, "line_num": 20, "text": "def"}, {"x": 590.0, "y": 2291.0, "w": 650.0, "h": 76.0, "line_num": 21, "text": "build - beeper ( ):"}, {"x": 612.0, "y": 2414.0, "w": 539.0, "h": 75.0, "line_num": 22, "text": "put- beeper ( )"}, {"x": 613.0, "y": 2544.0, "w": 272.0, "h": 54.0, "line_num": 23, "text": "move ()"}, {"x": 370.0, "y": 2668.0, "w": 128.0, "h": 72.0, "line_num": 24, "text": "det"}, {"x": 625.0, "y": 2682.0, "w": 488.0, "h": 73.0, "line_num": 25, "text": "go - back ():"}, {"x": 627.0, "y": 2800.0, "w": 611.0, "h": 68.0, "line_num": 26, "text": "turn- around ( )"}, {"x": 630.0, "y": 2919.0, "w": 400.0, "h": 72.0, "line_num": 27, "text": "Step -up ()"}, {"x": 394.0, "y": 3068.0, "w": 126.0, "h": 67.0, "line_num": 28, "text": "dex"}, {"x": 611.0, "y": 3061.0, "w": 653.0, "h": 71.0, "line_num": 29, "text": "turn- around ( ) :"}, {"x": 626.0, "y": 3167.0, "w": 483.0, "h": 67.0, "line_num": 30, "text": "turn - left ()"}, {"x": 630.0, "y": 3266.0, "w": 490.0, "h": 67.0, "line_num": 31, "text": "turn - left ()"}, {"x": 399.0, "y": 3387.0, "w": 132.0, "h": 67.0, "line_num": 32, "text": "dex"}, {"x": 645.0, "y": 3383.0, "w": 446.0, "h": 72.0, "line_num": 33, "text": "step -up():"}, {"x": 665.0, "y": 3494.0, "w": 265.0, "h": 60.0, "line_num": 34, "text": "move ( )"}, {"x": 660.0, "y": 3572.0, "w": 264.0, "h": 54.0, "line_num": 35, "text": "move ( )"}, {"x": 664.0, "y": 3660.0, "w": 278.0, "h": 58.0, "line_num": 36, "text": "move ( )"}, {"x": 673.0, "y": 3739.0, "w": 292.0, "h": 58.0, "line_num": 37, "text": "move ( )"}, {"x": 407.0, "y": 3836.0, "w": 1187.0, "h": 79.0, "line_num": 38, "text": "if - name _ = = - main _:"}, {"x": 641.0, "y": 3940.0, "w": 304.0, "h": 65.0, "line_num": 39, "text": "main ( )"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 105.61538461538461, "ir_algo_output_code": "from karel. stanford kavel import *\ndef main ():\n    build-column ( )\n    Step -up ( )\n    build - column ()\n    Step-up()\n    build- column ( )\n    Step-up()\n    build - column ()\ndef\n    build - column ( ) :\n    turn - left ( )\n    build - beeper ( )\n    build - beeper ( )\n    build - beeper ( )\n    build - beeper ( )\n    put - beeper ()\n    go - back ()\n    turn- left ( )\ndef\n    build - beeper ( ):\n    put- beeper ( )\n    move ()\ndet\n    go - back ():\n    turn- around ( )\n    Step -up ()\ndex\n    turn- around ( ) :\n    turn - left ()\n    turn - left ()\ndex\n    step -up():\n    move ( )\n    move ( )\n    move ( )\n    move ( )\nif - name _ = = - main _:\n    main ( )\n", "ir_algo_output_indented_lines": [{"x": 313.0, "y": 48.0, "w": 1497.0, "h": 76.0, "line_num": 1, "text": "from karel. stanford kavel import *", "cluster_label": 1, "indentation": 0}, {"x": 331.0, "y": 166.0, "w": 522.0, "h": 62.0, "line_num": 2, "text": "def main ():", "cluster_label": 1, "indentation": 0}, {"x": 531.0, "y": 267.0, "w": 599.0, "h": 69.0, "line_num": 3, "text": "build-column ( )", "cluster_label": 0, "indentation": 1}, {"x": 541.0, "y": 360.0, "w": 374.0, "h": 76.0, "line_num": 4, "text": "Step -up ( )", "cluster_label": 0, "indentation": 1}, {"x": 551.0, "y": 479.0, "w": 596.0, "h": 75.0, "line_num": 5, "text": "build - column ()", "cluster_label": 0, "indentation": 1}, {"x": 557.0, "y": 606.0, "w": 358.0, "h": 74.0, "line_num": 6, "text": "Step-up()", "cluster_label": 0, "indentation": 1}, {"x": 567.0, "y": 726.0, "w": 616.0, "h": 74.0, "line_num": 7, "text": "build- column ( )", "cluster_label": 0, "indentation": 1}, {"x": 574.0, "y": 862.0, "w": 358.0, "h": 75.0, "line_num": 8, "text": "Step-up()", "cluster_label": 0, "indentation": 1}, {"x": 579.0, "y": 988.0, "w": 645.0, "h": 76.0, "line_num": 9, "text": "build - column ()", "cluster_label": 0, "indentation": 1}, {"x": 338.0, "y": 1147.0, "w": 128.0, "h": 68.0, "line_num": 10, "text": "def", "cluster_label": 1, "indentation": 0}, {"x": 577.0, "y": 1157.0, "w": 711.0, "h": 80.0, "line_num": 11, "text": "build - column ( ) :", "cluster_label": 0, "indentation": 1}, {"x": 566.0, "y": 1296.0, "w": 510.0, "h": 76.0, "line_num": 12, "text": "turn - left ( )", "cluster_label": 0, "indentation": 1}, {"x": 580.0, "y": 1423.0, "w": 608.0, "h": 77.0, "line_num": 13, "text": "build - beeper ( )", "cluster_label": 0, "indentation": 1}, {"x": 591.0, "y": 1550.0, "w": 602.0, "h": 79.0, "line_num": 14, "text": "build - beeper ( )", "cluster_label": 0, "indentation": 1}, {"x": 588.0, "y": 1682.0, "w": 604.0, "h": 75.0, "line_num": 15, "text": "build - beeper ( )", "cluster_label": 0, "indentation": 1}, {"x": 599.0, "y": 1798.0, "w": 582.0, "h": 74.0, "line_num": 16, "text": "build - beeper ( )", "cluster_label": 0, "indentation": 1}, {"x": 599.0, "y": 1919.0, "w": 527.0, "h": 71.0, "line_num": 17, "text": "put - beeper ()", "cluster_label": 0, "indentation": 1}, {"x": 593.0, "y": 2038.0, "w": 452.0, "h": 69.0, "line_num": 18, "text": "go - back ()", "cluster_label": 0, "indentation": 1}, {"x": 593.0, "y": 2146.0, "w": 470.0, "h": 75.0, "line_num": 19, "text": "turn- left ( )", "cluster_label": 0, "indentation": 1}, {"x": 355.0, "y": 2305.0, "w": 125.0, "h": 70.0, "line_num": 20, "text": "def", "cluster_label": 1, "indentation": 0}, {"x": 590.0, "y": 2291.0, "w": 650.0, "h": 76.0, "line_num": 21, "text": "build - beeper ( ):", "cluster_label": 0, "indentation": 1}, {"x": 612.0, "y": 2414.0, "w": 539.0, "h": 75.0, "line_num": 22, "text": "put- beeper ( )", "cluster_label": 0, "indentation": 1}, {"x": 613.0, "y": 2544.0, "w": 272.0, "h": 54.0, "line_num": 23, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 370.0, "y": 2668.0, "w": 128.0, "h": 72.0, "line_num": 24, "text": "det", "cluster_label": 1, "indentation": 0}, {"x": 625.0, "y": 2682.0, "w": 488.0, "h": 73.0, "line_num": 25, "text": "go - back ():", "cluster_label": 0, "indentation": 1}, {"x": 627.0, "y": 2800.0, "w": 611.0, "h": 68.0, "line_num": 26, "text": "turn- around ( )", "cluster_label": 0, "indentation": 1}, {"x": 630.0, "y": 2919.0, "w": 400.0, "h": 72.0, "line_num": 27, "text": "Step -up ()", "cluster_label": 0, "indentation": 1}, {"x": 394.0, "y": 3068.0, "w": 126.0, "h": 67.0, "line_num": 28, "text": "dex", "cluster_label": 1, "indentation": 0}, {"x": 611.0, "y": 3061.0, "w": 653.0, "h": 71.0, "line_num": 29, "text": "turn- around ( ) :", "cluster_label": 0, "indentation": 1}, {"x": 626.0, "y": 3167.0, "w": 483.0, "h": 67.0, "line_num": 30, "text": "turn - left ()", "cluster_label": 0, "indentation": 1}, {"x": 630.0, "y": 3266.0, "w": 490.0, "h": 67.0, "line_num": 31, "text": "turn - left ()", "cluster_label": 0, "indentation": 1}, {"x": 399.0, "y": 3387.0, "w": 132.0, "h": 67.0, "line_num": 32, "text": "dex", "cluster_label": 1, "indentation": 0}, {"x": 645.0, "y": 3383.0, "w": 446.0, "h": 72.0, "line_num": 33, "text": "step -up():", "cluster_label": 0, "indentation": 1}, {"x": 665.0, "y": 3494.0, "w": 265.0, "h": 60.0, "line_num": 34, "text": "move ( )", "cluster_label": 0, "indentation": 1}, {"x": 660.0, "y": 3572.0, "w": 264.0, "h": 54.0, "line_num": 35, "text": "move ( )", "cluster_label": 0, "indentation": 1}, {"x": 664.0, "y": 3660.0, "w": 278.0, "h": 58.0, "line_num": 36, "text": "move ( )", "cluster_label": 0, "indentation": 1}, {"x": 673.0, "y": 3739.0, "w": 292.0, "h": 58.0, "line_num": 37, "text": "move ( )", "cluster_label": 0, "indentation": 1}, {"x": 407.0, "y": 3836.0, "w": 1187.0, "h": 79.0, "line_num": 38, "text": "if - name _ = = - main _:", "cluster_label": 1, "indentation": 0}, {"x": 641.0, "y": 3940.0, "w": 304.0, "h": 65.0, "line_num": 39, "text": "main ( )", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 157, "prompting_method": "none", "lm_post_processed_code": "from karel. stanford kavel import *\ndef main ():\n    build-column ( )\n    Step -up ( )\n    build - column ()\n    Step-up()\n    build- column ( )\n    Step-up()\n    build - column ()\ndef\n    build - column ( ) :\n    turn - left ( )\n    build - beeper ( )\n    build - beeper ( )\n    build - beeper ( )\n    build - beeper ( )\n    put - beeper ()\n    go - back ()\n    turn- left ( )\ndef\n    build - beeper ( ):\n    put- beeper ( )\n    move ()\ndet\n    go - back ():\n    turn- around ( )\n    Step -up ()\ndex\n    turn- around ( ) :\n    turn - left ()\n    turn - left ()\ndex\n    step -up():\n    move ( )\n    move ( )\n    move ( )\n    move ( )\nif - name _ = = - main _:\n    main ( )\n", "lm_post_processed_edit_distance": 157}, {"image_id": 37, "image_height": 4032, "image_width": 3024, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 313.0, "y": 48.0, "w": 1497.0, "h": 76.0, "line_num": 1, "text": "from karel. stanford kavel import *"}, {"x": 331.0, "y": 166.0, "w": 522.0, "h": 62.0, "line_num": 2, "text": "def main ():"}, {"x": 531.0, "y": 267.0, "w": 599.0, "h": 69.0, "line_num": 3, "text": "build-column ( )"}, {"x": 541.0, "y": 360.0, "w": 374.0, "h": 76.0, "line_num": 4, "text": "Step -up ( )"}, {"x": 551.0, "y": 479.0, "w": 596.0, "h": 75.0, "line_num": 5, "text": "build - column ()"}, {"x": 557.0, "y": 606.0, "w": 358.0, "h": 74.0, "line_num": 6, "text": "Step-up()"}, {"x": 567.0, "y": 726.0, "w": 616.0, "h": 74.0, "line_num": 7, "text": "build- column ( )"}, {"x": 574.0, "y": 862.0, "w": 358.0, "h": 75.0, "line_num": 8, "text": "Step-up()"}, {"x": 579.0, "y": 988.0, "w": 645.0, "h": 76.0, "line_num": 9, "text": "build - column ()"}, {"x": 338.0, "y": 1147.0, "w": 128.0, "h": 68.0, "line_num": 10, "text": "def"}, {"x": 577.0, "y": 1157.0, "w": 711.0, "h": 80.0, "line_num": 11, "text": "build - column ( ) :"}, {"x": 566.0, "y": 1296.0, "w": 510.0, "h": 76.0, "line_num": 12, "text": "turn - left ( )"}, {"x": 580.0, "y": 1423.0, "w": 608.0, "h": 77.0, "line_num": 13, "text": "build - beeper ( )"}, {"x": 591.0, "y": 1550.0, "w": 602.0, "h": 79.0, "line_num": 14, "text": "build - beeper ( )"}, {"x": 588.0, "y": 1682.0, "w": 604.0, "h": 75.0, "line_num": 15, "text": "build - beeper ( )"}, {"x": 599.0, "y": 1798.0, "w": 582.0, "h": 74.0, "line_num": 16, "text": "build - beeper ( )"}, {"x": 599.0, "y": 1919.0, "w": 527.0, "h": 71.0, "line_num": 17, "text": "put - beeper ()"}, {"x": 593.0, "y": 2038.0, "w": 452.0, "h": 69.0, "line_num": 18, "text": "go - back ()"}, {"x": 593.0, "y": 2146.0, "w": 470.0, "h": 75.0, "line_num": 19, "text": "turn- left ( )"}, {"x": 355.0, "y": 2305.0, "w": 125.0, "h": 70.0, "line_num": 20, "text": "def"}, {"x": 590.0, "y": 2291.0, "w": 650.0, "h": 76.0, "line_num": 21, "text": "build - beeper ( ):"}, {"x": 612.0, "y": 2414.0, "w": 539.0, "h": 75.0, "line_num": 22, "text": "put- beeper ( )"}, {"x": 613.0, "y": 2544.0, "w": 272.0, "h": 54.0, "line_num": 23, "text": "move ()"}, {"x": 370.0, "y": 2668.0, "w": 128.0, "h": 72.0, "line_num": 24, "text": "det"}, {"x": 625.0, "y": 2682.0, "w": 488.0, "h": 73.0, "line_num": 25, "text": "go - back ():"}, {"x": 627.0, "y": 2800.0, "w": 611.0, "h": 68.0, "line_num": 26, "text": "turn- around ( )"}, {"x": 630.0, "y": 2919.0, "w": 400.0, "h": 72.0, "line_num": 27, "text": "Step -up ()"}, {"x": 394.0, "y": 3068.0, "w": 126.0, "h": 67.0, "line_num": 28, "text": "dex"}, {"x": 611.0, "y": 3061.0, "w": 653.0, "h": 71.0, "line_num": 29, "text": "turn- around ( ) :"}, {"x": 626.0, "y": 3167.0, "w": 483.0, "h": 67.0, "line_num": 30, "text": "turn - left ()"}, {"x": 630.0, "y": 3266.0, "w": 490.0, "h": 67.0, "line_num": 31, "text": "turn - left ()"}, {"x": 399.0, "y": 3387.0, "w": 132.0, "h": 67.0, "line_num": 32, "text": "dex"}, {"x": 645.0, "y": 3383.0, "w": 446.0, "h": 72.0, "line_num": 33, "text": "step -up():"}, {"x": 665.0, "y": 3494.0, "w": 265.0, "h": 60.0, "line_num": 34, "text": "move ( )"}, {"x": 660.0, "y": 3572.0, "w": 264.0, "h": 54.0, "line_num": 35, "text": "move ( )"}, {"x": 664.0, "y": 3660.0, "w": 278.0, "h": 58.0, "line_num": 36, "text": "move ( )"}, {"x": 673.0, "y": 3739.0, "w": 292.0, "h": 58.0, "line_num": 37, "text": "move ( )"}, {"x": 407.0, "y": 3836.0, "w": 1187.0, "h": 79.0, "line_num": 38, "text": "if - name _ = = - main _:"}, {"x": 641.0, "y": 3940.0, "w": 304.0, "h": 65.0, "line_num": 39, "text": "main ( )"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 105.61538461538461, "ir_algo_output_code": "from karel. stanford kavel import *\ndef main ():\n    build-column ( )\n    Step -up ( )\n    build - column ()\n    Step-up()\n    build- column ( )\n    Step-up()\n    build - column ()\ndef\n    build - column ( ) :\n    turn - left ( )\n    build - beeper ( )\n    build - beeper ( )\n    build - beeper ( )\n    build - beeper ( )\n    put - beeper ()\n    go - back ()\n    turn- left ( )\ndef\n    build - beeper ( ):\n    put- beeper ( )\n    move ()\ndet\n    go - back ():\n    turn- around ( )\n    Step -up ()\ndex\n    turn- around ( ) :\n    turn - left ()\n    turn - left ()\ndex\n    step -up():\n    move ( )\n    move ( )\n    move ( )\n    move ( )\nif - name _ = = - main _:\n    main ( )\n", "ir_algo_output_indented_lines": [{"x": 313.0, "y": 48.0, "w": 1497.0, "h": 76.0, "line_num": 1, "text": "from karel. stanford kavel import *", "cluster_label": 1, "indentation": 0}, {"x": 331.0, "y": 166.0, "w": 522.0, "h": 62.0, "line_num": 2, "text": "def main ():", "cluster_label": 1, "indentation": 0}, {"x": 531.0, "y": 267.0, "w": 599.0, "h": 69.0, "line_num": 3, "text": "build-column ( )", "cluster_label": 0, "indentation": 1}, {"x": 541.0, "y": 360.0, "w": 374.0, "h": 76.0, "line_num": 4, "text": "Step -up ( )", "cluster_label": 0, "indentation": 1}, {"x": 551.0, "y": 479.0, "w": 596.0, "h": 75.0, "line_num": 5, "text": "build - column ()", "cluster_label": 0, "indentation": 1}, {"x": 557.0, "y": 606.0, "w": 358.0, "h": 74.0, "line_num": 6, "text": "Step-up()", "cluster_label": 0, "indentation": 1}, {"x": 567.0, "y": 726.0, "w": 616.0, "h": 74.0, "line_num": 7, "text": "build- column ( )", "cluster_label": 0, "indentation": 1}, {"x": 574.0, "y": 862.0, "w": 358.0, "h": 75.0, "line_num": 8, "text": "Step-up()", "cluster_label": 0, "indentation": 1}, {"x": 579.0, "y": 988.0, "w": 645.0, "h": 76.0, "line_num": 9, "text": "build - column ()", "cluster_label": 0, "indentation": 1}, {"x": 338.0, "y": 1147.0, "w": 128.0, "h": 68.0, "line_num": 10, "text": "def", "cluster_label": 1, "indentation": 0}, {"x": 577.0, "y": 1157.0, "w": 711.0, "h": 80.0, "line_num": 11, "text": "build - column ( ) :", "cluster_label": 0, "indentation": 1}, {"x": 566.0, "y": 1296.0, "w": 510.0, "h": 76.0, "line_num": 12, "text": "turn - left ( )", "cluster_label": 0, "indentation": 1}, {"x": 580.0, "y": 1423.0, "w": 608.0, "h": 77.0, "line_num": 13, "text": "build - beeper ( )", "cluster_label": 0, "indentation": 1}, {"x": 591.0, "y": 1550.0, "w": 602.0, "h": 79.0, "line_num": 14, "text": "build - beeper ( )", "cluster_label": 0, "indentation": 1}, {"x": 588.0, "y": 1682.0, "w": 604.0, "h": 75.0, "line_num": 15, "text": "build - beeper ( )", "cluster_label": 0, "indentation": 1}, {"x": 599.0, "y": 1798.0, "w": 582.0, "h": 74.0, "line_num": 16, "text": "build - beeper ( )", "cluster_label": 0, "indentation": 1}, {"x": 599.0, "y": 1919.0, "w": 527.0, "h": 71.0, "line_num": 17, "text": "put - beeper ()", "cluster_label": 0, "indentation": 1}, {"x": 593.0, "y": 2038.0, "w": 452.0, "h": 69.0, "line_num": 18, "text": "go - back ()", "cluster_label": 0, "indentation": 1}, {"x": 593.0, "y": 2146.0, "w": 470.0, "h": 75.0, "line_num": 19, "text": "turn- left ( )", "cluster_label": 0, "indentation": 1}, {"x": 355.0, "y": 2305.0, "w": 125.0, "h": 70.0, "line_num": 20, "text": "def", "cluster_label": 1, "indentation": 0}, {"x": 590.0, "y": 2291.0, "w": 650.0, "h": 76.0, "line_num": 21, "text": "build - beeper ( ):", "cluster_label": 0, "indentation": 1}, {"x": 612.0, "y": 2414.0, "w": 539.0, "h": 75.0, "line_num": 22, "text": "put- beeper ( )", "cluster_label": 0, "indentation": 1}, {"x": 613.0, "y": 2544.0, "w": 272.0, "h": 54.0, "line_num": 23, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 370.0, "y": 2668.0, "w": 128.0, "h": 72.0, "line_num": 24, "text": "det", "cluster_label": 1, "indentation": 0}, {"x": 625.0, "y": 2682.0, "w": 488.0, "h": 73.0, "line_num": 25, "text": "go - back ():", "cluster_label": 0, "indentation": 1}, {"x": 627.0, "y": 2800.0, "w": 611.0, "h": 68.0, "line_num": 26, "text": "turn- around ( )", "cluster_label": 0, "indentation": 1}, {"x": 630.0, "y": 2919.0, "w": 400.0, "h": 72.0, "line_num": 27, "text": "Step -up ()", "cluster_label": 0, "indentation": 1}, {"x": 394.0, "y": 3068.0, "w": 126.0, "h": 67.0, "line_num": 28, "text": "dex", "cluster_label": 1, "indentation": 0}, {"x": 611.0, "y": 3061.0, "w": 653.0, "h": 71.0, "line_num": 29, "text": "turn- around ( ) :", "cluster_label": 0, "indentation": 1}, {"x": 626.0, "y": 3167.0, "w": 483.0, "h": 67.0, "line_num": 30, "text": "turn - left ()", "cluster_label": 0, "indentation": 1}, {"x": 630.0, "y": 3266.0, "w": 490.0, "h": 67.0, "line_num": 31, "text": "turn - left ()", "cluster_label": 0, "indentation": 1}, {"x": 399.0, "y": 3387.0, "w": 132.0, "h": 67.0, "line_num": 32, "text": "dex", "cluster_label": 1, "indentation": 0}, {"x": 645.0, "y": 3383.0, "w": 446.0, "h": 72.0, "line_num": 33, "text": "step -up():", "cluster_label": 0, "indentation": 1}, {"x": 665.0, "y": 3494.0, "w": 265.0, "h": 60.0, "line_num": 34, "text": "move ( )", "cluster_label": 0, "indentation": 1}, {"x": 660.0, "y": 3572.0, "w": 264.0, "h": 54.0, "line_num": 35, "text": "move ( )", "cluster_label": 0, "indentation": 1}, {"x": 664.0, "y": 3660.0, "w": 278.0, "h": 58.0, "line_num": 36, "text": "move ( )", "cluster_label": 0, "indentation": 1}, {"x": 673.0, "y": 3739.0, "w": 292.0, "h": 58.0, "line_num": 37, "text": "move ( )", "cluster_label": 0, "indentation": 1}, {"x": 407.0, "y": 3836.0, "w": 1187.0, "h": 79.0, "line_num": 38, "text": "if - name _ = = - main _:", "cluster_label": 1, "indentation": 0}, {"x": 641.0, "y": 3940.0, "w": 304.0, "h": 65.0, "line_num": 39, "text": "main ( )", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 157, "prompting_method": "cot-test1", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main ():\n    build_column ( )\n    step_up ( )\n    build_column ()\n    step_up()\n    build_column ( )\n    step_up()\n    build_column ()\ndef\n    build_column ( ) :\n    turn_left ( )\n    build_beeper ( )\n    build_beeper ( )\n    build_beeper ( )\n    build_beeper ( )\n    put_beeper ()\n    go_back ()\n    turn_left ( )\ndef\n    build_beeper ( ):\n    put_beeper ( )\n    move ()\ndef\n    go_back ():\n    turn_around ( )\n    step_up ()\ndef\n    turn_around ( ) :\n    turn_left ()\n    turn_left ()\ndef\n    step_up():\n    move ( )\n    move ( )\n    move ( )\n    move ( )\n\nif __name__ == \"__main__\":\n    main ( )\n", "lm_post_processed_edit_distance": 75}, {"image_id": 37, "image_height": 4032, "image_width": 3024, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 313.0, "y": 48.0, "w": 1497.0, "h": 76.0, "line_num": 1, "text": "from karel. stanford kavel import *"}, {"x": 331.0, "y": 166.0, "w": 522.0, "h": 62.0, "line_num": 2, "text": "def main ():"}, {"x": 531.0, "y": 267.0, "w": 599.0, "h": 69.0, "line_num": 3, "text": "build-column ( )"}, {"x": 541.0, "y": 360.0, "w": 374.0, "h": 76.0, "line_num": 4, "text": "Step -up ( )"}, {"x": 551.0, "y": 479.0, "w": 596.0, "h": 75.0, "line_num": 5, "text": "build - column ()"}, {"x": 557.0, "y": 606.0, "w": 358.0, "h": 74.0, "line_num": 6, "text": "Step-up()"}, {"x": 567.0, "y": 726.0, "w": 616.0, "h": 74.0, "line_num": 7, "text": "build- column ( )"}, {"x": 574.0, "y": 862.0, "w": 358.0, "h": 75.0, "line_num": 8, "text": "Step-up()"}, {"x": 579.0, "y": 988.0, "w": 645.0, "h": 76.0, "line_num": 9, "text": "build - column ()"}, {"x": 338.0, "y": 1147.0, "w": 128.0, "h": 68.0, "line_num": 10, "text": "def"}, {"x": 577.0, "y": 1157.0, "w": 711.0, "h": 80.0, "line_num": 11, "text": "build - column ( ) :"}, {"x": 566.0, "y": 1296.0, "w": 510.0, "h": 76.0, "line_num": 12, "text": "turn - left ( )"}, {"x": 580.0, "y": 1423.0, "w": 608.0, "h": 77.0, "line_num": 13, "text": "build - beeper ( )"}, {"x": 591.0, "y": 1550.0, "w": 602.0, "h": 79.0, "line_num": 14, "text": "build - beeper ( )"}, {"x": 588.0, "y": 1682.0, "w": 604.0, "h": 75.0, "line_num": 15, "text": "build - beeper ( )"}, {"x": 599.0, "y": 1798.0, "w": 582.0, "h": 74.0, "line_num": 16, "text": "build - beeper ( )"}, {"x": 599.0, "y": 1919.0, "w": 527.0, "h": 71.0, "line_num": 17, "text": "put - beeper ()"}, {"x": 593.0, "y": 2038.0, "w": 452.0, "h": 69.0, "line_num": 18, "text": "go - back ()"}, {"x": 593.0, "y": 2146.0, "w": 470.0, "h": 75.0, "line_num": 19, "text": "turn- left ( )"}, {"x": 355.0, "y": 2305.0, "w": 125.0, "h": 70.0, "line_num": 20, "text": "def"}, {"x": 590.0, "y": 2291.0, "w": 650.0, "h": 76.0, "line_num": 21, "text": "build - beeper ( ):"}, {"x": 612.0, "y": 2414.0, "w": 539.0, "h": 75.0, "line_num": 22, "text": "put- beeper ( )"}, {"x": 613.0, "y": 2544.0, "w": 272.0, "h": 54.0, "line_num": 23, "text": "move ()"}, {"x": 370.0, "y": 2668.0, "w": 128.0, "h": 72.0, "line_num": 24, "text": "det"}, {"x": 625.0, "y": 2682.0, "w": 488.0, "h": 73.0, "line_num": 25, "text": "go - back ():"}, {"x": 627.0, "y": 2800.0, "w": 611.0, "h": 68.0, "line_num": 26, "text": "turn- around ( )"}, {"x": 630.0, "y": 2919.0, "w": 400.0, "h": 72.0, "line_num": 27, "text": "Step -up ()"}, {"x": 394.0, "y": 3068.0, "w": 126.0, "h": 67.0, "line_num": 28, "text": "dex"}, {"x": 611.0, "y": 3061.0, "w": 653.0, "h": 71.0, "line_num": 29, "text": "turn- around ( ) :"}, {"x": 626.0, "y": 3167.0, "w": 483.0, "h": 67.0, "line_num": 30, "text": "turn - left ()"}, {"x": 630.0, "y": 3266.0, "w": 490.0, "h": 67.0, "line_num": 31, "text": "turn - left ()"}, {"x": 399.0, "y": 3387.0, "w": 132.0, "h": 67.0, "line_num": 32, "text": "dex"}, {"x": 645.0, "y": 3383.0, "w": 446.0, "h": 72.0, "line_num": 33, "text": "step -up():"}, {"x": 665.0, "y": 3494.0, "w": 265.0, "h": 60.0, "line_num": 34, "text": "move ( )"}, {"x": 660.0, "y": 3572.0, "w": 264.0, "h": 54.0, "line_num": 35, "text": "move ( )"}, {"x": 664.0, "y": 3660.0, "w": 278.0, "h": 58.0, "line_num": 36, "text": "move ( )"}, {"x": 673.0, "y": 3739.0, "w": 292.0, "h": 58.0, "line_num": 37, "text": "move ( )"}, {"x": 407.0, "y": 3836.0, "w": 1187.0, "h": 79.0, "line_num": 38, "text": "if - name _ = = - main _:"}, {"x": 641.0, "y": 3940.0, "w": 304.0, "h": 65.0, "line_num": 39, "text": "main ( )"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 105.61538461538461, "ir_algo_output_code": "from karel. stanford kavel import *\ndef main ():\n    build-column ( )\n    Step -up ( )\n    build - column ()\n    Step-up()\n    build- column ( )\n    Step-up()\n    build - column ()\ndef\n    build - column ( ) :\n    turn - left ( )\n    build - beeper ( )\n    build - beeper ( )\n    build - beeper ( )\n    build - beeper ( )\n    put - beeper ()\n    go - back ()\n    turn- left ( )\ndef\n    build - beeper ( ):\n    put- beeper ( )\n    move ()\ndet\n    go - back ():\n    turn- around ( )\n    Step -up ()\ndex\n    turn- around ( ) :\n    turn - left ()\n    turn - left ()\ndex\n    step -up():\n    move ( )\n    move ( )\n    move ( )\n    move ( )\nif - name _ = = - main _:\n    main ( )\n", "ir_algo_output_indented_lines": [{"x": 313.0, "y": 48.0, "w": 1497.0, "h": 76.0, "line_num": 1, "text": "from karel. stanford kavel import *", "cluster_label": 1, "indentation": 0}, {"x": 331.0, "y": 166.0, "w": 522.0, "h": 62.0, "line_num": 2, "text": "def main ():", "cluster_label": 1, "indentation": 0}, {"x": 531.0, "y": 267.0, "w": 599.0, "h": 69.0, "line_num": 3, "text": "build-column ( )", "cluster_label": 0, "indentation": 1}, {"x": 541.0, "y": 360.0, "w": 374.0, "h": 76.0, "line_num": 4, "text": "Step -up ( )", "cluster_label": 0, "indentation": 1}, {"x": 551.0, "y": 479.0, "w": 596.0, "h": 75.0, "line_num": 5, "text": "build - column ()", "cluster_label": 0, "indentation": 1}, {"x": 557.0, "y": 606.0, "w": 358.0, "h": 74.0, "line_num": 6, "text": "Step-up()", "cluster_label": 0, "indentation": 1}, {"x": 567.0, "y": 726.0, "w": 616.0, "h": 74.0, "line_num": 7, "text": "build- column ( )", "cluster_label": 0, "indentation": 1}, {"x": 574.0, "y": 862.0, "w": 358.0, "h": 75.0, "line_num": 8, "text": "Step-up()", "cluster_label": 0, "indentation": 1}, {"x": 579.0, "y": 988.0, "w": 645.0, "h": 76.0, "line_num": 9, "text": "build - column ()", "cluster_label": 0, "indentation": 1}, {"x": 338.0, "y": 1147.0, "w": 128.0, "h": 68.0, "line_num": 10, "text": "def", "cluster_label": 1, "indentation": 0}, {"x": 577.0, "y": 1157.0, "w": 711.0, "h": 80.0, "line_num": 11, "text": "build - column ( ) :", "cluster_label": 0, "indentation": 1}, {"x": 566.0, "y": 1296.0, "w": 510.0, "h": 76.0, "line_num": 12, "text": "turn - left ( )", "cluster_label": 0, "indentation": 1}, {"x": 580.0, "y": 1423.0, "w": 608.0, "h": 77.0, "line_num": 13, "text": "build - beeper ( )", "cluster_label": 0, "indentation": 1}, {"x": 591.0, "y": 1550.0, "w": 602.0, "h": 79.0, "line_num": 14, "text": "build - beeper ( )", "cluster_label": 0, "indentation": 1}, {"x": 588.0, "y": 1682.0, "w": 604.0, "h": 75.0, "line_num": 15, "text": "build - beeper ( )", "cluster_label": 0, "indentation": 1}, {"x": 599.0, "y": 1798.0, "w": 582.0, "h": 74.0, "line_num": 16, "text": "build - beeper ( )", "cluster_label": 0, "indentation": 1}, {"x": 599.0, "y": 1919.0, "w": 527.0, "h": 71.0, "line_num": 17, "text": "put - beeper ()", "cluster_label": 0, "indentation": 1}, {"x": 593.0, "y": 2038.0, "w": 452.0, "h": 69.0, "line_num": 18, "text": "go - back ()", "cluster_label": 0, "indentation": 1}, {"x": 593.0, "y": 2146.0, "w": 470.0, "h": 75.0, "line_num": 19, "text": "turn- left ( )", "cluster_label": 0, "indentation": 1}, {"x": 355.0, "y": 2305.0, "w": 125.0, "h": 70.0, "line_num": 20, "text": "def", "cluster_label": 1, "indentation": 0}, {"x": 590.0, "y": 2291.0, "w": 650.0, "h": 76.0, "line_num": 21, "text": "build - beeper ( ):", "cluster_label": 0, "indentation": 1}, {"x": 612.0, "y": 2414.0, "w": 539.0, "h": 75.0, "line_num": 22, "text": "put- beeper ( )", "cluster_label": 0, "indentation": 1}, {"x": 613.0, "y": 2544.0, "w": 272.0, "h": 54.0, "line_num": 23, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 370.0, "y": 2668.0, "w": 128.0, "h": 72.0, "line_num": 24, "text": "det", "cluster_label": 1, "indentation": 0}, {"x": 625.0, "y": 2682.0, "w": 488.0, "h": 73.0, "line_num": 25, "text": "go - back ():", "cluster_label": 0, "indentation": 1}, {"x": 627.0, "y": 2800.0, "w": 611.0, "h": 68.0, "line_num": 26, "text": "turn- around ( )", "cluster_label": 0, "indentation": 1}, {"x": 630.0, "y": 2919.0, "w": 400.0, "h": 72.0, "line_num": 27, "text": "Step -up ()", "cluster_label": 0, "indentation": 1}, {"x": 394.0, "y": 3068.0, "w": 126.0, "h": 67.0, "line_num": 28, "text": "dex", "cluster_label": 1, "indentation": 0}, {"x": 611.0, "y": 3061.0, "w": 653.0, "h": 71.0, "line_num": 29, "text": "turn- around ( ) :", "cluster_label": 0, "indentation": 1}, {"x": 626.0, "y": 3167.0, "w": 483.0, "h": 67.0, "line_num": 30, "text": "turn - left ()", "cluster_label": 0, "indentation": 1}, {"x": 630.0, "y": 3266.0, "w": 490.0, "h": 67.0, "line_num": 31, "text": "turn - left ()", "cluster_label": 0, "indentation": 1}, {"x": 399.0, "y": 3387.0, "w": 132.0, "h": 67.0, "line_num": 32, "text": "dex", "cluster_label": 1, "indentation": 0}, {"x": 645.0, "y": 3383.0, "w": 446.0, "h": 72.0, "line_num": 33, "text": "step -up():", "cluster_label": 0, "indentation": 1}, {"x": 665.0, "y": 3494.0, "w": 265.0, "h": 60.0, "line_num": 34, "text": "move ( )", "cluster_label": 0, "indentation": 1}, {"x": 660.0, "y": 3572.0, "w": 264.0, "h": 54.0, "line_num": 35, "text": "move ( )", "cluster_label": 0, "indentation": 1}, {"x": 664.0, "y": 3660.0, "w": 278.0, "h": 58.0, "line_num": 36, "text": "move ( )", "cluster_label": 0, "indentation": 1}, {"x": 673.0, "y": 3739.0, "w": 292.0, "h": 58.0, "line_num": 37, "text": "move ( )", "cluster_label": 0, "indentation": 1}, {"x": 407.0, "y": 3836.0, "w": 1187.0, "h": 79.0, "line_num": 38, "text": "if - name _ = = - main _:", "cluster_label": 1, "indentation": 0}, {"x": 641.0, "y": 3940.0, "w": 304.0, "h": 65.0, "line_num": 39, "text": "main ( )", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 157, "prompting_method": "cot-test5", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    build_column()\n    step_up()\n    build_column()\n    step_up()\n    build_column()\n    step_up()\n    build_column()\n\ndef build_column():\n    turn_left()\n    build_beeper()\n    build_beeper()\n    build_beeper()\n    build_beeper()\n    put_beeper()\n    go_back()\n    turn_left()\n\ndef build_beeper():\n    put_beeper()\n    move()\n\ndef go_back():\n    turn_around()\n    step_up()\n\ndef turn_around():\n    turn_left()\n    turn_left()\n\ndef step_up():\n    move()\n    move()\n    move()\n    move()\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 0}, {"image_id": 37, "image_height": 4032, "image_width": 3024, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 313.0, "y": 48.0, "w": 1497.0, "h": 76.0, "line_num": 1, "text": "from karel. stanford kavel import *"}, {"x": 331.0, "y": 166.0, "w": 522.0, "h": 62.0, "line_num": 2, "text": "def main ():"}, {"x": 531.0, "y": 267.0, "w": 599.0, "h": 69.0, "line_num": 3, "text": "build-column ( )"}, {"x": 541.0, "y": 360.0, "w": 374.0, "h": 76.0, "line_num": 4, "text": "Step -up ( )"}, {"x": 551.0, "y": 479.0, "w": 596.0, "h": 75.0, "line_num": 5, "text": "build - column ()"}, {"x": 557.0, "y": 606.0, "w": 358.0, "h": 74.0, "line_num": 6, "text": "Step-up()"}, {"x": 567.0, "y": 726.0, "w": 616.0, "h": 74.0, "line_num": 7, "text": "build- column ( )"}, {"x": 574.0, "y": 862.0, "w": 358.0, "h": 75.0, "line_num": 8, "text": "Step-up()"}, {"x": 579.0, "y": 988.0, "w": 645.0, "h": 76.0, "line_num": 9, "text": "build - column ()"}, {"x": 338.0, "y": 1147.0, "w": 128.0, "h": 68.0, "line_num": 10, "text": "def"}, {"x": 577.0, "y": 1157.0, "w": 711.0, "h": 80.0, "line_num": 11, "text": "build - column ( ) :"}, {"x": 566.0, "y": 1296.0, "w": 510.0, "h": 76.0, "line_num": 12, "text": "turn - left ( )"}, {"x": 580.0, "y": 1423.0, "w": 608.0, "h": 77.0, "line_num": 13, "text": "build - beeper ( )"}, {"x": 591.0, "y": 1550.0, "w": 602.0, "h": 79.0, "line_num": 14, "text": "build - beeper ( )"}, {"x": 588.0, "y": 1682.0, "w": 604.0, "h": 75.0, "line_num": 15, "text": "build - beeper ( )"}, {"x": 599.0, "y": 1798.0, "w": 582.0, "h": 74.0, "line_num": 16, "text": "build - beeper ( )"}, {"x": 599.0, "y": 1919.0, "w": 527.0, "h": 71.0, "line_num": 17, "text": "put - beeper ()"}, {"x": 593.0, "y": 2038.0, "w": 452.0, "h": 69.0, "line_num": 18, "text": "go - back ()"}, {"x": 593.0, "y": 2146.0, "w": 470.0, "h": 75.0, "line_num": 19, "text": "turn- left ( )"}, {"x": 355.0, "y": 2305.0, "w": 125.0, "h": 70.0, "line_num": 20, "text": "def"}, {"x": 590.0, "y": 2291.0, "w": 650.0, "h": 76.0, "line_num": 21, "text": "build - beeper ( ):"}, {"x": 612.0, "y": 2414.0, "w": 539.0, "h": 75.0, "line_num": 22, "text": "put- beeper ( )"}, {"x": 613.0, "y": 2544.0, "w": 272.0, "h": 54.0, "line_num": 23, "text": "move ()"}, {"x": 370.0, "y": 2668.0, "w": 128.0, "h": 72.0, "line_num": 24, "text": "det"}, {"x": 625.0, "y": 2682.0, "w": 488.0, "h": 73.0, "line_num": 25, "text": "go - back ():"}, {"x": 627.0, "y": 2800.0, "w": 611.0, "h": 68.0, "line_num": 26, "text": "turn- around ( )"}, {"x": 630.0, "y": 2919.0, "w": 400.0, "h": 72.0, "line_num": 27, "text": "Step -up ()"}, {"x": 394.0, "y": 3068.0, "w": 126.0, "h": 67.0, "line_num": 28, "text": "dex"}, {"x": 611.0, "y": 3061.0, "w": 653.0, "h": 71.0, "line_num": 29, "text": "turn- around ( ) :"}, {"x": 626.0, "y": 3167.0, "w": 483.0, "h": 67.0, "line_num": 30, "text": "turn - left ()"}, {"x": 630.0, "y": 3266.0, "w": 490.0, "h": 67.0, "line_num": 31, "text": "turn - left ()"}, {"x": 399.0, "y": 3387.0, "w": 132.0, "h": 67.0, "line_num": 32, "text": "dex"}, {"x": 645.0, "y": 3383.0, "w": 446.0, "h": 72.0, "line_num": 33, "text": "step -up():"}, {"x": 665.0, "y": 3494.0, "w": 265.0, "h": 60.0, "line_num": 34, "text": "move ( )"}, {"x": 660.0, "y": 3572.0, "w": 264.0, "h": 54.0, "line_num": 35, "text": "move ( )"}, {"x": 664.0, "y": 3660.0, "w": 278.0, "h": 58.0, "line_num": 36, "text": "move ( )"}, {"x": 673.0, "y": 3739.0, "w": 292.0, "h": 58.0, "line_num": 37, "text": "move ( )"}, {"x": 407.0, "y": 3836.0, "w": 1187.0, "h": 79.0, "line_num": 38, "text": "if - name _ = = - main _:"}, {"x": 641.0, "y": 3940.0, "w": 304.0, "h": 65.0, "line_num": 39, "text": "main ( )"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 105.61538461538461, "ir_algo_output_code": "from karel. stanford kavel import *\ndef main ():\n    build-column ( )\n    Step -up ( )\n    build - column ()\n    Step-up()\n    build- column ( )\n    Step-up()\n    build - column ()\ndef\n    build - column ( ) :\n    turn - left ( )\n    build - beeper ( )\n    build - beeper ( )\n    build - beeper ( )\n    build - beeper ( )\n    put - beeper ()\n    go - back ()\n    turn- left ( )\ndef\n    build - beeper ( ):\n    put- beeper ( )\n    move ()\ndet\n    go - back ():\n    turn- around ( )\n    Step -up ()\ndex\n    turn- around ( ) :\n    turn - left ()\n    turn - left ()\ndex\n    step -up():\n    move ( )\n    move ( )\n    move ( )\n    move ( )\nif - name _ = = - main _:\n    main ( )\n", "ir_algo_output_indented_lines": [{"x": 313.0, "y": 48.0, "w": 1497.0, "h": 76.0, "line_num": 1, "text": "from karel. stanford kavel import *", "cluster_label": 1, "indentation": 0}, {"x": 331.0, "y": 166.0, "w": 522.0, "h": 62.0, "line_num": 2, "text": "def main ():", "cluster_label": 1, "indentation": 0}, {"x": 531.0, "y": 267.0, "w": 599.0, "h": 69.0, "line_num": 3, "text": "build-column ( )", "cluster_label": 0, "indentation": 1}, {"x": 541.0, "y": 360.0, "w": 374.0, "h": 76.0, "line_num": 4, "text": "Step -up ( )", "cluster_label": 0, "indentation": 1}, {"x": 551.0, "y": 479.0, "w": 596.0, "h": 75.0, "line_num": 5, "text": "build - column ()", "cluster_label": 0, "indentation": 1}, {"x": 557.0, "y": 606.0, "w": 358.0, "h": 74.0, "line_num": 6, "text": "Step-up()", "cluster_label": 0, "indentation": 1}, {"x": 567.0, "y": 726.0, "w": 616.0, "h": 74.0, "line_num": 7, "text": "build- column ( )", "cluster_label": 0, "indentation": 1}, {"x": 574.0, "y": 862.0, "w": 358.0, "h": 75.0, "line_num": 8, "text": "Step-up()", "cluster_label": 0, "indentation": 1}, {"x": 579.0, "y": 988.0, "w": 645.0, "h": 76.0, "line_num": 9, "text": "build - column ()", "cluster_label": 0, "indentation": 1}, {"x": 338.0, "y": 1147.0, "w": 128.0, "h": 68.0, "line_num": 10, "text": "def", "cluster_label": 1, "indentation": 0}, {"x": 577.0, "y": 1157.0, "w": 711.0, "h": 80.0, "line_num": 11, "text": "build - column ( ) :", "cluster_label": 0, "indentation": 1}, {"x": 566.0, "y": 1296.0, "w": 510.0, "h": 76.0, "line_num": 12, "text": "turn - left ( )", "cluster_label": 0, "indentation": 1}, {"x": 580.0, "y": 1423.0, "w": 608.0, "h": 77.0, "line_num": 13, "text": "build - beeper ( )", "cluster_label": 0, "indentation": 1}, {"x": 591.0, "y": 1550.0, "w": 602.0, "h": 79.0, "line_num": 14, "text": "build - beeper ( )", "cluster_label": 0, "indentation": 1}, {"x": 588.0, "y": 1682.0, "w": 604.0, "h": 75.0, "line_num": 15, "text": "build - beeper ( )", "cluster_label": 0, "indentation": 1}, {"x": 599.0, "y": 1798.0, "w": 582.0, "h": 74.0, "line_num": 16, "text": "build - beeper ( )", "cluster_label": 0, "indentation": 1}, {"x": 599.0, "y": 1919.0, "w": 527.0, "h": 71.0, "line_num": 17, "text": "put - beeper ()", "cluster_label": 0, "indentation": 1}, {"x": 593.0, "y": 2038.0, "w": 452.0, "h": 69.0, "line_num": 18, "text": "go - back ()", "cluster_label": 0, "indentation": 1}, {"x": 593.0, "y": 2146.0, "w": 470.0, "h": 75.0, "line_num": 19, "text": "turn- left ( )", "cluster_label": 0, "indentation": 1}, {"x": 355.0, "y": 2305.0, "w": 125.0, "h": 70.0, "line_num": 20, "text": "def", "cluster_label": 1, "indentation": 0}, {"x": 590.0, "y": 2291.0, "w": 650.0, "h": 76.0, "line_num": 21, "text": "build - beeper ( ):", "cluster_label": 0, "indentation": 1}, {"x": 612.0, "y": 2414.0, "w": 539.0, "h": 75.0, "line_num": 22, "text": "put- beeper ( )", "cluster_label": 0, "indentation": 1}, {"x": 613.0, "y": 2544.0, "w": 272.0, "h": 54.0, "line_num": 23, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 370.0, "y": 2668.0, "w": 128.0, "h": 72.0, "line_num": 24, "text": "det", "cluster_label": 1, "indentation": 0}, {"x": 625.0, "y": 2682.0, "w": 488.0, "h": 73.0, "line_num": 25, "text": "go - back ():", "cluster_label": 0, "indentation": 1}, {"x": 627.0, "y": 2800.0, "w": 611.0, "h": 68.0, "line_num": 26, "text": "turn- around ( )", "cluster_label": 0, "indentation": 1}, {"x": 630.0, "y": 2919.0, "w": 400.0, "h": 72.0, "line_num": 27, "text": "Step -up ()", "cluster_label": 0, "indentation": 1}, {"x": 394.0, "y": 3068.0, "w": 126.0, "h": 67.0, "line_num": 28, "text": "dex", "cluster_label": 1, "indentation": 0}, {"x": 611.0, "y": 3061.0, "w": 653.0, "h": 71.0, "line_num": 29, "text": "turn- around ( ) :", "cluster_label": 0, "indentation": 1}, {"x": 626.0, "y": 3167.0, "w": 483.0, "h": 67.0, "line_num": 30, "text": "turn - left ()", "cluster_label": 0, "indentation": 1}, {"x": 630.0, "y": 3266.0, "w": 490.0, "h": 67.0, "line_num": 31, "text": "turn - left ()", "cluster_label": 0, "indentation": 1}, {"x": 399.0, "y": 3387.0, "w": 132.0, "h": 67.0, "line_num": 32, "text": "dex", "cluster_label": 1, "indentation": 0}, {"x": 645.0, "y": 3383.0, "w": 446.0, "h": 72.0, "line_num": 33, "text": "step -up():", "cluster_label": 0, "indentation": 1}, {"x": 665.0, "y": 3494.0, "w": 265.0, "h": 60.0, "line_num": 34, "text": "move ( )", "cluster_label": 0, "indentation": 1}, {"x": 660.0, "y": 3572.0, "w": 264.0, "h": 54.0, "line_num": 35, "text": "move ( )", "cluster_label": 0, "indentation": 1}, {"x": 664.0, "y": 3660.0, "w": 278.0, "h": 58.0, "line_num": 36, "text": "move ( )", "cluster_label": 0, "indentation": 1}, {"x": 673.0, "y": 3739.0, "w": 292.0, "h": 58.0, "line_num": 37, "text": "move ( )", "cluster_label": 0, "indentation": 1}, {"x": 407.0, "y": 3836.0, "w": 1187.0, "h": 79.0, "line_num": 38, "text": "if - name _ = = - main _:", "cluster_label": 1, "indentation": 0}, {"x": 641.0, "y": 3940.0, "w": 304.0, "h": 65.0, "line_num": 39, "text": "main ( )", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 157, "prompting_method": "simple-test2", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    build_column()\n    step_up()\n    build_column()\n    step_up()\n    build_column()\n    step_up()\n    build_column()\n\ndef build_column():\n    turn_left()\n    build_beeper()\n    build_beeper()\n    build_beeper()\n    build_beeper()\n    put_beeper()\n    go_back()\n    turn_left()\n\ndef build_beeper():\n    put_beeper()\n    move()\n\ndef go_back():\n    turn_around()\n    step_up()\n\ndef turn_around():\n    turn_left()\n    turn_left()\n\ndef step_up():\n    move()\n    move()\n    move()\n    move()\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 0}, {"image_id": 37, "image_height": 4032, "image_width": 3024, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 313.0, "y": 48.0, "w": 1497.0, "h": 76.0, "line_num": 1, "text": "from karel. stanford kavel import *"}, {"x": 331.0, "y": 166.0, "w": 522.0, "h": 62.0, "line_num": 2, "text": "def main ():"}, {"x": 531.0, "y": 267.0, "w": 599.0, "h": 69.0, "line_num": 3, "text": "build-column ( )"}, {"x": 541.0, "y": 360.0, "w": 374.0, "h": 76.0, "line_num": 4, "text": "Step -up ( )"}, {"x": 551.0, "y": 479.0, "w": 596.0, "h": 75.0, "line_num": 5, "text": "build - column ()"}, {"x": 557.0, "y": 606.0, "w": 358.0, "h": 74.0, "line_num": 6, "text": "Step-up()"}, {"x": 567.0, "y": 726.0, "w": 616.0, "h": 74.0, "line_num": 7, "text": "build- column ( )"}, {"x": 574.0, "y": 862.0, "w": 358.0, "h": 75.0, "line_num": 8, "text": "Step-up()"}, {"x": 579.0, "y": 988.0, "w": 645.0, "h": 76.0, "line_num": 9, "text": "build - column ()"}, {"x": 338.0, "y": 1147.0, "w": 128.0, "h": 68.0, "line_num": 10, "text": "def"}, {"x": 577.0, "y": 1157.0, "w": 711.0, "h": 80.0, "line_num": 11, "text": "build - column ( ) :"}, {"x": 566.0, "y": 1296.0, "w": 510.0, "h": 76.0, "line_num": 12, "text": "turn - left ( )"}, {"x": 580.0, "y": 1423.0, "w": 608.0, "h": 77.0, "line_num": 13, "text": "build - beeper ( )"}, {"x": 591.0, "y": 1550.0, "w": 602.0, "h": 79.0, "line_num": 14, "text": "build - beeper ( )"}, {"x": 588.0, "y": 1682.0, "w": 604.0, "h": 75.0, "line_num": 15, "text": "build - beeper ( )"}, {"x": 599.0, "y": 1798.0, "w": 582.0, "h": 74.0, "line_num": 16, "text": "build - beeper ( )"}, {"x": 599.0, "y": 1919.0, "w": 527.0, "h": 71.0, "line_num": 17, "text": "put - beeper ()"}, {"x": 593.0, "y": 2038.0, "w": 452.0, "h": 69.0, "line_num": 18, "text": "go - back ()"}, {"x": 593.0, "y": 2146.0, "w": 470.0, "h": 75.0, "line_num": 19, "text": "turn- left ( )"}, {"x": 355.0, "y": 2305.0, "w": 125.0, "h": 70.0, "line_num": 20, "text": "def"}, {"x": 590.0, "y": 2291.0, "w": 650.0, "h": 76.0, "line_num": 21, "text": "build - beeper ( ):"}, {"x": 612.0, "y": 2414.0, "w": 539.0, "h": 75.0, "line_num": 22, "text": "put- beeper ( )"}, {"x": 613.0, "y": 2544.0, "w": 272.0, "h": 54.0, "line_num": 23, "text": "move ()"}, {"x": 370.0, "y": 2668.0, "w": 128.0, "h": 72.0, "line_num": 24, "text": "det"}, {"x": 625.0, "y": 2682.0, "w": 488.0, "h": 73.0, "line_num": 25, "text": "go - back ():"}, {"x": 627.0, "y": 2800.0, "w": 611.0, "h": 68.0, "line_num": 26, "text": "turn- around ( )"}, {"x": 630.0, "y": 2919.0, "w": 400.0, "h": 72.0, "line_num": 27, "text": "Step -up ()"}, {"x": 394.0, "y": 3068.0, "w": 126.0, "h": 67.0, "line_num": 28, "text": "dex"}, {"x": 611.0, "y": 3061.0, "w": 653.0, "h": 71.0, "line_num": 29, "text": "turn- around ( ) :"}, {"x": 626.0, "y": 3167.0, "w": 483.0, "h": 67.0, "line_num": 30, "text": "turn - left ()"}, {"x": 630.0, "y": 3266.0, "w": 490.0, "h": 67.0, "line_num": 31, "text": "turn - left ()"}, {"x": 399.0, "y": 3387.0, "w": 132.0, "h": 67.0, "line_num": 32, "text": "dex"}, {"x": 645.0, "y": 3383.0, "w": 446.0, "h": 72.0, "line_num": 33, "text": "step -up():"}, {"x": 665.0, "y": 3494.0, "w": 265.0, "h": 60.0, "line_num": 34, "text": "move ( )"}, {"x": 660.0, "y": 3572.0, "w": 264.0, "h": 54.0, "line_num": 35, "text": "move ( )"}, {"x": 664.0, "y": 3660.0, "w": 278.0, "h": 58.0, "line_num": 36, "text": "move ( )"}, {"x": 673.0, "y": 3739.0, "w": 292.0, "h": 58.0, "line_num": 37, "text": "move ( )"}, {"x": 407.0, "y": 3836.0, "w": 1187.0, "h": 79.0, "line_num": 38, "text": "if - name _ = = - main _:"}, {"x": 641.0, "y": 3940.0, "w": 304.0, "h": 65.0, "line_num": 39, "text": "main ( )"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 105.61538461538461, "ir_algo_output_code": "from karel. stanford kavel import *\ndef main ():\n    build-column ( )\n    Step -up ( )\n    build - column ()\n    Step-up()\n    build- column ( )\n    Step-up()\n    build - column ()\ndef\n    build - column ( ) :\n    turn - left ( )\n    build - beeper ( )\n    build - beeper ( )\n    build - beeper ( )\n    build - beeper ( )\n    put - beeper ()\n    go - back ()\n    turn- left ( )\ndef\n    build - beeper ( ):\n    put- beeper ( )\n    move ()\ndet\n    go - back ():\n    turn- around ( )\n    Step -up ()\ndex\n    turn- around ( ) :\n    turn - left ()\n    turn - left ()\ndex\n    step -up():\n    move ( )\n    move ( )\n    move ( )\n    move ( )\nif - name _ = = - main _:\n    main ( )\n", "ir_algo_output_indented_lines": [{"x": 313.0, "y": 48.0, "w": 1497.0, "h": 76.0, "line_num": 1, "text": "from karel. stanford kavel import *", "cluster_label": 1, "indentation": 0}, {"x": 331.0, "y": 166.0, "w": 522.0, "h": 62.0, "line_num": 2, "text": "def main ():", "cluster_label": 1, "indentation": 0}, {"x": 531.0, "y": 267.0, "w": 599.0, "h": 69.0, "line_num": 3, "text": "build-column ( )", "cluster_label": 0, "indentation": 1}, {"x": 541.0, "y": 360.0, "w": 374.0, "h": 76.0, "line_num": 4, "text": "Step -up ( )", "cluster_label": 0, "indentation": 1}, {"x": 551.0, "y": 479.0, "w": 596.0, "h": 75.0, "line_num": 5, "text": "build - column ()", "cluster_label": 0, "indentation": 1}, {"x": 557.0, "y": 606.0, "w": 358.0, "h": 74.0, "line_num": 6, "text": "Step-up()", "cluster_label": 0, "indentation": 1}, {"x": 567.0, "y": 726.0, "w": 616.0, "h": 74.0, "line_num": 7, "text": "build- column ( )", "cluster_label": 0, "indentation": 1}, {"x": 574.0, "y": 862.0, "w": 358.0, "h": 75.0, "line_num": 8, "text": "Step-up()", "cluster_label": 0, "indentation": 1}, {"x": 579.0, "y": 988.0, "w": 645.0, "h": 76.0, "line_num": 9, "text": "build - column ()", "cluster_label": 0, "indentation": 1}, {"x": 338.0, "y": 1147.0, "w": 128.0, "h": 68.0, "line_num": 10, "text": "def", "cluster_label": 1, "indentation": 0}, {"x": 577.0, "y": 1157.0, "w": 711.0, "h": 80.0, "line_num": 11, "text": "build - column ( ) :", "cluster_label": 0, "indentation": 1}, {"x": 566.0, "y": 1296.0, "w": 510.0, "h": 76.0, "line_num": 12, "text": "turn - left ( )", "cluster_label": 0, "indentation": 1}, {"x": 580.0, "y": 1423.0, "w": 608.0, "h": 77.0, "line_num": 13, "text": "build - beeper ( )", "cluster_label": 0, "indentation": 1}, {"x": 591.0, "y": 1550.0, "w": 602.0, "h": 79.0, "line_num": 14, "text": "build - beeper ( )", "cluster_label": 0, "indentation": 1}, {"x": 588.0, "y": 1682.0, "w": 604.0, "h": 75.0, "line_num": 15, "text": "build - beeper ( )", "cluster_label": 0, "indentation": 1}, {"x": 599.0, "y": 1798.0, "w": 582.0, "h": 74.0, "line_num": 16, "text": "build - beeper ( )", "cluster_label": 0, "indentation": 1}, {"x": 599.0, "y": 1919.0, "w": 527.0, "h": 71.0, "line_num": 17, "text": "put - beeper ()", "cluster_label": 0, "indentation": 1}, {"x": 593.0, "y": 2038.0, "w": 452.0, "h": 69.0, "line_num": 18, "text": "go - back ()", "cluster_label": 0, "indentation": 1}, {"x": 593.0, "y": 2146.0, "w": 470.0, "h": 75.0, "line_num": 19, "text": "turn- left ( )", "cluster_label": 0, "indentation": 1}, {"x": 355.0, "y": 2305.0, "w": 125.0, "h": 70.0, "line_num": 20, "text": "def", "cluster_label": 1, "indentation": 0}, {"x": 590.0, "y": 2291.0, "w": 650.0, "h": 76.0, "line_num": 21, "text": "build - beeper ( ):", "cluster_label": 0, "indentation": 1}, {"x": 612.0, "y": 2414.0, "w": 539.0, "h": 75.0, "line_num": 22, "text": "put- beeper ( )", "cluster_label": 0, "indentation": 1}, {"x": 613.0, "y": 2544.0, "w": 272.0, "h": 54.0, "line_num": 23, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 370.0, "y": 2668.0, "w": 128.0, "h": 72.0, "line_num": 24, "text": "det", "cluster_label": 1, "indentation": 0}, {"x": 625.0, "y": 2682.0, "w": 488.0, "h": 73.0, "line_num": 25, "text": "go - back ():", "cluster_label": 0, "indentation": 1}, {"x": 627.0, "y": 2800.0, "w": 611.0, "h": 68.0, "line_num": 26, "text": "turn- around ( )", "cluster_label": 0, "indentation": 1}, {"x": 630.0, "y": 2919.0, "w": 400.0, "h": 72.0, "line_num": 27, "text": "Step -up ()", "cluster_label": 0, "indentation": 1}, {"x": 394.0, "y": 3068.0, "w": 126.0, "h": 67.0, "line_num": 28, "text": "dex", "cluster_label": 1, "indentation": 0}, {"x": 611.0, "y": 3061.0, "w": 653.0, "h": 71.0, "line_num": 29, "text": "turn- around ( ) :", "cluster_label": 0, "indentation": 1}, {"x": 626.0, "y": 3167.0, "w": 483.0, "h": 67.0, "line_num": 30, "text": "turn - left ()", "cluster_label": 0, "indentation": 1}, {"x": 630.0, "y": 3266.0, "w": 490.0, "h": 67.0, "line_num": 31, "text": "turn - left ()", "cluster_label": 0, "indentation": 1}, {"x": 399.0, "y": 3387.0, "w": 132.0, "h": 67.0, "line_num": 32, "text": "dex", "cluster_label": 1, "indentation": 0}, {"x": 645.0, "y": 3383.0, "w": 446.0, "h": 72.0, "line_num": 33, "text": "step -up():", "cluster_label": 0, "indentation": 1}, {"x": 665.0, "y": 3494.0, "w": 265.0, "h": 60.0, "line_num": 34, "text": "move ( )", "cluster_label": 0, "indentation": 1}, {"x": 660.0, "y": 3572.0, "w": 264.0, "h": 54.0, "line_num": 35, "text": "move ( )", "cluster_label": 0, "indentation": 1}, {"x": 664.0, "y": 3660.0, "w": 278.0, "h": 58.0, "line_num": 36, "text": "move ( )", "cluster_label": 0, "indentation": 1}, {"x": 673.0, "y": 3739.0, "w": 292.0, "h": 58.0, "line_num": 37, "text": "move ( )", "cluster_label": 0, "indentation": 1}, {"x": 407.0, "y": 3836.0, "w": 1187.0, "h": 79.0, "line_num": 38, "text": "if - name _ = = - main _:", "cluster_label": 1, "indentation": 0}, {"x": 641.0, "y": 3940.0, "w": 304.0, "h": 65.0, "line_num": 39, "text": "main ( )", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 157, "prompting_method": "simple-test3", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    build_column()\n    step_up()\n    build_column()\n    step_up()\n    build_column()\n    step_up()\n    build_column()\n\ndef build_column():\n    turn_left()\n    build_beeper()\n    build_beeper()\n    build_beeper()\n    build_beeper()\n    put_beeper()\n    go_back()\n    turn_left()\n\ndef build_beeper():\n    put_beeper()\n    move()\n\ndef go_back():\n    turn_around()\n    step_up()\n\ndef turn_around():\n    turn_left()\n    turn_left()\n\ndef step_up():\n    move()\n    move()\n    move()\n    move()\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 0}, {"image_id": 37, "image_height": 4032, "image_width": 3024, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 313.0, "y": 48.0, "w": 1497.0, "h": 76.0, "line_num": 1, "text": "from karel. stanford kavel import *"}, {"x": 331.0, "y": 166.0, "w": 522.0, "h": 62.0, "line_num": 2, "text": "def main ():"}, {"x": 531.0, "y": 267.0, "w": 599.0, "h": 69.0, "line_num": 3, "text": "build-column ( )"}, {"x": 541.0, "y": 360.0, "w": 374.0, "h": 76.0, "line_num": 4, "text": "Step -up ( )"}, {"x": 551.0, "y": 479.0, "w": 596.0, "h": 75.0, "line_num": 5, "text": "build - column ()"}, {"x": 557.0, "y": 606.0, "w": 358.0, "h": 74.0, "line_num": 6, "text": "Step-up()"}, {"x": 567.0, "y": 726.0, "w": 616.0, "h": 74.0, "line_num": 7, "text": "build- column ( )"}, {"x": 574.0, "y": 862.0, "w": 358.0, "h": 75.0, "line_num": 8, "text": "Step-up()"}, {"x": 579.0, "y": 988.0, "w": 645.0, "h": 76.0, "line_num": 9, "text": "build - column ()"}, {"x": 338.0, "y": 1147.0, "w": 128.0, "h": 68.0, "line_num": 10, "text": "def"}, {"x": 577.0, "y": 1157.0, "w": 711.0, "h": 80.0, "line_num": 11, "text": "build - column ( ) :"}, {"x": 566.0, "y": 1296.0, "w": 510.0, "h": 76.0, "line_num": 12, "text": "turn - left ( )"}, {"x": 580.0, "y": 1423.0, "w": 608.0, "h": 77.0, "line_num": 13, "text": "build - beeper ( )"}, {"x": 591.0, "y": 1550.0, "w": 602.0, "h": 79.0, "line_num": 14, "text": "build - beeper ( )"}, {"x": 588.0, "y": 1682.0, "w": 604.0, "h": 75.0, "line_num": 15, "text": "build - beeper ( )"}, {"x": 599.0, "y": 1798.0, "w": 582.0, "h": 74.0, "line_num": 16, "text": "build - beeper ( )"}, {"x": 599.0, "y": 1919.0, "w": 527.0, "h": 71.0, "line_num": 17, "text": "put - beeper ()"}, {"x": 593.0, "y": 2038.0, "w": 452.0, "h": 69.0, "line_num": 18, "text": "go - back ()"}, {"x": 593.0, "y": 2146.0, "w": 470.0, "h": 75.0, "line_num": 19, "text": "turn- left ( )"}, {"x": 355.0, "y": 2305.0, "w": 125.0, "h": 70.0, "line_num": 20, "text": "def"}, {"x": 590.0, "y": 2291.0, "w": 650.0, "h": 76.0, "line_num": 21, "text": "build - beeper ( ):"}, {"x": 612.0, "y": 2414.0, "w": 539.0, "h": 75.0, "line_num": 22, "text": "put- beeper ( )"}, {"x": 613.0, "y": 2544.0, "w": 272.0, "h": 54.0, "line_num": 23, "text": "move ()"}, {"x": 370.0, "y": 2668.0, "w": 128.0, "h": 72.0, "line_num": 24, "text": "det"}, {"x": 625.0, "y": 2682.0, "w": 488.0, "h": 73.0, "line_num": 25, "text": "go - back ():"}, {"x": 627.0, "y": 2800.0, "w": 611.0, "h": 68.0, "line_num": 26, "text": "turn- around ( )"}, {"x": 630.0, "y": 2919.0, "w": 400.0, "h": 72.0, "line_num": 27, "text": "Step -up ()"}, {"x": 394.0, "y": 3068.0, "w": 126.0, "h": 67.0, "line_num": 28, "text": "dex"}, {"x": 611.0, "y": 3061.0, "w": 653.0, "h": 71.0, "line_num": 29, "text": "turn- around ( ) :"}, {"x": 626.0, "y": 3167.0, "w": 483.0, "h": 67.0, "line_num": 30, "text": "turn - left ()"}, {"x": 630.0, "y": 3266.0, "w": 490.0, "h": 67.0, "line_num": 31, "text": "turn - left ()"}, {"x": 399.0, "y": 3387.0, "w": 132.0, "h": 67.0, "line_num": 32, "text": "dex"}, {"x": 645.0, "y": 3383.0, "w": 446.0, "h": 72.0, "line_num": 33, "text": "step -up():"}, {"x": 665.0, "y": 3494.0, "w": 265.0, "h": 60.0, "line_num": 34, "text": "move ( )"}, {"x": 660.0, "y": 3572.0, "w": 264.0, "h": 54.0, "line_num": 35, "text": "move ( )"}, {"x": 664.0, "y": 3660.0, "w": 278.0, "h": 58.0, "line_num": 36, "text": "move ( )"}, {"x": 673.0, "y": 3739.0, "w": 292.0, "h": 58.0, "line_num": 37, "text": "move ( )"}, {"x": 407.0, "y": 3836.0, "w": 1187.0, "h": 79.0, "line_num": 38, "text": "if - name _ = = - main _:"}, {"x": 641.0, "y": 3940.0, "w": 304.0, "h": 65.0, "line_num": 39, "text": "main ( )"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "from karel. stanford kavel import *\ndef main ():\n    build-column ( )\n    Step -up ( )\n    build - column ()\n    Step-up()\n    build- column ( )\n    Step-up()\n    build - column ()\ndef\n    build - column ( ) :\n    turn - left ( )\n    build - beeper ( )\n    build - beeper ( )\n    build - beeper ( )\n    build - beeper ( )\n    put - beeper ()\n    go - back ()\n    turn- left ( )\ndef\n    build - beeper ( ):\n    put- beeper ( )\n    move ()\ndet\n    go - back ():\n    turn- around ( )\n    Step -up ()\ndex\n    turn- around ( ) :\n    turn - left ()\n    turn - left ()\ndex\n    step -up():\n    move ( )\n    move ( )\n    move ( )\n    move ( )\nif - name _ = = - main _:\n    main ( )\n", "ir_algo_output_indented_lines": [{"x": 313.0, "y": 48.0, "w": 1497.0, "h": 76.0, "line_num": 1, "text": "from karel. stanford kavel import *", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 331.0, "y": 166.0, "w": 522.0, "h": 62.0, "line_num": 2, "text": "def main ():", "delta": 18.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 531.0, "y": 267.0, "w": 599.0, "h": 69.0, "line_num": 3, "text": "build-column ( )", "delta": 200.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 541.0, "y": 360.0, "w": 374.0, "h": 76.0, "line_num": 4, "text": "Step -up ( )", "delta": 10.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 551.0, "y": 479.0, "w": 596.0, "h": 75.0, "line_num": 5, "text": "build - column ()", "delta": 10.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 557.0, "y": 606.0, "w": 358.0, "h": 74.0, "line_num": 6, "text": "Step-up()", "delta": 6.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 567.0, "y": 726.0, "w": 616.0, "h": 74.0, "line_num": 7, "text": "build- column ( )", "delta": 10.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 574.0, "y": 862.0, "w": 358.0, "h": 75.0, "line_num": 8, "text": "Step-up()", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 579.0, "y": 988.0, "w": 645.0, "h": 76.0, "line_num": 9, "text": "build - column ()", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 338.0, "y": 1147.0, "w": 128.0, "h": 68.0, "line_num": 10, "text": "def", "delta": -241.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 577.0, "y": 1157.0, "w": 711.0, "h": 80.0, "line_num": 11, "text": "build - column ( ) :", "delta": 239.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 566.0, "y": 1296.0, "w": 510.0, "h": 76.0, "line_num": 12, "text": "turn - left ( )", "delta": -11.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 580.0, "y": 1423.0, "w": 608.0, "h": 77.0, "line_num": 13, "text": "build - beeper ( )", "delta": 14.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 591.0, "y": 1550.0, "w": 602.0, "h": 79.0, "line_num": 14, "text": "build - beeper ( )", "delta": 11.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 588.0, "y": 1682.0, "w": 604.0, "h": 75.0, "line_num": 15, "text": "build - beeper ( )", "delta": -3.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 599.0, "y": 1798.0, "w": 582.0, "h": 74.0, "line_num": 16, "text": "build - beeper ( )", "delta": 11.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 599.0, "y": 1919.0, "w": 527.0, "h": 71.0, "line_num": 17, "text": "put - beeper ()", "delta": 0.0, "delta_type": "null", "gaussian_prediction": null, "cluster_label": 1}, {"x": 593.0, "y": 2038.0, "w": 452.0, "h": 69.0, "line_num": 18, "text": "go - back ()", "delta": -6.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 593.0, "y": 2146.0, "w": 470.0, "h": 75.0, "line_num": 19, "text": "turn- left ( )", "delta": 0.0, "delta_type": "null", "gaussian_prediction": null, "cluster_label": 1}, {"x": 355.0, "y": 2305.0, "w": 125.0, "h": 70.0, "line_num": 20, "text": "def", "delta": -238.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 590.0, "y": 2291.0, "w": 650.0, "h": 76.0, "line_num": 21, "text": "build - beeper ( ):", "delta": 235.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 612.0, "y": 2414.0, "w": 539.0, "h": 75.0, "line_num": 22, "text": "put- beeper ( )", "delta": 22.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 613.0, "y": 2544.0, "w": 272.0, "h": 54.0, "line_num": 23, "text": "move ()", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 370.0, "y": 2668.0, "w": 128.0, "h": 72.0, "line_num": 24, "text": "det", "delta": -243.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 625.0, "y": 2682.0, "w": 488.0, "h": 73.0, "line_num": 25, "text": "go - back ():", "delta": 255.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 627.0, "y": 2800.0, "w": 611.0, "h": 68.0, "line_num": 26, "text": "turn- around ( )", "delta": 2.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 630.0, "y": 2919.0, "w": 400.0, "h": 72.0, "line_num": 27, "text": "Step -up ()", "delta": 3.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 394.0, "y": 3068.0, "w": 126.0, "h": 67.0, "line_num": 28, "text": "dex", "delta": -236.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 611.0, "y": 3061.0, "w": 653.0, "h": 71.0, "line_num": 29, "text": "turn- around ( ) :", "delta": 217.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 626.0, "y": 3167.0, "w": 483.0, "h": 67.0, "line_num": 30, "text": "turn - left ()", "delta": 15.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 630.0, "y": 3266.0, "w": 490.0, "h": 67.0, "line_num": 31, "text": "turn - left ()", "delta": 4.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 399.0, "y": 3387.0, "w": 132.0, "h": 67.0, "line_num": 32, "text": "dex", "delta": -231.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 645.0, "y": 3383.0, "w": 446.0, "h": 72.0, "line_num": 33, "text": "step -up():", "delta": 246.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 665.0, "y": 3494.0, "w": 265.0, "h": 60.0, "line_num": 34, "text": "move ( )", "delta": 20.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 660.0, "y": 3572.0, "w": 264.0, "h": 54.0, "line_num": 35, "text": "move ( )", "delta": -5.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 664.0, "y": 3660.0, "w": 278.0, "h": 58.0, "line_num": 36, "text": "move ( )", "delta": 4.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 673.0, "y": 3739.0, "w": 292.0, "h": 58.0, "line_num": 37, "text": "move ( )", "delta": 9.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 407.0, "y": 3836.0, "w": 1187.0, "h": 79.0, "line_num": 38, "text": "if - name _ = = - main _:", "delta": -266.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 641.0, "y": 3940.0, "w": 304.0, "h": 65.0, "line_num": 39, "text": "main ( )", "delta": 234.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}], "ir_algo_output_edit_distance": 157, "prompting_method": "none", "lm_post_processed_code": "from karel. stanford kavel import *\ndef main ():\n    build-column ( )\n    Step -up ( )\n    build - column ()\n    Step-up()\n    build- column ( )\n    Step-up()\n    build - column ()\ndef\n    build - column ( ) :\n    turn - left ( )\n    build - beeper ( )\n    build - beeper ( )\n    build - beeper ( )\n    build - beeper ( )\n    put - beeper ()\n    go - back ()\n    turn- left ( )\ndef\n    build - beeper ( ):\n    put- beeper ( )\n    move ()\ndet\n    go - back ():\n    turn- around ( )\n    Step -up ()\ndex\n    turn- around ( ) :\n    turn - left ()\n    turn - left ()\ndex\n    step -up():\n    move ( )\n    move ( )\n    move ( )\n    move ( )\nif - name _ = = - main _:\n    main ( )\n", "lm_post_processed_edit_distance": 157}, {"image_id": 37, "image_height": 4032, "image_width": 3024, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 313.0, "y": 48.0, "w": 1497.0, "h": 76.0, "line_num": 1, "text": "from karel. stanford kavel import *"}, {"x": 331.0, "y": 166.0, "w": 522.0, "h": 62.0, "line_num": 2, "text": "def main ():"}, {"x": 531.0, "y": 267.0, "w": 599.0, "h": 69.0, "line_num": 3, "text": "build-column ( )"}, {"x": 541.0, "y": 360.0, "w": 374.0, "h": 76.0, "line_num": 4, "text": "Step -up ( )"}, {"x": 551.0, "y": 479.0, "w": 596.0, "h": 75.0, "line_num": 5, "text": "build - column ()"}, {"x": 557.0, "y": 606.0, "w": 358.0, "h": 74.0, "line_num": 6, "text": "Step-up()"}, {"x": 567.0, "y": 726.0, "w": 616.0, "h": 74.0, "line_num": 7, "text": "build- column ( )"}, {"x": 574.0, "y": 862.0, "w": 358.0, "h": 75.0, "line_num": 8, "text": "Step-up()"}, {"x": 579.0, "y": 988.0, "w": 645.0, "h": 76.0, "line_num": 9, "text": "build - column ()"}, {"x": 338.0, "y": 1147.0, "w": 128.0, "h": 68.0, "line_num": 10, "text": "def"}, {"x": 577.0, "y": 1157.0, "w": 711.0, "h": 80.0, "line_num": 11, "text": "build - column ( ) :"}, {"x": 566.0, "y": 1296.0, "w": 510.0, "h": 76.0, "line_num": 12, "text": "turn - left ( )"}, {"x": 580.0, "y": 1423.0, "w": 608.0, "h": 77.0, "line_num": 13, "text": "build - beeper ( )"}, {"x": 591.0, "y": 1550.0, "w": 602.0, "h": 79.0, "line_num": 14, "text": "build - beeper ( )"}, {"x": 588.0, "y": 1682.0, "w": 604.0, "h": 75.0, "line_num": 15, "text": "build - beeper ( )"}, {"x": 599.0, "y": 1798.0, "w": 582.0, "h": 74.0, "line_num": 16, "text": "build - beeper ( )"}, {"x": 599.0, "y": 1919.0, "w": 527.0, "h": 71.0, "line_num": 17, "text": "put - beeper ()"}, {"x": 593.0, "y": 2038.0, "w": 452.0, "h": 69.0, "line_num": 18, "text": "go - back ()"}, {"x": 593.0, "y": 2146.0, "w": 470.0, "h": 75.0, "line_num": 19, "text": "turn- left ( )"}, {"x": 355.0, "y": 2305.0, "w": 125.0, "h": 70.0, "line_num": 20, "text": "def"}, {"x": 590.0, "y": 2291.0, "w": 650.0, "h": 76.0, "line_num": 21, "text": "build - beeper ( ):"}, {"x": 612.0, "y": 2414.0, "w": 539.0, "h": 75.0, "line_num": 22, "text": "put- beeper ( )"}, {"x": 613.0, "y": 2544.0, "w": 272.0, "h": 54.0, "line_num": 23, "text": "move ()"}, {"x": 370.0, "y": 2668.0, "w": 128.0, "h": 72.0, "line_num": 24, "text": "det"}, {"x": 625.0, "y": 2682.0, "w": 488.0, "h": 73.0, "line_num": 25, "text": "go - back ():"}, {"x": 627.0, "y": 2800.0, "w": 611.0, "h": 68.0, "line_num": 26, "text": "turn- around ( )"}, {"x": 630.0, "y": 2919.0, "w": 400.0, "h": 72.0, "line_num": 27, "text": "Step -up ()"}, {"x": 394.0, "y": 3068.0, "w": 126.0, "h": 67.0, "line_num": 28, "text": "dex"}, {"x": 611.0, "y": 3061.0, "w": 653.0, "h": 71.0, "line_num": 29, "text": "turn- around ( ) :"}, {"x": 626.0, "y": 3167.0, "w": 483.0, "h": 67.0, "line_num": 30, "text": "turn - left ()"}, {"x": 630.0, "y": 3266.0, "w": 490.0, "h": 67.0, "line_num": 31, "text": "turn - left ()"}, {"x": 399.0, "y": 3387.0, "w": 132.0, "h": 67.0, "line_num": 32, "text": "dex"}, {"x": 645.0, "y": 3383.0, "w": 446.0, "h": 72.0, "line_num": 33, "text": "step -up():"}, {"x": 665.0, "y": 3494.0, "w": 265.0, "h": 60.0, "line_num": 34, "text": "move ( )"}, {"x": 660.0, "y": 3572.0, "w": 264.0, "h": 54.0, "line_num": 35, "text": "move ( )"}, {"x": 664.0, "y": 3660.0, "w": 278.0, "h": 58.0, "line_num": 36, "text": "move ( )"}, {"x": 673.0, "y": 3739.0, "w": 292.0, "h": 58.0, "line_num": 37, "text": "move ( )"}, {"x": 407.0, "y": 3836.0, "w": 1187.0, "h": 79.0, "line_num": 38, "text": "if - name _ = = - main _:"}, {"x": 641.0, "y": 3940.0, "w": 304.0, "h": 65.0, "line_num": 39, "text": "main ( )"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "from karel. stanford kavel import *\ndef main ():\n    build-column ( )\n    Step -up ( )\n    build - column ()\n    Step-up()\n    build- column ( )\n    Step-up()\n    build - column ()\ndef\n    build - column ( ) :\n    turn - left ( )\n    build - beeper ( )\n    build - beeper ( )\n    build - beeper ( )\n    build - beeper ( )\n    put - beeper ()\n    go - back ()\n    turn- left ( )\ndef\n    build - beeper ( ):\n    put- beeper ( )\n    move ()\ndet\n    go - back ():\n    turn- around ( )\n    Step -up ()\ndex\n    turn- around ( ) :\n    turn - left ()\n    turn - left ()\ndex\n    step -up():\n    move ( )\n    move ( )\n    move ( )\n    move ( )\nif - name _ = = - main _:\n    main ( )\n", "ir_algo_output_indented_lines": [{"x": 313.0, "y": 48.0, "w": 1497.0, "h": 76.0, "line_num": 1, "text": "from karel. stanford kavel import *", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 331.0, "y": 166.0, "w": 522.0, "h": 62.0, "line_num": 2, "text": "def main ():", "delta": 18.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 531.0, "y": 267.0, "w": 599.0, "h": 69.0, "line_num": 3, "text": "build-column ( )", "delta": 200.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 541.0, "y": 360.0, "w": 374.0, "h": 76.0, "line_num": 4, "text": "Step -up ( )", "delta": 10.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 551.0, "y": 479.0, "w": 596.0, "h": 75.0, "line_num": 5, "text": "build - column ()", "delta": 10.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 557.0, "y": 606.0, "w": 358.0, "h": 74.0, "line_num": 6, "text": "Step-up()", "delta": 6.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 567.0, "y": 726.0, "w": 616.0, "h": 74.0, "line_num": 7, "text": "build- column ( )", "delta": 10.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 574.0, "y": 862.0, "w": 358.0, "h": 75.0, "line_num": 8, "text": "Step-up()", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 579.0, "y": 988.0, "w": 645.0, "h": 76.0, "line_num": 9, "text": "build - column ()", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 338.0, "y": 1147.0, "w": 128.0, "h": 68.0, "line_num": 10, "text": "def", "delta": -241.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 577.0, "y": 1157.0, "w": 711.0, "h": 80.0, "line_num": 11, "text": "build - column ( ) :", "delta": 239.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 566.0, "y": 1296.0, "w": 510.0, "h": 76.0, "line_num": 12, "text": "turn - left ( )", "delta": -11.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 580.0, "y": 1423.0, "w": 608.0, "h": 77.0, "line_num": 13, "text": "build - beeper ( )", "delta": 14.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 591.0, "y": 1550.0, "w": 602.0, "h": 79.0, "line_num": 14, "text": "build - beeper ( )", "delta": 11.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 588.0, "y": 1682.0, "w": 604.0, "h": 75.0, "line_num": 15, "text": "build - beeper ( )", "delta": -3.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 599.0, "y": 1798.0, "w": 582.0, "h": 74.0, "line_num": 16, "text": "build - beeper ( )", "delta": 11.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 599.0, "y": 1919.0, "w": 527.0, "h": 71.0, "line_num": 17, "text": "put - beeper ()", "delta": 0.0, "delta_type": "null", "gaussian_prediction": null, "cluster_label": 1}, {"x": 593.0, "y": 2038.0, "w": 452.0, "h": 69.0, "line_num": 18, "text": "go - back ()", "delta": -6.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 593.0, "y": 2146.0, "w": 470.0, "h": 75.0, "line_num": 19, "text": "turn- left ( )", "delta": 0.0, "delta_type": "null", "gaussian_prediction": null, "cluster_label": 1}, {"x": 355.0, "y": 2305.0, "w": 125.0, "h": 70.0, "line_num": 20, "text": "def", "delta": -238.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 590.0, "y": 2291.0, "w": 650.0, "h": 76.0, "line_num": 21, "text": "build - beeper ( ):", "delta": 235.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 612.0, "y": 2414.0, "w": 539.0, "h": 75.0, "line_num": 22, "text": "put- beeper ( )", "delta": 22.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 613.0, "y": 2544.0, "w": 272.0, "h": 54.0, "line_num": 23, "text": "move ()", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 370.0, "y": 2668.0, "w": 128.0, "h": 72.0, "line_num": 24, "text": "det", "delta": -243.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 625.0, "y": 2682.0, "w": 488.0, "h": 73.0, "line_num": 25, "text": "go - back ():", "delta": 255.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 627.0, "y": 2800.0, "w": 611.0, "h": 68.0, "line_num": 26, "text": "turn- around ( )", "delta": 2.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 630.0, "y": 2919.0, "w": 400.0, "h": 72.0, "line_num": 27, "text": "Step -up ()", "delta": 3.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 394.0, "y": 3068.0, "w": 126.0, "h": 67.0, "line_num": 28, "text": "dex", "delta": -236.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 611.0, "y": 3061.0, "w": 653.0, "h": 71.0, "line_num": 29, "text": "turn- around ( ) :", "delta": 217.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 626.0, "y": 3167.0, "w": 483.0, "h": 67.0, "line_num": 30, "text": "turn - left ()", "delta": 15.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 630.0, "y": 3266.0, "w": 490.0, "h": 67.0, "line_num": 31, "text": "turn - left ()", "delta": 4.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 399.0, "y": 3387.0, "w": 132.0, "h": 67.0, "line_num": 32, "text": "dex", "delta": -231.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 645.0, "y": 3383.0, "w": 446.0, "h": 72.0, "line_num": 33, "text": "step -up():", "delta": 246.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 665.0, "y": 3494.0, "w": 265.0, "h": 60.0, "line_num": 34, "text": "move ( )", "delta": 20.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 660.0, "y": 3572.0, "w": 264.0, "h": 54.0, "line_num": 35, "text": "move ( )", "delta": -5.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 664.0, "y": 3660.0, "w": 278.0, "h": 58.0, "line_num": 36, "text": "move ( )", "delta": 4.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 673.0, "y": 3739.0, "w": 292.0, "h": 58.0, "line_num": 37, "text": "move ( )", "delta": 9.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 407.0, "y": 3836.0, "w": 1187.0, "h": 79.0, "line_num": 38, "text": "if - name _ = = - main _:", "delta": -266.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 641.0, "y": 3940.0, "w": 304.0, "h": 65.0, "line_num": 39, "text": "main ( )", "delta": 234.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}], "ir_algo_output_edit_distance": 157, "prompting_method": "cot-test1", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main ():\n    build_column ( )\n    step_up ( )\n    build_column ()\n    step_up()\n    build_column ( )\n    step_up()\n    build_column ()\ndef\n    build_column ( ) :\n    turn_left ( )\n    build_beeper ( )\n    build_beeper ( )\n    build_beeper ( )\n    build_beeper ( )\n    put_beeper ()\n    go_back ()\n    turn_left ( )\ndef\n    build_beeper ( ):\n    put_beeper ( )\n    move ()\ndef\n    go_back ():\n    turn_around ( )\n    step_up ()\ndef\n    turn_around ( ) :\n    turn_left ()\n    turn_left ()\ndef\n    step_up():\n    move ( )\n    move ( )\n    move ( )\n    move ( )\n\nif __name__ == \"__main__\":\n    main ( )\n", "lm_post_processed_edit_distance": 75}, {"image_id": 37, "image_height": 4032, "image_width": 3024, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 313.0, "y": 48.0, "w": 1497.0, "h": 76.0, "line_num": 1, "text": "from karel. stanford kavel import *"}, {"x": 331.0, "y": 166.0, "w": 522.0, "h": 62.0, "line_num": 2, "text": "def main ():"}, {"x": 531.0, "y": 267.0, "w": 599.0, "h": 69.0, "line_num": 3, "text": "build-column ( )"}, {"x": 541.0, "y": 360.0, "w": 374.0, "h": 76.0, "line_num": 4, "text": "Step -up ( )"}, {"x": 551.0, "y": 479.0, "w": 596.0, "h": 75.0, "line_num": 5, "text": "build - column ()"}, {"x": 557.0, "y": 606.0, "w": 358.0, "h": 74.0, "line_num": 6, "text": "Step-up()"}, {"x": 567.0, "y": 726.0, "w": 616.0, "h": 74.0, "line_num": 7, "text": "build- column ( )"}, {"x": 574.0, "y": 862.0, "w": 358.0, "h": 75.0, "line_num": 8, "text": "Step-up()"}, {"x": 579.0, "y": 988.0, "w": 645.0, "h": 76.0, "line_num": 9, "text": "build - column ()"}, {"x": 338.0, "y": 1147.0, "w": 128.0, "h": 68.0, "line_num": 10, "text": "def"}, {"x": 577.0, "y": 1157.0, "w": 711.0, "h": 80.0, "line_num": 11, "text": "build - column ( ) :"}, {"x": 566.0, "y": 1296.0, "w": 510.0, "h": 76.0, "line_num": 12, "text": "turn - left ( )"}, {"x": 580.0, "y": 1423.0, "w": 608.0, "h": 77.0, "line_num": 13, "text": "build - beeper ( )"}, {"x": 591.0, "y": 1550.0, "w": 602.0, "h": 79.0, "line_num": 14, "text": "build - beeper ( )"}, {"x": 588.0, "y": 1682.0, "w": 604.0, "h": 75.0, "line_num": 15, "text": "build - beeper ( )"}, {"x": 599.0, "y": 1798.0, "w": 582.0, "h": 74.0, "line_num": 16, "text": "build - beeper ( )"}, {"x": 599.0, "y": 1919.0, "w": 527.0, "h": 71.0, "line_num": 17, "text": "put - beeper ()"}, {"x": 593.0, "y": 2038.0, "w": 452.0, "h": 69.0, "line_num": 18, "text": "go - back ()"}, {"x": 593.0, "y": 2146.0, "w": 470.0, "h": 75.0, "line_num": 19, "text": "turn- left ( )"}, {"x": 355.0, "y": 2305.0, "w": 125.0, "h": 70.0, "line_num": 20, "text": "def"}, {"x": 590.0, "y": 2291.0, "w": 650.0, "h": 76.0, "line_num": 21, "text": "build - beeper ( ):"}, {"x": 612.0, "y": 2414.0, "w": 539.0, "h": 75.0, "line_num": 22, "text": "put- beeper ( )"}, {"x": 613.0, "y": 2544.0, "w": 272.0, "h": 54.0, "line_num": 23, "text": "move ()"}, {"x": 370.0, "y": 2668.0, "w": 128.0, "h": 72.0, "line_num": 24, "text": "det"}, {"x": 625.0, "y": 2682.0, "w": 488.0, "h": 73.0, "line_num": 25, "text": "go - back ():"}, {"x": 627.0, "y": 2800.0, "w": 611.0, "h": 68.0, "line_num": 26, "text": "turn- around ( )"}, {"x": 630.0, "y": 2919.0, "w": 400.0, "h": 72.0, "line_num": 27, "text": "Step -up ()"}, {"x": 394.0, "y": 3068.0, "w": 126.0, "h": 67.0, "line_num": 28, "text": "dex"}, {"x": 611.0, "y": 3061.0, "w": 653.0, "h": 71.0, "line_num": 29, "text": "turn- around ( ) :"}, {"x": 626.0, "y": 3167.0, "w": 483.0, "h": 67.0, "line_num": 30, "text": "turn - left ()"}, {"x": 630.0, "y": 3266.0, "w": 490.0, "h": 67.0, "line_num": 31, "text": "turn - left ()"}, {"x": 399.0, "y": 3387.0, "w": 132.0, "h": 67.0, "line_num": 32, "text": "dex"}, {"x": 645.0, "y": 3383.0, "w": 446.0, "h": 72.0, "line_num": 33, "text": "step -up():"}, {"x": 665.0, "y": 3494.0, "w": 265.0, "h": 60.0, "line_num": 34, "text": "move ( )"}, {"x": 660.0, "y": 3572.0, "w": 264.0, "h": 54.0, "line_num": 35, "text": "move ( )"}, {"x": 664.0, "y": 3660.0, "w": 278.0, "h": 58.0, "line_num": 36, "text": "move ( )"}, {"x": 673.0, "y": 3739.0, "w": 292.0, "h": 58.0, "line_num": 37, "text": "move ( )"}, {"x": 407.0, "y": 3836.0, "w": 1187.0, "h": 79.0, "line_num": 38, "text": "if - name _ = = - main _:"}, {"x": 641.0, "y": 3940.0, "w": 304.0, "h": 65.0, "line_num": 39, "text": "main ( )"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "from karel. stanford kavel import *\ndef main ():\n    build-column ( )\n    Step -up ( )\n    build - column ()\n    Step-up()\n    build- column ( )\n    Step-up()\n    build - column ()\ndef\n    build - column ( ) :\n    turn - left ( )\n    build - beeper ( )\n    build - beeper ( )\n    build - beeper ( )\n    build - beeper ( )\n    put - beeper ()\n    go - back ()\n    turn- left ( )\ndef\n    build - beeper ( ):\n    put- beeper ( )\n    move ()\ndet\n    go - back ():\n    turn- around ( )\n    Step -up ()\ndex\n    turn- around ( ) :\n    turn - left ()\n    turn - left ()\ndex\n    step -up():\n    move ( )\n    move ( )\n    move ( )\n    move ( )\nif - name _ = = - main _:\n    main ( )\n", "ir_algo_output_indented_lines": [{"x": 313.0, "y": 48.0, "w": 1497.0, "h": 76.0, "line_num": 1, "text": "from karel. stanford kavel import *", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 331.0, "y": 166.0, "w": 522.0, "h": 62.0, "line_num": 2, "text": "def main ():", "delta": 18.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 531.0, "y": 267.0, "w": 599.0, "h": 69.0, "line_num": 3, "text": "build-column ( )", "delta": 200.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 541.0, "y": 360.0, "w": 374.0, "h": 76.0, "line_num": 4, "text": "Step -up ( )", "delta": 10.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 551.0, "y": 479.0, "w": 596.0, "h": 75.0, "line_num": 5, "text": "build - column ()", "delta": 10.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 557.0, "y": 606.0, "w": 358.0, "h": 74.0, "line_num": 6, "text": "Step-up()", "delta": 6.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 567.0, "y": 726.0, "w": 616.0, "h": 74.0, "line_num": 7, "text": "build- column ( )", "delta": 10.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 574.0, "y": 862.0, "w": 358.0, "h": 75.0, "line_num": 8, "text": "Step-up()", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 579.0, "y": 988.0, "w": 645.0, "h": 76.0, "line_num": 9, "text": "build - column ()", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 338.0, "y": 1147.0, "w": 128.0, "h": 68.0, "line_num": 10, "text": "def", "delta": -241.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 577.0, "y": 1157.0, "w": 711.0, "h": 80.0, "line_num": 11, "text": "build - column ( ) :", "delta": 239.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 566.0, "y": 1296.0, "w": 510.0, "h": 76.0, "line_num": 12, "text": "turn - left ( )", "delta": -11.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 580.0, "y": 1423.0, "w": 608.0, "h": 77.0, "line_num": 13, "text": "build - beeper ( )", "delta": 14.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 591.0, "y": 1550.0, "w": 602.0, "h": 79.0, "line_num": 14, "text": "build - beeper ( )", "delta": 11.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 588.0, "y": 1682.0, "w": 604.0, "h": 75.0, "line_num": 15, "text": "build - beeper ( )", "delta": -3.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 599.0, "y": 1798.0, "w": 582.0, "h": 74.0, "line_num": 16, "text": "build - beeper ( )", "delta": 11.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 599.0, "y": 1919.0, "w": 527.0, "h": 71.0, "line_num": 17, "text": "put - beeper ()", "delta": 0.0, "delta_type": "null", "gaussian_prediction": null, "cluster_label": 1}, {"x": 593.0, "y": 2038.0, "w": 452.0, "h": 69.0, "line_num": 18, "text": "go - back ()", "delta": -6.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 593.0, "y": 2146.0, "w": 470.0, "h": 75.0, "line_num": 19, "text": "turn- left ( )", "delta": 0.0, "delta_type": "null", "gaussian_prediction": null, "cluster_label": 1}, {"x": 355.0, "y": 2305.0, "w": 125.0, "h": 70.0, "line_num": 20, "text": "def", "delta": -238.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 590.0, "y": 2291.0, "w": 650.0, "h": 76.0, "line_num": 21, "text": "build - beeper ( ):", "delta": 235.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 612.0, "y": 2414.0, "w": 539.0, "h": 75.0, "line_num": 22, "text": "put- beeper ( )", "delta": 22.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 613.0, "y": 2544.0, "w": 272.0, "h": 54.0, "line_num": 23, "text": "move ()", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 370.0, "y": 2668.0, "w": 128.0, "h": 72.0, "line_num": 24, "text": "det", "delta": -243.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 625.0, "y": 2682.0, "w": 488.0, "h": 73.0, "line_num": 25, "text": "go - back ():", "delta": 255.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 627.0, "y": 2800.0, "w": 611.0, "h": 68.0, "line_num": 26, "text": "turn- around ( )", "delta": 2.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 630.0, "y": 2919.0, "w": 400.0, "h": 72.0, "line_num": 27, "text": "Step -up ()", "delta": 3.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 394.0, "y": 3068.0, "w": 126.0, "h": 67.0, "line_num": 28, "text": "dex", "delta": -236.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 611.0, "y": 3061.0, "w": 653.0, "h": 71.0, "line_num": 29, "text": "turn- around ( ) :", "delta": 217.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 626.0, "y": 3167.0, "w": 483.0, "h": 67.0, "line_num": 30, "text": "turn - left ()", "delta": 15.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 630.0, "y": 3266.0, "w": 490.0, "h": 67.0, "line_num": 31, "text": "turn - left ()", "delta": 4.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 399.0, "y": 3387.0, "w": 132.0, "h": 67.0, "line_num": 32, "text": "dex", "delta": -231.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 645.0, "y": 3383.0, "w": 446.0, "h": 72.0, "line_num": 33, "text": "step -up():", "delta": 246.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 665.0, "y": 3494.0, "w": 265.0, "h": 60.0, "line_num": 34, "text": "move ( )", "delta": 20.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 660.0, "y": 3572.0, "w": 264.0, "h": 54.0, "line_num": 35, "text": "move ( )", "delta": -5.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 664.0, "y": 3660.0, "w": 278.0, "h": 58.0, "line_num": 36, "text": "move ( )", "delta": 4.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 673.0, "y": 3739.0, "w": 292.0, "h": 58.0, "line_num": 37, "text": "move ( )", "delta": 9.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 407.0, "y": 3836.0, "w": 1187.0, "h": 79.0, "line_num": 38, "text": "if - name _ = = - main _:", "delta": -266.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 641.0, "y": 3940.0, "w": 304.0, "h": 65.0, "line_num": 39, "text": "main ( )", "delta": 234.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}], "ir_algo_output_edit_distance": 157, "prompting_method": "cot-test5", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    build_column()\n    step_up()\n    build_column()\n    step_up()\n    build_column()\n    step_up()\n    build_column()\n\ndef build_column():\n    turn_left()\n    build_beeper()\n    build_beeper()\n    build_beeper()\n    build_beeper()\n    put_beeper()\n    go_back()\n    turn_left()\n\ndef build_beeper():\n    put_beeper()\n    move()\n\ndef go_back():\n    turn_around()\n    step_up()\n\ndef turn_around():\n    turn_left()\n    turn_left()\n\ndef step_up():\n    move()\n    move()\n    move()\n    move()\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 0}, {"image_id": 37, "image_height": 4032, "image_width": 3024, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 313.0, "y": 48.0, "w": 1497.0, "h": 76.0, "line_num": 1, "text": "from karel. stanford kavel import *"}, {"x": 331.0, "y": 166.0, "w": 522.0, "h": 62.0, "line_num": 2, "text": "def main ():"}, {"x": 531.0, "y": 267.0, "w": 599.0, "h": 69.0, "line_num": 3, "text": "build-column ( )"}, {"x": 541.0, "y": 360.0, "w": 374.0, "h": 76.0, "line_num": 4, "text": "Step -up ( )"}, {"x": 551.0, "y": 479.0, "w": 596.0, "h": 75.0, "line_num": 5, "text": "build - column ()"}, {"x": 557.0, "y": 606.0, "w": 358.0, "h": 74.0, "line_num": 6, "text": "Step-up()"}, {"x": 567.0, "y": 726.0, "w": 616.0, "h": 74.0, "line_num": 7, "text": "build- column ( )"}, {"x": 574.0, "y": 862.0, "w": 358.0, "h": 75.0, "line_num": 8, "text": "Step-up()"}, {"x": 579.0, "y": 988.0, "w": 645.0, "h": 76.0, "line_num": 9, "text": "build - column ()"}, {"x": 338.0, "y": 1147.0, "w": 128.0, "h": 68.0, "line_num": 10, "text": "def"}, {"x": 577.0, "y": 1157.0, "w": 711.0, "h": 80.0, "line_num": 11, "text": "build - column ( ) :"}, {"x": 566.0, "y": 1296.0, "w": 510.0, "h": 76.0, "line_num": 12, "text": "turn - left ( )"}, {"x": 580.0, "y": 1423.0, "w": 608.0, "h": 77.0, "line_num": 13, "text": "build - beeper ( )"}, {"x": 591.0, "y": 1550.0, "w": 602.0, "h": 79.0, "line_num": 14, "text": "build - beeper ( )"}, {"x": 588.0, "y": 1682.0, "w": 604.0, "h": 75.0, "line_num": 15, "text": "build - beeper ( )"}, {"x": 599.0, "y": 1798.0, "w": 582.0, "h": 74.0, "line_num": 16, "text": "build - beeper ( )"}, {"x": 599.0, "y": 1919.0, "w": 527.0, "h": 71.0, "line_num": 17, "text": "put - beeper ()"}, {"x": 593.0, "y": 2038.0, "w": 452.0, "h": 69.0, "line_num": 18, "text": "go - back ()"}, {"x": 593.0, "y": 2146.0, "w": 470.0, "h": 75.0, "line_num": 19, "text": "turn- left ( )"}, {"x": 355.0, "y": 2305.0, "w": 125.0, "h": 70.0, "line_num": 20, "text": "def"}, {"x": 590.0, "y": 2291.0, "w": 650.0, "h": 76.0, "line_num": 21, "text": "build - beeper ( ):"}, {"x": 612.0, "y": 2414.0, "w": 539.0, "h": 75.0, "line_num": 22, "text": "put- beeper ( )"}, {"x": 613.0, "y": 2544.0, "w": 272.0, "h": 54.0, "line_num": 23, "text": "move ()"}, {"x": 370.0, "y": 2668.0, "w": 128.0, "h": 72.0, "line_num": 24, "text": "det"}, {"x": 625.0, "y": 2682.0, "w": 488.0, "h": 73.0, "line_num": 25, "text": "go - back ():"}, {"x": 627.0, "y": 2800.0, "w": 611.0, "h": 68.0, "line_num": 26, "text": "turn- around ( )"}, {"x": 630.0, "y": 2919.0, "w": 400.0, "h": 72.0, "line_num": 27, "text": "Step -up ()"}, {"x": 394.0, "y": 3068.0, "w": 126.0, "h": 67.0, "line_num": 28, "text": "dex"}, {"x": 611.0, "y": 3061.0, "w": 653.0, "h": 71.0, "line_num": 29, "text": "turn- around ( ) :"}, {"x": 626.0, "y": 3167.0, "w": 483.0, "h": 67.0, "line_num": 30, "text": "turn - left ()"}, {"x": 630.0, "y": 3266.0, "w": 490.0, "h": 67.0, "line_num": 31, "text": "turn - left ()"}, {"x": 399.0, "y": 3387.0, "w": 132.0, "h": 67.0, "line_num": 32, "text": "dex"}, {"x": 645.0, "y": 3383.0, "w": 446.0, "h": 72.0, "line_num": 33, "text": "step -up():"}, {"x": 665.0, "y": 3494.0, "w": 265.0, "h": 60.0, "line_num": 34, "text": "move ( )"}, {"x": 660.0, "y": 3572.0, "w": 264.0, "h": 54.0, "line_num": 35, "text": "move ( )"}, {"x": 664.0, "y": 3660.0, "w": 278.0, "h": 58.0, "line_num": 36, "text": "move ( )"}, {"x": 673.0, "y": 3739.0, "w": 292.0, "h": 58.0, "line_num": 37, "text": "move ( )"}, {"x": 407.0, "y": 3836.0, "w": 1187.0, "h": 79.0, "line_num": 38, "text": "if - name _ = = - main _:"}, {"x": 641.0, "y": 3940.0, "w": 304.0, "h": 65.0, "line_num": 39, "text": "main ( )"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "from karel. stanford kavel import *\ndef main ():\n    build-column ( )\n    Step -up ( )\n    build - column ()\n    Step-up()\n    build- column ( )\n    Step-up()\n    build - column ()\ndef\n    build - column ( ) :\n    turn - left ( )\n    build - beeper ( )\n    build - beeper ( )\n    build - beeper ( )\n    build - beeper ( )\n    put - beeper ()\n    go - back ()\n    turn- left ( )\ndef\n    build - beeper ( ):\n    put- beeper ( )\n    move ()\ndet\n    go - back ():\n    turn- around ( )\n    Step -up ()\ndex\n    turn- around ( ) :\n    turn - left ()\n    turn - left ()\ndex\n    step -up():\n    move ( )\n    move ( )\n    move ( )\n    move ( )\nif - name _ = = - main _:\n    main ( )\n", "ir_algo_output_indented_lines": [{"x": 313.0, "y": 48.0, "w": 1497.0, "h": 76.0, "line_num": 1, "text": "from karel. stanford kavel import *", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 331.0, "y": 166.0, "w": 522.0, "h": 62.0, "line_num": 2, "text": "def main ():", "delta": 18.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 531.0, "y": 267.0, "w": 599.0, "h": 69.0, "line_num": 3, "text": "build-column ( )", "delta": 200.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 541.0, "y": 360.0, "w": 374.0, "h": 76.0, "line_num": 4, "text": "Step -up ( )", "delta": 10.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 551.0, "y": 479.0, "w": 596.0, "h": 75.0, "line_num": 5, "text": "build - column ()", "delta": 10.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 557.0, "y": 606.0, "w": 358.0, "h": 74.0, "line_num": 6, "text": "Step-up()", "delta": 6.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 567.0, "y": 726.0, "w": 616.0, "h": 74.0, "line_num": 7, "text": "build- column ( )", "delta": 10.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 574.0, "y": 862.0, "w": 358.0, "h": 75.0, "line_num": 8, "text": "Step-up()", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 579.0, "y": 988.0, "w": 645.0, "h": 76.0, "line_num": 9, "text": "build - column ()", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 338.0, "y": 1147.0, "w": 128.0, "h": 68.0, "line_num": 10, "text": "def", "delta": -241.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 577.0, "y": 1157.0, "w": 711.0, "h": 80.0, "line_num": 11, "text": "build - column ( ) :", "delta": 239.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 566.0, "y": 1296.0, "w": 510.0, "h": 76.0, "line_num": 12, "text": "turn - left ( )", "delta": -11.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 580.0, "y": 1423.0, "w": 608.0, "h": 77.0, "line_num": 13, "text": "build - beeper ( )", "delta": 14.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 591.0, "y": 1550.0, "w": 602.0, "h": 79.0, "line_num": 14, "text": "build - beeper ( )", "delta": 11.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 588.0, "y": 1682.0, "w": 604.0, "h": 75.0, "line_num": 15, "text": "build - beeper ( )", "delta": -3.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 599.0, "y": 1798.0, "w": 582.0, "h": 74.0, "line_num": 16, "text": "build - beeper ( )", "delta": 11.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 599.0, "y": 1919.0, "w": 527.0, "h": 71.0, "line_num": 17, "text": "put - beeper ()", "delta": 0.0, "delta_type": "null", "gaussian_prediction": null, "cluster_label": 1}, {"x": 593.0, "y": 2038.0, "w": 452.0, "h": 69.0, "line_num": 18, "text": "go - back ()", "delta": -6.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 593.0, "y": 2146.0, "w": 470.0, "h": 75.0, "line_num": 19, "text": "turn- left ( )", "delta": 0.0, "delta_type": "null", "gaussian_prediction": null, "cluster_label": 1}, {"x": 355.0, "y": 2305.0, "w": 125.0, "h": 70.0, "line_num": 20, "text": "def", "delta": -238.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 590.0, "y": 2291.0, "w": 650.0, "h": 76.0, "line_num": 21, "text": "build - beeper ( ):", "delta": 235.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 612.0, "y": 2414.0, "w": 539.0, "h": 75.0, "line_num": 22, "text": "put- beeper ( )", "delta": 22.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 613.0, "y": 2544.0, "w": 272.0, "h": 54.0, "line_num": 23, "text": "move ()", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 370.0, "y": 2668.0, "w": 128.0, "h": 72.0, "line_num": 24, "text": "det", "delta": -243.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 625.0, "y": 2682.0, "w": 488.0, "h": 73.0, "line_num": 25, "text": "go - back ():", "delta": 255.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 627.0, "y": 2800.0, "w": 611.0, "h": 68.0, "line_num": 26, "text": "turn- around ( )", "delta": 2.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 630.0, "y": 2919.0, "w": 400.0, "h": 72.0, "line_num": 27, "text": "Step -up ()", "delta": 3.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 394.0, "y": 3068.0, "w": 126.0, "h": 67.0, "line_num": 28, "text": "dex", "delta": -236.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 611.0, "y": 3061.0, "w": 653.0, "h": 71.0, "line_num": 29, "text": "turn- around ( ) :", "delta": 217.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 626.0, "y": 3167.0, "w": 483.0, "h": 67.0, "line_num": 30, "text": "turn - left ()", "delta": 15.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 630.0, "y": 3266.0, "w": 490.0, "h": 67.0, "line_num": 31, "text": "turn - left ()", "delta": 4.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 399.0, "y": 3387.0, "w": 132.0, "h": 67.0, "line_num": 32, "text": "dex", "delta": -231.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 645.0, "y": 3383.0, "w": 446.0, "h": 72.0, "line_num": 33, "text": "step -up():", "delta": 246.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 665.0, "y": 3494.0, "w": 265.0, "h": 60.0, "line_num": 34, "text": "move ( )", "delta": 20.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 660.0, "y": 3572.0, "w": 264.0, "h": 54.0, "line_num": 35, "text": "move ( )", "delta": -5.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 664.0, "y": 3660.0, "w": 278.0, "h": 58.0, "line_num": 36, "text": "move ( )", "delta": 4.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 673.0, "y": 3739.0, "w": 292.0, "h": 58.0, "line_num": 37, "text": "move ( )", "delta": 9.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 407.0, "y": 3836.0, "w": 1187.0, "h": 79.0, "line_num": 38, "text": "if - name _ = = - main _:", "delta": -266.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 641.0, "y": 3940.0, "w": 304.0, "h": 65.0, "line_num": 39, "text": "main ( )", "delta": 234.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}], "ir_algo_output_edit_distance": 157, "prompting_method": "simple-test2", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    build_column()\n    step_up()\n    build_column()\n    step_up()\n    build_column()\n    step_up()\n    build_column()\n\ndef build_column():\n    turn_left()\n    build_beeper()\n    build_beeper()\n    build_beeper()\n    build_beeper()\n    put_beeper()\n    go_back()\n    turn_left()\n\ndef build_beeper():\n    put_beeper()\n    move()\n\ndef go_back():\n    turn_around()\n    step_up()\n\ndef turn_around():\n    turn_left()\n    turn_left()\n\ndef step_up():\n    move()\n    move()\n    move()\n    move()\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 0}, {"image_id": 37, "image_height": 4032, "image_width": 3024, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 313.0, "y": 48.0, "w": 1497.0, "h": 76.0, "line_num": 1, "text": "from karel. stanford kavel import *"}, {"x": 331.0, "y": 166.0, "w": 522.0, "h": 62.0, "line_num": 2, "text": "def main ():"}, {"x": 531.0, "y": 267.0, "w": 599.0, "h": 69.0, "line_num": 3, "text": "build-column ( )"}, {"x": 541.0, "y": 360.0, "w": 374.0, "h": 76.0, "line_num": 4, "text": "Step -up ( )"}, {"x": 551.0, "y": 479.0, "w": 596.0, "h": 75.0, "line_num": 5, "text": "build - column ()"}, {"x": 557.0, "y": 606.0, "w": 358.0, "h": 74.0, "line_num": 6, "text": "Step-up()"}, {"x": 567.0, "y": 726.0, "w": 616.0, "h": 74.0, "line_num": 7, "text": "build- column ( )"}, {"x": 574.0, "y": 862.0, "w": 358.0, "h": 75.0, "line_num": 8, "text": "Step-up()"}, {"x": 579.0, "y": 988.0, "w": 645.0, "h": 76.0, "line_num": 9, "text": "build - column ()"}, {"x": 338.0, "y": 1147.0, "w": 128.0, "h": 68.0, "line_num": 10, "text": "def"}, {"x": 577.0, "y": 1157.0, "w": 711.0, "h": 80.0, "line_num": 11, "text": "build - column ( ) :"}, {"x": 566.0, "y": 1296.0, "w": 510.0, "h": 76.0, "line_num": 12, "text": "turn - left ( )"}, {"x": 580.0, "y": 1423.0, "w": 608.0, "h": 77.0, "line_num": 13, "text": "build - beeper ( )"}, {"x": 591.0, "y": 1550.0, "w": 602.0, "h": 79.0, "line_num": 14, "text": "build - beeper ( )"}, {"x": 588.0, "y": 1682.0, "w": 604.0, "h": 75.0, "line_num": 15, "text": "build - beeper ( )"}, {"x": 599.0, "y": 1798.0, "w": 582.0, "h": 74.0, "line_num": 16, "text": "build - beeper ( )"}, {"x": 599.0, "y": 1919.0, "w": 527.0, "h": 71.0, "line_num": 17, "text": "put - beeper ()"}, {"x": 593.0, "y": 2038.0, "w": 452.0, "h": 69.0, "line_num": 18, "text": "go - back ()"}, {"x": 593.0, "y": 2146.0, "w": 470.0, "h": 75.0, "line_num": 19, "text": "turn- left ( )"}, {"x": 355.0, "y": 2305.0, "w": 125.0, "h": 70.0, "line_num": 20, "text": "def"}, {"x": 590.0, "y": 2291.0, "w": 650.0, "h": 76.0, "line_num": 21, "text": "build - beeper ( ):"}, {"x": 612.0, "y": 2414.0, "w": 539.0, "h": 75.0, "line_num": 22, "text": "put- beeper ( )"}, {"x": 613.0, "y": 2544.0, "w": 272.0, "h": 54.0, "line_num": 23, "text": "move ()"}, {"x": 370.0, "y": 2668.0, "w": 128.0, "h": 72.0, "line_num": 24, "text": "det"}, {"x": 625.0, "y": 2682.0, "w": 488.0, "h": 73.0, "line_num": 25, "text": "go - back ():"}, {"x": 627.0, "y": 2800.0, "w": 611.0, "h": 68.0, "line_num": 26, "text": "turn- around ( )"}, {"x": 630.0, "y": 2919.0, "w": 400.0, "h": 72.0, "line_num": 27, "text": "Step -up ()"}, {"x": 394.0, "y": 3068.0, "w": 126.0, "h": 67.0, "line_num": 28, "text": "dex"}, {"x": 611.0, "y": 3061.0, "w": 653.0, "h": 71.0, "line_num": 29, "text": "turn- around ( ) :"}, {"x": 626.0, "y": 3167.0, "w": 483.0, "h": 67.0, "line_num": 30, "text": "turn - left ()"}, {"x": 630.0, "y": 3266.0, "w": 490.0, "h": 67.0, "line_num": 31, "text": "turn - left ()"}, {"x": 399.0, "y": 3387.0, "w": 132.0, "h": 67.0, "line_num": 32, "text": "dex"}, {"x": 645.0, "y": 3383.0, "w": 446.0, "h": 72.0, "line_num": 33, "text": "step -up():"}, {"x": 665.0, "y": 3494.0, "w": 265.0, "h": 60.0, "line_num": 34, "text": "move ( )"}, {"x": 660.0, "y": 3572.0, "w": 264.0, "h": 54.0, "line_num": 35, "text": "move ( )"}, {"x": 664.0, "y": 3660.0, "w": 278.0, "h": 58.0, "line_num": 36, "text": "move ( )"}, {"x": 673.0, "y": 3739.0, "w": 292.0, "h": 58.0, "line_num": 37, "text": "move ( )"}, {"x": 407.0, "y": 3836.0, "w": 1187.0, "h": 79.0, "line_num": 38, "text": "if - name _ = = - main _:"}, {"x": 641.0, "y": 3940.0, "w": 304.0, "h": 65.0, "line_num": 39, "text": "main ( )"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "from karel. stanford kavel import *\ndef main ():\n    build-column ( )\n    Step -up ( )\n    build - column ()\n    Step-up()\n    build- column ( )\n    Step-up()\n    build - column ()\ndef\n    build - column ( ) :\n    turn - left ( )\n    build - beeper ( )\n    build - beeper ( )\n    build - beeper ( )\n    build - beeper ( )\n    put - beeper ()\n    go - back ()\n    turn- left ( )\ndef\n    build - beeper ( ):\n    put- beeper ( )\n    move ()\ndet\n    go - back ():\n    turn- around ( )\n    Step -up ()\ndex\n    turn- around ( ) :\n    turn - left ()\n    turn - left ()\ndex\n    step -up():\n    move ( )\n    move ( )\n    move ( )\n    move ( )\nif - name _ = = - main _:\n    main ( )\n", "ir_algo_output_indented_lines": [{"x": 313.0, "y": 48.0, "w": 1497.0, "h": 76.0, "line_num": 1, "text": "from karel. stanford kavel import *", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 331.0, "y": 166.0, "w": 522.0, "h": 62.0, "line_num": 2, "text": "def main ():", "delta": 18.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 531.0, "y": 267.0, "w": 599.0, "h": 69.0, "line_num": 3, "text": "build-column ( )", "delta": 200.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 541.0, "y": 360.0, "w": 374.0, "h": 76.0, "line_num": 4, "text": "Step -up ( )", "delta": 10.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 551.0, "y": 479.0, "w": 596.0, "h": 75.0, "line_num": 5, "text": "build - column ()", "delta": 10.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 557.0, "y": 606.0, "w": 358.0, "h": 74.0, "line_num": 6, "text": "Step-up()", "delta": 6.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 567.0, "y": 726.0, "w": 616.0, "h": 74.0, "line_num": 7, "text": "build- column ( )", "delta": 10.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 574.0, "y": 862.0, "w": 358.0, "h": 75.0, "line_num": 8, "text": "Step-up()", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 579.0, "y": 988.0, "w": 645.0, "h": 76.0, "line_num": 9, "text": "build - column ()", "delta": 5.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 338.0, "y": 1147.0, "w": 128.0, "h": 68.0, "line_num": 10, "text": "def", "delta": -241.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 577.0, "y": 1157.0, "w": 711.0, "h": 80.0, "line_num": 11, "text": "build - column ( ) :", "delta": 239.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 566.0, "y": 1296.0, "w": 510.0, "h": 76.0, "line_num": 12, "text": "turn - left ( )", "delta": -11.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 580.0, "y": 1423.0, "w": 608.0, "h": 77.0, "line_num": 13, "text": "build - beeper ( )", "delta": 14.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 591.0, "y": 1550.0, "w": 602.0, "h": 79.0, "line_num": 14, "text": "build - beeper ( )", "delta": 11.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 588.0, "y": 1682.0, "w": 604.0, "h": 75.0, "line_num": 15, "text": "build - beeper ( )", "delta": -3.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 599.0, "y": 1798.0, "w": 582.0, "h": 74.0, "line_num": 16, "text": "build - beeper ( )", "delta": 11.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 599.0, "y": 1919.0, "w": 527.0, "h": 71.0, "line_num": 17, "text": "put - beeper ()", "delta": 0.0, "delta_type": "null", "gaussian_prediction": null, "cluster_label": 1}, {"x": 593.0, "y": 2038.0, "w": 452.0, "h": 69.0, "line_num": 18, "text": "go - back ()", "delta": -6.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 593.0, "y": 2146.0, "w": 470.0, "h": 75.0, "line_num": 19, "text": "turn- left ( )", "delta": 0.0, "delta_type": "null", "gaussian_prediction": null, "cluster_label": 1}, {"x": 355.0, "y": 2305.0, "w": 125.0, "h": 70.0, "line_num": 20, "text": "def", "delta": -238.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 590.0, "y": 2291.0, "w": 650.0, "h": 76.0, "line_num": 21, "text": "build - beeper ( ):", "delta": 235.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 612.0, "y": 2414.0, "w": 539.0, "h": 75.0, "line_num": 22, "text": "put- beeper ( )", "delta": 22.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 613.0, "y": 2544.0, "w": 272.0, "h": 54.0, "line_num": 23, "text": "move ()", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 370.0, "y": 2668.0, "w": 128.0, "h": 72.0, "line_num": 24, "text": "det", "delta": -243.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 625.0, "y": 2682.0, "w": 488.0, "h": 73.0, "line_num": 25, "text": "go - back ():", "delta": 255.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 627.0, "y": 2800.0, "w": 611.0, "h": 68.0, "line_num": 26, "text": "turn- around ( )", "delta": 2.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 630.0, "y": 2919.0, "w": 400.0, "h": 72.0, "line_num": 27, "text": "Step -up ()", "delta": 3.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 394.0, "y": 3068.0, "w": 126.0, "h": 67.0, "line_num": 28, "text": "dex", "delta": -236.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 611.0, "y": 3061.0, "w": 653.0, "h": 71.0, "line_num": 29, "text": "turn- around ( ) :", "delta": 217.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 626.0, "y": 3167.0, "w": 483.0, "h": 67.0, "line_num": 30, "text": "turn - left ()", "delta": 15.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 630.0, "y": 3266.0, "w": 490.0, "h": 67.0, "line_num": 31, "text": "turn - left ()", "delta": 4.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 399.0, "y": 3387.0, "w": 132.0, "h": 67.0, "line_num": 32, "text": "dex", "delta": -231.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 645.0, "y": 3383.0, "w": 446.0, "h": 72.0, "line_num": 33, "text": "step -up():", "delta": 246.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 665.0, "y": 3494.0, "w": 265.0, "h": 60.0, "line_num": 34, "text": "move ( )", "delta": 20.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 660.0, "y": 3572.0, "w": 264.0, "h": 54.0, "line_num": 35, "text": "move ( )", "delta": -5.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 664.0, "y": 3660.0, "w": 278.0, "h": 58.0, "line_num": 36, "text": "move ( )", "delta": 4.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 673.0, "y": 3739.0, "w": 292.0, "h": 58.0, "line_num": 37, "text": "move ( )", "delta": 9.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 407.0, "y": 3836.0, "w": 1187.0, "h": 79.0, "line_num": 38, "text": "if - name _ = = - main _:", "delta": -266.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 641.0, "y": 3940.0, "w": 304.0, "h": 65.0, "line_num": 39, "text": "main ( )", "delta": 234.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}], "ir_algo_output_edit_distance": 157, "prompting_method": "simple-test3", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    build_column()\n    step_up()\n    build_column()\n    step_up()\n    build_column()\n    step_up()\n    build_column()\n\ndef build_column():\n    turn_left()\n    build_beeper()\n    build_beeper()\n    build_beeper()\n    build_beeper()\n    put_beeper()\n    go_back()\n    turn_left()\n\ndef build_beeper():\n    put_beeper()\n    move()\n\ndef go_back():\n    turn_around()\n    step_up()\n\ndef turn_around():\n    turn_left()\n    turn_left()\n\ndef step_up():\n    move()\n    move()\n    move()\n    move()\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 0}, {"image_id": 38, "image_height": 1400, "image_width": 1050, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 66.0, "y": 58.0, "w": 302.0, "h": 56.0, "line_num": 1, "text": "def main () ;"}, {"x": 170.0, "y": 136.0, "w": 835.0, "h": 57.0, "line_num": 2, "text": "input_ string = input ( Input string:')"}, {"x": 166.0, "y": 214.0, "w": 230.0, "h": 44.0, "line_num": 3, "text": "ret = \" \""}, {"x": 170.0, "y": 280.0, "w": 580.0, "h": 57.0, "line_num": 4, "text": "for ch in input string"}, {"x": 273.0, "y": 359.0, "w": 604.0, "h": 58.0, "line_num": 5, "text": "ref = ret + ch.upper()"}, {"x": 148.0, "y": 455.0, "w": 229.0, "h": 61.0, "line_num": 6, "text": "print ret"}, {"x": 50.0, "y": 587.0, "w": 461.0, "h": 70.0, "line_num": 7, "text": "if __ name __ ="}, {"x": 560.0, "y": 560.0, "w": 20.0, "h": 22.0, "line_num": 8, "text": "1"}, {"x": 843.0, "y": 543.0, "w": 18.0, "h": 19.0, "line_num": 9, "text": "1"}, {"x": 648.0, "y": 578.0, "w": 102.0, "h": 32.0, "line_num": 10, "text": "main"}, {"x": 584.0, "y": 605.0, "w": 26.0, "h": 17.0, "line_num": 11, "text": "-"}, {"x": 610.0, "y": 592.0, "w": 50.0, "h": 29.0, "line_num": 12, "text": "-"}, {"x": 869.0, "y": 555.0, "w": 38.0, "h": 30.0, "line_num": 13, "text": "-"}, {"x": 755.0, "y": 586.0, "w": 87.0, "h": 24.0, "line_num": 14, "text": "--"}, {"x": 143.0, "y": 672.0, "w": 183.0, "h": 52.0, "line_num": 15, "text": "main ( )"}], "ir_algo_name": "none", "ir_algo_output_code": "def main () ;\ninput_ string = input ( Input string:')\nret = \" \"\nfor ch in input string\nref = ret + ch.upper()\nprint ret\nif __ name __ =\n1\n1\nmain\n-\n-\n-\n--\nmain ( )", "ir_algo_output_edit_distance": 53, "prompting_method": "none", "lm_post_processed_code": "def main () ;\ninput_ string = input ( Input string:')\nret = \" \"\nfor ch in input string\nref = ret + ch.upper()\nprint ret\nif __ name __ =\n1\n1\nmain\n-\n-\n-\n--\nmain ( )", "lm_post_processed_edit_distance": 53}, {"image_id": 38, "image_height": 1400, "image_width": 1050, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 66.0, "y": 58.0, "w": 302.0, "h": 56.0, "line_num": 1, "text": "def main () ;"}, {"x": 170.0, "y": 136.0, "w": 835.0, "h": 57.0, "line_num": 2, "text": "input_ string = input ( Input string:')"}, {"x": 166.0, "y": 214.0, "w": 230.0, "h": 44.0, "line_num": 3, "text": "ret = \" \""}, {"x": 170.0, "y": 280.0, "w": 580.0, "h": 57.0, "line_num": 4, "text": "for ch in input string"}, {"x": 273.0, "y": 359.0, "w": 604.0, "h": 58.0, "line_num": 5, "text": "ref = ret + ch.upper()"}, {"x": 148.0, "y": 455.0, "w": 229.0, "h": 61.0, "line_num": 6, "text": "print ret"}, {"x": 50.0, "y": 587.0, "w": 461.0, "h": 70.0, "line_num": 7, "text": "if __ name __ ="}, {"x": 560.0, "y": 560.0, "w": 20.0, "h": 22.0, "line_num": 8, "text": "1"}, {"x": 843.0, "y": 543.0, "w": 18.0, "h": 19.0, "line_num": 9, "text": "1"}, {"x": 648.0, "y": 578.0, "w": 102.0, "h": 32.0, "line_num": 10, "text": "main"}, {"x": 584.0, "y": 605.0, "w": 26.0, "h": 17.0, "line_num": 11, "text": "-"}, {"x": 610.0, "y": 592.0, "w": 50.0, "h": 29.0, "line_num": 12, "text": "-"}, {"x": 869.0, "y": 555.0, "w": 38.0, "h": 30.0, "line_num": 13, "text": "-"}, {"x": 755.0, "y": 586.0, "w": 87.0, "h": 24.0, "line_num": 14, "text": "--"}, {"x": 143.0, "y": 672.0, "w": 183.0, "h": 52.0, "line_num": 15, "text": "main ( )"}], "ir_algo_name": "none", "ir_algo_output_code": "def main () ;\ninput_ string = input ( Input string:')\nret = \" \"\nfor ch in input string\nref = ret + ch.upper()\nprint ret\nif __ name __ =\n1\n1\nmain\n-\n-\n-\n--\nmain ( )", "ir_algo_output_edit_distance": 53, "prompting_method": "cot-test1", "lm_post_processed_code": "def main () :\ninput_string = input ( 'Input string:')\nret = \" \"\nfor ch in input_string:\nret = ret + ch.upper()\nprint ret\n\nif __name__ == \"__main__\":\nmain ( )\n", "lm_post_processed_edit_distance": 39}, {"image_id": 38, "image_height": 1400, "image_width": 1050, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 66.0, "y": 58.0, "w": 302.0, "h": 56.0, "line_num": 1, "text": "def main () ;"}, {"x": 170.0, "y": 136.0, "w": 835.0, "h": 57.0, "line_num": 2, "text": "input_ string = input ( Input string:')"}, {"x": 166.0, "y": 214.0, "w": 230.0, "h": 44.0, "line_num": 3, "text": "ret = \" \""}, {"x": 170.0, "y": 280.0, "w": 580.0, "h": 57.0, "line_num": 4, "text": "for ch in input string"}, {"x": 273.0, "y": 359.0, "w": 604.0, "h": 58.0, "line_num": 5, "text": "ref = ret + ch.upper()"}, {"x": 148.0, "y": 455.0, "w": 229.0, "h": 61.0, "line_num": 6, "text": "print ret"}, {"x": 50.0, "y": 587.0, "w": 461.0, "h": 70.0, "line_num": 7, "text": "if __ name __ ="}, {"x": 560.0, "y": 560.0, "w": 20.0, "h": 22.0, "line_num": 8, "text": "1"}, {"x": 843.0, "y": 543.0, "w": 18.0, "h": 19.0, "line_num": 9, "text": "1"}, {"x": 648.0, "y": 578.0, "w": 102.0, "h": 32.0, "line_num": 10, "text": "main"}, {"x": 584.0, "y": 605.0, "w": 26.0, "h": 17.0, "line_num": 11, "text": "-"}, {"x": 610.0, "y": 592.0, "w": 50.0, "h": 29.0, "line_num": 12, "text": "-"}, {"x": 869.0, "y": 555.0, "w": 38.0, "h": 30.0, "line_num": 13, "text": "-"}, {"x": 755.0, "y": 586.0, "w": 87.0, "h": 24.0, "line_num": 14, "text": "--"}, {"x": 143.0, "y": 672.0, "w": 183.0, "h": 52.0, "line_num": 15, "text": "main ( )"}], "ir_algo_name": "none", "ir_algo_output_code": "def main () ;\ninput_ string = input ( Input string:')\nret = \" \"\nfor ch in input string\nref = ret + ch.upper()\nprint ret\nif __ name __ =\n1\n1\nmain\n-\n-\n-\n--\nmain ( )", "ir_algo_output_edit_distance": 53, "prompting_method": "cot-test5", "lm_post_processed_code": "def main():\ninput_string = input('Input string:')\nret = \" \"\nfor ch in input_string:\nret = ret + ch.upper()\nprint ret\n\nif __name__ == \"__main__\":\nmain()\n", "lm_post_processed_edit_distance": 33}, {"image_id": 38, "image_height": 1400, "image_width": 1050, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 66.0, "y": 58.0, "w": 302.0, "h": 56.0, "line_num": 1, "text": "def main () ;"}, {"x": 170.0, "y": 136.0, "w": 835.0, "h": 57.0, "line_num": 2, "text": "input_ string = input ( Input string:')"}, {"x": 166.0, "y": 214.0, "w": 230.0, "h": 44.0, "line_num": 3, "text": "ret = \" \""}, {"x": 170.0, "y": 280.0, "w": 580.0, "h": 57.0, "line_num": 4, "text": "for ch in input string"}, {"x": 273.0, "y": 359.0, "w": 604.0, "h": 58.0, "line_num": 5, "text": "ref = ret + ch.upper()"}, {"x": 148.0, "y": 455.0, "w": 229.0, "h": 61.0, "line_num": 6, "text": "print ret"}, {"x": 50.0, "y": 587.0, "w": 461.0, "h": 70.0, "line_num": 7, "text": "if __ name __ ="}, {"x": 560.0, "y": 560.0, "w": 20.0, "h": 22.0, "line_num": 8, "text": "1"}, {"x": 843.0, "y": 543.0, "w": 18.0, "h": 19.0, "line_num": 9, "text": "1"}, {"x": 648.0, "y": 578.0, "w": 102.0, "h": 32.0, "line_num": 10, "text": "main"}, {"x": 584.0, "y": 605.0, "w": 26.0, "h": 17.0, "line_num": 11, "text": "-"}, {"x": 610.0, "y": 592.0, "w": 50.0, "h": 29.0, "line_num": 12, "text": "-"}, {"x": 869.0, "y": 555.0, "w": 38.0, "h": 30.0, "line_num": 13, "text": "-"}, {"x": 755.0, "y": 586.0, "w": 87.0, "h": 24.0, "line_num": 14, "text": "--"}, {"x": 143.0, "y": 672.0, "w": 183.0, "h": 52.0, "line_num": 15, "text": "main ( )"}], "ir_algo_name": "none", "ir_algo_output_code": "def main () ;\ninput_ string = input ( Input string:')\nret = \" \"\nfor ch in input string\nref = ret + ch.upper()\nprint ret\nif __ name __ =\n1\n1\nmain\n-\n-\n-\n--\nmain ( )", "ir_algo_output_edit_distance": 53, "prompting_method": "simple-test2", "lm_post_processed_code": "def main():\n    input_string = input('Input string:')\n    ret = \" \"\n    for ch in input_string:\n        ret = ret + ch.upper()\n    print(ret)\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 7}, {"image_id": 38, "image_height": 1400, "image_width": 1050, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 66.0, "y": 58.0, "w": 302.0, "h": 56.0, "line_num": 1, "text": "def main () ;"}, {"x": 170.0, "y": 136.0, "w": 835.0, "h": 57.0, "line_num": 2, "text": "input_ string = input ( Input string:')"}, {"x": 166.0, "y": 214.0, "w": 230.0, "h": 44.0, "line_num": 3, "text": "ret = \" \""}, {"x": 170.0, "y": 280.0, "w": 580.0, "h": 57.0, "line_num": 4, "text": "for ch in input string"}, {"x": 273.0, "y": 359.0, "w": 604.0, "h": 58.0, "line_num": 5, "text": "ref = ret + ch.upper()"}, {"x": 148.0, "y": 455.0, "w": 229.0, "h": 61.0, "line_num": 6, "text": "print ret"}, {"x": 50.0, "y": 587.0, "w": 461.0, "h": 70.0, "line_num": 7, "text": "if __ name __ ="}, {"x": 560.0, "y": 560.0, "w": 20.0, "h": 22.0, "line_num": 8, "text": "1"}, {"x": 843.0, "y": 543.0, "w": 18.0, "h": 19.0, "line_num": 9, "text": "1"}, {"x": 648.0, "y": 578.0, "w": 102.0, "h": 32.0, "line_num": 10, "text": "main"}, {"x": 584.0, "y": 605.0, "w": 26.0, "h": 17.0, "line_num": 11, "text": "-"}, {"x": 610.0, "y": 592.0, "w": 50.0, "h": 29.0, "line_num": 12, "text": "-"}, {"x": 869.0, "y": 555.0, "w": 38.0, "h": 30.0, "line_num": 13, "text": "-"}, {"x": 755.0, "y": 586.0, "w": 87.0, "h": 24.0, "line_num": 14, "text": "--"}, {"x": 143.0, "y": 672.0, "w": 183.0, "h": 52.0, "line_num": 15, "text": "main ( )"}], "ir_algo_name": "none", "ir_algo_output_code": "def main () ;\ninput_ string = input ( Input string:')\nret = \" \"\nfor ch in input string\nref = ret + ch.upper()\nprint ret\nif __ name __ =\n1\n1\nmain\n-\n-\n-\n--\nmain ( )", "ir_algo_output_edit_distance": 53, "prompting_method": "simple-test3", "lm_post_processed_code": "def main():\n    input_string = input('Input string:')\n    ret = \" \"\n    for ch in input_string:\n        ret = ret + ch.upper()\n    print(ret)\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 7}, {"image_id": 38, "image_height": 1400, "image_width": 1050, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 66.0, "y": 58.0, "w": 302.0, "h": 56.0, "line_num": 1, "text": "def main () ;"}, {"x": 170.0, "y": 136.0, "w": 835.0, "h": 57.0, "line_num": 2, "text": "input_ string = input ( Input string:')"}, {"x": 166.0, "y": 214.0, "w": 230.0, "h": 44.0, "line_num": 3, "text": "ret = \" \""}, {"x": 170.0, "y": 280.0, "w": 580.0, "h": 57.0, "line_num": 4, "text": "for ch in input string"}, {"x": 273.0, "y": 359.0, "w": 604.0, "h": 58.0, "line_num": 5, "text": "ref = ret + ch.upper()"}, {"x": 148.0, "y": 455.0, "w": 229.0, "h": 61.0, "line_num": 6, "text": "print ret"}, {"x": 50.0, "y": 587.0, "w": 461.0, "h": 70.0, "line_num": 7, "text": "if __ name __ ="}, {"x": 560.0, "y": 560.0, "w": 20.0, "h": 22.0, "line_num": 8, "text": "1"}, {"x": 843.0, "y": 543.0, "w": 18.0, "h": 19.0, "line_num": 9, "text": "1"}, {"x": 648.0, "y": 578.0, "w": 102.0, "h": 32.0, "line_num": 10, "text": "main"}, {"x": 584.0, "y": 605.0, "w": 26.0, "h": 17.0, "line_num": 11, "text": "-"}, {"x": 610.0, "y": 592.0, "w": 50.0, "h": 29.0, "line_num": 12, "text": "-"}, {"x": 869.0, "y": 555.0, "w": 38.0, "h": 30.0, "line_num": 13, "text": "-"}, {"x": 755.0, "y": 586.0, "w": 87.0, "h": 24.0, "line_num": 14, "text": "--"}, {"x": 143.0, "y": 672.0, "w": 183.0, "h": 52.0, "line_num": 15, "text": "main ( )"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 62.8, "ir_algo_output_code": "def main () ;\n    input_ string = input ( Input string:')\n    ret = \" \"\n    for ch in input string\n        ref = ret + ch.upper()\n    print ret\nif __ name __ =\n            1\n                    1\n            main\n            -\n            -\n                    -\n                --\n    main ( )\n", "ir_algo_output_indented_lines": [{"x": 66.0, "y": 58.0, "w": 302.0, "h": 56.0, "line_num": 1, "text": "def main () ;", "cluster_label": 3, "indentation": 0}, {"x": 170.0, "y": 136.0, "w": 835.0, "h": 57.0, "line_num": 2, "text": "input_ string = input ( Input string:')", "cluster_label": 0, "indentation": 1}, {"x": 166.0, "y": 214.0, "w": 230.0, "h": 44.0, "line_num": 3, "text": "ret = \" \"", "cluster_label": 0, "indentation": 1}, {"x": 170.0, "y": 280.0, "w": 580.0, "h": 57.0, "line_num": 4, "text": "for ch in input string", "cluster_label": 0, "indentation": 1}, {"x": 273.0, "y": 359.0, "w": 604.0, "h": 58.0, "line_num": 5, "text": "ref = ret + ch.upper()", "cluster_label": 5, "indentation": 2}, {"x": 148.0, "y": 455.0, "w": 229.0, "h": 61.0, "line_num": 6, "text": "print ret", "cluster_label": 0, "indentation": 1}, {"x": 50.0, "y": 587.0, "w": 461.0, "h": 70.0, "line_num": 7, "text": "if __ name __ =", "cluster_label": 3, "indentation": 0}, {"x": 560.0, "y": 560.0, "w": 20.0, "h": 22.0, "line_num": 8, "text": "1", "cluster_label": 1, "indentation": 3}, {"x": 843.0, "y": 543.0, "w": 18.0, "h": 19.0, "line_num": 9, "text": "1", "cluster_label": 2, "indentation": 5}, {"x": 648.0, "y": 578.0, "w": 102.0, "h": 32.0, "line_num": 10, "text": "main", "cluster_label": 1, "indentation": 3}, {"x": 584.0, "y": 605.0, "w": 26.0, "h": 17.0, "line_num": 11, "text": "-", "cluster_label": 1, "indentation": 3}, {"x": 610.0, "y": 592.0, "w": 50.0, "h": 29.0, "line_num": 12, "text": "-", "cluster_label": 1, "indentation": 3}, {"x": 869.0, "y": 555.0, "w": 38.0, "h": 30.0, "line_num": 13, "text": "-", "cluster_label": 2, "indentation": 5}, {"x": 755.0, "y": 586.0, "w": 87.0, "h": 24.0, "line_num": 14, "text": "--", "cluster_label": 4, "indentation": 4}, {"x": 143.0, "y": 672.0, "w": 183.0, "h": 52.0, "line_num": 15, "text": "main ( )", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 132, "prompting_method": "none", "lm_post_processed_code": "def main () ;\n    input_ string = input ( Input string:')\n    ret = \" \"\n    for ch in input string\n        ref = ret + ch.upper()\n    print ret\nif __ name __ =\n            1\n                    1\n            main\n            -\n            -\n                    -\n                --\n    main ( )\n", "lm_post_processed_edit_distance": 132}, {"image_id": 38, "image_height": 1400, "image_width": 1050, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 66.0, "y": 58.0, "w": 302.0, "h": 56.0, "line_num": 1, "text": "def main () ;"}, {"x": 170.0, "y": 136.0, "w": 835.0, "h": 57.0, "line_num": 2, "text": "input_ string = input ( Input string:')"}, {"x": 166.0, "y": 214.0, "w": 230.0, "h": 44.0, "line_num": 3, "text": "ret = \" \""}, {"x": 170.0, "y": 280.0, "w": 580.0, "h": 57.0, "line_num": 4, "text": "for ch in input string"}, {"x": 273.0, "y": 359.0, "w": 604.0, "h": 58.0, "line_num": 5, "text": "ref = ret + ch.upper()"}, {"x": 148.0, "y": 455.0, "w": 229.0, "h": 61.0, "line_num": 6, "text": "print ret"}, {"x": 50.0, "y": 587.0, "w": 461.0, "h": 70.0, "line_num": 7, "text": "if __ name __ ="}, {"x": 560.0, "y": 560.0, "w": 20.0, "h": 22.0, "line_num": 8, "text": "1"}, {"x": 843.0, "y": 543.0, "w": 18.0, "h": 19.0, "line_num": 9, "text": "1"}, {"x": 648.0, "y": 578.0, "w": 102.0, "h": 32.0, "line_num": 10, "text": "main"}, {"x": 584.0, "y": 605.0, "w": 26.0, "h": 17.0, "line_num": 11, "text": "-"}, {"x": 610.0, "y": 592.0, "w": 50.0, "h": 29.0, "line_num": 12, "text": "-"}, {"x": 869.0, "y": 555.0, "w": 38.0, "h": 30.0, "line_num": 13, "text": "-"}, {"x": 755.0, "y": 586.0, "w": 87.0, "h": 24.0, "line_num": 14, "text": "--"}, {"x": 143.0, "y": 672.0, "w": 183.0, "h": 52.0, "line_num": 15, "text": "main ( )"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 62.8, "ir_algo_output_code": "def main () ;\n    input_ string = input ( Input string:')\n    ret = \" \"\n    for ch in input string\n        ref = ret + ch.upper()\n    print ret\nif __ name __ =\n            1\n                    1\n            main\n            -\n            -\n                    -\n                --\n    main ( )\n", "ir_algo_output_indented_lines": [{"x": 66.0, "y": 58.0, "w": 302.0, "h": 56.0, "line_num": 1, "text": "def main () ;", "cluster_label": 3, "indentation": 0}, {"x": 170.0, "y": 136.0, "w": 835.0, "h": 57.0, "line_num": 2, "text": "input_ string = input ( Input string:')", "cluster_label": 0, "indentation": 1}, {"x": 166.0, "y": 214.0, "w": 230.0, "h": 44.0, "line_num": 3, "text": "ret = \" \"", "cluster_label": 0, "indentation": 1}, {"x": 170.0, "y": 280.0, "w": 580.0, "h": 57.0, "line_num": 4, "text": "for ch in input string", "cluster_label": 0, "indentation": 1}, {"x": 273.0, "y": 359.0, "w": 604.0, "h": 58.0, "line_num": 5, "text": "ref = ret + ch.upper()", "cluster_label": 5, "indentation": 2}, {"x": 148.0, "y": 455.0, "w": 229.0, "h": 61.0, "line_num": 6, "text": "print ret", "cluster_label": 0, "indentation": 1}, {"x": 50.0, "y": 587.0, "w": 461.0, "h": 70.0, "line_num": 7, "text": "if __ name __ =", "cluster_label": 3, "indentation": 0}, {"x": 560.0, "y": 560.0, "w": 20.0, "h": 22.0, "line_num": 8, "text": "1", "cluster_label": 1, "indentation": 3}, {"x": 843.0, "y": 543.0, "w": 18.0, "h": 19.0, "line_num": 9, "text": "1", "cluster_label": 2, "indentation": 5}, {"x": 648.0, "y": 578.0, "w": 102.0, "h": 32.0, "line_num": 10, "text": "main", "cluster_label": 1, "indentation": 3}, {"x": 584.0, "y": 605.0, "w": 26.0, "h": 17.0, "line_num": 11, "text": "-", "cluster_label": 1, "indentation": 3}, {"x": 610.0, "y": 592.0, "w": 50.0, "h": 29.0, "line_num": 12, "text": "-", "cluster_label": 1, "indentation": 3}, {"x": 869.0, "y": 555.0, "w": 38.0, "h": 30.0, "line_num": 13, "text": "-", "cluster_label": 2, "indentation": 5}, {"x": 755.0, "y": 586.0, "w": 87.0, "h": 24.0, "line_num": 14, "text": "--", "cluster_label": 4, "indentation": 4}, {"x": 143.0, "y": 672.0, "w": 183.0, "h": 52.0, "line_num": 15, "text": "main ( )", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 132, "prompting_method": "cot-test1", "lm_post_processed_code": "def main():\n    input_string = input('Input string:')\n    ret = \" \"\n    for ch in input_string:\n        ret = ret + ch.upper()\n    print ret\n\nif __name__ == \"__main__\":\n            main()\n", "lm_post_processed_edit_distance": 13}, {"image_id": 38, "image_height": 1400, "image_width": 1050, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 66.0, "y": 58.0, "w": 302.0, "h": 56.0, "line_num": 1, "text": "def main () ;"}, {"x": 170.0, "y": 136.0, "w": 835.0, "h": 57.0, "line_num": 2, "text": "input_ string = input ( Input string:')"}, {"x": 166.0, "y": 214.0, "w": 230.0, "h": 44.0, "line_num": 3, "text": "ret = \" \""}, {"x": 170.0, "y": 280.0, "w": 580.0, "h": 57.0, "line_num": 4, "text": "for ch in input string"}, {"x": 273.0, "y": 359.0, "w": 604.0, "h": 58.0, "line_num": 5, "text": "ref = ret + ch.upper()"}, {"x": 148.0, "y": 455.0, "w": 229.0, "h": 61.0, "line_num": 6, "text": "print ret"}, {"x": 50.0, "y": 587.0, "w": 461.0, "h": 70.0, "line_num": 7, "text": "if __ name __ ="}, {"x": 560.0, "y": 560.0, "w": 20.0, "h": 22.0, "line_num": 8, "text": "1"}, {"x": 843.0, "y": 543.0, "w": 18.0, "h": 19.0, "line_num": 9, "text": "1"}, {"x": 648.0, "y": 578.0, "w": 102.0, "h": 32.0, "line_num": 10, "text": "main"}, {"x": 584.0, "y": 605.0, "w": 26.0, "h": 17.0, "line_num": 11, "text": "-"}, {"x": 610.0, "y": 592.0, "w": 50.0, "h": 29.0, "line_num": 12, "text": "-"}, {"x": 869.0, "y": 555.0, "w": 38.0, "h": 30.0, "line_num": 13, "text": "-"}, {"x": 755.0, "y": 586.0, "w": 87.0, "h": 24.0, "line_num": 14, "text": "--"}, {"x": 143.0, "y": 672.0, "w": 183.0, "h": 52.0, "line_num": 15, "text": "main ( )"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 62.8, "ir_algo_output_code": "def main () ;\n    input_ string = input ( Input string:')\n    ret = \" \"\n    for ch in input string\n        ref = ret + ch.upper()\n    print ret\nif __ name __ =\n            1\n                    1\n            main\n            -\n            -\n                    -\n                --\n    main ( )\n", "ir_algo_output_indented_lines": [{"x": 66.0, "y": 58.0, "w": 302.0, "h": 56.0, "line_num": 1, "text": "def main () ;", "cluster_label": 3, "indentation": 0}, {"x": 170.0, "y": 136.0, "w": 835.0, "h": 57.0, "line_num": 2, "text": "input_ string = input ( Input string:')", "cluster_label": 0, "indentation": 1}, {"x": 166.0, "y": 214.0, "w": 230.0, "h": 44.0, "line_num": 3, "text": "ret = \" \"", "cluster_label": 0, "indentation": 1}, {"x": 170.0, "y": 280.0, "w": 580.0, "h": 57.0, "line_num": 4, "text": "for ch in input string", "cluster_label": 0, "indentation": 1}, {"x": 273.0, "y": 359.0, "w": 604.0, "h": 58.0, "line_num": 5, "text": "ref = ret + ch.upper()", "cluster_label": 5, "indentation": 2}, {"x": 148.0, "y": 455.0, "w": 229.0, "h": 61.0, "line_num": 6, "text": "print ret", "cluster_label": 0, "indentation": 1}, {"x": 50.0, "y": 587.0, "w": 461.0, "h": 70.0, "line_num": 7, "text": "if __ name __ =", "cluster_label": 3, "indentation": 0}, {"x": 560.0, "y": 560.0, "w": 20.0, "h": 22.0, "line_num": 8, "text": "1", "cluster_label": 1, "indentation": 3}, {"x": 843.0, "y": 543.0, "w": 18.0, "h": 19.0, "line_num": 9, "text": "1", "cluster_label": 2, "indentation": 5}, {"x": 648.0, "y": 578.0, "w": 102.0, "h": 32.0, "line_num": 10, "text": "main", "cluster_label": 1, "indentation": 3}, {"x": 584.0, "y": 605.0, "w": 26.0, "h": 17.0, "line_num": 11, "text": "-", "cluster_label": 1, "indentation": 3}, {"x": 610.0, "y": 592.0, "w": 50.0, "h": 29.0, "line_num": 12, "text": "-", "cluster_label": 1, "indentation": 3}, {"x": 869.0, "y": 555.0, "w": 38.0, "h": 30.0, "line_num": 13, "text": "-", "cluster_label": 2, "indentation": 5}, {"x": 755.0, "y": 586.0, "w": 87.0, "h": 24.0, "line_num": 14, "text": "--", "cluster_label": 4, "indentation": 4}, {"x": 143.0, "y": 672.0, "w": 183.0, "h": 52.0, "line_num": 15, "text": "main ( )", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 132, "prompting_method": "cot-test5", "lm_post_processed_code": "def main():\n    input_string = input('Input string:')\n    ret = \" \"\n    for ch in input_string:\n        ret = ret + ch.upper()\n    print ret\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 5}, {"image_id": 38, "image_height": 1400, "image_width": 1050, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 66.0, "y": 58.0, "w": 302.0, "h": 56.0, "line_num": 1, "text": "def main () ;"}, {"x": 170.0, "y": 136.0, "w": 835.0, "h": 57.0, "line_num": 2, "text": "input_ string = input ( Input string:')"}, {"x": 166.0, "y": 214.0, "w": 230.0, "h": 44.0, "line_num": 3, "text": "ret = \" \""}, {"x": 170.0, "y": 280.0, "w": 580.0, "h": 57.0, "line_num": 4, "text": "for ch in input string"}, {"x": 273.0, "y": 359.0, "w": 604.0, "h": 58.0, "line_num": 5, "text": "ref = ret + ch.upper()"}, {"x": 148.0, "y": 455.0, "w": 229.0, "h": 61.0, "line_num": 6, "text": "print ret"}, {"x": 50.0, "y": 587.0, "w": 461.0, "h": 70.0, "line_num": 7, "text": "if __ name __ ="}, {"x": 560.0, "y": 560.0, "w": 20.0, "h": 22.0, "line_num": 8, "text": "1"}, {"x": 843.0, "y": 543.0, "w": 18.0, "h": 19.0, "line_num": 9, "text": "1"}, {"x": 648.0, "y": 578.0, "w": 102.0, "h": 32.0, "line_num": 10, "text": "main"}, {"x": 584.0, "y": 605.0, "w": 26.0, "h": 17.0, "line_num": 11, "text": "-"}, {"x": 610.0, "y": 592.0, "w": 50.0, "h": 29.0, "line_num": 12, "text": "-"}, {"x": 869.0, "y": 555.0, "w": 38.0, "h": 30.0, "line_num": 13, "text": "-"}, {"x": 755.0, "y": 586.0, "w": 87.0, "h": 24.0, "line_num": 14, "text": "--"}, {"x": 143.0, "y": 672.0, "w": 183.0, "h": 52.0, "line_num": 15, "text": "main ( )"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 62.8, "ir_algo_output_code": "def main () ;\n    input_ string = input ( Input string:')\n    ret = \" \"\n    for ch in input string\n        ref = ret + ch.upper()\n    print ret\nif __ name __ =\n            1\n                    1\n            main\n            -\n            -\n                    -\n                --\n    main ( )\n", "ir_algo_output_indented_lines": [{"x": 66.0, "y": 58.0, "w": 302.0, "h": 56.0, "line_num": 1, "text": "def main () ;", "cluster_label": 3, "indentation": 0}, {"x": 170.0, "y": 136.0, "w": 835.0, "h": 57.0, "line_num": 2, "text": "input_ string = input ( Input string:')", "cluster_label": 0, "indentation": 1}, {"x": 166.0, "y": 214.0, "w": 230.0, "h": 44.0, "line_num": 3, "text": "ret = \" \"", "cluster_label": 0, "indentation": 1}, {"x": 170.0, "y": 280.0, "w": 580.0, "h": 57.0, "line_num": 4, "text": "for ch in input string", "cluster_label": 0, "indentation": 1}, {"x": 273.0, "y": 359.0, "w": 604.0, "h": 58.0, "line_num": 5, "text": "ref = ret + ch.upper()", "cluster_label": 5, "indentation": 2}, {"x": 148.0, "y": 455.0, "w": 229.0, "h": 61.0, "line_num": 6, "text": "print ret", "cluster_label": 0, "indentation": 1}, {"x": 50.0, "y": 587.0, "w": 461.0, "h": 70.0, "line_num": 7, "text": "if __ name __ =", "cluster_label": 3, "indentation": 0}, {"x": 560.0, "y": 560.0, "w": 20.0, "h": 22.0, "line_num": 8, "text": "1", "cluster_label": 1, "indentation": 3}, {"x": 843.0, "y": 543.0, "w": 18.0, "h": 19.0, "line_num": 9, "text": "1", "cluster_label": 2, "indentation": 5}, {"x": 648.0, "y": 578.0, "w": 102.0, "h": 32.0, "line_num": 10, "text": "main", "cluster_label": 1, "indentation": 3}, {"x": 584.0, "y": 605.0, "w": 26.0, "h": 17.0, "line_num": 11, "text": "-", "cluster_label": 1, "indentation": 3}, {"x": 610.0, "y": 592.0, "w": 50.0, "h": 29.0, "line_num": 12, "text": "-", "cluster_label": 1, "indentation": 3}, {"x": 869.0, "y": 555.0, "w": 38.0, "h": 30.0, "line_num": 13, "text": "-", "cluster_label": 2, "indentation": 5}, {"x": 755.0, "y": 586.0, "w": 87.0, "h": 24.0, "line_num": 14, "text": "--", "cluster_label": 4, "indentation": 4}, {"x": 143.0, "y": 672.0, "w": 183.0, "h": 52.0, "line_num": 15, "text": "main ( )", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 132, "prompting_method": "simple-test2", "lm_post_processed_code": "def main():\n    input_string = input('Input string:')\n    ret = \" \"\n    for ch in input_string:\n        ret = ret + ch.upper()\n    print(ret)\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 7}, {"image_id": 38, "image_height": 1400, "image_width": 1050, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 66.0, "y": 58.0, "w": 302.0, "h": 56.0, "line_num": 1, "text": "def main () ;"}, {"x": 170.0, "y": 136.0, "w": 835.0, "h": 57.0, "line_num": 2, "text": "input_ string = input ( Input string:')"}, {"x": 166.0, "y": 214.0, "w": 230.0, "h": 44.0, "line_num": 3, "text": "ret = \" \""}, {"x": 170.0, "y": 280.0, "w": 580.0, "h": 57.0, "line_num": 4, "text": "for ch in input string"}, {"x": 273.0, "y": 359.0, "w": 604.0, "h": 58.0, "line_num": 5, "text": "ref = ret + ch.upper()"}, {"x": 148.0, "y": 455.0, "w": 229.0, "h": 61.0, "line_num": 6, "text": "print ret"}, {"x": 50.0, "y": 587.0, "w": 461.0, "h": 70.0, "line_num": 7, "text": "if __ name __ ="}, {"x": 560.0, "y": 560.0, "w": 20.0, "h": 22.0, "line_num": 8, "text": "1"}, {"x": 843.0, "y": 543.0, "w": 18.0, "h": 19.0, "line_num": 9, "text": "1"}, {"x": 648.0, "y": 578.0, "w": 102.0, "h": 32.0, "line_num": 10, "text": "main"}, {"x": 584.0, "y": 605.0, "w": 26.0, "h": 17.0, "line_num": 11, "text": "-"}, {"x": 610.0, "y": 592.0, "w": 50.0, "h": 29.0, "line_num": 12, "text": "-"}, {"x": 869.0, "y": 555.0, "w": 38.0, "h": 30.0, "line_num": 13, "text": "-"}, {"x": 755.0, "y": 586.0, "w": 87.0, "h": 24.0, "line_num": 14, "text": "--"}, {"x": 143.0, "y": 672.0, "w": 183.0, "h": 52.0, "line_num": 15, "text": "main ( )"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 62.8, "ir_algo_output_code": "def main () ;\n    input_ string = input ( Input string:')\n    ret = \" \"\n    for ch in input string\n        ref = ret + ch.upper()\n    print ret\nif __ name __ =\n            1\n                    1\n            main\n            -\n            -\n                    -\n                --\n    main ( )\n", "ir_algo_output_indented_lines": [{"x": 66.0, "y": 58.0, "w": 302.0, "h": 56.0, "line_num": 1, "text": "def main () ;", "cluster_label": 3, "indentation": 0}, {"x": 170.0, "y": 136.0, "w": 835.0, "h": 57.0, "line_num": 2, "text": "input_ string = input ( Input string:')", "cluster_label": 0, "indentation": 1}, {"x": 166.0, "y": 214.0, "w": 230.0, "h": 44.0, "line_num": 3, "text": "ret = \" \"", "cluster_label": 0, "indentation": 1}, {"x": 170.0, "y": 280.0, "w": 580.0, "h": 57.0, "line_num": 4, "text": "for ch in input string", "cluster_label": 0, "indentation": 1}, {"x": 273.0, "y": 359.0, "w": 604.0, "h": 58.0, "line_num": 5, "text": "ref = ret + ch.upper()", "cluster_label": 5, "indentation": 2}, {"x": 148.0, "y": 455.0, "w": 229.0, "h": 61.0, "line_num": 6, "text": "print ret", "cluster_label": 0, "indentation": 1}, {"x": 50.0, "y": 587.0, "w": 461.0, "h": 70.0, "line_num": 7, "text": "if __ name __ =", "cluster_label": 3, "indentation": 0}, {"x": 560.0, "y": 560.0, "w": 20.0, "h": 22.0, "line_num": 8, "text": "1", "cluster_label": 1, "indentation": 3}, {"x": 843.0, "y": 543.0, "w": 18.0, "h": 19.0, "line_num": 9, "text": "1", "cluster_label": 2, "indentation": 5}, {"x": 648.0, "y": 578.0, "w": 102.0, "h": 32.0, "line_num": 10, "text": "main", "cluster_label": 1, "indentation": 3}, {"x": 584.0, "y": 605.0, "w": 26.0, "h": 17.0, "line_num": 11, "text": "-", "cluster_label": 1, "indentation": 3}, {"x": 610.0, "y": 592.0, "w": 50.0, "h": 29.0, "line_num": 12, "text": "-", "cluster_label": 1, "indentation": 3}, {"x": 869.0, "y": 555.0, "w": 38.0, "h": 30.0, "line_num": 13, "text": "-", "cluster_label": 2, "indentation": 5}, {"x": 755.0, "y": 586.0, "w": 87.0, "h": 24.0, "line_num": 14, "text": "--", "cluster_label": 4, "indentation": 4}, {"x": 143.0, "y": 672.0, "w": 183.0, "h": 52.0, "line_num": 15, "text": "main ( )", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 132, "prompting_method": "simple-test3", "lm_post_processed_code": "def main():\n    input_string = input('Input string:')\n    ret = \" \"\n    for ch in input_string:\n        ret = ret + ch.upper()\n    print(ret)\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 7}, {"image_id": 38, "image_height": 1400, "image_width": 1050, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 66.0, "y": 58.0, "w": 302.0, "h": 56.0, "line_num": 1, "text": "def main () ;"}, {"x": 170.0, "y": 136.0, "w": 835.0, "h": 57.0, "line_num": 2, "text": "input_ string = input ( Input string:')"}, {"x": 166.0, "y": 214.0, "w": 230.0, "h": 44.0, "line_num": 3, "text": "ret = \" \""}, {"x": 170.0, "y": 280.0, "w": 580.0, "h": 57.0, "line_num": 4, "text": "for ch in input string"}, {"x": 273.0, "y": 359.0, "w": 604.0, "h": 58.0, "line_num": 5, "text": "ref = ret + ch.upper()"}, {"x": 148.0, "y": 455.0, "w": 229.0, "h": 61.0, "line_num": 6, "text": "print ret"}, {"x": 50.0, "y": 587.0, "w": 461.0, "h": 70.0, "line_num": 7, "text": "if __ name __ ="}, {"x": 560.0, "y": 560.0, "w": 20.0, "h": 22.0, "line_num": 8, "text": "1"}, {"x": 843.0, "y": 543.0, "w": 18.0, "h": 19.0, "line_num": 9, "text": "1"}, {"x": 648.0, "y": 578.0, "w": 102.0, "h": 32.0, "line_num": 10, "text": "main"}, {"x": 584.0, "y": 605.0, "w": 26.0, "h": 17.0, "line_num": 11, "text": "-"}, {"x": 610.0, "y": 592.0, "w": 50.0, "h": 29.0, "line_num": 12, "text": "-"}, {"x": 869.0, "y": 555.0, "w": 38.0, "h": 30.0, "line_num": 13, "text": "-"}, {"x": 755.0, "y": 586.0, "w": 87.0, "h": 24.0, "line_num": 14, "text": "--"}, {"x": 143.0, "y": 672.0, "w": 183.0, "h": 52.0, "line_num": 15, "text": "main ( )"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main () ;\n    input_ string = input ( Input string:')\n    ret = \" \"\n    for ch in input string\n        ref = ret + ch.upper()\n    print ret\nif __ name __ =\n    1\n        1\n    main\n    -\n    -\n        -\n        --\nmain ( )\n", "ir_algo_output_indented_lines": [{"x": 66.0, "y": 58.0, "w": 302.0, "h": 56.0, "line_num": 1, "text": "def main () ;", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 170.0, "y": 136.0, "w": 835.0, "h": 57.0, "line_num": 2, "text": "input_ string = input ( Input string:')", "delta": 104.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 166.0, "y": 214.0, "w": 230.0, "h": 44.0, "line_num": 3, "text": "ret = \" \"", "delta": -4.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 170.0, "y": 280.0, "w": 580.0, "h": 57.0, "line_num": 4, "text": "for ch in input string", "delta": 4.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 273.0, "y": 359.0, "w": 604.0, "h": 58.0, "line_num": 5, "text": "ref = ret + ch.upper()", "delta": 103.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 148.0, "y": 455.0, "w": 229.0, "h": 61.0, "line_num": 6, "text": "print ret", "delta": -125.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 50.0, "y": 587.0, "w": 461.0, "h": 70.0, "line_num": 7, "text": "if __ name __ =", "delta": -98.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 560.0, "y": 560.0, "w": 20.0, "h": 22.0, "line_num": 8, "text": "1", "delta": 510.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 843.0, "y": 543.0, "w": 18.0, "h": 19.0, "line_num": 9, "text": "1", "delta": 283.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 648.0, "y": 578.0, "w": 102.0, "h": 32.0, "line_num": 10, "text": "main", "delta": -195.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 584.0, "y": 605.0, "w": 26.0, "h": 17.0, "line_num": 11, "text": "-", "delta": -64.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 610.0, "y": 592.0, "w": 50.0, "h": 29.0, "line_num": 12, "text": "-", "delta": 26.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 869.0, "y": 555.0, "w": 38.0, "h": 30.0, "line_num": 13, "text": "-", "delta": 259.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 755.0, "y": 586.0, "w": 87.0, "h": 24.0, "line_num": 14, "text": "--", "delta": -114.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 143.0, "y": 672.0, "w": 183.0, "h": 52.0, "line_num": 15, "text": "main ( )", "delta": -612.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 64, "prompting_method": "none", "lm_post_processed_code": "def main () ;\n    input_ string = input ( Input string:')\n    ret = \" \"\n    for ch in input string\n        ref = ret + ch.upper()\n    print ret\nif __ name __ =\n    1\n        1\n    main\n    -\n    -\n        -\n        --\nmain ( )\n", "lm_post_processed_edit_distance": 64}, {"image_id": 38, "image_height": 1400, "image_width": 1050, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 66.0, "y": 58.0, "w": 302.0, "h": 56.0, "line_num": 1, "text": "def main () ;"}, {"x": 170.0, "y": 136.0, "w": 835.0, "h": 57.0, "line_num": 2, "text": "input_ string = input ( Input string:')"}, {"x": 166.0, "y": 214.0, "w": 230.0, "h": 44.0, "line_num": 3, "text": "ret = \" \""}, {"x": 170.0, "y": 280.0, "w": 580.0, "h": 57.0, "line_num": 4, "text": "for ch in input string"}, {"x": 273.0, "y": 359.0, "w": 604.0, "h": 58.0, "line_num": 5, "text": "ref = ret + ch.upper()"}, {"x": 148.0, "y": 455.0, "w": 229.0, "h": 61.0, "line_num": 6, "text": "print ret"}, {"x": 50.0, "y": 587.0, "w": 461.0, "h": 70.0, "line_num": 7, "text": "if __ name __ ="}, {"x": 560.0, "y": 560.0, "w": 20.0, "h": 22.0, "line_num": 8, "text": "1"}, {"x": 843.0, "y": 543.0, "w": 18.0, "h": 19.0, "line_num": 9, "text": "1"}, {"x": 648.0, "y": 578.0, "w": 102.0, "h": 32.0, "line_num": 10, "text": "main"}, {"x": 584.0, "y": 605.0, "w": 26.0, "h": 17.0, "line_num": 11, "text": "-"}, {"x": 610.0, "y": 592.0, "w": 50.0, "h": 29.0, "line_num": 12, "text": "-"}, {"x": 869.0, "y": 555.0, "w": 38.0, "h": 30.0, "line_num": 13, "text": "-"}, {"x": 755.0, "y": 586.0, "w": 87.0, "h": 24.0, "line_num": 14, "text": "--"}, {"x": 143.0, "y": 672.0, "w": 183.0, "h": 52.0, "line_num": 15, "text": "main ( )"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main () ;\n    input_ string = input ( Input string:')\n    ret = \" \"\n    for ch in input string\n        ref = ret + ch.upper()\n    print ret\nif __ name __ =\n    1\n        1\n    main\n    -\n    -\n        -\n        --\nmain ( )\n", "ir_algo_output_indented_lines": [{"x": 66.0, "y": 58.0, "w": 302.0, "h": 56.0, "line_num": 1, "text": "def main () ;", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 170.0, "y": 136.0, "w": 835.0, "h": 57.0, "line_num": 2, "text": "input_ string = input ( Input string:')", "delta": 104.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 166.0, "y": 214.0, "w": 230.0, "h": 44.0, "line_num": 3, "text": "ret = \" \"", "delta": -4.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 170.0, "y": 280.0, "w": 580.0, "h": 57.0, "line_num": 4, "text": "for ch in input string", "delta": 4.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 273.0, "y": 359.0, "w": 604.0, "h": 58.0, "line_num": 5, "text": "ref = ret + ch.upper()", "delta": 103.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 148.0, "y": 455.0, "w": 229.0, "h": 61.0, "line_num": 6, "text": "print ret", "delta": -125.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 50.0, "y": 587.0, "w": 461.0, "h": 70.0, "line_num": 7, "text": "if __ name __ =", "delta": -98.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 560.0, "y": 560.0, "w": 20.0, "h": 22.0, "line_num": 8, "text": "1", "delta": 510.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 843.0, "y": 543.0, "w": 18.0, "h": 19.0, "line_num": 9, "text": "1", "delta": 283.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 648.0, "y": 578.0, "w": 102.0, "h": 32.0, "line_num": 10, "text": "main", "delta": -195.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 584.0, "y": 605.0, "w": 26.0, "h": 17.0, "line_num": 11, "text": "-", "delta": -64.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 610.0, "y": 592.0, "w": 50.0, "h": 29.0, "line_num": 12, "text": "-", "delta": 26.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 869.0, "y": 555.0, "w": 38.0, "h": 30.0, "line_num": 13, "text": "-", "delta": 259.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 755.0, "y": 586.0, "w": 87.0, "h": 24.0, "line_num": 14, "text": "--", "delta": -114.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 143.0, "y": 672.0, "w": 183.0, "h": 52.0, "line_num": 15, "text": "main ( )", "delta": -612.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 64, "prompting_method": "cot-test1", "lm_post_processed_code": "def main():\n    input_string = input('Input string:')\n    ret = \" \"\n    for ch in input_string:\n        ret = ret + ch.upper()\n    print ret\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 5}, {"image_id": 38, "image_height": 1400, "image_width": 1050, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 66.0, "y": 58.0, "w": 302.0, "h": 56.0, "line_num": 1, "text": "def main () ;"}, {"x": 170.0, "y": 136.0, "w": 835.0, "h": 57.0, "line_num": 2, "text": "input_ string = input ( Input string:')"}, {"x": 166.0, "y": 214.0, "w": 230.0, "h": 44.0, "line_num": 3, "text": "ret = \" \""}, {"x": 170.0, "y": 280.0, "w": 580.0, "h": 57.0, "line_num": 4, "text": "for ch in input string"}, {"x": 273.0, "y": 359.0, "w": 604.0, "h": 58.0, "line_num": 5, "text": "ref = ret + ch.upper()"}, {"x": 148.0, "y": 455.0, "w": 229.0, "h": 61.0, "line_num": 6, "text": "print ret"}, {"x": 50.0, "y": 587.0, "w": 461.0, "h": 70.0, "line_num": 7, "text": "if __ name __ ="}, {"x": 560.0, "y": 560.0, "w": 20.0, "h": 22.0, "line_num": 8, "text": "1"}, {"x": 843.0, "y": 543.0, "w": 18.0, "h": 19.0, "line_num": 9, "text": "1"}, {"x": 648.0, "y": 578.0, "w": 102.0, "h": 32.0, "line_num": 10, "text": "main"}, {"x": 584.0, "y": 605.0, "w": 26.0, "h": 17.0, "line_num": 11, "text": "-"}, {"x": 610.0, "y": 592.0, "w": 50.0, "h": 29.0, "line_num": 12, "text": "-"}, {"x": 869.0, "y": 555.0, "w": 38.0, "h": 30.0, "line_num": 13, "text": "-"}, {"x": 755.0, "y": 586.0, "w": 87.0, "h": 24.0, "line_num": 14, "text": "--"}, {"x": 143.0, "y": 672.0, "w": 183.0, "h": 52.0, "line_num": 15, "text": "main ( )"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main () ;\n    input_ string = input ( Input string:')\n    ret = \" \"\n    for ch in input string\n        ref = ret + ch.upper()\n    print ret\nif __ name __ =\n    1\n        1\n    main\n    -\n    -\n        -\n        --\nmain ( )\n", "ir_algo_output_indented_lines": [{"x": 66.0, "y": 58.0, "w": 302.0, "h": 56.0, "line_num": 1, "text": "def main () ;", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 170.0, "y": 136.0, "w": 835.0, "h": 57.0, "line_num": 2, "text": "input_ string = input ( Input string:')", "delta": 104.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 166.0, "y": 214.0, "w": 230.0, "h": 44.0, "line_num": 3, "text": "ret = \" \"", "delta": -4.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 170.0, "y": 280.0, "w": 580.0, "h": 57.0, "line_num": 4, "text": "for ch in input string", "delta": 4.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 273.0, "y": 359.0, "w": 604.0, "h": 58.0, "line_num": 5, "text": "ref = ret + ch.upper()", "delta": 103.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 148.0, "y": 455.0, "w": 229.0, "h": 61.0, "line_num": 6, "text": "print ret", "delta": -125.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 50.0, "y": 587.0, "w": 461.0, "h": 70.0, "line_num": 7, "text": "if __ name __ =", "delta": -98.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 560.0, "y": 560.0, "w": 20.0, "h": 22.0, "line_num": 8, "text": "1", "delta": 510.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 843.0, "y": 543.0, "w": 18.0, "h": 19.0, "line_num": 9, "text": "1", "delta": 283.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 648.0, "y": 578.0, "w": 102.0, "h": 32.0, "line_num": 10, "text": "main", "delta": -195.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 584.0, "y": 605.0, "w": 26.0, "h": 17.0, "line_num": 11, "text": "-", "delta": -64.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 610.0, "y": 592.0, "w": 50.0, "h": 29.0, "line_num": 12, "text": "-", "delta": 26.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 869.0, "y": 555.0, "w": 38.0, "h": 30.0, "line_num": 13, "text": "-", "delta": 259.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 755.0, "y": 586.0, "w": 87.0, "h": 24.0, "line_num": 14, "text": "--", "delta": -114.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 143.0, "y": 672.0, "w": 183.0, "h": 52.0, "line_num": 15, "text": "main ( )", "delta": -612.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 64, "prompting_method": "cot-test5", "lm_post_processed_code": "def main():\n    input_string = input('Input string:')\n    ret = \" \"\n    for ch in input_string:\n        ret = ret + ch.upper()\n    print ret\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 5}, {"image_id": 38, "image_height": 1400, "image_width": 1050, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 66.0, "y": 58.0, "w": 302.0, "h": 56.0, "line_num": 1, "text": "def main () ;"}, {"x": 170.0, "y": 136.0, "w": 835.0, "h": 57.0, "line_num": 2, "text": "input_ string = input ( Input string:')"}, {"x": 166.0, "y": 214.0, "w": 230.0, "h": 44.0, "line_num": 3, "text": "ret = \" \""}, {"x": 170.0, "y": 280.0, "w": 580.0, "h": 57.0, "line_num": 4, "text": "for ch in input string"}, {"x": 273.0, "y": 359.0, "w": 604.0, "h": 58.0, "line_num": 5, "text": "ref = ret + ch.upper()"}, {"x": 148.0, "y": 455.0, "w": 229.0, "h": 61.0, "line_num": 6, "text": "print ret"}, {"x": 50.0, "y": 587.0, "w": 461.0, "h": 70.0, "line_num": 7, "text": "if __ name __ ="}, {"x": 560.0, "y": 560.0, "w": 20.0, "h": 22.0, "line_num": 8, "text": "1"}, {"x": 843.0, "y": 543.0, "w": 18.0, "h": 19.0, "line_num": 9, "text": "1"}, {"x": 648.0, "y": 578.0, "w": 102.0, "h": 32.0, "line_num": 10, "text": "main"}, {"x": 584.0, "y": 605.0, "w": 26.0, "h": 17.0, "line_num": 11, "text": "-"}, {"x": 610.0, "y": 592.0, "w": 50.0, "h": 29.0, "line_num": 12, "text": "-"}, {"x": 869.0, "y": 555.0, "w": 38.0, "h": 30.0, "line_num": 13, "text": "-"}, {"x": 755.0, "y": 586.0, "w": 87.0, "h": 24.0, "line_num": 14, "text": "--"}, {"x": 143.0, "y": 672.0, "w": 183.0, "h": 52.0, "line_num": 15, "text": "main ( )"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main () ;\n    input_ string = input ( Input string:')\n    ret = \" \"\n    for ch in input string\n        ref = ret + ch.upper()\n    print ret\nif __ name __ =\n    1\n        1\n    main\n    -\n    -\n        -\n        --\nmain ( )\n", "ir_algo_output_indented_lines": [{"x": 66.0, "y": 58.0, "w": 302.0, "h": 56.0, "line_num": 1, "text": "def main () ;", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 170.0, "y": 136.0, "w": 835.0, "h": 57.0, "line_num": 2, "text": "input_ string = input ( Input string:')", "delta": 104.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 166.0, "y": 214.0, "w": 230.0, "h": 44.0, "line_num": 3, "text": "ret = \" \"", "delta": -4.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 170.0, "y": 280.0, "w": 580.0, "h": 57.0, "line_num": 4, "text": "for ch in input string", "delta": 4.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 273.0, "y": 359.0, "w": 604.0, "h": 58.0, "line_num": 5, "text": "ref = ret + ch.upper()", "delta": 103.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 148.0, "y": 455.0, "w": 229.0, "h": 61.0, "line_num": 6, "text": "print ret", "delta": -125.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 50.0, "y": 587.0, "w": 461.0, "h": 70.0, "line_num": 7, "text": "if __ name __ =", "delta": -98.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 560.0, "y": 560.0, "w": 20.0, "h": 22.0, "line_num": 8, "text": "1", "delta": 510.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 843.0, "y": 543.0, "w": 18.0, "h": 19.0, "line_num": 9, "text": "1", "delta": 283.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 648.0, "y": 578.0, "w": 102.0, "h": 32.0, "line_num": 10, "text": "main", "delta": -195.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 584.0, "y": 605.0, "w": 26.0, "h": 17.0, "line_num": 11, "text": "-", "delta": -64.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 610.0, "y": 592.0, "w": 50.0, "h": 29.0, "line_num": 12, "text": "-", "delta": 26.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 869.0, "y": 555.0, "w": 38.0, "h": 30.0, "line_num": 13, "text": "-", "delta": 259.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 755.0, "y": 586.0, "w": 87.0, "h": 24.0, "line_num": 14, "text": "--", "delta": -114.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 143.0, "y": 672.0, "w": 183.0, "h": 52.0, "line_num": 15, "text": "main ( )", "delta": -612.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 64, "prompting_method": "simple-test2", "lm_post_processed_code": "def main():\n    input_string = input('Input string:')\n    ret = \" \"\n    for ch in input_string:\n        ret = ret + ch.upper()\n    print(ret)\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 7}, {"image_id": 38, "image_height": 1400, "image_width": 1050, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 66.0, "y": 58.0, "w": 302.0, "h": 56.0, "line_num": 1, "text": "def main () ;"}, {"x": 170.0, "y": 136.0, "w": 835.0, "h": 57.0, "line_num": 2, "text": "input_ string = input ( Input string:')"}, {"x": 166.0, "y": 214.0, "w": 230.0, "h": 44.0, "line_num": 3, "text": "ret = \" \""}, {"x": 170.0, "y": 280.0, "w": 580.0, "h": 57.0, "line_num": 4, "text": "for ch in input string"}, {"x": 273.0, "y": 359.0, "w": 604.0, "h": 58.0, "line_num": 5, "text": "ref = ret + ch.upper()"}, {"x": 148.0, "y": 455.0, "w": 229.0, "h": 61.0, "line_num": 6, "text": "print ret"}, {"x": 50.0, "y": 587.0, "w": 461.0, "h": 70.0, "line_num": 7, "text": "if __ name __ ="}, {"x": 560.0, "y": 560.0, "w": 20.0, "h": 22.0, "line_num": 8, "text": "1"}, {"x": 843.0, "y": 543.0, "w": 18.0, "h": 19.0, "line_num": 9, "text": "1"}, {"x": 648.0, "y": 578.0, "w": 102.0, "h": 32.0, "line_num": 10, "text": "main"}, {"x": 584.0, "y": 605.0, "w": 26.0, "h": 17.0, "line_num": 11, "text": "-"}, {"x": 610.0, "y": 592.0, "w": 50.0, "h": 29.0, "line_num": 12, "text": "-"}, {"x": 869.0, "y": 555.0, "w": 38.0, "h": 30.0, "line_num": 13, "text": "-"}, {"x": 755.0, "y": 586.0, "w": 87.0, "h": 24.0, "line_num": 14, "text": "--"}, {"x": 143.0, "y": 672.0, "w": 183.0, "h": 52.0, "line_num": 15, "text": "main ( )"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main () ;\n    input_ string = input ( Input string:')\n    ret = \" \"\n    for ch in input string\n        ref = ret + ch.upper()\n    print ret\nif __ name __ =\n    1\n        1\n    main\n    -\n    -\n        -\n        --\nmain ( )\n", "ir_algo_output_indented_lines": [{"x": 66.0, "y": 58.0, "w": 302.0, "h": 56.0, "line_num": 1, "text": "def main () ;", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 170.0, "y": 136.0, "w": 835.0, "h": 57.0, "line_num": 2, "text": "input_ string = input ( Input string:')", "delta": 104.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 166.0, "y": 214.0, "w": 230.0, "h": 44.0, "line_num": 3, "text": "ret = \" \"", "delta": -4.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 170.0, "y": 280.0, "w": 580.0, "h": 57.0, "line_num": 4, "text": "for ch in input string", "delta": 4.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 273.0, "y": 359.0, "w": 604.0, "h": 58.0, "line_num": 5, "text": "ref = ret + ch.upper()", "delta": 103.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 148.0, "y": 455.0, "w": 229.0, "h": 61.0, "line_num": 6, "text": "print ret", "delta": -125.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 50.0, "y": 587.0, "w": 461.0, "h": 70.0, "line_num": 7, "text": "if __ name __ =", "delta": -98.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 560.0, "y": 560.0, "w": 20.0, "h": 22.0, "line_num": 8, "text": "1", "delta": 510.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 843.0, "y": 543.0, "w": 18.0, "h": 19.0, "line_num": 9, "text": "1", "delta": 283.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 648.0, "y": 578.0, "w": 102.0, "h": 32.0, "line_num": 10, "text": "main", "delta": -195.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 584.0, "y": 605.0, "w": 26.0, "h": 17.0, "line_num": 11, "text": "-", "delta": -64.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 610.0, "y": 592.0, "w": 50.0, "h": 29.0, "line_num": 12, "text": "-", "delta": 26.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 869.0, "y": 555.0, "w": 38.0, "h": 30.0, "line_num": 13, "text": "-", "delta": 259.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 755.0, "y": 586.0, "w": 87.0, "h": 24.0, "line_num": 14, "text": "--", "delta": -114.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 143.0, "y": 672.0, "w": 183.0, "h": 52.0, "line_num": 15, "text": "main ( )", "delta": -612.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 64, "prompting_method": "simple-test3", "lm_post_processed_code": "def main():\n    input_string = input('Input string:')\n    ret = \" \"\n    for ch in input_string:\n        ret = ret + ch.upper()\n    print(ret)\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 7}, {"image_id": 40, "image_height": 3936, "image_width": 1980, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 214.0, "y": 72.0, "w": 1087.0, "h": 73.0, "line_num": 1, "text": "from kanel stanfordkard import *"}, {"x": 212.0, "y": 254.0, "w": 422.0, "h": 71.0, "line_num": 2, "text": "det main ():"}, {"x": 368.0, "y": 346.0, "w": 840.0, "h": 69.0, "line_num": 3, "text": "while front_is_clear ():"}, {"x": 514.0, "y": 426.0, "w": 405.0, "h": 75.0, "line_num": 4, "text": "bill_tower ( )"}, {"x": 206.0, "y": 634.0, "w": 618.0, "h": 76.0, "line_num": 5, "text": "det fill_tower():"}, {"x": 376.0, "y": 728.0, "w": 864.0, "h": 70.0, "line_num": 6, "text": "while front_is_clean ():"}, {"x": 517.0, "y": 821.0, "w": 461.0, "h": 72.0, "line_num": 7, "text": "put-beeper ()"}, {"x": 524.0, "y": 922.0, "w": 237.0, "h": 58.0, "line_num": 8, "text": "move ()"}, {"x": 372.0, "y": 1017.0, "w": 450.0, "h": 71.0, "line_num": 9, "text": "put_beeper ()"}, {"x": 381.0, "y": 1109.0, "w": 607.0, "h": 68.0, "line_num": 10, "text": "column_return ()"}, {"x": 196.0, "y": 1293.0, "w": 814.0, "h": 84.0, "line_num": 11, "text": "def column_return ():"}, {"x": 381.0, "y": 1399.0, "w": 969.0, "h": 74.0, "line_num": 12, "text": "while front_ is_blocked ():"}, {"x": 535.0, "y": 1496.0, "w": 499.0, "h": 73.0, "line_num": 13, "text": "turn-around()"}, {"x": 383.0, "y": 1596.0, "w": 894.0, "h": 78.0, "line_num": 14, "text": "while front_is_clear () :"}, {"x": 552.0, "y": 1707.0, "w": 250.0, "h": 58.0, "line_num": 15, "text": "move ( )"}, {"x": 390.0, "y": 1799.0, "w": 515.0, "h": 65.0, "line_num": 16, "text": "next_tower ()"}, {"x": 203.0, "y": 1989.0, "w": 741.0, "h": 72.0, "line_num": 17, "text": "det turn-around ():"}, {"x": 395.0, "y": 2088.0, "w": 721.0, "h": 72.0, "line_num": 18, "text": "for i in range (2) :"}, {"x": 571.0, "y": 2182.0, "w": 411.0, "h": 73.0, "line_num": 19, "text": "turn-left ( )"}, {"x": 196.0, "y": 2379.0, "w": 102.0, "h": 72.0, "line_num": 20, "text": "det"}, {"x": 381.0, "y": 2383.0, "w": 559.0, "h": 70.0, "line_num": 21, "text": "next_tower ():"}, {"x": 395.0, "y": 2480.0, "w": 822.0, "h": 84.0, "line_num": 22, "text": "if right_is_clean ():"}, {"x": 577.0, "y": 2580.0, "w": 464.0, "h": 76.0, "line_num": 23, "text": "turn-right ( )"}, {"x": 576.0, "y": 2689.0, "w": 246.0, "h": 55.0, "line_num": 24, "text": "move ()"}, {"x": 591.0, "y": 2775.0, "w": 468.0, "h": 82.0, "line_num": 25, "text": "turn-right ()"}, {"x": 388.0, "y": 2880.0, "w": 178.0, "h": 60.0, "line_num": 26, "text": "else :"}, {"x": 584.0, "y": 2974.0, "w": 536.0, "h": 75.0, "line_num": 27, "text": "turn-around ()"}, {"x": 590.0, "y": 3072.0, "w": 888.0, "h": 79.0, "line_num": 28, "text": "while front_is_dear ():"}, {"x": 776.0, "y": 3179.0, "w": 249.0, "h": 64.0, "line_num": 29, "text": "move( )"}, {"x": 193.0, "y": 3365.0, "w": 686.0, "h": 85.0, "line_num": 30, "text": "def turn-right ():"}, {"x": 405.0, "y": 3462.0, "w": 679.0, "h": 83.0, "line_num": 31, "text": "for i in range (3):"}, {"x": 590.0, "y": 3562.0, "w": 428.0, "h": 76.0, "line_num": 32, "text": "turn_left ()"}, {"x": 870.0, "y": 3751.0, "w": 1.0, "h": 3.0, "line_num": 33, "text": "-"}, {"x": 204.0, "y": 3762.0, "w": 56.0, "h": 82.0, "line_num": 34, "text": "if"}, {"x": 297.0, "y": 3785.0, "w": 560.0, "h": 59.0, "line_num": 35, "text": "- name _ = ="}, {"x": 955.0, "y": 3749.0, "w": 352.0, "h": 114.0, "line_num": 36, "text": "main _'"}, {"x": 416.0, "y": 3848.0, "w": 272.0, "h": 68.0, "line_num": 37, "text": "main ()"}], "ir_algo_name": "none", "ir_algo_output_code": "from kanel stanfordkard import *\ndet main ():\nwhile front_is_clear ():\nbill_tower ( )\ndet fill_tower():\nwhile front_is_clean ():\nput-beeper ()\nmove ()\nput_beeper ()\ncolumn_return ()\ndef column_return ():\nwhile front_ is_blocked ():\nturn-around()\nwhile front_is_clear () :\nmove ( )\nnext_tower ()\ndet turn-around ():\nfor i in range (2) :\nturn-left ( )\ndet\nnext_tower ():\nif right_is_clean ():\nturn-right ( )\nmove ()\nturn-right ()\nelse :\nturn-around ()\nwhile front_is_dear ():\nmove( )\ndef turn-right ():\nfor i in range (3):\nturn_left ()\n-\nif\n- name _ = =\nmain _'\nmain ()", "ir_algo_output_edit_distance": 232, "prompting_method": "none", "lm_post_processed_code": "from kanel stanfordkard import *\ndet main ():\nwhile front_is_clear ():\nbill_tower ( )\ndet fill_tower():\nwhile front_is_clean ():\nput-beeper ()\nmove ()\nput_beeper ()\ncolumn_return ()\ndef column_return ():\nwhile front_ is_blocked ():\nturn-around()\nwhile front_is_clear () :\nmove ( )\nnext_tower ()\ndet turn-around ():\nfor i in range (2) :\nturn-left ( )\ndet\nnext_tower ():\nif right_is_clean ():\nturn-right ( )\nmove ()\nturn-right ()\nelse :\nturn-around ()\nwhile front_is_dear ():\nmove( )\ndef turn-right ():\nfor i in range (3):\nturn_left ()\n-\nif\n- name _ = =\nmain _'\nmain ()", "lm_post_processed_edit_distance": 232}, {"image_id": 40, "image_height": 3936, "image_width": 1980, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 214.0, "y": 72.0, "w": 1087.0, "h": 73.0, "line_num": 1, "text": "from kanel stanfordkard import *"}, {"x": 212.0, "y": 254.0, "w": 422.0, "h": 71.0, "line_num": 2, "text": "det main ():"}, {"x": 368.0, "y": 346.0, "w": 840.0, "h": 69.0, "line_num": 3, "text": "while front_is_clear ():"}, {"x": 514.0, "y": 426.0, "w": 405.0, "h": 75.0, "line_num": 4, "text": "bill_tower ( )"}, {"x": 206.0, "y": 634.0, "w": 618.0, "h": 76.0, "line_num": 5, "text": "det fill_tower():"}, {"x": 376.0, "y": 728.0, "w": 864.0, "h": 70.0, "line_num": 6, "text": "while front_is_clean ():"}, {"x": 517.0, "y": 821.0, "w": 461.0, "h": 72.0, "line_num": 7, "text": "put-beeper ()"}, {"x": 524.0, "y": 922.0, "w": 237.0, "h": 58.0, "line_num": 8, "text": "move ()"}, {"x": 372.0, "y": 1017.0, "w": 450.0, "h": 71.0, "line_num": 9, "text": "put_beeper ()"}, {"x": 381.0, "y": 1109.0, "w": 607.0, "h": 68.0, "line_num": 10, "text": "column_return ()"}, {"x": 196.0, "y": 1293.0, "w": 814.0, "h": 84.0, "line_num": 11, "text": "def column_return ():"}, {"x": 381.0, "y": 1399.0, "w": 969.0, "h": 74.0, "line_num": 12, "text": "while front_ is_blocked ():"}, {"x": 535.0, "y": 1496.0, "w": 499.0, "h": 73.0, "line_num": 13, "text": "turn-around()"}, {"x": 383.0, "y": 1596.0, "w": 894.0, "h": 78.0, "line_num": 14, "text": "while front_is_clear () :"}, {"x": 552.0, "y": 1707.0, "w": 250.0, "h": 58.0, "line_num": 15, "text": "move ( )"}, {"x": 390.0, "y": 1799.0, "w": 515.0, "h": 65.0, "line_num": 16, "text": "next_tower ()"}, {"x": 203.0, "y": 1989.0, "w": 741.0, "h": 72.0, "line_num": 17, "text": "det turn-around ():"}, {"x": 395.0, "y": 2088.0, "w": 721.0, "h": 72.0, "line_num": 18, "text": "for i in range (2) :"}, {"x": 571.0, "y": 2182.0, "w": 411.0, "h": 73.0, "line_num": 19, "text": "turn-left ( )"}, {"x": 196.0, "y": 2379.0, "w": 102.0, "h": 72.0, "line_num": 20, "text": "det"}, {"x": 381.0, "y": 2383.0, "w": 559.0, "h": 70.0, "line_num": 21, "text": "next_tower ():"}, {"x": 395.0, "y": 2480.0, "w": 822.0, "h": 84.0, "line_num": 22, "text": "if right_is_clean ():"}, {"x": 577.0, "y": 2580.0, "w": 464.0, "h": 76.0, "line_num": 23, "text": "turn-right ( )"}, {"x": 576.0, "y": 2689.0, "w": 246.0, "h": 55.0, "line_num": 24, "text": "move ()"}, {"x": 591.0, "y": 2775.0, "w": 468.0, "h": 82.0, "line_num": 25, "text": "turn-right ()"}, {"x": 388.0, "y": 2880.0, "w": 178.0, "h": 60.0, "line_num": 26, "text": "else :"}, {"x": 584.0, "y": 2974.0, "w": 536.0, "h": 75.0, "line_num": 27, "text": "turn-around ()"}, {"x": 590.0, "y": 3072.0, "w": 888.0, "h": 79.0, "line_num": 28, "text": "while front_is_dear ():"}, {"x": 776.0, "y": 3179.0, "w": 249.0, "h": 64.0, "line_num": 29, "text": "move( )"}, {"x": 193.0, "y": 3365.0, "w": 686.0, "h": 85.0, "line_num": 30, "text": "def turn-right ():"}, {"x": 405.0, "y": 3462.0, "w": 679.0, "h": 83.0, "line_num": 31, "text": "for i in range (3):"}, {"x": 590.0, "y": 3562.0, "w": 428.0, "h": 76.0, "line_num": 32, "text": "turn_left ()"}, {"x": 870.0, "y": 3751.0, "w": 1.0, "h": 3.0, "line_num": 33, "text": "-"}, {"x": 204.0, "y": 3762.0, "w": 56.0, "h": 82.0, "line_num": 34, "text": "if"}, {"x": 297.0, "y": 3785.0, "w": 560.0, "h": 59.0, "line_num": 35, "text": "- name _ = ="}, {"x": 955.0, "y": 3749.0, "w": 352.0, "h": 114.0, "line_num": 36, "text": "main _'"}, {"x": 416.0, "y": 3848.0, "w": 272.0, "h": 68.0, "line_num": 37, "text": "main ()"}], "ir_algo_name": "none", "ir_algo_output_code": "from kanel stanfordkard import *\ndet main ():\nwhile front_is_clear ():\nbill_tower ( )\ndet fill_tower():\nwhile front_is_clean ():\nput-beeper ()\nmove ()\nput_beeper ()\ncolumn_return ()\ndef column_return ():\nwhile front_ is_blocked ():\nturn-around()\nwhile front_is_clear () :\nmove ( )\nnext_tower ()\ndet turn-around ():\nfor i in range (2) :\nturn-left ( )\ndet\nnext_tower ():\nif right_is_clean ():\nturn-right ( )\nmove ()\nturn-right ()\nelse :\nturn-around ()\nwhile front_is_dear ():\nmove( )\ndef turn-right ():\nfor i in range (3):\nturn_left ()\n-\nif\n- name _ = =\nmain _'\nmain ()", "ir_algo_output_edit_distance": 232, "prompting_method": "cot-test1", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\nwhile front_is_clear():\nbuild_tower()\n\ndef build_tower():\nwhile front_is_clear():\nput_beeper()\nmove()\nput_beeper()\ncolumn_return()\n\ndef column_return():\nwhile front_is_blocked():\nturn_around()\nwhile front_is_clear():\nmove()\nnext_tower()\n\ndef turn_around():\nfor i in range(2):\nturn_left()\n\ndef next_tower():\nif right_is_clear():\nturn_right()\nmove()\nturn_right()\nelse:\nturn_around()\nwhile front_is_clear():\nmove()\n\ndef turn_right():\nfor i in range(3):\nturn_left()\nif __name__ == '__main__':\nmain()\n", "lm_post_processed_edit_distance": 164}, {"image_id": 40, "image_height": 3936, "image_width": 1980, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 214.0, "y": 72.0, "w": 1087.0, "h": 73.0, "line_num": 1, "text": "from kanel stanfordkard import *"}, {"x": 212.0, "y": 254.0, "w": 422.0, "h": 71.0, "line_num": 2, "text": "det main ():"}, {"x": 368.0, "y": 346.0, "w": 840.0, "h": 69.0, "line_num": 3, "text": "while front_is_clear ():"}, {"x": 514.0, "y": 426.0, "w": 405.0, "h": 75.0, "line_num": 4, "text": "bill_tower ( )"}, {"x": 206.0, "y": 634.0, "w": 618.0, "h": 76.0, "line_num": 5, "text": "det fill_tower():"}, {"x": 376.0, "y": 728.0, "w": 864.0, "h": 70.0, "line_num": 6, "text": "while front_is_clean ():"}, {"x": 517.0, "y": 821.0, "w": 461.0, "h": 72.0, "line_num": 7, "text": "put-beeper ()"}, {"x": 524.0, "y": 922.0, "w": 237.0, "h": 58.0, "line_num": 8, "text": "move ()"}, {"x": 372.0, "y": 1017.0, "w": 450.0, "h": 71.0, "line_num": 9, "text": "put_beeper ()"}, {"x": 381.0, "y": 1109.0, "w": 607.0, "h": 68.0, "line_num": 10, "text": "column_return ()"}, {"x": 196.0, "y": 1293.0, "w": 814.0, "h": 84.0, "line_num": 11, "text": "def column_return ():"}, {"x": 381.0, "y": 1399.0, "w": 969.0, "h": 74.0, "line_num": 12, "text": "while front_ is_blocked ():"}, {"x": 535.0, "y": 1496.0, "w": 499.0, "h": 73.0, "line_num": 13, "text": "turn-around()"}, {"x": 383.0, "y": 1596.0, "w": 894.0, "h": 78.0, "line_num": 14, "text": "while front_is_clear () :"}, {"x": 552.0, "y": 1707.0, "w": 250.0, "h": 58.0, "line_num": 15, "text": "move ( )"}, {"x": 390.0, "y": 1799.0, "w": 515.0, "h": 65.0, "line_num": 16, "text": "next_tower ()"}, {"x": 203.0, "y": 1989.0, "w": 741.0, "h": 72.0, "line_num": 17, "text": "det turn-around ():"}, {"x": 395.0, "y": 2088.0, "w": 721.0, "h": 72.0, "line_num": 18, "text": "for i in range (2) :"}, {"x": 571.0, "y": 2182.0, "w": 411.0, "h": 73.0, "line_num": 19, "text": "turn-left ( )"}, {"x": 196.0, "y": 2379.0, "w": 102.0, "h": 72.0, "line_num": 20, "text": "det"}, {"x": 381.0, "y": 2383.0, "w": 559.0, "h": 70.0, "line_num": 21, "text": "next_tower ():"}, {"x": 395.0, "y": 2480.0, "w": 822.0, "h": 84.0, "line_num": 22, "text": "if right_is_clean ():"}, {"x": 577.0, "y": 2580.0, "w": 464.0, "h": 76.0, "line_num": 23, "text": "turn-right ( )"}, {"x": 576.0, "y": 2689.0, "w": 246.0, "h": 55.0, "line_num": 24, "text": "move ()"}, {"x": 591.0, "y": 2775.0, "w": 468.0, "h": 82.0, "line_num": 25, "text": "turn-right ()"}, {"x": 388.0, "y": 2880.0, "w": 178.0, "h": 60.0, "line_num": 26, "text": "else :"}, {"x": 584.0, "y": 2974.0, "w": 536.0, "h": 75.0, "line_num": 27, "text": "turn-around ()"}, {"x": 590.0, "y": 3072.0, "w": 888.0, "h": 79.0, "line_num": 28, "text": "while front_is_dear ():"}, {"x": 776.0, "y": 3179.0, "w": 249.0, "h": 64.0, "line_num": 29, "text": "move( )"}, {"x": 193.0, "y": 3365.0, "w": 686.0, "h": 85.0, "line_num": 30, "text": "def turn-right ():"}, {"x": 405.0, "y": 3462.0, "w": 679.0, "h": 83.0, "line_num": 31, "text": "for i in range (3):"}, {"x": 590.0, "y": 3562.0, "w": 428.0, "h": 76.0, "line_num": 32, "text": "turn_left ()"}, {"x": 870.0, "y": 3751.0, "w": 1.0, "h": 3.0, "line_num": 33, "text": "-"}, {"x": 204.0, "y": 3762.0, "w": 56.0, "h": 82.0, "line_num": 34, "text": "if"}, {"x": 297.0, "y": 3785.0, "w": 560.0, "h": 59.0, "line_num": 35, "text": "- name _ = ="}, {"x": 955.0, "y": 3749.0, "w": 352.0, "h": 114.0, "line_num": 36, "text": "main _'"}, {"x": 416.0, "y": 3848.0, "w": 272.0, "h": 68.0, "line_num": 37, "text": "main ()"}], "ir_algo_name": "none", "ir_algo_output_code": "from kanel stanfordkard import *\ndet main ():\nwhile front_is_clear ():\nbill_tower ( )\ndet fill_tower():\nwhile front_is_clean ():\nput-beeper ()\nmove ()\nput_beeper ()\ncolumn_return ()\ndef column_return ():\nwhile front_ is_blocked ():\nturn-around()\nwhile front_is_clear () :\nmove ( )\nnext_tower ()\ndet turn-around ():\nfor i in range (2) :\nturn-left ( )\ndet\nnext_tower ():\nif right_is_clean ():\nturn-right ( )\nmove ()\nturn-right ()\nelse :\nturn-around ()\nwhile front_is_dear ():\nmove( )\ndef turn-right ():\nfor i in range (3):\nturn_left ()\n-\nif\n- name _ = =\nmain _'\nmain ()", "ir_algo_output_edit_distance": 232, "prompting_method": "cot-test5", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\nwhile front_is_clear():\nbuild_tower()\n\ndef build_tower():\nwhile front_is_clear():\nput_beeper()\nmove()\nput_beeper()\ncolumn_return()\n\ndef column_return():\nwhile front_is_blocked():\nturn_around()\nwhile front_is_clear():\nmove()\nnext_tower()\n\ndef turn_around():\nfor i in range(2):\nturn_left()\n\ndef next_tower():\nif right_is_clear():\nturn_right()\nmove()\nturn_right()\nelse:\nturn_around()\nwhile front_is_clear():\nmove()\n\ndef turn_right():\nfor i in range(3):\nturn_left()\nif __name__ == '__main__':\nmain()\n", "lm_post_processed_edit_distance": 164}, {"image_id": 40, "image_height": 3936, "image_width": 1980, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 214.0, "y": 72.0, "w": 1087.0, "h": 73.0, "line_num": 1, "text": "from kanel stanfordkard import *"}, {"x": 212.0, "y": 254.0, "w": 422.0, "h": 71.0, "line_num": 2, "text": "det main ():"}, {"x": 368.0, "y": 346.0, "w": 840.0, "h": 69.0, "line_num": 3, "text": "while front_is_clear ():"}, {"x": 514.0, "y": 426.0, "w": 405.0, "h": 75.0, "line_num": 4, "text": "bill_tower ( )"}, {"x": 206.0, "y": 634.0, "w": 618.0, "h": 76.0, "line_num": 5, "text": "det fill_tower():"}, {"x": 376.0, "y": 728.0, "w": 864.0, "h": 70.0, "line_num": 6, "text": "while front_is_clean ():"}, {"x": 517.0, "y": 821.0, "w": 461.0, "h": 72.0, "line_num": 7, "text": "put-beeper ()"}, {"x": 524.0, "y": 922.0, "w": 237.0, "h": 58.0, "line_num": 8, "text": "move ()"}, {"x": 372.0, "y": 1017.0, "w": 450.0, "h": 71.0, "line_num": 9, "text": "put_beeper ()"}, {"x": 381.0, "y": 1109.0, "w": 607.0, "h": 68.0, "line_num": 10, "text": "column_return ()"}, {"x": 196.0, "y": 1293.0, "w": 814.0, "h": 84.0, "line_num": 11, "text": "def column_return ():"}, {"x": 381.0, "y": 1399.0, "w": 969.0, "h": 74.0, "line_num": 12, "text": "while front_ is_blocked ():"}, {"x": 535.0, "y": 1496.0, "w": 499.0, "h": 73.0, "line_num": 13, "text": "turn-around()"}, {"x": 383.0, "y": 1596.0, "w": 894.0, "h": 78.0, "line_num": 14, "text": "while front_is_clear () :"}, {"x": 552.0, "y": 1707.0, "w": 250.0, "h": 58.0, "line_num": 15, "text": "move ( )"}, {"x": 390.0, "y": 1799.0, "w": 515.0, "h": 65.0, "line_num": 16, "text": "next_tower ()"}, {"x": 203.0, "y": 1989.0, "w": 741.0, "h": 72.0, "line_num": 17, "text": "det turn-around ():"}, {"x": 395.0, "y": 2088.0, "w": 721.0, "h": 72.0, "line_num": 18, "text": "for i in range (2) :"}, {"x": 571.0, "y": 2182.0, "w": 411.0, "h": 73.0, "line_num": 19, "text": "turn-left ( )"}, {"x": 196.0, "y": 2379.0, "w": 102.0, "h": 72.0, "line_num": 20, "text": "det"}, {"x": 381.0, "y": 2383.0, "w": 559.0, "h": 70.0, "line_num": 21, "text": "next_tower ():"}, {"x": 395.0, "y": 2480.0, "w": 822.0, "h": 84.0, "line_num": 22, "text": "if right_is_clean ():"}, {"x": 577.0, "y": 2580.0, "w": 464.0, "h": 76.0, "line_num": 23, "text": "turn-right ( )"}, {"x": 576.0, "y": 2689.0, "w": 246.0, "h": 55.0, "line_num": 24, "text": "move ()"}, {"x": 591.0, "y": 2775.0, "w": 468.0, "h": 82.0, "line_num": 25, "text": "turn-right ()"}, {"x": 388.0, "y": 2880.0, "w": 178.0, "h": 60.0, "line_num": 26, "text": "else :"}, {"x": 584.0, "y": 2974.0, "w": 536.0, "h": 75.0, "line_num": 27, "text": "turn-around ()"}, {"x": 590.0, "y": 3072.0, "w": 888.0, "h": 79.0, "line_num": 28, "text": "while front_is_dear ():"}, {"x": 776.0, "y": 3179.0, "w": 249.0, "h": 64.0, "line_num": 29, "text": "move( )"}, {"x": 193.0, "y": 3365.0, "w": 686.0, "h": 85.0, "line_num": 30, "text": "def turn-right ():"}, {"x": 405.0, "y": 3462.0, "w": 679.0, "h": 83.0, "line_num": 31, "text": "for i in range (3):"}, {"x": 590.0, "y": 3562.0, "w": 428.0, "h": 76.0, "line_num": 32, "text": "turn_left ()"}, {"x": 870.0, "y": 3751.0, "w": 1.0, "h": 3.0, "line_num": 33, "text": "-"}, {"x": 204.0, "y": 3762.0, "w": 56.0, "h": 82.0, "line_num": 34, "text": "if"}, {"x": 297.0, "y": 3785.0, "w": 560.0, "h": 59.0, "line_num": 35, "text": "- name _ = ="}, {"x": 955.0, "y": 3749.0, "w": 352.0, "h": 114.0, "line_num": 36, "text": "main _'"}, {"x": 416.0, "y": 3848.0, "w": 272.0, "h": 68.0, "line_num": 37, "text": "main ()"}], "ir_algo_name": "none", "ir_algo_output_code": "from kanel stanfordkard import *\ndet main ():\nwhile front_is_clear ():\nbill_tower ( )\ndet fill_tower():\nwhile front_is_clean ():\nput-beeper ()\nmove ()\nput_beeper ()\ncolumn_return ()\ndef column_return ():\nwhile front_ is_blocked ():\nturn-around()\nwhile front_is_clear () :\nmove ( )\nnext_tower ()\ndet turn-around ():\nfor i in range (2) :\nturn-left ( )\ndet\nnext_tower ():\nif right_is_clean ():\nturn-right ( )\nmove ()\nturn-right ()\nelse :\nturn-around ()\nwhile front_is_dear ():\nmove( )\ndef turn-right ():\nfor i in range (3):\nturn_left ()\n-\nif\n- name _ = =\nmain _'\nmain ()", "ir_algo_output_edit_distance": 232, "prompting_method": "simple-test2", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\nwhile front_is_clear():\nbuild_tower()\n\ndef build_tower():\nwhile front_is_clear():\nput_beeper()\nmove()\nput_beeper()\ncolumn_return()\n\ndef column_return():\nwhile front_is_blocked():\nturn_around()\nwhile front_is_clear():\nmove()\nnext_tower()\n\ndef turn_around():\nfor i in range(2):\nturn_left()\n\ndef next_tower():\nif right_is_clear():\nturn_right()\nmove()\nturn_right()\nelse:\nturn_around()\nwhile front_is_clear():\nmove()\n\ndef turn_right():\nfor i in range(3):\nturn_left()\nif __name__ == '__main__':\nmain()\n", "lm_post_processed_edit_distance": 164}, {"image_id": 40, "image_height": 3936, "image_width": 1980, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 214.0, "y": 72.0, "w": 1087.0, "h": 73.0, "line_num": 1, "text": "from kanel stanfordkard import *"}, {"x": 212.0, "y": 254.0, "w": 422.0, "h": 71.0, "line_num": 2, "text": "det main ():"}, {"x": 368.0, "y": 346.0, "w": 840.0, "h": 69.0, "line_num": 3, "text": "while front_is_clear ():"}, {"x": 514.0, "y": 426.0, "w": 405.0, "h": 75.0, "line_num": 4, "text": "bill_tower ( )"}, {"x": 206.0, "y": 634.0, "w": 618.0, "h": 76.0, "line_num": 5, "text": "det fill_tower():"}, {"x": 376.0, "y": 728.0, "w": 864.0, "h": 70.0, "line_num": 6, "text": "while front_is_clean ():"}, {"x": 517.0, "y": 821.0, "w": 461.0, "h": 72.0, "line_num": 7, "text": "put-beeper ()"}, {"x": 524.0, "y": 922.0, "w": 237.0, "h": 58.0, "line_num": 8, "text": "move ()"}, {"x": 372.0, "y": 1017.0, "w": 450.0, "h": 71.0, "line_num": 9, "text": "put_beeper ()"}, {"x": 381.0, "y": 1109.0, "w": 607.0, "h": 68.0, "line_num": 10, "text": "column_return ()"}, {"x": 196.0, "y": 1293.0, "w": 814.0, "h": 84.0, "line_num": 11, "text": "def column_return ():"}, {"x": 381.0, "y": 1399.0, "w": 969.0, "h": 74.0, "line_num": 12, "text": "while front_ is_blocked ():"}, {"x": 535.0, "y": 1496.0, "w": 499.0, "h": 73.0, "line_num": 13, "text": "turn-around()"}, {"x": 383.0, "y": 1596.0, "w": 894.0, "h": 78.0, "line_num": 14, "text": "while front_is_clear () :"}, {"x": 552.0, "y": 1707.0, "w": 250.0, "h": 58.0, "line_num": 15, "text": "move ( )"}, {"x": 390.0, "y": 1799.0, "w": 515.0, "h": 65.0, "line_num": 16, "text": "next_tower ()"}, {"x": 203.0, "y": 1989.0, "w": 741.0, "h": 72.0, "line_num": 17, "text": "det turn-around ():"}, {"x": 395.0, "y": 2088.0, "w": 721.0, "h": 72.0, "line_num": 18, "text": "for i in range (2) :"}, {"x": 571.0, "y": 2182.0, "w": 411.0, "h": 73.0, "line_num": 19, "text": "turn-left ( )"}, {"x": 196.0, "y": 2379.0, "w": 102.0, "h": 72.0, "line_num": 20, "text": "det"}, {"x": 381.0, "y": 2383.0, "w": 559.0, "h": 70.0, "line_num": 21, "text": "next_tower ():"}, {"x": 395.0, "y": 2480.0, "w": 822.0, "h": 84.0, "line_num": 22, "text": "if right_is_clean ():"}, {"x": 577.0, "y": 2580.0, "w": 464.0, "h": 76.0, "line_num": 23, "text": "turn-right ( )"}, {"x": 576.0, "y": 2689.0, "w": 246.0, "h": 55.0, "line_num": 24, "text": "move ()"}, {"x": 591.0, "y": 2775.0, "w": 468.0, "h": 82.0, "line_num": 25, "text": "turn-right ()"}, {"x": 388.0, "y": 2880.0, "w": 178.0, "h": 60.0, "line_num": 26, "text": "else :"}, {"x": 584.0, "y": 2974.0, "w": 536.0, "h": 75.0, "line_num": 27, "text": "turn-around ()"}, {"x": 590.0, "y": 3072.0, "w": 888.0, "h": 79.0, "line_num": 28, "text": "while front_is_dear ():"}, {"x": 776.0, "y": 3179.0, "w": 249.0, "h": 64.0, "line_num": 29, "text": "move( )"}, {"x": 193.0, "y": 3365.0, "w": 686.0, "h": 85.0, "line_num": 30, "text": "def turn-right ():"}, {"x": 405.0, "y": 3462.0, "w": 679.0, "h": 83.0, "line_num": 31, "text": "for i in range (3):"}, {"x": 590.0, "y": 3562.0, "w": 428.0, "h": 76.0, "line_num": 32, "text": "turn_left ()"}, {"x": 870.0, "y": 3751.0, "w": 1.0, "h": 3.0, "line_num": 33, "text": "-"}, {"x": 204.0, "y": 3762.0, "w": 56.0, "h": 82.0, "line_num": 34, "text": "if"}, {"x": 297.0, "y": 3785.0, "w": 560.0, "h": 59.0, "line_num": 35, "text": "- name _ = ="}, {"x": 955.0, "y": 3749.0, "w": 352.0, "h": 114.0, "line_num": 36, "text": "main _'"}, {"x": 416.0, "y": 3848.0, "w": 272.0, "h": 68.0, "line_num": 37, "text": "main ()"}], "ir_algo_name": "none", "ir_algo_output_code": "from kanel stanfordkard import *\ndet main ():\nwhile front_is_clear ():\nbill_tower ( )\ndet fill_tower():\nwhile front_is_clean ():\nput-beeper ()\nmove ()\nput_beeper ()\ncolumn_return ()\ndef column_return ():\nwhile front_ is_blocked ():\nturn-around()\nwhile front_is_clear () :\nmove ( )\nnext_tower ()\ndet turn-around ():\nfor i in range (2) :\nturn-left ( )\ndet\nnext_tower ():\nif right_is_clean ():\nturn-right ( )\nmove ()\nturn-right ()\nelse :\nturn-around ()\nwhile front_is_dear ():\nmove( )\ndef turn-right ():\nfor i in range (3):\nturn_left ()\n-\nif\n- name _ = =\nmain _'\nmain ()", "ir_algo_output_edit_distance": 232, "prompting_method": "simple-test3", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\nwhile front_is_clear():\nbuild_tower()\n\ndef build_tower():\nwhile front_is_clear():\nput_beeper()\nmove()\nput_beeper()\ncolumn_return()\n\ndef column_return():\nwhile front_is_blocked():\nturn_around()\nwhile front_is_clear():\nmove()\nnext_tower()\n\ndef turn_around():\nfor i in range(2):\nturn_left()\n\ndef next_tower():\nif right_is_clear():\nturn_right()\nmove()\nturn_right()\nelse:\nturn_around()\nwhile front_is_clear():\nmove()\n\ndef turn_right():\nfor i in range(3):\nturn_left()\nif __name__ == '__main__':\nmain()\n", "lm_post_processed_edit_distance": 164}, {"image_id": 40, "image_height": 3936, "image_width": 1980, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 214.0, "y": 72.0, "w": 1087.0, "h": 73.0, "line_num": 1, "text": "from kanel stanfordkard import *"}, {"x": 212.0, "y": 254.0, "w": 422.0, "h": 71.0, "line_num": 2, "text": "det main ():"}, {"x": 368.0, "y": 346.0, "w": 840.0, "h": 69.0, "line_num": 3, "text": "while front_is_clear ():"}, {"x": 514.0, "y": 426.0, "w": 405.0, "h": 75.0, "line_num": 4, "text": "bill_tower ( )"}, {"x": 206.0, "y": 634.0, "w": 618.0, "h": 76.0, "line_num": 5, "text": "det fill_tower():"}, {"x": 376.0, "y": 728.0, "w": 864.0, "h": 70.0, "line_num": 6, "text": "while front_is_clean ():"}, {"x": 517.0, "y": 821.0, "w": 461.0, "h": 72.0, "line_num": 7, "text": "put-beeper ()"}, {"x": 524.0, "y": 922.0, "w": 237.0, "h": 58.0, "line_num": 8, "text": "move ()"}, {"x": 372.0, "y": 1017.0, "w": 450.0, "h": 71.0, "line_num": 9, "text": "put_beeper ()"}, {"x": 381.0, "y": 1109.0, "w": 607.0, "h": 68.0, "line_num": 10, "text": "column_return ()"}, {"x": 196.0, "y": 1293.0, "w": 814.0, "h": 84.0, "line_num": 11, "text": "def column_return ():"}, {"x": 381.0, "y": 1399.0, "w": 969.0, "h": 74.0, "line_num": 12, "text": "while front_ is_blocked ():"}, {"x": 535.0, "y": 1496.0, "w": 499.0, "h": 73.0, "line_num": 13, "text": "turn-around()"}, {"x": 383.0, "y": 1596.0, "w": 894.0, "h": 78.0, "line_num": 14, "text": "while front_is_clear () :"}, {"x": 552.0, "y": 1707.0, "w": 250.0, "h": 58.0, "line_num": 15, "text": "move ( )"}, {"x": 390.0, "y": 1799.0, "w": 515.0, "h": 65.0, "line_num": 16, "text": "next_tower ()"}, {"x": 203.0, "y": 1989.0, "w": 741.0, "h": 72.0, "line_num": 17, "text": "det turn-around ():"}, {"x": 395.0, "y": 2088.0, "w": 721.0, "h": 72.0, "line_num": 18, "text": "for i in range (2) :"}, {"x": 571.0, "y": 2182.0, "w": 411.0, "h": 73.0, "line_num": 19, "text": "turn-left ( )"}, {"x": 196.0, "y": 2379.0, "w": 102.0, "h": 72.0, "line_num": 20, "text": "det"}, {"x": 381.0, "y": 2383.0, "w": 559.0, "h": 70.0, "line_num": 21, "text": "next_tower ():"}, {"x": 395.0, "y": 2480.0, "w": 822.0, "h": 84.0, "line_num": 22, "text": "if right_is_clean ():"}, {"x": 577.0, "y": 2580.0, "w": 464.0, "h": 76.0, "line_num": 23, "text": "turn-right ( )"}, {"x": 576.0, "y": 2689.0, "w": 246.0, "h": 55.0, "line_num": 24, "text": "move ()"}, {"x": 591.0, "y": 2775.0, "w": 468.0, "h": 82.0, "line_num": 25, "text": "turn-right ()"}, {"x": 388.0, "y": 2880.0, "w": 178.0, "h": 60.0, "line_num": 26, "text": "else :"}, {"x": 584.0, "y": 2974.0, "w": 536.0, "h": 75.0, "line_num": 27, "text": "turn-around ()"}, {"x": 590.0, "y": 3072.0, "w": 888.0, "h": 79.0, "line_num": 28, "text": "while front_is_dear ():"}, {"x": 776.0, "y": 3179.0, "w": 249.0, "h": 64.0, "line_num": 29, "text": "move( )"}, {"x": 193.0, "y": 3365.0, "w": 686.0, "h": 85.0, "line_num": 30, "text": "def turn-right ():"}, {"x": 405.0, "y": 3462.0, "w": 679.0, "h": 83.0, "line_num": 31, "text": "for i in range (3):"}, {"x": 590.0, "y": 3562.0, "w": 428.0, "h": 76.0, "line_num": 32, "text": "turn_left ()"}, {"x": 870.0, "y": 3751.0, "w": 1.0, "h": 3.0, "line_num": 33, "text": "-"}, {"x": 204.0, "y": 3762.0, "w": 56.0, "h": 82.0, "line_num": 34, "text": "if"}, {"x": 297.0, "y": 3785.0, "w": 560.0, "h": 59.0, "line_num": 35, "text": "- name _ = ="}, {"x": 955.0, "y": 3749.0, "w": 352.0, "h": 114.0, "line_num": 36, "text": "main _'"}, {"x": 416.0, "y": 3848.0, "w": 272.0, "h": 68.0, "line_num": 37, "text": "main ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 106.98648648648648, "ir_algo_output_code": "from kanel stanfordkard import *\ndet main ():\n    while front_is_clear ():\n        bill_tower ( )\ndet fill_tower():\n    while front_is_clean ():\n        put-beeper ()\n        move ()\n    put_beeper ()\n    column_return ()\ndef column_return ():\n    while front_ is_blocked ():\n        turn-around()\n    while front_is_clear () :\n        move ( )\n    next_tower ()\ndet turn-around ():\n    for i in range (2) :\n        turn-left ( )\ndet\n    next_tower ():\n    if right_is_clean ():\n        turn-right ( )\n        move ()\n        turn-right ()\n    else :\n        turn-around ()\n        while front_is_dear ():\n            move( )\ndef turn-right ():\n    for i in range (3):\n        turn_left ()\n            -\nif\n- name _ = =\n            main _'\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 214.0, "y": 72.0, "w": 1087.0, "h": 73.0, "line_num": 1, "text": "from kanel stanfordkard import *", "cluster_label": 2, "indentation": 0}, {"x": 212.0, "y": 254.0, "w": 422.0, "h": 71.0, "line_num": 2, "text": "det main ():", "cluster_label": 2, "indentation": 0}, {"x": 368.0, "y": 346.0, "w": 840.0, "h": 69.0, "line_num": 3, "text": "while front_is_clear ():", "cluster_label": 0, "indentation": 1}, {"x": 514.0, "y": 426.0, "w": 405.0, "h": 75.0, "line_num": 4, "text": "bill_tower ( )", "cluster_label": 1, "indentation": 2}, {"x": 206.0, "y": 634.0, "w": 618.0, "h": 76.0, "line_num": 5, "text": "det fill_tower():", "cluster_label": 2, "indentation": 0}, {"x": 376.0, "y": 728.0, "w": 864.0, "h": 70.0, "line_num": 6, "text": "while front_is_clean ():", "cluster_label": 0, "indentation": 1}, {"x": 517.0, "y": 821.0, "w": 461.0, "h": 72.0, "line_num": 7, "text": "put-beeper ()", "cluster_label": 1, "indentation": 2}, {"x": 524.0, "y": 922.0, "w": 237.0, "h": 58.0, "line_num": 8, "text": "move ()", "cluster_label": 1, "indentation": 2}, {"x": 372.0, "y": 1017.0, "w": 450.0, "h": 71.0, "line_num": 9, "text": "put_beeper ()", "cluster_label": 0, "indentation": 1}, {"x": 381.0, "y": 1109.0, "w": 607.0, "h": 68.0, "line_num": 10, "text": "column_return ()", "cluster_label": 0, "indentation": 1}, {"x": 196.0, "y": 1293.0, "w": 814.0, "h": 84.0, "line_num": 11, "text": "def column_return ():", "cluster_label": 2, "indentation": 0}, {"x": 381.0, "y": 1399.0, "w": 969.0, "h": 74.0, "line_num": 12, "text": "while front_ is_blocked ():", "cluster_label": 0, "indentation": 1}, {"x": 535.0, "y": 1496.0, "w": 499.0, "h": 73.0, "line_num": 13, "text": "turn-around()", "cluster_label": 1, "indentation": 2}, {"x": 383.0, "y": 1596.0, "w": 894.0, "h": 78.0, "line_num": 14, "text": "while front_is_clear () :", "cluster_label": 0, "indentation": 1}, {"x": 552.0, "y": 1707.0, "w": 250.0, "h": 58.0, "line_num": 15, "text": "move ( )", "cluster_label": 1, "indentation": 2}, {"x": 390.0, "y": 1799.0, "w": 515.0, "h": 65.0, "line_num": 16, "text": "next_tower ()", "cluster_label": 0, "indentation": 1}, {"x": 203.0, "y": 1989.0, "w": 741.0, "h": 72.0, "line_num": 17, "text": "det turn-around ():", "cluster_label": 2, "indentation": 0}, {"x": 395.0, "y": 2088.0, "w": 721.0, "h": 72.0, "line_num": 18, "text": "for i in range (2) :", "cluster_label": 0, "indentation": 1}, {"x": 571.0, "y": 2182.0, "w": 411.0, "h": 73.0, "line_num": 19, "text": "turn-left ( )", "cluster_label": 1, "indentation": 2}, {"x": 196.0, "y": 2379.0, "w": 102.0, "h": 72.0, "line_num": 20, "text": "det", "cluster_label": 2, "indentation": 0}, {"x": 381.0, "y": 2383.0, "w": 559.0, "h": 70.0, "line_num": 21, "text": "next_tower ():", "cluster_label": 0, "indentation": 1}, {"x": 395.0, "y": 2480.0, "w": 822.0, "h": 84.0, "line_num": 22, "text": "if right_is_clean ():", "cluster_label": 0, "indentation": 1}, {"x": 577.0, "y": 2580.0, "w": 464.0, "h": 76.0, "line_num": 23, "text": "turn-right ( )", "cluster_label": 1, "indentation": 2}, {"x": 576.0, "y": 2689.0, "w": 246.0, "h": 55.0, "line_num": 24, "text": "move ()", "cluster_label": 1, "indentation": 2}, {"x": 591.0, "y": 2775.0, "w": 468.0, "h": 82.0, "line_num": 25, "text": "turn-right ()", "cluster_label": 1, "indentation": 2}, {"x": 388.0, "y": 2880.0, "w": 178.0, "h": 60.0, "line_num": 26, "text": "else :", "cluster_label": 0, "indentation": 1}, {"x": 584.0, "y": 2974.0, "w": 536.0, "h": 75.0, "line_num": 27, "text": "turn-around ()", "cluster_label": 1, "indentation": 2}, {"x": 590.0, "y": 3072.0, "w": 888.0, "h": 79.0, "line_num": 28, "text": "while front_is_dear ():", "cluster_label": 1, "indentation": 2}, {"x": 776.0, "y": 3179.0, "w": 249.0, "h": 64.0, "line_num": 29, "text": "move( )", "cluster_label": 3, "indentation": 3}, {"x": 193.0, "y": 3365.0, "w": 686.0, "h": 85.0, "line_num": 30, "text": "def turn-right ():", "cluster_label": 2, "indentation": 0}, {"x": 405.0, "y": 3462.0, "w": 679.0, "h": 83.0, "line_num": 31, "text": "for i in range (3):", "cluster_label": 0, "indentation": 1}, {"x": 590.0, "y": 3562.0, "w": 428.0, "h": 76.0, "line_num": 32, "text": "turn_left ()", "cluster_label": 1, "indentation": 2}, {"x": 870.0, "y": 3751.0, "w": 1.0, "h": 3.0, "line_num": 33, "text": "-", "cluster_label": 3, "indentation": 3}, {"x": 204.0, "y": 3762.0, "w": 56.0, "h": 82.0, "line_num": 34, "text": "if", "cluster_label": 2, "indentation": 0}, {"x": 297.0, "y": 3785.0, "w": 560.0, "h": 59.0, "line_num": 35, "text": "- name _ = =", "cluster_label": 2, "indentation": 0}, {"x": 955.0, "y": 3749.0, "w": 352.0, "h": 114.0, "line_num": 36, "text": "main _'", "cluster_label": 3, "indentation": 3}, {"x": 416.0, "y": 3848.0, "w": 272.0, "h": 68.0, "line_num": 37, "text": "main ()", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 100, "prompting_method": "none", "lm_post_processed_code": "from kanel stanfordkard import *\ndet main ():\n    while front_is_clear ():\n        bill_tower ( )\ndet fill_tower():\n    while front_is_clean ():\n        put-beeper ()\n        move ()\n    put_beeper ()\n    column_return ()\ndef column_return ():\n    while front_ is_blocked ():\n        turn-around()\n    while front_is_clear () :\n        move ( )\n    next_tower ()\ndet turn-around ():\n    for i in range (2) :\n        turn-left ( )\ndet\n    next_tower ():\n    if right_is_clean ():\n        turn-right ( )\n        move ()\n        turn-right ()\n    else :\n        turn-around ()\n        while front_is_dear ():\n            move( )\ndef turn-right ():\n    for i in range (3):\n        turn_left ()\n            -\nif\n- name _ = =\n            main _'\n    main ()\n", "lm_post_processed_edit_distance": 100}, {"image_id": 40, "image_height": 3936, "image_width": 1980, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 214.0, "y": 72.0, "w": 1087.0, "h": 73.0, "line_num": 1, "text": "from kanel stanfordkard import *"}, {"x": 212.0, "y": 254.0, "w": 422.0, "h": 71.0, "line_num": 2, "text": "det main ():"}, {"x": 368.0, "y": 346.0, "w": 840.0, "h": 69.0, "line_num": 3, "text": "while front_is_clear ():"}, {"x": 514.0, "y": 426.0, "w": 405.0, "h": 75.0, "line_num": 4, "text": "bill_tower ( )"}, {"x": 206.0, "y": 634.0, "w": 618.0, "h": 76.0, "line_num": 5, "text": "det fill_tower():"}, {"x": 376.0, "y": 728.0, "w": 864.0, "h": 70.0, "line_num": 6, "text": "while front_is_clean ():"}, {"x": 517.0, "y": 821.0, "w": 461.0, "h": 72.0, "line_num": 7, "text": "put-beeper ()"}, {"x": 524.0, "y": 922.0, "w": 237.0, "h": 58.0, "line_num": 8, "text": "move ()"}, {"x": 372.0, "y": 1017.0, "w": 450.0, "h": 71.0, "line_num": 9, "text": "put_beeper ()"}, {"x": 381.0, "y": 1109.0, "w": 607.0, "h": 68.0, "line_num": 10, "text": "column_return ()"}, {"x": 196.0, "y": 1293.0, "w": 814.0, "h": 84.0, "line_num": 11, "text": "def column_return ():"}, {"x": 381.0, "y": 1399.0, "w": 969.0, "h": 74.0, "line_num": 12, "text": "while front_ is_blocked ():"}, {"x": 535.0, "y": 1496.0, "w": 499.0, "h": 73.0, "line_num": 13, "text": "turn-around()"}, {"x": 383.0, "y": 1596.0, "w": 894.0, "h": 78.0, "line_num": 14, "text": "while front_is_clear () :"}, {"x": 552.0, "y": 1707.0, "w": 250.0, "h": 58.0, "line_num": 15, "text": "move ( )"}, {"x": 390.0, "y": 1799.0, "w": 515.0, "h": 65.0, "line_num": 16, "text": "next_tower ()"}, {"x": 203.0, "y": 1989.0, "w": 741.0, "h": 72.0, "line_num": 17, "text": "det turn-around ():"}, {"x": 395.0, "y": 2088.0, "w": 721.0, "h": 72.0, "line_num": 18, "text": "for i in range (2) :"}, {"x": 571.0, "y": 2182.0, "w": 411.0, "h": 73.0, "line_num": 19, "text": "turn-left ( )"}, {"x": 196.0, "y": 2379.0, "w": 102.0, "h": 72.0, "line_num": 20, "text": "det"}, {"x": 381.0, "y": 2383.0, "w": 559.0, "h": 70.0, "line_num": 21, "text": "next_tower ():"}, {"x": 395.0, "y": 2480.0, "w": 822.0, "h": 84.0, "line_num": 22, "text": "if right_is_clean ():"}, {"x": 577.0, "y": 2580.0, "w": 464.0, "h": 76.0, "line_num": 23, "text": "turn-right ( )"}, {"x": 576.0, "y": 2689.0, "w": 246.0, "h": 55.0, "line_num": 24, "text": "move ()"}, {"x": 591.0, "y": 2775.0, "w": 468.0, "h": 82.0, "line_num": 25, "text": "turn-right ()"}, {"x": 388.0, "y": 2880.0, "w": 178.0, "h": 60.0, "line_num": 26, "text": "else :"}, {"x": 584.0, "y": 2974.0, "w": 536.0, "h": 75.0, "line_num": 27, "text": "turn-around ()"}, {"x": 590.0, "y": 3072.0, "w": 888.0, "h": 79.0, "line_num": 28, "text": "while front_is_dear ():"}, {"x": 776.0, "y": 3179.0, "w": 249.0, "h": 64.0, "line_num": 29, "text": "move( )"}, {"x": 193.0, "y": 3365.0, "w": 686.0, "h": 85.0, "line_num": 30, "text": "def turn-right ():"}, {"x": 405.0, "y": 3462.0, "w": 679.0, "h": 83.0, "line_num": 31, "text": "for i in range (3):"}, {"x": 590.0, "y": 3562.0, "w": 428.0, "h": 76.0, "line_num": 32, "text": "turn_left ()"}, {"x": 870.0, "y": 3751.0, "w": 1.0, "h": 3.0, "line_num": 33, "text": "-"}, {"x": 204.0, "y": 3762.0, "w": 56.0, "h": 82.0, "line_num": 34, "text": "if"}, {"x": 297.0, "y": 3785.0, "w": 560.0, "h": 59.0, "line_num": 35, "text": "- name _ = ="}, {"x": 955.0, "y": 3749.0, "w": 352.0, "h": 114.0, "line_num": 36, "text": "main _'"}, {"x": 416.0, "y": 3848.0, "w": 272.0, "h": 68.0, "line_num": 37, "text": "main ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 106.98648648648648, "ir_algo_output_code": "from kanel stanfordkard import *\ndet main ():\n    while front_is_clear ():\n        bill_tower ( )\ndet fill_tower():\n    while front_is_clean ():\n        put-beeper ()\n        move ()\n    put_beeper ()\n    column_return ()\ndef column_return ():\n    while front_ is_blocked ():\n        turn-around()\n    while front_is_clear () :\n        move ( )\n    next_tower ()\ndet turn-around ():\n    for i in range (2) :\n        turn-left ( )\ndet\n    next_tower ():\n    if right_is_clean ():\n        turn-right ( )\n        move ()\n        turn-right ()\n    else :\n        turn-around ()\n        while front_is_dear ():\n            move( )\ndef turn-right ():\n    for i in range (3):\n        turn_left ()\n            -\nif\n- name _ = =\n            main _'\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 214.0, "y": 72.0, "w": 1087.0, "h": 73.0, "line_num": 1, "text": "from kanel stanfordkard import *", "cluster_label": 2, "indentation": 0}, {"x": 212.0, "y": 254.0, "w": 422.0, "h": 71.0, "line_num": 2, "text": "det main ():", "cluster_label": 2, "indentation": 0}, {"x": 368.0, "y": 346.0, "w": 840.0, "h": 69.0, "line_num": 3, "text": "while front_is_clear ():", "cluster_label": 0, "indentation": 1}, {"x": 514.0, "y": 426.0, "w": 405.0, "h": 75.0, "line_num": 4, "text": "bill_tower ( )", "cluster_label": 1, "indentation": 2}, {"x": 206.0, "y": 634.0, "w": 618.0, "h": 76.0, "line_num": 5, "text": "det fill_tower():", "cluster_label": 2, "indentation": 0}, {"x": 376.0, "y": 728.0, "w": 864.0, "h": 70.0, "line_num": 6, "text": "while front_is_clean ():", "cluster_label": 0, "indentation": 1}, {"x": 517.0, "y": 821.0, "w": 461.0, "h": 72.0, "line_num": 7, "text": "put-beeper ()", "cluster_label": 1, "indentation": 2}, {"x": 524.0, "y": 922.0, "w": 237.0, "h": 58.0, "line_num": 8, "text": "move ()", "cluster_label": 1, "indentation": 2}, {"x": 372.0, "y": 1017.0, "w": 450.0, "h": 71.0, "line_num": 9, "text": "put_beeper ()", "cluster_label": 0, "indentation": 1}, {"x": 381.0, "y": 1109.0, "w": 607.0, "h": 68.0, "line_num": 10, "text": "column_return ()", "cluster_label": 0, "indentation": 1}, {"x": 196.0, "y": 1293.0, "w": 814.0, "h": 84.0, "line_num": 11, "text": "def column_return ():", "cluster_label": 2, "indentation": 0}, {"x": 381.0, "y": 1399.0, "w": 969.0, "h": 74.0, "line_num": 12, "text": "while front_ is_blocked ():", "cluster_label": 0, "indentation": 1}, {"x": 535.0, "y": 1496.0, "w": 499.0, "h": 73.0, "line_num": 13, "text": "turn-around()", "cluster_label": 1, "indentation": 2}, {"x": 383.0, "y": 1596.0, "w": 894.0, "h": 78.0, "line_num": 14, "text": "while front_is_clear () :", "cluster_label": 0, "indentation": 1}, {"x": 552.0, "y": 1707.0, "w": 250.0, "h": 58.0, "line_num": 15, "text": "move ( )", "cluster_label": 1, "indentation": 2}, {"x": 390.0, "y": 1799.0, "w": 515.0, "h": 65.0, "line_num": 16, "text": "next_tower ()", "cluster_label": 0, "indentation": 1}, {"x": 203.0, "y": 1989.0, "w": 741.0, "h": 72.0, "line_num": 17, "text": "det turn-around ():", "cluster_label": 2, "indentation": 0}, {"x": 395.0, "y": 2088.0, "w": 721.0, "h": 72.0, "line_num": 18, "text": "for i in range (2) :", "cluster_label": 0, "indentation": 1}, {"x": 571.0, "y": 2182.0, "w": 411.0, "h": 73.0, "line_num": 19, "text": "turn-left ( )", "cluster_label": 1, "indentation": 2}, {"x": 196.0, "y": 2379.0, "w": 102.0, "h": 72.0, "line_num": 20, "text": "det", "cluster_label": 2, "indentation": 0}, {"x": 381.0, "y": 2383.0, "w": 559.0, "h": 70.0, "line_num": 21, "text": "next_tower ():", "cluster_label": 0, "indentation": 1}, {"x": 395.0, "y": 2480.0, "w": 822.0, "h": 84.0, "line_num": 22, "text": "if right_is_clean ():", "cluster_label": 0, "indentation": 1}, {"x": 577.0, "y": 2580.0, "w": 464.0, "h": 76.0, "line_num": 23, "text": "turn-right ( )", "cluster_label": 1, "indentation": 2}, {"x": 576.0, "y": 2689.0, "w": 246.0, "h": 55.0, "line_num": 24, "text": "move ()", "cluster_label": 1, "indentation": 2}, {"x": 591.0, "y": 2775.0, "w": 468.0, "h": 82.0, "line_num": 25, "text": "turn-right ()", "cluster_label": 1, "indentation": 2}, {"x": 388.0, "y": 2880.0, "w": 178.0, "h": 60.0, "line_num": 26, "text": "else :", "cluster_label": 0, "indentation": 1}, {"x": 584.0, "y": 2974.0, "w": 536.0, "h": 75.0, "line_num": 27, "text": "turn-around ()", "cluster_label": 1, "indentation": 2}, {"x": 590.0, "y": 3072.0, "w": 888.0, "h": 79.0, "line_num": 28, "text": "while front_is_dear ():", "cluster_label": 1, "indentation": 2}, {"x": 776.0, "y": 3179.0, "w": 249.0, "h": 64.0, "line_num": 29, "text": "move( )", "cluster_label": 3, "indentation": 3}, {"x": 193.0, "y": 3365.0, "w": 686.0, "h": 85.0, "line_num": 30, "text": "def turn-right ():", "cluster_label": 2, "indentation": 0}, {"x": 405.0, "y": 3462.0, "w": 679.0, "h": 83.0, "line_num": 31, "text": "for i in range (3):", "cluster_label": 0, "indentation": 1}, {"x": 590.0, "y": 3562.0, "w": 428.0, "h": 76.0, "line_num": 32, "text": "turn_left ()", "cluster_label": 1, "indentation": 2}, {"x": 870.0, "y": 3751.0, "w": 1.0, "h": 3.0, "line_num": 33, "text": "-", "cluster_label": 3, "indentation": 3}, {"x": 204.0, "y": 3762.0, "w": 56.0, "h": 82.0, "line_num": 34, "text": "if", "cluster_label": 2, "indentation": 0}, {"x": 297.0, "y": 3785.0, "w": 560.0, "h": 59.0, "line_num": 35, "text": "- name _ = =", "cluster_label": 2, "indentation": 0}, {"x": 955.0, "y": 3749.0, "w": 352.0, "h": 114.0, "line_num": 36, "text": "main _'", "cluster_label": 3, "indentation": 3}, {"x": 416.0, "y": 3848.0, "w": 272.0, "h": 68.0, "line_num": 37, "text": "main ()", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 100, "prompting_method": "cot-test1", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    while front_is_clear():\n        fill_tower()\n\ndef fill_tower():\n    while front_is_clear():\n        put_beeper()\n        move()\n    put_beeper()\n    column_return()\n\ndef column_return():\n    while front_is_blocked():\n        turn_around()\n    while front_is_clear():\n        move()\n    next_tower()\n\ndef turn_around():\n    for i in range(2):\n        turn_left()\n\ndef next_tower():\n    if right_is_clear():\n        turn_right()\n        move()\n        turn_right()\n    else:\n        turn_around()\n        while front_is_clear():\n            move()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 3}, {"image_id": 40, "image_height": 3936, "image_width": 1980, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 214.0, "y": 72.0, "w": 1087.0, "h": 73.0, "line_num": 1, "text": "from kanel stanfordkard import *"}, {"x": 212.0, "y": 254.0, "w": 422.0, "h": 71.0, "line_num": 2, "text": "det main ():"}, {"x": 368.0, "y": 346.0, "w": 840.0, "h": 69.0, "line_num": 3, "text": "while front_is_clear ():"}, {"x": 514.0, "y": 426.0, "w": 405.0, "h": 75.0, "line_num": 4, "text": "bill_tower ( )"}, {"x": 206.0, "y": 634.0, "w": 618.0, "h": 76.0, "line_num": 5, "text": "det fill_tower():"}, {"x": 376.0, "y": 728.0, "w": 864.0, "h": 70.0, "line_num": 6, "text": "while front_is_clean ():"}, {"x": 517.0, "y": 821.0, "w": 461.0, "h": 72.0, "line_num": 7, "text": "put-beeper ()"}, {"x": 524.0, "y": 922.0, "w": 237.0, "h": 58.0, "line_num": 8, "text": "move ()"}, {"x": 372.0, "y": 1017.0, "w": 450.0, "h": 71.0, "line_num": 9, "text": "put_beeper ()"}, {"x": 381.0, "y": 1109.0, "w": 607.0, "h": 68.0, "line_num": 10, "text": "column_return ()"}, {"x": 196.0, "y": 1293.0, "w": 814.0, "h": 84.0, "line_num": 11, "text": "def column_return ():"}, {"x": 381.0, "y": 1399.0, "w": 969.0, "h": 74.0, "line_num": 12, "text": "while front_ is_blocked ():"}, {"x": 535.0, "y": 1496.0, "w": 499.0, "h": 73.0, "line_num": 13, "text": "turn-around()"}, {"x": 383.0, "y": 1596.0, "w": 894.0, "h": 78.0, "line_num": 14, "text": "while front_is_clear () :"}, {"x": 552.0, "y": 1707.0, "w": 250.0, "h": 58.0, "line_num": 15, "text": "move ( )"}, {"x": 390.0, "y": 1799.0, "w": 515.0, "h": 65.0, "line_num": 16, "text": "next_tower ()"}, {"x": 203.0, "y": 1989.0, "w": 741.0, "h": 72.0, "line_num": 17, "text": "det turn-around ():"}, {"x": 395.0, "y": 2088.0, "w": 721.0, "h": 72.0, "line_num": 18, "text": "for i in range (2) :"}, {"x": 571.0, "y": 2182.0, "w": 411.0, "h": 73.0, "line_num": 19, "text": "turn-left ( )"}, {"x": 196.0, "y": 2379.0, "w": 102.0, "h": 72.0, "line_num": 20, "text": "det"}, {"x": 381.0, "y": 2383.0, "w": 559.0, "h": 70.0, "line_num": 21, "text": "next_tower ():"}, {"x": 395.0, "y": 2480.0, "w": 822.0, "h": 84.0, "line_num": 22, "text": "if right_is_clean ():"}, {"x": 577.0, "y": 2580.0, "w": 464.0, "h": 76.0, "line_num": 23, "text": "turn-right ( )"}, {"x": 576.0, "y": 2689.0, "w": 246.0, "h": 55.0, "line_num": 24, "text": "move ()"}, {"x": 591.0, "y": 2775.0, "w": 468.0, "h": 82.0, "line_num": 25, "text": "turn-right ()"}, {"x": 388.0, "y": 2880.0, "w": 178.0, "h": 60.0, "line_num": 26, "text": "else :"}, {"x": 584.0, "y": 2974.0, "w": 536.0, "h": 75.0, "line_num": 27, "text": "turn-around ()"}, {"x": 590.0, "y": 3072.0, "w": 888.0, "h": 79.0, "line_num": 28, "text": "while front_is_dear ():"}, {"x": 776.0, "y": 3179.0, "w": 249.0, "h": 64.0, "line_num": 29, "text": "move( )"}, {"x": 193.0, "y": 3365.0, "w": 686.0, "h": 85.0, "line_num": 30, "text": "def turn-right ():"}, {"x": 405.0, "y": 3462.0, "w": 679.0, "h": 83.0, "line_num": 31, "text": "for i in range (3):"}, {"x": 590.0, "y": 3562.0, "w": 428.0, "h": 76.0, "line_num": 32, "text": "turn_left ()"}, {"x": 870.0, "y": 3751.0, "w": 1.0, "h": 3.0, "line_num": 33, "text": "-"}, {"x": 204.0, "y": 3762.0, "w": 56.0, "h": 82.0, "line_num": 34, "text": "if"}, {"x": 297.0, "y": 3785.0, "w": 560.0, "h": 59.0, "line_num": 35, "text": "- name _ = ="}, {"x": 955.0, "y": 3749.0, "w": 352.0, "h": 114.0, "line_num": 36, "text": "main _'"}, {"x": 416.0, "y": 3848.0, "w": 272.0, "h": 68.0, "line_num": 37, "text": "main ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 106.98648648648648, "ir_algo_output_code": "from kanel stanfordkard import *\ndet main ():\n    while front_is_clear ():\n        bill_tower ( )\ndet fill_tower():\n    while front_is_clean ():\n        put-beeper ()\n        move ()\n    put_beeper ()\n    column_return ()\ndef column_return ():\n    while front_ is_blocked ():\n        turn-around()\n    while front_is_clear () :\n        move ( )\n    next_tower ()\ndet turn-around ():\n    for i in range (2) :\n        turn-left ( )\ndet\n    next_tower ():\n    if right_is_clean ():\n        turn-right ( )\n        move ()\n        turn-right ()\n    else :\n        turn-around ()\n        while front_is_dear ():\n            move( )\ndef turn-right ():\n    for i in range (3):\n        turn_left ()\n            -\nif\n- name _ = =\n            main _'\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 214.0, "y": 72.0, "w": 1087.0, "h": 73.0, "line_num": 1, "text": "from kanel stanfordkard import *", "cluster_label": 2, "indentation": 0}, {"x": 212.0, "y": 254.0, "w": 422.0, "h": 71.0, "line_num": 2, "text": "det main ():", "cluster_label": 2, "indentation": 0}, {"x": 368.0, "y": 346.0, "w": 840.0, "h": 69.0, "line_num": 3, "text": "while front_is_clear ():", "cluster_label": 0, "indentation": 1}, {"x": 514.0, "y": 426.0, "w": 405.0, "h": 75.0, "line_num": 4, "text": "bill_tower ( )", "cluster_label": 1, "indentation": 2}, {"x": 206.0, "y": 634.0, "w": 618.0, "h": 76.0, "line_num": 5, "text": "det fill_tower():", "cluster_label": 2, "indentation": 0}, {"x": 376.0, "y": 728.0, "w": 864.0, "h": 70.0, "line_num": 6, "text": "while front_is_clean ():", "cluster_label": 0, "indentation": 1}, {"x": 517.0, "y": 821.0, "w": 461.0, "h": 72.0, "line_num": 7, "text": "put-beeper ()", "cluster_label": 1, "indentation": 2}, {"x": 524.0, "y": 922.0, "w": 237.0, "h": 58.0, "line_num": 8, "text": "move ()", "cluster_label": 1, "indentation": 2}, {"x": 372.0, "y": 1017.0, "w": 450.0, "h": 71.0, "line_num": 9, "text": "put_beeper ()", "cluster_label": 0, "indentation": 1}, {"x": 381.0, "y": 1109.0, "w": 607.0, "h": 68.0, "line_num": 10, "text": "column_return ()", "cluster_label": 0, "indentation": 1}, {"x": 196.0, "y": 1293.0, "w": 814.0, "h": 84.0, "line_num": 11, "text": "def column_return ():", "cluster_label": 2, "indentation": 0}, {"x": 381.0, "y": 1399.0, "w": 969.0, "h": 74.0, "line_num": 12, "text": "while front_ is_blocked ():", "cluster_label": 0, "indentation": 1}, {"x": 535.0, "y": 1496.0, "w": 499.0, "h": 73.0, "line_num": 13, "text": "turn-around()", "cluster_label": 1, "indentation": 2}, {"x": 383.0, "y": 1596.0, "w": 894.0, "h": 78.0, "line_num": 14, "text": "while front_is_clear () :", "cluster_label": 0, "indentation": 1}, {"x": 552.0, "y": 1707.0, "w": 250.0, "h": 58.0, "line_num": 15, "text": "move ( )", "cluster_label": 1, "indentation": 2}, {"x": 390.0, "y": 1799.0, "w": 515.0, "h": 65.0, "line_num": 16, "text": "next_tower ()", "cluster_label": 0, "indentation": 1}, {"x": 203.0, "y": 1989.0, "w": 741.0, "h": 72.0, "line_num": 17, "text": "det turn-around ():", "cluster_label": 2, "indentation": 0}, {"x": 395.0, "y": 2088.0, "w": 721.0, "h": 72.0, "line_num": 18, "text": "for i in range (2) :", "cluster_label": 0, "indentation": 1}, {"x": 571.0, "y": 2182.0, "w": 411.0, "h": 73.0, "line_num": 19, "text": "turn-left ( )", "cluster_label": 1, "indentation": 2}, {"x": 196.0, "y": 2379.0, "w": 102.0, "h": 72.0, "line_num": 20, "text": "det", "cluster_label": 2, "indentation": 0}, {"x": 381.0, "y": 2383.0, "w": 559.0, "h": 70.0, "line_num": 21, "text": "next_tower ():", "cluster_label": 0, "indentation": 1}, {"x": 395.0, "y": 2480.0, "w": 822.0, "h": 84.0, "line_num": 22, "text": "if right_is_clean ():", "cluster_label": 0, "indentation": 1}, {"x": 577.0, "y": 2580.0, "w": 464.0, "h": 76.0, "line_num": 23, "text": "turn-right ( )", "cluster_label": 1, "indentation": 2}, {"x": 576.0, "y": 2689.0, "w": 246.0, "h": 55.0, "line_num": 24, "text": "move ()", "cluster_label": 1, "indentation": 2}, {"x": 591.0, "y": 2775.0, "w": 468.0, "h": 82.0, "line_num": 25, "text": "turn-right ()", "cluster_label": 1, "indentation": 2}, {"x": 388.0, "y": 2880.0, "w": 178.0, "h": 60.0, "line_num": 26, "text": "else :", "cluster_label": 0, "indentation": 1}, {"x": 584.0, "y": 2974.0, "w": 536.0, "h": 75.0, "line_num": 27, "text": "turn-around ()", "cluster_label": 1, "indentation": 2}, {"x": 590.0, "y": 3072.0, "w": 888.0, "h": 79.0, "line_num": 28, "text": "while front_is_dear ():", "cluster_label": 1, "indentation": 2}, {"x": 776.0, "y": 3179.0, "w": 249.0, "h": 64.0, "line_num": 29, "text": "move( )", "cluster_label": 3, "indentation": 3}, {"x": 193.0, "y": 3365.0, "w": 686.0, "h": 85.0, "line_num": 30, "text": "def turn-right ():", "cluster_label": 2, "indentation": 0}, {"x": 405.0, "y": 3462.0, "w": 679.0, "h": 83.0, "line_num": 31, "text": "for i in range (3):", "cluster_label": 0, "indentation": 1}, {"x": 590.0, "y": 3562.0, "w": 428.0, "h": 76.0, "line_num": 32, "text": "turn_left ()", "cluster_label": 1, "indentation": 2}, {"x": 870.0, "y": 3751.0, "w": 1.0, "h": 3.0, "line_num": 33, "text": "-", "cluster_label": 3, "indentation": 3}, {"x": 204.0, "y": 3762.0, "w": 56.0, "h": 82.0, "line_num": 34, "text": "if", "cluster_label": 2, "indentation": 0}, {"x": 297.0, "y": 3785.0, "w": 560.0, "h": 59.0, "line_num": 35, "text": "- name _ = =", "cluster_label": 2, "indentation": 0}, {"x": 955.0, "y": 3749.0, "w": 352.0, "h": 114.0, "line_num": 36, "text": "main _'", "cluster_label": 3, "indentation": 3}, {"x": 416.0, "y": 3848.0, "w": 272.0, "h": 68.0, "line_num": 37, "text": "main ()", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 100, "prompting_method": "cot-test5", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    while front_is_clear():\n        fill_tower()\n\ndef fill_tower():\n    while front_is_clear():\n        put_beeper()\n        move()\n    put_beeper()\n    column_return()\n\ndef column_return():\n    while front_is_blocked():\n        turn_around()\n    while front_is_clear():\n        move()\n    next_tower()\n\ndef turn_around():\n    for i in range(2):\n        turn_left()\n\ndef next_tower():\n    if right_is_clear():\n        turn_right()\n        move()\n        turn_right()\n    else:\n        turn_around()\n        while front_is_clear():\n            move()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 3}, {"image_id": 40, "image_height": 3936, "image_width": 1980, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 214.0, "y": 72.0, "w": 1087.0, "h": 73.0, "line_num": 1, "text": "from kanel stanfordkard import *"}, {"x": 212.0, "y": 254.0, "w": 422.0, "h": 71.0, "line_num": 2, "text": "det main ():"}, {"x": 368.0, "y": 346.0, "w": 840.0, "h": 69.0, "line_num": 3, "text": "while front_is_clear ():"}, {"x": 514.0, "y": 426.0, "w": 405.0, "h": 75.0, "line_num": 4, "text": "bill_tower ( )"}, {"x": 206.0, "y": 634.0, "w": 618.0, "h": 76.0, "line_num": 5, "text": "det fill_tower():"}, {"x": 376.0, "y": 728.0, "w": 864.0, "h": 70.0, "line_num": 6, "text": "while front_is_clean ():"}, {"x": 517.0, "y": 821.0, "w": 461.0, "h": 72.0, "line_num": 7, "text": "put-beeper ()"}, {"x": 524.0, "y": 922.0, "w": 237.0, "h": 58.0, "line_num": 8, "text": "move ()"}, {"x": 372.0, "y": 1017.0, "w": 450.0, "h": 71.0, "line_num": 9, "text": "put_beeper ()"}, {"x": 381.0, "y": 1109.0, "w": 607.0, "h": 68.0, "line_num": 10, "text": "column_return ()"}, {"x": 196.0, "y": 1293.0, "w": 814.0, "h": 84.0, "line_num": 11, "text": "def column_return ():"}, {"x": 381.0, "y": 1399.0, "w": 969.0, "h": 74.0, "line_num": 12, "text": "while front_ is_blocked ():"}, {"x": 535.0, "y": 1496.0, "w": 499.0, "h": 73.0, "line_num": 13, "text": "turn-around()"}, {"x": 383.0, "y": 1596.0, "w": 894.0, "h": 78.0, "line_num": 14, "text": "while front_is_clear () :"}, {"x": 552.0, "y": 1707.0, "w": 250.0, "h": 58.0, "line_num": 15, "text": "move ( )"}, {"x": 390.0, "y": 1799.0, "w": 515.0, "h": 65.0, "line_num": 16, "text": "next_tower ()"}, {"x": 203.0, "y": 1989.0, "w": 741.0, "h": 72.0, "line_num": 17, "text": "det turn-around ():"}, {"x": 395.0, "y": 2088.0, "w": 721.0, "h": 72.0, "line_num": 18, "text": "for i in range (2) :"}, {"x": 571.0, "y": 2182.0, "w": 411.0, "h": 73.0, "line_num": 19, "text": "turn-left ( )"}, {"x": 196.0, "y": 2379.0, "w": 102.0, "h": 72.0, "line_num": 20, "text": "det"}, {"x": 381.0, "y": 2383.0, "w": 559.0, "h": 70.0, "line_num": 21, "text": "next_tower ():"}, {"x": 395.0, "y": 2480.0, "w": 822.0, "h": 84.0, "line_num": 22, "text": "if right_is_clean ():"}, {"x": 577.0, "y": 2580.0, "w": 464.0, "h": 76.0, "line_num": 23, "text": "turn-right ( )"}, {"x": 576.0, "y": 2689.0, "w": 246.0, "h": 55.0, "line_num": 24, "text": "move ()"}, {"x": 591.0, "y": 2775.0, "w": 468.0, "h": 82.0, "line_num": 25, "text": "turn-right ()"}, {"x": 388.0, "y": 2880.0, "w": 178.0, "h": 60.0, "line_num": 26, "text": "else :"}, {"x": 584.0, "y": 2974.0, "w": 536.0, "h": 75.0, "line_num": 27, "text": "turn-around ()"}, {"x": 590.0, "y": 3072.0, "w": 888.0, "h": 79.0, "line_num": 28, "text": "while front_is_dear ():"}, {"x": 776.0, "y": 3179.0, "w": 249.0, "h": 64.0, "line_num": 29, "text": "move( )"}, {"x": 193.0, "y": 3365.0, "w": 686.0, "h": 85.0, "line_num": 30, "text": "def turn-right ():"}, {"x": 405.0, "y": 3462.0, "w": 679.0, "h": 83.0, "line_num": 31, "text": "for i in range (3):"}, {"x": 590.0, "y": 3562.0, "w": 428.0, "h": 76.0, "line_num": 32, "text": "turn_left ()"}, {"x": 870.0, "y": 3751.0, "w": 1.0, "h": 3.0, "line_num": 33, "text": "-"}, {"x": 204.0, "y": 3762.0, "w": 56.0, "h": 82.0, "line_num": 34, "text": "if"}, {"x": 297.0, "y": 3785.0, "w": 560.0, "h": 59.0, "line_num": 35, "text": "- name _ = ="}, {"x": 955.0, "y": 3749.0, "w": 352.0, "h": 114.0, "line_num": 36, "text": "main _'"}, {"x": 416.0, "y": 3848.0, "w": 272.0, "h": 68.0, "line_num": 37, "text": "main ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 106.98648648648648, "ir_algo_output_code": "from kanel stanfordkard import *\ndet main ():\n    while front_is_clear ():\n        bill_tower ( )\ndet fill_tower():\n    while front_is_clean ():\n        put-beeper ()\n        move ()\n    put_beeper ()\n    column_return ()\ndef column_return ():\n    while front_ is_blocked ():\n        turn-around()\n    while front_is_clear () :\n        move ( )\n    next_tower ()\ndet turn-around ():\n    for i in range (2) :\n        turn-left ( )\ndet\n    next_tower ():\n    if right_is_clean ():\n        turn-right ( )\n        move ()\n        turn-right ()\n    else :\n        turn-around ()\n        while front_is_dear ():\n            move( )\ndef turn-right ():\n    for i in range (3):\n        turn_left ()\n            -\nif\n- name _ = =\n            main _'\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 214.0, "y": 72.0, "w": 1087.0, "h": 73.0, "line_num": 1, "text": "from kanel stanfordkard import *", "cluster_label": 2, "indentation": 0}, {"x": 212.0, "y": 254.0, "w": 422.0, "h": 71.0, "line_num": 2, "text": "det main ():", "cluster_label": 2, "indentation": 0}, {"x": 368.0, "y": 346.0, "w": 840.0, "h": 69.0, "line_num": 3, "text": "while front_is_clear ():", "cluster_label": 0, "indentation": 1}, {"x": 514.0, "y": 426.0, "w": 405.0, "h": 75.0, "line_num": 4, "text": "bill_tower ( )", "cluster_label": 1, "indentation": 2}, {"x": 206.0, "y": 634.0, "w": 618.0, "h": 76.0, "line_num": 5, "text": "det fill_tower():", "cluster_label": 2, "indentation": 0}, {"x": 376.0, "y": 728.0, "w": 864.0, "h": 70.0, "line_num": 6, "text": "while front_is_clean ():", "cluster_label": 0, "indentation": 1}, {"x": 517.0, "y": 821.0, "w": 461.0, "h": 72.0, "line_num": 7, "text": "put-beeper ()", "cluster_label": 1, "indentation": 2}, {"x": 524.0, "y": 922.0, "w": 237.0, "h": 58.0, "line_num": 8, "text": "move ()", "cluster_label": 1, "indentation": 2}, {"x": 372.0, "y": 1017.0, "w": 450.0, "h": 71.0, "line_num": 9, "text": "put_beeper ()", "cluster_label": 0, "indentation": 1}, {"x": 381.0, "y": 1109.0, "w": 607.0, "h": 68.0, "line_num": 10, "text": "column_return ()", "cluster_label": 0, "indentation": 1}, {"x": 196.0, "y": 1293.0, "w": 814.0, "h": 84.0, "line_num": 11, "text": "def column_return ():", "cluster_label": 2, "indentation": 0}, {"x": 381.0, "y": 1399.0, "w": 969.0, "h": 74.0, "line_num": 12, "text": "while front_ is_blocked ():", "cluster_label": 0, "indentation": 1}, {"x": 535.0, "y": 1496.0, "w": 499.0, "h": 73.0, "line_num": 13, "text": "turn-around()", "cluster_label": 1, "indentation": 2}, {"x": 383.0, "y": 1596.0, "w": 894.0, "h": 78.0, "line_num": 14, "text": "while front_is_clear () :", "cluster_label": 0, "indentation": 1}, {"x": 552.0, "y": 1707.0, "w": 250.0, "h": 58.0, "line_num": 15, "text": "move ( )", "cluster_label": 1, "indentation": 2}, {"x": 390.0, "y": 1799.0, "w": 515.0, "h": 65.0, "line_num": 16, "text": "next_tower ()", "cluster_label": 0, "indentation": 1}, {"x": 203.0, "y": 1989.0, "w": 741.0, "h": 72.0, "line_num": 17, "text": "det turn-around ():", "cluster_label": 2, "indentation": 0}, {"x": 395.0, "y": 2088.0, "w": 721.0, "h": 72.0, "line_num": 18, "text": "for i in range (2) :", "cluster_label": 0, "indentation": 1}, {"x": 571.0, "y": 2182.0, "w": 411.0, "h": 73.0, "line_num": 19, "text": "turn-left ( )", "cluster_label": 1, "indentation": 2}, {"x": 196.0, "y": 2379.0, "w": 102.0, "h": 72.0, "line_num": 20, "text": "det", "cluster_label": 2, "indentation": 0}, {"x": 381.0, "y": 2383.0, "w": 559.0, "h": 70.0, "line_num": 21, "text": "next_tower ():", "cluster_label": 0, "indentation": 1}, {"x": 395.0, "y": 2480.0, "w": 822.0, "h": 84.0, "line_num": 22, "text": "if right_is_clean ():", "cluster_label": 0, "indentation": 1}, {"x": 577.0, "y": 2580.0, "w": 464.0, "h": 76.0, "line_num": 23, "text": "turn-right ( )", "cluster_label": 1, "indentation": 2}, {"x": 576.0, "y": 2689.0, "w": 246.0, "h": 55.0, "line_num": 24, "text": "move ()", "cluster_label": 1, "indentation": 2}, {"x": 591.0, "y": 2775.0, "w": 468.0, "h": 82.0, "line_num": 25, "text": "turn-right ()", "cluster_label": 1, "indentation": 2}, {"x": 388.0, "y": 2880.0, "w": 178.0, "h": 60.0, "line_num": 26, "text": "else :", "cluster_label": 0, "indentation": 1}, {"x": 584.0, "y": 2974.0, "w": 536.0, "h": 75.0, "line_num": 27, "text": "turn-around ()", "cluster_label": 1, "indentation": 2}, {"x": 590.0, "y": 3072.0, "w": 888.0, "h": 79.0, "line_num": 28, "text": "while front_is_dear ():", "cluster_label": 1, "indentation": 2}, {"x": 776.0, "y": 3179.0, "w": 249.0, "h": 64.0, "line_num": 29, "text": "move( )", "cluster_label": 3, "indentation": 3}, {"x": 193.0, "y": 3365.0, "w": 686.0, "h": 85.0, "line_num": 30, "text": "def turn-right ():", "cluster_label": 2, "indentation": 0}, {"x": 405.0, "y": 3462.0, "w": 679.0, "h": 83.0, "line_num": 31, "text": "for i in range (3):", "cluster_label": 0, "indentation": 1}, {"x": 590.0, "y": 3562.0, "w": 428.0, "h": 76.0, "line_num": 32, "text": "turn_left ()", "cluster_label": 1, "indentation": 2}, {"x": 870.0, "y": 3751.0, "w": 1.0, "h": 3.0, "line_num": 33, "text": "-", "cluster_label": 3, "indentation": 3}, {"x": 204.0, "y": 3762.0, "w": 56.0, "h": 82.0, "line_num": 34, "text": "if", "cluster_label": 2, "indentation": 0}, {"x": 297.0, "y": 3785.0, "w": 560.0, "h": 59.0, "line_num": 35, "text": "- name _ = =", "cluster_label": 2, "indentation": 0}, {"x": 955.0, "y": 3749.0, "w": 352.0, "h": 114.0, "line_num": 36, "text": "main _'", "cluster_label": 3, "indentation": 3}, {"x": 416.0, "y": 3848.0, "w": 272.0, "h": 68.0, "line_num": 37, "text": "main ()", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 100, "prompting_method": "simple-test2", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    while front_is_clear():\n        fill_tower()\n\ndef fill_tower():\n    while front_is_clear():\n        put_beeper()\n        move()\n    put_beeper()\n    column_return()\n\ndef column_return():\n    while front_is_blocked():\n        turn_around()\n    while front_is_clear():\n        move()\n    next_tower()\n\ndef turn_around():\n    for i in range(2):\n        turn_left()\n\ndef next_tower():\n    if right_is_clear():\n        turn_right()\n        move()\n        turn_right()\n    else:\n        turn_around()\n        while front_is_clear():\n            move()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 3}, {"image_id": 40, "image_height": 3936, "image_width": 1980, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 214.0, "y": 72.0, "w": 1087.0, "h": 73.0, "line_num": 1, "text": "from kanel stanfordkard import *"}, {"x": 212.0, "y": 254.0, "w": 422.0, "h": 71.0, "line_num": 2, "text": "det main ():"}, {"x": 368.0, "y": 346.0, "w": 840.0, "h": 69.0, "line_num": 3, "text": "while front_is_clear ():"}, {"x": 514.0, "y": 426.0, "w": 405.0, "h": 75.0, "line_num": 4, "text": "bill_tower ( )"}, {"x": 206.0, "y": 634.0, "w": 618.0, "h": 76.0, "line_num": 5, "text": "det fill_tower():"}, {"x": 376.0, "y": 728.0, "w": 864.0, "h": 70.0, "line_num": 6, "text": "while front_is_clean ():"}, {"x": 517.0, "y": 821.0, "w": 461.0, "h": 72.0, "line_num": 7, "text": "put-beeper ()"}, {"x": 524.0, "y": 922.0, "w": 237.0, "h": 58.0, "line_num": 8, "text": "move ()"}, {"x": 372.0, "y": 1017.0, "w": 450.0, "h": 71.0, "line_num": 9, "text": "put_beeper ()"}, {"x": 381.0, "y": 1109.0, "w": 607.0, "h": 68.0, "line_num": 10, "text": "column_return ()"}, {"x": 196.0, "y": 1293.0, "w": 814.0, "h": 84.0, "line_num": 11, "text": "def column_return ():"}, {"x": 381.0, "y": 1399.0, "w": 969.0, "h": 74.0, "line_num": 12, "text": "while front_ is_blocked ():"}, {"x": 535.0, "y": 1496.0, "w": 499.0, "h": 73.0, "line_num": 13, "text": "turn-around()"}, {"x": 383.0, "y": 1596.0, "w": 894.0, "h": 78.0, "line_num": 14, "text": "while front_is_clear () :"}, {"x": 552.0, "y": 1707.0, "w": 250.0, "h": 58.0, "line_num": 15, "text": "move ( )"}, {"x": 390.0, "y": 1799.0, "w": 515.0, "h": 65.0, "line_num": 16, "text": "next_tower ()"}, {"x": 203.0, "y": 1989.0, "w": 741.0, "h": 72.0, "line_num": 17, "text": "det turn-around ():"}, {"x": 395.0, "y": 2088.0, "w": 721.0, "h": 72.0, "line_num": 18, "text": "for i in range (2) :"}, {"x": 571.0, "y": 2182.0, "w": 411.0, "h": 73.0, "line_num": 19, "text": "turn-left ( )"}, {"x": 196.0, "y": 2379.0, "w": 102.0, "h": 72.0, "line_num": 20, "text": "det"}, {"x": 381.0, "y": 2383.0, "w": 559.0, "h": 70.0, "line_num": 21, "text": "next_tower ():"}, {"x": 395.0, "y": 2480.0, "w": 822.0, "h": 84.0, "line_num": 22, "text": "if right_is_clean ():"}, {"x": 577.0, "y": 2580.0, "w": 464.0, "h": 76.0, "line_num": 23, "text": "turn-right ( )"}, {"x": 576.0, "y": 2689.0, "w": 246.0, "h": 55.0, "line_num": 24, "text": "move ()"}, {"x": 591.0, "y": 2775.0, "w": 468.0, "h": 82.0, "line_num": 25, "text": "turn-right ()"}, {"x": 388.0, "y": 2880.0, "w": 178.0, "h": 60.0, "line_num": 26, "text": "else :"}, {"x": 584.0, "y": 2974.0, "w": 536.0, "h": 75.0, "line_num": 27, "text": "turn-around ()"}, {"x": 590.0, "y": 3072.0, "w": 888.0, "h": 79.0, "line_num": 28, "text": "while front_is_dear ():"}, {"x": 776.0, "y": 3179.0, "w": 249.0, "h": 64.0, "line_num": 29, "text": "move( )"}, {"x": 193.0, "y": 3365.0, "w": 686.0, "h": 85.0, "line_num": 30, "text": "def turn-right ():"}, {"x": 405.0, "y": 3462.0, "w": 679.0, "h": 83.0, "line_num": 31, "text": "for i in range (3):"}, {"x": 590.0, "y": 3562.0, "w": 428.0, "h": 76.0, "line_num": 32, "text": "turn_left ()"}, {"x": 870.0, "y": 3751.0, "w": 1.0, "h": 3.0, "line_num": 33, "text": "-"}, {"x": 204.0, "y": 3762.0, "w": 56.0, "h": 82.0, "line_num": 34, "text": "if"}, {"x": 297.0, "y": 3785.0, "w": 560.0, "h": 59.0, "line_num": 35, "text": "- name _ = ="}, {"x": 955.0, "y": 3749.0, "w": 352.0, "h": 114.0, "line_num": 36, "text": "main _'"}, {"x": 416.0, "y": 3848.0, "w": 272.0, "h": 68.0, "line_num": 37, "text": "main ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 106.98648648648648, "ir_algo_output_code": "from kanel stanfordkard import *\ndet main ():\n    while front_is_clear ():\n        bill_tower ( )\ndet fill_tower():\n    while front_is_clean ():\n        put-beeper ()\n        move ()\n    put_beeper ()\n    column_return ()\ndef column_return ():\n    while front_ is_blocked ():\n        turn-around()\n    while front_is_clear () :\n        move ( )\n    next_tower ()\ndet turn-around ():\n    for i in range (2) :\n        turn-left ( )\ndet\n    next_tower ():\n    if right_is_clean ():\n        turn-right ( )\n        move ()\n        turn-right ()\n    else :\n        turn-around ()\n        while front_is_dear ():\n            move( )\ndef turn-right ():\n    for i in range (3):\n        turn_left ()\n            -\nif\n- name _ = =\n            main _'\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 214.0, "y": 72.0, "w": 1087.0, "h": 73.0, "line_num": 1, "text": "from kanel stanfordkard import *", "cluster_label": 2, "indentation": 0}, {"x": 212.0, "y": 254.0, "w": 422.0, "h": 71.0, "line_num": 2, "text": "det main ():", "cluster_label": 2, "indentation": 0}, {"x": 368.0, "y": 346.0, "w": 840.0, "h": 69.0, "line_num": 3, "text": "while front_is_clear ():", "cluster_label": 0, "indentation": 1}, {"x": 514.0, "y": 426.0, "w": 405.0, "h": 75.0, "line_num": 4, "text": "bill_tower ( )", "cluster_label": 1, "indentation": 2}, {"x": 206.0, "y": 634.0, "w": 618.0, "h": 76.0, "line_num": 5, "text": "det fill_tower():", "cluster_label": 2, "indentation": 0}, {"x": 376.0, "y": 728.0, "w": 864.0, "h": 70.0, "line_num": 6, "text": "while front_is_clean ():", "cluster_label": 0, "indentation": 1}, {"x": 517.0, "y": 821.0, "w": 461.0, "h": 72.0, "line_num": 7, "text": "put-beeper ()", "cluster_label": 1, "indentation": 2}, {"x": 524.0, "y": 922.0, "w": 237.0, "h": 58.0, "line_num": 8, "text": "move ()", "cluster_label": 1, "indentation": 2}, {"x": 372.0, "y": 1017.0, "w": 450.0, "h": 71.0, "line_num": 9, "text": "put_beeper ()", "cluster_label": 0, "indentation": 1}, {"x": 381.0, "y": 1109.0, "w": 607.0, "h": 68.0, "line_num": 10, "text": "column_return ()", "cluster_label": 0, "indentation": 1}, {"x": 196.0, "y": 1293.0, "w": 814.0, "h": 84.0, "line_num": 11, "text": "def column_return ():", "cluster_label": 2, "indentation": 0}, {"x": 381.0, "y": 1399.0, "w": 969.0, "h": 74.0, "line_num": 12, "text": "while front_ is_blocked ():", "cluster_label": 0, "indentation": 1}, {"x": 535.0, "y": 1496.0, "w": 499.0, "h": 73.0, "line_num": 13, "text": "turn-around()", "cluster_label": 1, "indentation": 2}, {"x": 383.0, "y": 1596.0, "w": 894.0, "h": 78.0, "line_num": 14, "text": "while front_is_clear () :", "cluster_label": 0, "indentation": 1}, {"x": 552.0, "y": 1707.0, "w": 250.0, "h": 58.0, "line_num": 15, "text": "move ( )", "cluster_label": 1, "indentation": 2}, {"x": 390.0, "y": 1799.0, "w": 515.0, "h": 65.0, "line_num": 16, "text": "next_tower ()", "cluster_label": 0, "indentation": 1}, {"x": 203.0, "y": 1989.0, "w": 741.0, "h": 72.0, "line_num": 17, "text": "det turn-around ():", "cluster_label": 2, "indentation": 0}, {"x": 395.0, "y": 2088.0, "w": 721.0, "h": 72.0, "line_num": 18, "text": "for i in range (2) :", "cluster_label": 0, "indentation": 1}, {"x": 571.0, "y": 2182.0, "w": 411.0, "h": 73.0, "line_num": 19, "text": "turn-left ( )", "cluster_label": 1, "indentation": 2}, {"x": 196.0, "y": 2379.0, "w": 102.0, "h": 72.0, "line_num": 20, "text": "det", "cluster_label": 2, "indentation": 0}, {"x": 381.0, "y": 2383.0, "w": 559.0, "h": 70.0, "line_num": 21, "text": "next_tower ():", "cluster_label": 0, "indentation": 1}, {"x": 395.0, "y": 2480.0, "w": 822.0, "h": 84.0, "line_num": 22, "text": "if right_is_clean ():", "cluster_label": 0, "indentation": 1}, {"x": 577.0, "y": 2580.0, "w": 464.0, "h": 76.0, "line_num": 23, "text": "turn-right ( )", "cluster_label": 1, "indentation": 2}, {"x": 576.0, "y": 2689.0, "w": 246.0, "h": 55.0, "line_num": 24, "text": "move ()", "cluster_label": 1, "indentation": 2}, {"x": 591.0, "y": 2775.0, "w": 468.0, "h": 82.0, "line_num": 25, "text": "turn-right ()", "cluster_label": 1, "indentation": 2}, {"x": 388.0, "y": 2880.0, "w": 178.0, "h": 60.0, "line_num": 26, "text": "else :", "cluster_label": 0, "indentation": 1}, {"x": 584.0, "y": 2974.0, "w": 536.0, "h": 75.0, "line_num": 27, "text": "turn-around ()", "cluster_label": 1, "indentation": 2}, {"x": 590.0, "y": 3072.0, "w": 888.0, "h": 79.0, "line_num": 28, "text": "while front_is_dear ():", "cluster_label": 1, "indentation": 2}, {"x": 776.0, "y": 3179.0, "w": 249.0, "h": 64.0, "line_num": 29, "text": "move( )", "cluster_label": 3, "indentation": 3}, {"x": 193.0, "y": 3365.0, "w": 686.0, "h": 85.0, "line_num": 30, "text": "def turn-right ():", "cluster_label": 2, "indentation": 0}, {"x": 405.0, "y": 3462.0, "w": 679.0, "h": 83.0, "line_num": 31, "text": "for i in range (3):", "cluster_label": 0, "indentation": 1}, {"x": 590.0, "y": 3562.0, "w": 428.0, "h": 76.0, "line_num": 32, "text": "turn_left ()", "cluster_label": 1, "indentation": 2}, {"x": 870.0, "y": 3751.0, "w": 1.0, "h": 3.0, "line_num": 33, "text": "-", "cluster_label": 3, "indentation": 3}, {"x": 204.0, "y": 3762.0, "w": 56.0, "h": 82.0, "line_num": 34, "text": "if", "cluster_label": 2, "indentation": 0}, {"x": 297.0, "y": 3785.0, "w": 560.0, "h": 59.0, "line_num": 35, "text": "- name _ = =", "cluster_label": 2, "indentation": 0}, {"x": 955.0, "y": 3749.0, "w": 352.0, "h": 114.0, "line_num": 36, "text": "main _'", "cluster_label": 3, "indentation": 3}, {"x": 416.0, "y": 3848.0, "w": 272.0, "h": 68.0, "line_num": 37, "text": "main ()", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 100, "prompting_method": "simple-test3", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    while front_is_clear():\n        fill_tower()\n\ndef fill_tower():\n    while front_is_clear():\n        put_beeper()\n        move()\n    put_beeper()\n    column_return()\n\ndef column_return():\n    while front_is_blocked():\n        turn_around()\n    while front_is_clear():\n        move()\n    next_tower()\n\ndef turn_around():\n    for i in range(2):\n        turn_left()\n\ndef next_tower():\n    if right_is_clear():\n        turn_right()\n        move()\n        turn_right()\n    else:\n        turn_around()\n        while front_is_clear():\n            move()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 3}, {"image_id": 40, "image_height": 3936, "image_width": 1980, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 214.0, "y": 72.0, "w": 1087.0, "h": 73.0, "line_num": 1, "text": "from kanel stanfordkard import *"}, {"x": 212.0, "y": 254.0, "w": 422.0, "h": 71.0, "line_num": 2, "text": "det main ():"}, {"x": 368.0, "y": 346.0, "w": 840.0, "h": 69.0, "line_num": 3, "text": "while front_is_clear ():"}, {"x": 514.0, "y": 426.0, "w": 405.0, "h": 75.0, "line_num": 4, "text": "bill_tower ( )"}, {"x": 206.0, "y": 634.0, "w": 618.0, "h": 76.0, "line_num": 5, "text": "det fill_tower():"}, {"x": 376.0, "y": 728.0, "w": 864.0, "h": 70.0, "line_num": 6, "text": "while front_is_clean ():"}, {"x": 517.0, "y": 821.0, "w": 461.0, "h": 72.0, "line_num": 7, "text": "put-beeper ()"}, {"x": 524.0, "y": 922.0, "w": 237.0, "h": 58.0, "line_num": 8, "text": "move ()"}, {"x": 372.0, "y": 1017.0, "w": 450.0, "h": 71.0, "line_num": 9, "text": "put_beeper ()"}, {"x": 381.0, "y": 1109.0, "w": 607.0, "h": 68.0, "line_num": 10, "text": "column_return ()"}, {"x": 196.0, "y": 1293.0, "w": 814.0, "h": 84.0, "line_num": 11, "text": "def column_return ():"}, {"x": 381.0, "y": 1399.0, "w": 969.0, "h": 74.0, "line_num": 12, "text": "while front_ is_blocked ():"}, {"x": 535.0, "y": 1496.0, "w": 499.0, "h": 73.0, "line_num": 13, "text": "turn-around()"}, {"x": 383.0, "y": 1596.0, "w": 894.0, "h": 78.0, "line_num": 14, "text": "while front_is_clear () :"}, {"x": 552.0, "y": 1707.0, "w": 250.0, "h": 58.0, "line_num": 15, "text": "move ( )"}, {"x": 390.0, "y": 1799.0, "w": 515.0, "h": 65.0, "line_num": 16, "text": "next_tower ()"}, {"x": 203.0, "y": 1989.0, "w": 741.0, "h": 72.0, "line_num": 17, "text": "det turn-around ():"}, {"x": 395.0, "y": 2088.0, "w": 721.0, "h": 72.0, "line_num": 18, "text": "for i in range (2) :"}, {"x": 571.0, "y": 2182.0, "w": 411.0, "h": 73.0, "line_num": 19, "text": "turn-left ( )"}, {"x": 196.0, "y": 2379.0, "w": 102.0, "h": 72.0, "line_num": 20, "text": "det"}, {"x": 381.0, "y": 2383.0, "w": 559.0, "h": 70.0, "line_num": 21, "text": "next_tower ():"}, {"x": 395.0, "y": 2480.0, "w": 822.0, "h": 84.0, "line_num": 22, "text": "if right_is_clean ():"}, {"x": 577.0, "y": 2580.0, "w": 464.0, "h": 76.0, "line_num": 23, "text": "turn-right ( )"}, {"x": 576.0, "y": 2689.0, "w": 246.0, "h": 55.0, "line_num": 24, "text": "move ()"}, {"x": 591.0, "y": 2775.0, "w": 468.0, "h": 82.0, "line_num": 25, "text": "turn-right ()"}, {"x": 388.0, "y": 2880.0, "w": 178.0, "h": 60.0, "line_num": 26, "text": "else :"}, {"x": 584.0, "y": 2974.0, "w": 536.0, "h": 75.0, "line_num": 27, "text": "turn-around ()"}, {"x": 590.0, "y": 3072.0, "w": 888.0, "h": 79.0, "line_num": 28, "text": "while front_is_dear ():"}, {"x": 776.0, "y": 3179.0, "w": 249.0, "h": 64.0, "line_num": 29, "text": "move( )"}, {"x": 193.0, "y": 3365.0, "w": 686.0, "h": 85.0, "line_num": 30, "text": "def turn-right ():"}, {"x": 405.0, "y": 3462.0, "w": 679.0, "h": 83.0, "line_num": 31, "text": "for i in range (3):"}, {"x": 590.0, "y": 3562.0, "w": 428.0, "h": 76.0, "line_num": 32, "text": "turn_left ()"}, {"x": 870.0, "y": 3751.0, "w": 1.0, "h": 3.0, "line_num": 33, "text": "-"}, {"x": 204.0, "y": 3762.0, "w": 56.0, "h": 82.0, "line_num": 34, "text": "if"}, {"x": 297.0, "y": 3785.0, "w": 560.0, "h": 59.0, "line_num": 35, "text": "- name _ = ="}, {"x": 955.0, "y": 3749.0, "w": 352.0, "h": 114.0, "line_num": 36, "text": "main _'"}, {"x": 416.0, "y": 3848.0, "w": 272.0, "h": 68.0, "line_num": 37, "text": "main ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "from kanel stanfordkard import *\ndet main ():\n    while front_is_clear ():\n        bill_tower ( )\ndet fill_tower():\n    while front_is_clean ():\n        put-beeper ()\n        move ()\n    put_beeper ()\n    column_return ()\ndef column_return ():\n    while front_ is_blocked ():\n        turn-around()\n    while front_is_clear () :\n        move ( )\n    next_tower ()\ndet turn-around ():\n    for i in range (2) :\n        turn-left ( )\ndet\n    next_tower ():\n    if right_is_clean ():\n        turn-right ( )\n        move ()\n        turn-right ()\n    else :\n        turn-around ()\n        while front_is_dear ():\n            move( )\ndef turn-right ():\n    for i in range (3):\n        turn_left ()\n            -\nif\n    - name _ = =\n        main _'\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 214.0, "y": 72.0, "w": 1087.0, "h": 73.0, "line_num": 1, "text": "from kanel stanfordkard import *", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 212.0, "y": 254.0, "w": 422.0, "h": 71.0, "line_num": 2, "text": "det main ():", "delta": -2.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 368.0, "y": 346.0, "w": 840.0, "h": 69.0, "line_num": 3, "text": "while front_is_clear ():", "delta": 156.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 514.0, "y": 426.0, "w": 405.0, "h": 75.0, "line_num": 4, "text": "bill_tower ( )", "delta": 146.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 206.0, "y": 634.0, "w": 618.0, "h": 76.0, "line_num": 5, "text": "det fill_tower():", "delta": -308.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 376.0, "y": 728.0, "w": 864.0, "h": 70.0, "line_num": 6, "text": "while front_is_clean ():", "delta": 170.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 517.0, "y": 821.0, "w": 461.0, "h": 72.0, "line_num": 7, "text": "put-beeper ()", "delta": 141.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 524.0, "y": 922.0, "w": 237.0, "h": 58.0, "line_num": 8, "text": "move ()", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 372.0, "y": 1017.0, "w": 450.0, "h": 71.0, "line_num": 9, "text": "put_beeper ()", "delta": -152.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 381.0, "y": 1109.0, "w": 607.0, "h": 68.0, "line_num": 10, "text": "column_return ()", "delta": 9.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 196.0, "y": 1293.0, "w": 814.0, "h": 84.0, "line_num": 11, "text": "def column_return ():", "delta": -185.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 381.0, "y": 1399.0, "w": 969.0, "h": 74.0, "line_num": 12, "text": "while front_ is_blocked ():", "delta": 185.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 535.0, "y": 1496.0, "w": 499.0, "h": 73.0, "line_num": 13, "text": "turn-around()", "delta": 154.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 383.0, "y": 1596.0, "w": 894.0, "h": 78.0, "line_num": 14, "text": "while front_is_clear () :", "delta": -152.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 552.0, "y": 1707.0, "w": 250.0, "h": 58.0, "line_num": 15, "text": "move ( )", "delta": 169.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 390.0, "y": 1799.0, "w": 515.0, "h": 65.0, "line_num": 16, "text": "next_tower ()", "delta": -162.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 203.0, "y": 1989.0, "w": 741.0, "h": 72.0, "line_num": 17, "text": "det turn-around ():", "delta": -187.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 395.0, "y": 2088.0, "w": 721.0, "h": 72.0, "line_num": 18, "text": "for i in range (2) :", "delta": 192.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 571.0, "y": 2182.0, "w": 411.0, "h": 73.0, "line_num": 19, "text": "turn-left ( )", "delta": 176.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 196.0, "y": 2379.0, "w": 102.0, "h": 72.0, "line_num": 20, "text": "det", "delta": -375.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 381.0, "y": 2383.0, "w": 559.0, "h": 70.0, "line_num": 21, "text": "next_tower ():", "delta": 185.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 395.0, "y": 2480.0, "w": 822.0, "h": 84.0, "line_num": 22, "text": "if right_is_clean ():", "delta": 14.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 577.0, "y": 2580.0, "w": 464.0, "h": 76.0, "line_num": 23, "text": "turn-right ( )", "delta": 182.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 576.0, "y": 2689.0, "w": 246.0, "h": 55.0, "line_num": 24, "text": "move ()", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 591.0, "y": 2775.0, "w": 468.0, "h": 82.0, "line_num": 25, "text": "turn-right ()", "delta": 15.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 388.0, "y": 2880.0, "w": 178.0, "h": 60.0, "line_num": 26, "text": "else :", "delta": -203.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 584.0, "y": 2974.0, "w": 536.0, "h": 75.0, "line_num": 27, "text": "turn-around ()", "delta": 196.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 590.0, "y": 3072.0, "w": 888.0, "h": 79.0, "line_num": 28, "text": "while front_is_dear ():", "delta": 6.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 776.0, "y": 3179.0, "w": 249.0, "h": 64.0, "line_num": 29, "text": "move( )", "delta": 186.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 193.0, "y": 3365.0, "w": 686.0, "h": 85.0, "line_num": 30, "text": "def turn-right ():", "delta": -583.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 405.0, "y": 3462.0, "w": 679.0, "h": 83.0, "line_num": 31, "text": "for i in range (3):", "delta": 212.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 590.0, "y": 3562.0, "w": 428.0, "h": 76.0, "line_num": 32, "text": "turn_left ()", "delta": 185.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 870.0, "y": 3751.0, "w": 1.0, "h": 3.0, "line_num": 33, "text": "-", "delta": 280.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 204.0, "y": 3762.0, "w": 56.0, "h": 82.0, "line_num": 34, "text": "if", "delta": -666.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 297.0, "y": 3785.0, "w": 560.0, "h": 59.0, "line_num": 35, "text": "- name _ = =", "delta": 93.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 955.0, "y": 3749.0, "w": 352.0, "h": 114.0, "line_num": 36, "text": "main _'", "delta": 658.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 416.0, "y": 3848.0, "w": 272.0, "h": 68.0, "line_num": 37, "text": "main ()", "delta": -539.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 99, "prompting_method": "none", "lm_post_processed_code": "from kanel stanfordkard import *\ndet main ():\n    while front_is_clear ():\n        bill_tower ( )\ndet fill_tower():\n    while front_is_clean ():\n        put-beeper ()\n        move ()\n    put_beeper ()\n    column_return ()\ndef column_return ():\n    while front_ is_blocked ():\n        turn-around()\n    while front_is_clear () :\n        move ( )\n    next_tower ()\ndet turn-around ():\n    for i in range (2) :\n        turn-left ( )\ndet\n    next_tower ():\n    if right_is_clean ():\n        turn-right ( )\n        move ()\n        turn-right ()\n    else :\n        turn-around ()\n        while front_is_dear ():\n            move( )\ndef turn-right ():\n    for i in range (3):\n        turn_left ()\n            -\nif\n    - name _ = =\n        main _'\n    main ()\n", "lm_post_processed_edit_distance": 99}, {"image_id": 40, "image_height": 3936, "image_width": 1980, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 214.0, "y": 72.0, "w": 1087.0, "h": 73.0, "line_num": 1, "text": "from kanel stanfordkard import *"}, {"x": 212.0, "y": 254.0, "w": 422.0, "h": 71.0, "line_num": 2, "text": "det main ():"}, {"x": 368.0, "y": 346.0, "w": 840.0, "h": 69.0, "line_num": 3, "text": "while front_is_clear ():"}, {"x": 514.0, "y": 426.0, "w": 405.0, "h": 75.0, "line_num": 4, "text": "bill_tower ( )"}, {"x": 206.0, "y": 634.0, "w": 618.0, "h": 76.0, "line_num": 5, "text": "det fill_tower():"}, {"x": 376.0, "y": 728.0, "w": 864.0, "h": 70.0, "line_num": 6, "text": "while front_is_clean ():"}, {"x": 517.0, "y": 821.0, "w": 461.0, "h": 72.0, "line_num": 7, "text": "put-beeper ()"}, {"x": 524.0, "y": 922.0, "w": 237.0, "h": 58.0, "line_num": 8, "text": "move ()"}, {"x": 372.0, "y": 1017.0, "w": 450.0, "h": 71.0, "line_num": 9, "text": "put_beeper ()"}, {"x": 381.0, "y": 1109.0, "w": 607.0, "h": 68.0, "line_num": 10, "text": "column_return ()"}, {"x": 196.0, "y": 1293.0, "w": 814.0, "h": 84.0, "line_num": 11, "text": "def column_return ():"}, {"x": 381.0, "y": 1399.0, "w": 969.0, "h": 74.0, "line_num": 12, "text": "while front_ is_blocked ():"}, {"x": 535.0, "y": 1496.0, "w": 499.0, "h": 73.0, "line_num": 13, "text": "turn-around()"}, {"x": 383.0, "y": 1596.0, "w": 894.0, "h": 78.0, "line_num": 14, "text": "while front_is_clear () :"}, {"x": 552.0, "y": 1707.0, "w": 250.0, "h": 58.0, "line_num": 15, "text": "move ( )"}, {"x": 390.0, "y": 1799.0, "w": 515.0, "h": 65.0, "line_num": 16, "text": "next_tower ()"}, {"x": 203.0, "y": 1989.0, "w": 741.0, "h": 72.0, "line_num": 17, "text": "det turn-around ():"}, {"x": 395.0, "y": 2088.0, "w": 721.0, "h": 72.0, "line_num": 18, "text": "for i in range (2) :"}, {"x": 571.0, "y": 2182.0, "w": 411.0, "h": 73.0, "line_num": 19, "text": "turn-left ( )"}, {"x": 196.0, "y": 2379.0, "w": 102.0, "h": 72.0, "line_num": 20, "text": "det"}, {"x": 381.0, "y": 2383.0, "w": 559.0, "h": 70.0, "line_num": 21, "text": "next_tower ():"}, {"x": 395.0, "y": 2480.0, "w": 822.0, "h": 84.0, "line_num": 22, "text": "if right_is_clean ():"}, {"x": 577.0, "y": 2580.0, "w": 464.0, "h": 76.0, "line_num": 23, "text": "turn-right ( )"}, {"x": 576.0, "y": 2689.0, "w": 246.0, "h": 55.0, "line_num": 24, "text": "move ()"}, {"x": 591.0, "y": 2775.0, "w": 468.0, "h": 82.0, "line_num": 25, "text": "turn-right ()"}, {"x": 388.0, "y": 2880.0, "w": 178.0, "h": 60.0, "line_num": 26, "text": "else :"}, {"x": 584.0, "y": 2974.0, "w": 536.0, "h": 75.0, "line_num": 27, "text": "turn-around ()"}, {"x": 590.0, "y": 3072.0, "w": 888.0, "h": 79.0, "line_num": 28, "text": "while front_is_dear ():"}, {"x": 776.0, "y": 3179.0, "w": 249.0, "h": 64.0, "line_num": 29, "text": "move( )"}, {"x": 193.0, "y": 3365.0, "w": 686.0, "h": 85.0, "line_num": 30, "text": "def turn-right ():"}, {"x": 405.0, "y": 3462.0, "w": 679.0, "h": 83.0, "line_num": 31, "text": "for i in range (3):"}, {"x": 590.0, "y": 3562.0, "w": 428.0, "h": 76.0, "line_num": 32, "text": "turn_left ()"}, {"x": 870.0, "y": 3751.0, "w": 1.0, "h": 3.0, "line_num": 33, "text": "-"}, {"x": 204.0, "y": 3762.0, "w": 56.0, "h": 82.0, "line_num": 34, "text": "if"}, {"x": 297.0, "y": 3785.0, "w": 560.0, "h": 59.0, "line_num": 35, "text": "- name _ = ="}, {"x": 955.0, "y": 3749.0, "w": 352.0, "h": 114.0, "line_num": 36, "text": "main _'"}, {"x": 416.0, "y": 3848.0, "w": 272.0, "h": 68.0, "line_num": 37, "text": "main ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "from kanel stanfordkard import *\ndet main ():\n    while front_is_clear ():\n        bill_tower ( )\ndet fill_tower():\n    while front_is_clean ():\n        put-beeper ()\n        move ()\n    put_beeper ()\n    column_return ()\ndef column_return ():\n    while front_ is_blocked ():\n        turn-around()\n    while front_is_clear () :\n        move ( )\n    next_tower ()\ndet turn-around ():\n    for i in range (2) :\n        turn-left ( )\ndet\n    next_tower ():\n    if right_is_clean ():\n        turn-right ( )\n        move ()\n        turn-right ()\n    else :\n        turn-around ()\n        while front_is_dear ():\n            move( )\ndef turn-right ():\n    for i in range (3):\n        turn_left ()\n            -\nif\n    - name _ = =\n        main _'\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 214.0, "y": 72.0, "w": 1087.0, "h": 73.0, "line_num": 1, "text": "from kanel stanfordkard import *", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 212.0, "y": 254.0, "w": 422.0, "h": 71.0, "line_num": 2, "text": "det main ():", "delta": -2.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 368.0, "y": 346.0, "w": 840.0, "h": 69.0, "line_num": 3, "text": "while front_is_clear ():", "delta": 156.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 514.0, "y": 426.0, "w": 405.0, "h": 75.0, "line_num": 4, "text": "bill_tower ( )", "delta": 146.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 206.0, "y": 634.0, "w": 618.0, "h": 76.0, "line_num": 5, "text": "det fill_tower():", "delta": -308.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 376.0, "y": 728.0, "w": 864.0, "h": 70.0, "line_num": 6, "text": "while front_is_clean ():", "delta": 170.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 517.0, "y": 821.0, "w": 461.0, "h": 72.0, "line_num": 7, "text": "put-beeper ()", "delta": 141.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 524.0, "y": 922.0, "w": 237.0, "h": 58.0, "line_num": 8, "text": "move ()", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 372.0, "y": 1017.0, "w": 450.0, "h": 71.0, "line_num": 9, "text": "put_beeper ()", "delta": -152.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 381.0, "y": 1109.0, "w": 607.0, "h": 68.0, "line_num": 10, "text": "column_return ()", "delta": 9.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 196.0, "y": 1293.0, "w": 814.0, "h": 84.0, "line_num": 11, "text": "def column_return ():", "delta": -185.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 381.0, "y": 1399.0, "w": 969.0, "h": 74.0, "line_num": 12, "text": "while front_ is_blocked ():", "delta": 185.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 535.0, "y": 1496.0, "w": 499.0, "h": 73.0, "line_num": 13, "text": "turn-around()", "delta": 154.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 383.0, "y": 1596.0, "w": 894.0, "h": 78.0, "line_num": 14, "text": "while front_is_clear () :", "delta": -152.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 552.0, "y": 1707.0, "w": 250.0, "h": 58.0, "line_num": 15, "text": "move ( )", "delta": 169.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 390.0, "y": 1799.0, "w": 515.0, "h": 65.0, "line_num": 16, "text": "next_tower ()", "delta": -162.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 203.0, "y": 1989.0, "w": 741.0, "h": 72.0, "line_num": 17, "text": "det turn-around ():", "delta": -187.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 395.0, "y": 2088.0, "w": 721.0, "h": 72.0, "line_num": 18, "text": "for i in range (2) :", "delta": 192.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 571.0, "y": 2182.0, "w": 411.0, "h": 73.0, "line_num": 19, "text": "turn-left ( )", "delta": 176.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 196.0, "y": 2379.0, "w": 102.0, "h": 72.0, "line_num": 20, "text": "det", "delta": -375.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 381.0, "y": 2383.0, "w": 559.0, "h": 70.0, "line_num": 21, "text": "next_tower ():", "delta": 185.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 395.0, "y": 2480.0, "w": 822.0, "h": 84.0, "line_num": 22, "text": "if right_is_clean ():", "delta": 14.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 577.0, "y": 2580.0, "w": 464.0, "h": 76.0, "line_num": 23, "text": "turn-right ( )", "delta": 182.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 576.0, "y": 2689.0, "w": 246.0, "h": 55.0, "line_num": 24, "text": "move ()", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 591.0, "y": 2775.0, "w": 468.0, "h": 82.0, "line_num": 25, "text": "turn-right ()", "delta": 15.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 388.0, "y": 2880.0, "w": 178.0, "h": 60.0, "line_num": 26, "text": "else :", "delta": -203.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 584.0, "y": 2974.0, "w": 536.0, "h": 75.0, "line_num": 27, "text": "turn-around ()", "delta": 196.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 590.0, "y": 3072.0, "w": 888.0, "h": 79.0, "line_num": 28, "text": "while front_is_dear ():", "delta": 6.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 776.0, "y": 3179.0, "w": 249.0, "h": 64.0, "line_num": 29, "text": "move( )", "delta": 186.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 193.0, "y": 3365.0, "w": 686.0, "h": 85.0, "line_num": 30, "text": "def turn-right ():", "delta": -583.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 405.0, "y": 3462.0, "w": 679.0, "h": 83.0, "line_num": 31, "text": "for i in range (3):", "delta": 212.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 590.0, "y": 3562.0, "w": 428.0, "h": 76.0, "line_num": 32, "text": "turn_left ()", "delta": 185.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 870.0, "y": 3751.0, "w": 1.0, "h": 3.0, "line_num": 33, "text": "-", "delta": 280.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 204.0, "y": 3762.0, "w": 56.0, "h": 82.0, "line_num": 34, "text": "if", "delta": -666.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 297.0, "y": 3785.0, "w": 560.0, "h": 59.0, "line_num": 35, "text": "- name _ = =", "delta": 93.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 955.0, "y": 3749.0, "w": 352.0, "h": 114.0, "line_num": 36, "text": "main _'", "delta": 658.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 416.0, "y": 3848.0, "w": 272.0, "h": 68.0, "line_num": 37, "text": "main ()", "delta": -539.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 99, "prompting_method": "cot-test1", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    while front_is_clear():\n        fill_tower()\n\ndef fill_tower():\n    while front_is_clear():\n        put_beeper()\n        move()\n    put_beeper()\n    column_return()\n\ndef column_return():\n    while front_is_blocked():\n        turn_around()\n    while front_is_clear():\n        move()\n    next_tower()\n\ndef turn_around():\n    for i in range(2):\n        turn_left()\n\ndef next_tower():\n    if right_is_clear():\n        turn_right()\n        move()\n        turn_right()\n    else:\n        turn_around()\n        while front_is_clear():\n            move()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 3}, {"image_id": 40, "image_height": 3936, "image_width": 1980, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 214.0, "y": 72.0, "w": 1087.0, "h": 73.0, "line_num": 1, "text": "from kanel stanfordkard import *"}, {"x": 212.0, "y": 254.0, "w": 422.0, "h": 71.0, "line_num": 2, "text": "det main ():"}, {"x": 368.0, "y": 346.0, "w": 840.0, "h": 69.0, "line_num": 3, "text": "while front_is_clear ():"}, {"x": 514.0, "y": 426.0, "w": 405.0, "h": 75.0, "line_num": 4, "text": "bill_tower ( )"}, {"x": 206.0, "y": 634.0, "w": 618.0, "h": 76.0, "line_num": 5, "text": "det fill_tower():"}, {"x": 376.0, "y": 728.0, "w": 864.0, "h": 70.0, "line_num": 6, "text": "while front_is_clean ():"}, {"x": 517.0, "y": 821.0, "w": 461.0, "h": 72.0, "line_num": 7, "text": "put-beeper ()"}, {"x": 524.0, "y": 922.0, "w": 237.0, "h": 58.0, "line_num": 8, "text": "move ()"}, {"x": 372.0, "y": 1017.0, "w": 450.0, "h": 71.0, "line_num": 9, "text": "put_beeper ()"}, {"x": 381.0, "y": 1109.0, "w": 607.0, "h": 68.0, "line_num": 10, "text": "column_return ()"}, {"x": 196.0, "y": 1293.0, "w": 814.0, "h": 84.0, "line_num": 11, "text": "def column_return ():"}, {"x": 381.0, "y": 1399.0, "w": 969.0, "h": 74.0, "line_num": 12, "text": "while front_ is_blocked ():"}, {"x": 535.0, "y": 1496.0, "w": 499.0, "h": 73.0, "line_num": 13, "text": "turn-around()"}, {"x": 383.0, "y": 1596.0, "w": 894.0, "h": 78.0, "line_num": 14, "text": "while front_is_clear () :"}, {"x": 552.0, "y": 1707.0, "w": 250.0, "h": 58.0, "line_num": 15, "text": "move ( )"}, {"x": 390.0, "y": 1799.0, "w": 515.0, "h": 65.0, "line_num": 16, "text": "next_tower ()"}, {"x": 203.0, "y": 1989.0, "w": 741.0, "h": 72.0, "line_num": 17, "text": "det turn-around ():"}, {"x": 395.0, "y": 2088.0, "w": 721.0, "h": 72.0, "line_num": 18, "text": "for i in range (2) :"}, {"x": 571.0, "y": 2182.0, "w": 411.0, "h": 73.0, "line_num": 19, "text": "turn-left ( )"}, {"x": 196.0, "y": 2379.0, "w": 102.0, "h": 72.0, "line_num": 20, "text": "det"}, {"x": 381.0, "y": 2383.0, "w": 559.0, "h": 70.0, "line_num": 21, "text": "next_tower ():"}, {"x": 395.0, "y": 2480.0, "w": 822.0, "h": 84.0, "line_num": 22, "text": "if right_is_clean ():"}, {"x": 577.0, "y": 2580.0, "w": 464.0, "h": 76.0, "line_num": 23, "text": "turn-right ( )"}, {"x": 576.0, "y": 2689.0, "w": 246.0, "h": 55.0, "line_num": 24, "text": "move ()"}, {"x": 591.0, "y": 2775.0, "w": 468.0, "h": 82.0, "line_num": 25, "text": "turn-right ()"}, {"x": 388.0, "y": 2880.0, "w": 178.0, "h": 60.0, "line_num": 26, "text": "else :"}, {"x": 584.0, "y": 2974.0, "w": 536.0, "h": 75.0, "line_num": 27, "text": "turn-around ()"}, {"x": 590.0, "y": 3072.0, "w": 888.0, "h": 79.0, "line_num": 28, "text": "while front_is_dear ():"}, {"x": 776.0, "y": 3179.0, "w": 249.0, "h": 64.0, "line_num": 29, "text": "move( )"}, {"x": 193.0, "y": 3365.0, "w": 686.0, "h": 85.0, "line_num": 30, "text": "def turn-right ():"}, {"x": 405.0, "y": 3462.0, "w": 679.0, "h": 83.0, "line_num": 31, "text": "for i in range (3):"}, {"x": 590.0, "y": 3562.0, "w": 428.0, "h": 76.0, "line_num": 32, "text": "turn_left ()"}, {"x": 870.0, "y": 3751.0, "w": 1.0, "h": 3.0, "line_num": 33, "text": "-"}, {"x": 204.0, "y": 3762.0, "w": 56.0, "h": 82.0, "line_num": 34, "text": "if"}, {"x": 297.0, "y": 3785.0, "w": 560.0, "h": 59.0, "line_num": 35, "text": "- name _ = ="}, {"x": 955.0, "y": 3749.0, "w": 352.0, "h": 114.0, "line_num": 36, "text": "main _'"}, {"x": 416.0, "y": 3848.0, "w": 272.0, "h": 68.0, "line_num": 37, "text": "main ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "from kanel stanfordkard import *\ndet main ():\n    while front_is_clear ():\n        bill_tower ( )\ndet fill_tower():\n    while front_is_clean ():\n        put-beeper ()\n        move ()\n    put_beeper ()\n    column_return ()\ndef column_return ():\n    while front_ is_blocked ():\n        turn-around()\n    while front_is_clear () :\n        move ( )\n    next_tower ()\ndet turn-around ():\n    for i in range (2) :\n        turn-left ( )\ndet\n    next_tower ():\n    if right_is_clean ():\n        turn-right ( )\n        move ()\n        turn-right ()\n    else :\n        turn-around ()\n        while front_is_dear ():\n            move( )\ndef turn-right ():\n    for i in range (3):\n        turn_left ()\n            -\nif\n    - name _ = =\n        main _'\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 214.0, "y": 72.0, "w": 1087.0, "h": 73.0, "line_num": 1, "text": "from kanel stanfordkard import *", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 212.0, "y": 254.0, "w": 422.0, "h": 71.0, "line_num": 2, "text": "det main ():", "delta": -2.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 368.0, "y": 346.0, "w": 840.0, "h": 69.0, "line_num": 3, "text": "while front_is_clear ():", "delta": 156.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 514.0, "y": 426.0, "w": 405.0, "h": 75.0, "line_num": 4, "text": "bill_tower ( )", "delta": 146.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 206.0, "y": 634.0, "w": 618.0, "h": 76.0, "line_num": 5, "text": "det fill_tower():", "delta": -308.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 376.0, "y": 728.0, "w": 864.0, "h": 70.0, "line_num": 6, "text": "while front_is_clean ():", "delta": 170.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 517.0, "y": 821.0, "w": 461.0, "h": 72.0, "line_num": 7, "text": "put-beeper ()", "delta": 141.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 524.0, "y": 922.0, "w": 237.0, "h": 58.0, "line_num": 8, "text": "move ()", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 372.0, "y": 1017.0, "w": 450.0, "h": 71.0, "line_num": 9, "text": "put_beeper ()", "delta": -152.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 381.0, "y": 1109.0, "w": 607.0, "h": 68.0, "line_num": 10, "text": "column_return ()", "delta": 9.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 196.0, "y": 1293.0, "w": 814.0, "h": 84.0, "line_num": 11, "text": "def column_return ():", "delta": -185.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 381.0, "y": 1399.0, "w": 969.0, "h": 74.0, "line_num": 12, "text": "while front_ is_blocked ():", "delta": 185.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 535.0, "y": 1496.0, "w": 499.0, "h": 73.0, "line_num": 13, "text": "turn-around()", "delta": 154.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 383.0, "y": 1596.0, "w": 894.0, "h": 78.0, "line_num": 14, "text": "while front_is_clear () :", "delta": -152.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 552.0, "y": 1707.0, "w": 250.0, "h": 58.0, "line_num": 15, "text": "move ( )", "delta": 169.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 390.0, "y": 1799.0, "w": 515.0, "h": 65.0, "line_num": 16, "text": "next_tower ()", "delta": -162.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 203.0, "y": 1989.0, "w": 741.0, "h": 72.0, "line_num": 17, "text": "det turn-around ():", "delta": -187.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 395.0, "y": 2088.0, "w": 721.0, "h": 72.0, "line_num": 18, "text": "for i in range (2) :", "delta": 192.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 571.0, "y": 2182.0, "w": 411.0, "h": 73.0, "line_num": 19, "text": "turn-left ( )", "delta": 176.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 196.0, "y": 2379.0, "w": 102.0, "h": 72.0, "line_num": 20, "text": "det", "delta": -375.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 381.0, "y": 2383.0, "w": 559.0, "h": 70.0, "line_num": 21, "text": "next_tower ():", "delta": 185.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 395.0, "y": 2480.0, "w": 822.0, "h": 84.0, "line_num": 22, "text": "if right_is_clean ():", "delta": 14.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 577.0, "y": 2580.0, "w": 464.0, "h": 76.0, "line_num": 23, "text": "turn-right ( )", "delta": 182.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 576.0, "y": 2689.0, "w": 246.0, "h": 55.0, "line_num": 24, "text": "move ()", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 591.0, "y": 2775.0, "w": 468.0, "h": 82.0, "line_num": 25, "text": "turn-right ()", "delta": 15.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 388.0, "y": 2880.0, "w": 178.0, "h": 60.0, "line_num": 26, "text": "else :", "delta": -203.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 584.0, "y": 2974.0, "w": 536.0, "h": 75.0, "line_num": 27, "text": "turn-around ()", "delta": 196.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 590.0, "y": 3072.0, "w": 888.0, "h": 79.0, "line_num": 28, "text": "while front_is_dear ():", "delta": 6.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 776.0, "y": 3179.0, "w": 249.0, "h": 64.0, "line_num": 29, "text": "move( )", "delta": 186.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 193.0, "y": 3365.0, "w": 686.0, "h": 85.0, "line_num": 30, "text": "def turn-right ():", "delta": -583.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 405.0, "y": 3462.0, "w": 679.0, "h": 83.0, "line_num": 31, "text": "for i in range (3):", "delta": 212.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 590.0, "y": 3562.0, "w": 428.0, "h": 76.0, "line_num": 32, "text": "turn_left ()", "delta": 185.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 870.0, "y": 3751.0, "w": 1.0, "h": 3.0, "line_num": 33, "text": "-", "delta": 280.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 204.0, "y": 3762.0, "w": 56.0, "h": 82.0, "line_num": 34, "text": "if", "delta": -666.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 297.0, "y": 3785.0, "w": 560.0, "h": 59.0, "line_num": 35, "text": "- name _ = =", "delta": 93.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 955.0, "y": 3749.0, "w": 352.0, "h": 114.0, "line_num": 36, "text": "main _'", "delta": 658.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 416.0, "y": 3848.0, "w": 272.0, "h": 68.0, "line_num": 37, "text": "main ()", "delta": -539.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 99, "prompting_method": "cot-test5", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    while front_is_clear():\n        fill_tower()\n\ndef fill_tower():\n    while front_is_clear():\n        put_beeper()\n        move()\n    put_beeper()\n    column_return()\n\ndef column_return():\n    while front_is_blocked():\n        turn_around()\n    while front_is_clear():\n        move()\n    next_tower()\n\ndef turn_around():\n    for i in range(2):\n        turn_left()\n\ndef next_tower():\n    if right_is_clear():\n        turn_right()\n        move()\n        turn_right()\n    else:\n        turn_around()\n        while front_is_clear():\n            move()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 3}, {"image_id": 40, "image_height": 3936, "image_width": 1980, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 214.0, "y": 72.0, "w": 1087.0, "h": 73.0, "line_num": 1, "text": "from kanel stanfordkard import *"}, {"x": 212.0, "y": 254.0, "w": 422.0, "h": 71.0, "line_num": 2, "text": "det main ():"}, {"x": 368.0, "y": 346.0, "w": 840.0, "h": 69.0, "line_num": 3, "text": "while front_is_clear ():"}, {"x": 514.0, "y": 426.0, "w": 405.0, "h": 75.0, "line_num": 4, "text": "bill_tower ( )"}, {"x": 206.0, "y": 634.0, "w": 618.0, "h": 76.0, "line_num": 5, "text": "det fill_tower():"}, {"x": 376.0, "y": 728.0, "w": 864.0, "h": 70.0, "line_num": 6, "text": "while front_is_clean ():"}, {"x": 517.0, "y": 821.0, "w": 461.0, "h": 72.0, "line_num": 7, "text": "put-beeper ()"}, {"x": 524.0, "y": 922.0, "w": 237.0, "h": 58.0, "line_num": 8, "text": "move ()"}, {"x": 372.0, "y": 1017.0, "w": 450.0, "h": 71.0, "line_num": 9, "text": "put_beeper ()"}, {"x": 381.0, "y": 1109.0, "w": 607.0, "h": 68.0, "line_num": 10, "text": "column_return ()"}, {"x": 196.0, "y": 1293.0, "w": 814.0, "h": 84.0, "line_num": 11, "text": "def column_return ():"}, {"x": 381.0, "y": 1399.0, "w": 969.0, "h": 74.0, "line_num": 12, "text": "while front_ is_blocked ():"}, {"x": 535.0, "y": 1496.0, "w": 499.0, "h": 73.0, "line_num": 13, "text": "turn-around()"}, {"x": 383.0, "y": 1596.0, "w": 894.0, "h": 78.0, "line_num": 14, "text": "while front_is_clear () :"}, {"x": 552.0, "y": 1707.0, "w": 250.0, "h": 58.0, "line_num": 15, "text": "move ( )"}, {"x": 390.0, "y": 1799.0, "w": 515.0, "h": 65.0, "line_num": 16, "text": "next_tower ()"}, {"x": 203.0, "y": 1989.0, "w": 741.0, "h": 72.0, "line_num": 17, "text": "det turn-around ():"}, {"x": 395.0, "y": 2088.0, "w": 721.0, "h": 72.0, "line_num": 18, "text": "for i in range (2) :"}, {"x": 571.0, "y": 2182.0, "w": 411.0, "h": 73.0, "line_num": 19, "text": "turn-left ( )"}, {"x": 196.0, "y": 2379.0, "w": 102.0, "h": 72.0, "line_num": 20, "text": "det"}, {"x": 381.0, "y": 2383.0, "w": 559.0, "h": 70.0, "line_num": 21, "text": "next_tower ():"}, {"x": 395.0, "y": 2480.0, "w": 822.0, "h": 84.0, "line_num": 22, "text": "if right_is_clean ():"}, {"x": 577.0, "y": 2580.0, "w": 464.0, "h": 76.0, "line_num": 23, "text": "turn-right ( )"}, {"x": 576.0, "y": 2689.0, "w": 246.0, "h": 55.0, "line_num": 24, "text": "move ()"}, {"x": 591.0, "y": 2775.0, "w": 468.0, "h": 82.0, "line_num": 25, "text": "turn-right ()"}, {"x": 388.0, "y": 2880.0, "w": 178.0, "h": 60.0, "line_num": 26, "text": "else :"}, {"x": 584.0, "y": 2974.0, "w": 536.0, "h": 75.0, "line_num": 27, "text": "turn-around ()"}, {"x": 590.0, "y": 3072.0, "w": 888.0, "h": 79.0, "line_num": 28, "text": "while front_is_dear ():"}, {"x": 776.0, "y": 3179.0, "w": 249.0, "h": 64.0, "line_num": 29, "text": "move( )"}, {"x": 193.0, "y": 3365.0, "w": 686.0, "h": 85.0, "line_num": 30, "text": "def turn-right ():"}, {"x": 405.0, "y": 3462.0, "w": 679.0, "h": 83.0, "line_num": 31, "text": "for i in range (3):"}, {"x": 590.0, "y": 3562.0, "w": 428.0, "h": 76.0, "line_num": 32, "text": "turn_left ()"}, {"x": 870.0, "y": 3751.0, "w": 1.0, "h": 3.0, "line_num": 33, "text": "-"}, {"x": 204.0, "y": 3762.0, "w": 56.0, "h": 82.0, "line_num": 34, "text": "if"}, {"x": 297.0, "y": 3785.0, "w": 560.0, "h": 59.0, "line_num": 35, "text": "- name _ = ="}, {"x": 955.0, "y": 3749.0, "w": 352.0, "h": 114.0, "line_num": 36, "text": "main _'"}, {"x": 416.0, "y": 3848.0, "w": 272.0, "h": 68.0, "line_num": 37, "text": "main ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "from kanel stanfordkard import *\ndet main ():\n    while front_is_clear ():\n        bill_tower ( )\ndet fill_tower():\n    while front_is_clean ():\n        put-beeper ()\n        move ()\n    put_beeper ()\n    column_return ()\ndef column_return ():\n    while front_ is_blocked ():\n        turn-around()\n    while front_is_clear () :\n        move ( )\n    next_tower ()\ndet turn-around ():\n    for i in range (2) :\n        turn-left ( )\ndet\n    next_tower ():\n    if right_is_clean ():\n        turn-right ( )\n        move ()\n        turn-right ()\n    else :\n        turn-around ()\n        while front_is_dear ():\n            move( )\ndef turn-right ():\n    for i in range (3):\n        turn_left ()\n            -\nif\n    - name _ = =\n        main _'\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 214.0, "y": 72.0, "w": 1087.0, "h": 73.0, "line_num": 1, "text": "from kanel stanfordkard import *", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 212.0, "y": 254.0, "w": 422.0, "h": 71.0, "line_num": 2, "text": "det main ():", "delta": -2.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 368.0, "y": 346.0, "w": 840.0, "h": 69.0, "line_num": 3, "text": "while front_is_clear ():", "delta": 156.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 514.0, "y": 426.0, "w": 405.0, "h": 75.0, "line_num": 4, "text": "bill_tower ( )", "delta": 146.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 206.0, "y": 634.0, "w": 618.0, "h": 76.0, "line_num": 5, "text": "det fill_tower():", "delta": -308.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 376.0, "y": 728.0, "w": 864.0, "h": 70.0, "line_num": 6, "text": "while front_is_clean ():", "delta": 170.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 517.0, "y": 821.0, "w": 461.0, "h": 72.0, "line_num": 7, "text": "put-beeper ()", "delta": 141.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 524.0, "y": 922.0, "w": 237.0, "h": 58.0, "line_num": 8, "text": "move ()", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 372.0, "y": 1017.0, "w": 450.0, "h": 71.0, "line_num": 9, "text": "put_beeper ()", "delta": -152.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 381.0, "y": 1109.0, "w": 607.0, "h": 68.0, "line_num": 10, "text": "column_return ()", "delta": 9.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 196.0, "y": 1293.0, "w": 814.0, "h": 84.0, "line_num": 11, "text": "def column_return ():", "delta": -185.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 381.0, "y": 1399.0, "w": 969.0, "h": 74.0, "line_num": 12, "text": "while front_ is_blocked ():", "delta": 185.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 535.0, "y": 1496.0, "w": 499.0, "h": 73.0, "line_num": 13, "text": "turn-around()", "delta": 154.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 383.0, "y": 1596.0, "w": 894.0, "h": 78.0, "line_num": 14, "text": "while front_is_clear () :", "delta": -152.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 552.0, "y": 1707.0, "w": 250.0, "h": 58.0, "line_num": 15, "text": "move ( )", "delta": 169.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 390.0, "y": 1799.0, "w": 515.0, "h": 65.0, "line_num": 16, "text": "next_tower ()", "delta": -162.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 203.0, "y": 1989.0, "w": 741.0, "h": 72.0, "line_num": 17, "text": "det turn-around ():", "delta": -187.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 395.0, "y": 2088.0, "w": 721.0, "h": 72.0, "line_num": 18, "text": "for i in range (2) :", "delta": 192.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 571.0, "y": 2182.0, "w": 411.0, "h": 73.0, "line_num": 19, "text": "turn-left ( )", "delta": 176.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 196.0, "y": 2379.0, "w": 102.0, "h": 72.0, "line_num": 20, "text": "det", "delta": -375.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 381.0, "y": 2383.0, "w": 559.0, "h": 70.0, "line_num": 21, "text": "next_tower ():", "delta": 185.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 395.0, "y": 2480.0, "w": 822.0, "h": 84.0, "line_num": 22, "text": "if right_is_clean ():", "delta": 14.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 577.0, "y": 2580.0, "w": 464.0, "h": 76.0, "line_num": 23, "text": "turn-right ( )", "delta": 182.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 576.0, "y": 2689.0, "w": 246.0, "h": 55.0, "line_num": 24, "text": "move ()", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 591.0, "y": 2775.0, "w": 468.0, "h": 82.0, "line_num": 25, "text": "turn-right ()", "delta": 15.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 388.0, "y": 2880.0, "w": 178.0, "h": 60.0, "line_num": 26, "text": "else :", "delta": -203.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 584.0, "y": 2974.0, "w": 536.0, "h": 75.0, "line_num": 27, "text": "turn-around ()", "delta": 196.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 590.0, "y": 3072.0, "w": 888.0, "h": 79.0, "line_num": 28, "text": "while front_is_dear ():", "delta": 6.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 776.0, "y": 3179.0, "w": 249.0, "h": 64.0, "line_num": 29, "text": "move( )", "delta": 186.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 193.0, "y": 3365.0, "w": 686.0, "h": 85.0, "line_num": 30, "text": "def turn-right ():", "delta": -583.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 405.0, "y": 3462.0, "w": 679.0, "h": 83.0, "line_num": 31, "text": "for i in range (3):", "delta": 212.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 590.0, "y": 3562.0, "w": 428.0, "h": 76.0, "line_num": 32, "text": "turn_left ()", "delta": 185.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 870.0, "y": 3751.0, "w": 1.0, "h": 3.0, "line_num": 33, "text": "-", "delta": 280.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 204.0, "y": 3762.0, "w": 56.0, "h": 82.0, "line_num": 34, "text": "if", "delta": -666.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 297.0, "y": 3785.0, "w": 560.0, "h": 59.0, "line_num": 35, "text": "- name _ = =", "delta": 93.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 955.0, "y": 3749.0, "w": 352.0, "h": 114.0, "line_num": 36, "text": "main _'", "delta": 658.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 416.0, "y": 3848.0, "w": 272.0, "h": 68.0, "line_num": 37, "text": "main ()", "delta": -539.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 99, "prompting_method": "simple-test2", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    while front_is_clear():\n        fill_tower()\n\ndef fill_tower():\n    while front_is_clear():\n        put_beeper()\n        move()\n    put_beeper()\n    column_return()\n\ndef column_return():\n    while front_is_blocked():\n        turn_around()\n    while front_is_clear():\n        move()\n    next_tower()\n\ndef turn_around():\n    for i in range(2):\n        turn_left()\n\ndef next_tower():\n    if right_is_clear():\n        turn_right()\n        move()\n        turn_right()\n    else:\n        turn_around()\n        while front_is_clear():\n            move()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 3}, {"image_id": 40, "image_height": 3936, "image_width": 1980, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 214.0, "y": 72.0, "w": 1087.0, "h": 73.0, "line_num": 1, "text": "from kanel stanfordkard import *"}, {"x": 212.0, "y": 254.0, "w": 422.0, "h": 71.0, "line_num": 2, "text": "det main ():"}, {"x": 368.0, "y": 346.0, "w": 840.0, "h": 69.0, "line_num": 3, "text": "while front_is_clear ():"}, {"x": 514.0, "y": 426.0, "w": 405.0, "h": 75.0, "line_num": 4, "text": "bill_tower ( )"}, {"x": 206.0, "y": 634.0, "w": 618.0, "h": 76.0, "line_num": 5, "text": "det fill_tower():"}, {"x": 376.0, "y": 728.0, "w": 864.0, "h": 70.0, "line_num": 6, "text": "while front_is_clean ():"}, {"x": 517.0, "y": 821.0, "w": 461.0, "h": 72.0, "line_num": 7, "text": "put-beeper ()"}, {"x": 524.0, "y": 922.0, "w": 237.0, "h": 58.0, "line_num": 8, "text": "move ()"}, {"x": 372.0, "y": 1017.0, "w": 450.0, "h": 71.0, "line_num": 9, "text": "put_beeper ()"}, {"x": 381.0, "y": 1109.0, "w": 607.0, "h": 68.0, "line_num": 10, "text": "column_return ()"}, {"x": 196.0, "y": 1293.0, "w": 814.0, "h": 84.0, "line_num": 11, "text": "def column_return ():"}, {"x": 381.0, "y": 1399.0, "w": 969.0, "h": 74.0, "line_num": 12, "text": "while front_ is_blocked ():"}, {"x": 535.0, "y": 1496.0, "w": 499.0, "h": 73.0, "line_num": 13, "text": "turn-around()"}, {"x": 383.0, "y": 1596.0, "w": 894.0, "h": 78.0, "line_num": 14, "text": "while front_is_clear () :"}, {"x": 552.0, "y": 1707.0, "w": 250.0, "h": 58.0, "line_num": 15, "text": "move ( )"}, {"x": 390.0, "y": 1799.0, "w": 515.0, "h": 65.0, "line_num": 16, "text": "next_tower ()"}, {"x": 203.0, "y": 1989.0, "w": 741.0, "h": 72.0, "line_num": 17, "text": "det turn-around ():"}, {"x": 395.0, "y": 2088.0, "w": 721.0, "h": 72.0, "line_num": 18, "text": "for i in range (2) :"}, {"x": 571.0, "y": 2182.0, "w": 411.0, "h": 73.0, "line_num": 19, "text": "turn-left ( )"}, {"x": 196.0, "y": 2379.0, "w": 102.0, "h": 72.0, "line_num": 20, "text": "det"}, {"x": 381.0, "y": 2383.0, "w": 559.0, "h": 70.0, "line_num": 21, "text": "next_tower ():"}, {"x": 395.0, "y": 2480.0, "w": 822.0, "h": 84.0, "line_num": 22, "text": "if right_is_clean ():"}, {"x": 577.0, "y": 2580.0, "w": 464.0, "h": 76.0, "line_num": 23, "text": "turn-right ( )"}, {"x": 576.0, "y": 2689.0, "w": 246.0, "h": 55.0, "line_num": 24, "text": "move ()"}, {"x": 591.0, "y": 2775.0, "w": 468.0, "h": 82.0, "line_num": 25, "text": "turn-right ()"}, {"x": 388.0, "y": 2880.0, "w": 178.0, "h": 60.0, "line_num": 26, "text": "else :"}, {"x": 584.0, "y": 2974.0, "w": 536.0, "h": 75.0, "line_num": 27, "text": "turn-around ()"}, {"x": 590.0, "y": 3072.0, "w": 888.0, "h": 79.0, "line_num": 28, "text": "while front_is_dear ():"}, {"x": 776.0, "y": 3179.0, "w": 249.0, "h": 64.0, "line_num": 29, "text": "move( )"}, {"x": 193.0, "y": 3365.0, "w": 686.0, "h": 85.0, "line_num": 30, "text": "def turn-right ():"}, {"x": 405.0, "y": 3462.0, "w": 679.0, "h": 83.0, "line_num": 31, "text": "for i in range (3):"}, {"x": 590.0, "y": 3562.0, "w": 428.0, "h": 76.0, "line_num": 32, "text": "turn_left ()"}, {"x": 870.0, "y": 3751.0, "w": 1.0, "h": 3.0, "line_num": 33, "text": "-"}, {"x": 204.0, "y": 3762.0, "w": 56.0, "h": 82.0, "line_num": 34, "text": "if"}, {"x": 297.0, "y": 3785.0, "w": 560.0, "h": 59.0, "line_num": 35, "text": "- name _ = ="}, {"x": 955.0, "y": 3749.0, "w": 352.0, "h": 114.0, "line_num": 36, "text": "main _'"}, {"x": 416.0, "y": 3848.0, "w": 272.0, "h": 68.0, "line_num": 37, "text": "main ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "from kanel stanfordkard import *\ndet main ():\n    while front_is_clear ():\n        bill_tower ( )\ndet fill_tower():\n    while front_is_clean ():\n        put-beeper ()\n        move ()\n    put_beeper ()\n    column_return ()\ndef column_return ():\n    while front_ is_blocked ():\n        turn-around()\n    while front_is_clear () :\n        move ( )\n    next_tower ()\ndet turn-around ():\n    for i in range (2) :\n        turn-left ( )\ndet\n    next_tower ():\n    if right_is_clean ():\n        turn-right ( )\n        move ()\n        turn-right ()\n    else :\n        turn-around ()\n        while front_is_dear ():\n            move( )\ndef turn-right ():\n    for i in range (3):\n        turn_left ()\n            -\nif\n    - name _ = =\n        main _'\n    main ()\n", "ir_algo_output_indented_lines": [{"x": 214.0, "y": 72.0, "w": 1087.0, "h": 73.0, "line_num": 1, "text": "from kanel stanfordkard import *", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 212.0, "y": 254.0, "w": 422.0, "h": 71.0, "line_num": 2, "text": "det main ():", "delta": -2.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 368.0, "y": 346.0, "w": 840.0, "h": 69.0, "line_num": 3, "text": "while front_is_clear ():", "delta": 156.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 514.0, "y": 426.0, "w": 405.0, "h": 75.0, "line_num": 4, "text": "bill_tower ( )", "delta": 146.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 206.0, "y": 634.0, "w": 618.0, "h": 76.0, "line_num": 5, "text": "det fill_tower():", "delta": -308.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 376.0, "y": 728.0, "w": 864.0, "h": 70.0, "line_num": 6, "text": "while front_is_clean ():", "delta": 170.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 517.0, "y": 821.0, "w": 461.0, "h": 72.0, "line_num": 7, "text": "put-beeper ()", "delta": 141.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 524.0, "y": 922.0, "w": 237.0, "h": 58.0, "line_num": 8, "text": "move ()", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 372.0, "y": 1017.0, "w": 450.0, "h": 71.0, "line_num": 9, "text": "put_beeper ()", "delta": -152.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 381.0, "y": 1109.0, "w": 607.0, "h": 68.0, "line_num": 10, "text": "column_return ()", "delta": 9.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 196.0, "y": 1293.0, "w": 814.0, "h": 84.0, "line_num": 11, "text": "def column_return ():", "delta": -185.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 381.0, "y": 1399.0, "w": 969.0, "h": 74.0, "line_num": 12, "text": "while front_ is_blocked ():", "delta": 185.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 535.0, "y": 1496.0, "w": 499.0, "h": 73.0, "line_num": 13, "text": "turn-around()", "delta": 154.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 383.0, "y": 1596.0, "w": 894.0, "h": 78.0, "line_num": 14, "text": "while front_is_clear () :", "delta": -152.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 552.0, "y": 1707.0, "w": 250.0, "h": 58.0, "line_num": 15, "text": "move ( )", "delta": 169.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 390.0, "y": 1799.0, "w": 515.0, "h": 65.0, "line_num": 16, "text": "next_tower ()", "delta": -162.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 203.0, "y": 1989.0, "w": 741.0, "h": 72.0, "line_num": 17, "text": "det turn-around ():", "delta": -187.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 395.0, "y": 2088.0, "w": 721.0, "h": 72.0, "line_num": 18, "text": "for i in range (2) :", "delta": 192.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 571.0, "y": 2182.0, "w": 411.0, "h": 73.0, "line_num": 19, "text": "turn-left ( )", "delta": 176.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 196.0, "y": 2379.0, "w": 102.0, "h": 72.0, "line_num": 20, "text": "det", "delta": -375.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 381.0, "y": 2383.0, "w": 559.0, "h": 70.0, "line_num": 21, "text": "next_tower ():", "delta": 185.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 395.0, "y": 2480.0, "w": 822.0, "h": 84.0, "line_num": 22, "text": "if right_is_clean ():", "delta": 14.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 577.0, "y": 2580.0, "w": 464.0, "h": 76.0, "line_num": 23, "text": "turn-right ( )", "delta": 182.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 576.0, "y": 2689.0, "w": 246.0, "h": 55.0, "line_num": 24, "text": "move ()", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}, {"x": 591.0, "y": 2775.0, "w": 468.0, "h": 82.0, "line_num": 25, "text": "turn-right ()", "delta": 15.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 388.0, "y": 2880.0, "w": 178.0, "h": 60.0, "line_num": 26, "text": "else :", "delta": -203.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 584.0, "y": 2974.0, "w": 536.0, "h": 75.0, "line_num": 27, "text": "turn-around ()", "delta": 196.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 590.0, "y": 3072.0, "w": 888.0, "h": 79.0, "line_num": 28, "text": "while front_is_dear ():", "delta": 6.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 776.0, "y": 3179.0, "w": 249.0, "h": 64.0, "line_num": 29, "text": "move( )", "delta": 186.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 193.0, "y": 3365.0, "w": 686.0, "h": 85.0, "line_num": 30, "text": "def turn-right ():", "delta": -583.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 405.0, "y": 3462.0, "w": 679.0, "h": 83.0, "line_num": 31, "text": "for i in range (3):", "delta": 212.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 590.0, "y": 3562.0, "w": 428.0, "h": 76.0, "line_num": 32, "text": "turn_left ()", "delta": 185.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 870.0, "y": 3751.0, "w": 1.0, "h": 3.0, "line_num": 33, "text": "-", "delta": 280.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 204.0, "y": 3762.0, "w": 56.0, "h": 82.0, "line_num": 34, "text": "if", "delta": -666.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 297.0, "y": 3785.0, "w": 560.0, "h": 59.0, "line_num": 35, "text": "- name _ = =", "delta": 93.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 955.0, "y": 3749.0, "w": 352.0, "h": 114.0, "line_num": 36, "text": "main _'", "delta": 658.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 416.0, "y": 3848.0, "w": 272.0, "h": 68.0, "line_num": 37, "text": "main ()", "delta": -539.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 99, "prompting_method": "simple-test3", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    while front_is_clear():\n        fill_tower()\n\ndef fill_tower():\n    while front_is_clear():\n        put_beeper()\n        move()\n    put_beeper()\n    column_return()\n\ndef column_return():\n    while front_is_blocked():\n        turn_around()\n    while front_is_clear():\n        move()\n    next_tower()\n\ndef turn_around():\n    for i in range(2):\n        turn_left()\n\ndef next_tower():\n    if right_is_clear():\n        turn_right()\n        move()\n        turn_right()\n    else:\n        turn_around()\n        while front_is_clear():\n            move()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 3}, {"image_id": 41, "image_height": 2456, "image_width": 2303, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 66.0, "y": 31.0, "w": 1573.0, "h": 130.0, "line_num": 1, "text": "def filter-string-a (string);"}, {"x": 381.0, "y": 304.0, "w": 845.0, "h": 107.0, "line_num": 2, "text": "string. sort ()"}, {"x": 403.0, "y": 493.0, "w": 1383.0, "h": 133.0, "line_num": 3, "text": "filtered- string-list = []"}, {"x": 401.0, "y": 744.0, "w": 1176.0, "h": 155.0, "line_num": 4, "text": "fore stry in string:"}, {"x": 667.0, "y": 972.0, "w": 1394.0, "h": 130.0, "line_num": 5, "text": "if stru startswith (\"a\") :"}, {"x": 928.0, "y": 1169.0, "w": 1302.0, "h": 126.0, "line_num": 6, "text": "filtered-string-lint: append"}, {"x": 2061.0, "y": 1260.0, "w": 174.0, "h": 118.0, "line_num": 7, "text": "(strc)"}, {"x": 403.0, "y": 1406.0, "w": 1481.0, "h": 125.0, "line_num": 8, "text": "returin filtered-string-list"}, {"x": 114.0, "y": 1678.0, "w": 2174.0, "h": 143.0, "line_num": 9, "text": "input_string = \\\"apple\", \"bunana\", \"avacado"}, {"x": 1067.0, "y": 1881.0, "w": 1032.0, "h": 138.0, "line_num": 10, "text": "\"chevery \" \"apriest \"]"}, {"x": 123.0, "y": 2070.0, "w": 2115.0, "h": 148.0, "line_num": 11, "text": "Output = filter- string-a (input_ string)"}, {"x": 132.0, "y": 2269.0, "w": 813.0, "h": 132.0, "line_num": 12, "text": "print (output)"}], "ir_algo_name": "none", "ir_algo_output_code": "def filter-string-a (string);\nstring. sort ()\nfiltered- string-list = []\nfore stry in string:\nif stru startswith (\"a\") :\nfiltered-string-lint: append\n(strc)\nreturin filtered-string-list\ninput_string = \\\"apple\", \"bunana\", \"avacado\n\"chevery \" \"apriest \"]\nOutput = filter- string-a (input_ string)\nprint (output)", "ir_algo_output_edit_distance": 104, "prompting_method": "none", "lm_post_processed_code": "def filter-string-a (string);\nstring. sort ()\nfiltered- string-list = []\nfore stry in string:\nif stru startswith (\"a\") :\nfiltered-string-lint: append\n(strc)\nreturin filtered-string-list\ninput_string = \\\"apple\", \"bunana\", \"avacado\n\"chevery \" \"apriest \"]\nOutput = filter- string-a (input_ string)\nprint (output)", "lm_post_processed_edit_distance": 104}, {"image_id": 41, "image_height": 2456, "image_width": 2303, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 66.0, "y": 31.0, "w": 1573.0, "h": 130.0, "line_num": 1, "text": "def filter-string-a (string);"}, {"x": 381.0, "y": 304.0, "w": 845.0, "h": 107.0, "line_num": 2, "text": "string. sort ()"}, {"x": 403.0, "y": 493.0, "w": 1383.0, "h": 133.0, "line_num": 3, "text": "filtered- string-list = []"}, {"x": 401.0, "y": 744.0, "w": 1176.0, "h": 155.0, "line_num": 4, "text": "fore stry in string:"}, {"x": 667.0, "y": 972.0, "w": 1394.0, "h": 130.0, "line_num": 5, "text": "if stru startswith (\"a\") :"}, {"x": 928.0, "y": 1169.0, "w": 1302.0, "h": 126.0, "line_num": 6, "text": "filtered-string-lint: append"}, {"x": 2061.0, "y": 1260.0, "w": 174.0, "h": 118.0, "line_num": 7, "text": "(strc)"}, {"x": 403.0, "y": 1406.0, "w": 1481.0, "h": 125.0, "line_num": 8, "text": "returin filtered-string-list"}, {"x": 114.0, "y": 1678.0, "w": 2174.0, "h": 143.0, "line_num": 9, "text": "input_string = \\\"apple\", \"bunana\", \"avacado"}, {"x": 1067.0, "y": 1881.0, "w": 1032.0, "h": 138.0, "line_num": 10, "text": "\"chevery \" \"apriest \"]"}, {"x": 123.0, "y": 2070.0, "w": 2115.0, "h": 148.0, "line_num": 11, "text": "Output = filter- string-a (input_ string)"}, {"x": 132.0, "y": 2269.0, "w": 813.0, "h": 132.0, "line_num": 12, "text": "print (output)"}], "ir_algo_name": "none", "ir_algo_output_code": "def filter-string-a (string);\nstring. sort ()\nfiltered- string-list = []\nfore stry in string:\nif stru startswith (\"a\") :\nfiltered-string-lint: append\n(strc)\nreturin filtered-string-list\ninput_string = \\\"apple\", \"bunana\", \"avacado\n\"chevery \" \"apriest \"]\nOutput = filter- string-a (input_ string)\nprint (output)", "ir_algo_output_edit_distance": 104, "prompting_method": "cot-test1", "lm_post_processed_code": "def filter_string_a(string):\nstring.sort()\nfiltered_string_list = []\nfor str in string:\nif str.startswith(\"a\"):\nfiltered_string_list.append(str)\nreturn filtered_string_list\ninput_string = [\"apple\", \"banana\", \"avocado\", \"cherry\", \"apricot\"]\nOutput = filter_string_a(input_string)\nprint(Output)\n", "lm_post_processed_edit_distance": 62}, {"image_id": 41, "image_height": 2456, "image_width": 2303, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 66.0, "y": 31.0, "w": 1573.0, "h": 130.0, "line_num": 1, "text": "def filter-string-a (string);"}, {"x": 381.0, "y": 304.0, "w": 845.0, "h": 107.0, "line_num": 2, "text": "string. sort ()"}, {"x": 403.0, "y": 493.0, "w": 1383.0, "h": 133.0, "line_num": 3, "text": "filtered- string-list = []"}, {"x": 401.0, "y": 744.0, "w": 1176.0, "h": 155.0, "line_num": 4, "text": "fore stry in string:"}, {"x": 667.0, "y": 972.0, "w": 1394.0, "h": 130.0, "line_num": 5, "text": "if stru startswith (\"a\") :"}, {"x": 928.0, "y": 1169.0, "w": 1302.0, "h": 126.0, "line_num": 6, "text": "filtered-string-lint: append"}, {"x": 2061.0, "y": 1260.0, "w": 174.0, "h": 118.0, "line_num": 7, "text": "(strc)"}, {"x": 403.0, "y": 1406.0, "w": 1481.0, "h": 125.0, "line_num": 8, "text": "returin filtered-string-list"}, {"x": 114.0, "y": 1678.0, "w": 2174.0, "h": 143.0, "line_num": 9, "text": "input_string = \\\"apple\", \"bunana\", \"avacado"}, {"x": 1067.0, "y": 1881.0, "w": 1032.0, "h": 138.0, "line_num": 10, "text": "\"chevery \" \"apriest \"]"}, {"x": 123.0, "y": 2070.0, "w": 2115.0, "h": 148.0, "line_num": 11, "text": "Output = filter- string-a (input_ string)"}, {"x": 132.0, "y": 2269.0, "w": 813.0, "h": 132.0, "line_num": 12, "text": "print (output)"}], "ir_algo_name": "none", "ir_algo_output_code": "def filter-string-a (string);\nstring. sort ()\nfiltered- string-list = []\nfore stry in string:\nif stru startswith (\"a\") :\nfiltered-string-lint: append\n(strc)\nreturin filtered-string-list\ninput_string = \\\"apple\", \"bunana\", \"avacado\n\"chevery \" \"apriest \"]\nOutput = filter- string-a (input_ string)\nprint (output)", "ir_algo_output_edit_distance": 104, "prompting_method": "cot-test5", "lm_post_processed_code": "def filter_string_a (string):\nstring.sort()\nfiltered_string_list = []\nfor stry in string:\nif stry.startswith(\"a\"):\nfiltered_string_list.append(stry)\nreturn filtered_string_list\ninput_string = [\"apple\", \"banana\", \"avocado\", \"cherry\", \"apricot\"]\nOutput = filter_string_a (input_string)\nprint (Output)\n", "lm_post_processed_edit_distance": 68}, {"image_id": 41, "image_height": 2456, "image_width": 2303, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 66.0, "y": 31.0, "w": 1573.0, "h": 130.0, "line_num": 1, "text": "def filter-string-a (string);"}, {"x": 381.0, "y": 304.0, "w": 845.0, "h": 107.0, "line_num": 2, "text": "string. sort ()"}, {"x": 403.0, "y": 493.0, "w": 1383.0, "h": 133.0, "line_num": 3, "text": "filtered- string-list = []"}, {"x": 401.0, "y": 744.0, "w": 1176.0, "h": 155.0, "line_num": 4, "text": "fore stry in string:"}, {"x": 667.0, "y": 972.0, "w": 1394.0, "h": 130.0, "line_num": 5, "text": "if stru startswith (\"a\") :"}, {"x": 928.0, "y": 1169.0, "w": 1302.0, "h": 126.0, "line_num": 6, "text": "filtered-string-lint: append"}, {"x": 2061.0, "y": 1260.0, "w": 174.0, "h": 118.0, "line_num": 7, "text": "(strc)"}, {"x": 403.0, "y": 1406.0, "w": 1481.0, "h": 125.0, "line_num": 8, "text": "returin filtered-string-list"}, {"x": 114.0, "y": 1678.0, "w": 2174.0, "h": 143.0, "line_num": 9, "text": "input_string = \\\"apple\", \"bunana\", \"avacado"}, {"x": 1067.0, "y": 1881.0, "w": 1032.0, "h": 138.0, "line_num": 10, "text": "\"chevery \" \"apriest \"]"}, {"x": 123.0, "y": 2070.0, "w": 2115.0, "h": 148.0, "line_num": 11, "text": "Output = filter- string-a (input_ string)"}, {"x": 132.0, "y": 2269.0, "w": 813.0, "h": 132.0, "line_num": 12, "text": "print (output)"}], "ir_algo_name": "none", "ir_algo_output_code": "def filter-string-a (string);\nstring. sort ()\nfiltered- string-list = []\nfore stry in string:\nif stru startswith (\"a\") :\nfiltered-string-lint: append\n(strc)\nreturin filtered-string-list\ninput_string = \\\"apple\", \"bunana\", \"avacado\n\"chevery \" \"apriest \"]\nOutput = filter- string-a (input_ string)\nprint (output)", "ir_algo_output_edit_distance": 104, "prompting_method": "simple-test2", "lm_post_processed_code": "def filter_string_a(string):\nstring.sort()\nfiltered_string_list = []\nfor stry in string:\nif stry.startswith(\"a\"):\nfiltered_string_list.append(stry)\nreturn filtered_string_list\ninput_string = [\"apple\", \"banana\", \"avocado\", \"cherry\", \"apricot\"]\noutput = filter_string_a(input_string)\nprint(output)\n", "lm_post_processed_edit_distance": 63}, {"image_id": 41, "image_height": 2456, "image_width": 2303, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 66.0, "y": 31.0, "w": 1573.0, "h": 130.0, "line_num": 1, "text": "def filter-string-a (string);"}, {"x": 381.0, "y": 304.0, "w": 845.0, "h": 107.0, "line_num": 2, "text": "string. sort ()"}, {"x": 403.0, "y": 493.0, "w": 1383.0, "h": 133.0, "line_num": 3, "text": "filtered- string-list = []"}, {"x": 401.0, "y": 744.0, "w": 1176.0, "h": 155.0, "line_num": 4, "text": "fore stry in string:"}, {"x": 667.0, "y": 972.0, "w": 1394.0, "h": 130.0, "line_num": 5, "text": "if stru startswith (\"a\") :"}, {"x": 928.0, "y": 1169.0, "w": 1302.0, "h": 126.0, "line_num": 6, "text": "filtered-string-lint: append"}, {"x": 2061.0, "y": 1260.0, "w": 174.0, "h": 118.0, "line_num": 7, "text": "(strc)"}, {"x": 403.0, "y": 1406.0, "w": 1481.0, "h": 125.0, "line_num": 8, "text": "returin filtered-string-list"}, {"x": 114.0, "y": 1678.0, "w": 2174.0, "h": 143.0, "line_num": 9, "text": "input_string = \\\"apple\", \"bunana\", \"avacado"}, {"x": 1067.0, "y": 1881.0, "w": 1032.0, "h": 138.0, "line_num": 10, "text": "\"chevery \" \"apriest \"]"}, {"x": 123.0, "y": 2070.0, "w": 2115.0, "h": 148.0, "line_num": 11, "text": "Output = filter- string-a (input_ string)"}, {"x": 132.0, "y": 2269.0, "w": 813.0, "h": 132.0, "line_num": 12, "text": "print (output)"}], "ir_algo_name": "none", "ir_algo_output_code": "def filter-string-a (string);\nstring. sort ()\nfiltered- string-list = []\nfore stry in string:\nif stru startswith (\"a\") :\nfiltered-string-lint: append\n(strc)\nreturin filtered-string-list\ninput_string = \\\"apple\", \"bunana\", \"avacado\n\"chevery \" \"apriest \"]\nOutput = filter- string-a (input_ string)\nprint (output)", "ir_algo_output_edit_distance": 104, "prompting_method": "simple-test3", "lm_post_processed_code": "def filter_string_a(string):\n    string.sort()\n    filtered_string_list = []\n    for stry in string:\n        if stry.startswith(\"a\"):\n            filtered_string_list.append(stry)\n    return filtered_string_list\ninput_string = [\"apple\", \"banana\", \"avocado\", \"cherry\", \"apricot\"]\noutput = filter_string_a(input_string)\nprint(output)\n", "lm_post_processed_edit_distance": 27}, {"image_id": 41, "image_height": 2456, "image_width": 2303, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 66.0, "y": 31.0, "w": 1573.0, "h": 130.0, "line_num": 1, "text": "def filter-string-a (string);"}, {"x": 381.0, "y": 304.0, "w": 845.0, "h": 107.0, "line_num": 2, "text": "string. sort ()"}, {"x": 403.0, "y": 493.0, "w": 1383.0, "h": 133.0, "line_num": 3, "text": "filtered- string-list = []"}, {"x": 401.0, "y": 744.0, "w": 1176.0, "h": 155.0, "line_num": 4, "text": "fore stry in string:"}, {"x": 667.0, "y": 972.0, "w": 1394.0, "h": 130.0, "line_num": 5, "text": "if stru startswith (\"a\") :"}, {"x": 928.0, "y": 1169.0, "w": 1302.0, "h": 126.0, "line_num": 6, "text": "filtered-string-lint: append"}, {"x": 2061.0, "y": 1260.0, "w": 174.0, "h": 118.0, "line_num": 7, "text": "(strc)"}, {"x": 403.0, "y": 1406.0, "w": 1481.0, "h": 125.0, "line_num": 8, "text": "returin filtered-string-list"}, {"x": 114.0, "y": 1678.0, "w": 2174.0, "h": 143.0, "line_num": 9, "text": "input_string = \\\"apple\", \"bunana\", \"avacado"}, {"x": 1067.0, "y": 1881.0, "w": 1032.0, "h": 138.0, "line_num": 10, "text": "\"chevery \" \"apriest \"]"}, {"x": 123.0, "y": 2070.0, "w": 2115.0, "h": 148.0, "line_num": 11, "text": "Output = filter- string-a (input_ string)"}, {"x": 132.0, "y": 2269.0, "w": 813.0, "h": 132.0, "line_num": 12, "text": "print (output)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 198.125, "ir_algo_output_code": "def filter-string-a (string);\n    string. sort ()\n    filtered- string-list = []\n    fore stry in string:\n        if stru startswith (\"a\") :\n            filtered-string-lint: append\n                (strc)\n    returin filtered-string-list\ninput_string = \\\"apple\", \"bunana\", \"avacado\n            \"chevery \" \"apriest \"]\nOutput = filter- string-a (input_ string)\nprint (output)\n", "ir_algo_output_indented_lines": [{"x": 66.0, "y": 31.0, "w": 1573.0, "h": 130.0, "line_num": 1, "text": "def filter-string-a (string);", "cluster_label": 1, "indentation": 0}, {"x": 381.0, "y": 304.0, "w": 845.0, "h": 107.0, "line_num": 2, "text": "string. sort ()", "cluster_label": 0, "indentation": 1}, {"x": 403.0, "y": 493.0, "w": 1383.0, "h": 133.0, "line_num": 3, "text": "filtered- string-list = []", "cluster_label": 0, "indentation": 1}, {"x": 401.0, "y": 744.0, "w": 1176.0, "h": 155.0, "line_num": 4, "text": "fore stry in string:", "cluster_label": 0, "indentation": 1}, {"x": 667.0, "y": 972.0, "w": 1394.0, "h": 130.0, "line_num": 5, "text": "if stru startswith (\"a\") :", "cluster_label": 4, "indentation": 2}, {"x": 928.0, "y": 1169.0, "w": 1302.0, "h": 126.0, "line_num": 6, "text": "filtered-string-lint: append", "cluster_label": 2, "indentation": 3}, {"x": 2061.0, "y": 1260.0, "w": 174.0, "h": 118.0, "line_num": 7, "text": "(strc)", "cluster_label": 3, "indentation": 4}, {"x": 403.0, "y": 1406.0, "w": 1481.0, "h": 125.0, "line_num": 8, "text": "returin filtered-string-list", "cluster_label": 0, "indentation": 1}, {"x": 114.0, "y": 1678.0, "w": 2174.0, "h": 143.0, "line_num": 9, "text": "input_string = \\\"apple\", \"bunana\", \"avacado", "cluster_label": 1, "indentation": 0}, {"x": 1067.0, "y": 1881.0, "w": 1032.0, "h": 138.0, "line_num": 10, "text": "\"chevery \" \"apriest \"]", "cluster_label": 2, "indentation": 3}, {"x": 123.0, "y": 2070.0, "w": 2115.0, "h": 148.0, "line_num": 11, "text": "Output = filter- string-a (input_ string)", "cluster_label": 1, "indentation": 0}, {"x": 132.0, "y": 2269.0, "w": 813.0, "h": 132.0, "line_num": 12, "text": "print (output)", "cluster_label": 1, "indentation": 0}], "ir_algo_output_edit_distance": 92, "prompting_method": "none", "lm_post_processed_code": "def filter-string-a (string);\n    string. sort ()\n    filtered- string-list = []\n    fore stry in string:\n        if stru startswith (\"a\") :\n            filtered-string-lint: append\n                (strc)\n    returin filtered-string-list\ninput_string = \\\"apple\", \"bunana\", \"avacado\n            \"chevery \" \"apriest \"]\nOutput = filter- string-a (input_ string)\nprint (output)\n", "lm_post_processed_edit_distance": 92}, {"image_id": 41, "image_height": 2456, "image_width": 2303, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 66.0, "y": 31.0, "w": 1573.0, "h": 130.0, "line_num": 1, "text": "def filter-string-a (string);"}, {"x": 381.0, "y": 304.0, "w": 845.0, "h": 107.0, "line_num": 2, "text": "string. sort ()"}, {"x": 403.0, "y": 493.0, "w": 1383.0, "h": 133.0, "line_num": 3, "text": "filtered- string-list = []"}, {"x": 401.0, "y": 744.0, "w": 1176.0, "h": 155.0, "line_num": 4, "text": "fore stry in string:"}, {"x": 667.0, "y": 972.0, "w": 1394.0, "h": 130.0, "line_num": 5, "text": "if stru startswith (\"a\") :"}, {"x": 928.0, "y": 1169.0, "w": 1302.0, "h": 126.0, "line_num": 6, "text": "filtered-string-lint: append"}, {"x": 2061.0, "y": 1260.0, "w": 174.0, "h": 118.0, "line_num": 7, "text": "(strc)"}, {"x": 403.0, "y": 1406.0, "w": 1481.0, "h": 125.0, "line_num": 8, "text": "returin filtered-string-list"}, {"x": 114.0, "y": 1678.0, "w": 2174.0, "h": 143.0, "line_num": 9, "text": "input_string = \\\"apple\", \"bunana\", \"avacado"}, {"x": 1067.0, "y": 1881.0, "w": 1032.0, "h": 138.0, "line_num": 10, "text": "\"chevery \" \"apriest \"]"}, {"x": 123.0, "y": 2070.0, "w": 2115.0, "h": 148.0, "line_num": 11, "text": "Output = filter- string-a (input_ string)"}, {"x": 132.0, "y": 2269.0, "w": 813.0, "h": 132.0, "line_num": 12, "text": "print (output)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 198.125, "ir_algo_output_code": "def filter-string-a (string);\n    string. sort ()\n    filtered- string-list = []\n    fore stry in string:\n        if stru startswith (\"a\") :\n            filtered-string-lint: append\n                (strc)\n    returin filtered-string-list\ninput_string = \\\"apple\", \"bunana\", \"avacado\n            \"chevery \" \"apriest \"]\nOutput = filter- string-a (input_ string)\nprint (output)\n", "ir_algo_output_indented_lines": [{"x": 66.0, "y": 31.0, "w": 1573.0, "h": 130.0, "line_num": 1, "text": "def filter-string-a (string);", "cluster_label": 1, "indentation": 0}, {"x": 381.0, "y": 304.0, "w": 845.0, "h": 107.0, "line_num": 2, "text": "string. sort ()", "cluster_label": 0, "indentation": 1}, {"x": 403.0, "y": 493.0, "w": 1383.0, "h": 133.0, "line_num": 3, "text": "filtered- string-list = []", "cluster_label": 0, "indentation": 1}, {"x": 401.0, "y": 744.0, "w": 1176.0, "h": 155.0, "line_num": 4, "text": "fore stry in string:", "cluster_label": 0, "indentation": 1}, {"x": 667.0, "y": 972.0, "w": 1394.0, "h": 130.0, "line_num": 5, "text": "if stru startswith (\"a\") :", "cluster_label": 4, "indentation": 2}, {"x": 928.0, "y": 1169.0, "w": 1302.0, "h": 126.0, "line_num": 6, "text": "filtered-string-lint: append", "cluster_label": 2, "indentation": 3}, {"x": 2061.0, "y": 1260.0, "w": 174.0, "h": 118.0, "line_num": 7, "text": "(strc)", "cluster_label": 3, "indentation": 4}, {"x": 403.0, "y": 1406.0, "w": 1481.0, "h": 125.0, "line_num": 8, "text": "returin filtered-string-list", "cluster_label": 0, "indentation": 1}, {"x": 114.0, "y": 1678.0, "w": 2174.0, "h": 143.0, "line_num": 9, "text": "input_string = \\\"apple\", \"bunana\", \"avacado", "cluster_label": 1, "indentation": 0}, {"x": 1067.0, "y": 1881.0, "w": 1032.0, "h": 138.0, "line_num": 10, "text": "\"chevery \" \"apriest \"]", "cluster_label": 2, "indentation": 3}, {"x": 123.0, "y": 2070.0, "w": 2115.0, "h": 148.0, "line_num": 11, "text": "Output = filter- string-a (input_ string)", "cluster_label": 1, "indentation": 0}, {"x": 132.0, "y": 2269.0, "w": 813.0, "h": 132.0, "line_num": 12, "text": "print (output)", "cluster_label": 1, "indentation": 0}], "ir_algo_output_edit_distance": 92, "prompting_method": "cot-test1", "lm_post_processed_code": "def filter_string_a (string):\n    string.sort ()\n    filtered_string_list = []\n    for stry in string:\n        if stry.startswith (\"a\") :\n            filtered_string_list.append(stry)\n    return filtered_string_list\ninput_string = [\"apple\", \"banana\", \"avocado\", \"cherry\", \"apricot\"]\noutput = filter_string_a (input_string)\nprint (output)\n", "lm_post_processed_edit_distance": 33}, {"image_id": 41, "image_height": 2456, "image_width": 2303, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 66.0, "y": 31.0, "w": 1573.0, "h": 130.0, "line_num": 1, "text": "def filter-string-a (string);"}, {"x": 381.0, "y": 304.0, "w": 845.0, "h": 107.0, "line_num": 2, "text": "string. sort ()"}, {"x": 403.0, "y": 493.0, "w": 1383.0, "h": 133.0, "line_num": 3, "text": "filtered- string-list = []"}, {"x": 401.0, "y": 744.0, "w": 1176.0, "h": 155.0, "line_num": 4, "text": "fore stry in string:"}, {"x": 667.0, "y": 972.0, "w": 1394.0, "h": 130.0, "line_num": 5, "text": "if stru startswith (\"a\") :"}, {"x": 928.0, "y": 1169.0, "w": 1302.0, "h": 126.0, "line_num": 6, "text": "filtered-string-lint: append"}, {"x": 2061.0, "y": 1260.0, "w": 174.0, "h": 118.0, "line_num": 7, "text": "(strc)"}, {"x": 403.0, "y": 1406.0, "w": 1481.0, "h": 125.0, "line_num": 8, "text": "returin filtered-string-list"}, {"x": 114.0, "y": 1678.0, "w": 2174.0, "h": 143.0, "line_num": 9, "text": "input_string = \\\"apple\", \"bunana\", \"avacado"}, {"x": 1067.0, "y": 1881.0, "w": 1032.0, "h": 138.0, "line_num": 10, "text": "\"chevery \" \"apriest \"]"}, {"x": 123.0, "y": 2070.0, "w": 2115.0, "h": 148.0, "line_num": 11, "text": "Output = filter- string-a (input_ string)"}, {"x": 132.0, "y": 2269.0, "w": 813.0, "h": 132.0, "line_num": 12, "text": "print (output)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 198.125, "ir_algo_output_code": "def filter-string-a (string);\n    string. sort ()\n    filtered- string-list = []\n    fore stry in string:\n        if stru startswith (\"a\") :\n            filtered-string-lint: append\n                (strc)\n    returin filtered-string-list\ninput_string = \\\"apple\", \"bunana\", \"avacado\n            \"chevery \" \"apriest \"]\nOutput = filter- string-a (input_ string)\nprint (output)\n", "ir_algo_output_indented_lines": [{"x": 66.0, "y": 31.0, "w": 1573.0, "h": 130.0, "line_num": 1, "text": "def filter-string-a (string);", "cluster_label": 1, "indentation": 0}, {"x": 381.0, "y": 304.0, "w": 845.0, "h": 107.0, "line_num": 2, "text": "string. sort ()", "cluster_label": 0, "indentation": 1}, {"x": 403.0, "y": 493.0, "w": 1383.0, "h": 133.0, "line_num": 3, "text": "filtered- string-list = []", "cluster_label": 0, "indentation": 1}, {"x": 401.0, "y": 744.0, "w": 1176.0, "h": 155.0, "line_num": 4, "text": "fore stry in string:", "cluster_label": 0, "indentation": 1}, {"x": 667.0, "y": 972.0, "w": 1394.0, "h": 130.0, "line_num": 5, "text": "if stru startswith (\"a\") :", "cluster_label": 4, "indentation": 2}, {"x": 928.0, "y": 1169.0, "w": 1302.0, "h": 126.0, "line_num": 6, "text": "filtered-string-lint: append", "cluster_label": 2, "indentation": 3}, {"x": 2061.0, "y": 1260.0, "w": 174.0, "h": 118.0, "line_num": 7, "text": "(strc)", "cluster_label": 3, "indentation": 4}, {"x": 403.0, "y": 1406.0, "w": 1481.0, "h": 125.0, "line_num": 8, "text": "returin filtered-string-list", "cluster_label": 0, "indentation": 1}, {"x": 114.0, "y": 1678.0, "w": 2174.0, "h": 143.0, "line_num": 9, "text": "input_string = \\\"apple\", \"bunana\", \"avacado", "cluster_label": 1, "indentation": 0}, {"x": 1067.0, "y": 1881.0, "w": 1032.0, "h": 138.0, "line_num": 10, "text": "\"chevery \" \"apriest \"]", "cluster_label": 2, "indentation": 3}, {"x": 123.0, "y": 2070.0, "w": 2115.0, "h": 148.0, "line_num": 11, "text": "Output = filter- string-a (input_ string)", "cluster_label": 1, "indentation": 0}, {"x": 132.0, "y": 2269.0, "w": 813.0, "h": 132.0, "line_num": 12, "text": "print (output)", "cluster_label": 1, "indentation": 0}], "ir_algo_output_edit_distance": 92, "prompting_method": "cot-test5", "lm_post_processed_code": "def filter_string_a(string):\n    string.sort()\n    filtered_string_list = []\n    for stru in string:\n        if stru.startswith(\"a\"):\n            filtered_string_list.append(stru)\n    return filtered_string_list\ninput_string = [\"apple\", \"banana\", \"avocado\", \"cherry\", \"apricot\"]\noutput = filter_string_a(input_string)\nprint(output)\n", "lm_post_processed_edit_distance": 27}, {"image_id": 41, "image_height": 2456, "image_width": 2303, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 66.0, "y": 31.0, "w": 1573.0, "h": 130.0, "line_num": 1, "text": "def filter-string-a (string);"}, {"x": 381.0, "y": 304.0, "w": 845.0, "h": 107.0, "line_num": 2, "text": "string. sort ()"}, {"x": 403.0, "y": 493.0, "w": 1383.0, "h": 133.0, "line_num": 3, "text": "filtered- string-list = []"}, {"x": 401.0, "y": 744.0, "w": 1176.0, "h": 155.0, "line_num": 4, "text": "fore stry in string:"}, {"x": 667.0, "y": 972.0, "w": 1394.0, "h": 130.0, "line_num": 5, "text": "if stru startswith (\"a\") :"}, {"x": 928.0, "y": 1169.0, "w": 1302.0, "h": 126.0, "line_num": 6, "text": "filtered-string-lint: append"}, {"x": 2061.0, "y": 1260.0, "w": 174.0, "h": 118.0, "line_num": 7, "text": "(strc)"}, {"x": 403.0, "y": 1406.0, "w": 1481.0, "h": 125.0, "line_num": 8, "text": "returin filtered-string-list"}, {"x": 114.0, "y": 1678.0, "w": 2174.0, "h": 143.0, "line_num": 9, "text": "input_string = \\\"apple\", \"bunana\", \"avacado"}, {"x": 1067.0, "y": 1881.0, "w": 1032.0, "h": 138.0, "line_num": 10, "text": "\"chevery \" \"apriest \"]"}, {"x": 123.0, "y": 2070.0, "w": 2115.0, "h": 148.0, "line_num": 11, "text": "Output = filter- string-a (input_ string)"}, {"x": 132.0, "y": 2269.0, "w": 813.0, "h": 132.0, "line_num": 12, "text": "print (output)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 198.125, "ir_algo_output_code": "def filter-string-a (string);\n    string. sort ()\n    filtered- string-list = []\n    fore stry in string:\n        if stru startswith (\"a\") :\n            filtered-string-lint: append\n                (strc)\n    returin filtered-string-list\ninput_string = \\\"apple\", \"bunana\", \"avacado\n            \"chevery \" \"apriest \"]\nOutput = filter- string-a (input_ string)\nprint (output)\n", "ir_algo_output_indented_lines": [{"x": 66.0, "y": 31.0, "w": 1573.0, "h": 130.0, "line_num": 1, "text": "def filter-string-a (string);", "cluster_label": 1, "indentation": 0}, {"x": 381.0, "y": 304.0, "w": 845.0, "h": 107.0, "line_num": 2, "text": "string. sort ()", "cluster_label": 0, "indentation": 1}, {"x": 403.0, "y": 493.0, "w": 1383.0, "h": 133.0, "line_num": 3, "text": "filtered- string-list = []", "cluster_label": 0, "indentation": 1}, {"x": 401.0, "y": 744.0, "w": 1176.0, "h": 155.0, "line_num": 4, "text": "fore stry in string:", "cluster_label": 0, "indentation": 1}, {"x": 667.0, "y": 972.0, "w": 1394.0, "h": 130.0, "line_num": 5, "text": "if stru startswith (\"a\") :", "cluster_label": 4, "indentation": 2}, {"x": 928.0, "y": 1169.0, "w": 1302.0, "h": 126.0, "line_num": 6, "text": "filtered-string-lint: append", "cluster_label": 2, "indentation": 3}, {"x": 2061.0, "y": 1260.0, "w": 174.0, "h": 118.0, "line_num": 7, "text": "(strc)", "cluster_label": 3, "indentation": 4}, {"x": 403.0, "y": 1406.0, "w": 1481.0, "h": 125.0, "line_num": 8, "text": "returin filtered-string-list", "cluster_label": 0, "indentation": 1}, {"x": 114.0, "y": 1678.0, "w": 2174.0, "h": 143.0, "line_num": 9, "text": "input_string = \\\"apple\", \"bunana\", \"avacado", "cluster_label": 1, "indentation": 0}, {"x": 1067.0, "y": 1881.0, "w": 1032.0, "h": 138.0, "line_num": 10, "text": "\"chevery \" \"apriest \"]", "cluster_label": 2, "indentation": 3}, {"x": 123.0, "y": 2070.0, "w": 2115.0, "h": 148.0, "line_num": 11, "text": "Output = filter- string-a (input_ string)", "cluster_label": 1, "indentation": 0}, {"x": 132.0, "y": 2269.0, "w": 813.0, "h": 132.0, "line_num": 12, "text": "print (output)", "cluster_label": 1, "indentation": 0}], "ir_algo_output_edit_distance": 92, "prompting_method": "simple-test2", "lm_post_processed_code": "def filter_string_a(string):\n    string.sort()\n    filtered_string_list = []\n    for stry in string:\n        if stry.startswith(\"a\"):\n            filtered_string_list.append(stry)\n    return filtered_string_list\ninput_string = [\"apple\", \"banana\", \"avocado\", \"cherry\", \"apricot\"]\noutput = filter_string_a(input_string)\nprint(output)\n", "lm_post_processed_edit_distance": 27}, {"image_id": 41, "image_height": 2456, "image_width": 2303, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 66.0, "y": 31.0, "w": 1573.0, "h": 130.0, "line_num": 1, "text": "def filter-string-a (string);"}, {"x": 381.0, "y": 304.0, "w": 845.0, "h": 107.0, "line_num": 2, "text": "string. sort ()"}, {"x": 403.0, "y": 493.0, "w": 1383.0, "h": 133.0, "line_num": 3, "text": "filtered- string-list = []"}, {"x": 401.0, "y": 744.0, "w": 1176.0, "h": 155.0, "line_num": 4, "text": "fore stry in string:"}, {"x": 667.0, "y": 972.0, "w": 1394.0, "h": 130.0, "line_num": 5, "text": "if stru startswith (\"a\") :"}, {"x": 928.0, "y": 1169.0, "w": 1302.0, "h": 126.0, "line_num": 6, "text": "filtered-string-lint: append"}, {"x": 2061.0, "y": 1260.0, "w": 174.0, "h": 118.0, "line_num": 7, "text": "(strc)"}, {"x": 403.0, "y": 1406.0, "w": 1481.0, "h": 125.0, "line_num": 8, "text": "returin filtered-string-list"}, {"x": 114.0, "y": 1678.0, "w": 2174.0, "h": 143.0, "line_num": 9, "text": "input_string = \\\"apple\", \"bunana\", \"avacado"}, {"x": 1067.0, "y": 1881.0, "w": 1032.0, "h": 138.0, "line_num": 10, "text": "\"chevery \" \"apriest \"]"}, {"x": 123.0, "y": 2070.0, "w": 2115.0, "h": 148.0, "line_num": 11, "text": "Output = filter- string-a (input_ string)"}, {"x": 132.0, "y": 2269.0, "w": 813.0, "h": 132.0, "line_num": 12, "text": "print (output)"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 198.125, "ir_algo_output_code": "def filter-string-a (string);\n    string. sort ()\n    filtered- string-list = []\n    fore stry in string:\n        if stru startswith (\"a\") :\n            filtered-string-lint: append\n                (strc)\n    returin filtered-string-list\ninput_string = \\\"apple\", \"bunana\", \"avacado\n            \"chevery \" \"apriest \"]\nOutput = filter- string-a (input_ string)\nprint (output)\n", "ir_algo_output_indented_lines": [{"x": 66.0, "y": 31.0, "w": 1573.0, "h": 130.0, "line_num": 1, "text": "def filter-string-a (string);", "cluster_label": 1, "indentation": 0}, {"x": 381.0, "y": 304.0, "w": 845.0, "h": 107.0, "line_num": 2, "text": "string. sort ()", "cluster_label": 0, "indentation": 1}, {"x": 403.0, "y": 493.0, "w": 1383.0, "h": 133.0, "line_num": 3, "text": "filtered- string-list = []", "cluster_label": 0, "indentation": 1}, {"x": 401.0, "y": 744.0, "w": 1176.0, "h": 155.0, "line_num": 4, "text": "fore stry in string:", "cluster_label": 0, "indentation": 1}, {"x": 667.0, "y": 972.0, "w": 1394.0, "h": 130.0, "line_num": 5, "text": "if stru startswith (\"a\") :", "cluster_label": 4, "indentation": 2}, {"x": 928.0, "y": 1169.0, "w": 1302.0, "h": 126.0, "line_num": 6, "text": "filtered-string-lint: append", "cluster_label": 2, "indentation": 3}, {"x": 2061.0, "y": 1260.0, "w": 174.0, "h": 118.0, "line_num": 7, "text": "(strc)", "cluster_label": 3, "indentation": 4}, {"x": 403.0, "y": 1406.0, "w": 1481.0, "h": 125.0, "line_num": 8, "text": "returin filtered-string-list", "cluster_label": 0, "indentation": 1}, {"x": 114.0, "y": 1678.0, "w": 2174.0, "h": 143.0, "line_num": 9, "text": "input_string = \\\"apple\", \"bunana\", \"avacado", "cluster_label": 1, "indentation": 0}, {"x": 1067.0, "y": 1881.0, "w": 1032.0, "h": 138.0, "line_num": 10, "text": "\"chevery \" \"apriest \"]", "cluster_label": 2, "indentation": 3}, {"x": 123.0, "y": 2070.0, "w": 2115.0, "h": 148.0, "line_num": 11, "text": "Output = filter- string-a (input_ string)", "cluster_label": 1, "indentation": 0}, {"x": 132.0, "y": 2269.0, "w": 813.0, "h": 132.0, "line_num": 12, "text": "print (output)", "cluster_label": 1, "indentation": 0}], "ir_algo_output_edit_distance": 92, "prompting_method": "simple-test3", "lm_post_processed_code": "def filter_string_a(string):\n    string.sort()\n    filtered_string_list = []\n    for stry in string:\n        if stry.startswith(\"a\"):\n            filtered_string_list.append(stry)\n    return filtered_string_list\ninput_string = [\"apple\", \"banana\", \"avocado\", \"cherry\", \"apricot\"]\noutput = filter_string_a(input_string)\nprint(output)\n", "lm_post_processed_edit_distance": 27}, {"image_id": 41, "image_height": 2456, "image_width": 2303, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 66.0, "y": 31.0, "w": 1573.0, "h": 130.0, "line_num": 1, "text": "def filter-string-a (string);"}, {"x": 381.0, "y": 304.0, "w": 845.0, "h": 107.0, "line_num": 2, "text": "string. sort ()"}, {"x": 403.0, "y": 493.0, "w": 1383.0, "h": 133.0, "line_num": 3, "text": "filtered- string-list = []"}, {"x": 401.0, "y": 744.0, "w": 1176.0, "h": 155.0, "line_num": 4, "text": "fore stry in string:"}, {"x": 667.0, "y": 972.0, "w": 1394.0, "h": 130.0, "line_num": 5, "text": "if stru startswith (\"a\") :"}, {"x": 928.0, "y": 1169.0, "w": 1302.0, "h": 126.0, "line_num": 6, "text": "filtered-string-lint: append"}, {"x": 2061.0, "y": 1260.0, "w": 174.0, "h": 118.0, "line_num": 7, "text": "(strc)"}, {"x": 403.0, "y": 1406.0, "w": 1481.0, "h": 125.0, "line_num": 8, "text": "returin filtered-string-list"}, {"x": 114.0, "y": 1678.0, "w": 2174.0, "h": 143.0, "line_num": 9, "text": "input_string = \\\"apple\", \"bunana\", \"avacado"}, {"x": 1067.0, "y": 1881.0, "w": 1032.0, "h": 138.0, "line_num": 10, "text": "\"chevery \" \"apriest \"]"}, {"x": 123.0, "y": 2070.0, "w": 2115.0, "h": 148.0, "line_num": 11, "text": "Output = filter- string-a (input_ string)"}, {"x": 132.0, "y": 2269.0, "w": 813.0, "h": 132.0, "line_num": 12, "text": "print (output)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def filter-string-a (string);\n    string. sort ()\n    filtered- string-list = []\n    fore stry in string:\n        if stru startswith (\"a\") :\n            filtered-string-lint: append\n                (strc)\n    returin filtered-string-list\ninput_string = \\\"apple\", \"bunana\", \"avacado\n    \"chevery \" \"apriest \"]\nOutput = filter- string-a (input_ string)\nprint (output)\n", "ir_algo_output_indented_lines": [{"x": 66.0, "y": 31.0, "w": 1573.0, "h": 130.0, "line_num": 1, "text": "def filter-string-a (string);", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 381.0, "y": 304.0, "w": 845.0, "h": 107.0, "line_num": 2, "text": "string. sort ()", "delta": 315.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 403.0, "y": 493.0, "w": 1383.0, "h": 133.0, "line_num": 3, "text": "filtered- string-list = []", "delta": 22.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 401.0, "y": 744.0, "w": 1176.0, "h": 155.0, "line_num": 4, "text": "fore stry in string:", "delta": -2.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 667.0, "y": 972.0, "w": 1394.0, "h": 130.0, "line_num": 5, "text": "if stru startswith (\"a\") :", "delta": 266.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 928.0, "y": 1169.0, "w": 1302.0, "h": 126.0, "line_num": 6, "text": "filtered-string-lint: append", "delta": 261.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 2061.0, "y": 1260.0, "w": 174.0, "h": 118.0, "line_num": 7, "text": "(strc)", "delta": 1133.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 4}, {"x": 403.0, "y": 1406.0, "w": 1481.0, "h": 125.0, "line_num": 8, "text": "returin filtered-string-list", "delta": -1658.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 114.0, "y": 1678.0, "w": 2174.0, "h": 143.0, "line_num": 9, "text": "input_string = \\\"apple\", \"bunana\", \"avacado", "delta": -289.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1067.0, "y": 1881.0, "w": 1032.0, "h": 138.0, "line_num": 10, "text": "\"chevery \" \"apriest \"]", "delta": 953.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 123.0, "y": 2070.0, "w": 2115.0, "h": 148.0, "line_num": 11, "text": "Output = filter- string-a (input_ string)", "delta": -944.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 132.0, "y": 2269.0, "w": 813.0, "h": 132.0, "line_num": 12, "text": "print (output)", "delta": 9.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}], "ir_algo_output_edit_distance": 84, "prompting_method": "none", "lm_post_processed_code": "def filter-string-a (string);\n    string. sort ()\n    filtered- string-list = []\n    fore stry in string:\n        if stru startswith (\"a\") :\n            filtered-string-lint: append\n                (strc)\n    returin filtered-string-list\ninput_string = \\\"apple\", \"bunana\", \"avacado\n    \"chevery \" \"apriest \"]\nOutput = filter- string-a (input_ string)\nprint (output)\n", "lm_post_processed_edit_distance": 84}, {"image_id": 41, "image_height": 2456, "image_width": 2303, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 66.0, "y": 31.0, "w": 1573.0, "h": 130.0, "line_num": 1, "text": "def filter-string-a (string);"}, {"x": 381.0, "y": 304.0, "w": 845.0, "h": 107.0, "line_num": 2, "text": "string. sort ()"}, {"x": 403.0, "y": 493.0, "w": 1383.0, "h": 133.0, "line_num": 3, "text": "filtered- string-list = []"}, {"x": 401.0, "y": 744.0, "w": 1176.0, "h": 155.0, "line_num": 4, "text": "fore stry in string:"}, {"x": 667.0, "y": 972.0, "w": 1394.0, "h": 130.0, "line_num": 5, "text": "if stru startswith (\"a\") :"}, {"x": 928.0, "y": 1169.0, "w": 1302.0, "h": 126.0, "line_num": 6, "text": "filtered-string-lint: append"}, {"x": 2061.0, "y": 1260.0, "w": 174.0, "h": 118.0, "line_num": 7, "text": "(strc)"}, {"x": 403.0, "y": 1406.0, "w": 1481.0, "h": 125.0, "line_num": 8, "text": "returin filtered-string-list"}, {"x": 114.0, "y": 1678.0, "w": 2174.0, "h": 143.0, "line_num": 9, "text": "input_string = \\\"apple\", \"bunana\", \"avacado"}, {"x": 1067.0, "y": 1881.0, "w": 1032.0, "h": 138.0, "line_num": 10, "text": "\"chevery \" \"apriest \"]"}, {"x": 123.0, "y": 2070.0, "w": 2115.0, "h": 148.0, "line_num": 11, "text": "Output = filter- string-a (input_ string)"}, {"x": 132.0, "y": 2269.0, "w": 813.0, "h": 132.0, "line_num": 12, "text": "print (output)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def filter-string-a (string);\n    string. sort ()\n    filtered- string-list = []\n    fore stry in string:\n        if stru startswith (\"a\") :\n            filtered-string-lint: append\n                (strc)\n    returin filtered-string-list\ninput_string = \\\"apple\", \"bunana\", \"avacado\n    \"chevery \" \"apriest \"]\nOutput = filter- string-a (input_ string)\nprint (output)\n", "ir_algo_output_indented_lines": [{"x": 66.0, "y": 31.0, "w": 1573.0, "h": 130.0, "line_num": 1, "text": "def filter-string-a (string);", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 381.0, "y": 304.0, "w": 845.0, "h": 107.0, "line_num": 2, "text": "string. sort ()", "delta": 315.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 403.0, "y": 493.0, "w": 1383.0, "h": 133.0, "line_num": 3, "text": "filtered- string-list = []", "delta": 22.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 401.0, "y": 744.0, "w": 1176.0, "h": 155.0, "line_num": 4, "text": "fore stry in string:", "delta": -2.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 667.0, "y": 972.0, "w": 1394.0, "h": 130.0, "line_num": 5, "text": "if stru startswith (\"a\") :", "delta": 266.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 928.0, "y": 1169.0, "w": 1302.0, "h": 126.0, "line_num": 6, "text": "filtered-string-lint: append", "delta": 261.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 2061.0, "y": 1260.0, "w": 174.0, "h": 118.0, "line_num": 7, "text": "(strc)", "delta": 1133.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 4}, {"x": 403.0, "y": 1406.0, "w": 1481.0, "h": 125.0, "line_num": 8, "text": "returin filtered-string-list", "delta": -1658.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 114.0, "y": 1678.0, "w": 2174.0, "h": 143.0, "line_num": 9, "text": "input_string = \\\"apple\", \"bunana\", \"avacado", "delta": -289.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1067.0, "y": 1881.0, "w": 1032.0, "h": 138.0, "line_num": 10, "text": "\"chevery \" \"apriest \"]", "delta": 953.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 123.0, "y": 2070.0, "w": 2115.0, "h": 148.0, "line_num": 11, "text": "Output = filter- string-a (input_ string)", "delta": -944.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 132.0, "y": 2269.0, "w": 813.0, "h": 132.0, "line_num": 12, "text": "print (output)", "delta": 9.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}], "ir_algo_output_edit_distance": 84, "prompting_method": "cot-test1", "lm_post_processed_code": "def filter_string_a (string):\n    string.sort ()\n    filtered_string_list = []\n    for stry in string:\n        if stry.startswith (\"a\") :\n            filtered_string_list.append(stry)\n    return filtered_string_list\ninput_string = [\"apple\", \"banana\", \"avocado\", \"cherry\", \"apricot\"]\noutput = filter_string_a (input_string)\nprint (output)\n", "lm_post_processed_edit_distance": 33}, {"image_id": 41, "image_height": 2456, "image_width": 2303, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 66.0, "y": 31.0, "w": 1573.0, "h": 130.0, "line_num": 1, "text": "def filter-string-a (string);"}, {"x": 381.0, "y": 304.0, "w": 845.0, "h": 107.0, "line_num": 2, "text": "string. sort ()"}, {"x": 403.0, "y": 493.0, "w": 1383.0, "h": 133.0, "line_num": 3, "text": "filtered- string-list = []"}, {"x": 401.0, "y": 744.0, "w": 1176.0, "h": 155.0, "line_num": 4, "text": "fore stry in string:"}, {"x": 667.0, "y": 972.0, "w": 1394.0, "h": 130.0, "line_num": 5, "text": "if stru startswith (\"a\") :"}, {"x": 928.0, "y": 1169.0, "w": 1302.0, "h": 126.0, "line_num": 6, "text": "filtered-string-lint: append"}, {"x": 2061.0, "y": 1260.0, "w": 174.0, "h": 118.0, "line_num": 7, "text": "(strc)"}, {"x": 403.0, "y": 1406.0, "w": 1481.0, "h": 125.0, "line_num": 8, "text": "returin filtered-string-list"}, {"x": 114.0, "y": 1678.0, "w": 2174.0, "h": 143.0, "line_num": 9, "text": "input_string = \\\"apple\", \"bunana\", \"avacado"}, {"x": 1067.0, "y": 1881.0, "w": 1032.0, "h": 138.0, "line_num": 10, "text": "\"chevery \" \"apriest \"]"}, {"x": 123.0, "y": 2070.0, "w": 2115.0, "h": 148.0, "line_num": 11, "text": "Output = filter- string-a (input_ string)"}, {"x": 132.0, "y": 2269.0, "w": 813.0, "h": 132.0, "line_num": 12, "text": "print (output)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def filter-string-a (string);\n    string. sort ()\n    filtered- string-list = []\n    fore stry in string:\n        if stru startswith (\"a\") :\n            filtered-string-lint: append\n                (strc)\n    returin filtered-string-list\ninput_string = \\\"apple\", \"bunana\", \"avacado\n    \"chevery \" \"apriest \"]\nOutput = filter- string-a (input_ string)\nprint (output)\n", "ir_algo_output_indented_lines": [{"x": 66.0, "y": 31.0, "w": 1573.0, "h": 130.0, "line_num": 1, "text": "def filter-string-a (string);", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 381.0, "y": 304.0, "w": 845.0, "h": 107.0, "line_num": 2, "text": "string. sort ()", "delta": 315.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 403.0, "y": 493.0, "w": 1383.0, "h": 133.0, "line_num": 3, "text": "filtered- string-list = []", "delta": 22.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 401.0, "y": 744.0, "w": 1176.0, "h": 155.0, "line_num": 4, "text": "fore stry in string:", "delta": -2.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 667.0, "y": 972.0, "w": 1394.0, "h": 130.0, "line_num": 5, "text": "if stru startswith (\"a\") :", "delta": 266.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 928.0, "y": 1169.0, "w": 1302.0, "h": 126.0, "line_num": 6, "text": "filtered-string-lint: append", "delta": 261.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 2061.0, "y": 1260.0, "w": 174.0, "h": 118.0, "line_num": 7, "text": "(strc)", "delta": 1133.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 4}, {"x": 403.0, "y": 1406.0, "w": 1481.0, "h": 125.0, "line_num": 8, "text": "returin filtered-string-list", "delta": -1658.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 114.0, "y": 1678.0, "w": 2174.0, "h": 143.0, "line_num": 9, "text": "input_string = \\\"apple\", \"bunana\", \"avacado", "delta": -289.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1067.0, "y": 1881.0, "w": 1032.0, "h": 138.0, "line_num": 10, "text": "\"chevery \" \"apriest \"]", "delta": 953.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 123.0, "y": 2070.0, "w": 2115.0, "h": 148.0, "line_num": 11, "text": "Output = filter- string-a (input_ string)", "delta": -944.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 132.0, "y": 2269.0, "w": 813.0, "h": 132.0, "line_num": 12, "text": "print (output)", "delta": 9.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}], "ir_algo_output_edit_distance": 84, "prompting_method": "cot-test5", "lm_post_processed_code": "def filter_string_a(string):\n    string.sort()\n    filtered_string_list = []\n    for stry in string:\n        if stry.startswith(\"a\"):\n            filtered_string_list.append(stry)\n    return filtered_string_list\ninput_string = [\"apple\", \"banana\", \"avocado\", \"cherry\", \"apricot\"]\noutput = filter_string_a(input_string)\nprint(output)\n", "lm_post_processed_edit_distance": 27}, {"image_id": 41, "image_height": 2456, "image_width": 2303, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 66.0, "y": 31.0, "w": 1573.0, "h": 130.0, "line_num": 1, "text": "def filter-string-a (string);"}, {"x": 381.0, "y": 304.0, "w": 845.0, "h": 107.0, "line_num": 2, "text": "string. sort ()"}, {"x": 403.0, "y": 493.0, "w": 1383.0, "h": 133.0, "line_num": 3, "text": "filtered- string-list = []"}, {"x": 401.0, "y": 744.0, "w": 1176.0, "h": 155.0, "line_num": 4, "text": "fore stry in string:"}, {"x": 667.0, "y": 972.0, "w": 1394.0, "h": 130.0, "line_num": 5, "text": "if stru startswith (\"a\") :"}, {"x": 928.0, "y": 1169.0, "w": 1302.0, "h": 126.0, "line_num": 6, "text": "filtered-string-lint: append"}, {"x": 2061.0, "y": 1260.0, "w": 174.0, "h": 118.0, "line_num": 7, "text": "(strc)"}, {"x": 403.0, "y": 1406.0, "w": 1481.0, "h": 125.0, "line_num": 8, "text": "returin filtered-string-list"}, {"x": 114.0, "y": 1678.0, "w": 2174.0, "h": 143.0, "line_num": 9, "text": "input_string = \\\"apple\", \"bunana\", \"avacado"}, {"x": 1067.0, "y": 1881.0, "w": 1032.0, "h": 138.0, "line_num": 10, "text": "\"chevery \" \"apriest \"]"}, {"x": 123.0, "y": 2070.0, "w": 2115.0, "h": 148.0, "line_num": 11, "text": "Output = filter- string-a (input_ string)"}, {"x": 132.0, "y": 2269.0, "w": 813.0, "h": 132.0, "line_num": 12, "text": "print (output)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def filter-string-a (string);\n    string. sort ()\n    filtered- string-list = []\n    fore stry in string:\n        if stru startswith (\"a\") :\n            filtered-string-lint: append\n                (strc)\n    returin filtered-string-list\ninput_string = \\\"apple\", \"bunana\", \"avacado\n    \"chevery \" \"apriest \"]\nOutput = filter- string-a (input_ string)\nprint (output)\n", "ir_algo_output_indented_lines": [{"x": 66.0, "y": 31.0, "w": 1573.0, "h": 130.0, "line_num": 1, "text": "def filter-string-a (string);", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 381.0, "y": 304.0, "w": 845.0, "h": 107.0, "line_num": 2, "text": "string. sort ()", "delta": 315.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 403.0, "y": 493.0, "w": 1383.0, "h": 133.0, "line_num": 3, "text": "filtered- string-list = []", "delta": 22.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 401.0, "y": 744.0, "w": 1176.0, "h": 155.0, "line_num": 4, "text": "fore stry in string:", "delta": -2.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 667.0, "y": 972.0, "w": 1394.0, "h": 130.0, "line_num": 5, "text": "if stru startswith (\"a\") :", "delta": 266.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 928.0, "y": 1169.0, "w": 1302.0, "h": 126.0, "line_num": 6, "text": "filtered-string-lint: append", "delta": 261.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 2061.0, "y": 1260.0, "w": 174.0, "h": 118.0, "line_num": 7, "text": "(strc)", "delta": 1133.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 4}, {"x": 403.0, "y": 1406.0, "w": 1481.0, "h": 125.0, "line_num": 8, "text": "returin filtered-string-list", "delta": -1658.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 114.0, "y": 1678.0, "w": 2174.0, "h": 143.0, "line_num": 9, "text": "input_string = \\\"apple\", \"bunana\", \"avacado", "delta": -289.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1067.0, "y": 1881.0, "w": 1032.0, "h": 138.0, "line_num": 10, "text": "\"chevery \" \"apriest \"]", "delta": 953.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 123.0, "y": 2070.0, "w": 2115.0, "h": 148.0, "line_num": 11, "text": "Output = filter- string-a (input_ string)", "delta": -944.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 132.0, "y": 2269.0, "w": 813.0, "h": 132.0, "line_num": 12, "text": "print (output)", "delta": 9.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}], "ir_algo_output_edit_distance": 84, "prompting_method": "simple-test2", "lm_post_processed_code": "def filter_string_a(string):\n    string.sort()\n    filtered_string_list = []\n    for stry in string:\n        if stry.startswith(\"a\"):\n            filtered_string_list.append(stry)\n    return filtered_string_list\ninput_string = [\"apple\", \"banana\", \"avocado\", \"cherry\", \"apricot\"]\noutput = filter_string_a(input_string)\nprint(output)\n", "lm_post_processed_edit_distance": 27}, {"image_id": 41, "image_height": 2456, "image_width": 2303, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 66.0, "y": 31.0, "w": 1573.0, "h": 130.0, "line_num": 1, "text": "def filter-string-a (string);"}, {"x": 381.0, "y": 304.0, "w": 845.0, "h": 107.0, "line_num": 2, "text": "string. sort ()"}, {"x": 403.0, "y": 493.0, "w": 1383.0, "h": 133.0, "line_num": 3, "text": "filtered- string-list = []"}, {"x": 401.0, "y": 744.0, "w": 1176.0, "h": 155.0, "line_num": 4, "text": "fore stry in string:"}, {"x": 667.0, "y": 972.0, "w": 1394.0, "h": 130.0, "line_num": 5, "text": "if stru startswith (\"a\") :"}, {"x": 928.0, "y": 1169.0, "w": 1302.0, "h": 126.0, "line_num": 6, "text": "filtered-string-lint: append"}, {"x": 2061.0, "y": 1260.0, "w": 174.0, "h": 118.0, "line_num": 7, "text": "(strc)"}, {"x": 403.0, "y": 1406.0, "w": 1481.0, "h": 125.0, "line_num": 8, "text": "returin filtered-string-list"}, {"x": 114.0, "y": 1678.0, "w": 2174.0, "h": 143.0, "line_num": 9, "text": "input_string = \\\"apple\", \"bunana\", \"avacado"}, {"x": 1067.0, "y": 1881.0, "w": 1032.0, "h": 138.0, "line_num": 10, "text": "\"chevery \" \"apriest \"]"}, {"x": 123.0, "y": 2070.0, "w": 2115.0, "h": 148.0, "line_num": 11, "text": "Output = filter- string-a (input_ string)"}, {"x": 132.0, "y": 2269.0, "w": 813.0, "h": 132.0, "line_num": 12, "text": "print (output)"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def filter-string-a (string);\n    string. sort ()\n    filtered- string-list = []\n    fore stry in string:\n        if stru startswith (\"a\") :\n            filtered-string-lint: append\n                (strc)\n    returin filtered-string-list\ninput_string = \\\"apple\", \"bunana\", \"avacado\n    \"chevery \" \"apriest \"]\nOutput = filter- string-a (input_ string)\nprint (output)\n", "ir_algo_output_indented_lines": [{"x": 66.0, "y": 31.0, "w": 1573.0, "h": 130.0, "line_num": 1, "text": "def filter-string-a (string);", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 381.0, "y": 304.0, "w": 845.0, "h": 107.0, "line_num": 2, "text": "string. sort ()", "delta": 315.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 403.0, "y": 493.0, "w": 1383.0, "h": 133.0, "line_num": 3, "text": "filtered- string-list = []", "delta": 22.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 401.0, "y": 744.0, "w": 1176.0, "h": 155.0, "line_num": 4, "text": "fore stry in string:", "delta": -2.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 667.0, "y": 972.0, "w": 1394.0, "h": 130.0, "line_num": 5, "text": "if stru startswith (\"a\") :", "delta": 266.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 928.0, "y": 1169.0, "w": 1302.0, "h": 126.0, "line_num": 6, "text": "filtered-string-lint: append", "delta": 261.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 2061.0, "y": 1260.0, "w": 174.0, "h": 118.0, "line_num": 7, "text": "(strc)", "delta": 1133.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 4}, {"x": 403.0, "y": 1406.0, "w": 1481.0, "h": 125.0, "line_num": 8, "text": "returin filtered-string-list", "delta": -1658.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 114.0, "y": 1678.0, "w": 2174.0, "h": 143.0, "line_num": 9, "text": "input_string = \\\"apple\", \"bunana\", \"avacado", "delta": -289.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1067.0, "y": 1881.0, "w": 1032.0, "h": 138.0, "line_num": 10, "text": "\"chevery \" \"apriest \"]", "delta": 953.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 123.0, "y": 2070.0, "w": 2115.0, "h": 148.0, "line_num": 11, "text": "Output = filter- string-a (input_ string)", "delta": -944.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 132.0, "y": 2269.0, "w": 813.0, "h": 132.0, "line_num": 12, "text": "print (output)", "delta": 9.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}], "ir_algo_output_edit_distance": 84, "prompting_method": "simple-test3", "lm_post_processed_code": "def filter_string_a(string):\n    string.sort()\n    filtered_string_list = []\n    for stry in string:\n        if stry.startswith(\"a\"):\n            filtered_string_list.append(stry)\n    return filtered_string_list\ninput_string = [\"apple\", \"banana\", \"avocado\", \"cherry\", \"apricot\"]\noutput = filter_string_a(input_string)\nprint(output)\n", "lm_post_processed_edit_distance": 27}, {"image_id": 42, "image_height": 4032, "image_width": 2268, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 255.0, "y": 1006.0, "w": 588.0, "h": 137.0, "line_num": 1, "text": "def main :"}, {"x": 489.0, "y": 1176.0, "w": 1387.0, "h": 140.0, "line_num": 2, "text": "While front- is-clear():"}, {"x": 738.0, "y": 1376.0, "w": 446.0, "h": 123.0, "line_num": 3, "text": "move ( )"}, {"x": 466.0, "y": 1521.0, "w": 1354.0, "h": 141.0, "line_num": 4, "text": "if front_is_blocked ()."}, {"x": 670.0, "y": 1705.0, "w": 852.0, "h": 115.0, "line_num": 5, "text": "turn-around ()"}, {"x": 477.0, "y": 1880.0, "w": 464.0, "h": 106.0, "line_num": 6, "text": "move ()"}, {"x": 484.0, "y": 2032.0, "w": 678.0, "h": 128.0, "line_num": 7, "text": "turn_left ( )"}, {"x": 477.0, "y": 2189.0, "w": 491.0, "h": 132.0, "line_num": 8, "text": "move ()"}, {"x": 486.0, "y": 2360.0, "w": 903.0, "h": 133.0, "line_num": 9, "text": "pick-beeper ( )"}, {"x": 485.0, "y": 2519.0, "w": 761.0, "h": 136.0, "line_num": 10, "text": "turn- left ()"}, {"x": 485.0, "y": 2678.0, "w": 827.0, "h": 132.0, "line_num": 11, "text": "turn_left ()"}, {"x": 488.0, "y": 2834.0, "w": 1511.0, "h": 144.0, "line_num": 12, "text": "while front_is_ clear ()!"}, {"x": 744.0, "y": 3012.0, "w": 476.0, "h": 129.0, "line_num": 13, "text": "move ()"}, {"x": 487.0, "y": 3165.0, "w": 1315.0, "h": 146.0, "line_num": 14, "text": "if front_ is_ blocked ( )."}, {"x": 722.0, "y": 3319.0, "w": 833.0, "h": 129.0, "line_num": 15, "text": "turn - around ( )"}, {"x": 510.0, "y": 3492.0, "w": 480.0, "h": 121.0, "line_num": 16, "text": "move ( )"}, {"x": 538.0, "y": 3576.0, "w": 936.0, "h": 120.0, "line_num": 17, "text": "turn around ()"}, {"x": 182.0, "y": 3735.0, "w": 1060.0, "h": 122.0, "line_num": 18, "text": "def turn-around ()."}, {"x": 493.0, "y": 3832.0, "w": 1027.0, "h": 102.0, "line_num": 19, "text": "for i in range (3)"}, {"x": 1092.0, "y": 3931.0, "w": 422.0, "h": 97.0, "line_num": 20, "text": "Left ()"}], "ir_algo_name": "none", "ir_algo_output_code": "def main :\nWhile front- is-clear():\nmove ( )\nif front_is_blocked ().\nturn-around ()\nmove ()\nturn_left ( )\nmove ()\npick-beeper ( )\nturn- left ()\nturn_left ()\nwhile front_is_ clear ()!\nmove ()\nif front_ is_ blocked ( ).\nturn - around ( )\nmove ( )\nturn around ()\ndef turn-around ().\nfor i in range (3)\nLeft ()", "ir_algo_output_edit_distance": 112, "prompting_method": "none", "lm_post_processed_code": "def main :\nWhile front- is-clear():\nmove ( )\nif front_is_blocked ().\nturn-around ()\nmove ()\nturn_left ( )\nmove ()\npick-beeper ( )\nturn- left ()\nturn_left ()\nwhile front_is_ clear ()!\nmove ()\nif front_ is_ blocked ( ).\nturn - around ( )\nmove ( )\nturn around ()\ndef turn-around ().\nfor i in range (3)\nLeft ()", "lm_post_processed_edit_distance": 112}, {"image_id": 42, "image_height": 4032, "image_width": 2268, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 255.0, "y": 1006.0, "w": 588.0, "h": 137.0, "line_num": 1, "text": "def main :"}, {"x": 489.0, "y": 1176.0, "w": 1387.0, "h": 140.0, "line_num": 2, "text": "While front- is-clear():"}, {"x": 738.0, "y": 1376.0, "w": 446.0, "h": 123.0, "line_num": 3, "text": "move ( )"}, {"x": 466.0, "y": 1521.0, "w": 1354.0, "h": 141.0, "line_num": 4, "text": "if front_is_blocked ()."}, {"x": 670.0, "y": 1705.0, "w": 852.0, "h": 115.0, "line_num": 5, "text": "turn-around ()"}, {"x": 477.0, "y": 1880.0, "w": 464.0, "h": 106.0, "line_num": 6, "text": "move ()"}, {"x": 484.0, "y": 2032.0, "w": 678.0, "h": 128.0, "line_num": 7, "text": "turn_left ( )"}, {"x": 477.0, "y": 2189.0, "w": 491.0, "h": 132.0, "line_num": 8, "text": "move ()"}, {"x": 486.0, "y": 2360.0, "w": 903.0, "h": 133.0, "line_num": 9, "text": "pick-beeper ( )"}, {"x": 485.0, "y": 2519.0, "w": 761.0, "h": 136.0, "line_num": 10, "text": "turn- left ()"}, {"x": 485.0, "y": 2678.0, "w": 827.0, "h": 132.0, "line_num": 11, "text": "turn_left ()"}, {"x": 488.0, "y": 2834.0, "w": 1511.0, "h": 144.0, "line_num": 12, "text": "while front_is_ clear ()!"}, {"x": 744.0, "y": 3012.0, "w": 476.0, "h": 129.0, "line_num": 13, "text": "move ()"}, {"x": 487.0, "y": 3165.0, "w": 1315.0, "h": 146.0, "line_num": 14, "text": "if front_ is_ blocked ( )."}, {"x": 722.0, "y": 3319.0, "w": 833.0, "h": 129.0, "line_num": 15, "text": "turn - around ( )"}, {"x": 510.0, "y": 3492.0, "w": 480.0, "h": 121.0, "line_num": 16, "text": "move ( )"}, {"x": 538.0, "y": 3576.0, "w": 936.0, "h": 120.0, "line_num": 17, "text": "turn around ()"}, {"x": 182.0, "y": 3735.0, "w": 1060.0, "h": 122.0, "line_num": 18, "text": "def turn-around ()."}, {"x": 493.0, "y": 3832.0, "w": 1027.0, "h": 102.0, "line_num": 19, "text": "for i in range (3)"}, {"x": 1092.0, "y": 3931.0, "w": 422.0, "h": 97.0, "line_num": 20, "text": "Left ()"}], "ir_algo_name": "none", "ir_algo_output_code": "def main :\nWhile front- is-clear():\nmove ( )\nif front_is_blocked ().\nturn-around ()\nmove ()\nturn_left ( )\nmove ()\npick-beeper ( )\nturn- left ()\nturn_left ()\nwhile front_is_ clear ()!\nmove ()\nif front_ is_ blocked ( ).\nturn - around ( )\nmove ( )\nturn around ()\ndef turn-around ().\nfor i in range (3)\nLeft ()", "ir_algo_output_edit_distance": 112, "prompting_method": "cot-test1", "lm_post_processed_code": "def main :\nWhile front_is_clear():\nmove ( )\nif front_is_blocked ():\nturn_around ()\nmove ()\nturn_left ( )\nmove ()\npick_beeper ( )\nturn_left ()\nturn_left ()\nwhile front_is_clear ():\nmove ()\nif front_is_blocked ():\nturn_around ( )\nmove ( )\nturn_around ()\n\ndef turn_around ():\nfor i in range (3):\nleft ()\n", "lm_post_processed_edit_distance": 91}, {"image_id": 42, "image_height": 4032, "image_width": 2268, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 255.0, "y": 1006.0, "w": 588.0, "h": 137.0, "line_num": 1, "text": "def main :"}, {"x": 489.0, "y": 1176.0, "w": 1387.0, "h": 140.0, "line_num": 2, "text": "While front- is-clear():"}, {"x": 738.0, "y": 1376.0, "w": 446.0, "h": 123.0, "line_num": 3, "text": "move ( )"}, {"x": 466.0, "y": 1521.0, "w": 1354.0, "h": 141.0, "line_num": 4, "text": "if front_is_blocked ()."}, {"x": 670.0, "y": 1705.0, "w": 852.0, "h": 115.0, "line_num": 5, "text": "turn-around ()"}, {"x": 477.0, "y": 1880.0, "w": 464.0, "h": 106.0, "line_num": 6, "text": "move ()"}, {"x": 484.0, "y": 2032.0, "w": 678.0, "h": 128.0, "line_num": 7, "text": "turn_left ( )"}, {"x": 477.0, "y": 2189.0, "w": 491.0, "h": 132.0, "line_num": 8, "text": "move ()"}, {"x": 486.0, "y": 2360.0, "w": 903.0, "h": 133.0, "line_num": 9, "text": "pick-beeper ( )"}, {"x": 485.0, "y": 2519.0, "w": 761.0, "h": 136.0, "line_num": 10, "text": "turn- left ()"}, {"x": 485.0, "y": 2678.0, "w": 827.0, "h": 132.0, "line_num": 11, "text": "turn_left ()"}, {"x": 488.0, "y": 2834.0, "w": 1511.0, "h": 144.0, "line_num": 12, "text": "while front_is_ clear ()!"}, {"x": 744.0, "y": 3012.0, "w": 476.0, "h": 129.0, "line_num": 13, "text": "move ()"}, {"x": 487.0, "y": 3165.0, "w": 1315.0, "h": 146.0, "line_num": 14, "text": "if front_ is_ blocked ( )."}, {"x": 722.0, "y": 3319.0, "w": 833.0, "h": 129.0, "line_num": 15, "text": "turn - around ( )"}, {"x": 510.0, "y": 3492.0, "w": 480.0, "h": 121.0, "line_num": 16, "text": "move ( )"}, {"x": 538.0, "y": 3576.0, "w": 936.0, "h": 120.0, "line_num": 17, "text": "turn around ()"}, {"x": 182.0, "y": 3735.0, "w": 1060.0, "h": 122.0, "line_num": 18, "text": "def turn-around ()."}, {"x": 493.0, "y": 3832.0, "w": 1027.0, "h": 102.0, "line_num": 19, "text": "for i in range (3)"}, {"x": 1092.0, "y": 3931.0, "w": 422.0, "h": 97.0, "line_num": 20, "text": "Left ()"}], "ir_algo_name": "none", "ir_algo_output_code": "def main :\nWhile front- is-clear():\nmove ( )\nif front_is_blocked ().\nturn-around ()\nmove ()\nturn_left ( )\nmove ()\npick-beeper ( )\nturn- left ()\nturn_left ()\nwhile front_is_ clear ()!\nmove ()\nif front_ is_ blocked ( ).\nturn - around ( )\nmove ( )\nturn around ()\ndef turn-around ().\nfor i in range (3)\nLeft ()", "ir_algo_output_edit_distance": 112, "prompting_method": "cot-test5", "lm_post_processed_code": "def main:\n    while front_is_clear():\n        move()\n    if front_is_blocked():\n        turn_around()\n        move()\n        turn_left()\n        move()\n        pick_beeper()\n        turn_left()\n        turn_left()\n    while front_is_clear():\n        move()\n    if front_is_blocked():\n        turn_around()\n        move()\n        turn_around()\n\ndef turn_around():\n    for i in range(3):\n        Left()\n", "lm_post_processed_edit_distance": 74}, {"image_id": 42, "image_height": 4032, "image_width": 2268, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 255.0, "y": 1006.0, "w": 588.0, "h": 137.0, "line_num": 1, "text": "def main :"}, {"x": 489.0, "y": 1176.0, "w": 1387.0, "h": 140.0, "line_num": 2, "text": "While front- is-clear():"}, {"x": 738.0, "y": 1376.0, "w": 446.0, "h": 123.0, "line_num": 3, "text": "move ( )"}, {"x": 466.0, "y": 1521.0, "w": 1354.0, "h": 141.0, "line_num": 4, "text": "if front_is_blocked ()."}, {"x": 670.0, "y": 1705.0, "w": 852.0, "h": 115.0, "line_num": 5, "text": "turn-around ()"}, {"x": 477.0, "y": 1880.0, "w": 464.0, "h": 106.0, "line_num": 6, "text": "move ()"}, {"x": 484.0, "y": 2032.0, "w": 678.0, "h": 128.0, "line_num": 7, "text": "turn_left ( )"}, {"x": 477.0, "y": 2189.0, "w": 491.0, "h": 132.0, "line_num": 8, "text": "move ()"}, {"x": 486.0, "y": 2360.0, "w": 903.0, "h": 133.0, "line_num": 9, "text": "pick-beeper ( )"}, {"x": 485.0, "y": 2519.0, "w": 761.0, "h": 136.0, "line_num": 10, "text": "turn- left ()"}, {"x": 485.0, "y": 2678.0, "w": 827.0, "h": 132.0, "line_num": 11, "text": "turn_left ()"}, {"x": 488.0, "y": 2834.0, "w": 1511.0, "h": 144.0, "line_num": 12, "text": "while front_is_ clear ()!"}, {"x": 744.0, "y": 3012.0, "w": 476.0, "h": 129.0, "line_num": 13, "text": "move ()"}, {"x": 487.0, "y": 3165.0, "w": 1315.0, "h": 146.0, "line_num": 14, "text": "if front_ is_ blocked ( )."}, {"x": 722.0, "y": 3319.0, "w": 833.0, "h": 129.0, "line_num": 15, "text": "turn - around ( )"}, {"x": 510.0, "y": 3492.0, "w": 480.0, "h": 121.0, "line_num": 16, "text": "move ( )"}, {"x": 538.0, "y": 3576.0, "w": 936.0, "h": 120.0, "line_num": 17, "text": "turn around ()"}, {"x": 182.0, "y": 3735.0, "w": 1060.0, "h": 122.0, "line_num": 18, "text": "def turn-around ()."}, {"x": 493.0, "y": 3832.0, "w": 1027.0, "h": 102.0, "line_num": 19, "text": "for i in range (3)"}, {"x": 1092.0, "y": 3931.0, "w": 422.0, "h": 97.0, "line_num": 20, "text": "Left ()"}], "ir_algo_name": "none", "ir_algo_output_code": "def main :\nWhile front- is-clear():\nmove ( )\nif front_is_blocked ().\nturn-around ()\nmove ()\nturn_left ( )\nmove ()\npick-beeper ( )\nturn- left ()\nturn_left ()\nwhile front_is_ clear ()!\nmove ()\nif front_ is_ blocked ( ).\nturn - around ( )\nmove ( )\nturn around ()\ndef turn-around ().\nfor i in range (3)\nLeft ()", "ir_algo_output_edit_distance": 112, "prompting_method": "simple-test2", "lm_post_processed_code": "def main():\n    while front_is_clear():\n        move()\n    if front_is_blocked():\n        turn_around()\n        move()\n        turn_left()\n        move()\n        pick_beeper()\n        turn_left()\n        turn_left()\n    while front_is_clear():\n        move()\n    if front_is_blocked():\n        turn_around()\n        move()\n        turn_around()\n\ndef turn_around():\n    for i in range(3):\n        left()\n", "lm_post_processed_edit_distance": 71}, {"image_id": 42, "image_height": 4032, "image_width": 2268, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 255.0, "y": 1006.0, "w": 588.0, "h": 137.0, "line_num": 1, "text": "def main :"}, {"x": 489.0, "y": 1176.0, "w": 1387.0, "h": 140.0, "line_num": 2, "text": "While front- is-clear():"}, {"x": 738.0, "y": 1376.0, "w": 446.0, "h": 123.0, "line_num": 3, "text": "move ( )"}, {"x": 466.0, "y": 1521.0, "w": 1354.0, "h": 141.0, "line_num": 4, "text": "if front_is_blocked ()."}, {"x": 670.0, "y": 1705.0, "w": 852.0, "h": 115.0, "line_num": 5, "text": "turn-around ()"}, {"x": 477.0, "y": 1880.0, "w": 464.0, "h": 106.0, "line_num": 6, "text": "move ()"}, {"x": 484.0, "y": 2032.0, "w": 678.0, "h": 128.0, "line_num": 7, "text": "turn_left ( )"}, {"x": 477.0, "y": 2189.0, "w": 491.0, "h": 132.0, "line_num": 8, "text": "move ()"}, {"x": 486.0, "y": 2360.0, "w": 903.0, "h": 133.0, "line_num": 9, "text": "pick-beeper ( )"}, {"x": 485.0, "y": 2519.0, "w": 761.0, "h": 136.0, "line_num": 10, "text": "turn- left ()"}, {"x": 485.0, "y": 2678.0, "w": 827.0, "h": 132.0, "line_num": 11, "text": "turn_left ()"}, {"x": 488.0, "y": 2834.0, "w": 1511.0, "h": 144.0, "line_num": 12, "text": "while front_is_ clear ()!"}, {"x": 744.0, "y": 3012.0, "w": 476.0, "h": 129.0, "line_num": 13, "text": "move ()"}, {"x": 487.0, "y": 3165.0, "w": 1315.0, "h": 146.0, "line_num": 14, "text": "if front_ is_ blocked ( )."}, {"x": 722.0, "y": 3319.0, "w": 833.0, "h": 129.0, "line_num": 15, "text": "turn - around ( )"}, {"x": 510.0, "y": 3492.0, "w": 480.0, "h": 121.0, "line_num": 16, "text": "move ( )"}, {"x": 538.0, "y": 3576.0, "w": 936.0, "h": 120.0, "line_num": 17, "text": "turn around ()"}, {"x": 182.0, "y": 3735.0, "w": 1060.0, "h": 122.0, "line_num": 18, "text": "def turn-around ()."}, {"x": 493.0, "y": 3832.0, "w": 1027.0, "h": 102.0, "line_num": 19, "text": "for i in range (3)"}, {"x": 1092.0, "y": 3931.0, "w": 422.0, "h": 97.0, "line_num": 20, "text": "Left ()"}], "ir_algo_name": "none", "ir_algo_output_code": "def main :\nWhile front- is-clear():\nmove ( )\nif front_is_blocked ().\nturn-around ()\nmove ()\nturn_left ( )\nmove ()\npick-beeper ( )\nturn- left ()\nturn_left ()\nwhile front_is_ clear ()!\nmove ()\nif front_ is_ blocked ( ).\nturn - around ( )\nmove ( )\nturn around ()\ndef turn-around ().\nfor i in range (3)\nLeft ()", "ir_algo_output_edit_distance": 112, "prompting_method": "simple-test3", "lm_post_processed_code": "def main():\n    while front_is_clear():\n        move()\n    if front_is_blocked():\n        turn_around()\n        move()\n        turn_left()\n        move()\n        pick_beeper()\n        turn_left()\n        turn_left()\n    while front_is_clear():\n        move()\n    if front_is_blocked():\n        turn_around()\n        move()\n        turn_around()\n\ndef turn_around():\n    for i in range(3):\n        left()\n", "lm_post_processed_edit_distance": 71}, {"image_id": 42, "image_height": 4032, "image_width": 2268, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 255.0, "y": 1006.0, "w": 588.0, "h": 137.0, "line_num": 1, "text": "def main :"}, {"x": 489.0, "y": 1176.0, "w": 1387.0, "h": 140.0, "line_num": 2, "text": "While front- is-clear():"}, {"x": 738.0, "y": 1376.0, "w": 446.0, "h": 123.0, "line_num": 3, "text": "move ( )"}, {"x": 466.0, "y": 1521.0, "w": 1354.0, "h": 141.0, "line_num": 4, "text": "if front_is_blocked ()."}, {"x": 670.0, "y": 1705.0, "w": 852.0, "h": 115.0, "line_num": 5, "text": "turn-around ()"}, {"x": 477.0, "y": 1880.0, "w": 464.0, "h": 106.0, "line_num": 6, "text": "move ()"}, {"x": 484.0, "y": 2032.0, "w": 678.0, "h": 128.0, "line_num": 7, "text": "turn_left ( )"}, {"x": 477.0, "y": 2189.0, "w": 491.0, "h": 132.0, "line_num": 8, "text": "move ()"}, {"x": 486.0, "y": 2360.0, "w": 903.0, "h": 133.0, "line_num": 9, "text": "pick-beeper ( )"}, {"x": 485.0, "y": 2519.0, "w": 761.0, "h": 136.0, "line_num": 10, "text": "turn- left ()"}, {"x": 485.0, "y": 2678.0, "w": 827.0, "h": 132.0, "line_num": 11, "text": "turn_left ()"}, {"x": 488.0, "y": 2834.0, "w": 1511.0, "h": 144.0, "line_num": 12, "text": "while front_is_ clear ()!"}, {"x": 744.0, "y": 3012.0, "w": 476.0, "h": 129.0, "line_num": 13, "text": "move ()"}, {"x": 487.0, "y": 3165.0, "w": 1315.0, "h": 146.0, "line_num": 14, "text": "if front_ is_ blocked ( )."}, {"x": 722.0, "y": 3319.0, "w": 833.0, "h": 129.0, "line_num": 15, "text": "turn - around ( )"}, {"x": 510.0, "y": 3492.0, "w": 480.0, "h": 121.0, "line_num": 16, "text": "move ( )"}, {"x": 538.0, "y": 3576.0, "w": 936.0, "h": 120.0, "line_num": 17, "text": "turn around ()"}, {"x": 182.0, "y": 3735.0, "w": 1060.0, "h": 122.0, "line_num": 18, "text": "def turn-around ()."}, {"x": 493.0, "y": 3832.0, "w": 1027.0, "h": 102.0, "line_num": 19, "text": "for i in range (3)"}, {"x": 1092.0, "y": 3931.0, "w": 422.0, "h": 97.0, "line_num": 20, "text": "Left ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 189.97500000000002, "ir_algo_output_code": "def main :\n    While front- is-clear():\n    move ( )\n    if front_is_blocked ().\n    turn-around ()\n    move ()\n    turn_left ( )\n    move ()\n    pick-beeper ( )\n    turn- left ()\n    turn_left ()\n    while front_is_ clear ()!\n    move ()\n    if front_ is_ blocked ( ).\n    turn - around ( )\n    move ( )\n    turn around ()\ndef turn-around ().\n    for i in range (3)\n        Left ()\n", "ir_algo_output_indented_lines": [{"x": 255.0, "y": 1006.0, "w": 588.0, "h": 137.0, "line_num": 1, "text": "def main :", "cluster_label": 1, "indentation": 0}, {"x": 489.0, "y": 1176.0, "w": 1387.0, "h": 140.0, "line_num": 2, "text": "While front- is-clear():", "cluster_label": 0, "indentation": 1}, {"x": 738.0, "y": 1376.0, "w": 446.0, "h": 123.0, "line_num": 3, "text": "move ( )", "cluster_label": 0, "indentation": 1}, {"x": 466.0, "y": 1521.0, "w": 1354.0, "h": 141.0, "line_num": 4, "text": "if front_is_blocked ().", "cluster_label": 0, "indentation": 1}, {"x": 670.0, "y": 1705.0, "w": 852.0, "h": 115.0, "line_num": 5, "text": "turn-around ()", "cluster_label": 0, "indentation": 1}, {"x": 477.0, "y": 1880.0, "w": 464.0, "h": 106.0, "line_num": 6, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 484.0, "y": 2032.0, "w": 678.0, "h": 128.0, "line_num": 7, "text": "turn_left ( )", "cluster_label": 0, "indentation": 1}, {"x": 477.0, "y": 2189.0, "w": 491.0, "h": 132.0, "line_num": 8, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 486.0, "y": 2360.0, "w": 903.0, "h": 133.0, "line_num": 9, "text": "pick-beeper ( )", "cluster_label": 0, "indentation": 1}, {"x": 485.0, "y": 2519.0, "w": 761.0, "h": 136.0, "line_num": 10, "text": "turn- left ()", "cluster_label": 0, "indentation": 1}, {"x": 485.0, "y": 2678.0, "w": 827.0, "h": 132.0, "line_num": 11, "text": "turn_left ()", "cluster_label": 0, "indentation": 1}, {"x": 488.0, "y": 2834.0, "w": 1511.0, "h": 144.0, "line_num": 12, "text": "while front_is_ clear ()!", "cluster_label": 0, "indentation": 1}, {"x": 744.0, "y": 3012.0, "w": 476.0, "h": 129.0, "line_num": 13, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 487.0, "y": 3165.0, "w": 1315.0, "h": 146.0, "line_num": 14, "text": "if front_ is_ blocked ( ).", "cluster_label": 0, "indentation": 1}, {"x": 722.0, "y": 3319.0, "w": 833.0, "h": 129.0, "line_num": 15, "text": "turn - around ( )", "cluster_label": 0, "indentation": 1}, {"x": 510.0, "y": 3492.0, "w": 480.0, "h": 121.0, "line_num": 16, "text": "move ( )", "cluster_label": 0, "indentation": 1}, {"x": 538.0, "y": 3576.0, "w": 936.0, "h": 120.0, "line_num": 17, "text": "turn around ()", "cluster_label": 0, "indentation": 1}, {"x": 182.0, "y": 3735.0, "w": 1060.0, "h": 122.0, "line_num": 18, "text": "def turn-around ().", "cluster_label": 1, "indentation": 0}, {"x": 493.0, "y": 3832.0, "w": 1027.0, "h": 102.0, "line_num": 19, "text": "for i in range (3)", "cluster_label": 0, "indentation": 1}, {"x": 1092.0, "y": 3931.0, "w": 422.0, "h": 97.0, "line_num": 20, "text": "Left ()", "cluster_label": 2, "indentation": 2}], "ir_algo_output_edit_distance": 84, "prompting_method": "none", "lm_post_processed_code": "def main :\n    While front- is-clear():\n    move ( )\n    if front_is_blocked ().\n    turn-around ()\n    move ()\n    turn_left ( )\n    move ()\n    pick-beeper ( )\n    turn- left ()\n    turn_left ()\n    while front_is_ clear ()!\n    move ()\n    if front_ is_ blocked ( ).\n    turn - around ( )\n    move ( )\n    turn around ()\ndef turn-around ().\n    for i in range (3)\n        Left ()\n", "lm_post_processed_edit_distance": 84}, {"image_id": 42, "image_height": 4032, "image_width": 2268, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 255.0, "y": 1006.0, "w": 588.0, "h": 137.0, "line_num": 1, "text": "def main :"}, {"x": 489.0, "y": 1176.0, "w": 1387.0, "h": 140.0, "line_num": 2, "text": "While front- is-clear():"}, {"x": 738.0, "y": 1376.0, "w": 446.0, "h": 123.0, "line_num": 3, "text": "move ( )"}, {"x": 466.0, "y": 1521.0, "w": 1354.0, "h": 141.0, "line_num": 4, "text": "if front_is_blocked ()."}, {"x": 670.0, "y": 1705.0, "w": 852.0, "h": 115.0, "line_num": 5, "text": "turn-around ()"}, {"x": 477.0, "y": 1880.0, "w": 464.0, "h": 106.0, "line_num": 6, "text": "move ()"}, {"x": 484.0, "y": 2032.0, "w": 678.0, "h": 128.0, "line_num": 7, "text": "turn_left ( )"}, {"x": 477.0, "y": 2189.0, "w": 491.0, "h": 132.0, "line_num": 8, "text": "move ()"}, {"x": 486.0, "y": 2360.0, "w": 903.0, "h": 133.0, "line_num": 9, "text": "pick-beeper ( )"}, {"x": 485.0, "y": 2519.0, "w": 761.0, "h": 136.0, "line_num": 10, "text": "turn- left ()"}, {"x": 485.0, "y": 2678.0, "w": 827.0, "h": 132.0, "line_num": 11, "text": "turn_left ()"}, {"x": 488.0, "y": 2834.0, "w": 1511.0, "h": 144.0, "line_num": 12, "text": "while front_is_ clear ()!"}, {"x": 744.0, "y": 3012.0, "w": 476.0, "h": 129.0, "line_num": 13, "text": "move ()"}, {"x": 487.0, "y": 3165.0, "w": 1315.0, "h": 146.0, "line_num": 14, "text": "if front_ is_ blocked ( )."}, {"x": 722.0, "y": 3319.0, "w": 833.0, "h": 129.0, "line_num": 15, "text": "turn - around ( )"}, {"x": 510.0, "y": 3492.0, "w": 480.0, "h": 121.0, "line_num": 16, "text": "move ( )"}, {"x": 538.0, "y": 3576.0, "w": 936.0, "h": 120.0, "line_num": 17, "text": "turn around ()"}, {"x": 182.0, "y": 3735.0, "w": 1060.0, "h": 122.0, "line_num": 18, "text": "def turn-around ()."}, {"x": 493.0, "y": 3832.0, "w": 1027.0, "h": 102.0, "line_num": 19, "text": "for i in range (3)"}, {"x": 1092.0, "y": 3931.0, "w": 422.0, "h": 97.0, "line_num": 20, "text": "Left ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 189.97500000000002, "ir_algo_output_code": "def main :\n    While front- is-clear():\n    move ( )\n    if front_is_blocked ().\n    turn-around ()\n    move ()\n    turn_left ( )\n    move ()\n    pick-beeper ( )\n    turn- left ()\n    turn_left ()\n    while front_is_ clear ()!\n    move ()\n    if front_ is_ blocked ( ).\n    turn - around ( )\n    move ( )\n    turn around ()\ndef turn-around ().\n    for i in range (3)\n        Left ()\n", "ir_algo_output_indented_lines": [{"x": 255.0, "y": 1006.0, "w": 588.0, "h": 137.0, "line_num": 1, "text": "def main :", "cluster_label": 1, "indentation": 0}, {"x": 489.0, "y": 1176.0, "w": 1387.0, "h": 140.0, "line_num": 2, "text": "While front- is-clear():", "cluster_label": 0, "indentation": 1}, {"x": 738.0, "y": 1376.0, "w": 446.0, "h": 123.0, "line_num": 3, "text": "move ( )", "cluster_label": 0, "indentation": 1}, {"x": 466.0, "y": 1521.0, "w": 1354.0, "h": 141.0, "line_num": 4, "text": "if front_is_blocked ().", "cluster_label": 0, "indentation": 1}, {"x": 670.0, "y": 1705.0, "w": 852.0, "h": 115.0, "line_num": 5, "text": "turn-around ()", "cluster_label": 0, "indentation": 1}, {"x": 477.0, "y": 1880.0, "w": 464.0, "h": 106.0, "line_num": 6, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 484.0, "y": 2032.0, "w": 678.0, "h": 128.0, "line_num": 7, "text": "turn_left ( )", "cluster_label": 0, "indentation": 1}, {"x": 477.0, "y": 2189.0, "w": 491.0, "h": 132.0, "line_num": 8, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 486.0, "y": 2360.0, "w": 903.0, "h": 133.0, "line_num": 9, "text": "pick-beeper ( )", "cluster_label": 0, "indentation": 1}, {"x": 485.0, "y": 2519.0, "w": 761.0, "h": 136.0, "line_num": 10, "text": "turn- left ()", "cluster_label": 0, "indentation": 1}, {"x": 485.0, "y": 2678.0, "w": 827.0, "h": 132.0, "line_num": 11, "text": "turn_left ()", "cluster_label": 0, "indentation": 1}, {"x": 488.0, "y": 2834.0, "w": 1511.0, "h": 144.0, "line_num": 12, "text": "while front_is_ clear ()!", "cluster_label": 0, "indentation": 1}, {"x": 744.0, "y": 3012.0, "w": 476.0, "h": 129.0, "line_num": 13, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 487.0, "y": 3165.0, "w": 1315.0, "h": 146.0, "line_num": 14, "text": "if front_ is_ blocked ( ).", "cluster_label": 0, "indentation": 1}, {"x": 722.0, "y": 3319.0, "w": 833.0, "h": 129.0, "line_num": 15, "text": "turn - around ( )", "cluster_label": 0, "indentation": 1}, {"x": 510.0, "y": 3492.0, "w": 480.0, "h": 121.0, "line_num": 16, "text": "move ( )", "cluster_label": 0, "indentation": 1}, {"x": 538.0, "y": 3576.0, "w": 936.0, "h": 120.0, "line_num": 17, "text": "turn around ()", "cluster_label": 0, "indentation": 1}, {"x": 182.0, "y": 3735.0, "w": 1060.0, "h": 122.0, "line_num": 18, "text": "def turn-around ().", "cluster_label": 1, "indentation": 0}, {"x": 493.0, "y": 3832.0, "w": 1027.0, "h": 102.0, "line_num": 19, "text": "for i in range (3)", "cluster_label": 0, "indentation": 1}, {"x": 1092.0, "y": 3931.0, "w": 422.0, "h": 97.0, "line_num": 20, "text": "Left ()", "cluster_label": 2, "indentation": 2}], "ir_algo_output_edit_distance": 84, "prompting_method": "cot-test1", "lm_post_processed_code": "def main:\n    while front_is_clear():\n    move()\n    if front_is_blocked():\n    turn_around()\n    move()\n    turn_left()\n    move()\n    pick_beeper()\n    turn_left()\n    turn_left()\n    while front_is_clear():\n    move()\n    if front_is_blocked():\n    turn_around()\n    move()\n    turn_around()\n\ndef turn_around():\n    for i in range(3):\n        turn_left()\n", "lm_post_processed_edit_distance": 36}, {"image_id": 42, "image_height": 4032, "image_width": 2268, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 255.0, "y": 1006.0, "w": 588.0, "h": 137.0, "line_num": 1, "text": "def main :"}, {"x": 489.0, "y": 1176.0, "w": 1387.0, "h": 140.0, "line_num": 2, "text": "While front- is-clear():"}, {"x": 738.0, "y": 1376.0, "w": 446.0, "h": 123.0, "line_num": 3, "text": "move ( )"}, {"x": 466.0, "y": 1521.0, "w": 1354.0, "h": 141.0, "line_num": 4, "text": "if front_is_blocked ()."}, {"x": 670.0, "y": 1705.0, "w": 852.0, "h": 115.0, "line_num": 5, "text": "turn-around ()"}, {"x": 477.0, "y": 1880.0, "w": 464.0, "h": 106.0, "line_num": 6, "text": "move ()"}, {"x": 484.0, "y": 2032.0, "w": 678.0, "h": 128.0, "line_num": 7, "text": "turn_left ( )"}, {"x": 477.0, "y": 2189.0, "w": 491.0, "h": 132.0, "line_num": 8, "text": "move ()"}, {"x": 486.0, "y": 2360.0, "w": 903.0, "h": 133.0, "line_num": 9, "text": "pick-beeper ( )"}, {"x": 485.0, "y": 2519.0, "w": 761.0, "h": 136.0, "line_num": 10, "text": "turn- left ()"}, {"x": 485.0, "y": 2678.0, "w": 827.0, "h": 132.0, "line_num": 11, "text": "turn_left ()"}, {"x": 488.0, "y": 2834.0, "w": 1511.0, "h": 144.0, "line_num": 12, "text": "while front_is_ clear ()!"}, {"x": 744.0, "y": 3012.0, "w": 476.0, "h": 129.0, "line_num": 13, "text": "move ()"}, {"x": 487.0, "y": 3165.0, "w": 1315.0, "h": 146.0, "line_num": 14, "text": "if front_ is_ blocked ( )."}, {"x": 722.0, "y": 3319.0, "w": 833.0, "h": 129.0, "line_num": 15, "text": "turn - around ( )"}, {"x": 510.0, "y": 3492.0, "w": 480.0, "h": 121.0, "line_num": 16, "text": "move ( )"}, {"x": 538.0, "y": 3576.0, "w": 936.0, "h": 120.0, "line_num": 17, "text": "turn around ()"}, {"x": 182.0, "y": 3735.0, "w": 1060.0, "h": 122.0, "line_num": 18, "text": "def turn-around ()."}, {"x": 493.0, "y": 3832.0, "w": 1027.0, "h": 102.0, "line_num": 19, "text": "for i in range (3)"}, {"x": 1092.0, "y": 3931.0, "w": 422.0, "h": 97.0, "line_num": 20, "text": "Left ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 189.97500000000002, "ir_algo_output_code": "def main :\n    While front- is-clear():\n    move ( )\n    if front_is_blocked ().\n    turn-around ()\n    move ()\n    turn_left ( )\n    move ()\n    pick-beeper ( )\n    turn- left ()\n    turn_left ()\n    while front_is_ clear ()!\n    move ()\n    if front_ is_ blocked ( ).\n    turn - around ( )\n    move ( )\n    turn around ()\ndef turn-around ().\n    for i in range (3)\n        Left ()\n", "ir_algo_output_indented_lines": [{"x": 255.0, "y": 1006.0, "w": 588.0, "h": 137.0, "line_num": 1, "text": "def main :", "cluster_label": 1, "indentation": 0}, {"x": 489.0, "y": 1176.0, "w": 1387.0, "h": 140.0, "line_num": 2, "text": "While front- is-clear():", "cluster_label": 0, "indentation": 1}, {"x": 738.0, "y": 1376.0, "w": 446.0, "h": 123.0, "line_num": 3, "text": "move ( )", "cluster_label": 0, "indentation": 1}, {"x": 466.0, "y": 1521.0, "w": 1354.0, "h": 141.0, "line_num": 4, "text": "if front_is_blocked ().", "cluster_label": 0, "indentation": 1}, {"x": 670.0, "y": 1705.0, "w": 852.0, "h": 115.0, "line_num": 5, "text": "turn-around ()", "cluster_label": 0, "indentation": 1}, {"x": 477.0, "y": 1880.0, "w": 464.0, "h": 106.0, "line_num": 6, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 484.0, "y": 2032.0, "w": 678.0, "h": 128.0, "line_num": 7, "text": "turn_left ( )", "cluster_label": 0, "indentation": 1}, {"x": 477.0, "y": 2189.0, "w": 491.0, "h": 132.0, "line_num": 8, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 486.0, "y": 2360.0, "w": 903.0, "h": 133.0, "line_num": 9, "text": "pick-beeper ( )", "cluster_label": 0, "indentation": 1}, {"x": 485.0, "y": 2519.0, "w": 761.0, "h": 136.0, "line_num": 10, "text": "turn- left ()", "cluster_label": 0, "indentation": 1}, {"x": 485.0, "y": 2678.0, "w": 827.0, "h": 132.0, "line_num": 11, "text": "turn_left ()", "cluster_label": 0, "indentation": 1}, {"x": 488.0, "y": 2834.0, "w": 1511.0, "h": 144.0, "line_num": 12, "text": "while front_is_ clear ()!", "cluster_label": 0, "indentation": 1}, {"x": 744.0, "y": 3012.0, "w": 476.0, "h": 129.0, "line_num": 13, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 487.0, "y": 3165.0, "w": 1315.0, "h": 146.0, "line_num": 14, "text": "if front_ is_ blocked ( ).", "cluster_label": 0, "indentation": 1}, {"x": 722.0, "y": 3319.0, "w": 833.0, "h": 129.0, "line_num": 15, "text": "turn - around ( )", "cluster_label": 0, "indentation": 1}, {"x": 510.0, "y": 3492.0, "w": 480.0, "h": 121.0, "line_num": 16, "text": "move ( )", "cluster_label": 0, "indentation": 1}, {"x": 538.0, "y": 3576.0, "w": 936.0, "h": 120.0, "line_num": 17, "text": "turn around ()", "cluster_label": 0, "indentation": 1}, {"x": 182.0, "y": 3735.0, "w": 1060.0, "h": 122.0, "line_num": 18, "text": "def turn-around ().", "cluster_label": 1, "indentation": 0}, {"x": 493.0, "y": 3832.0, "w": 1027.0, "h": 102.0, "line_num": 19, "text": "for i in range (3)", "cluster_label": 0, "indentation": 1}, {"x": 1092.0, "y": 3931.0, "w": 422.0, "h": 97.0, "line_num": 20, "text": "Left ()", "cluster_label": 2, "indentation": 2}], "ir_algo_output_edit_distance": 84, "prompting_method": "cot-test5", "lm_post_processed_code": "def main:\n    while front_is_clear():\n        move()\n    if front_is_blocked():\n        turn_around()\n        move()\n        turn_left()\n        move()\n        pick_beeper()\n        turn_left()\n        turn_left()\n    while front_is_clear():\n        move()\n    if front_is_blocked():\n        turn_around()\n        move()\n        turn_around()\n\ndef turn_around():\n    for i in range(3):\n        turn_left()\n", "lm_post_processed_edit_distance": 68}, {"image_id": 42, "image_height": 4032, "image_width": 2268, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 255.0, "y": 1006.0, "w": 588.0, "h": 137.0, "line_num": 1, "text": "def main :"}, {"x": 489.0, "y": 1176.0, "w": 1387.0, "h": 140.0, "line_num": 2, "text": "While front- is-clear():"}, {"x": 738.0, "y": 1376.0, "w": 446.0, "h": 123.0, "line_num": 3, "text": "move ( )"}, {"x": 466.0, "y": 1521.0, "w": 1354.0, "h": 141.0, "line_num": 4, "text": "if front_is_blocked ()."}, {"x": 670.0, "y": 1705.0, "w": 852.0, "h": 115.0, "line_num": 5, "text": "turn-around ()"}, {"x": 477.0, "y": 1880.0, "w": 464.0, "h": 106.0, "line_num": 6, "text": "move ()"}, {"x": 484.0, "y": 2032.0, "w": 678.0, "h": 128.0, "line_num": 7, "text": "turn_left ( )"}, {"x": 477.0, "y": 2189.0, "w": 491.0, "h": 132.0, "line_num": 8, "text": "move ()"}, {"x": 486.0, "y": 2360.0, "w": 903.0, "h": 133.0, "line_num": 9, "text": "pick-beeper ( )"}, {"x": 485.0, "y": 2519.0, "w": 761.0, "h": 136.0, "line_num": 10, "text": "turn- left ()"}, {"x": 485.0, "y": 2678.0, "w": 827.0, "h": 132.0, "line_num": 11, "text": "turn_left ()"}, {"x": 488.0, "y": 2834.0, "w": 1511.0, "h": 144.0, "line_num": 12, "text": "while front_is_ clear ()!"}, {"x": 744.0, "y": 3012.0, "w": 476.0, "h": 129.0, "line_num": 13, "text": "move ()"}, {"x": 487.0, "y": 3165.0, "w": 1315.0, "h": 146.0, "line_num": 14, "text": "if front_ is_ blocked ( )."}, {"x": 722.0, "y": 3319.0, "w": 833.0, "h": 129.0, "line_num": 15, "text": "turn - around ( )"}, {"x": 510.0, "y": 3492.0, "w": 480.0, "h": 121.0, "line_num": 16, "text": "move ( )"}, {"x": 538.0, "y": 3576.0, "w": 936.0, "h": 120.0, "line_num": 17, "text": "turn around ()"}, {"x": 182.0, "y": 3735.0, "w": 1060.0, "h": 122.0, "line_num": 18, "text": "def turn-around ()."}, {"x": 493.0, "y": 3832.0, "w": 1027.0, "h": 102.0, "line_num": 19, "text": "for i in range (3)"}, {"x": 1092.0, "y": 3931.0, "w": 422.0, "h": 97.0, "line_num": 20, "text": "Left ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 189.97500000000002, "ir_algo_output_code": "def main :\n    While front- is-clear():\n    move ( )\n    if front_is_blocked ().\n    turn-around ()\n    move ()\n    turn_left ( )\n    move ()\n    pick-beeper ( )\n    turn- left ()\n    turn_left ()\n    while front_is_ clear ()!\n    move ()\n    if front_ is_ blocked ( ).\n    turn - around ( )\n    move ( )\n    turn around ()\ndef turn-around ().\n    for i in range (3)\n        Left ()\n", "ir_algo_output_indented_lines": [{"x": 255.0, "y": 1006.0, "w": 588.0, "h": 137.0, "line_num": 1, "text": "def main :", "cluster_label": 1, "indentation": 0}, {"x": 489.0, "y": 1176.0, "w": 1387.0, "h": 140.0, "line_num": 2, "text": "While front- is-clear():", "cluster_label": 0, "indentation": 1}, {"x": 738.0, "y": 1376.0, "w": 446.0, "h": 123.0, "line_num": 3, "text": "move ( )", "cluster_label": 0, "indentation": 1}, {"x": 466.0, "y": 1521.0, "w": 1354.0, "h": 141.0, "line_num": 4, "text": "if front_is_blocked ().", "cluster_label": 0, "indentation": 1}, {"x": 670.0, "y": 1705.0, "w": 852.0, "h": 115.0, "line_num": 5, "text": "turn-around ()", "cluster_label": 0, "indentation": 1}, {"x": 477.0, "y": 1880.0, "w": 464.0, "h": 106.0, "line_num": 6, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 484.0, "y": 2032.0, "w": 678.0, "h": 128.0, "line_num": 7, "text": "turn_left ( )", "cluster_label": 0, "indentation": 1}, {"x": 477.0, "y": 2189.0, "w": 491.0, "h": 132.0, "line_num": 8, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 486.0, "y": 2360.0, "w": 903.0, "h": 133.0, "line_num": 9, "text": "pick-beeper ( )", "cluster_label": 0, "indentation": 1}, {"x": 485.0, "y": 2519.0, "w": 761.0, "h": 136.0, "line_num": 10, "text": "turn- left ()", "cluster_label": 0, "indentation": 1}, {"x": 485.0, "y": 2678.0, "w": 827.0, "h": 132.0, "line_num": 11, "text": "turn_left ()", "cluster_label": 0, "indentation": 1}, {"x": 488.0, "y": 2834.0, "w": 1511.0, "h": 144.0, "line_num": 12, "text": "while front_is_ clear ()!", "cluster_label": 0, "indentation": 1}, {"x": 744.0, "y": 3012.0, "w": 476.0, "h": 129.0, "line_num": 13, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 487.0, "y": 3165.0, "w": 1315.0, "h": 146.0, "line_num": 14, "text": "if front_ is_ blocked ( ).", "cluster_label": 0, "indentation": 1}, {"x": 722.0, "y": 3319.0, "w": 833.0, "h": 129.0, "line_num": 15, "text": "turn - around ( )", "cluster_label": 0, "indentation": 1}, {"x": 510.0, "y": 3492.0, "w": 480.0, "h": 121.0, "line_num": 16, "text": "move ( )", "cluster_label": 0, "indentation": 1}, {"x": 538.0, "y": 3576.0, "w": 936.0, "h": 120.0, "line_num": 17, "text": "turn around ()", "cluster_label": 0, "indentation": 1}, {"x": 182.0, "y": 3735.0, "w": 1060.0, "h": 122.0, "line_num": 18, "text": "def turn-around ().", "cluster_label": 1, "indentation": 0}, {"x": 493.0, "y": 3832.0, "w": 1027.0, "h": 102.0, "line_num": 19, "text": "for i in range (3)", "cluster_label": 0, "indentation": 1}, {"x": 1092.0, "y": 3931.0, "w": 422.0, "h": 97.0, "line_num": 20, "text": "Left ()", "cluster_label": 2, "indentation": 2}], "ir_algo_output_edit_distance": 84, "prompting_method": "simple-test2", "lm_post_processed_code": "def main():\n    while front_is_clear():\n        move()\n    if front_is_blocked():\n        turn_around()\n        move()\n        turn_left()\n        move()\n        pick_beeper()\n        turn_left()\n        turn_left()\n    while front_is_clear():\n        move()\n    if front_is_blocked():\n        turn_around()\n        move()\n        turn_around()\n\ndef turn_around():\n    for i in range(3):\n        left()\n", "lm_post_processed_edit_distance": 71}, {"image_id": 42, "image_height": 4032, "image_width": 2268, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 255.0, "y": 1006.0, "w": 588.0, "h": 137.0, "line_num": 1, "text": "def main :"}, {"x": 489.0, "y": 1176.0, "w": 1387.0, "h": 140.0, "line_num": 2, "text": "While front- is-clear():"}, {"x": 738.0, "y": 1376.0, "w": 446.0, "h": 123.0, "line_num": 3, "text": "move ( )"}, {"x": 466.0, "y": 1521.0, "w": 1354.0, "h": 141.0, "line_num": 4, "text": "if front_is_blocked ()."}, {"x": 670.0, "y": 1705.0, "w": 852.0, "h": 115.0, "line_num": 5, "text": "turn-around ()"}, {"x": 477.0, "y": 1880.0, "w": 464.0, "h": 106.0, "line_num": 6, "text": "move ()"}, {"x": 484.0, "y": 2032.0, "w": 678.0, "h": 128.0, "line_num": 7, "text": "turn_left ( )"}, {"x": 477.0, "y": 2189.0, "w": 491.0, "h": 132.0, "line_num": 8, "text": "move ()"}, {"x": 486.0, "y": 2360.0, "w": 903.0, "h": 133.0, "line_num": 9, "text": "pick-beeper ( )"}, {"x": 485.0, "y": 2519.0, "w": 761.0, "h": 136.0, "line_num": 10, "text": "turn- left ()"}, {"x": 485.0, "y": 2678.0, "w": 827.0, "h": 132.0, "line_num": 11, "text": "turn_left ()"}, {"x": 488.0, "y": 2834.0, "w": 1511.0, "h": 144.0, "line_num": 12, "text": "while front_is_ clear ()!"}, {"x": 744.0, "y": 3012.0, "w": 476.0, "h": 129.0, "line_num": 13, "text": "move ()"}, {"x": 487.0, "y": 3165.0, "w": 1315.0, "h": 146.0, "line_num": 14, "text": "if front_ is_ blocked ( )."}, {"x": 722.0, "y": 3319.0, "w": 833.0, "h": 129.0, "line_num": 15, "text": "turn - around ( )"}, {"x": 510.0, "y": 3492.0, "w": 480.0, "h": 121.0, "line_num": 16, "text": "move ( )"}, {"x": 538.0, "y": 3576.0, "w": 936.0, "h": 120.0, "line_num": 17, "text": "turn around ()"}, {"x": 182.0, "y": 3735.0, "w": 1060.0, "h": 122.0, "line_num": 18, "text": "def turn-around ()."}, {"x": 493.0, "y": 3832.0, "w": 1027.0, "h": 102.0, "line_num": 19, "text": "for i in range (3)"}, {"x": 1092.0, "y": 3931.0, "w": 422.0, "h": 97.0, "line_num": 20, "text": "Left ()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 189.97500000000002, "ir_algo_output_code": "def main :\n    While front- is-clear():\n    move ( )\n    if front_is_blocked ().\n    turn-around ()\n    move ()\n    turn_left ( )\n    move ()\n    pick-beeper ( )\n    turn- left ()\n    turn_left ()\n    while front_is_ clear ()!\n    move ()\n    if front_ is_ blocked ( ).\n    turn - around ( )\n    move ( )\n    turn around ()\ndef turn-around ().\n    for i in range (3)\n        Left ()\n", "ir_algo_output_indented_lines": [{"x": 255.0, "y": 1006.0, "w": 588.0, "h": 137.0, "line_num": 1, "text": "def main :", "cluster_label": 1, "indentation": 0}, {"x": 489.0, "y": 1176.0, "w": 1387.0, "h": 140.0, "line_num": 2, "text": "While front- is-clear():", "cluster_label": 0, "indentation": 1}, {"x": 738.0, "y": 1376.0, "w": 446.0, "h": 123.0, "line_num": 3, "text": "move ( )", "cluster_label": 0, "indentation": 1}, {"x": 466.0, "y": 1521.0, "w": 1354.0, "h": 141.0, "line_num": 4, "text": "if front_is_blocked ().", "cluster_label": 0, "indentation": 1}, {"x": 670.0, "y": 1705.0, "w": 852.0, "h": 115.0, "line_num": 5, "text": "turn-around ()", "cluster_label": 0, "indentation": 1}, {"x": 477.0, "y": 1880.0, "w": 464.0, "h": 106.0, "line_num": 6, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 484.0, "y": 2032.0, "w": 678.0, "h": 128.0, "line_num": 7, "text": "turn_left ( )", "cluster_label": 0, "indentation": 1}, {"x": 477.0, "y": 2189.0, "w": 491.0, "h": 132.0, "line_num": 8, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 486.0, "y": 2360.0, "w": 903.0, "h": 133.0, "line_num": 9, "text": "pick-beeper ( )", "cluster_label": 0, "indentation": 1}, {"x": 485.0, "y": 2519.0, "w": 761.0, "h": 136.0, "line_num": 10, "text": "turn- left ()", "cluster_label": 0, "indentation": 1}, {"x": 485.0, "y": 2678.0, "w": 827.0, "h": 132.0, "line_num": 11, "text": "turn_left ()", "cluster_label": 0, "indentation": 1}, {"x": 488.0, "y": 2834.0, "w": 1511.0, "h": 144.0, "line_num": 12, "text": "while front_is_ clear ()!", "cluster_label": 0, "indentation": 1}, {"x": 744.0, "y": 3012.0, "w": 476.0, "h": 129.0, "line_num": 13, "text": "move ()", "cluster_label": 0, "indentation": 1}, {"x": 487.0, "y": 3165.0, "w": 1315.0, "h": 146.0, "line_num": 14, "text": "if front_ is_ blocked ( ).", "cluster_label": 0, "indentation": 1}, {"x": 722.0, "y": 3319.0, "w": 833.0, "h": 129.0, "line_num": 15, "text": "turn - around ( )", "cluster_label": 0, "indentation": 1}, {"x": 510.0, "y": 3492.0, "w": 480.0, "h": 121.0, "line_num": 16, "text": "move ( )", "cluster_label": 0, "indentation": 1}, {"x": 538.0, "y": 3576.0, "w": 936.0, "h": 120.0, "line_num": 17, "text": "turn around ()", "cluster_label": 0, "indentation": 1}, {"x": 182.0, "y": 3735.0, "w": 1060.0, "h": 122.0, "line_num": 18, "text": "def turn-around ().", "cluster_label": 1, "indentation": 0}, {"x": 493.0, "y": 3832.0, "w": 1027.0, "h": 102.0, "line_num": 19, "text": "for i in range (3)", "cluster_label": 0, "indentation": 1}, {"x": 1092.0, "y": 3931.0, "w": 422.0, "h": 97.0, "line_num": 20, "text": "Left ()", "cluster_label": 2, "indentation": 2}], "ir_algo_output_edit_distance": 84, "prompting_method": "simple-test3", "lm_post_processed_code": "def main():\n    while front_is_clear():\n        move()\n    if front_is_blocked():\n        turn_around()\n        move()\n        turn_left()\n        move()\n        pick_beeper()\n        turn_left()\n        turn_left()\n    while front_is_clear():\n        move()\n    if front_is_blocked():\n        turn_around()\n        move()\n        turn_around()\n\ndef turn_around():\n    for i in range(3):\n        left()\n", "lm_post_processed_edit_distance": 71}, {"image_id": 42, "image_height": 4032, "image_width": 2268, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 255.0, "y": 1006.0, "w": 588.0, "h": 137.0, "line_num": 1, "text": "def main :"}, {"x": 489.0, "y": 1176.0, "w": 1387.0, "h": 140.0, "line_num": 2, "text": "While front- is-clear():"}, {"x": 738.0, "y": 1376.0, "w": 446.0, "h": 123.0, "line_num": 3, "text": "move ( )"}, {"x": 466.0, "y": 1521.0, "w": 1354.0, "h": 141.0, "line_num": 4, "text": "if front_is_blocked ()."}, {"x": 670.0, "y": 1705.0, "w": 852.0, "h": 115.0, "line_num": 5, "text": "turn-around ()"}, {"x": 477.0, "y": 1880.0, "w": 464.0, "h": 106.0, "line_num": 6, "text": "move ()"}, {"x": 484.0, "y": 2032.0, "w": 678.0, "h": 128.0, "line_num": 7, "text": "turn_left ( )"}, {"x": 477.0, "y": 2189.0, "w": 491.0, "h": 132.0, "line_num": 8, "text": "move ()"}, {"x": 486.0, "y": 2360.0, "w": 903.0, "h": 133.0, "line_num": 9, "text": "pick-beeper ( )"}, {"x": 485.0, "y": 2519.0, "w": 761.0, "h": 136.0, "line_num": 10, "text": "turn- left ()"}, {"x": 485.0, "y": 2678.0, "w": 827.0, "h": 132.0, "line_num": 11, "text": "turn_left ()"}, {"x": 488.0, "y": 2834.0, "w": 1511.0, "h": 144.0, "line_num": 12, "text": "while front_is_ clear ()!"}, {"x": 744.0, "y": 3012.0, "w": 476.0, "h": 129.0, "line_num": 13, "text": "move ()"}, {"x": 487.0, "y": 3165.0, "w": 1315.0, "h": 146.0, "line_num": 14, "text": "if front_ is_ blocked ( )."}, {"x": 722.0, "y": 3319.0, "w": 833.0, "h": 129.0, "line_num": 15, "text": "turn - around ( )"}, {"x": 510.0, "y": 3492.0, "w": 480.0, "h": 121.0, "line_num": 16, "text": "move ( )"}, {"x": 538.0, "y": 3576.0, "w": 936.0, "h": 120.0, "line_num": 17, "text": "turn around ()"}, {"x": 182.0, "y": 3735.0, "w": 1060.0, "h": 122.0, "line_num": 18, "text": "def turn-around ()."}, {"x": 493.0, "y": 3832.0, "w": 1027.0, "h": 102.0, "line_num": 19, "text": "for i in range (3)"}, {"x": 1092.0, "y": 3931.0, "w": 422.0, "h": 97.0, "line_num": 20, "text": "Left ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main :\n    While front- is-clear():\n        move ( )\n    if front_is_blocked ().\n        turn-around ()\n    move ()\n    turn_left ( )\n    move ()\n    pick-beeper ( )\n    turn- left ()\n    turn_left ()\n    while front_is_ clear ()!\n        move ()\n    if front_ is_ blocked ( ).\n        turn - around ( )\n    move ( )\n    turn around ()\ndef turn-around ().\n    for i in range (3)\n        Left ()\n", "ir_algo_output_indented_lines": [{"x": 255.0, "y": 1006.0, "w": 588.0, "h": 137.0, "line_num": 1, "text": "def main :", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 489.0, "y": 1176.0, "w": 1387.0, "h": 140.0, "line_num": 2, "text": "While front- is-clear():", "delta": 234.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 738.0, "y": 1376.0, "w": 446.0, "h": 123.0, "line_num": 3, "text": "move ( )", "delta": 249.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 466.0, "y": 1521.0, "w": 1354.0, "h": 141.0, "line_num": 4, "text": "if front_is_blocked ().", "delta": -272.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 670.0, "y": 1705.0, "w": 852.0, "h": 115.0, "line_num": 5, "text": "turn-around ()", "delta": 204.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 477.0, "y": 1880.0, "w": 464.0, "h": 106.0, "line_num": 6, "text": "move ()", "delta": -193.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 484.0, "y": 2032.0, "w": 678.0, "h": 128.0, "line_num": 7, "text": "turn_left ( )", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 477.0, "y": 2189.0, "w": 491.0, "h": 132.0, "line_num": 8, "text": "move ()", "delta": -7.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 486.0, "y": 2360.0, "w": 903.0, "h": 133.0, "line_num": 9, "text": "pick-beeper ( )", "delta": 9.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 485.0, "y": 2519.0, "w": 761.0, "h": 136.0, "line_num": 10, "text": "turn- left ()", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 485.0, "y": 2678.0, "w": 827.0, "h": 132.0, "line_num": 11, "text": "turn_left ()", "delta": 0.0, "delta_type": "null", "gaussian_prediction": null, "cluster_label": 1}, {"x": 488.0, "y": 2834.0, "w": 1511.0, "h": 144.0, "line_num": 12, "text": "while front_is_ clear ()!", "delta": 3.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 744.0, "y": 3012.0, "w": 476.0, "h": 129.0, "line_num": 13, "text": "move ()", "delta": 256.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 487.0, "y": 3165.0, "w": 1315.0, "h": 146.0, "line_num": 14, "text": "if front_ is_ blocked ( ).", "delta": -257.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 722.0, "y": 3319.0, "w": 833.0, "h": 129.0, "line_num": 15, "text": "turn - around ( )", "delta": 235.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 510.0, "y": 3492.0, "w": 480.0, "h": 121.0, "line_num": 16, "text": "move ( )", "delta": -212.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 538.0, "y": 3576.0, "w": 936.0, "h": 120.0, "line_num": 17, "text": "turn around ()", "delta": 28.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 182.0, "y": 3735.0, "w": 1060.0, "h": 122.0, "line_num": 18, "text": "def turn-around ().", "delta": -356.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 493.0, "y": 3832.0, "w": 1027.0, "h": 102.0, "line_num": 19, "text": "for i in range (3)", "delta": 311.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 1092.0, "y": 3931.0, "w": 422.0, "h": 97.0, "line_num": 20, "text": "Left ()", "delta": 599.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}], "ir_algo_output_edit_distance": 84, "prompting_method": "none", "lm_post_processed_code": "def main :\n    While front- is-clear():\n        move ( )\n    if front_is_blocked ().\n        turn-around ()\n    move ()\n    turn_left ( )\n    move ()\n    pick-beeper ( )\n    turn- left ()\n    turn_left ()\n    while front_is_ clear ()!\n        move ()\n    if front_ is_ blocked ( ).\n        turn - around ( )\n    move ( )\n    turn around ()\ndef turn-around ().\n    for i in range (3)\n        Left ()\n", "lm_post_processed_edit_distance": 84}, {"image_id": 42, "image_height": 4032, "image_width": 2268, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 255.0, "y": 1006.0, "w": 588.0, "h": 137.0, "line_num": 1, "text": "def main :"}, {"x": 489.0, "y": 1176.0, "w": 1387.0, "h": 140.0, "line_num": 2, "text": "While front- is-clear():"}, {"x": 738.0, "y": 1376.0, "w": 446.0, "h": 123.0, "line_num": 3, "text": "move ( )"}, {"x": 466.0, "y": 1521.0, "w": 1354.0, "h": 141.0, "line_num": 4, "text": "if front_is_blocked ()."}, {"x": 670.0, "y": 1705.0, "w": 852.0, "h": 115.0, "line_num": 5, "text": "turn-around ()"}, {"x": 477.0, "y": 1880.0, "w": 464.0, "h": 106.0, "line_num": 6, "text": "move ()"}, {"x": 484.0, "y": 2032.0, "w": 678.0, "h": 128.0, "line_num": 7, "text": "turn_left ( )"}, {"x": 477.0, "y": 2189.0, "w": 491.0, "h": 132.0, "line_num": 8, "text": "move ()"}, {"x": 486.0, "y": 2360.0, "w": 903.0, "h": 133.0, "line_num": 9, "text": "pick-beeper ( )"}, {"x": 485.0, "y": 2519.0, "w": 761.0, "h": 136.0, "line_num": 10, "text": "turn- left ()"}, {"x": 485.0, "y": 2678.0, "w": 827.0, "h": 132.0, "line_num": 11, "text": "turn_left ()"}, {"x": 488.0, "y": 2834.0, "w": 1511.0, "h": 144.0, "line_num": 12, "text": "while front_is_ clear ()!"}, {"x": 744.0, "y": 3012.0, "w": 476.0, "h": 129.0, "line_num": 13, "text": "move ()"}, {"x": 487.0, "y": 3165.0, "w": 1315.0, "h": 146.0, "line_num": 14, "text": "if front_ is_ blocked ( )."}, {"x": 722.0, "y": 3319.0, "w": 833.0, "h": 129.0, "line_num": 15, "text": "turn - around ( )"}, {"x": 510.0, "y": 3492.0, "w": 480.0, "h": 121.0, "line_num": 16, "text": "move ( )"}, {"x": 538.0, "y": 3576.0, "w": 936.0, "h": 120.0, "line_num": 17, "text": "turn around ()"}, {"x": 182.0, "y": 3735.0, "w": 1060.0, "h": 122.0, "line_num": 18, "text": "def turn-around ()."}, {"x": 493.0, "y": 3832.0, "w": 1027.0, "h": 102.0, "line_num": 19, "text": "for i in range (3)"}, {"x": 1092.0, "y": 3931.0, "w": 422.0, "h": 97.0, "line_num": 20, "text": "Left ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main :\n    While front- is-clear():\n        move ( )\n    if front_is_blocked ().\n        turn-around ()\n    move ()\n    turn_left ( )\n    move ()\n    pick-beeper ( )\n    turn- left ()\n    turn_left ()\n    while front_is_ clear ()!\n        move ()\n    if front_ is_ blocked ( ).\n        turn - around ( )\n    move ( )\n    turn around ()\ndef turn-around ().\n    for i in range (3)\n        Left ()\n", "ir_algo_output_indented_lines": [{"x": 255.0, "y": 1006.0, "w": 588.0, "h": 137.0, "line_num": 1, "text": "def main :", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 489.0, "y": 1176.0, "w": 1387.0, "h": 140.0, "line_num": 2, "text": "While front- is-clear():", "delta": 234.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 738.0, "y": 1376.0, "w": 446.0, "h": 123.0, "line_num": 3, "text": "move ( )", "delta": 249.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 466.0, "y": 1521.0, "w": 1354.0, "h": 141.0, "line_num": 4, "text": "if front_is_blocked ().", "delta": -272.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 670.0, "y": 1705.0, "w": 852.0, "h": 115.0, "line_num": 5, "text": "turn-around ()", "delta": 204.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 477.0, "y": 1880.0, "w": 464.0, "h": 106.0, "line_num": 6, "text": "move ()", "delta": -193.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 484.0, "y": 2032.0, "w": 678.0, "h": 128.0, "line_num": 7, "text": "turn_left ( )", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 477.0, "y": 2189.0, "w": 491.0, "h": 132.0, "line_num": 8, "text": "move ()", "delta": -7.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 486.0, "y": 2360.0, "w": 903.0, "h": 133.0, "line_num": 9, "text": "pick-beeper ( )", "delta": 9.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 485.0, "y": 2519.0, "w": 761.0, "h": 136.0, "line_num": 10, "text": "turn- left ()", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 485.0, "y": 2678.0, "w": 827.0, "h": 132.0, "line_num": 11, "text": "turn_left ()", "delta": 0.0, "delta_type": "null", "gaussian_prediction": null, "cluster_label": 1}, {"x": 488.0, "y": 2834.0, "w": 1511.0, "h": 144.0, "line_num": 12, "text": "while front_is_ clear ()!", "delta": 3.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 744.0, "y": 3012.0, "w": 476.0, "h": 129.0, "line_num": 13, "text": "move ()", "delta": 256.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 487.0, "y": 3165.0, "w": 1315.0, "h": 146.0, "line_num": 14, "text": "if front_ is_ blocked ( ).", "delta": -257.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 722.0, "y": 3319.0, "w": 833.0, "h": 129.0, "line_num": 15, "text": "turn - around ( )", "delta": 235.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 510.0, "y": 3492.0, "w": 480.0, "h": 121.0, "line_num": 16, "text": "move ( )", "delta": -212.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 538.0, "y": 3576.0, "w": 936.0, "h": 120.0, "line_num": 17, "text": "turn around ()", "delta": 28.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 182.0, "y": 3735.0, "w": 1060.0, "h": 122.0, "line_num": 18, "text": "def turn-around ().", "delta": -356.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 493.0, "y": 3832.0, "w": 1027.0, "h": 102.0, "line_num": 19, "text": "for i in range (3)", "delta": 311.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 1092.0, "y": 3931.0, "w": 422.0, "h": 97.0, "line_num": 20, "text": "Left ()", "delta": 599.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}], "ir_algo_output_edit_distance": 84, "prompting_method": "cot-test1", "lm_post_processed_code": "def main:\n    while front_is_clear():\n        move()\n    if front_is_blocked():\n        turn_around()\n    move()\n    turn_left()\n    move()\n    pick_beeper()\n    turn_left()\n    turn_left()\n    while front_is_clear():\n        move()\n    if front_is_blocked():\n        turn_around()\n    move()\n    turn_around()\n\ndef turn_around():\n    for i in range(3):\n        turn_left()\n", "lm_post_processed_edit_distance": 36}, {"image_id": 42, "image_height": 4032, "image_width": 2268, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 255.0, "y": 1006.0, "w": 588.0, "h": 137.0, "line_num": 1, "text": "def main :"}, {"x": 489.0, "y": 1176.0, "w": 1387.0, "h": 140.0, "line_num": 2, "text": "While front- is-clear():"}, {"x": 738.0, "y": 1376.0, "w": 446.0, "h": 123.0, "line_num": 3, "text": "move ( )"}, {"x": 466.0, "y": 1521.0, "w": 1354.0, "h": 141.0, "line_num": 4, "text": "if front_is_blocked ()."}, {"x": 670.0, "y": 1705.0, "w": 852.0, "h": 115.0, "line_num": 5, "text": "turn-around ()"}, {"x": 477.0, "y": 1880.0, "w": 464.0, "h": 106.0, "line_num": 6, "text": "move ()"}, {"x": 484.0, "y": 2032.0, "w": 678.0, "h": 128.0, "line_num": 7, "text": "turn_left ( )"}, {"x": 477.0, "y": 2189.0, "w": 491.0, "h": 132.0, "line_num": 8, "text": "move ()"}, {"x": 486.0, "y": 2360.0, "w": 903.0, "h": 133.0, "line_num": 9, "text": "pick-beeper ( )"}, {"x": 485.0, "y": 2519.0, "w": 761.0, "h": 136.0, "line_num": 10, "text": "turn- left ()"}, {"x": 485.0, "y": 2678.0, "w": 827.0, "h": 132.0, "line_num": 11, "text": "turn_left ()"}, {"x": 488.0, "y": 2834.0, "w": 1511.0, "h": 144.0, "line_num": 12, "text": "while front_is_ clear ()!"}, {"x": 744.0, "y": 3012.0, "w": 476.0, "h": 129.0, "line_num": 13, "text": "move ()"}, {"x": 487.0, "y": 3165.0, "w": 1315.0, "h": 146.0, "line_num": 14, "text": "if front_ is_ blocked ( )."}, {"x": 722.0, "y": 3319.0, "w": 833.0, "h": 129.0, "line_num": 15, "text": "turn - around ( )"}, {"x": 510.0, "y": 3492.0, "w": 480.0, "h": 121.0, "line_num": 16, "text": "move ( )"}, {"x": 538.0, "y": 3576.0, "w": 936.0, "h": 120.0, "line_num": 17, "text": "turn around ()"}, {"x": 182.0, "y": 3735.0, "w": 1060.0, "h": 122.0, "line_num": 18, "text": "def turn-around ()."}, {"x": 493.0, "y": 3832.0, "w": 1027.0, "h": 102.0, "line_num": 19, "text": "for i in range (3)"}, {"x": 1092.0, "y": 3931.0, "w": 422.0, "h": 97.0, "line_num": 20, "text": "Left ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main :\n    While front- is-clear():\n        move ( )\n    if front_is_blocked ().\n        turn-around ()\n    move ()\n    turn_left ( )\n    move ()\n    pick-beeper ( )\n    turn- left ()\n    turn_left ()\n    while front_is_ clear ()!\n        move ()\n    if front_ is_ blocked ( ).\n        turn - around ( )\n    move ( )\n    turn around ()\ndef turn-around ().\n    for i in range (3)\n        Left ()\n", "ir_algo_output_indented_lines": [{"x": 255.0, "y": 1006.0, "w": 588.0, "h": 137.0, "line_num": 1, "text": "def main :", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 489.0, "y": 1176.0, "w": 1387.0, "h": 140.0, "line_num": 2, "text": "While front- is-clear():", "delta": 234.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 738.0, "y": 1376.0, "w": 446.0, "h": 123.0, "line_num": 3, "text": "move ( )", "delta": 249.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 466.0, "y": 1521.0, "w": 1354.0, "h": 141.0, "line_num": 4, "text": "if front_is_blocked ().", "delta": -272.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 670.0, "y": 1705.0, "w": 852.0, "h": 115.0, "line_num": 5, "text": "turn-around ()", "delta": 204.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 477.0, "y": 1880.0, "w": 464.0, "h": 106.0, "line_num": 6, "text": "move ()", "delta": -193.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 484.0, "y": 2032.0, "w": 678.0, "h": 128.0, "line_num": 7, "text": "turn_left ( )", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 477.0, "y": 2189.0, "w": 491.0, "h": 132.0, "line_num": 8, "text": "move ()", "delta": -7.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 486.0, "y": 2360.0, "w": 903.0, "h": 133.0, "line_num": 9, "text": "pick-beeper ( )", "delta": 9.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 485.0, "y": 2519.0, "w": 761.0, "h": 136.0, "line_num": 10, "text": "turn- left ()", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 485.0, "y": 2678.0, "w": 827.0, "h": 132.0, "line_num": 11, "text": "turn_left ()", "delta": 0.0, "delta_type": "null", "gaussian_prediction": null, "cluster_label": 1}, {"x": 488.0, "y": 2834.0, "w": 1511.0, "h": 144.0, "line_num": 12, "text": "while front_is_ clear ()!", "delta": 3.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 744.0, "y": 3012.0, "w": 476.0, "h": 129.0, "line_num": 13, "text": "move ()", "delta": 256.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 487.0, "y": 3165.0, "w": 1315.0, "h": 146.0, "line_num": 14, "text": "if front_ is_ blocked ( ).", "delta": -257.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 722.0, "y": 3319.0, "w": 833.0, "h": 129.0, "line_num": 15, "text": "turn - around ( )", "delta": 235.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 510.0, "y": 3492.0, "w": 480.0, "h": 121.0, "line_num": 16, "text": "move ( )", "delta": -212.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 538.0, "y": 3576.0, "w": 936.0, "h": 120.0, "line_num": 17, "text": "turn around ()", "delta": 28.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 182.0, "y": 3735.0, "w": 1060.0, "h": 122.0, "line_num": 18, "text": "def turn-around ().", "delta": -356.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 493.0, "y": 3832.0, "w": 1027.0, "h": 102.0, "line_num": 19, "text": "for i in range (3)", "delta": 311.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 1092.0, "y": 3931.0, "w": 422.0, "h": 97.0, "line_num": 20, "text": "Left ()", "delta": 599.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}], "ir_algo_output_edit_distance": 84, "prompting_method": "cot-test5", "lm_post_processed_code": "def main :\n    while front_is_clear():\n        move()\n    if front_is_blocked():\n        turn_around()\n    move()\n    turn_left()\n    move()\n    pick_beeper()\n    turn_left()\n    turn_left()\n    while front_is_clear():\n        move()\n    if front_is_blocked():\n        turn_around()\n    move()\n    turn_around()\n\ndef turn_around():\n    for i in range(3):\n        turn_left()\n", "lm_post_processed_edit_distance": 36}, {"image_id": 42, "image_height": 4032, "image_width": 2268, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 255.0, "y": 1006.0, "w": 588.0, "h": 137.0, "line_num": 1, "text": "def main :"}, {"x": 489.0, "y": 1176.0, "w": 1387.0, "h": 140.0, "line_num": 2, "text": "While front- is-clear():"}, {"x": 738.0, "y": 1376.0, "w": 446.0, "h": 123.0, "line_num": 3, "text": "move ( )"}, {"x": 466.0, "y": 1521.0, "w": 1354.0, "h": 141.0, "line_num": 4, "text": "if front_is_blocked ()."}, {"x": 670.0, "y": 1705.0, "w": 852.0, "h": 115.0, "line_num": 5, "text": "turn-around ()"}, {"x": 477.0, "y": 1880.0, "w": 464.0, "h": 106.0, "line_num": 6, "text": "move ()"}, {"x": 484.0, "y": 2032.0, "w": 678.0, "h": 128.0, "line_num": 7, "text": "turn_left ( )"}, {"x": 477.0, "y": 2189.0, "w": 491.0, "h": 132.0, "line_num": 8, "text": "move ()"}, {"x": 486.0, "y": 2360.0, "w": 903.0, "h": 133.0, "line_num": 9, "text": "pick-beeper ( )"}, {"x": 485.0, "y": 2519.0, "w": 761.0, "h": 136.0, "line_num": 10, "text": "turn- left ()"}, {"x": 485.0, "y": 2678.0, "w": 827.0, "h": 132.0, "line_num": 11, "text": "turn_left ()"}, {"x": 488.0, "y": 2834.0, "w": 1511.0, "h": 144.0, "line_num": 12, "text": "while front_is_ clear ()!"}, {"x": 744.0, "y": 3012.0, "w": 476.0, "h": 129.0, "line_num": 13, "text": "move ()"}, {"x": 487.0, "y": 3165.0, "w": 1315.0, "h": 146.0, "line_num": 14, "text": "if front_ is_ blocked ( )."}, {"x": 722.0, "y": 3319.0, "w": 833.0, "h": 129.0, "line_num": 15, "text": "turn - around ( )"}, {"x": 510.0, "y": 3492.0, "w": 480.0, "h": 121.0, "line_num": 16, "text": "move ( )"}, {"x": 538.0, "y": 3576.0, "w": 936.0, "h": 120.0, "line_num": 17, "text": "turn around ()"}, {"x": 182.0, "y": 3735.0, "w": 1060.0, "h": 122.0, "line_num": 18, "text": "def turn-around ()."}, {"x": 493.0, "y": 3832.0, "w": 1027.0, "h": 102.0, "line_num": 19, "text": "for i in range (3)"}, {"x": 1092.0, "y": 3931.0, "w": 422.0, "h": 97.0, "line_num": 20, "text": "Left ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main :\n    While front- is-clear():\n        move ( )\n    if front_is_blocked ().\n        turn-around ()\n    move ()\n    turn_left ( )\n    move ()\n    pick-beeper ( )\n    turn- left ()\n    turn_left ()\n    while front_is_ clear ()!\n        move ()\n    if front_ is_ blocked ( ).\n        turn - around ( )\n    move ( )\n    turn around ()\ndef turn-around ().\n    for i in range (3)\n        Left ()\n", "ir_algo_output_indented_lines": [{"x": 255.0, "y": 1006.0, "w": 588.0, "h": 137.0, "line_num": 1, "text": "def main :", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 489.0, "y": 1176.0, "w": 1387.0, "h": 140.0, "line_num": 2, "text": "While front- is-clear():", "delta": 234.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 738.0, "y": 1376.0, "w": 446.0, "h": 123.0, "line_num": 3, "text": "move ( )", "delta": 249.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 466.0, "y": 1521.0, "w": 1354.0, "h": 141.0, "line_num": 4, "text": "if front_is_blocked ().", "delta": -272.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 670.0, "y": 1705.0, "w": 852.0, "h": 115.0, "line_num": 5, "text": "turn-around ()", "delta": 204.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 477.0, "y": 1880.0, "w": 464.0, "h": 106.0, "line_num": 6, "text": "move ()", "delta": -193.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 484.0, "y": 2032.0, "w": 678.0, "h": 128.0, "line_num": 7, "text": "turn_left ( )", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 477.0, "y": 2189.0, "w": 491.0, "h": 132.0, "line_num": 8, "text": "move ()", "delta": -7.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 486.0, "y": 2360.0, "w": 903.0, "h": 133.0, "line_num": 9, "text": "pick-beeper ( )", "delta": 9.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 485.0, "y": 2519.0, "w": 761.0, "h": 136.0, "line_num": 10, "text": "turn- left ()", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 485.0, "y": 2678.0, "w": 827.0, "h": 132.0, "line_num": 11, "text": "turn_left ()", "delta": 0.0, "delta_type": "null", "gaussian_prediction": null, "cluster_label": 1}, {"x": 488.0, "y": 2834.0, "w": 1511.0, "h": 144.0, "line_num": 12, "text": "while front_is_ clear ()!", "delta": 3.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 744.0, "y": 3012.0, "w": 476.0, "h": 129.0, "line_num": 13, "text": "move ()", "delta": 256.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 487.0, "y": 3165.0, "w": 1315.0, "h": 146.0, "line_num": 14, "text": "if front_ is_ blocked ( ).", "delta": -257.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 722.0, "y": 3319.0, "w": 833.0, "h": 129.0, "line_num": 15, "text": "turn - around ( )", "delta": 235.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 510.0, "y": 3492.0, "w": 480.0, "h": 121.0, "line_num": 16, "text": "move ( )", "delta": -212.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 538.0, "y": 3576.0, "w": 936.0, "h": 120.0, "line_num": 17, "text": "turn around ()", "delta": 28.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 182.0, "y": 3735.0, "w": 1060.0, "h": 122.0, "line_num": 18, "text": "def turn-around ().", "delta": -356.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 493.0, "y": 3832.0, "w": 1027.0, "h": 102.0, "line_num": 19, "text": "for i in range (3)", "delta": 311.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 1092.0, "y": 3931.0, "w": 422.0, "h": 97.0, "line_num": 20, "text": "Left ()", "delta": 599.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}], "ir_algo_output_edit_distance": 84, "prompting_method": "simple-test2", "lm_post_processed_code": "def main():\n    while front_is_clear():\n        move()\n    if front_is_blocked():\n        turn_around()\n    move()\n    turn_left()\n    move()\n    pick_beeper()\n    turn_left()\n    turn_left()\n    while front_is_clear():\n        move()\n    if front_is_blocked():\n        turn_around()\n    move()\n    turn_around()\n\ndef turn_around():\n    for i in range(3):\n        left()\n", "lm_post_processed_edit_distance": 39}, {"image_id": 42, "image_height": 4032, "image_width": 2268, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 255.0, "y": 1006.0, "w": 588.0, "h": 137.0, "line_num": 1, "text": "def main :"}, {"x": 489.0, "y": 1176.0, "w": 1387.0, "h": 140.0, "line_num": 2, "text": "While front- is-clear():"}, {"x": 738.0, "y": 1376.0, "w": 446.0, "h": 123.0, "line_num": 3, "text": "move ( )"}, {"x": 466.0, "y": 1521.0, "w": 1354.0, "h": 141.0, "line_num": 4, "text": "if front_is_blocked ()."}, {"x": 670.0, "y": 1705.0, "w": 852.0, "h": 115.0, "line_num": 5, "text": "turn-around ()"}, {"x": 477.0, "y": 1880.0, "w": 464.0, "h": 106.0, "line_num": 6, "text": "move ()"}, {"x": 484.0, "y": 2032.0, "w": 678.0, "h": 128.0, "line_num": 7, "text": "turn_left ( )"}, {"x": 477.0, "y": 2189.0, "w": 491.0, "h": 132.0, "line_num": 8, "text": "move ()"}, {"x": 486.0, "y": 2360.0, "w": 903.0, "h": 133.0, "line_num": 9, "text": "pick-beeper ( )"}, {"x": 485.0, "y": 2519.0, "w": 761.0, "h": 136.0, "line_num": 10, "text": "turn- left ()"}, {"x": 485.0, "y": 2678.0, "w": 827.0, "h": 132.0, "line_num": 11, "text": "turn_left ()"}, {"x": 488.0, "y": 2834.0, "w": 1511.0, "h": 144.0, "line_num": 12, "text": "while front_is_ clear ()!"}, {"x": 744.0, "y": 3012.0, "w": 476.0, "h": 129.0, "line_num": 13, "text": "move ()"}, {"x": 487.0, "y": 3165.0, "w": 1315.0, "h": 146.0, "line_num": 14, "text": "if front_ is_ blocked ( )."}, {"x": 722.0, "y": 3319.0, "w": 833.0, "h": 129.0, "line_num": 15, "text": "turn - around ( )"}, {"x": 510.0, "y": 3492.0, "w": 480.0, "h": 121.0, "line_num": 16, "text": "move ( )"}, {"x": 538.0, "y": 3576.0, "w": 936.0, "h": 120.0, "line_num": 17, "text": "turn around ()"}, {"x": 182.0, "y": 3735.0, "w": 1060.0, "h": 122.0, "line_num": 18, "text": "def turn-around ()."}, {"x": 493.0, "y": 3832.0, "w": 1027.0, "h": 102.0, "line_num": 19, "text": "for i in range (3)"}, {"x": 1092.0, "y": 3931.0, "w": 422.0, "h": 97.0, "line_num": 20, "text": "Left ()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main :\n    While front- is-clear():\n        move ( )\n    if front_is_blocked ().\n        turn-around ()\n    move ()\n    turn_left ( )\n    move ()\n    pick-beeper ( )\n    turn- left ()\n    turn_left ()\n    while front_is_ clear ()!\n        move ()\n    if front_ is_ blocked ( ).\n        turn - around ( )\n    move ( )\n    turn around ()\ndef turn-around ().\n    for i in range (3)\n        Left ()\n", "ir_algo_output_indented_lines": [{"x": 255.0, "y": 1006.0, "w": 588.0, "h": 137.0, "line_num": 1, "text": "def main :", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 489.0, "y": 1176.0, "w": 1387.0, "h": 140.0, "line_num": 2, "text": "While front- is-clear():", "delta": 234.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 738.0, "y": 1376.0, "w": 446.0, "h": 123.0, "line_num": 3, "text": "move ( )", "delta": 249.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 466.0, "y": 1521.0, "w": 1354.0, "h": 141.0, "line_num": 4, "text": "if front_is_blocked ().", "delta": -272.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 670.0, "y": 1705.0, "w": 852.0, "h": 115.0, "line_num": 5, "text": "turn-around ()", "delta": 204.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 477.0, "y": 1880.0, "w": 464.0, "h": 106.0, "line_num": 6, "text": "move ()", "delta": -193.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 484.0, "y": 2032.0, "w": 678.0, "h": 128.0, "line_num": 7, "text": "turn_left ( )", "delta": 7.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 477.0, "y": 2189.0, "w": 491.0, "h": 132.0, "line_num": 8, "text": "move ()", "delta": -7.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 486.0, "y": 2360.0, "w": 903.0, "h": 133.0, "line_num": 9, "text": "pick-beeper ( )", "delta": 9.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 485.0, "y": 2519.0, "w": 761.0, "h": 136.0, "line_num": 10, "text": "turn- left ()", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 485.0, "y": 2678.0, "w": 827.0, "h": 132.0, "line_num": 11, "text": "turn_left ()", "delta": 0.0, "delta_type": "null", "gaussian_prediction": null, "cluster_label": 1}, {"x": 488.0, "y": 2834.0, "w": 1511.0, "h": 144.0, "line_num": 12, "text": "while front_is_ clear ()!", "delta": 3.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 744.0, "y": 3012.0, "w": 476.0, "h": 129.0, "line_num": 13, "text": "move ()", "delta": 256.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 487.0, "y": 3165.0, "w": 1315.0, "h": 146.0, "line_num": 14, "text": "if front_ is_ blocked ( ).", "delta": -257.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 722.0, "y": 3319.0, "w": 833.0, "h": 129.0, "line_num": 15, "text": "turn - around ( )", "delta": 235.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 510.0, "y": 3492.0, "w": 480.0, "h": 121.0, "line_num": 16, "text": "move ( )", "delta": -212.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 538.0, "y": 3576.0, "w": 936.0, "h": 120.0, "line_num": 17, "text": "turn around ()", "delta": 28.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 182.0, "y": 3735.0, "w": 1060.0, "h": 122.0, "line_num": 18, "text": "def turn-around ().", "delta": -356.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 493.0, "y": 3832.0, "w": 1027.0, "h": 102.0, "line_num": 19, "text": "for i in range (3)", "delta": 311.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 1092.0, "y": 3931.0, "w": 422.0, "h": 97.0, "line_num": 20, "text": "Left ()", "delta": 599.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}], "ir_algo_output_edit_distance": 84, "prompting_method": "simple-test3", "lm_post_processed_code": "def main():\n    while front_is_clear():\n        move()\n    if front_is_blocked():\n        turn_around()\n    move()\n    turn_left()\n    move()\n    pick_beeper()\n    turn_left()\n    turn_left()\n    while front_is_clear():\n        move()\n    if front_is_blocked():\n        turn_around()\n    move()\n    turn_around()\n\ndef turn_around():\n    for i in range(3):\n        left()\n", "lm_post_processed_edit_distance": 39}, {"image_id": 43, "image_height": 1600, "image_width": 1303, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 110.0, "y": 17.0, "w": 670.0, "h": 66.0, "line_num": 1, "text": "def is-leap year (year):"}, {"x": 144.0, "y": 143.0, "w": 467.0, "h": 56.0, "line_num": 2, "text": "if year % 4 == 0'"}, {"x": 192.0, "y": 203.0, "w": 509.0, "h": 55.0, "line_num": 3, "text": "if years % 100 = = 0:"}, {"x": 298.0, "y": 284.0, "w": 460.0, "h": 58.0, "line_num": 4, "text": "year % 400 = = 0:"}, {"x": 325.0, "y": 343.0, "w": 339.0, "h": 50.0, "line_num": 5, "text": "return True"}, {"x": 249.0, "y": 397.0, "w": 128.0, "h": 48.0, "line_num": 6, "text": "else:"}, {"x": 370.0, "y": 453.0, "w": 345.0, "h": 60.0, "line_num": 7, "text": "return False"}, {"x": 168.0, "y": 518.0, "w": 143.0, "h": 58.0, "line_num": 8, "text": "else:"}, {"x": 271.0, "y": 580.0, "w": 316.0, "h": 58.0, "line_num": 9, "text": "return False"}, {"x": 118.0, "y": 700.0, "w": 138.0, "h": 56.0, "line_num": 10, "text": "else:"}, {"x": 233.0, "y": 768.0, "w": 324.0, "h": 54.0, "line_num": 11, "text": "return False"}, {"x": 72.0, "y": 879.0, "w": 334.0, "h": 59.0, "line_num": 12, "text": "def main ()."}, {"x": 174.0, "y": 934.0, "w": 910.0, "h": 62.0, "line_num": 13, "text": "years = int (input (\"Enter a year: \"))"}, {"x": 169.0, "y": 1003.0, "w": 779.0, "h": 54.0, "line_num": 14, "text": "is_leap=is_leap-year (year)"}, {"x": 168.0, "y": 1060.0, "w": 412.0, "h": 57.0, "line_num": 15, "text": "print (is-leap)"}, {"x": 144.0, "y": 1174.0, "w": 603.0, "h": 65.0, "line_num": 16, "text": "name_ = \"_main_\":"}, {"x": 157.0, "y": 1241.0, "w": 175.0, "h": 55.0, "line_num": 17, "text": "main()"}], "ir_algo_name": "none", "ir_algo_output_code": "def is-leap year (year):\nif year % 4 == 0'\nif years % 100 = = 0:\nyear % 400 = = 0:\nreturn True\nelse:\nreturn False\nelse:\nreturn False\nelse:\nreturn False\ndef main ().\nyears = int (input (\"Enter a year: \"))\nis_leap=is_leap-year (year)\nprint (is-leap)\nname_ = \"_main_\":\nmain()", "ir_algo_output_edit_distance": 149, "prompting_method": "none", "lm_post_processed_code": "def is-leap year (year):\nif year % 4 == 0'\nif years % 100 = = 0:\nyear % 400 = = 0:\nreturn True\nelse:\nreturn False\nelse:\nreturn False\nelse:\nreturn False\ndef main ().\nyears = int (input (\"Enter a year: \"))\nis_leap=is_leap-year (year)\nprint (is-leap)\nname_ = \"_main_\":\nmain()", "lm_post_processed_edit_distance": 149}, {"image_id": 43, "image_height": 1600, "image_width": 1303, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 110.0, "y": 17.0, "w": 670.0, "h": 66.0, "line_num": 1, "text": "def is-leap year (year):"}, {"x": 144.0, "y": 143.0, "w": 467.0, "h": 56.0, "line_num": 2, "text": "if year % 4 == 0'"}, {"x": 192.0, "y": 203.0, "w": 509.0, "h": 55.0, "line_num": 3, "text": "if years % 100 = = 0:"}, {"x": 298.0, "y": 284.0, "w": 460.0, "h": 58.0, "line_num": 4, "text": "year % 400 = = 0:"}, {"x": 325.0, "y": 343.0, "w": 339.0, "h": 50.0, "line_num": 5, "text": "return True"}, {"x": 249.0, "y": 397.0, "w": 128.0, "h": 48.0, "line_num": 6, "text": "else:"}, {"x": 370.0, "y": 453.0, "w": 345.0, "h": 60.0, "line_num": 7, "text": "return False"}, {"x": 168.0, "y": 518.0, "w": 143.0, "h": 58.0, "line_num": 8, "text": "else:"}, {"x": 271.0, "y": 580.0, "w": 316.0, "h": 58.0, "line_num": 9, "text": "return False"}, {"x": 118.0, "y": 700.0, "w": 138.0, "h": 56.0, "line_num": 10, "text": "else:"}, {"x": 233.0, "y": 768.0, "w": 324.0, "h": 54.0, "line_num": 11, "text": "return False"}, {"x": 72.0, "y": 879.0, "w": 334.0, "h": 59.0, "line_num": 12, "text": "def main ()."}, {"x": 174.0, "y": 934.0, "w": 910.0, "h": 62.0, "line_num": 13, "text": "years = int (input (\"Enter a year: \"))"}, {"x": 169.0, "y": 1003.0, "w": 779.0, "h": 54.0, "line_num": 14, "text": "is_leap=is_leap-year (year)"}, {"x": 168.0, "y": 1060.0, "w": 412.0, "h": 57.0, "line_num": 15, "text": "print (is-leap)"}, {"x": 144.0, "y": 1174.0, "w": 603.0, "h": 65.0, "line_num": 16, "text": "name_ = \"_main_\":"}, {"x": 157.0, "y": 1241.0, "w": 175.0, "h": 55.0, "line_num": 17, "text": "main()"}], "ir_algo_name": "none", "ir_algo_output_code": "def is-leap year (year):\nif year % 4 == 0'\nif years % 100 = = 0:\nyear % 400 = = 0:\nreturn True\nelse:\nreturn False\nelse:\nreturn False\nelse:\nreturn False\ndef main ().\nyears = int (input (\"Enter a year: \"))\nis_leap=is_leap-year (year)\nprint (is-leap)\nname_ = \"_main_\":\nmain()", "ir_algo_output_edit_distance": 149, "prompting_method": "cot-test1", "lm_post_processed_code": "def is_leap_year(year):\nif year % 4 == 0:\nif year % 100 == 0:\nyear % 400 == 0:\nreturn True\nelse:\nreturn False\nelse:\nreturn False\nelse:\nreturn False\n\ndef main():\nyear = int(input(\"Enter a year: \"))\nis_leap = is_leap_year(year)\nprint(is_leap)\n\nif __name__ == \"__main__\":\nmain()\n", "lm_post_processed_edit_distance": 119}, {"image_id": 43, "image_height": 1600, "image_width": 1303, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 110.0, "y": 17.0, "w": 670.0, "h": 66.0, "line_num": 1, "text": "def is-leap year (year):"}, {"x": 144.0, "y": 143.0, "w": 467.0, "h": 56.0, "line_num": 2, "text": "if year % 4 == 0'"}, {"x": 192.0, "y": 203.0, "w": 509.0, "h": 55.0, "line_num": 3, "text": "if years % 100 = = 0:"}, {"x": 298.0, "y": 284.0, "w": 460.0, "h": 58.0, "line_num": 4, "text": "year % 400 = = 0:"}, {"x": 325.0, "y": 343.0, "w": 339.0, "h": 50.0, "line_num": 5, "text": "return True"}, {"x": 249.0, "y": 397.0, "w": 128.0, "h": 48.0, "line_num": 6, "text": "else:"}, {"x": 370.0, "y": 453.0, "w": 345.0, "h": 60.0, "line_num": 7, "text": "return False"}, {"x": 168.0, "y": 518.0, "w": 143.0, "h": 58.0, "line_num": 8, "text": "else:"}, {"x": 271.0, "y": 580.0, "w": 316.0, "h": 58.0, "line_num": 9, "text": "return False"}, {"x": 118.0, "y": 700.0, "w": 138.0, "h": 56.0, "line_num": 10, "text": "else:"}, {"x": 233.0, "y": 768.0, "w": 324.0, "h": 54.0, "line_num": 11, "text": "return False"}, {"x": 72.0, "y": 879.0, "w": 334.0, "h": 59.0, "line_num": 12, "text": "def main ()."}, {"x": 174.0, "y": 934.0, "w": 910.0, "h": 62.0, "line_num": 13, "text": "years = int (input (\"Enter a year: \"))"}, {"x": 169.0, "y": 1003.0, "w": 779.0, "h": 54.0, "line_num": 14, "text": "is_leap=is_leap-year (year)"}, {"x": 168.0, "y": 1060.0, "w": 412.0, "h": 57.0, "line_num": 15, "text": "print (is-leap)"}, {"x": 144.0, "y": 1174.0, "w": 603.0, "h": 65.0, "line_num": 16, "text": "name_ = \"_main_\":"}, {"x": 157.0, "y": 1241.0, "w": 175.0, "h": 55.0, "line_num": 17, "text": "main()"}], "ir_algo_name": "none", "ir_algo_output_code": "def is-leap year (year):\nif year % 4 == 0'\nif years % 100 = = 0:\nyear % 400 = = 0:\nreturn True\nelse:\nreturn False\nelse:\nreturn False\nelse:\nreturn False\ndef main ().\nyears = int (input (\"Enter a year: \"))\nis_leap=is_leap-year (year)\nprint (is-leap)\nname_ = \"_main_\":\nmain()", "ir_algo_output_edit_distance": 149, "prompting_method": "cot-test5", "lm_post_processed_code": "def is_leap_year(year):\nif year % 4 == 0:\nif year % 100 == 0:\nif year % 400 == 0:\nreturn True\nelse:\nreturn False\nelse:\nreturn False\nelse:\nreturn False\n\ndef main():\nyear = int(input(\"Enter a year: \"))\nis_leap = is_leap_year(year)\nprint(is_leap)\n\nif __name__ == \"__main__\":\nmain()\n", "lm_post_processed_edit_distance": 116}, {"image_id": 43, "image_height": 1600, "image_width": 1303, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 110.0, "y": 17.0, "w": 670.0, "h": 66.0, "line_num": 1, "text": "def is-leap year (year):"}, {"x": 144.0, "y": 143.0, "w": 467.0, "h": 56.0, "line_num": 2, "text": "if year % 4 == 0'"}, {"x": 192.0, "y": 203.0, "w": 509.0, "h": 55.0, "line_num": 3, "text": "if years % 100 = = 0:"}, {"x": 298.0, "y": 284.0, "w": 460.0, "h": 58.0, "line_num": 4, "text": "year % 400 = = 0:"}, {"x": 325.0, "y": 343.0, "w": 339.0, "h": 50.0, "line_num": 5, "text": "return True"}, {"x": 249.0, "y": 397.0, "w": 128.0, "h": 48.0, "line_num": 6, "text": "else:"}, {"x": 370.0, "y": 453.0, "w": 345.0, "h": 60.0, "line_num": 7, "text": "return False"}, {"x": 168.0, "y": 518.0, "w": 143.0, "h": 58.0, "line_num": 8, "text": "else:"}, {"x": 271.0, "y": 580.0, "w": 316.0, "h": 58.0, "line_num": 9, "text": "return False"}, {"x": 118.0, "y": 700.0, "w": 138.0, "h": 56.0, "line_num": 10, "text": "else:"}, {"x": 233.0, "y": 768.0, "w": 324.0, "h": 54.0, "line_num": 11, "text": "return False"}, {"x": 72.0, "y": 879.0, "w": 334.0, "h": 59.0, "line_num": 12, "text": "def main ()."}, {"x": 174.0, "y": 934.0, "w": 910.0, "h": 62.0, "line_num": 13, "text": "years = int (input (\"Enter a year: \"))"}, {"x": 169.0, "y": 1003.0, "w": 779.0, "h": 54.0, "line_num": 14, "text": "is_leap=is_leap-year (year)"}, {"x": 168.0, "y": 1060.0, "w": 412.0, "h": 57.0, "line_num": 15, "text": "print (is-leap)"}, {"x": 144.0, "y": 1174.0, "w": 603.0, "h": 65.0, "line_num": 16, "text": "name_ = \"_main_\":"}, {"x": 157.0, "y": 1241.0, "w": 175.0, "h": 55.0, "line_num": 17, "text": "main()"}], "ir_algo_name": "none", "ir_algo_output_code": "def is-leap year (year):\nif year % 4 == 0'\nif years % 100 = = 0:\nyear % 400 = = 0:\nreturn True\nelse:\nreturn False\nelse:\nreturn False\nelse:\nreturn False\ndef main ().\nyears = int (input (\"Enter a year: \"))\nis_leap=is_leap-year (year)\nprint (is-leap)\nname_ = \"_main_\":\nmain()", "ir_algo_output_edit_distance": 149, "prompting_method": "simple-test2", "lm_post_processed_code": "def is_leap_year(year):\nif year % 4 == 0:\nif year % 100 == 0:\nif year % 400 == 0:\nreturn True\nelse:\nreturn False\nelse:\nreturn False\nelse:\nreturn False\n\ndef main():\nyear = int(input(\"Enter a year: \"))\nis_leap = is_leap_year(year)\nprint(is_leap)\n\nif __name__ == \"__main__\":\nmain()\n", "lm_post_processed_edit_distance": 116}, {"image_id": 43, "image_height": 1600, "image_width": 1303, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 110.0, "y": 17.0, "w": 670.0, "h": 66.0, "line_num": 1, "text": "def is-leap year (year):"}, {"x": 144.0, "y": 143.0, "w": 467.0, "h": 56.0, "line_num": 2, "text": "if year % 4 == 0'"}, {"x": 192.0, "y": 203.0, "w": 509.0, "h": 55.0, "line_num": 3, "text": "if years % 100 = = 0:"}, {"x": 298.0, "y": 284.0, "w": 460.0, "h": 58.0, "line_num": 4, "text": "year % 400 = = 0:"}, {"x": 325.0, "y": 343.0, "w": 339.0, "h": 50.0, "line_num": 5, "text": "return True"}, {"x": 249.0, "y": 397.0, "w": 128.0, "h": 48.0, "line_num": 6, "text": "else:"}, {"x": 370.0, "y": 453.0, "w": 345.0, "h": 60.0, "line_num": 7, "text": "return False"}, {"x": 168.0, "y": 518.0, "w": 143.0, "h": 58.0, "line_num": 8, "text": "else:"}, {"x": 271.0, "y": 580.0, "w": 316.0, "h": 58.0, "line_num": 9, "text": "return False"}, {"x": 118.0, "y": 700.0, "w": 138.0, "h": 56.0, "line_num": 10, "text": "else:"}, {"x": 233.0, "y": 768.0, "w": 324.0, "h": 54.0, "line_num": 11, "text": "return False"}, {"x": 72.0, "y": 879.0, "w": 334.0, "h": 59.0, "line_num": 12, "text": "def main ()."}, {"x": 174.0, "y": 934.0, "w": 910.0, "h": 62.0, "line_num": 13, "text": "years = int (input (\"Enter a year: \"))"}, {"x": 169.0, "y": 1003.0, "w": 779.0, "h": 54.0, "line_num": 14, "text": "is_leap=is_leap-year (year)"}, {"x": 168.0, "y": 1060.0, "w": 412.0, "h": 57.0, "line_num": 15, "text": "print (is-leap)"}, {"x": 144.0, "y": 1174.0, "w": 603.0, "h": 65.0, "line_num": 16, "text": "name_ = \"_main_\":"}, {"x": 157.0, "y": 1241.0, "w": 175.0, "h": 55.0, "line_num": 17, "text": "main()"}], "ir_algo_name": "none", "ir_algo_output_code": "def is-leap year (year):\nif year % 4 == 0'\nif years % 100 = = 0:\nyear % 400 = = 0:\nreturn True\nelse:\nreturn False\nelse:\nreturn False\nelse:\nreturn False\ndef main ().\nyears = int (input (\"Enter a year: \"))\nis_leap=is_leap-year (year)\nprint (is-leap)\nname_ = \"_main_\":\nmain()", "ir_algo_output_edit_distance": 149, "prompting_method": "simple-test3", "lm_post_processed_code": "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n\ndef main():\n    year = int(input(\"Enter a year: \"))\n    is_leap = is_leap_year(year)\n    print(is_leap)\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 0}, {"image_id": 43, "image_height": 1600, "image_width": 1303, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 110.0, "y": 17.0, "w": 670.0, "h": 66.0, "line_num": 1, "text": "def is-leap year (year):"}, {"x": 144.0, "y": 143.0, "w": 467.0, "h": 56.0, "line_num": 2, "text": "if year % 4 == 0'"}, {"x": 192.0, "y": 203.0, "w": 509.0, "h": 55.0, "line_num": 3, "text": "if years % 100 = = 0:"}, {"x": 298.0, "y": 284.0, "w": 460.0, "h": 58.0, "line_num": 4, "text": "year % 400 = = 0:"}, {"x": 325.0, "y": 343.0, "w": 339.0, "h": 50.0, "line_num": 5, "text": "return True"}, {"x": 249.0, "y": 397.0, "w": 128.0, "h": 48.0, "line_num": 6, "text": "else:"}, {"x": 370.0, "y": 453.0, "w": 345.0, "h": 60.0, "line_num": 7, "text": "return False"}, {"x": 168.0, "y": 518.0, "w": 143.0, "h": 58.0, "line_num": 8, "text": "else:"}, {"x": 271.0, "y": 580.0, "w": 316.0, "h": 58.0, "line_num": 9, "text": "return False"}, {"x": 118.0, "y": 700.0, "w": 138.0, "h": 56.0, "line_num": 10, "text": "else:"}, {"x": 233.0, "y": 768.0, "w": 324.0, "h": 54.0, "line_num": 11, "text": "return False"}, {"x": 72.0, "y": 879.0, "w": 334.0, "h": 59.0, "line_num": 12, "text": "def main ()."}, {"x": 174.0, "y": 934.0, "w": 910.0, "h": 62.0, "line_num": 13, "text": "years = int (input (\"Enter a year: \"))"}, {"x": 169.0, "y": 1003.0, "w": 779.0, "h": 54.0, "line_num": 14, "text": "is_leap=is_leap-year (year)"}, {"x": 168.0, "y": 1060.0, "w": 412.0, "h": 57.0, "line_num": 15, "text": "print (is-leap)"}, {"x": 144.0, "y": 1174.0, "w": 603.0, "h": 65.0, "line_num": 16, "text": "name_ = \"_main_\":"}, {"x": 157.0, "y": 1241.0, "w": 175.0, "h": 55.0, "line_num": 17, "text": "main()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 85.67647058823529, "ir_algo_output_code": "def is-leap year (year):\nif year % 4 == 0'\nif years % 100 = = 0:\n    year % 400 = = 0:\n    return True\n    else:\n    return False\nelse:\n    return False\nelse:\n    return False\ndef main ().\nyears = int (input (\"Enter a year: \"))\nis_leap=is_leap-year (year)\nprint (is-leap)\nname_ = \"_main_\":\nmain()\n", "ir_algo_output_indented_lines": [{"x": 110.0, "y": 17.0, "w": 670.0, "h": 66.0, "line_num": 1, "text": "def is-leap year (year):", "cluster_label": 0, "indentation": 0}, {"x": 144.0, "y": 143.0, "w": 467.0, "h": 56.0, "line_num": 2, "text": "if year % 4 == 0'", "cluster_label": 0, "indentation": 0}, {"x": 192.0, "y": 203.0, "w": 509.0, "h": 55.0, "line_num": 3, "text": "if years % 100 = = 0:", "cluster_label": 0, "indentation": 0}, {"x": 298.0, "y": 284.0, "w": 460.0, "h": 58.0, "line_num": 4, "text": "year % 400 = = 0:", "cluster_label": 1, "indentation": 1}, {"x": 325.0, "y": 343.0, "w": 339.0, "h": 50.0, "line_num": 5, "text": "return True", "cluster_label": 1, "indentation": 1}, {"x": 249.0, "y": 397.0, "w": 128.0, "h": 48.0, "line_num": 6, "text": "else:", "cluster_label": 1, "indentation": 1}, {"x": 370.0, "y": 453.0, "w": 345.0, "h": 60.0, "line_num": 7, "text": "return False", "cluster_label": 1, "indentation": 1}, {"x": 168.0, "y": 518.0, "w": 143.0, "h": 58.0, "line_num": 8, "text": "else:", "cluster_label": 0, "indentation": 0}, {"x": 271.0, "y": 580.0, "w": 316.0, "h": 58.0, "line_num": 9, "text": "return False", "cluster_label": 1, "indentation": 1}, {"x": 118.0, "y": 700.0, "w": 138.0, "h": 56.0, "line_num": 10, "text": "else:", "cluster_label": 0, "indentation": 0}, {"x": 233.0, "y": 768.0, "w": 324.0, "h": 54.0, "line_num": 11, "text": "return False", "cluster_label": 1, "indentation": 1}, {"x": 72.0, "y": 879.0, "w": 334.0, "h": 59.0, "line_num": 12, "text": "def main ().", "cluster_label": 0, "indentation": 0}, {"x": 174.0, "y": 934.0, "w": 910.0, "h": 62.0, "line_num": 13, "text": "years = int (input (\"Enter a year: \"))", "cluster_label": 0, "indentation": 0}, {"x": 169.0, "y": 1003.0, "w": 779.0, "h": 54.0, "line_num": 14, "text": "is_leap=is_leap-year (year)", "cluster_label": 0, "indentation": 0}, {"x": 168.0, "y": 1060.0, "w": 412.0, "h": 57.0, "line_num": 15, "text": "print (is-leap)", "cluster_label": 0, "indentation": 0}, {"x": 144.0, "y": 1174.0, "w": 603.0, "h": 65.0, "line_num": 16, "text": "name_ = \"_main_\":", "cluster_label": 0, "indentation": 0}, {"x": 157.0, "y": 1241.0, "w": 175.0, "h": 55.0, "line_num": 17, "text": "main()", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 124, "prompting_method": "none", "lm_post_processed_code": "def is-leap year (year):\nif year % 4 == 0'\nif years % 100 = = 0:\n    year % 400 = = 0:\n    return True\n    else:\n    return False\nelse:\n    return False\nelse:\n    return False\ndef main ().\nyears = int (input (\"Enter a year: \"))\nis_leap=is_leap-year (year)\nprint (is-leap)\nname_ = \"_main_\":\nmain()\n", "lm_post_processed_edit_distance": 124}, {"image_id": 43, "image_height": 1600, "image_width": 1303, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 110.0, "y": 17.0, "w": 670.0, "h": 66.0, "line_num": 1, "text": "def is-leap year (year):"}, {"x": 144.0, "y": 143.0, "w": 467.0, "h": 56.0, "line_num": 2, "text": "if year % 4 == 0'"}, {"x": 192.0, "y": 203.0, "w": 509.0, "h": 55.0, "line_num": 3, "text": "if years % 100 = = 0:"}, {"x": 298.0, "y": 284.0, "w": 460.0, "h": 58.0, "line_num": 4, "text": "year % 400 = = 0:"}, {"x": 325.0, "y": 343.0, "w": 339.0, "h": 50.0, "line_num": 5, "text": "return True"}, {"x": 249.0, "y": 397.0, "w": 128.0, "h": 48.0, "line_num": 6, "text": "else:"}, {"x": 370.0, "y": 453.0, "w": 345.0, "h": 60.0, "line_num": 7, "text": "return False"}, {"x": 168.0, "y": 518.0, "w": 143.0, "h": 58.0, "line_num": 8, "text": "else:"}, {"x": 271.0, "y": 580.0, "w": 316.0, "h": 58.0, "line_num": 9, "text": "return False"}, {"x": 118.0, "y": 700.0, "w": 138.0, "h": 56.0, "line_num": 10, "text": "else:"}, {"x": 233.0, "y": 768.0, "w": 324.0, "h": 54.0, "line_num": 11, "text": "return False"}, {"x": 72.0, "y": 879.0, "w": 334.0, "h": 59.0, "line_num": 12, "text": "def main ()."}, {"x": 174.0, "y": 934.0, "w": 910.0, "h": 62.0, "line_num": 13, "text": "years = int (input (\"Enter a year: \"))"}, {"x": 169.0, "y": 1003.0, "w": 779.0, "h": 54.0, "line_num": 14, "text": "is_leap=is_leap-year (year)"}, {"x": 168.0, "y": 1060.0, "w": 412.0, "h": 57.0, "line_num": 15, "text": "print (is-leap)"}, {"x": 144.0, "y": 1174.0, "w": 603.0, "h": 65.0, "line_num": 16, "text": "name_ = \"_main_\":"}, {"x": 157.0, "y": 1241.0, "w": 175.0, "h": 55.0, "line_num": 17, "text": "main()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 85.67647058823529, "ir_algo_output_code": "def is-leap year (year):\nif year % 4 == 0'\nif years % 100 = = 0:\n    year % 400 = = 0:\n    return True\n    else:\n    return False\nelse:\n    return False\nelse:\n    return False\ndef main ().\nyears = int (input (\"Enter a year: \"))\nis_leap=is_leap-year (year)\nprint (is-leap)\nname_ = \"_main_\":\nmain()\n", "ir_algo_output_indented_lines": [{"x": 110.0, "y": 17.0, "w": 670.0, "h": 66.0, "line_num": 1, "text": "def is-leap year (year):", "cluster_label": 0, "indentation": 0}, {"x": 144.0, "y": 143.0, "w": 467.0, "h": 56.0, "line_num": 2, "text": "if year % 4 == 0'", "cluster_label": 0, "indentation": 0}, {"x": 192.0, "y": 203.0, "w": 509.0, "h": 55.0, "line_num": 3, "text": "if years % 100 = = 0:", "cluster_label": 0, "indentation": 0}, {"x": 298.0, "y": 284.0, "w": 460.0, "h": 58.0, "line_num": 4, "text": "year % 400 = = 0:", "cluster_label": 1, "indentation": 1}, {"x": 325.0, "y": 343.0, "w": 339.0, "h": 50.0, "line_num": 5, "text": "return True", "cluster_label": 1, "indentation": 1}, {"x": 249.0, "y": 397.0, "w": 128.0, "h": 48.0, "line_num": 6, "text": "else:", "cluster_label": 1, "indentation": 1}, {"x": 370.0, "y": 453.0, "w": 345.0, "h": 60.0, "line_num": 7, "text": "return False", "cluster_label": 1, "indentation": 1}, {"x": 168.0, "y": 518.0, "w": 143.0, "h": 58.0, "line_num": 8, "text": "else:", "cluster_label": 0, "indentation": 0}, {"x": 271.0, "y": 580.0, "w": 316.0, "h": 58.0, "line_num": 9, "text": "return False", "cluster_label": 1, "indentation": 1}, {"x": 118.0, "y": 700.0, "w": 138.0, "h": 56.0, "line_num": 10, "text": "else:", "cluster_label": 0, "indentation": 0}, {"x": 233.0, "y": 768.0, "w": 324.0, "h": 54.0, "line_num": 11, "text": "return False", "cluster_label": 1, "indentation": 1}, {"x": 72.0, "y": 879.0, "w": 334.0, "h": 59.0, "line_num": 12, "text": "def main ().", "cluster_label": 0, "indentation": 0}, {"x": 174.0, "y": 934.0, "w": 910.0, "h": 62.0, "line_num": 13, "text": "years = int (input (\"Enter a year: \"))", "cluster_label": 0, "indentation": 0}, {"x": 169.0, "y": 1003.0, "w": 779.0, "h": 54.0, "line_num": 14, "text": "is_leap=is_leap-year (year)", "cluster_label": 0, "indentation": 0}, {"x": 168.0, "y": 1060.0, "w": 412.0, "h": 57.0, "line_num": 15, "text": "print (is-leap)", "cluster_label": 0, "indentation": 0}, {"x": 144.0, "y": 1174.0, "w": 603.0, "h": 65.0, "line_num": 16, "text": "name_ = \"_main_\":", "cluster_label": 0, "indentation": 0}, {"x": 157.0, "y": 1241.0, "w": 175.0, "h": 55.0, "line_num": 17, "text": "main()", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 124, "prompting_method": "cot-test1", "lm_post_processed_code": "def is_leap_year(year):\nif year % 4 == 0:\nif year % 100 == 0:\n    if year % 400 == 0:\n    return True\n    else:\n    return False\nelse:\n    return False\nelse:\n    return False\n\ndef main():\nyear = int(input(\"Enter a year: \"))\nis_leap = is_leap_year(year)\nprint(is_leap)\n\nif __name__ == \"__main__\":\nmain()\n", "lm_post_processed_edit_distance": 92}, {"image_id": 43, "image_height": 1600, "image_width": 1303, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 110.0, "y": 17.0, "w": 670.0, "h": 66.0, "line_num": 1, "text": "def is-leap year (year):"}, {"x": 144.0, "y": 143.0, "w": 467.0, "h": 56.0, "line_num": 2, "text": "if year % 4 == 0'"}, {"x": 192.0, "y": 203.0, "w": 509.0, "h": 55.0, "line_num": 3, "text": "if years % 100 = = 0:"}, {"x": 298.0, "y": 284.0, "w": 460.0, "h": 58.0, "line_num": 4, "text": "year % 400 = = 0:"}, {"x": 325.0, "y": 343.0, "w": 339.0, "h": 50.0, "line_num": 5, "text": "return True"}, {"x": 249.0, "y": 397.0, "w": 128.0, "h": 48.0, "line_num": 6, "text": "else:"}, {"x": 370.0, "y": 453.0, "w": 345.0, "h": 60.0, "line_num": 7, "text": "return False"}, {"x": 168.0, "y": 518.0, "w": 143.0, "h": 58.0, "line_num": 8, "text": "else:"}, {"x": 271.0, "y": 580.0, "w": 316.0, "h": 58.0, "line_num": 9, "text": "return False"}, {"x": 118.0, "y": 700.0, "w": 138.0, "h": 56.0, "line_num": 10, "text": "else:"}, {"x": 233.0, "y": 768.0, "w": 324.0, "h": 54.0, "line_num": 11, "text": "return False"}, {"x": 72.0, "y": 879.0, "w": 334.0, "h": 59.0, "line_num": 12, "text": "def main ()."}, {"x": 174.0, "y": 934.0, "w": 910.0, "h": 62.0, "line_num": 13, "text": "years = int (input (\"Enter a year: \"))"}, {"x": 169.0, "y": 1003.0, "w": 779.0, "h": 54.0, "line_num": 14, "text": "is_leap=is_leap-year (year)"}, {"x": 168.0, "y": 1060.0, "w": 412.0, "h": 57.0, "line_num": 15, "text": "print (is-leap)"}, {"x": 144.0, "y": 1174.0, "w": 603.0, "h": 65.0, "line_num": 16, "text": "name_ = \"_main_\":"}, {"x": 157.0, "y": 1241.0, "w": 175.0, "h": 55.0, "line_num": 17, "text": "main()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 85.67647058823529, "ir_algo_output_code": "def is-leap year (year):\nif year % 4 == 0'\nif years % 100 = = 0:\n    year % 400 = = 0:\n    return True\n    else:\n    return False\nelse:\n    return False\nelse:\n    return False\ndef main ().\nyears = int (input (\"Enter a year: \"))\nis_leap=is_leap-year (year)\nprint (is-leap)\nname_ = \"_main_\":\nmain()\n", "ir_algo_output_indented_lines": [{"x": 110.0, "y": 17.0, "w": 670.0, "h": 66.0, "line_num": 1, "text": "def is-leap year (year):", "cluster_label": 0, "indentation": 0}, {"x": 144.0, "y": 143.0, "w": 467.0, "h": 56.0, "line_num": 2, "text": "if year % 4 == 0'", "cluster_label": 0, "indentation": 0}, {"x": 192.0, "y": 203.0, "w": 509.0, "h": 55.0, "line_num": 3, "text": "if years % 100 = = 0:", "cluster_label": 0, "indentation": 0}, {"x": 298.0, "y": 284.0, "w": 460.0, "h": 58.0, "line_num": 4, "text": "year % 400 = = 0:", "cluster_label": 1, "indentation": 1}, {"x": 325.0, "y": 343.0, "w": 339.0, "h": 50.0, "line_num": 5, "text": "return True", "cluster_label": 1, "indentation": 1}, {"x": 249.0, "y": 397.0, "w": 128.0, "h": 48.0, "line_num": 6, "text": "else:", "cluster_label": 1, "indentation": 1}, {"x": 370.0, "y": 453.0, "w": 345.0, "h": 60.0, "line_num": 7, "text": "return False", "cluster_label": 1, "indentation": 1}, {"x": 168.0, "y": 518.0, "w": 143.0, "h": 58.0, "line_num": 8, "text": "else:", "cluster_label": 0, "indentation": 0}, {"x": 271.0, "y": 580.0, "w": 316.0, "h": 58.0, "line_num": 9, "text": "return False", "cluster_label": 1, "indentation": 1}, {"x": 118.0, "y": 700.0, "w": 138.0, "h": 56.0, "line_num": 10, "text": "else:", "cluster_label": 0, "indentation": 0}, {"x": 233.0, "y": 768.0, "w": 324.0, "h": 54.0, "line_num": 11, "text": "return False", "cluster_label": 1, "indentation": 1}, {"x": 72.0, "y": 879.0, "w": 334.0, "h": 59.0, "line_num": 12, "text": "def main ().", "cluster_label": 0, "indentation": 0}, {"x": 174.0, "y": 934.0, "w": 910.0, "h": 62.0, "line_num": 13, "text": "years = int (input (\"Enter a year: \"))", "cluster_label": 0, "indentation": 0}, {"x": 169.0, "y": 1003.0, "w": 779.0, "h": 54.0, "line_num": 14, "text": "is_leap=is_leap-year (year)", "cluster_label": 0, "indentation": 0}, {"x": 168.0, "y": 1060.0, "w": 412.0, "h": 57.0, "line_num": 15, "text": "print (is-leap)", "cluster_label": 0, "indentation": 0}, {"x": 144.0, "y": 1174.0, "w": 603.0, "h": 65.0, "line_num": 16, "text": "name_ = \"_main_\":", "cluster_label": 0, "indentation": 0}, {"x": 157.0, "y": 1241.0, "w": 175.0, "h": 55.0, "line_num": 17, "text": "main()", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 124, "prompting_method": "cot-test5", "lm_post_processed_code": "def is_leap_year(year):\nif year % 4 == 0:\nif year % 100 == 0:\n    if year % 400 == 0:\n    return True\n    else:\n    return False\nelse:\n    return False\nelse:\n    return False\n\ndef main():\nyear = int(input(\"Enter a year: \"))\nis_leap = is_leap_year(year)\nprint(is_leap)\n\nif __name__ == \"__main__\":\nmain()\n", "lm_post_processed_edit_distance": 92}, {"image_id": 43, "image_height": 1600, "image_width": 1303, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 110.0, "y": 17.0, "w": 670.0, "h": 66.0, "line_num": 1, "text": "def is-leap year (year):"}, {"x": 144.0, "y": 143.0, "w": 467.0, "h": 56.0, "line_num": 2, "text": "if year % 4 == 0'"}, {"x": 192.0, "y": 203.0, "w": 509.0, "h": 55.0, "line_num": 3, "text": "if years % 100 = = 0:"}, {"x": 298.0, "y": 284.0, "w": 460.0, "h": 58.0, "line_num": 4, "text": "year % 400 = = 0:"}, {"x": 325.0, "y": 343.0, "w": 339.0, "h": 50.0, "line_num": 5, "text": "return True"}, {"x": 249.0, "y": 397.0, "w": 128.0, "h": 48.0, "line_num": 6, "text": "else:"}, {"x": 370.0, "y": 453.0, "w": 345.0, "h": 60.0, "line_num": 7, "text": "return False"}, {"x": 168.0, "y": 518.0, "w": 143.0, "h": 58.0, "line_num": 8, "text": "else:"}, {"x": 271.0, "y": 580.0, "w": 316.0, "h": 58.0, "line_num": 9, "text": "return False"}, {"x": 118.0, "y": 700.0, "w": 138.0, "h": 56.0, "line_num": 10, "text": "else:"}, {"x": 233.0, "y": 768.0, "w": 324.0, "h": 54.0, "line_num": 11, "text": "return False"}, {"x": 72.0, "y": 879.0, "w": 334.0, "h": 59.0, "line_num": 12, "text": "def main ()."}, {"x": 174.0, "y": 934.0, "w": 910.0, "h": 62.0, "line_num": 13, "text": "years = int (input (\"Enter a year: \"))"}, {"x": 169.0, "y": 1003.0, "w": 779.0, "h": 54.0, "line_num": 14, "text": "is_leap=is_leap-year (year)"}, {"x": 168.0, "y": 1060.0, "w": 412.0, "h": 57.0, "line_num": 15, "text": "print (is-leap)"}, {"x": 144.0, "y": 1174.0, "w": 603.0, "h": 65.0, "line_num": 16, "text": "name_ = \"_main_\":"}, {"x": 157.0, "y": 1241.0, "w": 175.0, "h": 55.0, "line_num": 17, "text": "main()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 85.67647058823529, "ir_algo_output_code": "def is-leap year (year):\nif year % 4 == 0'\nif years % 100 = = 0:\n    year % 400 = = 0:\n    return True\n    else:\n    return False\nelse:\n    return False\nelse:\n    return False\ndef main ().\nyears = int (input (\"Enter a year: \"))\nis_leap=is_leap-year (year)\nprint (is-leap)\nname_ = \"_main_\":\nmain()\n", "ir_algo_output_indented_lines": [{"x": 110.0, "y": 17.0, "w": 670.0, "h": 66.0, "line_num": 1, "text": "def is-leap year (year):", "cluster_label": 0, "indentation": 0}, {"x": 144.0, "y": 143.0, "w": 467.0, "h": 56.0, "line_num": 2, "text": "if year % 4 == 0'", "cluster_label": 0, "indentation": 0}, {"x": 192.0, "y": 203.0, "w": 509.0, "h": 55.0, "line_num": 3, "text": "if years % 100 = = 0:", "cluster_label": 0, "indentation": 0}, {"x": 298.0, "y": 284.0, "w": 460.0, "h": 58.0, "line_num": 4, "text": "year % 400 = = 0:", "cluster_label": 1, "indentation": 1}, {"x": 325.0, "y": 343.0, "w": 339.0, "h": 50.0, "line_num": 5, "text": "return True", "cluster_label": 1, "indentation": 1}, {"x": 249.0, "y": 397.0, "w": 128.0, "h": 48.0, "line_num": 6, "text": "else:", "cluster_label": 1, "indentation": 1}, {"x": 370.0, "y": 453.0, "w": 345.0, "h": 60.0, "line_num": 7, "text": "return False", "cluster_label": 1, "indentation": 1}, {"x": 168.0, "y": 518.0, "w": 143.0, "h": 58.0, "line_num": 8, "text": "else:", "cluster_label": 0, "indentation": 0}, {"x": 271.0, "y": 580.0, "w": 316.0, "h": 58.0, "line_num": 9, "text": "return False", "cluster_label": 1, "indentation": 1}, {"x": 118.0, "y": 700.0, "w": 138.0, "h": 56.0, "line_num": 10, "text": "else:", "cluster_label": 0, "indentation": 0}, {"x": 233.0, "y": 768.0, "w": 324.0, "h": 54.0, "line_num": 11, "text": "return False", "cluster_label": 1, "indentation": 1}, {"x": 72.0, "y": 879.0, "w": 334.0, "h": 59.0, "line_num": 12, "text": "def main ().", "cluster_label": 0, "indentation": 0}, {"x": 174.0, "y": 934.0, "w": 910.0, "h": 62.0, "line_num": 13, "text": "years = int (input (\"Enter a year: \"))", "cluster_label": 0, "indentation": 0}, {"x": 169.0, "y": 1003.0, "w": 779.0, "h": 54.0, "line_num": 14, "text": "is_leap=is_leap-year (year)", "cluster_label": 0, "indentation": 0}, {"x": 168.0, "y": 1060.0, "w": 412.0, "h": 57.0, "line_num": 15, "text": "print (is-leap)", "cluster_label": 0, "indentation": 0}, {"x": 144.0, "y": 1174.0, "w": 603.0, "h": 65.0, "line_num": 16, "text": "name_ = \"_main_\":", "cluster_label": 0, "indentation": 0}, {"x": 157.0, "y": 1241.0, "w": 175.0, "h": 55.0, "line_num": 17, "text": "main()", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 124, "prompting_method": "simple-test2", "lm_post_processed_code": "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n\ndef main():\n    year = int(input(\"Enter a year: \"))\n    is_leap = is_leap_year(year)\n    print(is_leap)\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 0}, {"image_id": 43, "image_height": 1600, "image_width": 1303, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 110.0, "y": 17.0, "w": 670.0, "h": 66.0, "line_num": 1, "text": "def is-leap year (year):"}, {"x": 144.0, "y": 143.0, "w": 467.0, "h": 56.0, "line_num": 2, "text": "if year % 4 == 0'"}, {"x": 192.0, "y": 203.0, "w": 509.0, "h": 55.0, "line_num": 3, "text": "if years % 100 = = 0:"}, {"x": 298.0, "y": 284.0, "w": 460.0, "h": 58.0, "line_num": 4, "text": "year % 400 = = 0:"}, {"x": 325.0, "y": 343.0, "w": 339.0, "h": 50.0, "line_num": 5, "text": "return True"}, {"x": 249.0, "y": 397.0, "w": 128.0, "h": 48.0, "line_num": 6, "text": "else:"}, {"x": 370.0, "y": 453.0, "w": 345.0, "h": 60.0, "line_num": 7, "text": "return False"}, {"x": 168.0, "y": 518.0, "w": 143.0, "h": 58.0, "line_num": 8, "text": "else:"}, {"x": 271.0, "y": 580.0, "w": 316.0, "h": 58.0, "line_num": 9, "text": "return False"}, {"x": 118.0, "y": 700.0, "w": 138.0, "h": 56.0, "line_num": 10, "text": "else:"}, {"x": 233.0, "y": 768.0, "w": 324.0, "h": 54.0, "line_num": 11, "text": "return False"}, {"x": 72.0, "y": 879.0, "w": 334.0, "h": 59.0, "line_num": 12, "text": "def main ()."}, {"x": 174.0, "y": 934.0, "w": 910.0, "h": 62.0, "line_num": 13, "text": "years = int (input (\"Enter a year: \"))"}, {"x": 169.0, "y": 1003.0, "w": 779.0, "h": 54.0, "line_num": 14, "text": "is_leap=is_leap-year (year)"}, {"x": 168.0, "y": 1060.0, "w": 412.0, "h": 57.0, "line_num": 15, "text": "print (is-leap)"}, {"x": 144.0, "y": 1174.0, "w": 603.0, "h": 65.0, "line_num": 16, "text": "name_ = \"_main_\":"}, {"x": 157.0, "y": 1241.0, "w": 175.0, "h": 55.0, "line_num": 17, "text": "main()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 85.67647058823529, "ir_algo_output_code": "def is-leap year (year):\nif year % 4 == 0'\nif years % 100 = = 0:\n    year % 400 = = 0:\n    return True\n    else:\n    return False\nelse:\n    return False\nelse:\n    return False\ndef main ().\nyears = int (input (\"Enter a year: \"))\nis_leap=is_leap-year (year)\nprint (is-leap)\nname_ = \"_main_\":\nmain()\n", "ir_algo_output_indented_lines": [{"x": 110.0, "y": 17.0, "w": 670.0, "h": 66.0, "line_num": 1, "text": "def is-leap year (year):", "cluster_label": 0, "indentation": 0}, {"x": 144.0, "y": 143.0, "w": 467.0, "h": 56.0, "line_num": 2, "text": "if year % 4 == 0'", "cluster_label": 0, "indentation": 0}, {"x": 192.0, "y": 203.0, "w": 509.0, "h": 55.0, "line_num": 3, "text": "if years % 100 = = 0:", "cluster_label": 0, "indentation": 0}, {"x": 298.0, "y": 284.0, "w": 460.0, "h": 58.0, "line_num": 4, "text": "year % 400 = = 0:", "cluster_label": 1, "indentation": 1}, {"x": 325.0, "y": 343.0, "w": 339.0, "h": 50.0, "line_num": 5, "text": "return True", "cluster_label": 1, "indentation": 1}, {"x": 249.0, "y": 397.0, "w": 128.0, "h": 48.0, "line_num": 6, "text": "else:", "cluster_label": 1, "indentation": 1}, {"x": 370.0, "y": 453.0, "w": 345.0, "h": 60.0, "line_num": 7, "text": "return False", "cluster_label": 1, "indentation": 1}, {"x": 168.0, "y": 518.0, "w": 143.0, "h": 58.0, "line_num": 8, "text": "else:", "cluster_label": 0, "indentation": 0}, {"x": 271.0, "y": 580.0, "w": 316.0, "h": 58.0, "line_num": 9, "text": "return False", "cluster_label": 1, "indentation": 1}, {"x": 118.0, "y": 700.0, "w": 138.0, "h": 56.0, "line_num": 10, "text": "else:", "cluster_label": 0, "indentation": 0}, {"x": 233.0, "y": 768.0, "w": 324.0, "h": 54.0, "line_num": 11, "text": "return False", "cluster_label": 1, "indentation": 1}, {"x": 72.0, "y": 879.0, "w": 334.0, "h": 59.0, "line_num": 12, "text": "def main ().", "cluster_label": 0, "indentation": 0}, {"x": 174.0, "y": 934.0, "w": 910.0, "h": 62.0, "line_num": 13, "text": "years = int (input (\"Enter a year: \"))", "cluster_label": 0, "indentation": 0}, {"x": 169.0, "y": 1003.0, "w": 779.0, "h": 54.0, "line_num": 14, "text": "is_leap=is_leap-year (year)", "cluster_label": 0, "indentation": 0}, {"x": 168.0, "y": 1060.0, "w": 412.0, "h": 57.0, "line_num": 15, "text": "print (is-leap)", "cluster_label": 0, "indentation": 0}, {"x": 144.0, "y": 1174.0, "w": 603.0, "h": 65.0, "line_num": 16, "text": "name_ = \"_main_\":", "cluster_label": 0, "indentation": 0}, {"x": 157.0, "y": 1241.0, "w": 175.0, "h": 55.0, "line_num": 17, "text": "main()", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 124, "prompting_method": "simple-test3", "lm_post_processed_code": "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n\ndef main():\n    year = int(input(\"Enter a year: \"))\n    is_leap = is_leap_year(year)\n    print(is_leap)\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 0}, {"image_id": 43, "image_height": 1600, "image_width": 1303, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 110.0, "y": 17.0, "w": 670.0, "h": 66.0, "line_num": 1, "text": "def is-leap year (year):"}, {"x": 144.0, "y": 143.0, "w": 467.0, "h": 56.0, "line_num": 2, "text": "if year % 4 == 0'"}, {"x": 192.0, "y": 203.0, "w": 509.0, "h": 55.0, "line_num": 3, "text": "if years % 100 = = 0:"}, {"x": 298.0, "y": 284.0, "w": 460.0, "h": 58.0, "line_num": 4, "text": "year % 400 = = 0:"}, {"x": 325.0, "y": 343.0, "w": 339.0, "h": 50.0, "line_num": 5, "text": "return True"}, {"x": 249.0, "y": 397.0, "w": 128.0, "h": 48.0, "line_num": 6, "text": "else:"}, {"x": 370.0, "y": 453.0, "w": 345.0, "h": 60.0, "line_num": 7, "text": "return False"}, {"x": 168.0, "y": 518.0, "w": 143.0, "h": 58.0, "line_num": 8, "text": "else:"}, {"x": 271.0, "y": 580.0, "w": 316.0, "h": 58.0, "line_num": 9, "text": "return False"}, {"x": 118.0, "y": 700.0, "w": 138.0, "h": 56.0, "line_num": 10, "text": "else:"}, {"x": 233.0, "y": 768.0, "w": 324.0, "h": 54.0, "line_num": 11, "text": "return False"}, {"x": 72.0, "y": 879.0, "w": 334.0, "h": 59.0, "line_num": 12, "text": "def main ()."}, {"x": 174.0, "y": 934.0, "w": 910.0, "h": 62.0, "line_num": 13, "text": "years = int (input (\"Enter a year: \"))"}, {"x": 169.0, "y": 1003.0, "w": 779.0, "h": 54.0, "line_num": 14, "text": "is_leap=is_leap-year (year)"}, {"x": 168.0, "y": 1060.0, "w": 412.0, "h": 57.0, "line_num": 15, "text": "print (is-leap)"}, {"x": 144.0, "y": 1174.0, "w": 603.0, "h": 65.0, "line_num": 16, "text": "name_ = \"_main_\":"}, {"x": 157.0, "y": 1241.0, "w": 175.0, "h": 55.0, "line_num": 17, "text": "main()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def is-leap year (year):\nif year % 4 == 0'\n    if years % 100 = = 0:\n        year % 400 = = 0:\n        return True\n    else:\n        return False\nelse:\n    return False\nelse:\n    return False\ndef main ().\n    years = int (input (\"Enter a year: \"))\n    is_leap=is_leap-year (year)\n    print (is-leap)\n    name_ = \"_main_\":\n    main()\n", "ir_algo_output_indented_lines": [{"x": 110.0, "y": 17.0, "w": 670.0, "h": 66.0, "line_num": 1, "text": "def is-leap year (year):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 144.0, "y": 143.0, "w": 467.0, "h": 56.0, "line_num": 2, "text": "if year % 4 == 0'", "delta": 34.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 192.0, "y": 203.0, "w": 509.0, "h": 55.0, "line_num": 3, "text": "if years % 100 = = 0:", "delta": 48.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 298.0, "y": 284.0, "w": 460.0, "h": 58.0, "line_num": 4, "text": "year % 400 = = 0:", "delta": 106.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 325.0, "y": 343.0, "w": 339.0, "h": 50.0, "line_num": 5, "text": "return True", "delta": 27.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 249.0, "y": 397.0, "w": 128.0, "h": 48.0, "line_num": 6, "text": "else:", "delta": -76.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 370.0, "y": 453.0, "w": 345.0, "h": 60.0, "line_num": 7, "text": "return False", "delta": 121.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 168.0, "y": 518.0, "w": 143.0, "h": 58.0, "line_num": 8, "text": "else:", "delta": -202.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 271.0, "y": 580.0, "w": 316.0, "h": 58.0, "line_num": 9, "text": "return False", "delta": 103.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 118.0, "y": 700.0, "w": 138.0, "h": 56.0, "line_num": 10, "text": "else:", "delta": -153.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 233.0, "y": 768.0, "w": 324.0, "h": 54.0, "line_num": 11, "text": "return False", "delta": 115.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 72.0, "y": 879.0, "w": 334.0, "h": 59.0, "line_num": 12, "text": "def main ().", "delta": -161.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 174.0, "y": 934.0, "w": 910.0, "h": 62.0, "line_num": 13, "text": "years = int (input (\"Enter a year: \"))", "delta": 102.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 169.0, "y": 1003.0, "w": 779.0, "h": 54.0, "line_num": 14, "text": "is_leap=is_leap-year (year)", "delta": -5.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 168.0, "y": 1060.0, "w": 412.0, "h": 57.0, "line_num": 15, "text": "print (is-leap)", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 144.0, "y": 1174.0, "w": 603.0, "h": 65.0, "line_num": 16, "text": "name_ = \"_main_\":", "delta": -24.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 157.0, "y": 1241.0, "w": 175.0, "h": 55.0, "line_num": 17, "text": "main()", "delta": 13.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}], "ir_algo_output_edit_distance": 91, "prompting_method": "none", "lm_post_processed_code": "def is-leap year (year):\nif year % 4 == 0'\n    if years % 100 = = 0:\n        year % 400 = = 0:\n        return True\n    else:\n        return False\nelse:\n    return False\nelse:\n    return False\ndef main ().\n    years = int (input (\"Enter a year: \"))\n    is_leap=is_leap-year (year)\n    print (is-leap)\n    name_ = \"_main_\":\n    main()\n", "lm_post_processed_edit_distance": 91}, {"image_id": 43, "image_height": 1600, "image_width": 1303, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 110.0, "y": 17.0, "w": 670.0, "h": 66.0, "line_num": 1, "text": "def is-leap year (year):"}, {"x": 144.0, "y": 143.0, "w": 467.0, "h": 56.0, "line_num": 2, "text": "if year % 4 == 0'"}, {"x": 192.0, "y": 203.0, "w": 509.0, "h": 55.0, "line_num": 3, "text": "if years % 100 = = 0:"}, {"x": 298.0, "y": 284.0, "w": 460.0, "h": 58.0, "line_num": 4, "text": "year % 400 = = 0:"}, {"x": 325.0, "y": 343.0, "w": 339.0, "h": 50.0, "line_num": 5, "text": "return True"}, {"x": 249.0, "y": 397.0, "w": 128.0, "h": 48.0, "line_num": 6, "text": "else:"}, {"x": 370.0, "y": 453.0, "w": 345.0, "h": 60.0, "line_num": 7, "text": "return False"}, {"x": 168.0, "y": 518.0, "w": 143.0, "h": 58.0, "line_num": 8, "text": "else:"}, {"x": 271.0, "y": 580.0, "w": 316.0, "h": 58.0, "line_num": 9, "text": "return False"}, {"x": 118.0, "y": 700.0, "w": 138.0, "h": 56.0, "line_num": 10, "text": "else:"}, {"x": 233.0, "y": 768.0, "w": 324.0, "h": 54.0, "line_num": 11, "text": "return False"}, {"x": 72.0, "y": 879.0, "w": 334.0, "h": 59.0, "line_num": 12, "text": "def main ()."}, {"x": 174.0, "y": 934.0, "w": 910.0, "h": 62.0, "line_num": 13, "text": "years = int (input (\"Enter a year: \"))"}, {"x": 169.0, "y": 1003.0, "w": 779.0, "h": 54.0, "line_num": 14, "text": "is_leap=is_leap-year (year)"}, {"x": 168.0, "y": 1060.0, "w": 412.0, "h": 57.0, "line_num": 15, "text": "print (is-leap)"}, {"x": 144.0, "y": 1174.0, "w": 603.0, "h": 65.0, "line_num": 16, "text": "name_ = \"_main_\":"}, {"x": 157.0, "y": 1241.0, "w": 175.0, "h": 55.0, "line_num": 17, "text": "main()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def is-leap year (year):\nif year % 4 == 0'\n    if years % 100 = = 0:\n        year % 400 = = 0:\n        return True\n    else:\n        return False\nelse:\n    return False\nelse:\n    return False\ndef main ().\n    years = int (input (\"Enter a year: \"))\n    is_leap=is_leap-year (year)\n    print (is-leap)\n    name_ = \"_main_\":\n    main()\n", "ir_algo_output_indented_lines": [{"x": 110.0, "y": 17.0, "w": 670.0, "h": 66.0, "line_num": 1, "text": "def is-leap year (year):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 144.0, "y": 143.0, "w": 467.0, "h": 56.0, "line_num": 2, "text": "if year % 4 == 0'", "delta": 34.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 192.0, "y": 203.0, "w": 509.0, "h": 55.0, "line_num": 3, "text": "if years % 100 = = 0:", "delta": 48.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 298.0, "y": 284.0, "w": 460.0, "h": 58.0, "line_num": 4, "text": "year % 400 = = 0:", "delta": 106.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 325.0, "y": 343.0, "w": 339.0, "h": 50.0, "line_num": 5, "text": "return True", "delta": 27.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 249.0, "y": 397.0, "w": 128.0, "h": 48.0, "line_num": 6, "text": "else:", "delta": -76.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 370.0, "y": 453.0, "w": 345.0, "h": 60.0, "line_num": 7, "text": "return False", "delta": 121.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 168.0, "y": 518.0, "w": 143.0, "h": 58.0, "line_num": 8, "text": "else:", "delta": -202.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 271.0, "y": 580.0, "w": 316.0, "h": 58.0, "line_num": 9, "text": "return False", "delta": 103.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 118.0, "y": 700.0, "w": 138.0, "h": 56.0, "line_num": 10, "text": "else:", "delta": -153.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 233.0, "y": 768.0, "w": 324.0, "h": 54.0, "line_num": 11, "text": "return False", "delta": 115.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 72.0, "y": 879.0, "w": 334.0, "h": 59.0, "line_num": 12, "text": "def main ().", "delta": -161.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 174.0, "y": 934.0, "w": 910.0, "h": 62.0, "line_num": 13, "text": "years = int (input (\"Enter a year: \"))", "delta": 102.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 169.0, "y": 1003.0, "w": 779.0, "h": 54.0, "line_num": 14, "text": "is_leap=is_leap-year (year)", "delta": -5.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 168.0, "y": 1060.0, "w": 412.0, "h": 57.0, "line_num": 15, "text": "print (is-leap)", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 144.0, "y": 1174.0, "w": 603.0, "h": 65.0, "line_num": 16, "text": "name_ = \"_main_\":", "delta": -24.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 157.0, "y": 1241.0, "w": 175.0, "h": 55.0, "line_num": 17, "text": "main()", "delta": 13.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}], "ir_algo_output_edit_distance": 91, "prompting_method": "cot-test1", "lm_post_processed_code": "def is_leap_year(year):\nif year % 4 == 0:\n    if year % 100 == 0:\n        year % 400 == 0:\n        return True\n    else:\n        return False\nelse:\n    return False\nelse:\n    return False\n\ndef main():\n    year = int(input(\"Enter a year: \"))\n    is_leap = is_leap_year(year)\n    print(is_leap)\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 63}, {"image_id": 43, "image_height": 1600, "image_width": 1303, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 110.0, "y": 17.0, "w": 670.0, "h": 66.0, "line_num": 1, "text": "def is-leap year (year):"}, {"x": 144.0, "y": 143.0, "w": 467.0, "h": 56.0, "line_num": 2, "text": "if year % 4 == 0'"}, {"x": 192.0, "y": 203.0, "w": 509.0, "h": 55.0, "line_num": 3, "text": "if years % 100 = = 0:"}, {"x": 298.0, "y": 284.0, "w": 460.0, "h": 58.0, "line_num": 4, "text": "year % 400 = = 0:"}, {"x": 325.0, "y": 343.0, "w": 339.0, "h": 50.0, "line_num": 5, "text": "return True"}, {"x": 249.0, "y": 397.0, "w": 128.0, "h": 48.0, "line_num": 6, "text": "else:"}, {"x": 370.0, "y": 453.0, "w": 345.0, "h": 60.0, "line_num": 7, "text": "return False"}, {"x": 168.0, "y": 518.0, "w": 143.0, "h": 58.0, "line_num": 8, "text": "else:"}, {"x": 271.0, "y": 580.0, "w": 316.0, "h": 58.0, "line_num": 9, "text": "return False"}, {"x": 118.0, "y": 700.0, "w": 138.0, "h": 56.0, "line_num": 10, "text": "else:"}, {"x": 233.0, "y": 768.0, "w": 324.0, "h": 54.0, "line_num": 11, "text": "return False"}, {"x": 72.0, "y": 879.0, "w": 334.0, "h": 59.0, "line_num": 12, "text": "def main ()."}, {"x": 174.0, "y": 934.0, "w": 910.0, "h": 62.0, "line_num": 13, "text": "years = int (input (\"Enter a year: \"))"}, {"x": 169.0, "y": 1003.0, "w": 779.0, "h": 54.0, "line_num": 14, "text": "is_leap=is_leap-year (year)"}, {"x": 168.0, "y": 1060.0, "w": 412.0, "h": 57.0, "line_num": 15, "text": "print (is-leap)"}, {"x": 144.0, "y": 1174.0, "w": 603.0, "h": 65.0, "line_num": 16, "text": "name_ = \"_main_\":"}, {"x": 157.0, "y": 1241.0, "w": 175.0, "h": 55.0, "line_num": 17, "text": "main()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def is-leap year (year):\nif year % 4 == 0'\n    if years % 100 = = 0:\n        year % 400 = = 0:\n        return True\n    else:\n        return False\nelse:\n    return False\nelse:\n    return False\ndef main ().\n    years = int (input (\"Enter a year: \"))\n    is_leap=is_leap-year (year)\n    print (is-leap)\n    name_ = \"_main_\":\n    main()\n", "ir_algo_output_indented_lines": [{"x": 110.0, "y": 17.0, "w": 670.0, "h": 66.0, "line_num": 1, "text": "def is-leap year (year):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 144.0, "y": 143.0, "w": 467.0, "h": 56.0, "line_num": 2, "text": "if year % 4 == 0'", "delta": 34.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 192.0, "y": 203.0, "w": 509.0, "h": 55.0, "line_num": 3, "text": "if years % 100 = = 0:", "delta": 48.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 298.0, "y": 284.0, "w": 460.0, "h": 58.0, "line_num": 4, "text": "year % 400 = = 0:", "delta": 106.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 325.0, "y": 343.0, "w": 339.0, "h": 50.0, "line_num": 5, "text": "return True", "delta": 27.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 249.0, "y": 397.0, "w": 128.0, "h": 48.0, "line_num": 6, "text": "else:", "delta": -76.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 370.0, "y": 453.0, "w": 345.0, "h": 60.0, "line_num": 7, "text": "return False", "delta": 121.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 168.0, "y": 518.0, "w": 143.0, "h": 58.0, "line_num": 8, "text": "else:", "delta": -202.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 271.0, "y": 580.0, "w": 316.0, "h": 58.0, "line_num": 9, "text": "return False", "delta": 103.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 118.0, "y": 700.0, "w": 138.0, "h": 56.0, "line_num": 10, "text": "else:", "delta": -153.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 233.0, "y": 768.0, "w": 324.0, "h": 54.0, "line_num": 11, "text": "return False", "delta": 115.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 72.0, "y": 879.0, "w": 334.0, "h": 59.0, "line_num": 12, "text": "def main ().", "delta": -161.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 174.0, "y": 934.0, "w": 910.0, "h": 62.0, "line_num": 13, "text": "years = int (input (\"Enter a year: \"))", "delta": 102.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 169.0, "y": 1003.0, "w": 779.0, "h": 54.0, "line_num": 14, "text": "is_leap=is_leap-year (year)", "delta": -5.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 168.0, "y": 1060.0, "w": 412.0, "h": 57.0, "line_num": 15, "text": "print (is-leap)", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 144.0, "y": 1174.0, "w": 603.0, "h": 65.0, "line_num": 16, "text": "name_ = \"_main_\":", "delta": -24.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 157.0, "y": 1241.0, "w": 175.0, "h": 55.0, "line_num": 17, "text": "main()", "delta": 13.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}], "ir_algo_output_edit_distance": 91, "prompting_method": "cot-test5", "lm_post_processed_code": "def is_leap_year(year):\nif year % 4 == 0:\n    if year % 100 == 0:\n        if year % 400 == 0:\n        return True\n    else:\n        return False\nelse:\n    return False\nelse:\n    return False\n\ndef main():\n    year = int(input(\"Enter a year: \"))\n    is_leap = is_leap_year(year)\n    print(is_leap)\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 60}, {"image_id": 43, "image_height": 1600, "image_width": 1303, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 110.0, "y": 17.0, "w": 670.0, "h": 66.0, "line_num": 1, "text": "def is-leap year (year):"}, {"x": 144.0, "y": 143.0, "w": 467.0, "h": 56.0, "line_num": 2, "text": "if year % 4 == 0'"}, {"x": 192.0, "y": 203.0, "w": 509.0, "h": 55.0, "line_num": 3, "text": "if years % 100 = = 0:"}, {"x": 298.0, "y": 284.0, "w": 460.0, "h": 58.0, "line_num": 4, "text": "year % 400 = = 0:"}, {"x": 325.0, "y": 343.0, "w": 339.0, "h": 50.0, "line_num": 5, "text": "return True"}, {"x": 249.0, "y": 397.0, "w": 128.0, "h": 48.0, "line_num": 6, "text": "else:"}, {"x": 370.0, "y": 453.0, "w": 345.0, "h": 60.0, "line_num": 7, "text": "return False"}, {"x": 168.0, "y": 518.0, "w": 143.0, "h": 58.0, "line_num": 8, "text": "else:"}, {"x": 271.0, "y": 580.0, "w": 316.0, "h": 58.0, "line_num": 9, "text": "return False"}, {"x": 118.0, "y": 700.0, "w": 138.0, "h": 56.0, "line_num": 10, "text": "else:"}, {"x": 233.0, "y": 768.0, "w": 324.0, "h": 54.0, "line_num": 11, "text": "return False"}, {"x": 72.0, "y": 879.0, "w": 334.0, "h": 59.0, "line_num": 12, "text": "def main ()."}, {"x": 174.0, "y": 934.0, "w": 910.0, "h": 62.0, "line_num": 13, "text": "years = int (input (\"Enter a year: \"))"}, {"x": 169.0, "y": 1003.0, "w": 779.0, "h": 54.0, "line_num": 14, "text": "is_leap=is_leap-year (year)"}, {"x": 168.0, "y": 1060.0, "w": 412.0, "h": 57.0, "line_num": 15, "text": "print (is-leap)"}, {"x": 144.0, "y": 1174.0, "w": 603.0, "h": 65.0, "line_num": 16, "text": "name_ = \"_main_\":"}, {"x": 157.0, "y": 1241.0, "w": 175.0, "h": 55.0, "line_num": 17, "text": "main()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def is-leap year (year):\nif year % 4 == 0'\n    if years % 100 = = 0:\n        year % 400 = = 0:\n        return True\n    else:\n        return False\nelse:\n    return False\nelse:\n    return False\ndef main ().\n    years = int (input (\"Enter a year: \"))\n    is_leap=is_leap-year (year)\n    print (is-leap)\n    name_ = \"_main_\":\n    main()\n", "ir_algo_output_indented_lines": [{"x": 110.0, "y": 17.0, "w": 670.0, "h": 66.0, "line_num": 1, "text": "def is-leap year (year):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 144.0, "y": 143.0, "w": 467.0, "h": 56.0, "line_num": 2, "text": "if year % 4 == 0'", "delta": 34.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 192.0, "y": 203.0, "w": 509.0, "h": 55.0, "line_num": 3, "text": "if years % 100 = = 0:", "delta": 48.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 298.0, "y": 284.0, "w": 460.0, "h": 58.0, "line_num": 4, "text": "year % 400 = = 0:", "delta": 106.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 325.0, "y": 343.0, "w": 339.0, "h": 50.0, "line_num": 5, "text": "return True", "delta": 27.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 249.0, "y": 397.0, "w": 128.0, "h": 48.0, "line_num": 6, "text": "else:", "delta": -76.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 370.0, "y": 453.0, "w": 345.0, "h": 60.0, "line_num": 7, "text": "return False", "delta": 121.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 168.0, "y": 518.0, "w": 143.0, "h": 58.0, "line_num": 8, "text": "else:", "delta": -202.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 271.0, "y": 580.0, "w": 316.0, "h": 58.0, "line_num": 9, "text": "return False", "delta": 103.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 118.0, "y": 700.0, "w": 138.0, "h": 56.0, "line_num": 10, "text": "else:", "delta": -153.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 233.0, "y": 768.0, "w": 324.0, "h": 54.0, "line_num": 11, "text": "return False", "delta": 115.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 72.0, "y": 879.0, "w": 334.0, "h": 59.0, "line_num": 12, "text": "def main ().", "delta": -161.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 174.0, "y": 934.0, "w": 910.0, "h": 62.0, "line_num": 13, "text": "years = int (input (\"Enter a year: \"))", "delta": 102.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 169.0, "y": 1003.0, "w": 779.0, "h": 54.0, "line_num": 14, "text": "is_leap=is_leap-year (year)", "delta": -5.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 168.0, "y": 1060.0, "w": 412.0, "h": 57.0, "line_num": 15, "text": "print (is-leap)", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 144.0, "y": 1174.0, "w": 603.0, "h": 65.0, "line_num": 16, "text": "name_ = \"_main_\":", "delta": -24.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 157.0, "y": 1241.0, "w": 175.0, "h": 55.0, "line_num": 17, "text": "main()", "delta": 13.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}], "ir_algo_output_edit_distance": 91, "prompting_method": "simple-test2", "lm_post_processed_code": "def is_leap_year(year):\nif year % 4 == 0:\n    if year % 100 == 0:\n        year % 400 == 0\n        return True\n    else:\n        return False\nelse:\n    return False\nelse:\n    return False\n\ndef main():\n    year = int(input(\"Enter a year: \"))\n    is_leap=is_leap_year(year)\n    print(is_leap)\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 66}, {"image_id": 43, "image_height": 1600, "image_width": 1303, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 110.0, "y": 17.0, "w": 670.0, "h": 66.0, "line_num": 1, "text": "def is-leap year (year):"}, {"x": 144.0, "y": 143.0, "w": 467.0, "h": 56.0, "line_num": 2, "text": "if year % 4 == 0'"}, {"x": 192.0, "y": 203.0, "w": 509.0, "h": 55.0, "line_num": 3, "text": "if years % 100 = = 0:"}, {"x": 298.0, "y": 284.0, "w": 460.0, "h": 58.0, "line_num": 4, "text": "year % 400 = = 0:"}, {"x": 325.0, "y": 343.0, "w": 339.0, "h": 50.0, "line_num": 5, "text": "return True"}, {"x": 249.0, "y": 397.0, "w": 128.0, "h": 48.0, "line_num": 6, "text": "else:"}, {"x": 370.0, "y": 453.0, "w": 345.0, "h": 60.0, "line_num": 7, "text": "return False"}, {"x": 168.0, "y": 518.0, "w": 143.0, "h": 58.0, "line_num": 8, "text": "else:"}, {"x": 271.0, "y": 580.0, "w": 316.0, "h": 58.0, "line_num": 9, "text": "return False"}, {"x": 118.0, "y": 700.0, "w": 138.0, "h": 56.0, "line_num": 10, "text": "else:"}, {"x": 233.0, "y": 768.0, "w": 324.0, "h": 54.0, "line_num": 11, "text": "return False"}, {"x": 72.0, "y": 879.0, "w": 334.0, "h": 59.0, "line_num": 12, "text": "def main ()."}, {"x": 174.0, "y": 934.0, "w": 910.0, "h": 62.0, "line_num": 13, "text": "years = int (input (\"Enter a year: \"))"}, {"x": 169.0, "y": 1003.0, "w": 779.0, "h": 54.0, "line_num": 14, "text": "is_leap=is_leap-year (year)"}, {"x": 168.0, "y": 1060.0, "w": 412.0, "h": 57.0, "line_num": 15, "text": "print (is-leap)"}, {"x": 144.0, "y": 1174.0, "w": 603.0, "h": 65.0, "line_num": 16, "text": "name_ = \"_main_\":"}, {"x": 157.0, "y": 1241.0, "w": 175.0, "h": 55.0, "line_num": 17, "text": "main()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def is-leap year (year):\nif year % 4 == 0'\n    if years % 100 = = 0:\n        year % 400 = = 0:\n        return True\n    else:\n        return False\nelse:\n    return False\nelse:\n    return False\ndef main ().\n    years = int (input (\"Enter a year: \"))\n    is_leap=is_leap-year (year)\n    print (is-leap)\n    name_ = \"_main_\":\n    main()\n", "ir_algo_output_indented_lines": [{"x": 110.0, "y": 17.0, "w": 670.0, "h": 66.0, "line_num": 1, "text": "def is-leap year (year):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 144.0, "y": 143.0, "w": 467.0, "h": 56.0, "line_num": 2, "text": "if year % 4 == 0'", "delta": 34.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 192.0, "y": 203.0, "w": 509.0, "h": 55.0, "line_num": 3, "text": "if years % 100 = = 0:", "delta": 48.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 298.0, "y": 284.0, "w": 460.0, "h": 58.0, "line_num": 4, "text": "year % 400 = = 0:", "delta": 106.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 325.0, "y": 343.0, "w": 339.0, "h": 50.0, "line_num": 5, "text": "return True", "delta": 27.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 2}, {"x": 249.0, "y": 397.0, "w": 128.0, "h": 48.0, "line_num": 6, "text": "else:", "delta": -76.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 370.0, "y": 453.0, "w": 345.0, "h": 60.0, "line_num": 7, "text": "return False", "delta": 121.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 168.0, "y": 518.0, "w": 143.0, "h": 58.0, "line_num": 8, "text": "else:", "delta": -202.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 271.0, "y": 580.0, "w": 316.0, "h": 58.0, "line_num": 9, "text": "return False", "delta": 103.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 118.0, "y": 700.0, "w": 138.0, "h": 56.0, "line_num": 10, "text": "else:", "delta": -153.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 233.0, "y": 768.0, "w": 324.0, "h": 54.0, "line_num": 11, "text": "return False", "delta": 115.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 72.0, "y": 879.0, "w": 334.0, "h": 59.0, "line_num": 12, "text": "def main ().", "delta": -161.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 174.0, "y": 934.0, "w": 910.0, "h": 62.0, "line_num": 13, "text": "years = int (input (\"Enter a year: \"))", "delta": 102.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 169.0, "y": 1003.0, "w": 779.0, "h": 54.0, "line_num": 14, "text": "is_leap=is_leap-year (year)", "delta": -5.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 168.0, "y": 1060.0, "w": 412.0, "h": 57.0, "line_num": 15, "text": "print (is-leap)", "delta": -1.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 144.0, "y": 1174.0, "w": 603.0, "h": 65.0, "line_num": 16, "text": "name_ = \"_main_\":", "delta": -24.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 157.0, "y": 1241.0, "w": 175.0, "h": 55.0, "line_num": 17, "text": "main()", "delta": 13.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}], "ir_algo_output_edit_distance": 91, "prompting_method": "simple-test3", "lm_post_processed_code": "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n\ndef main():\n    year = int(input(\"Enter a year: \"))\n    is_leap = is_leap_year(year)\n    print(is_leap)\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 0}, {"image_id": 44, "image_height": 2137, "image_width": 2849, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 50.0, "y": 109.0, "w": 807.0, "h": 131.0, "line_num": 1, "text": "def main () :"}, {"x": 381.0, "y": 299.0, "w": 1216.0, "h": 120.0, "line_num": 2, "text": "print (\"problem - 5 \")"}, {"x": 402.0, "y": 463.0, "w": 552.0, "h": 93.0, "line_num": 3, "text": "print (\") --"}, {"x": 390.0, "y": 635.0, "w": 2174.0, "h": 91.0, "line_num": 4, "text": "rumb = int (input ('write an integer number:"}, {"x": 2634.0, "y": 482.0, "w": 129.0, "h": 105.0, "line_num": 5, "text": "\")"}, {"x": 393.0, "y": 805.0, "w": 2042.0, "h": 117.0, "line_num": 6, "text": "mak_list = [int (x) for x in str (numb)]"}, {"x": 416.0, "y": 1024.0, "w": 698.0, "h": 86.0, "line_num": 7, "text": "add-numb = 0"}, {"x": 432.0, "y": 1161.0, "w": 1118.0, "h": 108.0, "line_num": 8, "text": "for is in mak-list :"}, {"x": 884.0, "y": 1310.0, "w": 762.0, "h": 98.0, "line_num": 9, "text": "add-numb + =;"}, {"x": 480.0, "y": 1531.0, "w": 2183.0, "h": 110.0, "line_num": 10, "text": "print (\"Sum of the number's: \", add-numb)"}, {"x": 945.0, "y": 1604.0, "w": 239.0, "h": 69.0, "line_num": 11, "text": "digit"}, {"x": 176.0, "y": 1826.0, "w": 784.0, "h": 117.0, "line_num": 12, "text": "If_ name __ = = \""}, {"x": 1012.0, "y": 1843.0, "w": 511.0, "h": 74.0, "line_num": 13, "text": "-main __:"}, {"x": 360.0, "y": 2003.0, "w": 308.0, "h": 70.0, "line_num": 14, "text": "main()"}], "ir_algo_name": "none", "ir_algo_output_code": "def main () :\nprint (\"problem - 5 \")\nprint (\") --\nrumb = int (input ('write an integer number:\n\")\nmak_list = [int (x) for x in str (numb)]\nadd-numb = 0\nfor is in mak-list :\nadd-numb + =;\nprint (\"Sum of the number's: \", add-numb)\ndigit\nIf_ name __ = = \"\n-main __:\nmain()", "ir_algo_output_edit_distance": 108, "prompting_method": "none", "lm_post_processed_code": "def main () :\nprint (\"problem - 5 \")\nprint (\") --\nrumb = int (input ('write an integer number:\n\")\nmak_list = [int (x) for x in str (numb)]\nadd-numb = 0\nfor is in mak-list :\nadd-numb + =;\nprint (\"Sum of the number's: \", add-numb)\ndigit\nIf_ name __ = = \"\n-main __:\nmain()", "lm_post_processed_edit_distance": 108}, {"image_id": 44, "image_height": 2137, "image_width": 2849, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 50.0, "y": 109.0, "w": 807.0, "h": 131.0, "line_num": 1, "text": "def main () :"}, {"x": 381.0, "y": 299.0, "w": 1216.0, "h": 120.0, "line_num": 2, "text": "print (\"problem - 5 \")"}, {"x": 402.0, "y": 463.0, "w": 552.0, "h": 93.0, "line_num": 3, "text": "print (\") --"}, {"x": 390.0, "y": 635.0, "w": 2174.0, "h": 91.0, "line_num": 4, "text": "rumb = int (input ('write an integer number:"}, {"x": 2634.0, "y": 482.0, "w": 129.0, "h": 105.0, "line_num": 5, "text": "\")"}, {"x": 393.0, "y": 805.0, "w": 2042.0, "h": 117.0, "line_num": 6, "text": "mak_list = [int (x) for x in str (numb)]"}, {"x": 416.0, "y": 1024.0, "w": 698.0, "h": 86.0, "line_num": 7, "text": "add-numb = 0"}, {"x": 432.0, "y": 1161.0, "w": 1118.0, "h": 108.0, "line_num": 8, "text": "for is in mak-list :"}, {"x": 884.0, "y": 1310.0, "w": 762.0, "h": 98.0, "line_num": 9, "text": "add-numb + =;"}, {"x": 480.0, "y": 1531.0, "w": 2183.0, "h": 110.0, "line_num": 10, "text": "print (\"Sum of the number's: \", add-numb)"}, {"x": 945.0, "y": 1604.0, "w": 239.0, "h": 69.0, "line_num": 11, "text": "digit"}, {"x": 176.0, "y": 1826.0, "w": 784.0, "h": 117.0, "line_num": 12, "text": "If_ name __ = = \""}, {"x": 1012.0, "y": 1843.0, "w": 511.0, "h": 74.0, "line_num": 13, "text": "-main __:"}, {"x": 360.0, "y": 2003.0, "w": 308.0, "h": 70.0, "line_num": 14, "text": "main()"}], "ir_algo_name": "none", "ir_algo_output_code": "def main () :\nprint (\"problem - 5 \")\nprint (\") --\nrumb = int (input ('write an integer number:\n\")\nmak_list = [int (x) for x in str (numb)]\nadd-numb = 0\nfor is in mak-list :\nadd-numb + =;\nprint (\"Sum of the number's: \", add-numb)\ndigit\nIf_ name __ = = \"\n-main __:\nmain()", "ir_algo_output_edit_distance": 108, "prompting_method": "cot-test1", "lm_post_processed_code": "def main () :\nprint (\"problem - 5 \")\nprint (\") --\")\nnumb = int (input ('write an integer number: '))\nmak_list = [int (x) for x in str (numb)]\nadd_numb = 0\nfor i in mak_list :\nadd_numb += i\nprint (\"Sum of the number's: \", add_numb)\ndigit\n\nif __name__ == \"__main__\":\nmain()\n", "lm_post_processed_edit_distance": 87}, {"image_id": 44, "image_height": 2137, "image_width": 2849, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 50.0, "y": 109.0, "w": 807.0, "h": 131.0, "line_num": 1, "text": "def main () :"}, {"x": 381.0, "y": 299.0, "w": 1216.0, "h": 120.0, "line_num": 2, "text": "print (\"problem - 5 \")"}, {"x": 402.0, "y": 463.0, "w": 552.0, "h": 93.0, "line_num": 3, "text": "print (\") --"}, {"x": 390.0, "y": 635.0, "w": 2174.0, "h": 91.0, "line_num": 4, "text": "rumb = int (input ('write an integer number:"}, {"x": 2634.0, "y": 482.0, "w": 129.0, "h": 105.0, "line_num": 5, "text": "\")"}, {"x": 393.0, "y": 805.0, "w": 2042.0, "h": 117.0, "line_num": 6, "text": "mak_list = [int (x) for x in str (numb)]"}, {"x": 416.0, "y": 1024.0, "w": 698.0, "h": 86.0, "line_num": 7, "text": "add-numb = 0"}, {"x": 432.0, "y": 1161.0, "w": 1118.0, "h": 108.0, "line_num": 8, "text": "for is in mak-list :"}, {"x": 884.0, "y": 1310.0, "w": 762.0, "h": 98.0, "line_num": 9, "text": "add-numb + =;"}, {"x": 480.0, "y": 1531.0, "w": 2183.0, "h": 110.0, "line_num": 10, "text": "print (\"Sum of the number's: \", add-numb)"}, {"x": 945.0, "y": 1604.0, "w": 239.0, "h": 69.0, "line_num": 11, "text": "digit"}, {"x": 176.0, "y": 1826.0, "w": 784.0, "h": 117.0, "line_num": 12, "text": "If_ name __ = = \""}, {"x": 1012.0, "y": 1843.0, "w": 511.0, "h": 74.0, "line_num": 13, "text": "-main __:"}, {"x": 360.0, "y": 2003.0, "w": 308.0, "h": 70.0, "line_num": 14, "text": "main()"}], "ir_algo_name": "none", "ir_algo_output_code": "def main () :\nprint (\"problem - 5 \")\nprint (\") --\nrumb = int (input ('write an integer number:\n\")\nmak_list = [int (x) for x in str (numb)]\nadd-numb = 0\nfor is in mak-list :\nadd-numb + =;\nprint (\"Sum of the number's: \", add-numb)\ndigit\nIf_ name __ = = \"\n-main __:\nmain()", "ir_algo_output_edit_distance": 108, "prompting_method": "cot-test5", "lm_post_processed_code": "def main():\nprint (\"problem - 5 \")\nprint (\") --\")\nnumb = int (input ('write an integer number: '))\nmak_list = [int (x) for x in str (numb)]\nadd_numb = 0\nfor i in mak_list:\nadd_numb += i\nprint (\"Sum of the number's: \", add_numb)\ndigit\n\nif __name__ == \"__main__\":\nmain()\n", "lm_post_processed_edit_distance": 84}, {"image_id": 44, "image_height": 2137, "image_width": 2849, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 50.0, "y": 109.0, "w": 807.0, "h": 131.0, "line_num": 1, "text": "def main () :"}, {"x": 381.0, "y": 299.0, "w": 1216.0, "h": 120.0, "line_num": 2, "text": "print (\"problem - 5 \")"}, {"x": 402.0, "y": 463.0, "w": 552.0, "h": 93.0, "line_num": 3, "text": "print (\") --"}, {"x": 390.0, "y": 635.0, "w": 2174.0, "h": 91.0, "line_num": 4, "text": "rumb = int (input ('write an integer number:"}, {"x": 2634.0, "y": 482.0, "w": 129.0, "h": 105.0, "line_num": 5, "text": "\")"}, {"x": 393.0, "y": 805.0, "w": 2042.0, "h": 117.0, "line_num": 6, "text": "mak_list = [int (x) for x in str (numb)]"}, {"x": 416.0, "y": 1024.0, "w": 698.0, "h": 86.0, "line_num": 7, "text": "add-numb = 0"}, {"x": 432.0, "y": 1161.0, "w": 1118.0, "h": 108.0, "line_num": 8, "text": "for is in mak-list :"}, {"x": 884.0, "y": 1310.0, "w": 762.0, "h": 98.0, "line_num": 9, "text": "add-numb + =;"}, {"x": 480.0, "y": 1531.0, "w": 2183.0, "h": 110.0, "line_num": 10, "text": "print (\"Sum of the number's: \", add-numb)"}, {"x": 945.0, "y": 1604.0, "w": 239.0, "h": 69.0, "line_num": 11, "text": "digit"}, {"x": 176.0, "y": 1826.0, "w": 784.0, "h": 117.0, "line_num": 12, "text": "If_ name __ = = \""}, {"x": 1012.0, "y": 1843.0, "w": 511.0, "h": 74.0, "line_num": 13, "text": "-main __:"}, {"x": 360.0, "y": 2003.0, "w": 308.0, "h": 70.0, "line_num": 14, "text": "main()"}], "ir_algo_name": "none", "ir_algo_output_code": "def main () :\nprint (\"problem - 5 \")\nprint (\") --\nrumb = int (input ('write an integer number:\n\")\nmak_list = [int (x) for x in str (numb)]\nadd-numb = 0\nfor is in mak-list :\nadd-numb + =;\nprint (\"Sum of the number's: \", add-numb)\ndigit\nIf_ name __ = = \"\n-main __:\nmain()", "ir_algo_output_edit_distance": 108, "prompting_method": "simple-test2", "lm_post_processed_code": "def main():\n    print(\"problem - 5\")\n    print(\"--\")\n    numb = int(input('write an integer number: '))\n    mak_list = [int(x) for x in str(numb)]\n    add_numb = 0\n    for i in mak_list:\n        add_numb += i\n    print(\"Sum of the number's: \", add_numb)\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 32}, {"image_id": 44, "image_height": 2137, "image_width": 2849, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 50.0, "y": 109.0, "w": 807.0, "h": 131.0, "line_num": 1, "text": "def main () :"}, {"x": 381.0, "y": 299.0, "w": 1216.0, "h": 120.0, "line_num": 2, "text": "print (\"problem - 5 \")"}, {"x": 402.0, "y": 463.0, "w": 552.0, "h": 93.0, "line_num": 3, "text": "print (\") --"}, {"x": 390.0, "y": 635.0, "w": 2174.0, "h": 91.0, "line_num": 4, "text": "rumb = int (input ('write an integer number:"}, {"x": 2634.0, "y": 482.0, "w": 129.0, "h": 105.0, "line_num": 5, "text": "\")"}, {"x": 393.0, "y": 805.0, "w": 2042.0, "h": 117.0, "line_num": 6, "text": "mak_list = [int (x) for x in str (numb)]"}, {"x": 416.0, "y": 1024.0, "w": 698.0, "h": 86.0, "line_num": 7, "text": "add-numb = 0"}, {"x": 432.0, "y": 1161.0, "w": 1118.0, "h": 108.0, "line_num": 8, "text": "for is in mak-list :"}, {"x": 884.0, "y": 1310.0, "w": 762.0, "h": 98.0, "line_num": 9, "text": "add-numb + =;"}, {"x": 480.0, "y": 1531.0, "w": 2183.0, "h": 110.0, "line_num": 10, "text": "print (\"Sum of the number's: \", add-numb)"}, {"x": 945.0, "y": 1604.0, "w": 239.0, "h": 69.0, "line_num": 11, "text": "digit"}, {"x": 176.0, "y": 1826.0, "w": 784.0, "h": 117.0, "line_num": 12, "text": "If_ name __ = = \""}, {"x": 1012.0, "y": 1843.0, "w": 511.0, "h": 74.0, "line_num": 13, "text": "-main __:"}, {"x": 360.0, "y": 2003.0, "w": 308.0, "h": 70.0, "line_num": 14, "text": "main()"}], "ir_algo_name": "none", "ir_algo_output_code": "def main () :\nprint (\"problem - 5 \")\nprint (\") --\nrumb = int (input ('write an integer number:\n\")\nmak_list = [int (x) for x in str (numb)]\nadd-numb = 0\nfor is in mak-list :\nadd-numb + =;\nprint (\"Sum of the number's: \", add-numb)\ndigit\nIf_ name __ = = \"\n-main __:\nmain()", "ir_algo_output_edit_distance": 108, "prompting_method": "simple-test3", "lm_post_processed_code": "def main():\n    print(\"problem - 5\")\n    print(\"--\")\n    numb = int(input('write an integer number: '))\n    mak_list = [int(x) for x in str(numb)]\n    add_numb = 0\n    for i in mak_list:\n        add_numb += i\n    print(\"Sum of the number's: \", add_numb)\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 32}, {"image_id": 44, "image_height": 2137, "image_width": 2849, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 50.0, "y": 109.0, "w": 807.0, "h": 131.0, "line_num": 1, "text": "def main () :"}, {"x": 381.0, "y": 299.0, "w": 1216.0, "h": 120.0, "line_num": 2, "text": "print (\"problem - 5 \")"}, {"x": 402.0, "y": 463.0, "w": 552.0, "h": 93.0, "line_num": 3, "text": "print (\") --"}, {"x": 390.0, "y": 635.0, "w": 2174.0, "h": 91.0, "line_num": 4, "text": "rumb = int (input ('write an integer number:"}, {"x": 2634.0, "y": 482.0, "w": 129.0, "h": 105.0, "line_num": 5, "text": "\")"}, {"x": 393.0, "y": 805.0, "w": 2042.0, "h": 117.0, "line_num": 6, "text": "mak_list = [int (x) for x in str (numb)]"}, {"x": 416.0, "y": 1024.0, "w": 698.0, "h": 86.0, "line_num": 7, "text": "add-numb = 0"}, {"x": 432.0, "y": 1161.0, "w": 1118.0, "h": 108.0, "line_num": 8, "text": "for is in mak-list :"}, {"x": 884.0, "y": 1310.0, "w": 762.0, "h": 98.0, "line_num": 9, "text": "add-numb + =;"}, {"x": 480.0, "y": 1531.0, "w": 2183.0, "h": 110.0, "line_num": 10, "text": "print (\"Sum of the number's: \", add-numb)"}, {"x": 945.0, "y": 1604.0, "w": 239.0, "h": 69.0, "line_num": 11, "text": "digit"}, {"x": 176.0, "y": 1826.0, "w": 784.0, "h": 117.0, "line_num": 12, "text": "If_ name __ = = \""}, {"x": 1012.0, "y": 1843.0, "w": 511.0, "h": 74.0, "line_num": 13, "text": "-main __:"}, {"x": 360.0, "y": 2003.0, "w": 308.0, "h": 70.0, "line_num": 14, "text": "main()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 148.82142857142856, "ir_algo_output_code": "def main () :\n    print (\"problem - 5 \")\n    print (\") --\n    rumb = int (input ('write an integer number:\n            \")\n    mak_list = [int (x) for x in str (numb)]\n    add-numb = 0\n    for is in mak-list :\n        add-numb + =;\n    print (\"Sum of the number's: \", add-numb)\n        digit\nIf_ name __ = = \"\n        -main __:\n    main()\n", "ir_algo_output_indented_lines": [{"x": 50.0, "y": 109.0, "w": 807.0, "h": 131.0, "line_num": 1, "text": "def main () :", "cluster_label": 2, "indentation": 0}, {"x": 381.0, "y": 299.0, "w": 1216.0, "h": 120.0, "line_num": 2, "text": "print (\"problem - 5 \")", "cluster_label": 0, "indentation": 1}, {"x": 402.0, "y": 463.0, "w": 552.0, "h": 93.0, "line_num": 3, "text": "print (\") --", "cluster_label": 0, "indentation": 1}, {"x": 390.0, "y": 635.0, "w": 2174.0, "h": 91.0, "line_num": 4, "text": "rumb = int (input ('write an integer number:", "cluster_label": 0, "indentation": 1}, {"x": 2634.0, "y": 482.0, "w": 129.0, "h": 105.0, "line_num": 5, "text": "\")", "cluster_label": 3, "indentation": 3}, {"x": 393.0, "y": 805.0, "w": 2042.0, "h": 117.0, "line_num": 6, "text": "mak_list = [int (x) for x in str (numb)]", "cluster_label": 0, "indentation": 1}, {"x": 416.0, "y": 1024.0, "w": 698.0, "h": 86.0, "line_num": 7, "text": "add-numb = 0", "cluster_label": 0, "indentation": 1}, {"x": 432.0, "y": 1161.0, "w": 1118.0, "h": 108.0, "line_num": 8, "text": "for is in mak-list :", "cluster_label": 0, "indentation": 1}, {"x": 884.0, "y": 1310.0, "w": 762.0, "h": 98.0, "line_num": 9, "text": "add-numb + =;", "cluster_label": 1, "indentation": 2}, {"x": 480.0, "y": 1531.0, "w": 2183.0, "h": 110.0, "line_num": 10, "text": "print (\"Sum of the number's: \", add-numb)", "cluster_label": 0, "indentation": 1}, {"x": 945.0, "y": 1604.0, "w": 239.0, "h": 69.0, "line_num": 11, "text": "digit", "cluster_label": 1, "indentation": 2}, {"x": 176.0, "y": 1826.0, "w": 784.0, "h": 117.0, "line_num": 12, "text": "If_ name __ = = \"", "cluster_label": 2, "indentation": 0}, {"x": 1012.0, "y": 1843.0, "w": 511.0, "h": 74.0, "line_num": 13, "text": "-main __:", "cluster_label": 1, "indentation": 2}, {"x": 360.0, "y": 2003.0, "w": 308.0, "h": 70.0, "line_num": 14, "text": "main()", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 94, "prompting_method": "none", "lm_post_processed_code": "def main () :\n    print (\"problem - 5 \")\n    print (\") --\n    rumb = int (input ('write an integer number:\n            \")\n    mak_list = [int (x) for x in str (numb)]\n    add-numb = 0\n    for is in mak-list :\n        add-numb + =;\n    print (\"Sum of the number's: \", add-numb)\n        digit\nIf_ name __ = = \"\n        -main __:\n    main()\n", "lm_post_processed_edit_distance": 94}, {"image_id": 44, "image_height": 2137, "image_width": 2849, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 50.0, "y": 109.0, "w": 807.0, "h": 131.0, "line_num": 1, "text": "def main () :"}, {"x": 381.0, "y": 299.0, "w": 1216.0, "h": 120.0, "line_num": 2, "text": "print (\"problem - 5 \")"}, {"x": 402.0, "y": 463.0, "w": 552.0, "h": 93.0, "line_num": 3, "text": "print (\") --"}, {"x": 390.0, "y": 635.0, "w": 2174.0, "h": 91.0, "line_num": 4, "text": "rumb = int (input ('write an integer number:"}, {"x": 2634.0, "y": 482.0, "w": 129.0, "h": 105.0, "line_num": 5, "text": "\")"}, {"x": 393.0, "y": 805.0, "w": 2042.0, "h": 117.0, "line_num": 6, "text": "mak_list = [int (x) for x in str (numb)]"}, {"x": 416.0, "y": 1024.0, "w": 698.0, "h": 86.0, "line_num": 7, "text": "add-numb = 0"}, {"x": 432.0, "y": 1161.0, "w": 1118.0, "h": 108.0, "line_num": 8, "text": "for is in mak-list :"}, {"x": 884.0, "y": 1310.0, "w": 762.0, "h": 98.0, "line_num": 9, "text": "add-numb + =;"}, {"x": 480.0, "y": 1531.0, "w": 2183.0, "h": 110.0, "line_num": 10, "text": "print (\"Sum of the number's: \", add-numb)"}, {"x": 945.0, "y": 1604.0, "w": 239.0, "h": 69.0, "line_num": 11, "text": "digit"}, {"x": 176.0, "y": 1826.0, "w": 784.0, "h": 117.0, "line_num": 12, "text": "If_ name __ = = \""}, {"x": 1012.0, "y": 1843.0, "w": 511.0, "h": 74.0, "line_num": 13, "text": "-main __:"}, {"x": 360.0, "y": 2003.0, "w": 308.0, "h": 70.0, "line_num": 14, "text": "main()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 148.82142857142856, "ir_algo_output_code": "def main () :\n    print (\"problem - 5 \")\n    print (\") --\n    rumb = int (input ('write an integer number:\n            \")\n    mak_list = [int (x) for x in str (numb)]\n    add-numb = 0\n    for is in mak-list :\n        add-numb + =;\n    print (\"Sum of the number's: \", add-numb)\n        digit\nIf_ name __ = = \"\n        -main __:\n    main()\n", "ir_algo_output_indented_lines": [{"x": 50.0, "y": 109.0, "w": 807.0, "h": 131.0, "line_num": 1, "text": "def main () :", "cluster_label": 2, "indentation": 0}, {"x": 381.0, "y": 299.0, "w": 1216.0, "h": 120.0, "line_num": 2, "text": "print (\"problem - 5 \")", "cluster_label": 0, "indentation": 1}, {"x": 402.0, "y": 463.0, "w": 552.0, "h": 93.0, "line_num": 3, "text": "print (\") --", "cluster_label": 0, "indentation": 1}, {"x": 390.0, "y": 635.0, "w": 2174.0, "h": 91.0, "line_num": 4, "text": "rumb = int (input ('write an integer number:", "cluster_label": 0, "indentation": 1}, {"x": 2634.0, "y": 482.0, "w": 129.0, "h": 105.0, "line_num": 5, "text": "\")", "cluster_label": 3, "indentation": 3}, {"x": 393.0, "y": 805.0, "w": 2042.0, "h": 117.0, "line_num": 6, "text": "mak_list = [int (x) for x in str (numb)]", "cluster_label": 0, "indentation": 1}, {"x": 416.0, "y": 1024.0, "w": 698.0, "h": 86.0, "line_num": 7, "text": "add-numb = 0", "cluster_label": 0, "indentation": 1}, {"x": 432.0, "y": 1161.0, "w": 1118.0, "h": 108.0, "line_num": 8, "text": "for is in mak-list :", "cluster_label": 0, "indentation": 1}, {"x": 884.0, "y": 1310.0, "w": 762.0, "h": 98.0, "line_num": 9, "text": "add-numb + =;", "cluster_label": 1, "indentation": 2}, {"x": 480.0, "y": 1531.0, "w": 2183.0, "h": 110.0, "line_num": 10, "text": "print (\"Sum of the number's: \", add-numb)", "cluster_label": 0, "indentation": 1}, {"x": 945.0, "y": 1604.0, "w": 239.0, "h": 69.0, "line_num": 11, "text": "digit", "cluster_label": 1, "indentation": 2}, {"x": 176.0, "y": 1826.0, "w": 784.0, "h": 117.0, "line_num": 12, "text": "If_ name __ = = \"", "cluster_label": 2, "indentation": 0}, {"x": 1012.0, "y": 1843.0, "w": 511.0, "h": 74.0, "line_num": 13, "text": "-main __:", "cluster_label": 1, "indentation": 2}, {"x": 360.0, "y": 2003.0, "w": 308.0, "h": 70.0, "line_num": 14, "text": "main()", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 94, "prompting_method": "cot-test1", "lm_post_processed_code": "def main () :\n    print (\"problem - 5 \")\n    print (\") --\")\n    numb = int (input ('write an integer number:'))\n    mak_list = [int (x) for x in str (numb)]\n    add_numb = 0\n    for i in mak_list :\n        add_numb += i\n    print (\"Sum of the number's: \", add_numb)\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 42}, {"image_id": 44, "image_height": 2137, "image_width": 2849, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 50.0, "y": 109.0, "w": 807.0, "h": 131.0, "line_num": 1, "text": "def main () :"}, {"x": 381.0, "y": 299.0, "w": 1216.0, "h": 120.0, "line_num": 2, "text": "print (\"problem - 5 \")"}, {"x": 402.0, "y": 463.0, "w": 552.0, "h": 93.0, "line_num": 3, "text": "print (\") --"}, {"x": 390.0, "y": 635.0, "w": 2174.0, "h": 91.0, "line_num": 4, "text": "rumb = int (input ('write an integer number:"}, {"x": 2634.0, "y": 482.0, "w": 129.0, "h": 105.0, "line_num": 5, "text": "\")"}, {"x": 393.0, "y": 805.0, "w": 2042.0, "h": 117.0, "line_num": 6, "text": "mak_list = [int (x) for x in str (numb)]"}, {"x": 416.0, "y": 1024.0, "w": 698.0, "h": 86.0, "line_num": 7, "text": "add-numb = 0"}, {"x": 432.0, "y": 1161.0, "w": 1118.0, "h": 108.0, "line_num": 8, "text": "for is in mak-list :"}, {"x": 884.0, "y": 1310.0, "w": 762.0, "h": 98.0, "line_num": 9, "text": "add-numb + =;"}, {"x": 480.0, "y": 1531.0, "w": 2183.0, "h": 110.0, "line_num": 10, "text": "print (\"Sum of the number's: \", add-numb)"}, {"x": 945.0, "y": 1604.0, "w": 239.0, "h": 69.0, "line_num": 11, "text": "digit"}, {"x": 176.0, "y": 1826.0, "w": 784.0, "h": 117.0, "line_num": 12, "text": "If_ name __ = = \""}, {"x": 1012.0, "y": 1843.0, "w": 511.0, "h": 74.0, "line_num": 13, "text": "-main __:"}, {"x": 360.0, "y": 2003.0, "w": 308.0, "h": 70.0, "line_num": 14, "text": "main()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 148.82142857142856, "ir_algo_output_code": "def main () :\n    print (\"problem - 5 \")\n    print (\") --\n    rumb = int (input ('write an integer number:\n            \")\n    mak_list = [int (x) for x in str (numb)]\n    add-numb = 0\n    for is in mak-list :\n        add-numb + =;\n    print (\"Sum of the number's: \", add-numb)\n        digit\nIf_ name __ = = \"\n        -main __:\n    main()\n", "ir_algo_output_indented_lines": [{"x": 50.0, "y": 109.0, "w": 807.0, "h": 131.0, "line_num": 1, "text": "def main () :", "cluster_label": 2, "indentation": 0}, {"x": 381.0, "y": 299.0, "w": 1216.0, "h": 120.0, "line_num": 2, "text": "print (\"problem - 5 \")", "cluster_label": 0, "indentation": 1}, {"x": 402.0, "y": 463.0, "w": 552.0, "h": 93.0, "line_num": 3, "text": "print (\") --", "cluster_label": 0, "indentation": 1}, {"x": 390.0, "y": 635.0, "w": 2174.0, "h": 91.0, "line_num": 4, "text": "rumb = int (input ('write an integer number:", "cluster_label": 0, "indentation": 1}, {"x": 2634.0, "y": 482.0, "w": 129.0, "h": 105.0, "line_num": 5, "text": "\")", "cluster_label": 3, "indentation": 3}, {"x": 393.0, "y": 805.0, "w": 2042.0, "h": 117.0, "line_num": 6, "text": "mak_list = [int (x) for x in str (numb)]", "cluster_label": 0, "indentation": 1}, {"x": 416.0, "y": 1024.0, "w": 698.0, "h": 86.0, "line_num": 7, "text": "add-numb = 0", "cluster_label": 0, "indentation": 1}, {"x": 432.0, "y": 1161.0, "w": 1118.0, "h": 108.0, "line_num": 8, "text": "for is in mak-list :", "cluster_label": 0, "indentation": 1}, {"x": 884.0, "y": 1310.0, "w": 762.0, "h": 98.0, "line_num": 9, "text": "add-numb + =;", "cluster_label": 1, "indentation": 2}, {"x": 480.0, "y": 1531.0, "w": 2183.0, "h": 110.0, "line_num": 10, "text": "print (\"Sum of the number's: \", add-numb)", "cluster_label": 0, "indentation": 1}, {"x": 945.0, "y": 1604.0, "w": 239.0, "h": 69.0, "line_num": 11, "text": "digit", "cluster_label": 1, "indentation": 2}, {"x": 176.0, "y": 1826.0, "w": 784.0, "h": 117.0, "line_num": 12, "text": "If_ name __ = = \"", "cluster_label": 2, "indentation": 0}, {"x": 1012.0, "y": 1843.0, "w": 511.0, "h": 74.0, "line_num": 13, "text": "-main __:", "cluster_label": 1, "indentation": 2}, {"x": 360.0, "y": 2003.0, "w": 308.0, "h": 70.0, "line_num": 14, "text": "main()", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 94, "prompting_method": "cot-test5", "lm_post_processed_code": "def main():\n    print(\"problem - 5 \")\n    print(\") --\")\n    numb = int(input('write an integer number:'))\n    mak_list = [int(x) for x in str(numb)]\n    add_numb = 0\n    for i in mak_list:\n        add_numb += i\n    print(\"Sum of the number's: \", add_numb)\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 32}, {"image_id": 44, "image_height": 2137, "image_width": 2849, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 50.0, "y": 109.0, "w": 807.0, "h": 131.0, "line_num": 1, "text": "def main () :"}, {"x": 381.0, "y": 299.0, "w": 1216.0, "h": 120.0, "line_num": 2, "text": "print (\"problem - 5 \")"}, {"x": 402.0, "y": 463.0, "w": 552.0, "h": 93.0, "line_num": 3, "text": "print (\") --"}, {"x": 390.0, "y": 635.0, "w": 2174.0, "h": 91.0, "line_num": 4, "text": "rumb = int (input ('write an integer number:"}, {"x": 2634.0, "y": 482.0, "w": 129.0, "h": 105.0, "line_num": 5, "text": "\")"}, {"x": 393.0, "y": 805.0, "w": 2042.0, "h": 117.0, "line_num": 6, "text": "mak_list = [int (x) for x in str (numb)]"}, {"x": 416.0, "y": 1024.0, "w": 698.0, "h": 86.0, "line_num": 7, "text": "add-numb = 0"}, {"x": 432.0, "y": 1161.0, "w": 1118.0, "h": 108.0, "line_num": 8, "text": "for is in mak-list :"}, {"x": 884.0, "y": 1310.0, "w": 762.0, "h": 98.0, "line_num": 9, "text": "add-numb + =;"}, {"x": 480.0, "y": 1531.0, "w": 2183.0, "h": 110.0, "line_num": 10, "text": "print (\"Sum of the number's: \", add-numb)"}, {"x": 945.0, "y": 1604.0, "w": 239.0, "h": 69.0, "line_num": 11, "text": "digit"}, {"x": 176.0, "y": 1826.0, "w": 784.0, "h": 117.0, "line_num": 12, "text": "If_ name __ = = \""}, {"x": 1012.0, "y": 1843.0, "w": 511.0, "h": 74.0, "line_num": 13, "text": "-main __:"}, {"x": 360.0, "y": 2003.0, "w": 308.0, "h": 70.0, "line_num": 14, "text": "main()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 148.82142857142856, "ir_algo_output_code": "def main () :\n    print (\"problem - 5 \")\n    print (\") --\n    rumb = int (input ('write an integer number:\n            \")\n    mak_list = [int (x) for x in str (numb)]\n    add-numb = 0\n    for is in mak-list :\n        add-numb + =;\n    print (\"Sum of the number's: \", add-numb)\n        digit\nIf_ name __ = = \"\n        -main __:\n    main()\n", "ir_algo_output_indented_lines": [{"x": 50.0, "y": 109.0, "w": 807.0, "h": 131.0, "line_num": 1, "text": "def main () :", "cluster_label": 2, "indentation": 0}, {"x": 381.0, "y": 299.0, "w": 1216.0, "h": 120.0, "line_num": 2, "text": "print (\"problem - 5 \")", "cluster_label": 0, "indentation": 1}, {"x": 402.0, "y": 463.0, "w": 552.0, "h": 93.0, "line_num": 3, "text": "print (\") --", "cluster_label": 0, "indentation": 1}, {"x": 390.0, "y": 635.0, "w": 2174.0, "h": 91.0, "line_num": 4, "text": "rumb = int (input ('write an integer number:", "cluster_label": 0, "indentation": 1}, {"x": 2634.0, "y": 482.0, "w": 129.0, "h": 105.0, "line_num": 5, "text": "\")", "cluster_label": 3, "indentation": 3}, {"x": 393.0, "y": 805.0, "w": 2042.0, "h": 117.0, "line_num": 6, "text": "mak_list = [int (x) for x in str (numb)]", "cluster_label": 0, "indentation": 1}, {"x": 416.0, "y": 1024.0, "w": 698.0, "h": 86.0, "line_num": 7, "text": "add-numb = 0", "cluster_label": 0, "indentation": 1}, {"x": 432.0, "y": 1161.0, "w": 1118.0, "h": 108.0, "line_num": 8, "text": "for is in mak-list :", "cluster_label": 0, "indentation": 1}, {"x": 884.0, "y": 1310.0, "w": 762.0, "h": 98.0, "line_num": 9, "text": "add-numb + =;", "cluster_label": 1, "indentation": 2}, {"x": 480.0, "y": 1531.0, "w": 2183.0, "h": 110.0, "line_num": 10, "text": "print (\"Sum of the number's: \", add-numb)", "cluster_label": 0, "indentation": 1}, {"x": 945.0, "y": 1604.0, "w": 239.0, "h": 69.0, "line_num": 11, "text": "digit", "cluster_label": 1, "indentation": 2}, {"x": 176.0, "y": 1826.0, "w": 784.0, "h": 117.0, "line_num": 12, "text": "If_ name __ = = \"", "cluster_label": 2, "indentation": 0}, {"x": 1012.0, "y": 1843.0, "w": 511.0, "h": 74.0, "line_num": 13, "text": "-main __:", "cluster_label": 1, "indentation": 2}, {"x": 360.0, "y": 2003.0, "w": 308.0, "h": 70.0, "line_num": 14, "text": "main()", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 94, "prompting_method": "simple-test2", "lm_post_processed_code": "def main():\n    print(\"problem - 5\")\n    print(\"\")\n    numb = int(input('write an integer number:'))\n    mak_list = [int(x) for x in str(numb)]\n    add_numb = 0\n    for i in mak_list:\n        add_numb += i\n    print(\"Sum of the number's: \", add_numb)\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 35}, {"image_id": 44, "image_height": 2137, "image_width": 2849, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 50.0, "y": 109.0, "w": 807.0, "h": 131.0, "line_num": 1, "text": "def main () :"}, {"x": 381.0, "y": 299.0, "w": 1216.0, "h": 120.0, "line_num": 2, "text": "print (\"problem - 5 \")"}, {"x": 402.0, "y": 463.0, "w": 552.0, "h": 93.0, "line_num": 3, "text": "print (\") --"}, {"x": 390.0, "y": 635.0, "w": 2174.0, "h": 91.0, "line_num": 4, "text": "rumb = int (input ('write an integer number:"}, {"x": 2634.0, "y": 482.0, "w": 129.0, "h": 105.0, "line_num": 5, "text": "\")"}, {"x": 393.0, "y": 805.0, "w": 2042.0, "h": 117.0, "line_num": 6, "text": "mak_list = [int (x) for x in str (numb)]"}, {"x": 416.0, "y": 1024.0, "w": 698.0, "h": 86.0, "line_num": 7, "text": "add-numb = 0"}, {"x": 432.0, "y": 1161.0, "w": 1118.0, "h": 108.0, "line_num": 8, "text": "for is in mak-list :"}, {"x": 884.0, "y": 1310.0, "w": 762.0, "h": 98.0, "line_num": 9, "text": "add-numb + =;"}, {"x": 480.0, "y": 1531.0, "w": 2183.0, "h": 110.0, "line_num": 10, "text": "print (\"Sum of the number's: \", add-numb)"}, {"x": 945.0, "y": 1604.0, "w": 239.0, "h": 69.0, "line_num": 11, "text": "digit"}, {"x": 176.0, "y": 1826.0, "w": 784.0, "h": 117.0, "line_num": 12, "text": "If_ name __ = = \""}, {"x": 1012.0, "y": 1843.0, "w": 511.0, "h": 74.0, "line_num": 13, "text": "-main __:"}, {"x": 360.0, "y": 2003.0, "w": 308.0, "h": 70.0, "line_num": 14, "text": "main()"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 148.82142857142856, "ir_algo_output_code": "def main () :\n    print (\"problem - 5 \")\n    print (\") --\n    rumb = int (input ('write an integer number:\n            \")\n    mak_list = [int (x) for x in str (numb)]\n    add-numb = 0\n    for is in mak-list :\n        add-numb + =;\n    print (\"Sum of the number's: \", add-numb)\n        digit\nIf_ name __ = = \"\n        -main __:\n    main()\n", "ir_algo_output_indented_lines": [{"x": 50.0, "y": 109.0, "w": 807.0, "h": 131.0, "line_num": 1, "text": "def main () :", "cluster_label": 2, "indentation": 0}, {"x": 381.0, "y": 299.0, "w": 1216.0, "h": 120.0, "line_num": 2, "text": "print (\"problem - 5 \")", "cluster_label": 0, "indentation": 1}, {"x": 402.0, "y": 463.0, "w": 552.0, "h": 93.0, "line_num": 3, "text": "print (\") --", "cluster_label": 0, "indentation": 1}, {"x": 390.0, "y": 635.0, "w": 2174.0, "h": 91.0, "line_num": 4, "text": "rumb = int (input ('write an integer number:", "cluster_label": 0, "indentation": 1}, {"x": 2634.0, "y": 482.0, "w": 129.0, "h": 105.0, "line_num": 5, "text": "\")", "cluster_label": 3, "indentation": 3}, {"x": 393.0, "y": 805.0, "w": 2042.0, "h": 117.0, "line_num": 6, "text": "mak_list = [int (x) for x in str (numb)]", "cluster_label": 0, "indentation": 1}, {"x": 416.0, "y": 1024.0, "w": 698.0, "h": 86.0, "line_num": 7, "text": "add-numb = 0", "cluster_label": 0, "indentation": 1}, {"x": 432.0, "y": 1161.0, "w": 1118.0, "h": 108.0, "line_num": 8, "text": "for is in mak-list :", "cluster_label": 0, "indentation": 1}, {"x": 884.0, "y": 1310.0, "w": 762.0, "h": 98.0, "line_num": 9, "text": "add-numb + =;", "cluster_label": 1, "indentation": 2}, {"x": 480.0, "y": 1531.0, "w": 2183.0, "h": 110.0, "line_num": 10, "text": "print (\"Sum of the number's: \", add-numb)", "cluster_label": 0, "indentation": 1}, {"x": 945.0, "y": 1604.0, "w": 239.0, "h": 69.0, "line_num": 11, "text": "digit", "cluster_label": 1, "indentation": 2}, {"x": 176.0, "y": 1826.0, "w": 784.0, "h": 117.0, "line_num": 12, "text": "If_ name __ = = \"", "cluster_label": 2, "indentation": 0}, {"x": 1012.0, "y": 1843.0, "w": 511.0, "h": 74.0, "line_num": 13, "text": "-main __:", "cluster_label": 1, "indentation": 2}, {"x": 360.0, "y": 2003.0, "w": 308.0, "h": 70.0, "line_num": 14, "text": "main()", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 94, "prompting_method": "simple-test3", "lm_post_processed_code": "def main():\n    print(\"problem - 5\")\n    print(\"\")\n    numb = int(input('write an integer number:'))\n    mak_list = [int(x) for x in str(numb)]\n    add_numb = 0\n    for i in mak_list:\n        add_numb += i\n    print(\"Sum of the number's: \", add_numb)\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 35}, {"image_id": 44, "image_height": 2137, "image_width": 2849, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 50.0, "y": 109.0, "w": 807.0, "h": 131.0, "line_num": 1, "text": "def main () :"}, {"x": 381.0, "y": 299.0, "w": 1216.0, "h": 120.0, "line_num": 2, "text": "print (\"problem - 5 \")"}, {"x": 402.0, "y": 463.0, "w": 552.0, "h": 93.0, "line_num": 3, "text": "print (\") --"}, {"x": 390.0, "y": 635.0, "w": 2174.0, "h": 91.0, "line_num": 4, "text": "rumb = int (input ('write an integer number:"}, {"x": 2634.0, "y": 482.0, "w": 129.0, "h": 105.0, "line_num": 5, "text": "\")"}, {"x": 393.0, "y": 805.0, "w": 2042.0, "h": 117.0, "line_num": 6, "text": "mak_list = [int (x) for x in str (numb)]"}, {"x": 416.0, "y": 1024.0, "w": 698.0, "h": 86.0, "line_num": 7, "text": "add-numb = 0"}, {"x": 432.0, "y": 1161.0, "w": 1118.0, "h": 108.0, "line_num": 8, "text": "for is in mak-list :"}, {"x": 884.0, "y": 1310.0, "w": 762.0, "h": 98.0, "line_num": 9, "text": "add-numb + =;"}, {"x": 480.0, "y": 1531.0, "w": 2183.0, "h": 110.0, "line_num": 10, "text": "print (\"Sum of the number's: \", add-numb)"}, {"x": 945.0, "y": 1604.0, "w": 239.0, "h": 69.0, "line_num": 11, "text": "digit"}, {"x": 176.0, "y": 1826.0, "w": 784.0, "h": 117.0, "line_num": 12, "text": "If_ name __ = = \""}, {"x": 1012.0, "y": 1843.0, "w": 511.0, "h": 74.0, "line_num": 13, "text": "-main __:"}, {"x": 360.0, "y": 2003.0, "w": 308.0, "h": 70.0, "line_num": 14, "text": "main()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main () :\n    print (\"problem - 5 \")\n    print (\") --\n    rumb = int (input ('write an integer number:\n        \")\n    mak_list = [int (x) for x in str (numb)]\n    add-numb = 0\n    for is in mak-list :\n        add-numb + =;\n    print (\"Sum of the number's: \", add-numb)\n        digit\nIf_ name __ = = \"\n    -main __:\nmain()\n", "ir_algo_output_indented_lines": [{"x": 50.0, "y": 109.0, "w": 807.0, "h": 131.0, "line_num": 1, "text": "def main () :", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 381.0, "y": 299.0, "w": 1216.0, "h": 120.0, "line_num": 2, "text": "print (\"problem - 5 \")", "delta": 331.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 402.0, "y": 463.0, "w": 552.0, "h": 93.0, "line_num": 3, "text": "print (\") --", "delta": 21.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 390.0, "y": 635.0, "w": 2174.0, "h": 91.0, "line_num": 4, "text": "rumb = int (input ('write an integer number:", "delta": -12.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 2634.0, "y": 482.0, "w": 129.0, "h": 105.0, "line_num": 5, "text": "\")", "delta": 2244.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 393.0, "y": 805.0, "w": 2042.0, "h": 117.0, "line_num": 6, "text": "mak_list = [int (x) for x in str (numb)]", "delta": -2241.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 416.0, "y": 1024.0, "w": 698.0, "h": 86.0, "line_num": 7, "text": "add-numb = 0", "delta": 23.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 432.0, "y": 1161.0, "w": 1118.0, "h": 108.0, "line_num": 8, "text": "for is in mak-list :", "delta": 16.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 884.0, "y": 1310.0, "w": 762.0, "h": 98.0, "line_num": 9, "text": "add-numb + =;", "delta": 452.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 480.0, "y": 1531.0, "w": 2183.0, "h": 110.0, "line_num": 10, "text": "print (\"Sum of the number's: \", add-numb)", "delta": -404.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 945.0, "y": 1604.0, "w": 239.0, "h": 69.0, "line_num": 11, "text": "digit", "delta": 465.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 176.0, "y": 1826.0, "w": 784.0, "h": 117.0, "line_num": 12, "text": "If_ name __ = = \"", "delta": -769.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1012.0, "y": 1843.0, "w": 511.0, "h": 74.0, "line_num": 13, "text": "-main __:", "delta": 836.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 360.0, "y": 2003.0, "w": 308.0, "h": 70.0, "line_num": 14, "text": "main()", "delta": -652.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 90, "prompting_method": "none", "lm_post_processed_code": "def main () :\n    print (\"problem - 5 \")\n    print (\") --\n    rumb = int (input ('write an integer number:\n        \")\n    mak_list = [int (x) for x in str (numb)]\n    add-numb = 0\n    for is in mak-list :\n        add-numb + =;\n    print (\"Sum of the number's: \", add-numb)\n        digit\nIf_ name __ = = \"\n    -main __:\nmain()\n", "lm_post_processed_edit_distance": 90}, {"image_id": 44, "image_height": 2137, "image_width": 2849, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 50.0, "y": 109.0, "w": 807.0, "h": 131.0, "line_num": 1, "text": "def main () :"}, {"x": 381.0, "y": 299.0, "w": 1216.0, "h": 120.0, "line_num": 2, "text": "print (\"problem - 5 \")"}, {"x": 402.0, "y": 463.0, "w": 552.0, "h": 93.0, "line_num": 3, "text": "print (\") --"}, {"x": 390.0, "y": 635.0, "w": 2174.0, "h": 91.0, "line_num": 4, "text": "rumb = int (input ('write an integer number:"}, {"x": 2634.0, "y": 482.0, "w": 129.0, "h": 105.0, "line_num": 5, "text": "\")"}, {"x": 393.0, "y": 805.0, "w": 2042.0, "h": 117.0, "line_num": 6, "text": "mak_list = [int (x) for x in str (numb)]"}, {"x": 416.0, "y": 1024.0, "w": 698.0, "h": 86.0, "line_num": 7, "text": "add-numb = 0"}, {"x": 432.0, "y": 1161.0, "w": 1118.0, "h": 108.0, "line_num": 8, "text": "for is in mak-list :"}, {"x": 884.0, "y": 1310.0, "w": 762.0, "h": 98.0, "line_num": 9, "text": "add-numb + =;"}, {"x": 480.0, "y": 1531.0, "w": 2183.0, "h": 110.0, "line_num": 10, "text": "print (\"Sum of the number's: \", add-numb)"}, {"x": 945.0, "y": 1604.0, "w": 239.0, "h": 69.0, "line_num": 11, "text": "digit"}, {"x": 176.0, "y": 1826.0, "w": 784.0, "h": 117.0, "line_num": 12, "text": "If_ name __ = = \""}, {"x": 1012.0, "y": 1843.0, "w": 511.0, "h": 74.0, "line_num": 13, "text": "-main __:"}, {"x": 360.0, "y": 2003.0, "w": 308.0, "h": 70.0, "line_num": 14, "text": "main()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main () :\n    print (\"problem - 5 \")\n    print (\") --\n    rumb = int (input ('write an integer number:\n        \")\n    mak_list = [int (x) for x in str (numb)]\n    add-numb = 0\n    for is in mak-list :\n        add-numb + =;\n    print (\"Sum of the number's: \", add-numb)\n        digit\nIf_ name __ = = \"\n    -main __:\nmain()\n", "ir_algo_output_indented_lines": [{"x": 50.0, "y": 109.0, "w": 807.0, "h": 131.0, "line_num": 1, "text": "def main () :", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 381.0, "y": 299.0, "w": 1216.0, "h": 120.0, "line_num": 2, "text": "print (\"problem - 5 \")", "delta": 331.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 402.0, "y": 463.0, "w": 552.0, "h": 93.0, "line_num": 3, "text": "print (\") --", "delta": 21.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 390.0, "y": 635.0, "w": 2174.0, "h": 91.0, "line_num": 4, "text": "rumb = int (input ('write an integer number:", "delta": -12.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 2634.0, "y": 482.0, "w": 129.0, "h": 105.0, "line_num": 5, "text": "\")", "delta": 2244.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 393.0, "y": 805.0, "w": 2042.0, "h": 117.0, "line_num": 6, "text": "mak_list = [int (x) for x in str (numb)]", "delta": -2241.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 416.0, "y": 1024.0, "w": 698.0, "h": 86.0, "line_num": 7, "text": "add-numb = 0", "delta": 23.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 432.0, "y": 1161.0, "w": 1118.0, "h": 108.0, "line_num": 8, "text": "for is in mak-list :", "delta": 16.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 884.0, "y": 1310.0, "w": 762.0, "h": 98.0, "line_num": 9, "text": "add-numb + =;", "delta": 452.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 480.0, "y": 1531.0, "w": 2183.0, "h": 110.0, "line_num": 10, "text": "print (\"Sum of the number's: \", add-numb)", "delta": -404.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 945.0, "y": 1604.0, "w": 239.0, "h": 69.0, "line_num": 11, "text": "digit", "delta": 465.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 176.0, "y": 1826.0, "w": 784.0, "h": 117.0, "line_num": 12, "text": "If_ name __ = = \"", "delta": -769.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1012.0, "y": 1843.0, "w": 511.0, "h": 74.0, "line_num": 13, "text": "-main __:", "delta": 836.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 360.0, "y": 2003.0, "w": 308.0, "h": 70.0, "line_num": 14, "text": "main()", "delta": -652.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 90, "prompting_method": "cot-test1", "lm_post_processed_code": "def main () :\n    print (\"problem - 5 \")\n    print (\") --\")\n    numb = int (input ('write an integer number:'))\n    mak_list = [int (x) for x in str (numb)]\n    add_numb = 0\n    for i in mak_list :\n        add_numb += i\n    print (\"Sum of the number's: \", add_numb)\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 42}, {"image_id": 44, "image_height": 2137, "image_width": 2849, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 50.0, "y": 109.0, "w": 807.0, "h": 131.0, "line_num": 1, "text": "def main () :"}, {"x": 381.0, "y": 299.0, "w": 1216.0, "h": 120.0, "line_num": 2, "text": "print (\"problem - 5 \")"}, {"x": 402.0, "y": 463.0, "w": 552.0, "h": 93.0, "line_num": 3, "text": "print (\") --"}, {"x": 390.0, "y": 635.0, "w": 2174.0, "h": 91.0, "line_num": 4, "text": "rumb = int (input ('write an integer number:"}, {"x": 2634.0, "y": 482.0, "w": 129.0, "h": 105.0, "line_num": 5, "text": "\")"}, {"x": 393.0, "y": 805.0, "w": 2042.0, "h": 117.0, "line_num": 6, "text": "mak_list = [int (x) for x in str (numb)]"}, {"x": 416.0, "y": 1024.0, "w": 698.0, "h": 86.0, "line_num": 7, "text": "add-numb = 0"}, {"x": 432.0, "y": 1161.0, "w": 1118.0, "h": 108.0, "line_num": 8, "text": "for is in mak-list :"}, {"x": 884.0, "y": 1310.0, "w": 762.0, "h": 98.0, "line_num": 9, "text": "add-numb + =;"}, {"x": 480.0, "y": 1531.0, "w": 2183.0, "h": 110.0, "line_num": 10, "text": "print (\"Sum of the number's: \", add-numb)"}, {"x": 945.0, "y": 1604.0, "w": 239.0, "h": 69.0, "line_num": 11, "text": "digit"}, {"x": 176.0, "y": 1826.0, "w": 784.0, "h": 117.0, "line_num": 12, "text": "If_ name __ = = \""}, {"x": 1012.0, "y": 1843.0, "w": 511.0, "h": 74.0, "line_num": 13, "text": "-main __:"}, {"x": 360.0, "y": 2003.0, "w": 308.0, "h": 70.0, "line_num": 14, "text": "main()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main () :\n    print (\"problem - 5 \")\n    print (\") --\n    rumb = int (input ('write an integer number:\n        \")\n    mak_list = [int (x) for x in str (numb)]\n    add-numb = 0\n    for is in mak-list :\n        add-numb + =;\n    print (\"Sum of the number's: \", add-numb)\n        digit\nIf_ name __ = = \"\n    -main __:\nmain()\n", "ir_algo_output_indented_lines": [{"x": 50.0, "y": 109.0, "w": 807.0, "h": 131.0, "line_num": 1, "text": "def main () :", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 381.0, "y": 299.0, "w": 1216.0, "h": 120.0, "line_num": 2, "text": "print (\"problem - 5 \")", "delta": 331.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 402.0, "y": 463.0, "w": 552.0, "h": 93.0, "line_num": 3, "text": "print (\") --", "delta": 21.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 390.0, "y": 635.0, "w": 2174.0, "h": 91.0, "line_num": 4, "text": "rumb = int (input ('write an integer number:", "delta": -12.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 2634.0, "y": 482.0, "w": 129.0, "h": 105.0, "line_num": 5, "text": "\")", "delta": 2244.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 393.0, "y": 805.0, "w": 2042.0, "h": 117.0, "line_num": 6, "text": "mak_list = [int (x) for x in str (numb)]", "delta": -2241.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 416.0, "y": 1024.0, "w": 698.0, "h": 86.0, "line_num": 7, "text": "add-numb = 0", "delta": 23.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 432.0, "y": 1161.0, "w": 1118.0, "h": 108.0, "line_num": 8, "text": "for is in mak-list :", "delta": 16.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 884.0, "y": 1310.0, "w": 762.0, "h": 98.0, "line_num": 9, "text": "add-numb + =;", "delta": 452.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 480.0, "y": 1531.0, "w": 2183.0, "h": 110.0, "line_num": 10, "text": "print (\"Sum of the number's: \", add-numb)", "delta": -404.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 945.0, "y": 1604.0, "w": 239.0, "h": 69.0, "line_num": 11, "text": "digit", "delta": 465.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 176.0, "y": 1826.0, "w": 784.0, "h": 117.0, "line_num": 12, "text": "If_ name __ = = \"", "delta": -769.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1012.0, "y": 1843.0, "w": 511.0, "h": 74.0, "line_num": 13, "text": "-main __:", "delta": 836.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 360.0, "y": 2003.0, "w": 308.0, "h": 70.0, "line_num": 14, "text": "main()", "delta": -652.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 90, "prompting_method": "cot-test5", "lm_post_processed_code": "def main():\n    print(\"problem - 5 \")\n    print(\") --\")\n    numb = int(input('write an integer number:'))\n    mak_list = [int(x) for x in str(numb)]\n    add_numb = 0\n    for i in mak_list:\n        add_numb += i\n    print(\"Sum of the number's: \", add_numb)\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 32}, {"image_id": 44, "image_height": 2137, "image_width": 2849, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 50.0, "y": 109.0, "w": 807.0, "h": 131.0, "line_num": 1, "text": "def main () :"}, {"x": 381.0, "y": 299.0, "w": 1216.0, "h": 120.0, "line_num": 2, "text": "print (\"problem - 5 \")"}, {"x": 402.0, "y": 463.0, "w": 552.0, "h": 93.0, "line_num": 3, "text": "print (\") --"}, {"x": 390.0, "y": 635.0, "w": 2174.0, "h": 91.0, "line_num": 4, "text": "rumb = int (input ('write an integer number:"}, {"x": 2634.0, "y": 482.0, "w": 129.0, "h": 105.0, "line_num": 5, "text": "\")"}, {"x": 393.0, "y": 805.0, "w": 2042.0, "h": 117.0, "line_num": 6, "text": "mak_list = [int (x) for x in str (numb)]"}, {"x": 416.0, "y": 1024.0, "w": 698.0, "h": 86.0, "line_num": 7, "text": "add-numb = 0"}, {"x": 432.0, "y": 1161.0, "w": 1118.0, "h": 108.0, "line_num": 8, "text": "for is in mak-list :"}, {"x": 884.0, "y": 1310.0, "w": 762.0, "h": 98.0, "line_num": 9, "text": "add-numb + =;"}, {"x": 480.0, "y": 1531.0, "w": 2183.0, "h": 110.0, "line_num": 10, "text": "print (\"Sum of the number's: \", add-numb)"}, {"x": 945.0, "y": 1604.0, "w": 239.0, "h": 69.0, "line_num": 11, "text": "digit"}, {"x": 176.0, "y": 1826.0, "w": 784.0, "h": 117.0, "line_num": 12, "text": "If_ name __ = = \""}, {"x": 1012.0, "y": 1843.0, "w": 511.0, "h": 74.0, "line_num": 13, "text": "-main __:"}, {"x": 360.0, "y": 2003.0, "w": 308.0, "h": 70.0, "line_num": 14, "text": "main()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main () :\n    print (\"problem - 5 \")\n    print (\") --\n    rumb = int (input ('write an integer number:\n        \")\n    mak_list = [int (x) for x in str (numb)]\n    add-numb = 0\n    for is in mak-list :\n        add-numb + =;\n    print (\"Sum of the number's: \", add-numb)\n        digit\nIf_ name __ = = \"\n    -main __:\nmain()\n", "ir_algo_output_indented_lines": [{"x": 50.0, "y": 109.0, "w": 807.0, "h": 131.0, "line_num": 1, "text": "def main () :", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 381.0, "y": 299.0, "w": 1216.0, "h": 120.0, "line_num": 2, "text": "print (\"problem - 5 \")", "delta": 331.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 402.0, "y": 463.0, "w": 552.0, "h": 93.0, "line_num": 3, "text": "print (\") --", "delta": 21.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 390.0, "y": 635.0, "w": 2174.0, "h": 91.0, "line_num": 4, "text": "rumb = int (input ('write an integer number:", "delta": -12.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 2634.0, "y": 482.0, "w": 129.0, "h": 105.0, "line_num": 5, "text": "\")", "delta": 2244.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 393.0, "y": 805.0, "w": 2042.0, "h": 117.0, "line_num": 6, "text": "mak_list = [int (x) for x in str (numb)]", "delta": -2241.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 416.0, "y": 1024.0, "w": 698.0, "h": 86.0, "line_num": 7, "text": "add-numb = 0", "delta": 23.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 432.0, "y": 1161.0, "w": 1118.0, "h": 108.0, "line_num": 8, "text": "for is in mak-list :", "delta": 16.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 884.0, "y": 1310.0, "w": 762.0, "h": 98.0, "line_num": 9, "text": "add-numb + =;", "delta": 452.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 480.0, "y": 1531.0, "w": 2183.0, "h": 110.0, "line_num": 10, "text": "print (\"Sum of the number's: \", add-numb)", "delta": -404.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 945.0, "y": 1604.0, "w": 239.0, "h": 69.0, "line_num": 11, "text": "digit", "delta": 465.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 176.0, "y": 1826.0, "w": 784.0, "h": 117.0, "line_num": 12, "text": "If_ name __ = = \"", "delta": -769.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1012.0, "y": 1843.0, "w": 511.0, "h": 74.0, "line_num": 13, "text": "-main __:", "delta": 836.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 360.0, "y": 2003.0, "w": 308.0, "h": 70.0, "line_num": 14, "text": "main()", "delta": -652.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 90, "prompting_method": "simple-test2", "lm_post_processed_code": "def main():\n    print(\"problem - 5\")\n    numb = int(input('write an integer number:'))\n    mak_list = [int(x) for x in str(numb)]\n    add_numb = 0\n    for i in mak_list:\n        add_numb += i\n    print(\"Sum of the number's: \", add_numb)\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 49}, {"image_id": 44, "image_height": 2137, "image_width": 2849, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 50.0, "y": 109.0, "w": 807.0, "h": 131.0, "line_num": 1, "text": "def main () :"}, {"x": 381.0, "y": 299.0, "w": 1216.0, "h": 120.0, "line_num": 2, "text": "print (\"problem - 5 \")"}, {"x": 402.0, "y": 463.0, "w": 552.0, "h": 93.0, "line_num": 3, "text": "print (\") --"}, {"x": 390.0, "y": 635.0, "w": 2174.0, "h": 91.0, "line_num": 4, "text": "rumb = int (input ('write an integer number:"}, {"x": 2634.0, "y": 482.0, "w": 129.0, "h": 105.0, "line_num": 5, "text": "\")"}, {"x": 393.0, "y": 805.0, "w": 2042.0, "h": 117.0, "line_num": 6, "text": "mak_list = [int (x) for x in str (numb)]"}, {"x": 416.0, "y": 1024.0, "w": 698.0, "h": 86.0, "line_num": 7, "text": "add-numb = 0"}, {"x": 432.0, "y": 1161.0, "w": 1118.0, "h": 108.0, "line_num": 8, "text": "for is in mak-list :"}, {"x": 884.0, "y": 1310.0, "w": 762.0, "h": 98.0, "line_num": 9, "text": "add-numb + =;"}, {"x": 480.0, "y": 1531.0, "w": 2183.0, "h": 110.0, "line_num": 10, "text": "print (\"Sum of the number's: \", add-numb)"}, {"x": 945.0, "y": 1604.0, "w": 239.0, "h": 69.0, "line_num": 11, "text": "digit"}, {"x": 176.0, "y": 1826.0, "w": 784.0, "h": 117.0, "line_num": 12, "text": "If_ name __ = = \""}, {"x": 1012.0, "y": 1843.0, "w": 511.0, "h": 74.0, "line_num": 13, "text": "-main __:"}, {"x": 360.0, "y": 2003.0, "w": 308.0, "h": 70.0, "line_num": 14, "text": "main()"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def main () :\n    print (\"problem - 5 \")\n    print (\") --\n    rumb = int (input ('write an integer number:\n        \")\n    mak_list = [int (x) for x in str (numb)]\n    add-numb = 0\n    for is in mak-list :\n        add-numb + =;\n    print (\"Sum of the number's: \", add-numb)\n        digit\nIf_ name __ = = \"\n    -main __:\nmain()\n", "ir_algo_output_indented_lines": [{"x": 50.0, "y": 109.0, "w": 807.0, "h": 131.0, "line_num": 1, "text": "def main () :", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 381.0, "y": 299.0, "w": 1216.0, "h": 120.0, "line_num": 2, "text": "print (\"problem - 5 \")", "delta": 331.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 402.0, "y": 463.0, "w": 552.0, "h": 93.0, "line_num": 3, "text": "print (\") --", "delta": 21.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 390.0, "y": 635.0, "w": 2174.0, "h": 91.0, "line_num": 4, "text": "rumb = int (input ('write an integer number:", "delta": -12.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 2634.0, "y": 482.0, "w": 129.0, "h": 105.0, "line_num": 5, "text": "\")", "delta": 2244.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 393.0, "y": 805.0, "w": 2042.0, "h": 117.0, "line_num": 6, "text": "mak_list = [int (x) for x in str (numb)]", "delta": -2241.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 416.0, "y": 1024.0, "w": 698.0, "h": 86.0, "line_num": 7, "text": "add-numb = 0", "delta": 23.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 432.0, "y": 1161.0, "w": 1118.0, "h": 108.0, "line_num": 8, "text": "for is in mak-list :", "delta": 16.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 884.0, "y": 1310.0, "w": 762.0, "h": 98.0, "line_num": 9, "text": "add-numb + =;", "delta": 452.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 480.0, "y": 1531.0, "w": 2183.0, "h": 110.0, "line_num": 10, "text": "print (\"Sum of the number's: \", add-numb)", "delta": -404.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 945.0, "y": 1604.0, "w": 239.0, "h": 69.0, "line_num": 11, "text": "digit", "delta": 465.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 176.0, "y": 1826.0, "w": 784.0, "h": 117.0, "line_num": 12, "text": "If_ name __ = = \"", "delta": -769.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 1012.0, "y": 1843.0, "w": 511.0, "h": 74.0, "line_num": 13, "text": "-main __:", "delta": 836.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 360.0, "y": 2003.0, "w": 308.0, "h": 70.0, "line_num": 14, "text": "main()", "delta": -652.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 90, "prompting_method": "simple-test3", "lm_post_processed_code": "def main():\n    print(\"problem - 5\")\n    print(\") --\")\n    numb = int(input('write an integer number:'))\n    mak_list = [int(x) for x in str(numb)]\n    add_numb = 0\n    for i in mak_list:\n        add_numb += i\n    print(\"Sum of the number's: \", add_numb)\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 33}, {"image_id": 45, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 105.0, "y": 139.0, "w": 644.0, "h": 73.0, "line_num": 1, "text": "list = [6, 11,5,8,9]"}, {"x": 96.0, "y": 298.0, "w": 602.0, "h": 76.0, "line_num": 2, "text": "for elem in list :"}, {"x": 289.0, "y": 447.0, "w": 242.0, "h": 59.0, "line_num": 3, "text": "max=0"}, {"x": 257.0, "y": 544.0, "w": 625.0, "h": 93.0, "line_num": 4, "text": "if elem> max :"}, {"x": 402.0, "y": 673.0, "w": 354.0, "h": 56.0, "line_num": 5, "text": "max = elem"}, {"x": 83.0, "y": 826.0, "w": 396.0, "h": 65.0, "line_num": 6, "text": "return max"}], "ir_algo_name": "none", "ir_algo_output_code": "list = [6, 11,5,8,9]\nfor elem in list :\nmax=0\nif elem> max :\nmax = elem\nreturn max", "ir_algo_output_edit_distance": 26, "prompting_method": "none", "lm_post_processed_code": "list = [6, 11,5,8,9]\nfor elem in list :\nmax=0\nif elem> max :\nmax = elem\nreturn max", "lm_post_processed_edit_distance": 26}, {"image_id": 45, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 105.0, "y": 139.0, "w": 644.0, "h": 73.0, "line_num": 1, "text": "list = [6, 11,5,8,9]"}, {"x": 96.0, "y": 298.0, "w": 602.0, "h": 76.0, "line_num": 2, "text": "for elem in list :"}, {"x": 289.0, "y": 447.0, "w": 242.0, "h": 59.0, "line_num": 3, "text": "max=0"}, {"x": 257.0, "y": 544.0, "w": 625.0, "h": 93.0, "line_num": 4, "text": "if elem> max :"}, {"x": 402.0, "y": 673.0, "w": 354.0, "h": 56.0, "line_num": 5, "text": "max = elem"}, {"x": 83.0, "y": 826.0, "w": 396.0, "h": 65.0, "line_num": 6, "text": "return max"}], "ir_algo_name": "none", "ir_algo_output_code": "list = [6, 11,5,8,9]\nfor elem in list :\nmax=0\nif elem> max :\nmax = elem\nreturn max", "ir_algo_output_edit_distance": 26, "prompting_method": "cot-test1", "lm_post_processed_code": "list = [6, 11,5,8,9]\nfor elem in list :\nmax=0\nif elem> max :\nmax = elem\nreturn max\n", "lm_post_processed_edit_distance": 25}, {"image_id": 45, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 105.0, "y": 139.0, "w": 644.0, "h": 73.0, "line_num": 1, "text": "list = [6, 11,5,8,9]"}, {"x": 96.0, "y": 298.0, "w": 602.0, "h": 76.0, "line_num": 2, "text": "for elem in list :"}, {"x": 289.0, "y": 447.0, "w": 242.0, "h": 59.0, "line_num": 3, "text": "max=0"}, {"x": 257.0, "y": 544.0, "w": 625.0, "h": 93.0, "line_num": 4, "text": "if elem> max :"}, {"x": 402.0, "y": 673.0, "w": 354.0, "h": 56.0, "line_num": 5, "text": "max = elem"}, {"x": 83.0, "y": 826.0, "w": 396.0, "h": 65.0, "line_num": 6, "text": "return max"}], "ir_algo_name": "none", "ir_algo_output_code": "list = [6, 11,5,8,9]\nfor elem in list :\nmax=0\nif elem> max :\nmax = elem\nreturn max", "ir_algo_output_edit_distance": 26, "prompting_method": "cot-test5", "lm_post_processed_code": "list = [6, 11, 5, 8, 9]\nfor elem in list:\n    max = 0\n    if elem > max:\n        max = elem\nreturn max\n", "lm_post_processed_edit_distance": 1}, {"image_id": 45, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 105.0, "y": 139.0, "w": 644.0, "h": 73.0, "line_num": 1, "text": "list = [6, 11,5,8,9]"}, {"x": 96.0, "y": 298.0, "w": 602.0, "h": 76.0, "line_num": 2, "text": "for elem in list :"}, {"x": 289.0, "y": 447.0, "w": 242.0, "h": 59.0, "line_num": 3, "text": "max=0"}, {"x": 257.0, "y": 544.0, "w": 625.0, "h": 93.0, "line_num": 4, "text": "if elem> max :"}, {"x": 402.0, "y": 673.0, "w": 354.0, "h": 56.0, "line_num": 5, "text": "max = elem"}, {"x": 83.0, "y": 826.0, "w": 396.0, "h": 65.0, "line_num": 6, "text": "return max"}], "ir_algo_name": "none", "ir_algo_output_code": "list = [6, 11,5,8,9]\nfor elem in list :\nmax=0\nif elem> max :\nmax = elem\nreturn max", "ir_algo_output_edit_distance": 26, "prompting_method": "simple-test2", "lm_post_processed_code": "list = [6, 11, 5, 8, 9]\nfor elem in list:\n    max = 0\n    if elem > max:\n        max = elem\n    return max\n", "lm_post_processed_edit_distance": 5}, {"image_id": 45, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 105.0, "y": 139.0, "w": 644.0, "h": 73.0, "line_num": 1, "text": "list = [6, 11,5,8,9]"}, {"x": 96.0, "y": 298.0, "w": 602.0, "h": 76.0, "line_num": 2, "text": "for elem in list :"}, {"x": 289.0, "y": 447.0, "w": 242.0, "h": 59.0, "line_num": 3, "text": "max=0"}, {"x": 257.0, "y": 544.0, "w": 625.0, "h": 93.0, "line_num": 4, "text": "if elem> max :"}, {"x": 402.0, "y": 673.0, "w": 354.0, "h": 56.0, "line_num": 5, "text": "max = elem"}, {"x": 83.0, "y": 826.0, "w": 396.0, "h": 65.0, "line_num": 6, "text": "return max"}], "ir_algo_name": "none", "ir_algo_output_code": "list = [6, 11,5,8,9]\nfor elem in list :\nmax=0\nif elem> max :\nmax = elem\nreturn max", "ir_algo_output_edit_distance": 26, "prompting_method": "simple-test3", "lm_post_processed_code": "list = [6, 11, 5, 8, 9]\nfor elem in list:\n    max = 0\n    if elem > max:\n        max = elem\nreturn max\n", "lm_post_processed_edit_distance": 1}, {"image_id": 45, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 105.0, "y": 139.0, "w": 644.0, "h": 73.0, "line_num": 1, "text": "list = [6, 11,5,8,9]"}, {"x": 96.0, "y": 298.0, "w": 602.0, "h": 76.0, "line_num": 2, "text": "for elem in list :"}, {"x": 289.0, "y": 447.0, "w": 242.0, "h": 59.0, "line_num": 3, "text": "max=0"}, {"x": 257.0, "y": 544.0, "w": 625.0, "h": 93.0, "line_num": 4, "text": "if elem> max :"}, {"x": 402.0, "y": 673.0, "w": 354.0, "h": 56.0, "line_num": 5, "text": "max = elem"}, {"x": 83.0, "y": 826.0, "w": 396.0, "h": 65.0, "line_num": 6, "text": "return max"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 105.5, "ir_algo_output_code": "list = [6, 11,5,8,9]\nfor elem in list :\n    max=0\n    if elem> max :\n        max = elem\nreturn max\n", "ir_algo_output_indented_lines": [{"x": 105.0, "y": 139.0, "w": 644.0, "h": 73.0, "line_num": 1, "text": "list = [6, 11,5,8,9]", "cluster_label": 0, "indentation": 0}, {"x": 96.0, "y": 298.0, "w": 602.0, "h": 76.0, "line_num": 2, "text": "for elem in list :", "cluster_label": 0, "indentation": 0}, {"x": 289.0, "y": 447.0, "w": 242.0, "h": 59.0, "line_num": 3, "text": "max=0", "cluster_label": 1, "indentation": 1}, {"x": 257.0, "y": 544.0, "w": 625.0, "h": 93.0, "line_num": 4, "text": "if elem> max :", "cluster_label": 1, "indentation": 1}, {"x": 402.0, "y": 673.0, "w": 354.0, "h": 56.0, "line_num": 5, "text": "max = elem", "cluster_label": 2, "indentation": 2}, {"x": 83.0, "y": 826.0, "w": 396.0, "h": 65.0, "line_num": 6, "text": "return max", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 9, "prompting_method": "none", "lm_post_processed_code": "list = [6, 11,5,8,9]\nfor elem in list :\n    max=0\n    if elem> max :\n        max = elem\nreturn max\n", "lm_post_processed_edit_distance": 9}, {"image_id": 45, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 105.0, "y": 139.0, "w": 644.0, "h": 73.0, "line_num": 1, "text": "list = [6, 11,5,8,9]"}, {"x": 96.0, "y": 298.0, "w": 602.0, "h": 76.0, "line_num": 2, "text": "for elem in list :"}, {"x": 289.0, "y": 447.0, "w": 242.0, "h": 59.0, "line_num": 3, "text": "max=0"}, {"x": 257.0, "y": 544.0, "w": 625.0, "h": 93.0, "line_num": 4, "text": "if elem> max :"}, {"x": 402.0, "y": 673.0, "w": 354.0, "h": 56.0, "line_num": 5, "text": "max = elem"}, {"x": 83.0, "y": 826.0, "w": 396.0, "h": 65.0, "line_num": 6, "text": "return max"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 105.5, "ir_algo_output_code": "list = [6, 11,5,8,9]\nfor elem in list :\n    max=0\n    if elem> max :\n        max = elem\nreturn max\n", "ir_algo_output_indented_lines": [{"x": 105.0, "y": 139.0, "w": 644.0, "h": 73.0, "line_num": 1, "text": "list = [6, 11,5,8,9]", "cluster_label": 0, "indentation": 0}, {"x": 96.0, "y": 298.0, "w": 602.0, "h": 76.0, "line_num": 2, "text": "for elem in list :", "cluster_label": 0, "indentation": 0}, {"x": 289.0, "y": 447.0, "w": 242.0, "h": 59.0, "line_num": 3, "text": "max=0", "cluster_label": 1, "indentation": 1}, {"x": 257.0, "y": 544.0, "w": 625.0, "h": 93.0, "line_num": 4, "text": "if elem> max :", "cluster_label": 1, "indentation": 1}, {"x": 402.0, "y": 673.0, "w": 354.0, "h": 56.0, "line_num": 5, "text": "max = elem", "cluster_label": 2, "indentation": 2}, {"x": 83.0, "y": 826.0, "w": 396.0, "h": 65.0, "line_num": 6, "text": "return max", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 9, "prompting_method": "cot-test1", "lm_post_processed_code": "list = [6, 11,5,8,9]\nfor elem in list :\n    max=0\n    if elem> max :\n        max = elem\nreturn max\n", "lm_post_processed_edit_distance": 9}, {"image_id": 45, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 105.0, "y": 139.0, "w": 644.0, "h": 73.0, "line_num": 1, "text": "list = [6, 11,5,8,9]"}, {"x": 96.0, "y": 298.0, "w": 602.0, "h": 76.0, "line_num": 2, "text": "for elem in list :"}, {"x": 289.0, "y": 447.0, "w": 242.0, "h": 59.0, "line_num": 3, "text": "max=0"}, {"x": 257.0, "y": 544.0, "w": 625.0, "h": 93.0, "line_num": 4, "text": "if elem> max :"}, {"x": 402.0, "y": 673.0, "w": 354.0, "h": 56.0, "line_num": 5, "text": "max = elem"}, {"x": 83.0, "y": 826.0, "w": 396.0, "h": 65.0, "line_num": 6, "text": "return max"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 105.5, "ir_algo_output_code": "list = [6, 11,5,8,9]\nfor elem in list :\n    max=0\n    if elem> max :\n        max = elem\nreturn max\n", "ir_algo_output_indented_lines": [{"x": 105.0, "y": 139.0, "w": 644.0, "h": 73.0, "line_num": 1, "text": "list = [6, 11,5,8,9]", "cluster_label": 0, "indentation": 0}, {"x": 96.0, "y": 298.0, "w": 602.0, "h": 76.0, "line_num": 2, "text": "for elem in list :", "cluster_label": 0, "indentation": 0}, {"x": 289.0, "y": 447.0, "w": 242.0, "h": 59.0, "line_num": 3, "text": "max=0", "cluster_label": 1, "indentation": 1}, {"x": 257.0, "y": 544.0, "w": 625.0, "h": 93.0, "line_num": 4, "text": "if elem> max :", "cluster_label": 1, "indentation": 1}, {"x": 402.0, "y": 673.0, "w": 354.0, "h": 56.0, "line_num": 5, "text": "max = elem", "cluster_label": 2, "indentation": 2}, {"x": 83.0, "y": 826.0, "w": 396.0, "h": 65.0, "line_num": 6, "text": "return max", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 9, "prompting_method": "cot-test5", "lm_post_processed_code": "list = [6, 11,5,8,9]\nfor elem in list :\n    max=0\n    if elem> max :\n        max = elem\nreturn max\n", "lm_post_processed_edit_distance": 9}, {"image_id": 45, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 105.0, "y": 139.0, "w": 644.0, "h": 73.0, "line_num": 1, "text": "list = [6, 11,5,8,9]"}, {"x": 96.0, "y": 298.0, "w": 602.0, "h": 76.0, "line_num": 2, "text": "for elem in list :"}, {"x": 289.0, "y": 447.0, "w": 242.0, "h": 59.0, "line_num": 3, "text": "max=0"}, {"x": 257.0, "y": 544.0, "w": 625.0, "h": 93.0, "line_num": 4, "text": "if elem> max :"}, {"x": 402.0, "y": 673.0, "w": 354.0, "h": 56.0, "line_num": 5, "text": "max = elem"}, {"x": 83.0, "y": 826.0, "w": 396.0, "h": 65.0, "line_num": 6, "text": "return max"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 105.5, "ir_algo_output_code": "list = [6, 11,5,8,9]\nfor elem in list :\n    max=0\n    if elem> max :\n        max = elem\nreturn max\n", "ir_algo_output_indented_lines": [{"x": 105.0, "y": 139.0, "w": 644.0, "h": 73.0, "line_num": 1, "text": "list = [6, 11,5,8,9]", "cluster_label": 0, "indentation": 0}, {"x": 96.0, "y": 298.0, "w": 602.0, "h": 76.0, "line_num": 2, "text": "for elem in list :", "cluster_label": 0, "indentation": 0}, {"x": 289.0, "y": 447.0, "w": 242.0, "h": 59.0, "line_num": 3, "text": "max=0", "cluster_label": 1, "indentation": 1}, {"x": 257.0, "y": 544.0, "w": 625.0, "h": 93.0, "line_num": 4, "text": "if elem> max :", "cluster_label": 1, "indentation": 1}, {"x": 402.0, "y": 673.0, "w": 354.0, "h": 56.0, "line_num": 5, "text": "max = elem", "cluster_label": 2, "indentation": 2}, {"x": 83.0, "y": 826.0, "w": 396.0, "h": 65.0, "line_num": 6, "text": "return max", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 9, "prompting_method": "simple-test2", "lm_post_processed_code": "list = [6, 11,5,8,9]\nfor elem in list:\n    max = 0\n    if elem > max:\n        max = elem\nreturn max\n", "lm_post_processed_edit_distance": 4}, {"image_id": 45, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 105.0, "y": 139.0, "w": 644.0, "h": 73.0, "line_num": 1, "text": "list = [6, 11,5,8,9]"}, {"x": 96.0, "y": 298.0, "w": 602.0, "h": 76.0, "line_num": 2, "text": "for elem in list :"}, {"x": 289.0, "y": 447.0, "w": 242.0, "h": 59.0, "line_num": 3, "text": "max=0"}, {"x": 257.0, "y": 544.0, "w": 625.0, "h": 93.0, "line_num": 4, "text": "if elem> max :"}, {"x": 402.0, "y": 673.0, "w": 354.0, "h": 56.0, "line_num": 5, "text": "max = elem"}, {"x": 83.0, "y": 826.0, "w": 396.0, "h": 65.0, "line_num": 6, "text": "return max"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 105.5, "ir_algo_output_code": "list = [6, 11,5,8,9]\nfor elem in list :\n    max=0\n    if elem> max :\n        max = elem\nreturn max\n", "ir_algo_output_indented_lines": [{"x": 105.0, "y": 139.0, "w": 644.0, "h": 73.0, "line_num": 1, "text": "list = [6, 11,5,8,9]", "cluster_label": 0, "indentation": 0}, {"x": 96.0, "y": 298.0, "w": 602.0, "h": 76.0, "line_num": 2, "text": "for elem in list :", "cluster_label": 0, "indentation": 0}, {"x": 289.0, "y": 447.0, "w": 242.0, "h": 59.0, "line_num": 3, "text": "max=0", "cluster_label": 1, "indentation": 1}, {"x": 257.0, "y": 544.0, "w": 625.0, "h": 93.0, "line_num": 4, "text": "if elem> max :", "cluster_label": 1, "indentation": 1}, {"x": 402.0, "y": 673.0, "w": 354.0, "h": 56.0, "line_num": 5, "text": "max = elem", "cluster_label": 2, "indentation": 2}, {"x": 83.0, "y": 826.0, "w": 396.0, "h": 65.0, "line_num": 6, "text": "return max", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 9, "prompting_method": "simple-test3", "lm_post_processed_code": "list = [6, 11, 5, 8, 9]\nfor elem in list:\n    max = 0\n    if elem > max:\n        max = elem\nreturn max\n", "lm_post_processed_edit_distance": 1}, {"image_id": 45, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 105.0, "y": 139.0, "w": 644.0, "h": 73.0, "line_num": 1, "text": "list = [6, 11,5,8,9]"}, {"x": 96.0, "y": 298.0, "w": 602.0, "h": 76.0, "line_num": 2, "text": "for elem in list :"}, {"x": 289.0, "y": 447.0, "w": 242.0, "h": 59.0, "line_num": 3, "text": "max=0"}, {"x": 257.0, "y": 544.0, "w": 625.0, "h": 93.0, "line_num": 4, "text": "if elem> max :"}, {"x": 402.0, "y": 673.0, "w": 354.0, "h": 56.0, "line_num": 5, "text": "max = elem"}, {"x": 83.0, "y": 826.0, "w": 396.0, "h": 65.0, "line_num": 6, "text": "return max"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "list = [6, 11,5,8,9]\nfor elem in list :\n    max=0\n    if elem> max :\n        max = elem\nreturn max\n", "ir_algo_output_indented_lines": [{"x": 105.0, "y": 139.0, "w": 644.0, "h": 73.0, "line_num": 1, "text": "list = [6, 11,5,8,9]", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 96.0, "y": 298.0, "w": 602.0, "h": 76.0, "line_num": 2, "text": "for elem in list :", "delta": -9.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 289.0, "y": 447.0, "w": 242.0, "h": 59.0, "line_num": 3, "text": "max=0", "delta": 193.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 257.0, "y": 544.0, "w": 625.0, "h": 93.0, "line_num": 4, "text": "if elem> max :", "delta": -32.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 402.0, "y": 673.0, "w": 354.0, "h": 56.0, "line_num": 5, "text": "max = elem", "delta": 145.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 83.0, "y": 826.0, "w": 396.0, "h": 65.0, "line_num": 6, "text": "return max", "delta": -319.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 9, "prompting_method": "none", "lm_post_processed_code": "list = [6, 11,5,8,9]\nfor elem in list :\n    max=0\n    if elem> max :\n        max = elem\nreturn max\n", "lm_post_processed_edit_distance": 9}, {"image_id": 45, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 105.0, "y": 139.0, "w": 644.0, "h": 73.0, "line_num": 1, "text": "list = [6, 11,5,8,9]"}, {"x": 96.0, "y": 298.0, "w": 602.0, "h": 76.0, "line_num": 2, "text": "for elem in list :"}, {"x": 289.0, "y": 447.0, "w": 242.0, "h": 59.0, "line_num": 3, "text": "max=0"}, {"x": 257.0, "y": 544.0, "w": 625.0, "h": 93.0, "line_num": 4, "text": "if elem> max :"}, {"x": 402.0, "y": 673.0, "w": 354.0, "h": 56.0, "line_num": 5, "text": "max = elem"}, {"x": 83.0, "y": 826.0, "w": 396.0, "h": 65.0, "line_num": 6, "text": "return max"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "list = [6, 11,5,8,9]\nfor elem in list :\n    max=0\n    if elem> max :\n        max = elem\nreturn max\n", "ir_algo_output_indented_lines": [{"x": 105.0, "y": 139.0, "w": 644.0, "h": 73.0, "line_num": 1, "text": "list = [6, 11,5,8,9]", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 96.0, "y": 298.0, "w": 602.0, "h": 76.0, "line_num": 2, "text": "for elem in list :", "delta": -9.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 289.0, "y": 447.0, "w": 242.0, "h": 59.0, "line_num": 3, "text": "max=0", "delta": 193.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 257.0, "y": 544.0, "w": 625.0, "h": 93.0, "line_num": 4, "text": "if elem> max :", "delta": -32.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 402.0, "y": 673.0, "w": 354.0, "h": 56.0, "line_num": 5, "text": "max = elem", "delta": 145.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 83.0, "y": 826.0, "w": 396.0, "h": 65.0, "line_num": 6, "text": "return max", "delta": -319.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 9, "prompting_method": "cot-test1", "lm_post_processed_code": "list = [6, 11,5,8,9]\nfor elem in list :\n    max=0\n    if elem> max :\n        max = elem\nreturn max\n", "lm_post_processed_edit_distance": 9}, {"image_id": 45, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 105.0, "y": 139.0, "w": 644.0, "h": 73.0, "line_num": 1, "text": "list = [6, 11,5,8,9]"}, {"x": 96.0, "y": 298.0, "w": 602.0, "h": 76.0, "line_num": 2, "text": "for elem in list :"}, {"x": 289.0, "y": 447.0, "w": 242.0, "h": 59.0, "line_num": 3, "text": "max=0"}, {"x": 257.0, "y": 544.0, "w": 625.0, "h": 93.0, "line_num": 4, "text": "if elem> max :"}, {"x": 402.0, "y": 673.0, "w": 354.0, "h": 56.0, "line_num": 5, "text": "max = elem"}, {"x": 83.0, "y": 826.0, "w": 396.0, "h": 65.0, "line_num": 6, "text": "return max"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "list = [6, 11,5,8,9]\nfor elem in list :\n    max=0\n    if elem> max :\n        max = elem\nreturn max\n", "ir_algo_output_indented_lines": [{"x": 105.0, "y": 139.0, "w": 644.0, "h": 73.0, "line_num": 1, "text": "list = [6, 11,5,8,9]", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 96.0, "y": 298.0, "w": 602.0, "h": 76.0, "line_num": 2, "text": "for elem in list :", "delta": -9.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 289.0, "y": 447.0, "w": 242.0, "h": 59.0, "line_num": 3, "text": "max=0", "delta": 193.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 257.0, "y": 544.0, "w": 625.0, "h": 93.0, "line_num": 4, "text": "if elem> max :", "delta": -32.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 402.0, "y": 673.0, "w": 354.0, "h": 56.0, "line_num": 5, "text": "max = elem", "delta": 145.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 83.0, "y": 826.0, "w": 396.0, "h": 65.0, "line_num": 6, "text": "return max", "delta": -319.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 9, "prompting_method": "cot-test5", "lm_post_processed_code": "list = [6, 11,5,8,9]\nfor elem in list :\n    max=0\n    if elem> max :\n        max = elem\nreturn max\n", "lm_post_processed_edit_distance": 9}, {"image_id": 45, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 105.0, "y": 139.0, "w": 644.0, "h": 73.0, "line_num": 1, "text": "list = [6, 11,5,8,9]"}, {"x": 96.0, "y": 298.0, "w": 602.0, "h": 76.0, "line_num": 2, "text": "for elem in list :"}, {"x": 289.0, "y": 447.0, "w": 242.0, "h": 59.0, "line_num": 3, "text": "max=0"}, {"x": 257.0, "y": 544.0, "w": 625.0, "h": 93.0, "line_num": 4, "text": "if elem> max :"}, {"x": 402.0, "y": 673.0, "w": 354.0, "h": 56.0, "line_num": 5, "text": "max = elem"}, {"x": 83.0, "y": 826.0, "w": 396.0, "h": 65.0, "line_num": 6, "text": "return max"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "list = [6, 11,5,8,9]\nfor elem in list :\n    max=0\n    if elem> max :\n        max = elem\nreturn max\n", "ir_algo_output_indented_lines": [{"x": 105.0, "y": 139.0, "w": 644.0, "h": 73.0, "line_num": 1, "text": "list = [6, 11,5,8,9]", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 96.0, "y": 298.0, "w": 602.0, "h": 76.0, "line_num": 2, "text": "for elem in list :", "delta": -9.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 289.0, "y": 447.0, "w": 242.0, "h": 59.0, "line_num": 3, "text": "max=0", "delta": 193.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 257.0, "y": 544.0, "w": 625.0, "h": 93.0, "line_num": 4, "text": "if elem> max :", "delta": -32.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 402.0, "y": 673.0, "w": 354.0, "h": 56.0, "line_num": 5, "text": "max = elem", "delta": 145.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 83.0, "y": 826.0, "w": 396.0, "h": 65.0, "line_num": 6, "text": "return max", "delta": -319.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 9, "prompting_method": "simple-test2", "lm_post_processed_code": "list = [6, 11,5,8,9]\nfor elem in list:\n    max = 0\n    if elem > max:\n        max = elem\nreturn max\n", "lm_post_processed_edit_distance": 4}, {"image_id": 45, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 105.0, "y": 139.0, "w": 644.0, "h": 73.0, "line_num": 1, "text": "list = [6, 11,5,8,9]"}, {"x": 96.0, "y": 298.0, "w": 602.0, "h": 76.0, "line_num": 2, "text": "for elem in list :"}, {"x": 289.0, "y": 447.0, "w": 242.0, "h": 59.0, "line_num": 3, "text": "max=0"}, {"x": 257.0, "y": 544.0, "w": 625.0, "h": 93.0, "line_num": 4, "text": "if elem> max :"}, {"x": 402.0, "y": 673.0, "w": 354.0, "h": 56.0, "line_num": 5, "text": "max = elem"}, {"x": 83.0, "y": 826.0, "w": 396.0, "h": 65.0, "line_num": 6, "text": "return max"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "list = [6, 11,5,8,9]\nfor elem in list :\n    max=0\n    if elem> max :\n        max = elem\nreturn max\n", "ir_algo_output_indented_lines": [{"x": 105.0, "y": 139.0, "w": 644.0, "h": 73.0, "line_num": 1, "text": "list = [6, 11,5,8,9]", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 96.0, "y": 298.0, "w": 602.0, "h": 76.0, "line_num": 2, "text": "for elem in list :", "delta": -9.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}, {"x": 289.0, "y": 447.0, "w": 242.0, "h": 59.0, "line_num": 3, "text": "max=0", "delta": 193.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 257.0, "y": 544.0, "w": 625.0, "h": 93.0, "line_num": 4, "text": "if elem> max :", "delta": -32.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 402.0, "y": 673.0, "w": 354.0, "h": 56.0, "line_num": 5, "text": "max = elem", "delta": 145.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 83.0, "y": 826.0, "w": 396.0, "h": 65.0, "line_num": 6, "text": "return max", "delta": -319.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 9, "prompting_method": "simple-test3", "lm_post_processed_code": "list = [6, 11, 5, 8, 9]\nfor elem in list:\n    max = 0\n    if elem > max:\n        max = elem\nreturn max\n", "lm_post_processed_edit_distance": 1}, {"image_id": 46, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 53.0, "y": 269.0, "w": 587.0, "h": 66.0, "line_num": 1, "text": "def palindroomic (stro):"}, {"x": 195.0, "y": 400.0, "w": 831.0, "h": 73.0, "line_num": 2, "text": "for i in range (int (len(str)/2)):"}, {"x": 312.0, "y": 501.0, "w": 813.0, "h": 63.0, "line_num": 3, "text": "if stro [i] ! = str [len (st) -i]:"}, {"x": 351.0, "y": 620.0, "w": 31.0, "h": 48.0, "line_num": 4, "text": "."}, {"x": 408.0, "y": 613.0, "w": 319.0, "h": 53.0, "line_num": 5, "text": "return False"}, {"x": 202.0, "y": 719.0, "w": 332.0, "h": 58.0, "line_num": 6, "text": "return True"}], "ir_algo_name": "none", "ir_algo_output_code": "def palindroomic (stro):\nfor i in range (int (len(str)/2)):\nif stro [i] ! = str [len (st) -i]:\n.\nreturn False\nreturn True", "ir_algo_output_edit_distance": 43, "prompting_method": "none", "lm_post_processed_code": "def palindroomic (stro):\nfor i in range (int (len(str)/2)):\nif stro [i] ! = str [len (st) -i]:\n.\nreturn False\nreturn True", "lm_post_processed_edit_distance": 43}, {"image_id": 46, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 53.0, "y": 269.0, "w": 587.0, "h": 66.0, "line_num": 1, "text": "def palindroomic (stro):"}, {"x": 195.0, "y": 400.0, "w": 831.0, "h": 73.0, "line_num": 2, "text": "for i in range (int (len(str)/2)):"}, {"x": 312.0, "y": 501.0, "w": 813.0, "h": 63.0, "line_num": 3, "text": "if stro [i] ! = str [len (st) -i]:"}, {"x": 351.0, "y": 620.0, "w": 31.0, "h": 48.0, "line_num": 4, "text": "."}, {"x": 408.0, "y": 613.0, "w": 319.0, "h": 53.0, "line_num": 5, "text": "return False"}, {"x": 202.0, "y": 719.0, "w": 332.0, "h": 58.0, "line_num": 6, "text": "return True"}], "ir_algo_name": "none", "ir_algo_output_code": "def palindroomic (stro):\nfor i in range (int (len(str)/2)):\nif stro [i] ! = str [len (st) -i]:\n.\nreturn False\nreturn True", "ir_algo_output_edit_distance": 43, "prompting_method": "cot-test1", "lm_post_processed_code": "def palindroomic (stro):\nfor i in range (int (len(stro)/2)):\nif stro [i] != stro [len (stro) -i - 1]:\nreturn False\nreturn True\n", "lm_post_processed_edit_distance": 44}, {"image_id": 46, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 53.0, "y": 269.0, "w": 587.0, "h": 66.0, "line_num": 1, "text": "def palindroomic (stro):"}, {"x": 195.0, "y": 400.0, "w": 831.0, "h": 73.0, "line_num": 2, "text": "for i in range (int (len(str)/2)):"}, {"x": 312.0, "y": 501.0, "w": 813.0, "h": 63.0, "line_num": 3, "text": "if stro [i] ! = str [len (st) -i]:"}, {"x": 351.0, "y": 620.0, "w": 31.0, "h": 48.0, "line_num": 4, "text": "."}, {"x": 408.0, "y": 613.0, "w": 319.0, "h": 53.0, "line_num": 5, "text": "return False"}, {"x": 202.0, "y": 719.0, "w": 332.0, "h": 58.0, "line_num": 6, "text": "return True"}], "ir_algo_name": "none", "ir_algo_output_code": "def palindroomic (stro):\nfor i in range (int (len(str)/2)):\nif stro [i] ! = str [len (st) -i]:\n.\nreturn False\nreturn True", "ir_algo_output_edit_distance": 43, "prompting_method": "cot-test5", "lm_post_processed_code": "def palindroomic (stro):\nfor i in range (int (len(stro)/2)):\nif stro [i] ! = stro [len (stro) -i - 1]:\nreturn False\nreturn True\n", "lm_post_processed_edit_distance": 45}, {"image_id": 46, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 53.0, "y": 269.0, "w": 587.0, "h": 66.0, "line_num": 1, "text": "def palindroomic (stro):"}, {"x": 195.0, "y": 400.0, "w": 831.0, "h": 73.0, "line_num": 2, "text": "for i in range (int (len(str)/2)):"}, {"x": 312.0, "y": 501.0, "w": 813.0, "h": 63.0, "line_num": 3, "text": "if stro [i] ! = str [len (st) -i]:"}, {"x": 351.0, "y": 620.0, "w": 31.0, "h": 48.0, "line_num": 4, "text": "."}, {"x": 408.0, "y": 613.0, "w": 319.0, "h": 53.0, "line_num": 5, "text": "return False"}, {"x": 202.0, "y": 719.0, "w": 332.0, "h": 58.0, "line_num": 6, "text": "return True"}], "ir_algo_name": "none", "ir_algo_output_code": "def palindroomic (stro):\nfor i in range (int (len(str)/2)):\nif stro [i] ! = str [len (st) -i]:\n.\nreturn False\nreturn True", "ir_algo_output_edit_distance": 43, "prompting_method": "simple-test2", "lm_post_processed_code": "def palindromic(stro):\nfor i in range(int(len(stro)/2)):\nif stro[i] != stro[len(stro) -i]:\nreturn False\nreturn True\n", "lm_post_processed_edit_distance": 36}, {"image_id": 46, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 53.0, "y": 269.0, "w": 587.0, "h": 66.0, "line_num": 1, "text": "def palindroomic (stro):"}, {"x": 195.0, "y": 400.0, "w": 831.0, "h": 73.0, "line_num": 2, "text": "for i in range (int (len(str)/2)):"}, {"x": 312.0, "y": 501.0, "w": 813.0, "h": 63.0, "line_num": 3, "text": "if stro [i] ! = str [len (st) -i]:"}, {"x": 351.0, "y": 620.0, "w": 31.0, "h": 48.0, "line_num": 4, "text": "."}, {"x": 408.0, "y": 613.0, "w": 319.0, "h": 53.0, "line_num": 5, "text": "return False"}, {"x": 202.0, "y": 719.0, "w": 332.0, "h": 58.0, "line_num": 6, "text": "return True"}], "ir_algo_name": "none", "ir_algo_output_code": "def palindroomic (stro):\nfor i in range (int (len(str)/2)):\nif stro [i] ! = str [len (st) -i]:\n.\nreturn False\nreturn True", "ir_algo_output_edit_distance": 43, "prompting_method": "simple-test3", "lm_post_processed_code": "def palindromic(stro):\nfor i in range(int(len(stro)/2)):\nif stro[i] != stro[len(stro) -i]:\nreturn False\nreturn True\n", "lm_post_processed_edit_distance": 36}, {"image_id": 46, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 53.0, "y": 269.0, "w": 587.0, "h": 66.0, "line_num": 1, "text": "def palindroomic (stro):"}, {"x": 195.0, "y": 400.0, "w": 831.0, "h": 73.0, "line_num": 2, "text": "for i in range (int (len(str)/2)):"}, {"x": 312.0, "y": 501.0, "w": 813.0, "h": 63.0, "line_num": 3, "text": "if stro [i] ! = str [len (st) -i]:"}, {"x": 351.0, "y": 620.0, "w": 31.0, "h": 48.0, "line_num": 4, "text": "."}, {"x": 408.0, "y": 613.0, "w": 319.0, "h": 53.0, "line_num": 5, "text": "return False"}, {"x": 202.0, "y": 719.0, "w": 332.0, "h": 58.0, "line_num": 6, "text": "return True"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 90.25, "ir_algo_output_code": "def palindroomic (stro):\n    for i in range (int (len(str)/2)):\n        if stro [i] ! = str [len (st) -i]:\n        .\n        return False\n    return True\n", "ir_algo_output_indented_lines": [{"x": 53.0, "y": 269.0, "w": 587.0, "h": 66.0, "line_num": 1, "text": "def palindroomic (stro):", "cluster_label": 2, "indentation": 0}, {"x": 195.0, "y": 400.0, "w": 831.0, "h": 73.0, "line_num": 2, "text": "for i in range (int (len(str)/2)):", "cluster_label": 1, "indentation": 1}, {"x": 312.0, "y": 501.0, "w": 813.0, "h": 63.0, "line_num": 3, "text": "if stro [i] ! = str [len (st) -i]:", "cluster_label": 0, "indentation": 2}, {"x": 351.0, "y": 620.0, "w": 31.0, "h": 48.0, "line_num": 4, "text": ".", "cluster_label": 0, "indentation": 2}, {"x": 408.0, "y": 613.0, "w": 319.0, "h": 53.0, "line_num": 5, "text": "return False", "cluster_label": 0, "indentation": 2}, {"x": 202.0, "y": 719.0, "w": 332.0, "h": 58.0, "line_num": 6, "text": "return True", "cluster_label": 1, "indentation": 1}], "ir_algo_output_edit_distance": 20, "prompting_method": "none", "lm_post_processed_code": "def palindroomic (stro):\n    for i in range (int (len(str)/2)):\n        if stro [i] ! = str [len (st) -i]:\n        .\n        return False\n    return True\n", "lm_post_processed_edit_distance": 20}, {"image_id": 46, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 53.0, "y": 269.0, "w": 587.0, "h": 66.0, "line_num": 1, "text": "def palindroomic (stro):"}, {"x": 195.0, "y": 400.0, "w": 831.0, "h": 73.0, "line_num": 2, "text": "for i in range (int (len(str)/2)):"}, {"x": 312.0, "y": 501.0, "w": 813.0, "h": 63.0, "line_num": 3, "text": "if stro [i] ! = str [len (st) -i]:"}, {"x": 351.0, "y": 620.0, "w": 31.0, "h": 48.0, "line_num": 4, "text": "."}, {"x": 408.0, "y": 613.0, "w": 319.0, "h": 53.0, "line_num": 5, "text": "return False"}, {"x": 202.0, "y": 719.0, "w": 332.0, "h": 58.0, "line_num": 6, "text": "return True"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 90.25, "ir_algo_output_code": "def palindroomic (stro):\n    for i in range (int (len(str)/2)):\n        if stro [i] ! = str [len (st) -i]:\n        .\n        return False\n    return True\n", "ir_algo_output_indented_lines": [{"x": 53.0, "y": 269.0, "w": 587.0, "h": 66.0, "line_num": 1, "text": "def palindroomic (stro):", "cluster_label": 2, "indentation": 0}, {"x": 195.0, "y": 400.0, "w": 831.0, "h": 73.0, "line_num": 2, "text": "for i in range (int (len(str)/2)):", "cluster_label": 1, "indentation": 1}, {"x": 312.0, "y": 501.0, "w": 813.0, "h": 63.0, "line_num": 3, "text": "if stro [i] ! = str [len (st) -i]:", "cluster_label": 0, "indentation": 2}, {"x": 351.0, "y": 620.0, "w": 31.0, "h": 48.0, "line_num": 4, "text": ".", "cluster_label": 0, "indentation": 2}, {"x": 408.0, "y": 613.0, "w": 319.0, "h": 53.0, "line_num": 5, "text": "return False", "cluster_label": 0, "indentation": 2}, {"x": 202.0, "y": 719.0, "w": 332.0, "h": 58.0, "line_num": 6, "text": "return True", "cluster_label": 1, "indentation": 1}], "ir_algo_output_edit_distance": 20, "prompting_method": "cot-test1", "lm_post_processed_code": "def palindroomic (stro):\n    for i in range (int (len(stro)/2)):\n        if stro [i] != stro [len (stro) -i]:\n            return False\n    return True\n", "lm_post_processed_edit_distance": 15}, {"image_id": 46, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 53.0, "y": 269.0, "w": 587.0, "h": 66.0, "line_num": 1, "text": "def palindroomic (stro):"}, {"x": 195.0, "y": 400.0, "w": 831.0, "h": 73.0, "line_num": 2, "text": "for i in range (int (len(str)/2)):"}, {"x": 312.0, "y": 501.0, "w": 813.0, "h": 63.0, "line_num": 3, "text": "if stro [i] ! = str [len (st) -i]:"}, {"x": 351.0, "y": 620.0, "w": 31.0, "h": 48.0, "line_num": 4, "text": "."}, {"x": 408.0, "y": 613.0, "w": 319.0, "h": 53.0, "line_num": 5, "text": "return False"}, {"x": 202.0, "y": 719.0, "w": 332.0, "h": 58.0, "line_num": 6, "text": "return True"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 90.25, "ir_algo_output_code": "def palindroomic (stro):\n    for i in range (int (len(str)/2)):\n        if stro [i] ! = str [len (st) -i]:\n        .\n        return False\n    return True\n", "ir_algo_output_indented_lines": [{"x": 53.0, "y": 269.0, "w": 587.0, "h": 66.0, "line_num": 1, "text": "def palindroomic (stro):", "cluster_label": 2, "indentation": 0}, {"x": 195.0, "y": 400.0, "w": 831.0, "h": 73.0, "line_num": 2, "text": "for i in range (int (len(str)/2)):", "cluster_label": 1, "indentation": 1}, {"x": 312.0, "y": 501.0, "w": 813.0, "h": 63.0, "line_num": 3, "text": "if stro [i] ! = str [len (st) -i]:", "cluster_label": 0, "indentation": 2}, {"x": 351.0, "y": 620.0, "w": 31.0, "h": 48.0, "line_num": 4, "text": ".", "cluster_label": 0, "indentation": 2}, {"x": 408.0, "y": 613.0, "w": 319.0, "h": 53.0, "line_num": 5, "text": "return False", "cluster_label": 0, "indentation": 2}, {"x": 202.0, "y": 719.0, "w": 332.0, "h": 58.0, "line_num": 6, "text": "return True", "cluster_label": 1, "indentation": 1}], "ir_algo_output_edit_distance": 20, "prompting_method": "cot-test5", "lm_post_processed_code": "def palindroomic (stro):\n    for i in range (int (len(stro)/2)):\n        if stro [i] != stro [len (stro) -i]:\n        .\n        return False\n    return True\n", "lm_post_processed_edit_distance": 21}, {"image_id": 46, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 53.0, "y": 269.0, "w": 587.0, "h": 66.0, "line_num": 1, "text": "def palindroomic (stro):"}, {"x": 195.0, "y": 400.0, "w": 831.0, "h": 73.0, "line_num": 2, "text": "for i in range (int (len(str)/2)):"}, {"x": 312.0, "y": 501.0, "w": 813.0, "h": 63.0, "line_num": 3, "text": "if stro [i] ! = str [len (st) -i]:"}, {"x": 351.0, "y": 620.0, "w": 31.0, "h": 48.0, "line_num": 4, "text": "."}, {"x": 408.0, "y": 613.0, "w": 319.0, "h": 53.0, "line_num": 5, "text": "return False"}, {"x": 202.0, "y": 719.0, "w": 332.0, "h": 58.0, "line_num": 6, "text": "return True"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 90.25, "ir_algo_output_code": "def palindroomic (stro):\n    for i in range (int (len(str)/2)):\n        if stro [i] ! = str [len (st) -i]:\n        .\n        return False\n    return True\n", "ir_algo_output_indented_lines": [{"x": 53.0, "y": 269.0, "w": 587.0, "h": 66.0, "line_num": 1, "text": "def palindroomic (stro):", "cluster_label": 2, "indentation": 0}, {"x": 195.0, "y": 400.0, "w": 831.0, "h": 73.0, "line_num": 2, "text": "for i in range (int (len(str)/2)):", "cluster_label": 1, "indentation": 1}, {"x": 312.0, "y": 501.0, "w": 813.0, "h": 63.0, "line_num": 3, "text": "if stro [i] ! = str [len (st) -i]:", "cluster_label": 0, "indentation": 2}, {"x": 351.0, "y": 620.0, "w": 31.0, "h": 48.0, "line_num": 4, "text": ".", "cluster_label": 0, "indentation": 2}, {"x": 408.0, "y": 613.0, "w": 319.0, "h": 53.0, "line_num": 5, "text": "return False", "cluster_label": 0, "indentation": 2}, {"x": 202.0, "y": 719.0, "w": 332.0, "h": 58.0, "line_num": 6, "text": "return True", "cluster_label": 1, "indentation": 1}], "ir_algo_output_edit_distance": 20, "prompting_method": "simple-test2", "lm_post_processed_code": "def palindromic(stro):\n    for i in range(int(len(stro)/2)):\n        if stro[i] != stro[len(stro) -i]:\n            return False\n    return True\n", "lm_post_processed_edit_distance": 8}, {"image_id": 46, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 53.0, "y": 269.0, "w": 587.0, "h": 66.0, "line_num": 1, "text": "def palindroomic (stro):"}, {"x": 195.0, "y": 400.0, "w": 831.0, "h": 73.0, "line_num": 2, "text": "for i in range (int (len(str)/2)):"}, {"x": 312.0, "y": 501.0, "w": 813.0, "h": 63.0, "line_num": 3, "text": "if stro [i] ! = str [len (st) -i]:"}, {"x": 351.0, "y": 620.0, "w": 31.0, "h": 48.0, "line_num": 4, "text": "."}, {"x": 408.0, "y": 613.0, "w": 319.0, "h": 53.0, "line_num": 5, "text": "return False"}, {"x": 202.0, "y": 719.0, "w": 332.0, "h": 58.0, "line_num": 6, "text": "return True"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 90.25, "ir_algo_output_code": "def palindroomic (stro):\n    for i in range (int (len(str)/2)):\n        if stro [i] ! = str [len (st) -i]:\n        .\n        return False\n    return True\n", "ir_algo_output_indented_lines": [{"x": 53.0, "y": 269.0, "w": 587.0, "h": 66.0, "line_num": 1, "text": "def palindroomic (stro):", "cluster_label": 2, "indentation": 0}, {"x": 195.0, "y": 400.0, "w": 831.0, "h": 73.0, "line_num": 2, "text": "for i in range (int (len(str)/2)):", "cluster_label": 1, "indentation": 1}, {"x": 312.0, "y": 501.0, "w": 813.0, "h": 63.0, "line_num": 3, "text": "if stro [i] ! = str [len (st) -i]:", "cluster_label": 0, "indentation": 2}, {"x": 351.0, "y": 620.0, "w": 31.0, "h": 48.0, "line_num": 4, "text": ".", "cluster_label": 0, "indentation": 2}, {"x": 408.0, "y": 613.0, "w": 319.0, "h": 53.0, "line_num": 5, "text": "return False", "cluster_label": 0, "indentation": 2}, {"x": 202.0, "y": 719.0, "w": 332.0, "h": 58.0, "line_num": 6, "text": "return True", "cluster_label": 1, "indentation": 1}], "ir_algo_output_edit_distance": 20, "prompting_method": "simple-test3", "lm_post_processed_code": "def palindromic(stro):\n    for i in range(int(len(stro)/2)):\n        if stro[i] != stro[len(stro) -i]:\n            return False\n    return True\n", "lm_post_processed_edit_distance": 8}, {"image_id": 46, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 53.0, "y": 269.0, "w": 587.0, "h": 66.0, "line_num": 1, "text": "def palindroomic (stro):"}, {"x": 195.0, "y": 400.0, "w": 831.0, "h": 73.0, "line_num": 2, "text": "for i in range (int (len(str)/2)):"}, {"x": 312.0, "y": 501.0, "w": 813.0, "h": 63.0, "line_num": 3, "text": "if stro [i] ! = str [len (st) -i]:"}, {"x": 351.0, "y": 620.0, "w": 31.0, "h": 48.0, "line_num": 4, "text": "."}, {"x": 408.0, "y": 613.0, "w": 319.0, "h": 53.0, "line_num": 5, "text": "return False"}, {"x": 202.0, "y": 719.0, "w": 332.0, "h": 58.0, "line_num": 6, "text": "return True"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def palindroomic (stro):\n    for i in range (int (len(str)/2)):\n        if stro [i] ! = str [len (st) -i]:\n            .\n                return False\n    return True\n", "ir_algo_output_indented_lines": [{"x": 53.0, "y": 269.0, "w": 587.0, "h": 66.0, "line_num": 1, "text": "def palindroomic (stro):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 195.0, "y": 400.0, "w": 831.0, "h": 73.0, "line_num": 2, "text": "for i in range (int (len(str)/2)):", "delta": 142.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 312.0, "y": 501.0, "w": 813.0, "h": 63.0, "line_num": 3, "text": "if stro [i] ! = str [len (st) -i]:", "delta": 117.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 351.0, "y": 620.0, "w": 31.0, "h": 48.0, "line_num": 4, "text": ".", "delta": 39.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 408.0, "y": 613.0, "w": 319.0, "h": 53.0, "line_num": 5, "text": "return False", "delta": 57.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 4}, {"x": 202.0, "y": 719.0, "w": 332.0, "h": 58.0, "line_num": 6, "text": "return True", "delta": -206.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 32, "prompting_method": "none", "lm_post_processed_code": "def palindroomic (stro):\n    for i in range (int (len(str)/2)):\n        if stro [i] ! = str [len (st) -i]:\n            .\n                return False\n    return True\n", "lm_post_processed_edit_distance": 32}, {"image_id": 46, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 53.0, "y": 269.0, "w": 587.0, "h": 66.0, "line_num": 1, "text": "def palindroomic (stro):"}, {"x": 195.0, "y": 400.0, "w": 831.0, "h": 73.0, "line_num": 2, "text": "for i in range (int (len(str)/2)):"}, {"x": 312.0, "y": 501.0, "w": 813.0, "h": 63.0, "line_num": 3, "text": "if stro [i] ! = str [len (st) -i]:"}, {"x": 351.0, "y": 620.0, "w": 31.0, "h": 48.0, "line_num": 4, "text": "."}, {"x": 408.0, "y": 613.0, "w": 319.0, "h": 53.0, "line_num": 5, "text": "return False"}, {"x": 202.0, "y": 719.0, "w": 332.0, "h": 58.0, "line_num": 6, "text": "return True"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def palindroomic (stro):\n    for i in range (int (len(str)/2)):\n        if stro [i] ! = str [len (st) -i]:\n            .\n                return False\n    return True\n", "ir_algo_output_indented_lines": [{"x": 53.0, "y": 269.0, "w": 587.0, "h": 66.0, "line_num": 1, "text": "def palindroomic (stro):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 195.0, "y": 400.0, "w": 831.0, "h": 73.0, "line_num": 2, "text": "for i in range (int (len(str)/2)):", "delta": 142.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 312.0, "y": 501.0, "w": 813.0, "h": 63.0, "line_num": 3, "text": "if stro [i] ! = str [len (st) -i]:", "delta": 117.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 351.0, "y": 620.0, "w": 31.0, "h": 48.0, "line_num": 4, "text": ".", "delta": 39.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 408.0, "y": 613.0, "w": 319.0, "h": 53.0, "line_num": 5, "text": "return False", "delta": 57.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 4}, {"x": 202.0, "y": 719.0, "w": 332.0, "h": 58.0, "line_num": 6, "text": "return True", "delta": -206.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 32, "prompting_method": "cot-test1", "lm_post_processed_code": "def palindroomic (stro):\n    for i in range (int (len(stro)/2)):\n        if stro [i] ! = stro [len (stro) -i - 1]:\n            return False\n    return True\n", "lm_post_processed_edit_distance": 19}, {"image_id": 46, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 53.0, "y": 269.0, "w": 587.0, "h": 66.0, "line_num": 1, "text": "def palindroomic (stro):"}, {"x": 195.0, "y": 400.0, "w": 831.0, "h": 73.0, "line_num": 2, "text": "for i in range (int (len(str)/2)):"}, {"x": 312.0, "y": 501.0, "w": 813.0, "h": 63.0, "line_num": 3, "text": "if stro [i] ! = str [len (st) -i]:"}, {"x": 351.0, "y": 620.0, "w": 31.0, "h": 48.0, "line_num": 4, "text": "."}, {"x": 408.0, "y": 613.0, "w": 319.0, "h": 53.0, "line_num": 5, "text": "return False"}, {"x": 202.0, "y": 719.0, "w": 332.0, "h": 58.0, "line_num": 6, "text": "return True"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def palindroomic (stro):\n    for i in range (int (len(str)/2)):\n        if stro [i] ! = str [len (st) -i]:\n            .\n                return False\n    return True\n", "ir_algo_output_indented_lines": [{"x": 53.0, "y": 269.0, "w": 587.0, "h": 66.0, "line_num": 1, "text": "def palindroomic (stro):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 195.0, "y": 400.0, "w": 831.0, "h": 73.0, "line_num": 2, "text": "for i in range (int (len(str)/2)):", "delta": 142.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 312.0, "y": 501.0, "w": 813.0, "h": 63.0, "line_num": 3, "text": "if stro [i] ! = str [len (st) -i]:", "delta": 117.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 351.0, "y": 620.0, "w": 31.0, "h": 48.0, "line_num": 4, "text": ".", "delta": 39.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 408.0, "y": 613.0, "w": 319.0, "h": 53.0, "line_num": 5, "text": "return False", "delta": 57.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 4}, {"x": 202.0, "y": 719.0, "w": 332.0, "h": 58.0, "line_num": 6, "text": "return True", "delta": -206.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 32, "prompting_method": "cot-test5", "lm_post_processed_code": "def palindroomic (stro):\n    for i in range (int (len(stro)/2)):\n        if stro [i] != stro [len (stro) -i - 1]:\n            return False\n    return True\n", "lm_post_processed_edit_distance": 18}, {"image_id": 46, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 53.0, "y": 269.0, "w": 587.0, "h": 66.0, "line_num": 1, "text": "def palindroomic (stro):"}, {"x": 195.0, "y": 400.0, "w": 831.0, "h": 73.0, "line_num": 2, "text": "for i in range (int (len(str)/2)):"}, {"x": 312.0, "y": 501.0, "w": 813.0, "h": 63.0, "line_num": 3, "text": "if stro [i] ! = str [len (st) -i]:"}, {"x": 351.0, "y": 620.0, "w": 31.0, "h": 48.0, "line_num": 4, "text": "."}, {"x": 408.0, "y": 613.0, "w": 319.0, "h": 53.0, "line_num": 5, "text": "return False"}, {"x": 202.0, "y": 719.0, "w": 332.0, "h": 58.0, "line_num": 6, "text": "return True"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def palindroomic (stro):\n    for i in range (int (len(str)/2)):\n        if stro [i] ! = str [len (st) -i]:\n            .\n                return False\n    return True\n", "ir_algo_output_indented_lines": [{"x": 53.0, "y": 269.0, "w": 587.0, "h": 66.0, "line_num": 1, "text": "def palindroomic (stro):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 195.0, "y": 400.0, "w": 831.0, "h": 73.0, "line_num": 2, "text": "for i in range (int (len(str)/2)):", "delta": 142.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 312.0, "y": 501.0, "w": 813.0, "h": 63.0, "line_num": 3, "text": "if stro [i] ! = str [len (st) -i]:", "delta": 117.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 351.0, "y": 620.0, "w": 31.0, "h": 48.0, "line_num": 4, "text": ".", "delta": 39.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 408.0, "y": 613.0, "w": 319.0, "h": 53.0, "line_num": 5, "text": "return False", "delta": 57.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 4}, {"x": 202.0, "y": 719.0, "w": 332.0, "h": 58.0, "line_num": 6, "text": "return True", "delta": -206.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 32, "prompting_method": "simple-test2", "lm_post_processed_code": "def palindromic(stro):\n    for i in range(int(len(stro)/2)):\n        if stro[i] != stro[len(stro) - i]:\n            return False\n    return True\n", "lm_post_processed_edit_distance": 7}, {"image_id": 46, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 53.0, "y": 269.0, "w": 587.0, "h": 66.0, "line_num": 1, "text": "def palindroomic (stro):"}, {"x": 195.0, "y": 400.0, "w": 831.0, "h": 73.0, "line_num": 2, "text": "for i in range (int (len(str)/2)):"}, {"x": 312.0, "y": 501.0, "w": 813.0, "h": 63.0, "line_num": 3, "text": "if stro [i] ! = str [len (st) -i]:"}, {"x": 351.0, "y": 620.0, "w": 31.0, "h": 48.0, "line_num": 4, "text": "."}, {"x": 408.0, "y": 613.0, "w": 319.0, "h": 53.0, "line_num": 5, "text": "return False"}, {"x": 202.0, "y": 719.0, "w": 332.0, "h": 58.0, "line_num": 6, "text": "return True"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def palindroomic (stro):\n    for i in range (int (len(str)/2)):\n        if stro [i] ! = str [len (st) -i]:\n            .\n                return False\n    return True\n", "ir_algo_output_indented_lines": [{"x": 53.0, "y": 269.0, "w": 587.0, "h": 66.0, "line_num": 1, "text": "def palindroomic (stro):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 195.0, "y": 400.0, "w": 831.0, "h": 73.0, "line_num": 2, "text": "for i in range (int (len(str)/2)):", "delta": 142.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 312.0, "y": 501.0, "w": 813.0, "h": 63.0, "line_num": 3, "text": "if stro [i] ! = str [len (st) -i]:", "delta": 117.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 351.0, "y": 620.0, "w": 31.0, "h": 48.0, "line_num": 4, "text": ".", "delta": 39.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 408.0, "y": 613.0, "w": 319.0, "h": 53.0, "line_num": 5, "text": "return False", "delta": 57.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 4}, {"x": 202.0, "y": 719.0, "w": 332.0, "h": 58.0, "line_num": 6, "text": "return True", "delta": -206.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 32, "prompting_method": "simple-test3", "lm_post_processed_code": "def palindromic(stro):\n    for i in range(int(len(stro)/2)):\n        if stro[i] != stro[len(stro) -i]:\n            return False\n    return True\n", "lm_post_processed_edit_distance": 8}, {"image_id": 49, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 106.0, "y": 72.0, "w": 754.0, "h": 63.0, "line_num": 1, "text": "def CountFrequency (my-list):"}, {"x": 238.0, "y": 167.0, "w": 259.0, "h": 82.0, "line_num": 2, "text": "freq = {}"}, {"x": 227.0, "y": 286.0, "w": 553.0, "h": 64.0, "line_num": 3, "text": "for item in my-list:"}, {"x": 460.0, "y": 389.0, "w": 381.0, "h": 66.0, "line_num": 4, "text": "freq [item]+=1"}, {"x": 231.0, "y": 494.0, "w": 302.0, "h": 59.0, "line_num": 5, "text": "return freq"}], "ir_algo_name": "none", "ir_algo_output_code": "def CountFrequency (my-list):\nfreq = {}\nfor item in my-list:\nfreq [item]+=1\nreturn freq", "ir_algo_output_edit_distance": 27, "prompting_method": "none", "lm_post_processed_code": "def CountFrequency (my-list):\nfreq = {}\nfor item in my-list:\nfreq [item]+=1\nreturn freq", "lm_post_processed_edit_distance": 27}, {"image_id": 49, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 106.0, "y": 72.0, "w": 754.0, "h": 63.0, "line_num": 1, "text": "def CountFrequency (my-list):"}, {"x": 238.0, "y": 167.0, "w": 259.0, "h": 82.0, "line_num": 2, "text": "freq = {}"}, {"x": 227.0, "y": 286.0, "w": 553.0, "h": 64.0, "line_num": 3, "text": "for item in my-list:"}, {"x": 460.0, "y": 389.0, "w": 381.0, "h": 66.0, "line_num": 4, "text": "freq [item]+=1"}, {"x": 231.0, "y": 494.0, "w": 302.0, "h": 59.0, "line_num": 5, "text": "return freq"}], "ir_algo_name": "none", "ir_algo_output_code": "def CountFrequency (my-list):\nfreq = {}\nfor item in my-list:\nfreq [item]+=1\nreturn freq", "ir_algo_output_edit_distance": 27, "prompting_method": "cot-test1", "lm_post_processed_code": "def CountFrequency(my_list):\nfreq = {}\nfor item in my_list:\nfreq[item] += 1\nreturn freq\n", "lm_post_processed_edit_distance": 20}, {"image_id": 49, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 106.0, "y": 72.0, "w": 754.0, "h": 63.0, "line_num": 1, "text": "def CountFrequency (my-list):"}, {"x": 238.0, "y": 167.0, "w": 259.0, "h": 82.0, "line_num": 2, "text": "freq = {}"}, {"x": 227.0, "y": 286.0, "w": 553.0, "h": 64.0, "line_num": 3, "text": "for item in my-list:"}, {"x": 460.0, "y": 389.0, "w": 381.0, "h": 66.0, "line_num": 4, "text": "freq [item]+=1"}, {"x": 231.0, "y": 494.0, "w": 302.0, "h": 59.0, "line_num": 5, "text": "return freq"}], "ir_algo_name": "none", "ir_algo_output_code": "def CountFrequency (my-list):\nfreq = {}\nfor item in my-list:\nfreq [item]+=1\nreturn freq", "ir_algo_output_edit_distance": 27, "prompting_method": "cot-test5", "lm_post_processed_code": "def CountFrequency(my_list):\nfreq = {}\nfor item in my_list:\nfreq[item] += 1\nreturn freq\n", "lm_post_processed_edit_distance": 20}, {"image_id": 49, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 106.0, "y": 72.0, "w": 754.0, "h": 63.0, "line_num": 1, "text": "def CountFrequency (my-list):"}, {"x": 238.0, "y": 167.0, "w": 259.0, "h": 82.0, "line_num": 2, "text": "freq = {}"}, {"x": 227.0, "y": 286.0, "w": 553.0, "h": 64.0, "line_num": 3, "text": "for item in my-list:"}, {"x": 460.0, "y": 389.0, "w": 381.0, "h": 66.0, "line_num": 4, "text": "freq [item]+=1"}, {"x": 231.0, "y": 494.0, "w": 302.0, "h": 59.0, "line_num": 5, "text": "return freq"}], "ir_algo_name": "none", "ir_algo_output_code": "def CountFrequency (my-list):\nfreq = {}\nfor item in my-list:\nfreq [item]+=1\nreturn freq", "ir_algo_output_edit_distance": 27, "prompting_method": "simple-test2", "lm_post_processed_code": "def CountFrequency(my_list):\n    freq = {}\n    for item in my_list:\n        freq[item] += 1\n    return freq\n", "lm_post_processed_edit_distance": 0}, {"image_id": 49, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 106.0, "y": 72.0, "w": 754.0, "h": 63.0, "line_num": 1, "text": "def CountFrequency (my-list):"}, {"x": 238.0, "y": 167.0, "w": 259.0, "h": 82.0, "line_num": 2, "text": "freq = {}"}, {"x": 227.0, "y": 286.0, "w": 553.0, "h": 64.0, "line_num": 3, "text": "for item in my-list:"}, {"x": 460.0, "y": 389.0, "w": 381.0, "h": 66.0, "line_num": 4, "text": "freq [item]+=1"}, {"x": 231.0, "y": 494.0, "w": 302.0, "h": 59.0, "line_num": 5, "text": "return freq"}], "ir_algo_name": "none", "ir_algo_output_code": "def CountFrequency (my-list):\nfreq = {}\nfor item in my-list:\nfreq [item]+=1\nreturn freq", "ir_algo_output_edit_distance": 27, "prompting_method": "simple-test3", "lm_post_processed_code": "def CountFrequency(my_list):\n    freq = {}\n    for item in my_list:\n        freq[item] += 1\n    return freq\n", "lm_post_processed_edit_distance": 0}, {"image_id": 49, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 106.0, "y": 72.0, "w": 754.0, "h": 63.0, "line_num": 1, "text": "def CountFrequency (my-list):"}, {"x": 238.0, "y": 167.0, "w": 259.0, "h": 82.0, "line_num": 2, "text": "freq = {}"}, {"x": 227.0, "y": 286.0, "w": 553.0, "h": 64.0, "line_num": 3, "text": "for item in my-list:"}, {"x": 460.0, "y": 389.0, "w": 381.0, "h": 66.0, "line_num": 4, "text": "freq [item]+=1"}, {"x": 231.0, "y": 494.0, "w": 302.0, "h": 59.0, "line_num": 5, "text": "return freq"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 100.19999999999999, "ir_algo_output_code": "def CountFrequency (my-list):\n    freq = {}\n    for item in my-list:\n        freq [item]+=1\n    return freq\n", "ir_algo_output_indented_lines": [{"x": 106.0, "y": 72.0, "w": 754.0, "h": 63.0, "line_num": 1, "text": "def CountFrequency (my-list):", "cluster_label": 2, "indentation": 0}, {"x": 238.0, "y": 167.0, "w": 259.0, "h": 82.0, "line_num": 2, "text": "freq = {}", "cluster_label": 0, "indentation": 1}, {"x": 227.0, "y": 286.0, "w": 553.0, "h": 64.0, "line_num": 3, "text": "for item in my-list:", "cluster_label": 0, "indentation": 1}, {"x": 460.0, "y": 389.0, "w": 381.0, "h": 66.0, "line_num": 4, "text": "freq [item]+=1", "cluster_label": 1, "indentation": 2}, {"x": 231.0, "y": 494.0, "w": 302.0, "h": 59.0, "line_num": 5, "text": "return freq", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 6, "prompting_method": "none", "lm_post_processed_code": "def CountFrequency (my-list):\n    freq = {}\n    for item in my-list:\n        freq [item]+=1\n    return freq\n", "lm_post_processed_edit_distance": 6}, {"image_id": 49, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 106.0, "y": 72.0, "w": 754.0, "h": 63.0, "line_num": 1, "text": "def CountFrequency (my-list):"}, {"x": 238.0, "y": 167.0, "w": 259.0, "h": 82.0, "line_num": 2, "text": "freq = {}"}, {"x": 227.0, "y": 286.0, "w": 553.0, "h": 64.0, "line_num": 3, "text": "for item in my-list:"}, {"x": 460.0, "y": 389.0, "w": 381.0, "h": 66.0, "line_num": 4, "text": "freq [item]+=1"}, {"x": 231.0, "y": 494.0, "w": 302.0, "h": 59.0, "line_num": 5, "text": "return freq"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 100.19999999999999, "ir_algo_output_code": "def CountFrequency (my-list):\n    freq = {}\n    for item in my-list:\n        freq [item]+=1\n    return freq\n", "ir_algo_output_indented_lines": [{"x": 106.0, "y": 72.0, "w": 754.0, "h": 63.0, "line_num": 1, "text": "def CountFrequency (my-list):", "cluster_label": 2, "indentation": 0}, {"x": 238.0, "y": 167.0, "w": 259.0, "h": 82.0, "line_num": 2, "text": "freq = {}", "cluster_label": 0, "indentation": 1}, {"x": 227.0, "y": 286.0, "w": 553.0, "h": 64.0, "line_num": 3, "text": "for item in my-list:", "cluster_label": 0, "indentation": 1}, {"x": 460.0, "y": 389.0, "w": 381.0, "h": 66.0, "line_num": 4, "text": "freq [item]+=1", "cluster_label": 1, "indentation": 2}, {"x": 231.0, "y": 494.0, "w": 302.0, "h": 59.0, "line_num": 5, "text": "return freq", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 6, "prompting_method": "cot-test1", "lm_post_processed_code": "def CountFrequency(my_list):\nfreq = {}\nfor item in my_list:\n    freq[item] += 1\nreturn freq\n", "lm_post_processed_edit_distance": 16}, {"image_id": 49, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 106.0, "y": 72.0, "w": 754.0, "h": 63.0, "line_num": 1, "text": "def CountFrequency (my-list):"}, {"x": 238.0, "y": 167.0, "w": 259.0, "h": 82.0, "line_num": 2, "text": "freq = {}"}, {"x": 227.0, "y": 286.0, "w": 553.0, "h": 64.0, "line_num": 3, "text": "for item in my-list:"}, {"x": 460.0, "y": 389.0, "w": 381.0, "h": 66.0, "line_num": 4, "text": "freq [item]+=1"}, {"x": 231.0, "y": 494.0, "w": 302.0, "h": 59.0, "line_num": 5, "text": "return freq"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 100.19999999999999, "ir_algo_output_code": "def CountFrequency (my-list):\n    freq = {}\n    for item in my-list:\n        freq [item]+=1\n    return freq\n", "ir_algo_output_indented_lines": [{"x": 106.0, "y": 72.0, "w": 754.0, "h": 63.0, "line_num": 1, "text": "def CountFrequency (my-list):", "cluster_label": 2, "indentation": 0}, {"x": 238.0, "y": 167.0, "w": 259.0, "h": 82.0, "line_num": 2, "text": "freq = {}", "cluster_label": 0, "indentation": 1}, {"x": 227.0, "y": 286.0, "w": 553.0, "h": 64.0, "line_num": 3, "text": "for item in my-list:", "cluster_label": 0, "indentation": 1}, {"x": 460.0, "y": 389.0, "w": 381.0, "h": 66.0, "line_num": 4, "text": "freq [item]+=1", "cluster_label": 1, "indentation": 2}, {"x": 231.0, "y": 494.0, "w": 302.0, "h": 59.0, "line_num": 5, "text": "return freq", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 6, "prompting_method": "cot-test5", "lm_post_processed_code": "def CountFrequency(my_list):\n    freq = {}\n    for item in my_list:\n        freq[item]+=1\n    return freq\n", "lm_post_processed_edit_distance": 2}, {"image_id": 49, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 106.0, "y": 72.0, "w": 754.0, "h": 63.0, "line_num": 1, "text": "def CountFrequency (my-list):"}, {"x": 238.0, "y": 167.0, "w": 259.0, "h": 82.0, "line_num": 2, "text": "freq = {}"}, {"x": 227.0, "y": 286.0, "w": 553.0, "h": 64.0, "line_num": 3, "text": "for item in my-list:"}, {"x": 460.0, "y": 389.0, "w": 381.0, "h": 66.0, "line_num": 4, "text": "freq [item]+=1"}, {"x": 231.0, "y": 494.0, "w": 302.0, "h": 59.0, "line_num": 5, "text": "return freq"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 100.19999999999999, "ir_algo_output_code": "def CountFrequency (my-list):\n    freq = {}\n    for item in my-list:\n        freq [item]+=1\n    return freq\n", "ir_algo_output_indented_lines": [{"x": 106.0, "y": 72.0, "w": 754.0, "h": 63.0, "line_num": 1, "text": "def CountFrequency (my-list):", "cluster_label": 2, "indentation": 0}, {"x": 238.0, "y": 167.0, "w": 259.0, "h": 82.0, "line_num": 2, "text": "freq = {}", "cluster_label": 0, "indentation": 1}, {"x": 227.0, "y": 286.0, "w": 553.0, "h": 64.0, "line_num": 3, "text": "for item in my-list:", "cluster_label": 0, "indentation": 1}, {"x": 460.0, "y": 389.0, "w": 381.0, "h": 66.0, "line_num": 4, "text": "freq [item]+=1", "cluster_label": 1, "indentation": 2}, {"x": 231.0, "y": 494.0, "w": 302.0, "h": 59.0, "line_num": 5, "text": "return freq", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 6, "prompting_method": "simple-test2", "lm_post_processed_code": "def CountFrequency(my_list):\n    freq = {}\n    for item in my_list:\n        freq[item] += 1\n    return freq\n", "lm_post_processed_edit_distance": 0}, {"image_id": 49, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 106.0, "y": 72.0, "w": 754.0, "h": 63.0, "line_num": 1, "text": "def CountFrequency (my-list):"}, {"x": 238.0, "y": 167.0, "w": 259.0, "h": 82.0, "line_num": 2, "text": "freq = {}"}, {"x": 227.0, "y": 286.0, "w": 553.0, "h": 64.0, "line_num": 3, "text": "for item in my-list:"}, {"x": 460.0, "y": 389.0, "w": 381.0, "h": 66.0, "line_num": 4, "text": "freq [item]+=1"}, {"x": 231.0, "y": 494.0, "w": 302.0, "h": 59.0, "line_num": 5, "text": "return freq"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 100.19999999999999, "ir_algo_output_code": "def CountFrequency (my-list):\n    freq = {}\n    for item in my-list:\n        freq [item]+=1\n    return freq\n", "ir_algo_output_indented_lines": [{"x": 106.0, "y": 72.0, "w": 754.0, "h": 63.0, "line_num": 1, "text": "def CountFrequency (my-list):", "cluster_label": 2, "indentation": 0}, {"x": 238.0, "y": 167.0, "w": 259.0, "h": 82.0, "line_num": 2, "text": "freq = {}", "cluster_label": 0, "indentation": 1}, {"x": 227.0, "y": 286.0, "w": 553.0, "h": 64.0, "line_num": 3, "text": "for item in my-list:", "cluster_label": 0, "indentation": 1}, {"x": 460.0, "y": 389.0, "w": 381.0, "h": 66.0, "line_num": 4, "text": "freq [item]+=1", "cluster_label": 1, "indentation": 2}, {"x": 231.0, "y": 494.0, "w": 302.0, "h": 59.0, "line_num": 5, "text": "return freq", "cluster_label": 0, "indentation": 1}], "ir_algo_output_edit_distance": 6, "prompting_method": "simple-test3", "lm_post_processed_code": "def CountFrequency(my_list):\n    freq = {}\n    for item in my_list:\n        freq[item] += 1\n    return freq\n", "lm_post_processed_edit_distance": 0}, {"image_id": 49, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 106.0, "y": 72.0, "w": 754.0, "h": 63.0, "line_num": 1, "text": "def CountFrequency (my-list):"}, {"x": 238.0, "y": 167.0, "w": 259.0, "h": 82.0, "line_num": 2, "text": "freq = {}"}, {"x": 227.0, "y": 286.0, "w": 553.0, "h": 64.0, "line_num": 3, "text": "for item in my-list:"}, {"x": 460.0, "y": 389.0, "w": 381.0, "h": 66.0, "line_num": 4, "text": "freq [item]+=1"}, {"x": 231.0, "y": 494.0, "w": 302.0, "h": 59.0, "line_num": 5, "text": "return freq"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def CountFrequency (my-list):\n    freq = {}\n    for item in my-list:\n        freq [item]+=1\n    return freq\n", "ir_algo_output_indented_lines": [{"x": 106.0, "y": 72.0, "w": 754.0, "h": 63.0, "line_num": 1, "text": "def CountFrequency (my-list):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 238.0, "y": 167.0, "w": 259.0, "h": 82.0, "line_num": 2, "text": "freq = {}", "delta": 132.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 227.0, "y": 286.0, "w": 553.0, "h": 64.0, "line_num": 3, "text": "for item in my-list:", "delta": -11.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 460.0, "y": 389.0, "w": 381.0, "h": 66.0, "line_num": 4, "text": "freq [item]+=1", "delta": 233.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 231.0, "y": 494.0, "w": 302.0, "h": 59.0, "line_num": 5, "text": "return freq", "delta": -229.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 6, "prompting_method": "none", "lm_post_processed_code": "def CountFrequency (my-list):\n    freq = {}\n    for item in my-list:\n        freq [item]+=1\n    return freq\n", "lm_post_processed_edit_distance": 6}, {"image_id": 49, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 106.0, "y": 72.0, "w": 754.0, "h": 63.0, "line_num": 1, "text": "def CountFrequency (my-list):"}, {"x": 238.0, "y": 167.0, "w": 259.0, "h": 82.0, "line_num": 2, "text": "freq = {}"}, {"x": 227.0, "y": 286.0, "w": 553.0, "h": 64.0, "line_num": 3, "text": "for item in my-list:"}, {"x": 460.0, "y": 389.0, "w": 381.0, "h": 66.0, "line_num": 4, "text": "freq [item]+=1"}, {"x": 231.0, "y": 494.0, "w": 302.0, "h": 59.0, "line_num": 5, "text": "return freq"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def CountFrequency (my-list):\n    freq = {}\n    for item in my-list:\n        freq [item]+=1\n    return freq\n", "ir_algo_output_indented_lines": [{"x": 106.0, "y": 72.0, "w": 754.0, "h": 63.0, "line_num": 1, "text": "def CountFrequency (my-list):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 238.0, "y": 167.0, "w": 259.0, "h": 82.0, "line_num": 2, "text": "freq = {}", "delta": 132.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 227.0, "y": 286.0, "w": 553.0, "h": 64.0, "line_num": 3, "text": "for item in my-list:", "delta": -11.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 460.0, "y": 389.0, "w": 381.0, "h": 66.0, "line_num": 4, "text": "freq [item]+=1", "delta": 233.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 231.0, "y": 494.0, "w": 302.0, "h": 59.0, "line_num": 5, "text": "return freq", "delta": -229.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 6, "prompting_method": "cot-test1", "lm_post_processed_code": "def CountFrequency(my_list):\nfreq = {}\nfor item in my_list:\n    freq[item] += 1\nreturn freq\n", "lm_post_processed_edit_distance": 16}, {"image_id": 49, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 106.0, "y": 72.0, "w": 754.0, "h": 63.0, "line_num": 1, "text": "def CountFrequency (my-list):"}, {"x": 238.0, "y": 167.0, "w": 259.0, "h": 82.0, "line_num": 2, "text": "freq = {}"}, {"x": 227.0, "y": 286.0, "w": 553.0, "h": 64.0, "line_num": 3, "text": "for item in my-list:"}, {"x": 460.0, "y": 389.0, "w": 381.0, "h": 66.0, "line_num": 4, "text": "freq [item]+=1"}, {"x": 231.0, "y": 494.0, "w": 302.0, "h": 59.0, "line_num": 5, "text": "return freq"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def CountFrequency (my-list):\n    freq = {}\n    for item in my-list:\n        freq [item]+=1\n    return freq\n", "ir_algo_output_indented_lines": [{"x": 106.0, "y": 72.0, "w": 754.0, "h": 63.0, "line_num": 1, "text": "def CountFrequency (my-list):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 238.0, "y": 167.0, "w": 259.0, "h": 82.0, "line_num": 2, "text": "freq = {}", "delta": 132.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 227.0, "y": 286.0, "w": 553.0, "h": 64.0, "line_num": 3, "text": "for item in my-list:", "delta": -11.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 460.0, "y": 389.0, "w": 381.0, "h": 66.0, "line_num": 4, "text": "freq [item]+=1", "delta": 233.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 231.0, "y": 494.0, "w": 302.0, "h": 59.0, "line_num": 5, "text": "return freq", "delta": -229.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 6, "prompting_method": "cot-test5", "lm_post_processed_code": "def CountFrequency(my_list):\n    freq = {}\n    for item in my_list:\n        freq[item]+=1\n    return freq\n", "lm_post_processed_edit_distance": 2}, {"image_id": 49, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 106.0, "y": 72.0, "w": 754.0, "h": 63.0, "line_num": 1, "text": "def CountFrequency (my-list):"}, {"x": 238.0, "y": 167.0, "w": 259.0, "h": 82.0, "line_num": 2, "text": "freq = {}"}, {"x": 227.0, "y": 286.0, "w": 553.0, "h": 64.0, "line_num": 3, "text": "for item in my-list:"}, {"x": 460.0, "y": 389.0, "w": 381.0, "h": 66.0, "line_num": 4, "text": "freq [item]+=1"}, {"x": 231.0, "y": 494.0, "w": 302.0, "h": 59.0, "line_num": 5, "text": "return freq"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def CountFrequency (my-list):\n    freq = {}\n    for item in my-list:\n        freq [item]+=1\n    return freq\n", "ir_algo_output_indented_lines": [{"x": 106.0, "y": 72.0, "w": 754.0, "h": 63.0, "line_num": 1, "text": "def CountFrequency (my-list):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 238.0, "y": 167.0, "w": 259.0, "h": 82.0, "line_num": 2, "text": "freq = {}", "delta": 132.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 227.0, "y": 286.0, "w": 553.0, "h": 64.0, "line_num": 3, "text": "for item in my-list:", "delta": -11.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 460.0, "y": 389.0, "w": 381.0, "h": 66.0, "line_num": 4, "text": "freq [item]+=1", "delta": 233.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 231.0, "y": 494.0, "w": 302.0, "h": 59.0, "line_num": 5, "text": "return freq", "delta": -229.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 6, "prompting_method": "simple-test2", "lm_post_processed_code": "def CountFrequency(my_list):\n    freq = {}\n    for item in my_list:\n        freq[item] += 1\n    return freq\n", "lm_post_processed_edit_distance": 0}, {"image_id": 49, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 106.0, "y": 72.0, "w": 754.0, "h": 63.0, "line_num": 1, "text": "def CountFrequency (my-list):"}, {"x": 238.0, "y": 167.0, "w": 259.0, "h": 82.0, "line_num": 2, "text": "freq = {}"}, {"x": 227.0, "y": 286.0, "w": 553.0, "h": 64.0, "line_num": 3, "text": "for item in my-list:"}, {"x": 460.0, "y": 389.0, "w": 381.0, "h": 66.0, "line_num": 4, "text": "freq [item]+=1"}, {"x": 231.0, "y": 494.0, "w": 302.0, "h": 59.0, "line_num": 5, "text": "return freq"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def CountFrequency (my-list):\n    freq = {}\n    for item in my-list:\n        freq [item]+=1\n    return freq\n", "ir_algo_output_indented_lines": [{"x": 106.0, "y": 72.0, "w": 754.0, "h": 63.0, "line_num": 1, "text": "def CountFrequency (my-list):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 238.0, "y": 167.0, "w": 259.0, "h": 82.0, "line_num": 2, "text": "freq = {}", "delta": 132.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 227.0, "y": 286.0, "w": 553.0, "h": 64.0, "line_num": 3, "text": "for item in my-list:", "delta": -11.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 460.0, "y": 389.0, "w": 381.0, "h": 66.0, "line_num": 4, "text": "freq [item]+=1", "delta": 233.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 231.0, "y": 494.0, "w": 302.0, "h": 59.0, "line_num": 5, "text": "return freq", "delta": -229.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}], "ir_algo_output_edit_distance": 6, "prompting_method": "simple-test3", "lm_post_processed_code": "def CountFrequency(my_list):\n    freq = {}\n    for item in my_list:\n        freq[item] += 1\n    return freq\n", "lm_post_processed_edit_distance": 0}, {"image_id": 50, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 51.0, "y": 35.0, "w": 728.0, "h": 80.0, "line_num": 1, "text": "def two Sam (nums, target):"}, {"x": 174.0, "y": 137.0, "w": 776.0, "h": 68.0, "line_num": 2, "text": "for i in range (len (namA) :"}, {"x": 298.0, "y": 242.0, "w": 768.0, "h": 64.0, "line_num": 3, "text": "for p in range (i) Lon (namp) :"}, {"x": 380.0, "y": 345.0, "w": 732.0, "h": 63.0, "line_num": 4, "text": "if (name [i] + numa [P] == fanget):"}, {"x": 489.0, "y": 427.0, "w": 278.0, "h": 66.0, "line_num": 5, "text": "netann [i, P]"}], "ir_algo_name": "none", "ir_algo_output_code": "def two Sam (nums, target):\nfor i in range (len (namA) :\nfor p in range (i) Lon (namp) :\nif (name [i] + numa [P] == fanget):\nnetann [i, P]", "ir_algo_output_edit_distance": 71, "prompting_method": "none", "lm_post_processed_code": "def two Sam (nums, target):\nfor i in range (len (namA) :\nfor p in range (i) Lon (namp) :\nif (name [i] + numa [P] == fanget):\nnetann [i, P]", "lm_post_processed_edit_distance": 71}, {"image_id": 50, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 51.0, "y": 35.0, "w": 728.0, "h": 80.0, "line_num": 1, "text": "def two Sam (nums, target):"}, {"x": 174.0, "y": 137.0, "w": 776.0, "h": 68.0, "line_num": 2, "text": "for i in range (len (namA) :"}, {"x": 298.0, "y": 242.0, "w": 768.0, "h": 64.0, "line_num": 3, "text": "for p in range (i) Lon (namp) :"}, {"x": 380.0, "y": 345.0, "w": 732.0, "h": 63.0, "line_num": 4, "text": "if (name [i] + numa [P] == fanget):"}, {"x": 489.0, "y": 427.0, "w": 278.0, "h": 66.0, "line_num": 5, "text": "netann [i, P]"}], "ir_algo_name": "none", "ir_algo_output_code": "def two Sam (nums, target):\nfor i in range (len (namA) :\nfor p in range (i) Lon (namp) :\nif (name [i] + numa [P] == fanget):\nnetann [i, P]", "ir_algo_output_edit_distance": 71, "prompting_method": "cot-test1", "lm_post_processed_code": "def twoSum(nums, target):\nfor i in range(len(nums)):\nfor p in range(i, len(nums)):\nif (nums[i] + nums[p] == target):\nreturn [i, p]\n", "lm_post_processed_edit_distance": 42}, {"image_id": 50, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 51.0, "y": 35.0, "w": 728.0, "h": 80.0, "line_num": 1, "text": "def two Sam (nums, target):"}, {"x": 174.0, "y": 137.0, "w": 776.0, "h": 68.0, "line_num": 2, "text": "for i in range (len (namA) :"}, {"x": 298.0, "y": 242.0, "w": 768.0, "h": 64.0, "line_num": 3, "text": "for p in range (i) Lon (namp) :"}, {"x": 380.0, "y": 345.0, "w": 732.0, "h": 63.0, "line_num": 4, "text": "if (name [i] + numa [P] == fanget):"}, {"x": 489.0, "y": 427.0, "w": 278.0, "h": 66.0, "line_num": 5, "text": "netann [i, P]"}], "ir_algo_name": "none", "ir_algo_output_code": "def two Sam (nums, target):\nfor i in range (len (namA) :\nfor p in range (i) Lon (namp) :\nif (name [i] + numa [P] == fanget):\nnetann [i, P]", "ir_algo_output_edit_distance": 71, "prompting_method": "cot-test5", "lm_post_processed_code": "def twoSum(nums, target):\nfor i in range(len(nums)):\nfor p in range(i, len(nums)):\nif (nums[i] + nums[p] == target):\nreturn [i, p]\n", "lm_post_processed_edit_distance": 42}, {"image_id": 50, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 51.0, "y": 35.0, "w": 728.0, "h": 80.0, "line_num": 1, "text": "def two Sam (nums, target):"}, {"x": 174.0, "y": 137.0, "w": 776.0, "h": 68.0, "line_num": 2, "text": "for i in range (len (namA) :"}, {"x": 298.0, "y": 242.0, "w": 768.0, "h": 64.0, "line_num": 3, "text": "for p in range (i) Lon (namp) :"}, {"x": 380.0, "y": 345.0, "w": 732.0, "h": 63.0, "line_num": 4, "text": "if (name [i] + numa [P] == fanget):"}, {"x": 489.0, "y": 427.0, "w": 278.0, "h": 66.0, "line_num": 5, "text": "netann [i, P]"}], "ir_algo_name": "none", "ir_algo_output_code": "def two Sam (nums, target):\nfor i in range (len (namA) :\nfor p in range (i) Lon (namp) :\nif (name [i] + numa [P] == fanget):\nnetann [i, P]", "ir_algo_output_edit_distance": 71, "prompting_method": "simple-test2", "lm_post_processed_code": "def twoSum(nums, target):\nfor i in range(len(nums)):\nfor p in range(i, len(nums)):\nif (nums[i] + nums[p] == target):\nreturn [i, p]\n", "lm_post_processed_edit_distance": 42}, {"image_id": 50, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 51.0, "y": 35.0, "w": 728.0, "h": 80.0, "line_num": 1, "text": "def two Sam (nums, target):"}, {"x": 174.0, "y": 137.0, "w": 776.0, "h": 68.0, "line_num": 2, "text": "for i in range (len (namA) :"}, {"x": 298.0, "y": 242.0, "w": 768.0, "h": 64.0, "line_num": 3, "text": "for p in range (i) Lon (namp) :"}, {"x": 380.0, "y": 345.0, "w": 732.0, "h": 63.0, "line_num": 4, "text": "if (name [i] + numa [P] == fanget):"}, {"x": 489.0, "y": 427.0, "w": 278.0, "h": 66.0, "line_num": 5, "text": "netann [i, P]"}], "ir_algo_name": "none", "ir_algo_output_code": "def two Sam (nums, target):\nfor i in range (len (namA) :\nfor p in range (i) Lon (namp) :\nif (name [i] + numa [P] == fanget):\nnetann [i, P]", "ir_algo_output_edit_distance": 71, "prompting_method": "simple-test3", "lm_post_processed_code": "def twoSum(nums, target):\n    for i in range(len(nums)):\n        for p in range(i, len(nums)):\n            if (nums[i] + nums[p] == target):\n                return [i, p]\n", "lm_post_processed_edit_distance": 2}, {"image_id": 50, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 51.0, "y": 35.0, "w": 728.0, "h": 80.0, "line_num": 1, "text": "def two Sam (nums, target):"}, {"x": 174.0, "y": 137.0, "w": 776.0, "h": 68.0, "line_num": 2, "text": "for i in range (len (namA) :"}, {"x": 298.0, "y": 242.0, "w": 768.0, "h": 64.0, "line_num": 3, "text": "for p in range (i) Lon (namp) :"}, {"x": 380.0, "y": 345.0, "w": 732.0, "h": 63.0, "line_num": 4, "text": "if (name [i] + numa [P] == fanget):"}, {"x": 489.0, "y": 427.0, "w": 278.0, "h": 66.0, "line_num": 5, "text": "netann [i, P]"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 102.30000000000001, "ir_algo_output_code": "def two Sam (nums, target):\n    for i in range (len (namA) :\n        for p in range (i) Lon (namp) :\n        if (name [i] + numa [P] == fanget):\n            netann [i, P]\n", "ir_algo_output_indented_lines": [{"x": 51.0, "y": 35.0, "w": 728.0, "h": 80.0, "line_num": 1, "text": "def two Sam (nums, target):", "cluster_label": 3, "indentation": 0}, {"x": 174.0, "y": 137.0, "w": 776.0, "h": 68.0, "line_num": 2, "text": "for i in range (len (namA) :", "cluster_label": 2, "indentation": 1}, {"x": 298.0, "y": 242.0, "w": 768.0, "h": 64.0, "line_num": 3, "text": "for p in range (i) Lon (namp) :", "cluster_label": 0, "indentation": 2}, {"x": 380.0, "y": 345.0, "w": 732.0, "h": 63.0, "line_num": 4, "text": "if (name [i] + numa [P] == fanget):", "cluster_label": 0, "indentation": 2}, {"x": 489.0, "y": 427.0, "w": 278.0, "h": 66.0, "line_num": 5, "text": "netann [i, P]", "cluster_label": 1, "indentation": 3}], "ir_algo_output_edit_distance": 38, "prompting_method": "none", "lm_post_processed_code": "def two Sam (nums, target):\n    for i in range (len (namA) :\n        for p in range (i) Lon (namp) :\n        if (name [i] + numa [P] == fanget):\n            netann [i, P]\n", "lm_post_processed_edit_distance": 38}, {"image_id": 50, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 51.0, "y": 35.0, "w": 728.0, "h": 80.0, "line_num": 1, "text": "def two Sam (nums, target):"}, {"x": 174.0, "y": 137.0, "w": 776.0, "h": 68.0, "line_num": 2, "text": "for i in range (len (namA) :"}, {"x": 298.0, "y": 242.0, "w": 768.0, "h": 64.0, "line_num": 3, "text": "for p in range (i) Lon (namp) :"}, {"x": 380.0, "y": 345.0, "w": 732.0, "h": 63.0, "line_num": 4, "text": "if (name [i] + numa [P] == fanget):"}, {"x": 489.0, "y": 427.0, "w": 278.0, "h": 66.0, "line_num": 5, "text": "netann [i, P]"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 102.30000000000001, "ir_algo_output_code": "def two Sam (nums, target):\n    for i in range (len (namA) :\n        for p in range (i) Lon (namp) :\n        if (name [i] + numa [P] == fanget):\n            netann [i, P]\n", "ir_algo_output_indented_lines": [{"x": 51.0, "y": 35.0, "w": 728.0, "h": 80.0, "line_num": 1, "text": "def two Sam (nums, target):", "cluster_label": 3, "indentation": 0}, {"x": 174.0, "y": 137.0, "w": 776.0, "h": 68.0, "line_num": 2, "text": "for i in range (len (namA) :", "cluster_label": 2, "indentation": 1}, {"x": 298.0, "y": 242.0, "w": 768.0, "h": 64.0, "line_num": 3, "text": "for p in range (i) Lon (namp) :", "cluster_label": 0, "indentation": 2}, {"x": 380.0, "y": 345.0, "w": 732.0, "h": 63.0, "line_num": 4, "text": "if (name [i] + numa [P] == fanget):", "cluster_label": 0, "indentation": 2}, {"x": 489.0, "y": 427.0, "w": 278.0, "h": 66.0, "line_num": 5, "text": "netann [i, P]", "cluster_label": 1, "indentation": 3}], "ir_algo_output_edit_distance": 38, "prompting_method": "cot-test1", "lm_post_processed_code": "def twoSum(nums, target):\nfor i in range(len(nums)):\nfor p in range(i, len(nums)):\nif (nums[i] + nums[p] == target):\nreturn [i, p]\n", "lm_post_processed_edit_distance": 42}, {"image_id": 50, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 51.0, "y": 35.0, "w": 728.0, "h": 80.0, "line_num": 1, "text": "def two Sam (nums, target):"}, {"x": 174.0, "y": 137.0, "w": 776.0, "h": 68.0, "line_num": 2, "text": "for i in range (len (namA) :"}, {"x": 298.0, "y": 242.0, "w": 768.0, "h": 64.0, "line_num": 3, "text": "for p in range (i) Lon (namp) :"}, {"x": 380.0, "y": 345.0, "w": 732.0, "h": 63.0, "line_num": 4, "text": "if (name [i] + numa [P] == fanget):"}, {"x": 489.0, "y": 427.0, "w": 278.0, "h": 66.0, "line_num": 5, "text": "netann [i, P]"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 102.30000000000001, "ir_algo_output_code": "def two Sam (nums, target):\n    for i in range (len (namA) :\n        for p in range (i) Lon (namp) :\n        if (name [i] + numa [P] == fanget):\n            netann [i, P]\n", "ir_algo_output_indented_lines": [{"x": 51.0, "y": 35.0, "w": 728.0, "h": 80.0, "line_num": 1, "text": "def two Sam (nums, target):", "cluster_label": 3, "indentation": 0}, {"x": 174.0, "y": 137.0, "w": 776.0, "h": 68.0, "line_num": 2, "text": "for i in range (len (namA) :", "cluster_label": 2, "indentation": 1}, {"x": 298.0, "y": 242.0, "w": 768.0, "h": 64.0, "line_num": 3, "text": "for p in range (i) Lon (namp) :", "cluster_label": 0, "indentation": 2}, {"x": 380.0, "y": 345.0, "w": 732.0, "h": 63.0, "line_num": 4, "text": "if (name [i] + numa [P] == fanget):", "cluster_label": 0, "indentation": 2}, {"x": 489.0, "y": 427.0, "w": 278.0, "h": 66.0, "line_num": 5, "text": "netann [i, P]", "cluster_label": 1, "indentation": 3}], "ir_algo_output_edit_distance": 38, "prompting_method": "cot-test5", "lm_post_processed_code": "def twoSum(nums, target):\n    for i in range(len(nums)):\n        for p in range(i, len(nums)):\n            if (nums[i] + nums[p] == target):\n                return [i, p]\n", "lm_post_processed_edit_distance": 2}, {"image_id": 50, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 51.0, "y": 35.0, "w": 728.0, "h": 80.0, "line_num": 1, "text": "def two Sam (nums, target):"}, {"x": 174.0, "y": 137.0, "w": 776.0, "h": 68.0, "line_num": 2, "text": "for i in range (len (namA) :"}, {"x": 298.0, "y": 242.0, "w": 768.0, "h": 64.0, "line_num": 3, "text": "for p in range (i) Lon (namp) :"}, {"x": 380.0, "y": 345.0, "w": 732.0, "h": 63.0, "line_num": 4, "text": "if (name [i] + numa [P] == fanget):"}, {"x": 489.0, "y": 427.0, "w": 278.0, "h": 66.0, "line_num": 5, "text": "netann [i, P]"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 102.30000000000001, "ir_algo_output_code": "def two Sam (nums, target):\n    for i in range (len (namA) :\n        for p in range (i) Lon (namp) :\n        if (name [i] + numa [P] == fanget):\n            netann [i, P]\n", "ir_algo_output_indented_lines": [{"x": 51.0, "y": 35.0, "w": 728.0, "h": 80.0, "line_num": 1, "text": "def two Sam (nums, target):", "cluster_label": 3, "indentation": 0}, {"x": 174.0, "y": 137.0, "w": 776.0, "h": 68.0, "line_num": 2, "text": "for i in range (len (namA) :", "cluster_label": 2, "indentation": 1}, {"x": 298.0, "y": 242.0, "w": 768.0, "h": 64.0, "line_num": 3, "text": "for p in range (i) Lon (namp) :", "cluster_label": 0, "indentation": 2}, {"x": 380.0, "y": 345.0, "w": 732.0, "h": 63.0, "line_num": 4, "text": "if (name [i] + numa [P] == fanget):", "cluster_label": 0, "indentation": 2}, {"x": 489.0, "y": 427.0, "w": 278.0, "h": 66.0, "line_num": 5, "text": "netann [i, P]", "cluster_label": 1, "indentation": 3}], "ir_algo_output_edit_distance": 38, "prompting_method": "simple-test2", "lm_post_processed_code": "def twoSum(nums, target):\n    for i in range(len(nums)):\n        for p in range(i, len(nums)):\n            if (nums[i] + nums[p] == target):\n                return [i, p]\n", "lm_post_processed_edit_distance": 2}, {"image_id": 50, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 51.0, "y": 35.0, "w": 728.0, "h": 80.0, "line_num": 1, "text": "def two Sam (nums, target):"}, {"x": 174.0, "y": 137.0, "w": 776.0, "h": 68.0, "line_num": 2, "text": "for i in range (len (namA) :"}, {"x": 298.0, "y": 242.0, "w": 768.0, "h": 64.0, "line_num": 3, "text": "for p in range (i) Lon (namp) :"}, {"x": 380.0, "y": 345.0, "w": 732.0, "h": 63.0, "line_num": 4, "text": "if (name [i] + numa [P] == fanget):"}, {"x": 489.0, "y": 427.0, "w": 278.0, "h": 66.0, "line_num": 5, "text": "netann [i, P]"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 102.30000000000001, "ir_algo_output_code": "def two Sam (nums, target):\n    for i in range (len (namA) :\n        for p in range (i) Lon (namp) :\n        if (name [i] + numa [P] == fanget):\n            netann [i, P]\n", "ir_algo_output_indented_lines": [{"x": 51.0, "y": 35.0, "w": 728.0, "h": 80.0, "line_num": 1, "text": "def two Sam (nums, target):", "cluster_label": 3, "indentation": 0}, {"x": 174.0, "y": 137.0, "w": 776.0, "h": 68.0, "line_num": 2, "text": "for i in range (len (namA) :", "cluster_label": 2, "indentation": 1}, {"x": 298.0, "y": 242.0, "w": 768.0, "h": 64.0, "line_num": 3, "text": "for p in range (i) Lon (namp) :", "cluster_label": 0, "indentation": 2}, {"x": 380.0, "y": 345.0, "w": 732.0, "h": 63.0, "line_num": 4, "text": "if (name [i] + numa [P] == fanget):", "cluster_label": 0, "indentation": 2}, {"x": 489.0, "y": 427.0, "w": 278.0, "h": 66.0, "line_num": 5, "text": "netann [i, P]", "cluster_label": 1, "indentation": 3}], "ir_algo_output_edit_distance": 38, "prompting_method": "simple-test3", "lm_post_processed_code": "def twoSum(nums, target):\n    for i in range(len(nums)):\n        for p in range(i, len(nums)):\n            if (nums[i] + nums[p] == target):\n                return [i, p]\n", "lm_post_processed_edit_distance": 2}, {"image_id": 50, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 51.0, "y": 35.0, "w": 728.0, "h": 80.0, "line_num": 1, "text": "def two Sam (nums, target):"}, {"x": 174.0, "y": 137.0, "w": 776.0, "h": 68.0, "line_num": 2, "text": "for i in range (len (namA) :"}, {"x": 298.0, "y": 242.0, "w": 768.0, "h": 64.0, "line_num": 3, "text": "for p in range (i) Lon (namp) :"}, {"x": 380.0, "y": 345.0, "w": 732.0, "h": 63.0, "line_num": 4, "text": "if (name [i] + numa [P] == fanget):"}, {"x": 489.0, "y": 427.0, "w": 278.0, "h": 66.0, "line_num": 5, "text": "netann [i, P]"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def two Sam (nums, target):\n    for i in range (len (namA) :\n        for p in range (i) Lon (namp) :\n            if (name [i] + numa [P] == fanget):\n                netann [i, P]\n", "ir_algo_output_indented_lines": [{"x": 51.0, "y": 35.0, "w": 728.0, "h": 80.0, "line_num": 1, "text": "def two Sam (nums, target):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 174.0, "y": 137.0, "w": 776.0, "h": 68.0, "line_num": 2, "text": "for i in range (len (namA) :", "delta": 123.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 298.0, "y": 242.0, "w": 768.0, "h": 64.0, "line_num": 3, "text": "for p in range (i) Lon (namp) :", "delta": 124.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 380.0, "y": 345.0, "w": 732.0, "h": 63.0, "line_num": 4, "text": "if (name [i] + numa [P] == fanget):", "delta": 82.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 489.0, "y": 427.0, "w": 278.0, "h": 66.0, "line_num": 5, "text": "netann [i, P]", "delta": 109.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 4}], "ir_algo_output_edit_distance": 30, "prompting_method": "none", "lm_post_processed_code": "def two Sam (nums, target):\n    for i in range (len (namA) :\n        for p in range (i) Lon (namp) :\n            if (name [i] + numa [P] == fanget):\n                netann [i, P]\n", "lm_post_processed_edit_distance": 30}, {"image_id": 50, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 51.0, "y": 35.0, "w": 728.0, "h": 80.0, "line_num": 1, "text": "def two Sam (nums, target):"}, {"x": 174.0, "y": 137.0, "w": 776.0, "h": 68.0, "line_num": 2, "text": "for i in range (len (namA) :"}, {"x": 298.0, "y": 242.0, "w": 768.0, "h": 64.0, "line_num": 3, "text": "for p in range (i) Lon (namp) :"}, {"x": 380.0, "y": 345.0, "w": 732.0, "h": 63.0, "line_num": 4, "text": "if (name [i] + numa [P] == fanget):"}, {"x": 489.0, "y": 427.0, "w": 278.0, "h": 66.0, "line_num": 5, "text": "netann [i, P]"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def two Sam (nums, target):\n    for i in range (len (namA) :\n        for p in range (i) Lon (namp) :\n            if (name [i] + numa [P] == fanget):\n                netann [i, P]\n", "ir_algo_output_indented_lines": [{"x": 51.0, "y": 35.0, "w": 728.0, "h": 80.0, "line_num": 1, "text": "def two Sam (nums, target):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 174.0, "y": 137.0, "w": 776.0, "h": 68.0, "line_num": 2, "text": "for i in range (len (namA) :", "delta": 123.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 298.0, "y": 242.0, "w": 768.0, "h": 64.0, "line_num": 3, "text": "for p in range (i) Lon (namp) :", "delta": 124.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 380.0, "y": 345.0, "w": 732.0, "h": 63.0, "line_num": 4, "text": "if (name [i] + numa [P] == fanget):", "delta": 82.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 489.0, "y": 427.0, "w": 278.0, "h": 66.0, "line_num": 5, "text": "netann [i, P]", "delta": 109.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 4}], "ir_algo_output_edit_distance": 30, "prompting_method": "cot-test1", "lm_post_processed_code": "def twoSum(nums, target):\nfor i in range(len(nums)):\nfor p in range(i, len(nums)):\nif (nums[i] + nums[p] == target):\nreturn [i, p]\n", "lm_post_processed_edit_distance": 42}, {"image_id": 50, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 51.0, "y": 35.0, "w": 728.0, "h": 80.0, "line_num": 1, "text": "def two Sam (nums, target):"}, {"x": 174.0, "y": 137.0, "w": 776.0, "h": 68.0, "line_num": 2, "text": "for i in range (len (namA) :"}, {"x": 298.0, "y": 242.0, "w": 768.0, "h": 64.0, "line_num": 3, "text": "for p in range (i) Lon (namp) :"}, {"x": 380.0, "y": 345.0, "w": 732.0, "h": 63.0, "line_num": 4, "text": "if (name [i] + numa [P] == fanget):"}, {"x": 489.0, "y": 427.0, "w": 278.0, "h": 66.0, "line_num": 5, "text": "netann [i, P]"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def two Sam (nums, target):\n    for i in range (len (namA) :\n        for p in range (i) Lon (namp) :\n            if (name [i] + numa [P] == fanget):\n                netann [i, P]\n", "ir_algo_output_indented_lines": [{"x": 51.0, "y": 35.0, "w": 728.0, "h": 80.0, "line_num": 1, "text": "def two Sam (nums, target):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 174.0, "y": 137.0, "w": 776.0, "h": 68.0, "line_num": 2, "text": "for i in range (len (namA) :", "delta": 123.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 298.0, "y": 242.0, "w": 768.0, "h": 64.0, "line_num": 3, "text": "for p in range (i) Lon (namp) :", "delta": 124.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 380.0, "y": 345.0, "w": 732.0, "h": 63.0, "line_num": 4, "text": "if (name [i] + numa [P] == fanget):", "delta": 82.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 489.0, "y": 427.0, "w": 278.0, "h": 66.0, "line_num": 5, "text": "netann [i, P]", "delta": 109.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 4}], "ir_algo_output_edit_distance": 30, "prompting_method": "cot-test5", "lm_post_processed_code": "def twoSum(nums, target):\n    for i in range(len(nums)):\n        for p in range(i, len(nums)):\n            if (nums[i] + nums[p] == target):\n                return [i, p]\n", "lm_post_processed_edit_distance": 2}, {"image_id": 50, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 51.0, "y": 35.0, "w": 728.0, "h": 80.0, "line_num": 1, "text": "def two Sam (nums, target):"}, {"x": 174.0, "y": 137.0, "w": 776.0, "h": 68.0, "line_num": 2, "text": "for i in range (len (namA) :"}, {"x": 298.0, "y": 242.0, "w": 768.0, "h": 64.0, "line_num": 3, "text": "for p in range (i) Lon (namp) :"}, {"x": 380.0, "y": 345.0, "w": 732.0, "h": 63.0, "line_num": 4, "text": "if (name [i] + numa [P] == fanget):"}, {"x": 489.0, "y": 427.0, "w": 278.0, "h": 66.0, "line_num": 5, "text": "netann [i, P]"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def two Sam (nums, target):\n    for i in range (len (namA) :\n        for p in range (i) Lon (namp) :\n            if (name [i] + numa [P] == fanget):\n                netann [i, P]\n", "ir_algo_output_indented_lines": [{"x": 51.0, "y": 35.0, "w": 728.0, "h": 80.0, "line_num": 1, "text": "def two Sam (nums, target):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 174.0, "y": 137.0, "w": 776.0, "h": 68.0, "line_num": 2, "text": "for i in range (len (namA) :", "delta": 123.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 298.0, "y": 242.0, "w": 768.0, "h": 64.0, "line_num": 3, "text": "for p in range (i) Lon (namp) :", "delta": 124.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 380.0, "y": 345.0, "w": 732.0, "h": 63.0, "line_num": 4, "text": "if (name [i] + numa [P] == fanget):", "delta": 82.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 489.0, "y": 427.0, "w": 278.0, "h": 66.0, "line_num": 5, "text": "netann [i, P]", "delta": 109.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 4}], "ir_algo_output_edit_distance": 30, "prompting_method": "simple-test2", "lm_post_processed_code": "def twoSum(nums, target):\n    for i in range(len(nums)):\n        for p in range(i, len(nums)):\n            if (nums[i] + nums[p] == target):\n                return [i, p]\n", "lm_post_processed_edit_distance": 2}, {"image_id": 50, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 51.0, "y": 35.0, "w": 728.0, "h": 80.0, "line_num": 1, "text": "def two Sam (nums, target):"}, {"x": 174.0, "y": 137.0, "w": 776.0, "h": 68.0, "line_num": 2, "text": "for i in range (len (namA) :"}, {"x": 298.0, "y": 242.0, "w": 768.0, "h": 64.0, "line_num": 3, "text": "for p in range (i) Lon (namp) :"}, {"x": 380.0, "y": 345.0, "w": 732.0, "h": 63.0, "line_num": 4, "text": "if (name [i] + numa [P] == fanget):"}, {"x": 489.0, "y": 427.0, "w": 278.0, "h": 66.0, "line_num": 5, "text": "netann [i, P]"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "def two Sam (nums, target):\n    for i in range (len (namA) :\n        for p in range (i) Lon (namp) :\n            if (name [i] + numa [P] == fanget):\n                netann [i, P]\n", "ir_algo_output_indented_lines": [{"x": 51.0, "y": 35.0, "w": 728.0, "h": 80.0, "line_num": 1, "text": "def two Sam (nums, target):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 174.0, "y": 137.0, "w": 776.0, "h": 68.0, "line_num": 2, "text": "for i in range (len (namA) :", "delta": 123.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 298.0, "y": 242.0, "w": 768.0, "h": 64.0, "line_num": 3, "text": "for p in range (i) Lon (namp) :", "delta": 124.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 380.0, "y": 345.0, "w": 732.0, "h": 63.0, "line_num": 4, "text": "if (name [i] + numa [P] == fanget):", "delta": 82.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 3}, {"x": 489.0, "y": 427.0, "w": 278.0, "h": 66.0, "line_num": 5, "text": "netann [i, P]", "delta": 109.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 4}], "ir_algo_output_edit_distance": 30, "prompting_method": "simple-test3", "lm_post_processed_code": "def twoSum(nums, target):\n    for i in range(len(nums)):\n        for p in range(i, len(nums)):\n            if (nums[i] + nums[p] == target):\n                return [i, p]\n", "lm_post_processed_edit_distance": 2}, {"image_id": 52, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 118.0, "w": 781.0, "h": 75.0, "line_num": 1, "text": "det even-on-odd (number):"}, {"x": 293.0, "y": 221.0, "w": 522.0, "h": 68.0, "line_num": 2, "text": "if number /2=0:"}, {"x": 401.0, "y": 326.0, "w": 345.0, "h": 60.0, "line_num": 3, "text": "Detann \"Even\""}, {"x": 297.0, "y": 427.0, "w": 527.0, "h": 63.0, "line_num": 4, "text": "if number 12 != 0:"}, {"x": 418.0, "y": 521.0, "w": 393.0, "h": 58.0, "line_num": 5, "text": "return \"Odd\""}], "ir_algo_name": "none", "ir_algo_output_code": "det even-on-odd (number):\nif number /2=0:\nDetann \"Even\"\nif number 12 != 0:\nreturn \"Odd\"", "ir_algo_output_edit_distance": 39, "prompting_method": "none", "lm_post_processed_code": "det even-on-odd (number):\nif number /2=0:\nDetann \"Even\"\nif number 12 != 0:\nreturn \"Odd\"", "lm_post_processed_edit_distance": 39}, {"image_id": 52, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 118.0, "w": 781.0, "h": 75.0, "line_num": 1, "text": "det even-on-odd (number):"}, {"x": 293.0, "y": 221.0, "w": 522.0, "h": 68.0, "line_num": 2, "text": "if number /2=0:"}, {"x": 401.0, "y": 326.0, "w": 345.0, "h": 60.0, "line_num": 3, "text": "Detann \"Even\""}, {"x": 297.0, "y": 427.0, "w": 527.0, "h": 63.0, "line_num": 4, "text": "if number 12 != 0:"}, {"x": 418.0, "y": 521.0, "w": 393.0, "h": 58.0, "line_num": 5, "text": "return \"Odd\""}], "ir_algo_name": "none", "ir_algo_output_code": "det even-on-odd (number):\nif number /2=0:\nDetann \"Even\"\nif number 12 != 0:\nreturn \"Odd\"", "ir_algo_output_edit_distance": 39, "prompting_method": "cot-test1", "lm_post_processed_code": "def even_or_odd(number):\nif number /2=0:\nreturn \"Even\"\nif number 12 != 0:\nreturn \"Odd\"\n", "lm_post_processed_edit_distance": 30}, {"image_id": 52, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 118.0, "w": 781.0, "h": 75.0, "line_num": 1, "text": "det even-on-odd (number):"}, {"x": 293.0, "y": 221.0, "w": 522.0, "h": 68.0, "line_num": 2, "text": "if number /2=0:"}, {"x": 401.0, "y": 326.0, "w": 345.0, "h": 60.0, "line_num": 3, "text": "Detann \"Even\""}, {"x": 297.0, "y": 427.0, "w": 527.0, "h": 63.0, "line_num": 4, "text": "if number 12 != 0:"}, {"x": 418.0, "y": 521.0, "w": 393.0, "h": 58.0, "line_num": 5, "text": "return \"Odd\""}], "ir_algo_name": "none", "ir_algo_output_code": "det even-on-odd (number):\nif number /2=0:\nDetann \"Even\"\nif number 12 != 0:\nreturn \"Odd\"", "ir_algo_output_edit_distance": 39, "prompting_method": "cot-test5", "lm_post_processed_code": "def even_or_odd(number):\nif number /2=0:\nreturn \"Even\"\nif number 12 != 0:\nreturn \"Odd\"\n", "lm_post_processed_edit_distance": 30}, {"image_id": 52, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 118.0, "w": 781.0, "h": 75.0, "line_num": 1, "text": "det even-on-odd (number):"}, {"x": 293.0, "y": 221.0, "w": 522.0, "h": 68.0, "line_num": 2, "text": "if number /2=0:"}, {"x": 401.0, "y": 326.0, "w": 345.0, "h": 60.0, "line_num": 3, "text": "Detann \"Even\""}, {"x": 297.0, "y": 427.0, "w": 527.0, "h": 63.0, "line_num": 4, "text": "if number 12 != 0:"}, {"x": 418.0, "y": 521.0, "w": 393.0, "h": 58.0, "line_num": 5, "text": "return \"Odd\""}], "ir_algo_name": "none", "ir_algo_output_code": "det even-on-odd (number):\nif number /2=0:\nDetann \"Even\"\nif number 12 != 0:\nreturn \"Odd\"", "ir_algo_output_edit_distance": 39, "prompting_method": "simple-test2", "lm_post_processed_code": "def even_or_odd(number):\n    if number / 2 == 0:\n        return \"Even\"\n    if number % 2 != 0:\n        return \"Odd\"\n", "lm_post_processed_edit_distance": 1}, {"image_id": 52, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 118.0, "w": 781.0, "h": 75.0, "line_num": 1, "text": "det even-on-odd (number):"}, {"x": 293.0, "y": 221.0, "w": 522.0, "h": 68.0, "line_num": 2, "text": "if number /2=0:"}, {"x": 401.0, "y": 326.0, "w": 345.0, "h": 60.0, "line_num": 3, "text": "Detann \"Even\""}, {"x": 297.0, "y": 427.0, "w": 527.0, "h": 63.0, "line_num": 4, "text": "if number 12 != 0:"}, {"x": 418.0, "y": 521.0, "w": 393.0, "h": 58.0, "line_num": 5, "text": "return \"Odd\""}], "ir_algo_name": "none", "ir_algo_output_code": "det even-on-odd (number):\nif number /2=0:\nDetann \"Even\"\nif number 12 != 0:\nreturn \"Odd\"", "ir_algo_output_edit_distance": 39, "prompting_method": "simple-test3", "lm_post_processed_code": "def even_or_odd(number):\n    if number / 2 == 0:\n        return \"Even\"\n    if number % 2 != 0:\n        return \"Odd\"\n", "lm_post_processed_edit_distance": 1}, {"image_id": 52, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 118.0, "w": 781.0, "h": 75.0, "line_num": 1, "text": "det even-on-odd (number):"}, {"x": 293.0, "y": 221.0, "w": 522.0, "h": 68.0, "line_num": 2, "text": "if number /2=0:"}, {"x": 401.0, "y": 326.0, "w": 345.0, "h": 60.0, "line_num": 3, "text": "Detann \"Even\""}, {"x": 297.0, "y": 427.0, "w": 527.0, "h": 63.0, "line_num": 4, "text": "if number 12 != 0:"}, {"x": 418.0, "y": 521.0, "w": 393.0, "h": 58.0, "line_num": 5, "text": "return \"Odd\""}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 97.19999999999999, "ir_algo_output_code": "det even-on-odd (number):\n    if number /2=0:\n        Detann \"Even\"\n    if number 12 != 0:\n        return \"Odd\"\n", "ir_algo_output_indented_lines": [{"x": 155.0, "y": 118.0, "w": 781.0, "h": 75.0, "line_num": 1, "text": "det even-on-odd (number):", "cluster_label": 2, "indentation": 0}, {"x": 293.0, "y": 221.0, "w": 522.0, "h": 68.0, "line_num": 2, "text": "if number /2=0:", "cluster_label": 1, "indentation": 1}, {"x": 401.0, "y": 326.0, "w": 345.0, "h": 60.0, "line_num": 3, "text": "Detann \"Even\"", "cluster_label": 0, "indentation": 2}, {"x": 297.0, "y": 427.0, "w": 527.0, "h": 63.0, "line_num": 4, "text": "if number 12 != 0:", "cluster_label": 1, "indentation": 1}, {"x": 418.0, "y": 521.0, "w": 393.0, "h": 58.0, "line_num": 5, "text": "return \"Odd\"", "cluster_label": 0, "indentation": 2}], "ir_algo_output_edit_distance": 14, "prompting_method": "none", "lm_post_processed_code": "det even-on-odd (number):\n    if number /2=0:\n        Detann \"Even\"\n    if number 12 != 0:\n        return \"Odd\"\n", "lm_post_processed_edit_distance": 14}, {"image_id": 52, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 118.0, "w": 781.0, "h": 75.0, "line_num": 1, "text": "det even-on-odd (number):"}, {"x": 293.0, "y": 221.0, "w": 522.0, "h": 68.0, "line_num": 2, "text": "if number /2=0:"}, {"x": 401.0, "y": 326.0, "w": 345.0, "h": 60.0, "line_num": 3, "text": "Detann \"Even\""}, {"x": 297.0, "y": 427.0, "w": 527.0, "h": 63.0, "line_num": 4, "text": "if number 12 != 0:"}, {"x": 418.0, "y": 521.0, "w": 393.0, "h": 58.0, "line_num": 5, "text": "return \"Odd\""}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 97.19999999999999, "ir_algo_output_code": "det even-on-odd (number):\n    if number /2=0:\n        Detann \"Even\"\n    if number 12 != 0:\n        return \"Odd\"\n", "ir_algo_output_indented_lines": [{"x": 155.0, "y": 118.0, "w": 781.0, "h": 75.0, "line_num": 1, "text": "det even-on-odd (number):", "cluster_label": 2, "indentation": 0}, {"x": 293.0, "y": 221.0, "w": 522.0, "h": 68.0, "line_num": 2, "text": "if number /2=0:", "cluster_label": 1, "indentation": 1}, {"x": 401.0, "y": 326.0, "w": 345.0, "h": 60.0, "line_num": 3, "text": "Detann \"Even\"", "cluster_label": 0, "indentation": 2}, {"x": 297.0, "y": 427.0, "w": 527.0, "h": 63.0, "line_num": 4, "text": "if number 12 != 0:", "cluster_label": 1, "indentation": 1}, {"x": 418.0, "y": 521.0, "w": 393.0, "h": 58.0, "line_num": 5, "text": "return \"Odd\"", "cluster_label": 0, "indentation": 2}], "ir_algo_output_edit_distance": 14, "prompting_method": "cot-test1", "lm_post_processed_code": "def even_or_odd(number):\nif number /2=0:\n    return \"Even\"\nif number 12 != 0:\n    return \"Odd\"\n", "lm_post_processed_edit_distance": 22}, {"image_id": 52, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 118.0, "w": 781.0, "h": 75.0, "line_num": 1, "text": "det even-on-odd (number):"}, {"x": 293.0, "y": 221.0, "w": 522.0, "h": 68.0, "line_num": 2, "text": "if number /2=0:"}, {"x": 401.0, "y": 326.0, "w": 345.0, "h": 60.0, "line_num": 3, "text": "Detann \"Even\""}, {"x": 297.0, "y": 427.0, "w": 527.0, "h": 63.0, "line_num": 4, "text": "if number 12 != 0:"}, {"x": 418.0, "y": 521.0, "w": 393.0, "h": 58.0, "line_num": 5, "text": "return \"Odd\""}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 97.19999999999999, "ir_algo_output_code": "det even-on-odd (number):\n    if number /2=0:\n        Detann \"Even\"\n    if number 12 != 0:\n        return \"Odd\"\n", "ir_algo_output_indented_lines": [{"x": 155.0, "y": 118.0, "w": 781.0, "h": 75.0, "line_num": 1, "text": "det even-on-odd (number):", "cluster_label": 2, "indentation": 0}, {"x": 293.0, "y": 221.0, "w": 522.0, "h": 68.0, "line_num": 2, "text": "if number /2=0:", "cluster_label": 1, "indentation": 1}, {"x": 401.0, "y": 326.0, "w": 345.0, "h": 60.0, "line_num": 3, "text": "Detann \"Even\"", "cluster_label": 0, "indentation": 2}, {"x": 297.0, "y": 427.0, "w": 527.0, "h": 63.0, "line_num": 4, "text": "if number 12 != 0:", "cluster_label": 1, "indentation": 1}, {"x": 418.0, "y": 521.0, "w": 393.0, "h": 58.0, "line_num": 5, "text": "return \"Odd\"", "cluster_label": 0, "indentation": 2}], "ir_algo_output_edit_distance": 14, "prompting_method": "cot-test5", "lm_post_processed_code": "def even_or_odd(number):\n    if number /2==0:\n        return \"Even\"\n    if number %2 != 0:\n        return \"Odd\"\n", "lm_post_processed_edit_distance": 5}, {"image_id": 52, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 118.0, "w": 781.0, "h": 75.0, "line_num": 1, "text": "det even-on-odd (number):"}, {"x": 293.0, "y": 221.0, "w": 522.0, "h": 68.0, "line_num": 2, "text": "if number /2=0:"}, {"x": 401.0, "y": 326.0, "w": 345.0, "h": 60.0, "line_num": 3, "text": "Detann \"Even\""}, {"x": 297.0, "y": 427.0, "w": 527.0, "h": 63.0, "line_num": 4, "text": "if number 12 != 0:"}, {"x": 418.0, "y": 521.0, "w": 393.0, "h": 58.0, "line_num": 5, "text": "return \"Odd\""}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 97.19999999999999, "ir_algo_output_code": "det even-on-odd (number):\n    if number /2=0:\n        Detann \"Even\"\n    if number 12 != 0:\n        return \"Odd\"\n", "ir_algo_output_indented_lines": [{"x": 155.0, "y": 118.0, "w": 781.0, "h": 75.0, "line_num": 1, "text": "det even-on-odd (number):", "cluster_label": 2, "indentation": 0}, {"x": 293.0, "y": 221.0, "w": 522.0, "h": 68.0, "line_num": 2, "text": "if number /2=0:", "cluster_label": 1, "indentation": 1}, {"x": 401.0, "y": 326.0, "w": 345.0, "h": 60.0, "line_num": 3, "text": "Detann \"Even\"", "cluster_label": 0, "indentation": 2}, {"x": 297.0, "y": 427.0, "w": 527.0, "h": 63.0, "line_num": 4, "text": "if number 12 != 0:", "cluster_label": 1, "indentation": 1}, {"x": 418.0, "y": 521.0, "w": 393.0, "h": 58.0, "line_num": 5, "text": "return \"Odd\"", "cluster_label": 0, "indentation": 2}], "ir_algo_output_edit_distance": 14, "prompting_method": "simple-test2", "lm_post_processed_code": "def even_or_odd(number):\n    if number / 2 == 0:\n        return \"Even\"\n    if number % 2 != 0:\n        return \"Odd\"\n", "lm_post_processed_edit_distance": 1}, {"image_id": 52, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 118.0, "w": 781.0, "h": 75.0, "line_num": 1, "text": "det even-on-odd (number):"}, {"x": 293.0, "y": 221.0, "w": 522.0, "h": 68.0, "line_num": 2, "text": "if number /2=0:"}, {"x": 401.0, "y": 326.0, "w": 345.0, "h": 60.0, "line_num": 3, "text": "Detann \"Even\""}, {"x": 297.0, "y": 427.0, "w": 527.0, "h": 63.0, "line_num": 4, "text": "if number 12 != 0:"}, {"x": 418.0, "y": 521.0, "w": 393.0, "h": 58.0, "line_num": 5, "text": "return \"Odd\""}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 97.19999999999999, "ir_algo_output_code": "det even-on-odd (number):\n    if number /2=0:\n        Detann \"Even\"\n    if number 12 != 0:\n        return \"Odd\"\n", "ir_algo_output_indented_lines": [{"x": 155.0, "y": 118.0, "w": 781.0, "h": 75.0, "line_num": 1, "text": "det even-on-odd (number):", "cluster_label": 2, "indentation": 0}, {"x": 293.0, "y": 221.0, "w": 522.0, "h": 68.0, "line_num": 2, "text": "if number /2=0:", "cluster_label": 1, "indentation": 1}, {"x": 401.0, "y": 326.0, "w": 345.0, "h": 60.0, "line_num": 3, "text": "Detann \"Even\"", "cluster_label": 0, "indentation": 2}, {"x": 297.0, "y": 427.0, "w": 527.0, "h": 63.0, "line_num": 4, "text": "if number 12 != 0:", "cluster_label": 1, "indentation": 1}, {"x": 418.0, "y": 521.0, "w": 393.0, "h": 58.0, "line_num": 5, "text": "return \"Odd\"", "cluster_label": 0, "indentation": 2}], "ir_algo_output_edit_distance": 14, "prompting_method": "simple-test3", "lm_post_processed_code": "def even_or_odd(number):\n    if number / 2 == 0:\n        return \"Even\"\n    if number % 2 != 0:\n        return \"Odd\"\n", "lm_post_processed_edit_distance": 1}, {"image_id": 52, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 118.0, "w": 781.0, "h": 75.0, "line_num": 1, "text": "det even-on-odd (number):"}, {"x": 293.0, "y": 221.0, "w": 522.0, "h": 68.0, "line_num": 2, "text": "if number /2=0:"}, {"x": 401.0, "y": 326.0, "w": 345.0, "h": 60.0, "line_num": 3, "text": "Detann \"Even\""}, {"x": 297.0, "y": 427.0, "w": 527.0, "h": 63.0, "line_num": 4, "text": "if number 12 != 0:"}, {"x": 418.0, "y": 521.0, "w": 393.0, "h": 58.0, "line_num": 5, "text": "return \"Odd\""}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "det even-on-odd (number):\n    if number /2=0:\n        Detann \"Even\"\n    if number 12 != 0:\n        return \"Odd\"\n", "ir_algo_output_indented_lines": [{"x": 155.0, "y": 118.0, "w": 781.0, "h": 75.0, "line_num": 1, "text": "det even-on-odd (number):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 293.0, "y": 221.0, "w": 522.0, "h": 68.0, "line_num": 2, "text": "if number /2=0:", "delta": 138.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 401.0, "y": 326.0, "w": 345.0, "h": 60.0, "line_num": 3, "text": "Detann \"Even\"", "delta": 108.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 297.0, "y": 427.0, "w": 527.0, "h": 63.0, "line_num": 4, "text": "if number 12 != 0:", "delta": -104.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 418.0, "y": 521.0, "w": 393.0, "h": 58.0, "line_num": 5, "text": "return \"Odd\"", "delta": 121.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}], "ir_algo_output_edit_distance": 14, "prompting_method": "none", "lm_post_processed_code": "det even-on-odd (number):\n    if number /2=0:\n        Detann \"Even\"\n    if number 12 != 0:\n        return \"Odd\"\n", "lm_post_processed_edit_distance": 14}, {"image_id": 52, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 118.0, "w": 781.0, "h": 75.0, "line_num": 1, "text": "det even-on-odd (number):"}, {"x": 293.0, "y": 221.0, "w": 522.0, "h": 68.0, "line_num": 2, "text": "if number /2=0:"}, {"x": 401.0, "y": 326.0, "w": 345.0, "h": 60.0, "line_num": 3, "text": "Detann \"Even\""}, {"x": 297.0, "y": 427.0, "w": 527.0, "h": 63.0, "line_num": 4, "text": "if number 12 != 0:"}, {"x": 418.0, "y": 521.0, "w": 393.0, "h": 58.0, "line_num": 5, "text": "return \"Odd\""}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "det even-on-odd (number):\n    if number /2=0:\n        Detann \"Even\"\n    if number 12 != 0:\n        return \"Odd\"\n", "ir_algo_output_indented_lines": [{"x": 155.0, "y": 118.0, "w": 781.0, "h": 75.0, "line_num": 1, "text": "det even-on-odd (number):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 293.0, "y": 221.0, "w": 522.0, "h": 68.0, "line_num": 2, "text": "if number /2=0:", "delta": 138.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 401.0, "y": 326.0, "w": 345.0, "h": 60.0, "line_num": 3, "text": "Detann \"Even\"", "delta": 108.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 297.0, "y": 427.0, "w": 527.0, "h": 63.0, "line_num": 4, "text": "if number 12 != 0:", "delta": -104.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 418.0, "y": 521.0, "w": 393.0, "h": 58.0, "line_num": 5, "text": "return \"Odd\"", "delta": 121.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}], "ir_algo_output_edit_distance": 14, "prompting_method": "cot-test1", "lm_post_processed_code": "def even_or_odd(number):\nif number /2=0:\n    return \"Even\"\nif number 12 != 0:\n    return \"Odd\"\n", "lm_post_processed_edit_distance": 22}, {"image_id": 52, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 118.0, "w": 781.0, "h": 75.0, "line_num": 1, "text": "det even-on-odd (number):"}, {"x": 293.0, "y": 221.0, "w": 522.0, "h": 68.0, "line_num": 2, "text": "if number /2=0:"}, {"x": 401.0, "y": 326.0, "w": 345.0, "h": 60.0, "line_num": 3, "text": "Detann \"Even\""}, {"x": 297.0, "y": 427.0, "w": 527.0, "h": 63.0, "line_num": 4, "text": "if number 12 != 0:"}, {"x": 418.0, "y": 521.0, "w": 393.0, "h": 58.0, "line_num": 5, "text": "return \"Odd\""}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "det even-on-odd (number):\n    if number /2=0:\n        Detann \"Even\"\n    if number 12 != 0:\n        return \"Odd\"\n", "ir_algo_output_indented_lines": [{"x": 155.0, "y": 118.0, "w": 781.0, "h": 75.0, "line_num": 1, "text": "det even-on-odd (number):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 293.0, "y": 221.0, "w": 522.0, "h": 68.0, "line_num": 2, "text": "if number /2=0:", "delta": 138.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 401.0, "y": 326.0, "w": 345.0, "h": 60.0, "line_num": 3, "text": "Detann \"Even\"", "delta": 108.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 297.0, "y": 427.0, "w": 527.0, "h": 63.0, "line_num": 4, "text": "if number 12 != 0:", "delta": -104.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 418.0, "y": 521.0, "w": 393.0, "h": 58.0, "line_num": 5, "text": "return \"Odd\"", "delta": 121.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}], "ir_algo_output_edit_distance": 14, "prompting_method": "cot-test5", "lm_post_processed_code": "def even_or_odd(number):\n    if number /2=0:\n        return \"Even\"\n    if number 12 != 0:\n        return \"Odd\"\n", "lm_post_processed_edit_distance": 6}, {"image_id": 52, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 118.0, "w": 781.0, "h": 75.0, "line_num": 1, "text": "det even-on-odd (number):"}, {"x": 293.0, "y": 221.0, "w": 522.0, "h": 68.0, "line_num": 2, "text": "if number /2=0:"}, {"x": 401.0, "y": 326.0, "w": 345.0, "h": 60.0, "line_num": 3, "text": "Detann \"Even\""}, {"x": 297.0, "y": 427.0, "w": 527.0, "h": 63.0, "line_num": 4, "text": "if number 12 != 0:"}, {"x": 418.0, "y": 521.0, "w": 393.0, "h": 58.0, "line_num": 5, "text": "return \"Odd\""}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "det even-on-odd (number):\n    if number /2=0:\n        Detann \"Even\"\n    if number 12 != 0:\n        return \"Odd\"\n", "ir_algo_output_indented_lines": [{"x": 155.0, "y": 118.0, "w": 781.0, "h": 75.0, "line_num": 1, "text": "det even-on-odd (number):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 293.0, "y": 221.0, "w": 522.0, "h": 68.0, "line_num": 2, "text": "if number /2=0:", "delta": 138.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 401.0, "y": 326.0, "w": 345.0, "h": 60.0, "line_num": 3, "text": "Detann \"Even\"", "delta": 108.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 297.0, "y": 427.0, "w": 527.0, "h": 63.0, "line_num": 4, "text": "if number 12 != 0:", "delta": -104.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 418.0, "y": 521.0, "w": 393.0, "h": 58.0, "line_num": 5, "text": "return \"Odd\"", "delta": 121.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}], "ir_algo_output_edit_distance": 14, "prompting_method": "simple-test2", "lm_post_processed_code": "def even_or_odd(number):\n    if number /2==0:\n        return \"Even\"\n    if number % 2 != 0:\n        return \"Odd\"\n", "lm_post_processed_edit_distance": 4}, {"image_id": 52, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 155.0, "y": 118.0, "w": 781.0, "h": 75.0, "line_num": 1, "text": "det even-on-odd (number):"}, {"x": 293.0, "y": 221.0, "w": 522.0, "h": 68.0, "line_num": 2, "text": "if number /2=0:"}, {"x": 401.0, "y": 326.0, "w": 345.0, "h": 60.0, "line_num": 3, "text": "Detann \"Even\""}, {"x": 297.0, "y": 427.0, "w": 527.0, "h": 63.0, "line_num": 4, "text": "if number 12 != 0:"}, {"x": 418.0, "y": 521.0, "w": 393.0, "h": 58.0, "line_num": 5, "text": "return \"Odd\""}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "det even-on-odd (number):\n    if number /2=0:\n        Detann \"Even\"\n    if number 12 != 0:\n        return \"Odd\"\n", "ir_algo_output_indented_lines": [{"x": 155.0, "y": 118.0, "w": 781.0, "h": 75.0, "line_num": 1, "text": "det even-on-odd (number):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 293.0, "y": 221.0, "w": 522.0, "h": 68.0, "line_num": 2, "text": "if number /2=0:", "delta": 138.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 401.0, "y": 326.0, "w": 345.0, "h": 60.0, "line_num": 3, "text": "Detann \"Even\"", "delta": 108.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 297.0, "y": 427.0, "w": 527.0, "h": 63.0, "line_num": 4, "text": "if number 12 != 0:", "delta": -104.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 418.0, "y": 521.0, "w": 393.0, "h": 58.0, "line_num": 5, "text": "return \"Odd\"", "delta": 121.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}], "ir_algo_output_edit_distance": 14, "prompting_method": "simple-test3", "lm_post_processed_code": "def even_or_odd(number):\n    if number / 2 == 0:\n        return \"Even\"\n    if number % 2 != 0:\n        return \"Odd\"\n", "lm_post_processed_edit_distance": 1}, {"image_id": 53, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 267.0, "y": 93.0, "w": 632.0, "h": 88.0, "line_num": 1, "text": "upper-lower-count (sto):"}, {"x": 282.0, "y": 235.0, "w": 399.0, "h": 62.0, "line_num": 2, "text": "Upper-case = 0"}, {"x": 283.0, "y": 320.0, "w": 407.0, "h": 63.0, "line_num": 3, "text": "lower-case = 0"}, {"x": 284.0, "y": 416.0, "w": 507.0, "h": 61.0, "line_num": 4, "text": "for char in str."}, {"x": 432.0, "y": 505.0, "w": 482.0, "h": 59.0, "line_num": 5, "text": "if chan, inupper():"}, {"x": 580.0, "y": 595.0, "w": 349.0, "h": 52.0, "line_num": 6, "text": "upper-cane +=1"}, {"x": 436.0, "y": 654.0, "w": 109.0, "h": 56.0, "line_num": 7, "text": "elpe:"}, {"x": 526.0, "y": 725.0, "w": 367.0, "h": 65.0, "line_num": 8, "text": "lower-case += 1"}, {"x": 325.0, "y": 831.0, "w": 729.0, "h": 70.0, "line_num": 9, "text": "return upper-care, lowercase"}], "ir_algo_name": "none", "ir_algo_output_code": "upper-lower-count (sto):\nUpper-case = 0\nlower-case = 0\nfor char in str.\nif chan, inupper():\nupper-cane +=1\nelpe:\nlower-case += 1\nreturn upper-care, lowercase", "ir_algo_output_edit_distance": 81, "prompting_method": "none", "lm_post_processed_code": "upper-lower-count (sto):\nUpper-case = 0\nlower-case = 0\nfor char in str.\nif chan, inupper():\nupper-cane +=1\nelpe:\nlower-case += 1\nreturn upper-care, lowercase", "lm_post_processed_edit_distance": 81}, {"image_id": 53, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 267.0, "y": 93.0, "w": 632.0, "h": 88.0, "line_num": 1, "text": "upper-lower-count (sto):"}, {"x": 282.0, "y": 235.0, "w": 399.0, "h": 62.0, "line_num": 2, "text": "Upper-case = 0"}, {"x": 283.0, "y": 320.0, "w": 407.0, "h": 63.0, "line_num": 3, "text": "lower-case = 0"}, {"x": 284.0, "y": 416.0, "w": 507.0, "h": 61.0, "line_num": 4, "text": "for char in str."}, {"x": 432.0, "y": 505.0, "w": 482.0, "h": 59.0, "line_num": 5, "text": "if chan, inupper():"}, {"x": 580.0, "y": 595.0, "w": 349.0, "h": 52.0, "line_num": 6, "text": "upper-cane +=1"}, {"x": 436.0, "y": 654.0, "w": 109.0, "h": 56.0, "line_num": 7, "text": "elpe:"}, {"x": 526.0, "y": 725.0, "w": 367.0, "h": 65.0, "line_num": 8, "text": "lower-case += 1"}, {"x": 325.0, "y": 831.0, "w": 729.0, "h": 70.0, "line_num": 9, "text": "return upper-care, lowercase"}], "ir_algo_name": "none", "ir_algo_output_code": "upper-lower-count (sto):\nUpper-case = 0\nlower-case = 0\nfor char in str.\nif chan, inupper():\nupper-cane +=1\nelpe:\nlower-case += 1\nreturn upper-care, lowercase", "ir_algo_output_edit_distance": 81, "prompting_method": "cot-test1", "lm_post_processed_code": "upper_lower_count(str):\nUpper_case = 0\nlower_case = 0\nfor char in str:\nif char.isupper():\nUpper_case +=1\nelse:\nlower_case += 1\nreturn Upper_case, lower_case\n", "lm_post_processed_edit_distance": 64}, {"image_id": 53, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 267.0, "y": 93.0, "w": 632.0, "h": 88.0, "line_num": 1, "text": "upper-lower-count (sto):"}, {"x": 282.0, "y": 235.0, "w": 399.0, "h": 62.0, "line_num": 2, "text": "Upper-case = 0"}, {"x": 283.0, "y": 320.0, "w": 407.0, "h": 63.0, "line_num": 3, "text": "lower-case = 0"}, {"x": 284.0, "y": 416.0, "w": 507.0, "h": 61.0, "line_num": 4, "text": "for char in str."}, {"x": 432.0, "y": 505.0, "w": 482.0, "h": 59.0, "line_num": 5, "text": "if chan, inupper():"}, {"x": 580.0, "y": 595.0, "w": 349.0, "h": 52.0, "line_num": 6, "text": "upper-cane +=1"}, {"x": 436.0, "y": 654.0, "w": 109.0, "h": 56.0, "line_num": 7, "text": "elpe:"}, {"x": 526.0, "y": 725.0, "w": 367.0, "h": 65.0, "line_num": 8, "text": "lower-case += 1"}, {"x": 325.0, "y": 831.0, "w": 729.0, "h": 70.0, "line_num": 9, "text": "return upper-care, lowercase"}], "ir_algo_name": "none", "ir_algo_output_code": "upper-lower-count (sto):\nUpper-case = 0\nlower-case = 0\nfor char in str.\nif chan, inupper():\nupper-cane +=1\nelpe:\nlower-case += 1\nreturn upper-care, lowercase", "ir_algo_output_edit_distance": 81, "prompting_method": "cot-test5", "lm_post_processed_code": "upper_lower_count(str):\nUpper_case = 0\nlower_case = 0\nfor char in str:\nif char.isupper():\nUpper_case +=1\nelse:\nlower_case += 1\nreturn Upper_case, lower_case\n", "lm_post_processed_edit_distance": 64}, {"image_id": 53, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 267.0, "y": 93.0, "w": 632.0, "h": 88.0, "line_num": 1, "text": "upper-lower-count (sto):"}, {"x": 282.0, "y": 235.0, "w": 399.0, "h": 62.0, "line_num": 2, "text": "Upper-case = 0"}, {"x": 283.0, "y": 320.0, "w": 407.0, "h": 63.0, "line_num": 3, "text": "lower-case = 0"}, {"x": 284.0, "y": 416.0, "w": 507.0, "h": 61.0, "line_num": 4, "text": "for char in str."}, {"x": 432.0, "y": 505.0, "w": 482.0, "h": 59.0, "line_num": 5, "text": "if chan, inupper():"}, {"x": 580.0, "y": 595.0, "w": 349.0, "h": 52.0, "line_num": 6, "text": "upper-cane +=1"}, {"x": 436.0, "y": 654.0, "w": 109.0, "h": 56.0, "line_num": 7, "text": "elpe:"}, {"x": 526.0, "y": 725.0, "w": 367.0, "h": 65.0, "line_num": 8, "text": "lower-case += 1"}, {"x": 325.0, "y": 831.0, "w": 729.0, "h": 70.0, "line_num": 9, "text": "return upper-care, lowercase"}], "ir_algo_name": "none", "ir_algo_output_code": "upper-lower-count (sto):\nUpper-case = 0\nlower-case = 0\nfor char in str.\nif chan, inupper():\nupper-cane +=1\nelpe:\nlower-case += 1\nreturn upper-care, lowercase", "ir_algo_output_edit_distance": 81, "prompting_method": "simple-test2", "lm_post_processed_code": "def upper_lower_count(sto):\n    Upper_case = 0\n    lower_case = 0\n    for char in sto:\n        if char.isupper():\n            Upper_case += 1\n        else:\n            lower_case += 1\n    return Upper_case, lower_case\n", "lm_post_processed_edit_distance": 5}, {"image_id": 53, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 267.0, "y": 93.0, "w": 632.0, "h": 88.0, "line_num": 1, "text": "upper-lower-count (sto):"}, {"x": 282.0, "y": 235.0, "w": 399.0, "h": 62.0, "line_num": 2, "text": "Upper-case = 0"}, {"x": 283.0, "y": 320.0, "w": 407.0, "h": 63.0, "line_num": 3, "text": "lower-case = 0"}, {"x": 284.0, "y": 416.0, "w": 507.0, "h": 61.0, "line_num": 4, "text": "for char in str."}, {"x": 432.0, "y": 505.0, "w": 482.0, "h": 59.0, "line_num": 5, "text": "if chan, inupper():"}, {"x": 580.0, "y": 595.0, "w": 349.0, "h": 52.0, "line_num": 6, "text": "upper-cane +=1"}, {"x": 436.0, "y": 654.0, "w": 109.0, "h": 56.0, "line_num": 7, "text": "elpe:"}, {"x": 526.0, "y": 725.0, "w": 367.0, "h": 65.0, "line_num": 8, "text": "lower-case += 1"}, {"x": 325.0, "y": 831.0, "w": 729.0, "h": 70.0, "line_num": 9, "text": "return upper-care, lowercase"}], "ir_algo_name": "none", "ir_algo_output_code": "upper-lower-count (sto):\nUpper-case = 0\nlower-case = 0\nfor char in str.\nif chan, inupper():\nupper-cane +=1\nelpe:\nlower-case += 1\nreturn upper-care, lowercase", "ir_algo_output_edit_distance": 81, "prompting_method": "simple-test3", "lm_post_processed_code": "def upper_lower_count(sto):\n    Upper_case = 0\n    lower_case = 0\n    for char in sto:\n        if char.isupper():\n            Upper_case +=1\n        else:\n            lower_case += 1\n    return Upper_case, lower_case\n", "lm_post_processed_edit_distance": 6}, {"image_id": 53, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 267.0, "y": 93.0, "w": 632.0, "h": 88.0, "line_num": 1, "text": "upper-lower-count (sto):"}, {"x": 282.0, "y": 235.0, "w": 399.0, "h": 62.0, "line_num": 2, "text": "Upper-case = 0"}, {"x": 283.0, "y": 320.0, "w": 407.0, "h": 63.0, "line_num": 3, "text": "lower-case = 0"}, {"x": 284.0, "y": 416.0, "w": 507.0, "h": 61.0, "line_num": 4, "text": "for char in str."}, {"x": 432.0, "y": 505.0, "w": 482.0, "h": 59.0, "line_num": 5, "text": "if chan, inupper():"}, {"x": 580.0, "y": 595.0, "w": 349.0, "h": 52.0, "line_num": 6, "text": "upper-cane +=1"}, {"x": 436.0, "y": 654.0, "w": 109.0, "h": 56.0, "line_num": 7, "text": "elpe:"}, {"x": 526.0, "y": 725.0, "w": 367.0, "h": 65.0, "line_num": 8, "text": "lower-case += 1"}, {"x": 325.0, "y": 831.0, "w": 729.0, "h": 70.0, "line_num": 9, "text": "return upper-care, lowercase"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 96.0, "ir_algo_output_code": "upper-lower-count (sto):\nUpper-case = 0\nlower-case = 0\nfor char in str.\n    if chan, inupper():\n    upper-cane +=1\n    elpe:\n    lower-case += 1\nreturn upper-care, lowercase\n", "ir_algo_output_indented_lines": [{"x": 267.0, "y": 93.0, "w": 632.0, "h": 88.0, "line_num": 1, "text": "upper-lower-count (sto):", "cluster_label": 0, "indentation": 0}, {"x": 282.0, "y": 235.0, "w": 399.0, "h": 62.0, "line_num": 2, "text": "Upper-case = 0", "cluster_label": 0, "indentation": 0}, {"x": 283.0, "y": 320.0, "w": 407.0, "h": 63.0, "line_num": 3, "text": "lower-case = 0", "cluster_label": 0, "indentation": 0}, {"x": 284.0, "y": 416.0, "w": 507.0, "h": 61.0, "line_num": 4, "text": "for char in str.", "cluster_label": 0, "indentation": 0}, {"x": 432.0, "y": 505.0, "w": 482.0, "h": 59.0, "line_num": 5, "text": "if chan, inupper():", "cluster_label": 1, "indentation": 1}, {"x": 580.0, "y": 595.0, "w": 349.0, "h": 52.0, "line_num": 6, "text": "upper-cane +=1", "cluster_label": 1, "indentation": 1}, {"x": 436.0, "y": 654.0, "w": 109.0, "h": 56.0, "line_num": 7, "text": "elpe:", "cluster_label": 1, "indentation": 1}, {"x": 526.0, "y": 725.0, "w": 367.0, "h": 65.0, "line_num": 8, "text": "lower-case += 1", "cluster_label": 1, "indentation": 1}, {"x": 325.0, "y": 831.0, "w": 729.0, "h": 70.0, "line_num": 9, "text": "return upper-care, lowercase", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 64, "prompting_method": "none", "lm_post_processed_code": "upper-lower-count (sto):\nUpper-case = 0\nlower-case = 0\nfor char in str.\n    if chan, inupper():\n    upper-cane +=1\n    elpe:\n    lower-case += 1\nreturn upper-care, lowercase\n", "lm_post_processed_edit_distance": 64}, {"image_id": 53, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 267.0, "y": 93.0, "w": 632.0, "h": 88.0, "line_num": 1, "text": "upper-lower-count (sto):"}, {"x": 282.0, "y": 235.0, "w": 399.0, "h": 62.0, "line_num": 2, "text": "Upper-case = 0"}, {"x": 283.0, "y": 320.0, "w": 407.0, "h": 63.0, "line_num": 3, "text": "lower-case = 0"}, {"x": 284.0, "y": 416.0, "w": 507.0, "h": 61.0, "line_num": 4, "text": "for char in str."}, {"x": 432.0, "y": 505.0, "w": 482.0, "h": 59.0, "line_num": 5, "text": "if chan, inupper():"}, {"x": 580.0, "y": 595.0, "w": 349.0, "h": 52.0, "line_num": 6, "text": "upper-cane +=1"}, {"x": 436.0, "y": 654.0, "w": 109.0, "h": 56.0, "line_num": 7, "text": "elpe:"}, {"x": 526.0, "y": 725.0, "w": 367.0, "h": 65.0, "line_num": 8, "text": "lower-case += 1"}, {"x": 325.0, "y": 831.0, "w": 729.0, "h": 70.0, "line_num": 9, "text": "return upper-care, lowercase"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 96.0, "ir_algo_output_code": "upper-lower-count (sto):\nUpper-case = 0\nlower-case = 0\nfor char in str.\n    if chan, inupper():\n    upper-cane +=1\n    elpe:\n    lower-case += 1\nreturn upper-care, lowercase\n", "ir_algo_output_indented_lines": [{"x": 267.0, "y": 93.0, "w": 632.0, "h": 88.0, "line_num": 1, "text": "upper-lower-count (sto):", "cluster_label": 0, "indentation": 0}, {"x": 282.0, "y": 235.0, "w": 399.0, "h": 62.0, "line_num": 2, "text": "Upper-case = 0", "cluster_label": 0, "indentation": 0}, {"x": 283.0, "y": 320.0, "w": 407.0, "h": 63.0, "line_num": 3, "text": "lower-case = 0", "cluster_label": 0, "indentation": 0}, {"x": 284.0, "y": 416.0, "w": 507.0, "h": 61.0, "line_num": 4, "text": "for char in str.", "cluster_label": 0, "indentation": 0}, {"x": 432.0, "y": 505.0, "w": 482.0, "h": 59.0, "line_num": 5, "text": "if chan, inupper():", "cluster_label": 1, "indentation": 1}, {"x": 580.0, "y": 595.0, "w": 349.0, "h": 52.0, "line_num": 6, "text": "upper-cane +=1", "cluster_label": 1, "indentation": 1}, {"x": 436.0, "y": 654.0, "w": 109.0, "h": 56.0, "line_num": 7, "text": "elpe:", "cluster_label": 1, "indentation": 1}, {"x": 526.0, "y": 725.0, "w": 367.0, "h": 65.0, "line_num": 8, "text": "lower-case += 1", "cluster_label": 1, "indentation": 1}, {"x": 325.0, "y": 831.0, "w": 729.0, "h": 70.0, "line_num": 9, "text": "return upper-care, lowercase", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 64, "prompting_method": "cot-test1", "lm_post_processed_code": "upper_lower_count(str):\nUpper_case = 0\nlower_case = 0\nfor char in str:\n    if char.isupper():\n        Upper_case +=1\n    else:\n        lower_case += 1\nreturn Upper_case, lower_case\n", "lm_post_processed_edit_distance": 40}, {"image_id": 53, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 267.0, "y": 93.0, "w": 632.0, "h": 88.0, "line_num": 1, "text": "upper-lower-count (sto):"}, {"x": 282.0, "y": 235.0, "w": 399.0, "h": 62.0, "line_num": 2, "text": "Upper-case = 0"}, {"x": 283.0, "y": 320.0, "w": 407.0, "h": 63.0, "line_num": 3, "text": "lower-case = 0"}, {"x": 284.0, "y": 416.0, "w": 507.0, "h": 61.0, "line_num": 4, "text": "for char in str."}, {"x": 432.0, "y": 505.0, "w": 482.0, "h": 59.0, "line_num": 5, "text": "if chan, inupper():"}, {"x": 580.0, "y": 595.0, "w": 349.0, "h": 52.0, "line_num": 6, "text": "upper-cane +=1"}, {"x": 436.0, "y": 654.0, "w": 109.0, "h": 56.0, "line_num": 7, "text": "elpe:"}, {"x": 526.0, "y": 725.0, "w": 367.0, "h": 65.0, "line_num": 8, "text": "lower-case += 1"}, {"x": 325.0, "y": 831.0, "w": 729.0, "h": 70.0, "line_num": 9, "text": "return upper-care, lowercase"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 96.0, "ir_algo_output_code": "upper-lower-count (sto):\nUpper-case = 0\nlower-case = 0\nfor char in str.\n    if chan, inupper():\n    upper-cane +=1\n    elpe:\n    lower-case += 1\nreturn upper-care, lowercase\n", "ir_algo_output_indented_lines": [{"x": 267.0, "y": 93.0, "w": 632.0, "h": 88.0, "line_num": 1, "text": "upper-lower-count (sto):", "cluster_label": 0, "indentation": 0}, {"x": 282.0, "y": 235.0, "w": 399.0, "h": 62.0, "line_num": 2, "text": "Upper-case = 0", "cluster_label": 0, "indentation": 0}, {"x": 283.0, "y": 320.0, "w": 407.0, "h": 63.0, "line_num": 3, "text": "lower-case = 0", "cluster_label": 0, "indentation": 0}, {"x": 284.0, "y": 416.0, "w": 507.0, "h": 61.0, "line_num": 4, "text": "for char in str.", "cluster_label": 0, "indentation": 0}, {"x": 432.0, "y": 505.0, "w": 482.0, "h": 59.0, "line_num": 5, "text": "if chan, inupper():", "cluster_label": 1, "indentation": 1}, {"x": 580.0, "y": 595.0, "w": 349.0, "h": 52.0, "line_num": 6, "text": "upper-cane +=1", "cluster_label": 1, "indentation": 1}, {"x": 436.0, "y": 654.0, "w": 109.0, "h": 56.0, "line_num": 7, "text": "elpe:", "cluster_label": 1, "indentation": 1}, {"x": 526.0, "y": 725.0, "w": 367.0, "h": 65.0, "line_num": 8, "text": "lower-case += 1", "cluster_label": 1, "indentation": 1}, {"x": 325.0, "y": 831.0, "w": 729.0, "h": 70.0, "line_num": 9, "text": "return upper-care, lowercase", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 64, "prompting_method": "cot-test5", "lm_post_processed_code": "upper_lower_count(str):\nUpper_case = 0\nlower_case = 0\nfor char in str:\n    if char.isupper():\n        Upper_case +=1\n    else:\n        lower_case += 1\nreturn Upper_case, lower_case\n", "lm_post_processed_edit_distance": 40}, {"image_id": 53, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 267.0, "y": 93.0, "w": 632.0, "h": 88.0, "line_num": 1, "text": "upper-lower-count (sto):"}, {"x": 282.0, "y": 235.0, "w": 399.0, "h": 62.0, "line_num": 2, "text": "Upper-case = 0"}, {"x": 283.0, "y": 320.0, "w": 407.0, "h": 63.0, "line_num": 3, "text": "lower-case = 0"}, {"x": 284.0, "y": 416.0, "w": 507.0, "h": 61.0, "line_num": 4, "text": "for char in str."}, {"x": 432.0, "y": 505.0, "w": 482.0, "h": 59.0, "line_num": 5, "text": "if chan, inupper():"}, {"x": 580.0, "y": 595.0, "w": 349.0, "h": 52.0, "line_num": 6, "text": "upper-cane +=1"}, {"x": 436.0, "y": 654.0, "w": 109.0, "h": 56.0, "line_num": 7, "text": "elpe:"}, {"x": 526.0, "y": 725.0, "w": 367.0, "h": 65.0, "line_num": 8, "text": "lower-case += 1"}, {"x": 325.0, "y": 831.0, "w": 729.0, "h": 70.0, "line_num": 9, "text": "return upper-care, lowercase"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 96.0, "ir_algo_output_code": "upper-lower-count (sto):\nUpper-case = 0\nlower-case = 0\nfor char in str.\n    if chan, inupper():\n    upper-cane +=1\n    elpe:\n    lower-case += 1\nreturn upper-care, lowercase\n", "ir_algo_output_indented_lines": [{"x": 267.0, "y": 93.0, "w": 632.0, "h": 88.0, "line_num": 1, "text": "upper-lower-count (sto):", "cluster_label": 0, "indentation": 0}, {"x": 282.0, "y": 235.0, "w": 399.0, "h": 62.0, "line_num": 2, "text": "Upper-case = 0", "cluster_label": 0, "indentation": 0}, {"x": 283.0, "y": 320.0, "w": 407.0, "h": 63.0, "line_num": 3, "text": "lower-case = 0", "cluster_label": 0, "indentation": 0}, {"x": 284.0, "y": 416.0, "w": 507.0, "h": 61.0, "line_num": 4, "text": "for char in str.", "cluster_label": 0, "indentation": 0}, {"x": 432.0, "y": 505.0, "w": 482.0, "h": 59.0, "line_num": 5, "text": "if chan, inupper():", "cluster_label": 1, "indentation": 1}, {"x": 580.0, "y": 595.0, "w": 349.0, "h": 52.0, "line_num": 6, "text": "upper-cane +=1", "cluster_label": 1, "indentation": 1}, {"x": 436.0, "y": 654.0, "w": 109.0, "h": 56.0, "line_num": 7, "text": "elpe:", "cluster_label": 1, "indentation": 1}, {"x": 526.0, "y": 725.0, "w": 367.0, "h": 65.0, "line_num": 8, "text": "lower-case += 1", "cluster_label": 1, "indentation": 1}, {"x": 325.0, "y": 831.0, "w": 729.0, "h": 70.0, "line_num": 9, "text": "return upper-care, lowercase", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 64, "prompting_method": "simple-test2", "lm_post_processed_code": "def upper_lower_count(sto):\n    Upper_case = 0\n    lower_case = 0\n    for char in sto:\n        if char.isupper():\n            Upper_case += 1\n        else:\n            lower_case += 1\n    return Upper_case, lower_case\n", "lm_post_processed_edit_distance": 5}, {"image_id": 53, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 267.0, "y": 93.0, "w": 632.0, "h": 88.0, "line_num": 1, "text": "upper-lower-count (sto):"}, {"x": 282.0, "y": 235.0, "w": 399.0, "h": 62.0, "line_num": 2, "text": "Upper-case = 0"}, {"x": 283.0, "y": 320.0, "w": 407.0, "h": 63.0, "line_num": 3, "text": "lower-case = 0"}, {"x": 284.0, "y": 416.0, "w": 507.0, "h": 61.0, "line_num": 4, "text": "for char in str."}, {"x": 432.0, "y": 505.0, "w": 482.0, "h": 59.0, "line_num": 5, "text": "if chan, inupper():"}, {"x": 580.0, "y": 595.0, "w": 349.0, "h": 52.0, "line_num": 6, "text": "upper-cane +=1"}, {"x": 436.0, "y": 654.0, "w": 109.0, "h": 56.0, "line_num": 7, "text": "elpe:"}, {"x": 526.0, "y": 725.0, "w": 367.0, "h": 65.0, "line_num": 8, "text": "lower-case += 1"}, {"x": 325.0, "y": 831.0, "w": 729.0, "h": 70.0, "line_num": 9, "text": "return upper-care, lowercase"}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 96.0, "ir_algo_output_code": "upper-lower-count (sto):\nUpper-case = 0\nlower-case = 0\nfor char in str.\n    if chan, inupper():\n    upper-cane +=1\n    elpe:\n    lower-case += 1\nreturn upper-care, lowercase\n", "ir_algo_output_indented_lines": [{"x": 267.0, "y": 93.0, "w": 632.0, "h": 88.0, "line_num": 1, "text": "upper-lower-count (sto):", "cluster_label": 0, "indentation": 0}, {"x": 282.0, "y": 235.0, "w": 399.0, "h": 62.0, "line_num": 2, "text": "Upper-case = 0", "cluster_label": 0, "indentation": 0}, {"x": 283.0, "y": 320.0, "w": 407.0, "h": 63.0, "line_num": 3, "text": "lower-case = 0", "cluster_label": 0, "indentation": 0}, {"x": 284.0, "y": 416.0, "w": 507.0, "h": 61.0, "line_num": 4, "text": "for char in str.", "cluster_label": 0, "indentation": 0}, {"x": 432.0, "y": 505.0, "w": 482.0, "h": 59.0, "line_num": 5, "text": "if chan, inupper():", "cluster_label": 1, "indentation": 1}, {"x": 580.0, "y": 595.0, "w": 349.0, "h": 52.0, "line_num": 6, "text": "upper-cane +=1", "cluster_label": 1, "indentation": 1}, {"x": 436.0, "y": 654.0, "w": 109.0, "h": 56.0, "line_num": 7, "text": "elpe:", "cluster_label": 1, "indentation": 1}, {"x": 526.0, "y": 725.0, "w": 367.0, "h": 65.0, "line_num": 8, "text": "lower-case += 1", "cluster_label": 1, "indentation": 1}, {"x": 325.0, "y": 831.0, "w": 729.0, "h": 70.0, "line_num": 9, "text": "return upper-care, lowercase", "cluster_label": 0, "indentation": 0}], "ir_algo_output_edit_distance": 64, "prompting_method": "simple-test3", "lm_post_processed_code": "def upper_lower_count(sto):\n    Upper_case = 0\n    lower_case = 0\n    for char in sto:\n        if char.isupper():\n            Upper_case +=1\n        else:\n            lower_case += 1\n    return Upper_case, lower_case\n", "lm_post_processed_edit_distance": 6}, {"image_id": 53, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 267.0, "y": 93.0, "w": 632.0, "h": 88.0, "line_num": 1, "text": "upper-lower-count (sto):"}, {"x": 282.0, "y": 235.0, "w": 399.0, "h": 62.0, "line_num": 2, "text": "Upper-case = 0"}, {"x": 283.0, "y": 320.0, "w": 407.0, "h": 63.0, "line_num": 3, "text": "lower-case = 0"}, {"x": 284.0, "y": 416.0, "w": 507.0, "h": 61.0, "line_num": 4, "text": "for char in str."}, {"x": 432.0, "y": 505.0, "w": 482.0, "h": 59.0, "line_num": 5, "text": "if chan, inupper():"}, {"x": 580.0, "y": 595.0, "w": 349.0, "h": 52.0, "line_num": 6, "text": "upper-cane +=1"}, {"x": 436.0, "y": 654.0, "w": 109.0, "h": 56.0, "line_num": 7, "text": "elpe:"}, {"x": 526.0, "y": 725.0, "w": 367.0, "h": 65.0, "line_num": 8, "text": "lower-case += 1"}, {"x": 325.0, "y": 831.0, "w": 729.0, "h": 70.0, "line_num": 9, "text": "return upper-care, lowercase"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "upper-lower-count (sto):\nUpper-case = 0\nlower-case = 0\nfor char in str.\n    if chan, inupper():\n        upper-cane +=1\n    elpe:\n        lower-case += 1\nreturn upper-care, lowercase\n", "ir_algo_output_indented_lines": [{"x": 267.0, "y": 93.0, "w": 632.0, "h": 88.0, "line_num": 1, "text": "upper-lower-count (sto):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 282.0, "y": 235.0, "w": 399.0, "h": 62.0, "line_num": 2, "text": "Upper-case = 0", "delta": 15.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 283.0, "y": 320.0, "w": 407.0, "h": 63.0, "line_num": 3, "text": "lower-case = 0", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 284.0, "y": 416.0, "w": 507.0, "h": 61.0, "line_num": 4, "text": "for char in str.", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 432.0, "y": 505.0, "w": 482.0, "h": 59.0, "line_num": 5, "text": "if chan, inupper():", "delta": 148.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 580.0, "y": 595.0, "w": 349.0, "h": 52.0, "line_num": 6, "text": "upper-cane +=1", "delta": 148.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 436.0, "y": 654.0, "w": 109.0, "h": 56.0, "line_num": 7, "text": "elpe:", "delta": -144.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 526.0, "y": 725.0, "w": 367.0, "h": 65.0, "line_num": 8, "text": "lower-case += 1", "delta": 90.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 325.0, "y": 831.0, "w": 729.0, "h": 70.0, "line_num": 9, "text": "return upper-care, lowercase", "delta": -201.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 56, "prompting_method": "none", "lm_post_processed_code": "upper-lower-count (sto):\nUpper-case = 0\nlower-case = 0\nfor char in str.\n    if chan, inupper():\n        upper-cane +=1\n    elpe:\n        lower-case += 1\nreturn upper-care, lowercase\n", "lm_post_processed_edit_distance": 56}, {"image_id": 53, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 267.0, "y": 93.0, "w": 632.0, "h": 88.0, "line_num": 1, "text": "upper-lower-count (sto):"}, {"x": 282.0, "y": 235.0, "w": 399.0, "h": 62.0, "line_num": 2, "text": "Upper-case = 0"}, {"x": 283.0, "y": 320.0, "w": 407.0, "h": 63.0, "line_num": 3, "text": "lower-case = 0"}, {"x": 284.0, "y": 416.0, "w": 507.0, "h": 61.0, "line_num": 4, "text": "for char in str."}, {"x": 432.0, "y": 505.0, "w": 482.0, "h": 59.0, "line_num": 5, "text": "if chan, inupper():"}, {"x": 580.0, "y": 595.0, "w": 349.0, "h": 52.0, "line_num": 6, "text": "upper-cane +=1"}, {"x": 436.0, "y": 654.0, "w": 109.0, "h": 56.0, "line_num": 7, "text": "elpe:"}, {"x": 526.0, "y": 725.0, "w": 367.0, "h": 65.0, "line_num": 8, "text": "lower-case += 1"}, {"x": 325.0, "y": 831.0, "w": 729.0, "h": 70.0, "line_num": 9, "text": "return upper-care, lowercase"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "upper-lower-count (sto):\nUpper-case = 0\nlower-case = 0\nfor char in str.\n    if chan, inupper():\n        upper-cane +=1\n    elpe:\n        lower-case += 1\nreturn upper-care, lowercase\n", "ir_algo_output_indented_lines": [{"x": 267.0, "y": 93.0, "w": 632.0, "h": 88.0, "line_num": 1, "text": "upper-lower-count (sto):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 282.0, "y": 235.0, "w": 399.0, "h": 62.0, "line_num": 2, "text": "Upper-case = 0", "delta": 15.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 283.0, "y": 320.0, "w": 407.0, "h": 63.0, "line_num": 3, "text": "lower-case = 0", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 284.0, "y": 416.0, "w": 507.0, "h": 61.0, "line_num": 4, "text": "for char in str.", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 432.0, "y": 505.0, "w": 482.0, "h": 59.0, "line_num": 5, "text": "if chan, inupper():", "delta": 148.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 580.0, "y": 595.0, "w": 349.0, "h": 52.0, "line_num": 6, "text": "upper-cane +=1", "delta": 148.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 436.0, "y": 654.0, "w": 109.0, "h": 56.0, "line_num": 7, "text": "elpe:", "delta": -144.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 526.0, "y": 725.0, "w": 367.0, "h": 65.0, "line_num": 8, "text": "lower-case += 1", "delta": 90.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 325.0, "y": 831.0, "w": 729.0, "h": 70.0, "line_num": 9, "text": "return upper-care, lowercase", "delta": -201.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 56, "prompting_method": "cot-test1", "lm_post_processed_code": "upper_lower_count(str):\nUpper_case = 0\nlower_case = 0\nfor char in str:\n    if char.isupper():\n        Upper_case +=1\n    else:\n        lower_case += 1\nreturn Upper_case, lower_case\n", "lm_post_processed_edit_distance": 40}, {"image_id": 53, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 267.0, "y": 93.0, "w": 632.0, "h": 88.0, "line_num": 1, "text": "upper-lower-count (sto):"}, {"x": 282.0, "y": 235.0, "w": 399.0, "h": 62.0, "line_num": 2, "text": "Upper-case = 0"}, {"x": 283.0, "y": 320.0, "w": 407.0, "h": 63.0, "line_num": 3, "text": "lower-case = 0"}, {"x": 284.0, "y": 416.0, "w": 507.0, "h": 61.0, "line_num": 4, "text": "for char in str."}, {"x": 432.0, "y": 505.0, "w": 482.0, "h": 59.0, "line_num": 5, "text": "if chan, inupper():"}, {"x": 580.0, "y": 595.0, "w": 349.0, "h": 52.0, "line_num": 6, "text": "upper-cane +=1"}, {"x": 436.0, "y": 654.0, "w": 109.0, "h": 56.0, "line_num": 7, "text": "elpe:"}, {"x": 526.0, "y": 725.0, "w": 367.0, "h": 65.0, "line_num": 8, "text": "lower-case += 1"}, {"x": 325.0, "y": 831.0, "w": 729.0, "h": 70.0, "line_num": 9, "text": "return upper-care, lowercase"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "upper-lower-count (sto):\nUpper-case = 0\nlower-case = 0\nfor char in str.\n    if chan, inupper():\n        upper-cane +=1\n    elpe:\n        lower-case += 1\nreturn upper-care, lowercase\n", "ir_algo_output_indented_lines": [{"x": 267.0, "y": 93.0, "w": 632.0, "h": 88.0, "line_num": 1, "text": "upper-lower-count (sto):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 282.0, "y": 235.0, "w": 399.0, "h": 62.0, "line_num": 2, "text": "Upper-case = 0", "delta": 15.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 283.0, "y": 320.0, "w": 407.0, "h": 63.0, "line_num": 3, "text": "lower-case = 0", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 284.0, "y": 416.0, "w": 507.0, "h": 61.0, "line_num": 4, "text": "for char in str.", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 432.0, "y": 505.0, "w": 482.0, "h": 59.0, "line_num": 5, "text": "if chan, inupper():", "delta": 148.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 580.0, "y": 595.0, "w": 349.0, "h": 52.0, "line_num": 6, "text": "upper-cane +=1", "delta": 148.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 436.0, "y": 654.0, "w": 109.0, "h": 56.0, "line_num": 7, "text": "elpe:", "delta": -144.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 526.0, "y": 725.0, "w": 367.0, "h": 65.0, "line_num": 8, "text": "lower-case += 1", "delta": 90.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 325.0, "y": 831.0, "w": 729.0, "h": 70.0, "line_num": 9, "text": "return upper-care, lowercase", "delta": -201.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 56, "prompting_method": "cot-test5", "lm_post_processed_code": "upper_lower_count(str):\nupper_case = 0\nlower_case = 0\nfor char in str:\n    if char.isupper():\n        upper_case +=1\n    else:\n        lower_case += 1\nreturn upper_case, lower_case\n", "lm_post_processed_edit_distance": 37}, {"image_id": 53, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 267.0, "y": 93.0, "w": 632.0, "h": 88.0, "line_num": 1, "text": "upper-lower-count (sto):"}, {"x": 282.0, "y": 235.0, "w": 399.0, "h": 62.0, "line_num": 2, "text": "Upper-case = 0"}, {"x": 283.0, "y": 320.0, "w": 407.0, "h": 63.0, "line_num": 3, "text": "lower-case = 0"}, {"x": 284.0, "y": 416.0, "w": 507.0, "h": 61.0, "line_num": 4, "text": "for char in str."}, {"x": 432.0, "y": 505.0, "w": 482.0, "h": 59.0, "line_num": 5, "text": "if chan, inupper():"}, {"x": 580.0, "y": 595.0, "w": 349.0, "h": 52.0, "line_num": 6, "text": "upper-cane +=1"}, {"x": 436.0, "y": 654.0, "w": 109.0, "h": 56.0, "line_num": 7, "text": "elpe:"}, {"x": 526.0, "y": 725.0, "w": 367.0, "h": 65.0, "line_num": 8, "text": "lower-case += 1"}, {"x": 325.0, "y": 831.0, "w": 729.0, "h": 70.0, "line_num": 9, "text": "return upper-care, lowercase"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "upper-lower-count (sto):\nUpper-case = 0\nlower-case = 0\nfor char in str.\n    if chan, inupper():\n        upper-cane +=1\n    elpe:\n        lower-case += 1\nreturn upper-care, lowercase\n", "ir_algo_output_indented_lines": [{"x": 267.0, "y": 93.0, "w": 632.0, "h": 88.0, "line_num": 1, "text": "upper-lower-count (sto):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 282.0, "y": 235.0, "w": 399.0, "h": 62.0, "line_num": 2, "text": "Upper-case = 0", "delta": 15.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 283.0, "y": 320.0, "w": 407.0, "h": 63.0, "line_num": 3, "text": "lower-case = 0", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 284.0, "y": 416.0, "w": 507.0, "h": 61.0, "line_num": 4, "text": "for char in str.", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 432.0, "y": 505.0, "w": 482.0, "h": 59.0, "line_num": 5, "text": "if chan, inupper():", "delta": 148.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 580.0, "y": 595.0, "w": 349.0, "h": 52.0, "line_num": 6, "text": "upper-cane +=1", "delta": 148.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 436.0, "y": 654.0, "w": 109.0, "h": 56.0, "line_num": 7, "text": "elpe:", "delta": -144.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 526.0, "y": 725.0, "w": 367.0, "h": 65.0, "line_num": 8, "text": "lower-case += 1", "delta": 90.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 325.0, "y": 831.0, "w": 729.0, "h": 70.0, "line_num": 9, "text": "return upper-care, lowercase", "delta": -201.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 56, "prompting_method": "simple-test2", "lm_post_processed_code": "def upper_lower_count(sto):\n    Upper_case = 0\n    lower_case = 0\n    for char in sto:\n        if char.isupper():\n            Upper_case +=1\n        else:\n            lower_case += 1\n    return Upper_case, lower_case\n", "lm_post_processed_edit_distance": 6}, {"image_id": 53, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 267.0, "y": 93.0, "w": 632.0, "h": 88.0, "line_num": 1, "text": "upper-lower-count (sto):"}, {"x": 282.0, "y": 235.0, "w": 399.0, "h": 62.0, "line_num": 2, "text": "Upper-case = 0"}, {"x": 283.0, "y": 320.0, "w": 407.0, "h": 63.0, "line_num": 3, "text": "lower-case = 0"}, {"x": 284.0, "y": 416.0, "w": 507.0, "h": 61.0, "line_num": 4, "text": "for char in str."}, {"x": 432.0, "y": 505.0, "w": 482.0, "h": 59.0, "line_num": 5, "text": "if chan, inupper():"}, {"x": 580.0, "y": 595.0, "w": 349.0, "h": 52.0, "line_num": 6, "text": "upper-cane +=1"}, {"x": 436.0, "y": 654.0, "w": 109.0, "h": 56.0, "line_num": 7, "text": "elpe:"}, {"x": 526.0, "y": 725.0, "w": 367.0, "h": 65.0, "line_num": 8, "text": "lower-case += 1"}, {"x": 325.0, "y": 831.0, "w": 729.0, "h": 70.0, "line_num": 9, "text": "return upper-care, lowercase"}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "upper-lower-count (sto):\nUpper-case = 0\nlower-case = 0\nfor char in str.\n    if chan, inupper():\n        upper-cane +=1\n    elpe:\n        lower-case += 1\nreturn upper-care, lowercase\n", "ir_algo_output_indented_lines": [{"x": 267.0, "y": 93.0, "w": 632.0, "h": 88.0, "line_num": 1, "text": "upper-lower-count (sto):", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 282.0, "y": 235.0, "w": 399.0, "h": 62.0, "line_num": 2, "text": "Upper-case = 0", "delta": 15.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 283.0, "y": 320.0, "w": 407.0, "h": 63.0, "line_num": 3, "text": "lower-case = 0", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 284.0, "y": 416.0, "w": 507.0, "h": 61.0, "line_num": 4, "text": "for char in str.", "delta": 1.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 0}, {"x": 432.0, "y": 505.0, "w": 482.0, "h": 59.0, "line_num": 5, "text": "if chan, inupper():", "delta": 148.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 580.0, "y": 595.0, "w": 349.0, "h": 52.0, "line_num": 6, "text": "upper-cane +=1", "delta": 148.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 436.0, "y": 654.0, "w": 109.0, "h": 56.0, "line_num": 7, "text": "elpe:", "delta": -144.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 526.0, "y": 725.0, "w": 367.0, "h": 65.0, "line_num": 8, "text": "lower-case += 1", "delta": 90.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 325.0, "y": 831.0, "w": 729.0, "h": 70.0, "line_num": 9, "text": "return upper-care, lowercase", "delta": -201.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 0}], "ir_algo_output_edit_distance": 56, "prompting_method": "simple-test3", "lm_post_processed_code": "def upper_lower_count(sto):\n    Upper_case = 0\n    lower_case = 0\n    for char in sto:\n        if char.isupper():\n            Upper_case +=1\n        else:\n            lower_case += 1\n    return Upper_case, lower_case\n", "lm_post_processed_edit_distance": 6}, {"image_id": 54, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 141.0, "y": 213.0, "w": 662.0, "h": 101.0, "line_num": 1, "text": "det multiply (numbon);"}, {"x": 314.0, "y": 373.0, "w": 279.0, "h": 73.0, "line_num": 2, "text": "total = 0"}, {"x": 325.0, "y": 485.0, "w": 558.0, "h": 72.0, "line_num": 3, "text": "for se in numbers;"}, {"x": 476.0, "y": 603.0, "w": 301.0, "h": 70.0, "line_num": 4, "text": "total* * = Je"}, {"x": 351.0, "y": 698.0, "w": 440.0, "h": 66.0, "line_num": 5, "text": "return total"}, {"x": 800.0, "y": 667.0, "w": 247.0, "h": 52.0, "line_num": 6, "text": "moppepo"}, {"x": 653.0, "y": 1054.0, "w": 299.0, "h": 67.0, "line_num": 7, "text": "ppor care."}], "ir_algo_name": "none", "ir_algo_output_code": "det multiply (numbon);\ntotal = 0\nfor se in numbers;\ntotal* * = Je\nreturn total\nmoppepo\nppor care.", "ir_algo_output_edit_distance": 50, "prompting_method": "none", "lm_post_processed_code": "det multiply (numbon);\ntotal = 0\nfor se in numbers;\ntotal* * = Je\nreturn total\nmoppepo\nppor care.", "lm_post_processed_edit_distance": 50}, {"image_id": 54, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 141.0, "y": 213.0, "w": 662.0, "h": 101.0, "line_num": 1, "text": "det multiply (numbon);"}, {"x": 314.0, "y": 373.0, "w": 279.0, "h": 73.0, "line_num": 2, "text": "total = 0"}, {"x": 325.0, "y": 485.0, "w": 558.0, "h": 72.0, "line_num": 3, "text": "for se in numbers;"}, {"x": 476.0, "y": 603.0, "w": 301.0, "h": 70.0, "line_num": 4, "text": "total* * = Je"}, {"x": 351.0, "y": 698.0, "w": 440.0, "h": 66.0, "line_num": 5, "text": "return total"}, {"x": 800.0, "y": 667.0, "w": 247.0, "h": 52.0, "line_num": 6, "text": "moppepo"}, {"x": 653.0, "y": 1054.0, "w": 299.0, "h": 67.0, "line_num": 7, "text": "ppor care."}], "ir_algo_name": "none", "ir_algo_output_code": "det multiply (numbon);\ntotal = 0\nfor se in numbers;\ntotal* * = Je\nreturn total\nmoppepo\nppor care.", "ir_algo_output_edit_distance": 50, "prompting_method": "cot-test1", "lm_post_processed_code": "def multiply (numbers):\ntotal = 0\nfor se in numbers:\ntotal *= se\nreturn total\n", "lm_post_processed_edit_distance": 25}, {"image_id": 54, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 141.0, "y": 213.0, "w": 662.0, "h": 101.0, "line_num": 1, "text": "det multiply (numbon);"}, {"x": 314.0, "y": 373.0, "w": 279.0, "h": 73.0, "line_num": 2, "text": "total = 0"}, {"x": 325.0, "y": 485.0, "w": 558.0, "h": 72.0, "line_num": 3, "text": "for se in numbers;"}, {"x": 476.0, "y": 603.0, "w": 301.0, "h": 70.0, "line_num": 4, "text": "total* * = Je"}, {"x": 351.0, "y": 698.0, "w": 440.0, "h": 66.0, "line_num": 5, "text": "return total"}, {"x": 800.0, "y": 667.0, "w": 247.0, "h": 52.0, "line_num": 6, "text": "moppepo"}, {"x": 653.0, "y": 1054.0, "w": 299.0, "h": 67.0, "line_num": 7, "text": "ppor care."}], "ir_algo_name": "none", "ir_algo_output_code": "det multiply (numbon);\ntotal = 0\nfor se in numbers;\ntotal* * = Je\nreturn total\nmoppepo\nppor care.", "ir_algo_output_edit_distance": 50, "prompting_method": "cot-test5", "lm_post_processed_code": "def multiply(numbers):\ntotal = 0\nfor se in numbers:\ntotal *= se\nreturn total\n", "lm_post_processed_edit_distance": 24}, {"image_id": 54, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 141.0, "y": 213.0, "w": 662.0, "h": 101.0, "line_num": 1, "text": "det multiply (numbon);"}, {"x": 314.0, "y": 373.0, "w": 279.0, "h": 73.0, "line_num": 2, "text": "total = 0"}, {"x": 325.0, "y": 485.0, "w": 558.0, "h": 72.0, "line_num": 3, "text": "for se in numbers;"}, {"x": 476.0, "y": 603.0, "w": 301.0, "h": 70.0, "line_num": 4, "text": "total* * = Je"}, {"x": 351.0, "y": 698.0, "w": 440.0, "h": 66.0, "line_num": 5, "text": "return total"}, {"x": 800.0, "y": 667.0, "w": 247.0, "h": 52.0, "line_num": 6, "text": "moppepo"}, {"x": 653.0, "y": 1054.0, "w": 299.0, "h": 67.0, "line_num": 7, "text": "ppor care."}], "ir_algo_name": "none", "ir_algo_output_code": "det multiply (numbon);\ntotal = 0\nfor se in numbers;\ntotal* * = Je\nreturn total\nmoppepo\nppor care.", "ir_algo_output_edit_distance": 50, "prompting_method": "simple-test2", "lm_post_processed_code": "def multiply(numbers):\n    total = 0\n    for se in numbers:\n        total *= se\n    return total\n", "lm_post_processed_edit_distance": 4}, {"image_id": 54, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 141.0, "y": 213.0, "w": 662.0, "h": 101.0, "line_num": 1, "text": "det multiply (numbon);"}, {"x": 314.0, "y": 373.0, "w": 279.0, "h": 73.0, "line_num": 2, "text": "total = 0"}, {"x": 325.0, "y": 485.0, "w": 558.0, "h": 72.0, "line_num": 3, "text": "for se in numbers;"}, {"x": 476.0, "y": 603.0, "w": 301.0, "h": 70.0, "line_num": 4, "text": "total* * = Je"}, {"x": 351.0, "y": 698.0, "w": 440.0, "h": 66.0, "line_num": 5, "text": "return total"}, {"x": 800.0, "y": 667.0, "w": 247.0, "h": 52.0, "line_num": 6, "text": "moppepo"}, {"x": 653.0, "y": 1054.0, "w": 299.0, "h": 67.0, "line_num": 7, "text": "ppor care."}], "ir_algo_name": "none", "ir_algo_output_code": "det multiply (numbon);\ntotal = 0\nfor se in numbers;\ntotal* * = Je\nreturn total\nmoppepo\nppor care.", "ir_algo_output_edit_distance": 50, "prompting_method": "simple-test3", "lm_post_processed_code": "def multiply(numbers):\n    total = 0\n    for se in numbers:\n        total *= se\n    return total\n", "lm_post_processed_edit_distance": 4}, {"image_id": 54, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 141.0, "y": 213.0, "w": 662.0, "h": 101.0, "line_num": 1, "text": "det multiply (numbon);"}, {"x": 314.0, "y": 373.0, "w": 279.0, "h": 73.0, "line_num": 2, "text": "total = 0"}, {"x": 325.0, "y": 485.0, "w": 558.0, "h": 72.0, "line_num": 3, "text": "for se in numbers;"}, {"x": 476.0, "y": 603.0, "w": 301.0, "h": 70.0, "line_num": 4, "text": "total* * = Je"}, {"x": 351.0, "y": 698.0, "w": 440.0, "h": 66.0, "line_num": 5, "text": "return total"}, {"x": 800.0, "y": 667.0, "w": 247.0, "h": 52.0, "line_num": 6, "text": "moppepo"}, {"x": 653.0, "y": 1054.0, "w": 299.0, "h": 67.0, "line_num": 7, "text": "ppor care."}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 107.35714285714286, "ir_algo_output_code": "det multiply (numbon);\n    total = 0\n    for se in numbers;\n        total* * = Je\n    return total\n                moppepo\n            ppor care.\n", "ir_algo_output_indented_lines": [{"x": 141.0, "y": 213.0, "w": 662.0, "h": 101.0, "line_num": 1, "text": "det multiply (numbon);", "cluster_label": 4, "indentation": 0}, {"x": 314.0, "y": 373.0, "w": 279.0, "h": 73.0, "line_num": 2, "text": "total = 0", "cluster_label": 0, "indentation": 1}, {"x": 325.0, "y": 485.0, "w": 558.0, "h": 72.0, "line_num": 3, "text": "for se in numbers;", "cluster_label": 0, "indentation": 1}, {"x": 476.0, "y": 603.0, "w": 301.0, "h": 70.0, "line_num": 4, "text": "total* * = Je", "cluster_label": 3, "indentation": 2}, {"x": 351.0, "y": 698.0, "w": 440.0, "h": 66.0, "line_num": 5, "text": "return total", "cluster_label": 0, "indentation": 1}, {"x": 800.0, "y": 667.0, "w": 247.0, "h": 52.0, "line_num": 6, "text": "moppepo", "cluster_label": 1, "indentation": 4}, {"x": 653.0, "y": 1054.0, "w": 299.0, "h": 67.0, "line_num": 7, "text": "ppor care.", "cluster_label": 2, "indentation": 3}], "ir_algo_output_edit_distance": 60, "prompting_method": "none", "lm_post_processed_code": "det multiply (numbon);\n    total = 0\n    for se in numbers;\n        total* * = Je\n    return total\n                moppepo\n            ppor care.\n", "lm_post_processed_edit_distance": 60}, {"image_id": 54, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 141.0, "y": 213.0, "w": 662.0, "h": 101.0, "line_num": 1, "text": "det multiply (numbon);"}, {"x": 314.0, "y": 373.0, "w": 279.0, "h": 73.0, "line_num": 2, "text": "total = 0"}, {"x": 325.0, "y": 485.0, "w": 558.0, "h": 72.0, "line_num": 3, "text": "for se in numbers;"}, {"x": 476.0, "y": 603.0, "w": 301.0, "h": 70.0, "line_num": 4, "text": "total* * = Je"}, {"x": 351.0, "y": 698.0, "w": 440.0, "h": 66.0, "line_num": 5, "text": "return total"}, {"x": 800.0, "y": 667.0, "w": 247.0, "h": 52.0, "line_num": 6, "text": "moppepo"}, {"x": 653.0, "y": 1054.0, "w": 299.0, "h": 67.0, "line_num": 7, "text": "ppor care."}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 107.35714285714286, "ir_algo_output_code": "det multiply (numbon);\n    total = 0\n    for se in numbers;\n        total* * = Je\n    return total\n                moppepo\n            ppor care.\n", "ir_algo_output_indented_lines": [{"x": 141.0, "y": 213.0, "w": 662.0, "h": 101.0, "line_num": 1, "text": "det multiply (numbon);", "cluster_label": 4, "indentation": 0}, {"x": 314.0, "y": 373.0, "w": 279.0, "h": 73.0, "line_num": 2, "text": "total = 0", "cluster_label": 0, "indentation": 1}, {"x": 325.0, "y": 485.0, "w": 558.0, "h": 72.0, "line_num": 3, "text": "for se in numbers;", "cluster_label": 0, "indentation": 1}, {"x": 476.0, "y": 603.0, "w": 301.0, "h": 70.0, "line_num": 4, "text": "total* * = Je", "cluster_label": 3, "indentation": 2}, {"x": 351.0, "y": 698.0, "w": 440.0, "h": 66.0, "line_num": 5, "text": "return total", "cluster_label": 0, "indentation": 1}, {"x": 800.0, "y": 667.0, "w": 247.0, "h": 52.0, "line_num": 6, "text": "moppepo", "cluster_label": 1, "indentation": 4}, {"x": 653.0, "y": 1054.0, "w": 299.0, "h": 67.0, "line_num": 7, "text": "ppor care.", "cluster_label": 2, "indentation": 3}], "ir_algo_output_edit_distance": 60, "prompting_method": "cot-test1", "lm_post_processed_code": "def multiply (numbers):\n    total = 0\n    for se in numbers:\n        total *= se\n    return total\n", "lm_post_processed_edit_distance": 5}, {"image_id": 54, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 141.0, "y": 213.0, "w": 662.0, "h": 101.0, "line_num": 1, "text": "det multiply (numbon);"}, {"x": 314.0, "y": 373.0, "w": 279.0, "h": 73.0, "line_num": 2, "text": "total = 0"}, {"x": 325.0, "y": 485.0, "w": 558.0, "h": 72.0, "line_num": 3, "text": "for se in numbers;"}, {"x": 476.0, "y": 603.0, "w": 301.0, "h": 70.0, "line_num": 4, "text": "total* * = Je"}, {"x": 351.0, "y": 698.0, "w": 440.0, "h": 66.0, "line_num": 5, "text": "return total"}, {"x": 800.0, "y": 667.0, "w": 247.0, "h": 52.0, "line_num": 6, "text": "moppepo"}, {"x": 653.0, "y": 1054.0, "w": 299.0, "h": 67.0, "line_num": 7, "text": "ppor care."}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 107.35714285714286, "ir_algo_output_code": "det multiply (numbon);\n    total = 0\n    for se in numbers;\n        total* * = Je\n    return total\n                moppepo\n            ppor care.\n", "ir_algo_output_indented_lines": [{"x": 141.0, "y": 213.0, "w": 662.0, "h": 101.0, "line_num": 1, "text": "det multiply (numbon);", "cluster_label": 4, "indentation": 0}, {"x": 314.0, "y": 373.0, "w": 279.0, "h": 73.0, "line_num": 2, "text": "total = 0", "cluster_label": 0, "indentation": 1}, {"x": 325.0, "y": 485.0, "w": 558.0, "h": 72.0, "line_num": 3, "text": "for se in numbers;", "cluster_label": 0, "indentation": 1}, {"x": 476.0, "y": 603.0, "w": 301.0, "h": 70.0, "line_num": 4, "text": "total* * = Je", "cluster_label": 3, "indentation": 2}, {"x": 351.0, "y": 698.0, "w": 440.0, "h": 66.0, "line_num": 5, "text": "return total", "cluster_label": 0, "indentation": 1}, {"x": 800.0, "y": 667.0, "w": 247.0, "h": 52.0, "line_num": 6, "text": "moppepo", "cluster_label": 1, "indentation": 4}, {"x": 653.0, "y": 1054.0, "w": 299.0, "h": 67.0, "line_num": 7, "text": "ppor care.", "cluster_label": 2, "indentation": 3}], "ir_algo_output_edit_distance": 60, "prompting_method": "cot-test5", "lm_post_processed_code": "def multiply(numbers):\n    total = 0\n    for se in numbers:\n        total *= se\n    return total\n", "lm_post_processed_edit_distance": 4}, {"image_id": 54, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 141.0, "y": 213.0, "w": 662.0, "h": 101.0, "line_num": 1, "text": "det multiply (numbon);"}, {"x": 314.0, "y": 373.0, "w": 279.0, "h": 73.0, "line_num": 2, "text": "total = 0"}, {"x": 325.0, "y": 485.0, "w": 558.0, "h": 72.0, "line_num": 3, "text": "for se in numbers;"}, {"x": 476.0, "y": 603.0, "w": 301.0, "h": 70.0, "line_num": 4, "text": "total* * = Je"}, {"x": 351.0, "y": 698.0, "w": 440.0, "h": 66.0, "line_num": 5, "text": "return total"}, {"x": 800.0, "y": 667.0, "w": 247.0, "h": 52.0, "line_num": 6, "text": "moppepo"}, {"x": 653.0, "y": 1054.0, "w": 299.0, "h": 67.0, "line_num": 7, "text": "ppor care."}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 107.35714285714286, "ir_algo_output_code": "det multiply (numbon);\n    total = 0\n    for se in numbers;\n        total* * = Je\n    return total\n                moppepo\n            ppor care.\n", "ir_algo_output_indented_lines": [{"x": 141.0, "y": 213.0, "w": 662.0, "h": 101.0, "line_num": 1, "text": "det multiply (numbon);", "cluster_label": 4, "indentation": 0}, {"x": 314.0, "y": 373.0, "w": 279.0, "h": 73.0, "line_num": 2, "text": "total = 0", "cluster_label": 0, "indentation": 1}, {"x": 325.0, "y": 485.0, "w": 558.0, "h": 72.0, "line_num": 3, "text": "for se in numbers;", "cluster_label": 0, "indentation": 1}, {"x": 476.0, "y": 603.0, "w": 301.0, "h": 70.0, "line_num": 4, "text": "total* * = Je", "cluster_label": 3, "indentation": 2}, {"x": 351.0, "y": 698.0, "w": 440.0, "h": 66.0, "line_num": 5, "text": "return total", "cluster_label": 0, "indentation": 1}, {"x": 800.0, "y": 667.0, "w": 247.0, "h": 52.0, "line_num": 6, "text": "moppepo", "cluster_label": 1, "indentation": 4}, {"x": 653.0, "y": 1054.0, "w": 299.0, "h": 67.0, "line_num": 7, "text": "ppor care.", "cluster_label": 2, "indentation": 3}], "ir_algo_output_edit_distance": 60, "prompting_method": "simple-test2", "lm_post_processed_code": "def multiply(numbers):\n    total = 0\n    for se in numbers:\n        total *= se\n    return total\n", "lm_post_processed_edit_distance": 4}, {"image_id": 54, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 141.0, "y": 213.0, "w": 662.0, "h": 101.0, "line_num": 1, "text": "det multiply (numbon);"}, {"x": 314.0, "y": 373.0, "w": 279.0, "h": 73.0, "line_num": 2, "text": "total = 0"}, {"x": 325.0, "y": 485.0, "w": 558.0, "h": 72.0, "line_num": 3, "text": "for se in numbers;"}, {"x": 476.0, "y": 603.0, "w": 301.0, "h": 70.0, "line_num": 4, "text": "total* * = Je"}, {"x": 351.0, "y": 698.0, "w": 440.0, "h": 66.0, "line_num": 5, "text": "return total"}, {"x": 800.0, "y": 667.0, "w": 247.0, "h": 52.0, "line_num": 6, "text": "moppepo"}, {"x": 653.0, "y": 1054.0, "w": 299.0, "h": 67.0, "line_num": 7, "text": "ppor care."}], "ir_algo_name": "meanshift-v1", "ir_algo_param_bandwidth": "estimated", "ir_algo_param_estimated_bandwidth": 107.35714285714286, "ir_algo_output_code": "det multiply (numbon);\n    total = 0\n    for se in numbers;\n        total* * = Je\n    return total\n                moppepo\n            ppor care.\n", "ir_algo_output_indented_lines": [{"x": 141.0, "y": 213.0, "w": 662.0, "h": 101.0, "line_num": 1, "text": "det multiply (numbon);", "cluster_label": 4, "indentation": 0}, {"x": 314.0, "y": 373.0, "w": 279.0, "h": 73.0, "line_num": 2, "text": "total = 0", "cluster_label": 0, "indentation": 1}, {"x": 325.0, "y": 485.0, "w": 558.0, "h": 72.0, "line_num": 3, "text": "for se in numbers;", "cluster_label": 0, "indentation": 1}, {"x": 476.0, "y": 603.0, "w": 301.0, "h": 70.0, "line_num": 4, "text": "total* * = Je", "cluster_label": 3, "indentation": 2}, {"x": 351.0, "y": 698.0, "w": 440.0, "h": 66.0, "line_num": 5, "text": "return total", "cluster_label": 0, "indentation": 1}, {"x": 800.0, "y": 667.0, "w": 247.0, "h": 52.0, "line_num": 6, "text": "moppepo", "cluster_label": 1, "indentation": 4}, {"x": 653.0, "y": 1054.0, "w": 299.0, "h": 67.0, "line_num": 7, "text": "ppor care.", "cluster_label": 2, "indentation": 3}], "ir_algo_output_edit_distance": 60, "prompting_method": "simple-test3", "lm_post_processed_code": "def multiply(numbers):\n    total = 0\n    for se in numbers:\n        total *= se\n    return total\n", "lm_post_processed_edit_distance": 4}, {"image_id": 54, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 141.0, "y": 213.0, "w": 662.0, "h": 101.0, "line_num": 1, "text": "det multiply (numbon);"}, {"x": 314.0, "y": 373.0, "w": 279.0, "h": 73.0, "line_num": 2, "text": "total = 0"}, {"x": 325.0, "y": 485.0, "w": 558.0, "h": 72.0, "line_num": 3, "text": "for se in numbers;"}, {"x": 476.0, "y": 603.0, "w": 301.0, "h": 70.0, "line_num": 4, "text": "total* * = Je"}, {"x": 351.0, "y": 698.0, "w": 440.0, "h": 66.0, "line_num": 5, "text": "return total"}, {"x": 800.0, "y": 667.0, "w": 247.0, "h": 52.0, "line_num": 6, "text": "moppepo"}, {"x": 653.0, "y": 1054.0, "w": 299.0, "h": 67.0, "line_num": 7, "text": "ppor care."}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "det multiply (numbon);\n    total = 0\n    for se in numbers;\n        total* * = Je\n    return total\n        moppepo\n        ppor care.\n", "ir_algo_output_indented_lines": [{"x": 141.0, "y": 213.0, "w": 662.0, "h": 101.0, "line_num": 1, "text": "det multiply (numbon);", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 314.0, "y": 373.0, "w": 279.0, "h": 73.0, "line_num": 2, "text": "total = 0", "delta": 173.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 325.0, "y": 485.0, "w": 558.0, "h": 72.0, "line_num": 3, "text": "for se in numbers;", "delta": 11.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 476.0, "y": 603.0, "w": 301.0, "h": 70.0, "line_num": 4, "text": "total* * = Je", "delta": 151.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 351.0, "y": 698.0, "w": 440.0, "h": 66.0, "line_num": 5, "text": "return total", "delta": -125.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 800.0, "y": 667.0, "w": 247.0, "h": 52.0, "line_num": 6, "text": "moppepo", "delta": 449.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 653.0, "y": 1054.0, "w": 299.0, "h": 67.0, "line_num": 7, "text": "ppor care.", "delta": -147.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}], "ir_algo_output_edit_distance": 48, "prompting_method": "none", "lm_post_processed_code": "det multiply (numbon);\n    total = 0\n    for se in numbers;\n        total* * = Je\n    return total\n        moppepo\n        ppor care.\n", "lm_post_processed_edit_distance": 48}, {"image_id": 54, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 141.0, "y": 213.0, "w": 662.0, "h": 101.0, "line_num": 1, "text": "det multiply (numbon);"}, {"x": 314.0, "y": 373.0, "w": 279.0, "h": 73.0, "line_num": 2, "text": "total = 0"}, {"x": 325.0, "y": 485.0, "w": 558.0, "h": 72.0, "line_num": 3, "text": "for se in numbers;"}, {"x": 476.0, "y": 603.0, "w": 301.0, "h": 70.0, "line_num": 4, "text": "total* * = Je"}, {"x": 351.0, "y": 698.0, "w": 440.0, "h": 66.0, "line_num": 5, "text": "return total"}, {"x": 800.0, "y": 667.0, "w": 247.0, "h": 52.0, "line_num": 6, "text": "moppepo"}, {"x": 653.0, "y": 1054.0, "w": 299.0, "h": 67.0, "line_num": 7, "text": "ppor care."}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "det multiply (numbon);\n    total = 0\n    for se in numbers;\n        total* * = Je\n    return total\n        moppepo\n        ppor care.\n", "ir_algo_output_indented_lines": [{"x": 141.0, "y": 213.0, "w": 662.0, "h": 101.0, "line_num": 1, "text": "det multiply (numbon);", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 314.0, "y": 373.0, "w": 279.0, "h": 73.0, "line_num": 2, "text": "total = 0", "delta": 173.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 325.0, "y": 485.0, "w": 558.0, "h": 72.0, "line_num": 3, "text": "for se in numbers;", "delta": 11.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 476.0, "y": 603.0, "w": 301.0, "h": 70.0, "line_num": 4, "text": "total* * = Je", "delta": 151.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 351.0, "y": 698.0, "w": 440.0, "h": 66.0, "line_num": 5, "text": "return total", "delta": -125.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 800.0, "y": 667.0, "w": 247.0, "h": 52.0, "line_num": 6, "text": "moppepo", "delta": 449.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 653.0, "y": 1054.0, "w": 299.0, "h": 67.0, "line_num": 7, "text": "ppor care.", "delta": -147.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}], "ir_algo_output_edit_distance": 48, "prompting_method": "cot-test1", "lm_post_processed_code": "def multiply (numbers):\n    total = 0\n    for se in numbers:\n        total *= se\n    return total\n", "lm_post_processed_edit_distance": 5}, {"image_id": 54, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 141.0, "y": 213.0, "w": 662.0, "h": 101.0, "line_num": 1, "text": "det multiply (numbon);"}, {"x": 314.0, "y": 373.0, "w": 279.0, "h": 73.0, "line_num": 2, "text": "total = 0"}, {"x": 325.0, "y": 485.0, "w": 558.0, "h": 72.0, "line_num": 3, "text": "for se in numbers;"}, {"x": 476.0, "y": 603.0, "w": 301.0, "h": 70.0, "line_num": 4, "text": "total* * = Je"}, {"x": 351.0, "y": 698.0, "w": 440.0, "h": 66.0, "line_num": 5, "text": "return total"}, {"x": 800.0, "y": 667.0, "w": 247.0, "h": 52.0, "line_num": 6, "text": "moppepo"}, {"x": 653.0, "y": 1054.0, "w": 299.0, "h": 67.0, "line_num": 7, "text": "ppor care."}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "det multiply (numbon);\n    total = 0\n    for se in numbers;\n        total* * = Je\n    return total\n        moppepo\n        ppor care.\n", "ir_algo_output_indented_lines": [{"x": 141.0, "y": 213.0, "w": 662.0, "h": 101.0, "line_num": 1, "text": "det multiply (numbon);", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 314.0, "y": 373.0, "w": 279.0, "h": 73.0, "line_num": 2, "text": "total = 0", "delta": 173.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 325.0, "y": 485.0, "w": 558.0, "h": 72.0, "line_num": 3, "text": "for se in numbers;", "delta": 11.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 476.0, "y": 603.0, "w": 301.0, "h": 70.0, "line_num": 4, "text": "total* * = Je", "delta": 151.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 351.0, "y": 698.0, "w": 440.0, "h": 66.0, "line_num": 5, "text": "return total", "delta": -125.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 800.0, "y": 667.0, "w": 247.0, "h": 52.0, "line_num": 6, "text": "moppepo", "delta": 449.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 653.0, "y": 1054.0, "w": 299.0, "h": 67.0, "line_num": 7, "text": "ppor care.", "delta": -147.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}], "ir_algo_output_edit_distance": 48, "prompting_method": "cot-test5", "lm_post_processed_code": "def multiply(numbers):\ntotal = 0\nfor se in numbers:\n    total *= se\nreturn total\n", "lm_post_processed_edit_distance": 20}, {"image_id": 54, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 141.0, "y": 213.0, "w": 662.0, "h": 101.0, "line_num": 1, "text": "det multiply (numbon);"}, {"x": 314.0, "y": 373.0, "w": 279.0, "h": 73.0, "line_num": 2, "text": "total = 0"}, {"x": 325.0, "y": 485.0, "w": 558.0, "h": 72.0, "line_num": 3, "text": "for se in numbers;"}, {"x": 476.0, "y": 603.0, "w": 301.0, "h": 70.0, "line_num": 4, "text": "total* * = Je"}, {"x": 351.0, "y": 698.0, "w": 440.0, "h": 66.0, "line_num": 5, "text": "return total"}, {"x": 800.0, "y": 667.0, "w": 247.0, "h": 52.0, "line_num": 6, "text": "moppepo"}, {"x": 653.0, "y": 1054.0, "w": 299.0, "h": 67.0, "line_num": 7, "text": "ppor care."}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "det multiply (numbon);\n    total = 0\n    for se in numbers;\n        total* * = Je\n    return total\n        moppepo\n        ppor care.\n", "ir_algo_output_indented_lines": [{"x": 141.0, "y": 213.0, "w": 662.0, "h": 101.0, "line_num": 1, "text": "det multiply (numbon);", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 314.0, "y": 373.0, "w": 279.0, "h": 73.0, "line_num": 2, "text": "total = 0", "delta": 173.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 325.0, "y": 485.0, "w": 558.0, "h": 72.0, "line_num": 3, "text": "for se in numbers;", "delta": 11.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 476.0, "y": 603.0, "w": 301.0, "h": 70.0, "line_num": 4, "text": "total* * = Je", "delta": 151.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 351.0, "y": 698.0, "w": 440.0, "h": 66.0, "line_num": 5, "text": "return total", "delta": -125.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 800.0, "y": 667.0, "w": 247.0, "h": 52.0, "line_num": 6, "text": "moppepo", "delta": 449.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 653.0, "y": 1054.0, "w": 299.0, "h": 67.0, "line_num": 7, "text": "ppor care.", "delta": -147.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}], "ir_algo_output_edit_distance": 48, "prompting_method": "simple-test2", "lm_post_processed_code": "def multiply(numbers):\n    total = 0\n    for se in numbers:\n        total *= se\n    return total\n", "lm_post_processed_edit_distance": 4}, {"image_id": 54, "image_height": 1560, "image_width": 1170, "ocr_provider": "Azure", "ocr_ouptut": [{"x": 141.0, "y": 213.0, "w": 662.0, "h": 101.0, "line_num": 1, "text": "det multiply (numbon);"}, {"x": 314.0, "y": 373.0, "w": 279.0, "h": 73.0, "line_num": 2, "text": "total = 0"}, {"x": 325.0, "y": 485.0, "w": 558.0, "h": 72.0, "line_num": 3, "text": "for se in numbers;"}, {"x": 476.0, "y": 603.0, "w": 301.0, "h": 70.0, "line_num": 4, "text": "total* * = Je"}, {"x": 351.0, "y": 698.0, "w": 440.0, "h": 66.0, "line_num": 5, "text": "return total"}, {"x": 800.0, "y": 667.0, "w": 247.0, "h": 52.0, "line_num": 6, "text": "moppepo"}, {"x": 653.0, "y": 1054.0, "w": 299.0, "h": 67.0, "line_num": 7, "text": "ppor care."}], "ir_algo_name": "gaussian-v1", "ir_algo_param_negative_delta_cluster_method": "nearest_ancestor", "ir_algo_output_code": "det multiply (numbon);\n    total = 0\n    for se in numbers;\n        total* * = Je\n    return total\n        moppepo\n        ppor care.\n", "ir_algo_output_indented_lines": [{"x": 141.0, "y": 213.0, "w": 662.0, "h": 101.0, "line_num": 1, "text": "det multiply (numbon);", "delta": null, "delta_type": null, "gaussian_prediction": null, "cluster_label": 0}, {"x": 314.0, "y": 373.0, "w": 279.0, "h": 73.0, "line_num": 2, "text": "total = 0", "delta": 173.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 1}, {"x": 325.0, "y": 485.0, "w": 558.0, "h": 72.0, "line_num": 3, "text": "for se in numbers;", "delta": 11.0, "delta_type": "positive", "gaussian_prediction": "0", "cluster_label": 1}, {"x": 476.0, "y": 603.0, "w": 301.0, "h": 70.0, "line_num": 4, "text": "total* * = Je", "delta": 151.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 351.0, "y": 698.0, "w": 440.0, "h": 66.0, "line_num": 5, "text": "return total", "delta": -125.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 1}, {"x": 800.0, "y": 667.0, "w": 247.0, "h": 52.0, "line_num": 6, "text": "moppepo", "delta": 449.0, "delta_type": "positive", "gaussian_prediction": "1", "cluster_label": 2}, {"x": 653.0, "y": 1054.0, "w": 299.0, "h": 67.0, "line_num": 7, "text": "ppor care.", "delta": -147.0, "delta_type": "negative", "gaussian_prediction": null, "cluster_label": 2}], "ir_algo_output_edit_distance": 48, "prompting_method": "simple-test3", "lm_post_processed_code": "def multiply(numbers):\n    total = 0\n    for se in numbers:\n        total *= se\n    return total\n", "lm_post_processed_edit_distance": 4}, {"image_id": 49, "image_height": 1560, "image_width": 1170, "ocr_provider": "GPT4-vision", "ocr_ouptut": "def CountFrequency(my_list):\n    freq = { }\n    for item in my_list:\n        freq[item] += 1\n    return freq\n", "ir_algo_name": "none", "ir_algo_output_code": "def CountFrequency(my_list):\n    freq = { }\n    for item in my_list:\n        freq[item] += 1\n    return freq\n", "ir_algo_output_edit_distance": 1, "prompting_method": "none", "lm_post_processed_code": "def CountFrequency(my_list):\n    freq = { }\n    for item in my_list:\n        freq[item] += 1\n    return freq\n", "lm_post_processed_edit_distance": 1}, {"image_id": 8, "image_height": 1600, "image_width": 1200, "ocr_provider": "GPT4-vision", "ocr_ouptut": "from karel.stanfordkarel import *\n\ndef main():\n    move()\n    move()\n    turn_right()\n    move()\n    turn_left()\n    move()\n    pick_beeper()\n    return_home()\n\ndef return_home():\n    turn_around()\n    move()\n    turn_right()\n    move()\n    turn_left()\n    move()\n    move()\n    turn_around()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\n\ndef turn_around():\n    for i in range(2):\n        turn_left()\nif __name__ == '__main__':\n    main()\n", "ir_algo_name": "none", "ir_algo_output_code": "from karel.stanfordkarel import *\n\ndef main():\n    move()\n    move()\n    turn_right()\n    move()\n    turn_left()\n    move()\n    pick_beeper()\n    return_home()\n\ndef return_home():\n    turn_around()\n    move()\n    turn_right()\n    move()\n    turn_left()\n    move()\n    move()\n    turn_around()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\n\ndef turn_around():\n    for i in range(2):\n        turn_left()\nif __name__ == '__main__':\n    main()\n", "ir_algo_output_edit_distance": 3, "prompting_method": "none", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    move()\n    move()\n    turn_right()\n    move()\n    turn_left()\n    move()\n    pick_beeper()\n    return_home()\n\ndef return_home():\n    turn_around()\n    move()\n    turn_right()\n    move()\n    turn_left()\n    move()\n    move()\n    turn_around()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\n\ndef turn_around():\n    for i in range(2):\n        turn_left()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 3}, {"image_id": 14, "image_height": 1676, "image_width": 2917, "ocr_provider": "GPT4-vision", "ocr_ouptut": "def factorial(n):\n    if n==0:\n        return 1\n    else:\n        return n * factorial(n-1)\nprint(factorial(5))\n", "ir_algo_name": "none", "ir_algo_output_code": "def factorial(n):\n    if n==0:\n        return 1\n    else:\n        return n * factorial(n-1)\nprint(factorial(5))\n", "ir_algo_output_edit_distance": 4, "prompting_method": "none", "lm_post_processed_code": "def factorial(n):\n    if n==0:\n        return 1\n    else:\n        return n * factorial(n-1)\nprint(factorial(5))\n", "lm_post_processed_edit_distance": 4}, {"image_id": 29, "image_height": 2980, "image_width": 2016, "ocr_provider": "GPT4-vision", "ocr_ouptut": "def main():\n    \"\"\"\n    The program should determine whether the given year is a leap year\n    divisible by 4, divisible by 100 but also by 400).\n    \"\"\"\n    print('This program will help you identify if a given year is a leap year or not.')\n    print(' ')\n    identify_a_leap_year()\n    ask_for_a_new_year_to_identify()\n\ndef identify_a_leap_year():\n    print('Please input a year below (in number form).')\n    Year = int(input('Year: '))\n    print(' ')\n    if (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):\n        print('The Year ' + str(Year) + ' is a leap year.')\n    else:\n        print('The Year ' + str(Year) + ' is not a leap year.')\n\ndef ask_for_a_new_year_to_identify():\n    while True:\n        print(' ')\n        ask = input('Do you want to identify a new year? Yes/No: ')\n        print(' ')\n        if ask == 'Yes' or ask == 'yes':\n            identify_a_leap_year()\n        elif ask == 'No' or ask == 'no':\n            print('Thank you. See you again!')\n            break\n        elif ask != 'Yes' or ask != 'yes' or ask != 'No' or ask != 'no':\n            print('Wrong keyword. Please type the exact keyword.')\nif __name__ == '__main__':\n    main()\n", "ir_algo_name": "none", "ir_algo_output_code": "def main():\n    \"\"\"\n    The program should determine whether the given year is a leap year\n    divisible by 4, divisible by 100 but also by 400).\n    \"\"\"\n    print('This program will help you identify if a given year is a leap year or not.')\n    print(' ')\n    identify_a_leap_year()\n    ask_for_a_new_year_to_identify()\n\ndef identify_a_leap_year():\n    print('Please input a year below (in number form).')\n    Year = int(input('Year: '))\n    print(' ')\n    if (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):\n        print('The Year ' + str(Year) + ' is a leap year.')\n    else:\n        print('The Year ' + str(Year) + ' is not a leap year.')\n\ndef ask_for_a_new_year_to_identify():\n    while True:\n        print(' ')\n        ask = input('Do you want to identify a new year? Yes/No: ')\n        print(' ')\n        if ask == 'Yes' or ask == 'yes':\n            identify_a_leap_year()\n        elif ask == 'No' or ask == 'no':\n            print('Thank you. See you again!')\n            break\n        elif ask != 'Yes' or ask != 'yes' or ask != 'No' or ask != 'no':\n            print('Wrong keyword. Please type the exact keyword.')\nif __name__ == '__main__':\n    main()\n", "ir_algo_output_edit_distance": 60, "prompting_method": "none", "lm_post_processed_code": "def main():\n    \"\"\"\n    The program should determine whether the given year is a leap year\n    divisible by 4, divisible by 100 but also by 400).\n    \"\"\"\n    print('This program will help you identify if a given year is a leap year or not.')\n    print(' ')\n    identify_a_leap_year()\n    ask_for_a_new_year_to_identify()\n\ndef identify_a_leap_year():\n    print('Please input a year below (in number form).')\n    Year = int(input('Year: '))\n    print(' ')\n    if (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):\n        print('The Year ' + str(Year) + ' is a leap year.')\n    else:\n        print('The Year ' + str(Year) + ' is not a leap year.')\n\ndef ask_for_a_new_year_to_identify():\n    while True:\n        print(' ')\n        ask = input('Do you want to identify a new year? Yes/No: ')\n        print(' ')\n        if ask == 'Yes' or ask == 'yes':\n            identify_a_leap_year()\n        elif ask == 'No' or ask == 'no':\n            print('Thank you. See you again!')\n            break\n        elif ask != 'Yes' or ask != 'yes' or ask != 'No' or ask != 'no':\n            print('Wrong keyword. Please type the exact keyword.')\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 60}, {"image_id": 15, "image_height": 1565, "image_width": 1186, "ocr_provider": "GPT4-vision", "ocr_ouptut": "def main():\n    list1 = [[1, 2], [3, 4]]\n    list2 = [5, 6, 7, 8]\n    for elem1 in list1:\n        for elem2 in list2:\n            if elem1[1] == elem2:\n                list2.remove(elem2)\n    list1.append(list2)\nprint(list1)\n", "ir_algo_name": "none", "ir_algo_output_code": "def main():\n    list1 = [[1, 2], [3, 4]]\n    list2 = [5, 6, 7, 8]\n    for elem1 in list1:\n        for elem2 in list2:\n            if elem1[1] == elem2:\n                list2.remove(elem2)\n    list1.append(list2)\nprint(list1)\n", "ir_algo_output_edit_distance": 58, "prompting_method": "none", "lm_post_processed_code": "def main():\n    list1 = [[1, 2], [3, 4]]\n    list2 = [5, 6, 7, 8]\n    for elem1 in list1:\n        for elem2 in list2:\n            if elem1[1] == elem2:\n                list2.remove(elem2)\n    list1.append(list2)\nprint(list1)\n", "lm_post_processed_edit_distance": 58}, {"image_id": 16, "image_height": 581, "image_width": 1475, "ocr_provider": "GPT4-vision", "ocr_ouptut": "String = input()\nprint (String[::-1])\n", "ir_algo_name": "none", "ir_algo_output_code": "String = input()\nprint (String[::-1])\n", "ir_algo_output_edit_distance": 1, "prompting_method": "none", "lm_post_processed_code": "String = input()\nprint (String[::-1])\n", "lm_post_processed_edit_distance": 1}, {"image_id": 12, "image_height": 4032, "image_width": 3024, "ocr_provider": "GPT4-vision", "ocr_ouptut": "from graphics import CANVAS\nCANVAS_WIDTH = 300\nCANVAS_HEIGHT = 300\nCIRCLE_SIZE = 20\nDELAY = 0.01\n\ndef main():\n    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)\n    while True:\n        mouse_x = canvas.get_mouse_x()\n        mouse_y = canvas.get_mouse_y()\n        if mouse_x >= 0 and mouse_x <= CANVAS_WIDTH \n        and mouse_y >= 0 and mouse_y <= CANVAS_HEIGHT\n", "ir_algo_name": "none", "ir_algo_output_code": "from graphics import CANVAS\nCANVAS_WIDTH = 300\nCANVAS_HEIGHT = 300\nCIRCLE_SIZE = 20\nDELAY = 0.01\n\ndef main():\n    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)\n    while True:\n        mouse_x = canvas.get_mouse_x()\n        mouse_y = canvas.get_mouse_y()\n        if mouse_x >= 0 and mouse_x <= CANVAS_WIDTH \n        and mouse_y >= 0 and mouse_y <= CANVAS_HEIGHT\n", "ir_algo_output_edit_distance": 21, "prompting_method": "none", "lm_post_processed_code": "from graphics import CANVAS\nCANVAS_WIDTH = 300\nCANVAS_HEIGHT = 300\nCIRCLE_SIZE = 20\nDELAY = 0.01\n\ndef main():\n    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)\n    while True:\n        mouse_x = canvas.get_mouse_x()\n        mouse_y = canvas.get_mouse_y()\n        if mouse_x >= 0 and mouse_x <= CANVAS_WIDTH \n        and mouse_y >= 0 and mouse_y <= CANVAS_HEIGHT\n", "lm_post_processed_edit_distance": 21}, {"image_id": 13, "image_height": 1600, "image_width": 1200, "ocr_provider": "GPT4-vision", "ocr_ouptut": "# 1 karel Problem - karel home\nfrom karel.stanfordkarel import *\n# This program defines a main function which should make karel\n# move to the beepick it up and return home.\n\ndef main():\n    get_out()\n    pick_food()\n    get_back_home()\n# pre : karel facing east, at the corner of starting position\n# post: karel facing east, outside the home, at the position of beeper\n\ndef get_out():\n    turn_right()\n    move()\n    turn_left()\n    move()\n    move()\n    move()\n# post : karel facing west at the position of beeper\n\ndef pick_food():\n    pick_beeper()\n    turn_around()\n# post : karel facing east, at the corner of starting position\n\ndef get_back_home():\n    move()\n    move()\n    move()\n    turn_right()\n    move()\n    turn_right()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\n\ndef turn_around():\n    turn_left()\n    turn_left()\nif __name__ == '__main__':\n    main()\n", "ir_algo_name": "none", "ir_algo_output_code": "# 1 karel Problem - karel home\nfrom karel.stanfordkarel import *\n# This program defines a main function which should make karel\n# move to the beepick it up and return home.\n\ndef main():\n    get_out()\n    pick_food()\n    get_back_home()\n# pre : karel facing east, at the corner of starting position\n# post: karel facing east, outside the home, at the position of beeper\n\ndef get_out():\n    turn_right()\n    move()\n    turn_left()\n    move()\n    move()\n    move()\n# post : karel facing west at the position of beeper\n\ndef pick_food():\n    pick_beeper()\n    turn_around()\n# post : karel facing east, at the corner of starting position\n\ndef get_back_home():\n    move()\n    move()\n    move()\n    turn_right()\n    move()\n    turn_right()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\n\ndef turn_around():\n    turn_left()\n    turn_left()\nif __name__ == '__main__':\n    main()\n", "ir_algo_output_edit_distance": 13, "prompting_method": "none", "lm_post_processed_code": "# 1 karel Problem - karel home\nfrom karel.stanfordkarel import *\n# This program defines a main function which should make karel\n# move to the beepick it up and return home.\n\ndef main():\n    get_out()\n    pick_food()\n    get_back_home()\n# pre : karel facing east, at the corner of starting position\n# post: karel facing east, outside the home, at the position of beeper\n\ndef get_out():\n    turn_right()\n    move()\n    turn_left()\n    move()\n    move()\n    move()\n# post : karel facing west at the position of beeper\n\ndef pick_food():\n    pick_beeper()\n    turn_around()\n# post : karel facing east, at the corner of starting position\n\ndef get_back_home():\n    move()\n    move()\n    move()\n    turn_right()\n    move()\n    turn_right()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\n\ndef turn_around():\n    turn_left()\n    turn_left()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 13}, {"image_id": 10, "image_height": 1246, "image_width": 3355, "ocr_provider": "GPT4-vision", "ocr_ouptut": "def main():\n    string = str(input('Enter string: '))\n    for i in range(len(string)-1, -1, -1):\n        print(string[i])\n", "ir_algo_name": "none", "ir_algo_output_code": "def main():\n    string = str(input('Enter string: '))\n    for i in range(len(string)-1, -1, -1):\n        print(string[i])\n", "ir_algo_output_edit_distance": 6, "prompting_method": "none", "lm_post_processed_code": "def main():\n    string = str(input('Enter string: '))\n    for i in range(len(string)-1, -1, -1):\n        print(string[i])\n", "lm_post_processed_edit_distance": 6}, {"image_id": 38, "image_height": 1400, "image_width": 1050, "ocr_provider": "GPT4-vision", "ocr_ouptut": "def main():\ninput_string = input('Input string: ')\nret = \"\"\nfor ch in input_string:\n    ret = ret + ch.upper()\nprint ret\nif __name__ == '__main__':\nmain()\n", "ir_algo_name": "none", "ir_algo_output_code": "def main():\ninput_string = input('Input string: ')\nret = \"\"\nfor ch in input_string:\n    ret = ret + ch.upper()\nprint ret\nif __name__ == '__main__':\nmain()\n", "ir_algo_output_edit_distance": 24, "prompting_method": "none", "lm_post_processed_code": "def main():\ninput_string = input('Input string: ')\nret = \"\"\nfor ch in input_string:\n    ret = ret + ch.upper()\nprint ret\nif __name__ == '__main__':\nmain()\n", "lm_post_processed_edit_distance": 24}, {"image_id": 35, "image_height": 1621, "image_width": 2971, "ocr_provider": "GPT4-vision", "ocr_ouptut": "list1 = [1,2,3,4,5,6,7,8,8]\neven = [i for i in list1 if i%2==0]\nPrint (even)\n", "ir_algo_name": "none", "ir_algo_output_code": "list1 = [1,2,3,4,5,6,7,8,8]\neven = [i for i in list1 if i%2==0]\nPrint (even)\n", "ir_algo_output_edit_distance": 15, "prompting_method": "none", "lm_post_processed_code": "list1 = [1,2,3,4,5,6,7,8,8]\neven = [i for i in list1 if i%2==0]\nPrint (even)\n", "lm_post_processed_edit_distance": 15}, {"image_id": 34, "image_height": 1894, "image_width": 2840, "ocr_provider": "GPT4-vision", "ocr_ouptut": "list1 = [1, 2, 3, 47]\nlist2 = [3, 4 , 5, 6]\nlist3 = [i for i in list1 if i in list2]\nprint(list3)\n", "ir_algo_name": "none", "ir_algo_output_code": "list1 = [1, 2, 3, 47]\nlist2 = [3, 4 , 5, 6]\nlist3 = [i for i in list1 if i in list2]\nprint(list3)\n", "ir_algo_output_edit_distance": 2, "prompting_method": "none", "lm_post_processed_code": "list1 = [1, 2, 3, 47]\nlist2 = [3, 4 , 5, 6]\nlist3 = [i for i in list1 if i in list2]\nprint(list3)\n", "lm_post_processed_edit_distance": 2}, {"image_id": 20, "image_height": 2287, "image_width": 1620, "ocr_provider": "GPT4-vision", "ocr_ouptut": "from karel.stanfordkarel import *\n\ndef main():\n    turn_left()\n    while front_is_clear():\n        turn_rigth()\n        fill_row()\n        return_to_home()\n        jump_row()\n        turn_right()\n        fill_row()\n        return_to_home()\n    while front_is_clear():\n        move()\n\ndef fill_row():\n    while front_is_clear():\n        put_beeper()\n        move()\n    put_beeper()\n", "ir_algo_name": "none", "ir_algo_output_code": "from karel.stanfordkarel import *\n\ndef main():\n    turn_left()\n    while front_is_clear():\n        turn_rigth()\n        fill_row()\n        return_to_home()\n        jump_row()\n        turn_right()\n        fill_row()\n        return_to_home()\n    while front_is_clear():\n        move()\n\ndef fill_row():\n    while front_is_clear():\n        put_beeper()\n        move()\n    put_beeper()\n", "ir_algo_output_edit_distance": 14, "prompting_method": "none", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    turn_left()\n    while front_is_clear():\n        turn_rigth()\n        fill_row()\n        return_to_home()\n        jump_row()\n        turn_right()\n        fill_row()\n        return_to_home()\n    while front_is_clear():\n        move()\n\ndef fill_row():\n    while front_is_clear():\n        put_beeper()\n        move()\n    put_beeper()\n", "lm_post_processed_edit_distance": 14}, {"image_id": 36, "image_height": 1696, "image_width": 2260, "ocr_provider": "GPT4-vision", "ocr_ouptut": "def main():\n    year = int(input())\n    if (year% 4 == 0 and year% 100 != 0):\n        print(\"True\")\n    elif (year% 100 ==0 and year% 400 ==0):\n        print(\"True\")\n    else:\n        print(\"False\")\n\nif __name__ == \"__main__\":\n    main()\n", "ir_algo_name": "none", "ir_algo_output_code": "def main():\n    year = int(input())\n    if (year% 4 == 0 and year% 100 != 0):\n        print(\"True\")\n    elif (year% 100 ==0 and year% 400 ==0):\n        print(\"True\")\n    else:\n        print(\"False\")\n\nif __name__ == \"__main__\":\n    main()\n", "ir_algo_output_edit_distance": 10, "prompting_method": "none", "lm_post_processed_code": "def main():\n    year = int(input())\n    if (year% 4 == 0 and year% 100 != 0):\n        print(\"True\")\n    elif (year% 100 ==0 and year% 400 ==0):\n        print(\"True\")\n    else:\n        print(\"False\")\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 10}, {"image_id": 22, "image_height": 2165, "image_width": 2795, "ocr_provider": "GPT4-vision", "ocr_ouptut": "#karel needs to move to the bottom of the next arch to commen\n#hence building the next column.\n#Precondition: karel is facing east at the next column site.\n#post-condtion: karel is facing east at the next column site.\n\ndef move_to_next_arch_bottom():\n    if front_is_clear():\n        for i in range(4):\n            move()\n\ndef turn_around():\n    turn_left()\n    turn_left()\nif __name__ == '__main__':\n    main()\n", "ir_algo_name": "none", "ir_algo_output_code": "#karel needs to move to the bottom of the next arch to commen\n#hence building the next column.\n#Precondition: karel is facing east at the next column site.\n#post-condtion: karel is facing east at the next column site.\n\ndef move_to_next_arch_bottom():\n    if front_is_clear():\n        for i in range(4):\n            move()\n\ndef turn_around():\n    turn_left()\n    turn_left()\nif __name__ == '__main__':\n    main()\n", "ir_algo_output_edit_distance": 42, "prompting_method": "none", "lm_post_processed_code": "#karel needs to move to the bottom of the next arch to commen\n#hence building the next column.\n#Precondition: karel is facing east at the next column site.\n#post-condtion: karel is facing east at the next column site.\n\ndef move_to_next_arch_bottom():\n    if front_is_clear():\n        for i in range(4):\n            move()\n\ndef turn_around():\n    turn_left()\n    turn_left()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 42}, {"image_id": 23, "image_height": 4160, "image_width": 3120, "ocr_provider": "GPT4-vision", "ocr_ouptut": "def find_lrgst_smallest(numbers):\n    if not numbers:\n        return none\n    smallest = largest = number[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    return smallest, largest\n#Example usage:\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nresult = find_lrgst_smallest(numbers)\nprint(result)\n", "ir_algo_name": "none", "ir_algo_output_code": "def find_lrgst_smallest(numbers):\n    if not numbers:\n        return none\n    smallest = largest = number[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    return smallest, largest\n#Example usage:\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nresult = find_lrgst_smallest(numbers)\nprint(result)\n", "ir_algo_output_edit_distance": 5, "prompting_method": "none", "lm_post_processed_code": "def find_lrgst_smallest(numbers):\n    if not numbers:\n        return none\n    smallest = largest = number[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    return smallest, largest\n#Example usage:\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nresult = find_lrgst_smallest(numbers)\nprint(result)\n", "lm_post_processed_edit_distance": 5}, {"image_id": 37, "image_height": 4032, "image_width": 3024, "ocr_provider": "GPT4-vision", "ocr_ouptut": "from karel.stanfordkarel import *\n\ndef main():\n    build_column()\n    step_up()\n    build_column()\n    step_up()\n    build_column()\n    step_up()\n    build_column()\n\ndef build_column():\n    turn_left()\n    build_beeper()\n    build_beeper()\n    build_beeper()\n    build_beeper()\n    put_beeper()\n\ndef go_back():\n    turn_left()\n\ndef build_beeper():\n    put_beeper()\n    move()\n\ndef go_back():\n    turn_around()\n    step_up()\n\ndef turn_around():\n    turn_left()\n    turn_left()\n\ndef step_up():\n    move()\n    move()\n    move()\n    move()\nif __name__ == '__main__':\n    main()\n", "ir_algo_name": "none", "ir_algo_output_code": "from karel.stanfordkarel import *\n\ndef main():\n    build_column()\n    step_up()\n    build_column()\n    step_up()\n    build_column()\n    step_up()\n    build_column()\n\ndef build_column():\n    turn_left()\n    build_beeper()\n    build_beeper()\n    build_beeper()\n    build_beeper()\n    put_beeper()\n\ndef go_back():\n    turn_left()\n\ndef build_beeper():\n    put_beeper()\n    move()\n\ndef go_back():\n    turn_around()\n    step_up()\n\ndef turn_around():\n    turn_left()\n    turn_left()\n\ndef step_up():\n    move()\n    move()\n    move()\n    move()\nif __name__ == '__main__':\n    main()\n", "ir_algo_output_edit_distance": 8, "prompting_method": "none", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    build_column()\n    step_up()\n    build_column()\n    step_up()\n    build_column()\n    step_up()\n    build_column()\n\ndef build_column():\n    turn_left()\n    build_beeper()\n    build_beeper()\n    build_beeper()\n    build_beeper()\n    put_beeper()\n\ndef go_back():\n    turn_left()\n\ndef build_beeper():\n    put_beeper()\n    move()\n\ndef go_back():\n    turn_around()\n    step_up()\n\ndef turn_around():\n    turn_left()\n    turn_left()\n\ndef step_up():\n    move()\n    move()\n    move()\n    move()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 8}, {"image_id": 33, "image_height": 1602, "image_width": 2962, "ocr_provider": "GPT4-vision", "ocr_ouptut": "Word = input()\nWord = \"\".join([i for i in Word[::-1]])\nPrint(Word)\n", "ir_algo_name": "none", "ir_algo_output_code": "Word = input()\nWord = \"\".join([i for i in Word[::-1]])\nPrint(Word)\n", "ir_algo_output_edit_distance": 2, "prompting_method": "none", "lm_post_processed_code": "Word = input()\nWord = \"\".join([i for i in Word[::-1]])\nPrint(Word)\n", "lm_post_processed_edit_distance": 2}, {"image_id": 18, "image_height": 2057, "image_width": 4134, "ocr_provider": "GPT4-vision", "ocr_ouptut": "def main ():\n    string = str(input('Enter string: '))\n    for i in range(((len(string))-1),-1,-1):\n        print(string[i])\nif __name__=='__main__':\n    main()\n", "ir_algo_name": "none", "ir_algo_output_code": "def main ():\n    string = str(input('Enter string: '))\n    for i in range(((len(string))-1),-1,-1):\n        print(string[i])\nif __name__=='__main__':\n    main()\n", "ir_algo_output_edit_distance": 13, "prompting_method": "none", "lm_post_processed_code": "def main ():\n    string = str(input('Enter string: '))\n    for i in range(((len(string))-1),-1,-1):\n        print(string[i])\nif __name__=='__main__':\n    main()\n", "lm_post_processed_edit_distance": 13}, {"image_id": 30, "image_height": 2447, "image_width": 2798, "ocr_provider": "GPT4-vision", "ocr_ouptut": "sum = 0\nnumber = input()\nfor i in number:\n    sum += int(i)\nprint(sum)\n", "ir_algo_name": "none", "ir_algo_output_code": "sum = 0\nnumber = input()\nfor i in number:\n    sum += int(i)\nprint(sum)\n", "ir_algo_output_edit_distance": 1, "prompting_method": "none", "lm_post_processed_code": "sum = 0\nnumber = input()\nfor i in number:\n    sum += int(i)\nprint(sum)\n", "lm_post_processed_edit_distance": 1}, {"image_id": 31, "image_height": 2096, "image_width": 2957, "ocr_provider": "GPT4-vision", "ocr_ouptut": "def factorial (n):\n    if n <= 1:\n        return 1\n    else:\n        return factorial(n-1) * n\nPrint(factorial(int(input())))\n", "ir_algo_name": "none", "ir_algo_output_code": "def factorial (n):\n    if n <= 1:\n        return 1\n    else:\n        return factorial(n-1) * n\nPrint(factorial(int(input())))\n", "ir_algo_output_edit_distance": 4, "prompting_method": "none", "lm_post_processed_code": "def factorial (n):\n    if n <= 1:\n        return 1\n    else:\n        return factorial(n-1) * n\nPrint(factorial(int(input())))\n", "lm_post_processed_edit_distance": 4}, {"image_id": 25, "image_height": 3393, "image_width": 2984, "ocr_provider": "GPT4-vision", "ocr_ouptut": "def is_prime(n):\n\"\"\"\nReturns True if n is prime, False otherwise.\n\"\"\"\nif n <= 1:\n    return False\nfor i in range(2, int(n**0.5)+1):\n    if n % i == 0:\n        return False\nreturn True\n\ndef main():\n\"\"\"\nThe main function.\n\"\"\"\nn = int(input(\"Enter a number: \"))\nif is_prime(n):\n    print(n, 'is a prime number.')\nelse:\n    print(n, 'is not a prime number.)\n\nif __name__ == \"__main__\":\n    main()\n", "ir_algo_name": "none", "ir_algo_output_code": "def is_prime(n):\n\"\"\"\nReturns True if n is prime, False otherwise.\n\"\"\"\nif n <= 1:\n    return False\nfor i in range(2, int(n**0.5)+1):\n    if n % i == 0:\n        return False\nreturn True\n\ndef main():\n\"\"\"\nThe main function.\n\"\"\"\nn = int(input(\"Enter a number: \"))\nif is_prime(n):\n    print(n, 'is a prime number.')\nelse:\n    print(n, 'is not a prime number.)\n\nif __name__ == \"__main__\":\n    main()\n", "ir_algo_output_edit_distance": 74, "prompting_method": "none", "lm_post_processed_code": "def is_prime(n):\n\"\"\"\nReturns True if n is prime, False otherwise.\n\"\"\"\nif n <= 1:\n    return False\nfor i in range(2, int(n**0.5)+1):\n    if n % i == 0:\n        return False\nreturn True\n\ndef main():\n\"\"\"\nThe main function.\n\"\"\"\nn = int(input(\"Enter a number: \"))\nif is_prime(n):\n    print(n, 'is a prime number.')\nelse:\n    print(n, 'is not a prime number.)\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 74}, {"image_id": 19, "image_height": 2048, "image_width": 1536, "ocr_provider": "GPT4-vision", "ocr_ouptut": "def main():\n    num = int(input(\"Enter a number: \"))\n    print(f\"{num} is {'prime' if is_prime(num) else 'not prime'}\")\n\ndef is_prime(n):\n    if n <= 1:\n        return false\n    elif n <= 3:\n        return True\n    elif n%2 == 0 or n%3 == 0:\n        return false\n    for i in range(5, int(n**0.5)+1, 6):\n        if n%i == 0 or n%(i+2) == 0:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n", "ir_algo_name": "none", "ir_algo_output_code": "def main():\n    num = int(input(\"Enter a number: \"))\n    print(f\"{num} is {'prime' if is_prime(num) else 'not prime'}\")\n\ndef is_prime(n):\n    if n <= 1:\n        return false\n    elif n <= 3:\n        return True\n    elif n%2 == 0 or n%3 == 0:\n        return false\n    for i in range(5, int(n**0.5)+1, 6):\n        if n%i == 0 or n%(i+2) == 0:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n", "ir_algo_output_edit_distance": 14, "prompting_method": "none", "lm_post_processed_code": "def main():\n    num = int(input(\"Enter a number: \"))\n    print(f\"{num} is {'prime' if is_prime(num) else 'not prime'}\")\n\ndef is_prime(n):\n    if n <= 1:\n        return false\n    elif n <= 3:\n        return True\n    elif n%2 == 0 or n%3 == 0:\n        return false\n    for i in range(5, int(n**0.5)+1, 6):\n        if n%i == 0 or n%(i+2) == 0:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 14}, {"image_id": 42, "image_height": 4032, "image_width": 2268, "ocr_provider": "GPT4-vision", "ocr_ouptut": "def main:\n    While front_is_clear():\n        move()\n    if front_is_blocked():\n        turn_around()\n    move()\n    turn_left()\n    move()\n    pick_beeper()\n    turn_left()\n    turn_left()\n    While frone_is_clear():\n        move()\n    if front_is_blocked():\n        turn_around()\n        move()\n        turn_around()\n\ndef turn_around():\n    for i in range(3)\n        turn_left()\n", "ir_algo_name": "none", "ir_algo_output_code": "def main:\n    While front_is_clear():\n        move()\n    if front_is_blocked():\n        turn_around()\n    move()\n    turn_left()\n    move()\n    pick_beeper()\n    turn_left()\n    turn_left()\n    While frone_is_clear():\n        move()\n    if front_is_blocked():\n        turn_around()\n        move()\n        turn_around()\n\ndef turn_around():\n    for i in range(3)\n        turn_left()\n", "ir_algo_output_edit_distance": 46, "prompting_method": "none", "lm_post_processed_code": "def main:\n    While front_is_clear():\n        move()\n    if front_is_blocked():\n        turn_around()\n    move()\n    turn_left()\n    move()\n    pick_beeper()\n    turn_left()\n    turn_left()\n    While frone_is_clear():\n        move()\n    if front_is_blocked():\n        turn_around()\n        move()\n        turn_around()\n\ndef turn_around():\n    for i in range(3)\n        turn_left()\n", "lm_post_processed_edit_distance": 46}, {"image_id": 5, "image_height": 1169, "image_width": 2599, "ocr_provider": "GPT4-vision", "ocr_ouptut": "def main():\n    num=input(\"enter the number you wat to add\")\n    Sum = 0\n    for i in str(num):\n        Sum = Sum+ int(i)\n    Print (\"Sum of the value you entered is\", Sum)\n", "ir_algo_name": "none", "ir_algo_output_code": "def main():\n    num=input(\"enter the number you wat to add\")\n    Sum = 0\n    for i in str(num):\n        Sum = Sum+ int(i)\n    Print (\"Sum of the value you entered is\", Sum)\n", "ir_algo_output_edit_distance": 11, "prompting_method": "none", "lm_post_processed_code": "def main():\n    num=input(\"enter the number you wat to add\")\n    Sum = 0\n    for i in str(num):\n        Sum = Sum+ int(i)\n    Print (\"Sum of the value you entered is\", Sum)\n", "lm_post_processed_edit_distance": 11}, {"image_id": 43, "image_height": 1600, "image_width": 1303, "ocr_provider": "GPT4-vision", "ocr_ouptut": "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 = 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n\ndef main():\n    year = int(input(\"Enter a year: \"))\n    is_leap = is_leap_year(year)\n    print(is_leap)\n\nif __name__ == \"__main__\":\n    main()\n", "ir_algo_name": "none", "ir_algo_output_code": "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 = 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n\ndef main():\n    year = int(input(\"Enter a year: \"))\n    is_leap = is_leap_year(year)\n    print(is_leap)\n\nif __name__ == \"__main__\":\n    main()\n", "ir_algo_output_edit_distance": 1, "prompting_method": "none", "lm_post_processed_code": "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 = 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n\ndef main():\n    year = int(input(\"Enter a year: \"))\n    is_leap = is_leap_year(year)\n    print(is_leap)\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 1}, {"image_id": 41, "image_height": 2456, "image_width": 2303, "ocr_provider": "GPT4-vision", "ocr_ouptut": "def filter_string_a(string):\n    string.sort()\n    filtered_string_list = []\n    for str in string:\n        if str.startswith(\"a\"):\n            filtered_string_list append (str)\n    return filtered_string_list\ninput_string = [\"apple\", \"banana\", \"avocado\", \"cherry\", \"apricot\"]\noutput = filter_string_a(input_string)\nprint(output)\n", "ir_algo_name": "none", "ir_algo_output_code": "def filter_string_a(string):\n    string.sort()\n    filtered_string_list = []\n    for str in string:\n        if str.startswith(\"a\"):\n            filtered_string_list append (str)\n    return filtered_string_list\ninput_string = [\"apple\", \"banana\", \"avocado\", \"cherry\", \"apricot\"]\noutput = filter_string_a(input_string)\nprint(output)\n", "ir_algo_output_edit_distance": 26, "prompting_method": "none", "lm_post_processed_code": "def filter_string_a(string):\n    string.sort()\n    filtered_string_list = []\n    for str in string:\n        if str.startswith(\"a\"):\n            filtered_string_list append (str)\n    return filtered_string_list\ninput_string = [\"apple\", \"banana\", \"avocado\", \"cherry\", \"apricot\"]\noutput = filter_string_a(input_string)\nprint(output)\n", "lm_post_processed_edit_distance": 26}, {"image_id": 40, "image_height": 3936, "image_width": 1980, "ocr_provider": "GPT4-vision", "ocr_ouptut": "from karel.stanfordkarel import *\n\ndef main():\n    while front_is_clear():\n        fill_tower()\n\ndef fill_tower():\n    while front_is_clear():\n        put_beeper()\n        move()\n    put_beeper()\n    column_return()\n\ndef column_return():\n    while front_is_blocked():\n        turn_around()\n    while front_is_clear():\n        move()\n    next_tower()\n\ndef turn_around():\n    for i in range(2):\n        turn_left()\n\ndef next_tower():\n    if right_is_clear():\n        turn_right()\n        move()\n        turn_right()\n    else:\n        turn_around()\n        while front_is_clear():\n            move()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\nif __name__ == '__main__':\n    main()\n", "ir_algo_name": "none", "ir_algo_output_code": "from karel.stanfordkarel import *\n\ndef main():\n    while front_is_clear():\n        fill_tower()\n\ndef fill_tower():\n    while front_is_clear():\n        put_beeper()\n        move()\n    put_beeper()\n    column_return()\n\ndef column_return():\n    while front_is_blocked():\n        turn_around()\n    while front_is_clear():\n        move()\n    next_tower()\n\ndef turn_around():\n    for i in range(2):\n        turn_left()\n\ndef next_tower():\n    if right_is_clear():\n        turn_right()\n        move()\n        turn_right()\n    else:\n        turn_around()\n        while front_is_clear():\n            move()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\nif __name__ == '__main__':\n    main()\n", "ir_algo_output_edit_distance": 3, "prompting_method": "none", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    while front_is_clear():\n        fill_tower()\n\ndef fill_tower():\n    while front_is_clear():\n        put_beeper()\n        move()\n    put_beeper()\n    column_return()\n\ndef column_return():\n    while front_is_blocked():\n        turn_around()\n    while front_is_clear():\n        move()\n    next_tower()\n\ndef turn_around():\n    for i in range(2):\n        turn_left()\n\ndef next_tower():\n    if right_is_clear():\n        turn_right()\n        move()\n        turn_right()\n    else:\n        turn_around()\n        while front_is_clear():\n            move()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 3}, {"image_id": 54, "image_height": 1560, "image_width": 1170, "ocr_provider": "GPT4-vision", "ocr_ouptut": "def multiply(numbers):\n    total = 0\n    for xe in numbers:\n        total *= xe\n    return total\n", "ir_algo_name": "none", "ir_algo_output_code": "def multiply(numbers):\n    total = 0\n    for xe in numbers:\n        total *= xe\n    return total\n", "ir_algo_output_edit_distance": 2, "prompting_method": "none", "lm_post_processed_code": "def multiply(numbers):\n    total = 0\n    for xe in numbers:\n        total *= xe\n    return total\n", "lm_post_processed_edit_distance": 2}, {"image_id": 6, "image_height": 928, "image_width": 3201, "ocr_provider": "GPT4-vision", "ocr_ouptut": "user_input = input(\"Write your string here: \")\nupper = user_input.upper()\nprint (upper)\n", "ir_algo_name": "none", "ir_algo_output_code": "user_input = input(\"Write your string here: \")\nupper = user_input.upper()\nprint (upper)\n", "ir_algo_output_edit_distance": 1, "prompting_method": "none", "lm_post_processed_code": "user_input = input(\"Write your string here: \")\nupper = user_input.upper()\nprint (upper)\n", "lm_post_processed_edit_distance": 1}, {"image_id": 2, "image_height": 1098, "image_width": 1280, "ocr_provider": "GPT4-vision", "ocr_ouptut": "def main():\n    # input\n    my_word = input(\"Enter the original word: \")\n    # function calling\n    reversed_word = reverse(my_word)\n    print(\"The original word is \"+ \" \" + \"reversed_word\")\n# Helper Function\n\ndef reverse(word):\n    # reversed word\n    new_word = ''\n    # sort by char\n    for char in word:\n        new_word = char + new_word\n    # return new word\n    return new_word\n\nif __name__ == \"__main__\":\n    main()\n", "ir_algo_name": "none", "ir_algo_output_code": "def main():\n    # input\n    my_word = input(\"Enter the original word: \")\n    # function calling\n    reversed_word = reverse(my_word)\n    print(\"The original word is \"+ \" \" + \"reversed_word\")\n# Helper Function\n\ndef reverse(word):\n    # reversed word\n    new_word = ''\n    # sort by char\n    for char in word:\n        new_word = char + new_word\n    # return new word\n    return new_word\n\nif __name__ == \"__main__\":\n    main()\n", "ir_algo_output_edit_distance": 37, "prompting_method": "none", "lm_post_processed_code": "def main():\n    # input\n    my_word = input(\"Enter the original word: \")\n    # function calling\n    reversed_word = reverse(my_word)\n    print(\"The original word is \"+ \" \" + \"reversed_word\")\n# Helper Function\n\ndef reverse(word):\n    # reversed word\n    new_word = ''\n    # sort by char\n    for char in word:\n        new_word = char + new_word\n    # return new word\n    return new_word\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 37}, {"image_id": 50, "image_height": 1560, "image_width": 1170, "ocr_provider": "GPT4-vision", "ocr_ouptut": "def twoSum(nums, target):\n    for i in range(len(nums)):\n        for p in range(i, len(nums)):\n            if(nums[i] + nums[p] == target):\n                return (i, p)\n", "ir_algo_name": "none", "ir_algo_output_code": "def twoSum(nums, target):\n    for i in range(len(nums)):\n        for p in range(i, len(nums)):\n            if(nums[i] + nums[p] == target):\n                return (i, p)\n", "ir_algo_output_edit_distance": 4, "prompting_method": "none", "lm_post_processed_code": "def twoSum(nums, target):\n    for i in range(len(nums)):\n        for p in range(i, len(nums)):\n            if(nums[i] + nums[p] == target):\n                return (i, p)\n", "lm_post_processed_edit_distance": 4}, {"image_id": 44, "image_height": 2137, "image_width": 2849, "ocr_provider": "GPT4-vision", "ocr_ouptut": "def main():\n    print(\" pro6lem - 5 \")\n    print(\"-----------\")\n    print(\"write an integer numbe1;\")\n    numb = int((input(\"write an integer numben; \")))\n    mak_list = [int(x) for x in str(numb)]\n    add_numb = 0\n    for i in mak_list:\n        add_numb += i\n    print(\"Sum of the numben; \", add_numb)\n\nif __name__ == \"__main__\":\n    main()\n", "ir_algo_name": "none", "ir_algo_output_code": "def main():\n    print(\" pro6lem - 5 \")\n    print(\"-----------\")\n    print(\"write an integer numbe1;\")\n    numb = int((input(\"write an integer numben; \")))\n    mak_list = [int(x) for x in str(numb)]\n    add_numb = 0\n    for i in mak_list:\n        add_numb += i\n    print(\"Sum of the numben; \", add_numb)\n\nif __name__ == \"__main__\":\n    main()\n", "ir_algo_output_edit_distance": 60, "prompting_method": "none", "lm_post_processed_code": "def main():\n    print(\" pro6lem - 5 \")\n    print(\"-----------\")\n    print(\"write an integer numbe1;\")\n    numb = int((input(\"write an integer numben; \")))\n    mak_list = [int(x) for x in str(numb)]\n    add_numb = 0\n    for i in mak_list:\n        add_numb += i\n    print(\"Sum of the numben; \", add_numb)\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 60}, {"image_id": 45, "image_height": 1560, "image_width": 1170, "ocr_provider": "GPT4-vision", "ocr_ouptut": "list = [6,14,5,8,9]\nfor elem in list :\n    max = 0\n    if elem > max :\n        max = elem\nreturn max\n", "ir_algo_name": "none", "ir_algo_output_code": "list = [6,14,5,8,9]\nfor elem in list :\n    max = 0\n    if elem > max :\n        max = elem\nreturn max\n", "ir_algo_output_edit_distance": 6, "prompting_method": "none", "lm_post_processed_code": "list = [6,14,5,8,9]\nfor elem in list :\n    max = 0\n    if elem > max :\n        max = elem\nreturn max\n", "lm_post_processed_edit_distance": 6}, {"image_id": 3, "image_height": 465, "image_width": 595, "ocr_provider": "GPT4-vision", "ocr_ouptut": "input_number = \nint(input('Enter number:'))\nval = input_number\nresult = input_number\nwhile (val > 1):\n    val = val - 1\n    result = result * val\nprint('factorial of' + str(input_nubmer)\n+ str(result))\n", "ir_algo_name": "none", "ir_algo_output_code": "input_number = \nint(input('Enter number:'))\nval = input_number\nresult = input_number\nwhile (val > 1):\n    val = val - 1\n    result = result * val\nprint('factorial of' + str(input_nubmer)\n+ str(result))\n", "ir_algo_output_edit_distance": 23, "prompting_method": "none", "lm_post_processed_code": "input_number = \nint(input('Enter number:'))\nval = input_number\nresult = input_number\nwhile (val > 1):\n    val = val - 1\n    result = result * val\nprint('factorial of' + str(input_nubmer)\n+ str(result))\n", "lm_post_processed_edit_distance": 23}, {"image_id": 53, "image_height": 1560, "image_width": 1170, "ocr_provider": "GPT4-vision", "ocr_ouptut": "def upper_lower_count(str):\n    upper_case = 0\n    lower_case = 0\n    for char in str:\n        if char.isupper():\n            upper_case += 1\n        else;\n            lower_case += 1\n    return upper_case, lower_case\n", "ir_algo_name": "none", "ir_algo_output_code": "def upper_lower_count(str):\n    upper_case = 0\n    lower_case = 0\n    for char in str:\n        if char.isupper():\n            upper_case += 1\n        else;\n            lower_case += 1\n    return upper_case, lower_case\n", "ir_algo_output_edit_distance": 1, "prompting_method": "none", "lm_post_processed_code": "def upper_lower_count(str):\n    upper_case = 0\n    lower_case = 0\n    for char in str:\n        if char.isupper():\n            upper_case += 1\n        else;\n            lower_case += 1\n    return upper_case, lower_case\n", "lm_post_processed_edit_distance": 1}, {"image_id": 52, "image_height": 1560, "image_width": 1170, "ocr_provider": "GPT4-vision", "ocr_ouptut": "def even_or_odd(number):\n    if number / 2 == 0:\n        return \"Even\"\n    if number / 2 != 0:\n        return \"Odd\"\n", "ir_algo_name": "none", "ir_algo_output_code": "def even_or_odd(number):\n    if number / 2 == 0:\n        return \"Even\"\n    if number / 2 != 0:\n        return \"Odd\"\n", "ir_algo_output_edit_distance": 0, "prompting_method": "none", "lm_post_processed_code": "def even_or_odd(number):\n    if number / 2 == 0:\n        return \"Even\"\n    if number / 2 != 0:\n        return \"Odd\"\n", "lm_post_processed_edit_distance": 0}, {"image_id": 0, "image_height": 4032, "image_width": 2268, "ocr_provider": "GPT4-vision", "ocr_ouptut": "num = int(input(\"Enter a number: \"))\nans = 1\nwhile num > 1:\n    ans*= num\n    num -= 1\nprint(ans)\n", "ir_algo_name": "none", "ir_algo_output_code": "num = int(input(\"Enter a number: \"))\nans = 1\nwhile num > 1:\n    ans*= num\n    num -= 1\nprint(ans)\n", "ir_algo_output_edit_distance": 12, "prompting_method": "none", "lm_post_processed_code": "num = int(input(\"Enter a number: \"))\nans = 1\nwhile num > 1:\n    ans*= num\n    num -= 1\nprint(ans)\n", "lm_post_processed_edit_distance": 12}, {"image_id": 46, "image_height": 1560, "image_width": 1170, "ocr_provider": "GPT4-vision", "ocr_ouptut": "def palindromic(str):\n    for i in range(int(len(str)/2)):\n        if str[i] != str[len(str)-i]:\n            return False\n    return True\n", "ir_algo_name": "none", "ir_algo_output_code": "def palindromic(str):\n    for i in range(int(len(str)/2)):\n        if str[i] != str[len(str)-i]:\n            return False\n    return True\n", "ir_algo_output_edit_distance": 4, "prompting_method": "none", "lm_post_processed_code": "def palindromic(str):\n    for i in range(int(len(str)/2)):\n        if str[i] != str[len(str)-i]:\n            return False\n    return True\n", "lm_post_processed_edit_distance": 4}]