[{"image_id": 0, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "num = int(input(\"Enter a number: \"))\nAns = 1\nwhile num > 1:\n    Ans *= num\n    num -= 1\nreturn Ans\n", "lm_post_processed_edit_distance": 0}, {"image_id": 1, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "from karel.stanfordkarel import *\n#This program makes Karel pick up\n#a beeper and go back into her house.\n\ndef main():\n    #Move to the beeper.\n    move_beeper()\n    #Pick the beeper up.\n    pick_beeper()\n    #Return to Karel's starting point.\n    go_back()\n#This function moves Karel to the beeper.\n\ndef move_beeper():\n    for j in range(2):\n        move()\n    turn_right()\n    move()\n    turn_left()\n    move()\n# this function return to Karel's starting point.\n\ndef go_back():\n    for i in range(2):\n        turn_left()\n    for i in range(3):\n        move()\n    turn_right()\n    move()\n    turn_right()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 11}, {"image_id": 2, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "def main():\n    # input\n    my_word = input('Enter the original word: ')\n    # function calling\n    reversed_word = reverse(my_word)\n    print('The reversed word is: ' + reversed_word)\n# Helper function\n\ndef reverse(word):\n    # reversed_word\n    new_word = ''\n    # sort by char\n    for char in word:\n        new_word = char + new_word\n    # return\n    return new_word\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 29}, {"image_id": 3, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "input_number = int(input('Enter number:'))\nval = input_number\nresult = input_number\nwhile (val > 1):\n    val = val - 1\n    result = result * val\nprint('factorial of ' + str(input_number) + ' is ' + str(result))\n", "lm_post_processed_edit_distance": 14}, {"image_id": 4, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "def main():\n    num = input('input :')\n    sum = 0\n    for h in num:\n        sum += int(h)\n    print(sum)\n", "lm_post_processed_edit_distance": 6}, {"image_id": 5, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "def main():\n    num = input('enter the number you want to add')\n    Sum = 0\n    for i in str(num):\n        Sum = Sum + int(i)\n    print('Sum of the value you entered is', Sum)\n", "lm_post_processed_edit_distance": 9}, {"image_id": 6, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "user_input = input(\"Write your string here:\")\nupper = user_input.upper()\nprint(upper)\n", "lm_post_processed_edit_distance": 1}, {"image_id": 7, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "from karel.stanfordkarel import *\n\"\"\"\nKarel should fill the world with beepers.\n\"\"\"\n\ndef main():\n    # decomposition using a function name for\n    # each associated activity\n    while left_is_clear():\n        fill_one_row()\n        return_to_row_start()\n        move_up()\n    # rewrite code after while loop to overcome\n    # fencepost bug\n    fill_one_row()\n", "lm_post_processed_edit_distance": 6}, {"image_id": 8, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    move()\n    move()\n    turn_right()\n    move()\n    turn_left()\n    move()\n    pick_beeper()\n    return_home()\n\ndef return_home():\n    turn_around()\n    move()\n    turn_right()\n    move()\n    turn_left()\n    move()\n    move()\n    turn_around()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\n\ndef turn_around():\n    for i in range(2):\n        turn_left()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 3}, {"image_id": 9, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "def main():\n    vowel_count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    input_string = input(\"Enter the string: \")\n    input_string = input_string.lower()\n    for char in input_string:\n        for vowel in vowels:\n            if char == vowel:\n                vowel_count += 1\n    print(vowel_count)\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 13}, {"image_id": 10, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "def main():\n    string = str(input('Enter a string:'))\n    for i in range(len(string)-1, -1, -1):\n        print(string[i])\n", "lm_post_processed_edit_distance": 9}, {"image_id": 11, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nseq_even = []\n# It checks every element in list(sequence)---\nfor i in seq:\n    # it decides whether an element from sequence is even---\n    if i % 2 == 0:\n        seq_even.append(i) # appends even i in empty list (seq_even)\nprint(seq_even)\n", "lm_post_processed_edit_distance": 6}, {"image_id": 12, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "from graphics import canvas\nCANVAS_WIDTH = 300\nCANVAS_HEIGHT = 300\nCIRCLE_SIZE = 20\nDELAY = 0,0,0\n\ndef main():\n    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)\n    while True:\n        mouse_x = canvas.get_mouse_x()\n        mouse_y = canvas.get_mouse_y()\n        if mouse_x >= 0 and mouse_x < CANVAS_WIDTH and mouse_y >= 0 and mouse_y < CANVAS_HEIGHT:\n", "lm_post_processed_edit_distance": 14}, {"image_id": 13, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "# 1 karel Problem - karel home\nfrom karel.stanfordkarel import *\n# This program defines a main function which should make karel \n# move to beeper, pick it up and return home.\n\ndef main():\n    get_out()\n    pick_food()\n    get_back_home()\n# pre: karel facing east, at the corner of starting position\n# post: karel facing east, outside the home, at the position of beeper\n\ndef get_out():\n    turn_right()\n    move()\n    turn_left()\n    move()\n    move()\n    move()\n    move()\n# post: karel facing west, at the position of beeper\n\ndef pick_food():\n    pick_beeper()\n\ndef get_back_home():\n    move()\n    move()\n    move()\n    turn_right()\n    move()\n    turn_right()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\n\ndef turn_around():\n    turn_left()\n    turn_left()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 102}, {"image_id": 14, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nprint(factorial(5))\n", "lm_post_processed_edit_distance": 2}, {"image_id": 15, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "def main():\n    lst1 = [1,2,3]\n    lst2 = [3,4,5]\n    lst = []\n    for elem1 in lst1:\n        for elem2 in lst2:\n            if elem1 == elem2:\n                elem = elem1 + elem2\n                lst.append(elem)\n    print(lst)\n", "lm_post_processed_edit_distance": 25}, {"image_id": 16, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "String = input()\nprint(String[::-1])\n", "lm_post_processed_edit_distance": 0}, {"image_id": 17, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    turn_left()\n    turn_N()\n    turn_SC()\n    move_xr()\n    turn_left()\n    turn_N()\n    turn_SC()\n\ndef turn_SC():\n    turn_3x()\n    tower()\n    turn_left()\n\ndef turn_N():\n    tower()\n    turn_3x()\n    move_xr()\n\ndef tower():\n    for i in range(5):\n        if front_is_clear():\n            put_beeper()\n            move()\n        else:\n            put_beeper()\n\ndef turn_3x():\n    turn_left()\n    turn_left()\n    turn_left()\n\ndef move_xr():\n    move()\n    move()\n    move()\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 44}, {"image_id": 18, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "def main():\n    string = str(input('Enter string: '))\n    for i in range(len(string)-1, -1, -1):\n        print(string[i])\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 9}, {"image_id": 19, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "def main():\n    num = int(input(\"Enter a number: \"))\n    print(\"num is prime\" if is_prime(num) else \"not prime\")\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(n * 0.5) + 1):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 16}, {"image_id": 20, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    turn_left()\n    while front_is_clear():\n        turn_right()\n        fill_row()\n        return_to_home()\n        jump_row()\n    turn_right()\n    fill_row()\n    return_to_home()\n    while front_is_clear():\n        move()\n\ndef fill_row():\n    while front_is_clear():\n        put_beeper()\n        move()\n    put_beeper()\n", "lm_post_processed_edit_distance": 0}, {"image_id": 21, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "from stanfordkarel import *\n\"\"\"\nKarel should fill the whole world with beepers.\n\"\"\"\n\ndef main():\n    \"\"\"\n    You should write your code to make Karel do its task in this function.\n    Make sure to delete the pass line before starting to write your own code. You should also delete this comment and replace it with a better, more descriptive one.\n    \"\"\"\n    while not left_is_blocked():\n        put_beeper_line()\n        reset_position()\n        put_beeper_line()\n\ndef put_beeper_line():\n    put_beeper()\n    while front_is_clear():\n        move()\n        put_beeper()\n", "lm_post_processed_edit_distance": 26}, {"image_id": 22, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "#karel needs to move to the bottom of the next arch to commenc.\n#hence building the next column.\n#Precondition: karel is facing east\n#Post-condition: karel is facing east at the next column site.\n\ndef move_to_next_arch_bottom():\n    if front_is_clear():\n        for i in range(4):\n            move()\n\ndef turn_around():\n    turn_left()\n    turn_left()\n    turn_left()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 34}, {"image_id": 23, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "def find_lrgst_smallest(number):\n    if not numbers:\n        return None\n    smallest = largest = number[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    return smallest, largest\n#Example usage:\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nresult = find_lrgst_smallest(numbers)\nprint(result)\n", "lm_post_processed_edit_distance": 5}, {"image_id": 24, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "def main():\n    user_number = input(\"Enter the number: \")\n    result = sum_of_digits(user_number)\n    print(\"The sum of the digits is\", result)\n\ndef sum_of_digits(user_number):\n    number_str = str(user_number)\n    digit_sum = 0  # zero\n    for digit in number_str:\n        digit_sum += int(digit)\n    return digit_sum\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 12}, {"image_id": 25, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "def is_prime(n):\n    \"\"\"\n    Returns True if n is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef main():\n    \"\"\"\n    The main function.\n    \"\"\"\n    n = int(input(\"Enter a number: \"))\n    if is_prime(n):\n        print(n, \"is a prime number.\")\n    else:\n        print(n, \"is not a prime number.\")\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 2}, {"image_id": 26, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "#Reverse String\n\ndef main():\n    str = input(\"Input a string: \")\n    r_str = \"\"\n    for i in str:\n        r_str = i + r_str\n    print(r_str)\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 1}, {"image_id": 27, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "# Write a Python program to find the longest word in a given text\n\ndef main():\n    sentence = input(\"Input a sentence: \")\n    list = sentence.split()\n    l_word = ''\n    for word in list:\n        if len(word) > len(l_word):\n            l_word = word\n    print(l_word)\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 2}, {"image_id": 28, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "def greatest_common_divisor(a,b):\n    smaller_number=a if a<b else b\n    common_divisor=[]\n    for i in range(1, smaller_number+1):\n        if a%i==0 and b%i==0:\n            common_divisor.append(i)\n    return common_divisor[-1]\n", "lm_post_processed_edit_distance": 17}, {"image_id": 29, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "def main():\n    \"\"\"\n    The program should determine whether the given year is a leap year\n    (divisible by 4, divisible by 100 but also by 400).\n    \"\"\"\n    print(\"This program will help you identify if a given year is a leap year or not.\")\n    print(\" \")\n    identify_a_leap_year()\n    ask_for_a_new_year_to_identify()\n\ndef identify_a_leap_year():\n    print(\"Please input a year below (in number form):\")\n    Year = int(input(\"Year: \"))\n    print(\" \")\n    if (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):\n        print(\"The Year \" + str(Year) + \" is a leap year.\")\n    else:\n        print(\"The Year \" + str(Year) + \" is not a leap year.\")\n\ndef ask_for_a_new_year_to_identify():\n    while True:\n        print(\" \")\n        ask = input(\"Do you want to identify a new year? Yes/No: \")\n        print(\" \")\n        if ask == \"Yes\" or ask == \"yes\":\n            identify_a_leap_year()\n        elif ask == \"No\" or ask == \"no\":\n            print(\"Thank you. See you again!\")\n            break\n        elif ask != \"Yes\" or ask != \"yes\" or ask != \"No\" or ask != \"no\":\n            print(\"Wrong keyword. Please type the exact keyword.\")\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 13}, {"image_id": 30, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "sum = 0\nnumber = input()\nfor i in number:\n    sum += int(i)\nprint(sum)\n", "lm_post_processed_edit_distance": 1}, {"image_id": 31, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "def factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return factorial(n-1) * n\nprint(factorial(int(input())))\n", "lm_post_processed_edit_distance": 2}, {"image_id": 32, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "year = int(input())\nif year % 4 == 0 and year % 100 != 0 or year % 400 == 0:\n    print(True)\nelse:\n    print(False)\n", "lm_post_processed_edit_distance": 2}, {"image_id": 33, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "Word = input()\nWord = ''.join(['i' for i in Word[::-1]])\nprint(Word)\n", "lm_post_processed_edit_distance": 7}, {"image_id": 34, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "list1 = [1, 2, 3, 4]\nlist2 = [3, 4, 5, 6]\nlist3 = [i for i in list1 if i in list2]\nprint(list3)\n", "lm_post_processed_edit_distance": 0}, {"image_id": 35, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "list1 = [1,2,3,4,5,6,7,8,9]\neven = [i for i in list1 if i%2==0]\nprint(even)\n", "lm_post_processed_edit_distance": 12}, {"image_id": 36, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "def main():\n    year = int(input())\n    if (year % 4 == 0 and year % 100 != 0):\n        print(\"True\")\n    elif (year % 100 == 0 and year % 400 == 0):\n        print(\"True\")\n    else:\n        print(\"false\")\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 5}, {"image_id": 37, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    build_column()\n    step_up()\n    build_column()\n    step_up()\n    build_column()\n    step_up()\n    build_column()\n\ndef build_column():\n    turn_left()\n    build_beeper()\n    build_beeper()\n    build_beeper()\n    build_beeper()\n    put_beeper()\n\ndef build_beeper():\n    put_beeper()\n    move()\n\ndef go_back():\n    turn_around()\n    step_up()\n\ndef turn_around():\n    turn_left()\n    turn_left()\n\ndef step_up():\n    move()\n    move()\n    move()\n    move()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 33}, {"image_id": 38, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "def main():\n    input_string = (input('Input string: '))\n    ret = \"\"\n    for ch in input_string:\n        ret = ret + ch.upper()\n    print ret\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 2}, {"image_id": 39, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "from Karel.StanfordKarel import *\n\ndef main():\n    move_to_beeper()\n    pick_beeper()\n    turn_around()\n    return_to_start()\n\ndef move_to_beeper():\n    while front_is_clear():\n        move()\n        turn_right()\n        move()\n        turn_left()\n        move()\n\ndef turn_around():\n    turn_left()\n    turn_left()\n", "lm_post_processed_edit_distance": 21}, {"image_id": 40, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "from karel.stanfordkarel import *\n\ndef main():\n    while front_is_clear():\n        fill_tower()\n\ndef fill_tower():\n    while front_is_clear():\n        put_beeper()\n        move()\n    put_beeper()\n    column_return()\n\ndef column_return():\n    while front_is_blocked():\n        turn_around()\n    while front_is_clear():\n        move()\n    next_tower()\n\ndef turn_around():\n    for i in range(2):\n        turn_left()\n\ndef next_tower():\n    if right_is_clear():\n        move()\n        turn_right()\n    else:\n        turn_around()\n        while front_is_clear():\n            move()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\nif __name__ == '__main__':\n    main()\n", "lm_post_processed_edit_distance": 24}, {"image_id": 41, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "def filter_string_a(string):\n    string.sort()\n    filtered_string_list = []\n    for str in string:\n        if str.startswith(\"a\"):\n            filtered_string_list.append(str)\n    return filtered_string_list\ninput_string = [\"apple\", \"banana\", \"avocado\", \"cherry\", \"apricot\"]\noutput = filter_string_a(input_string)\nprint(output)\n", "lm_post_processed_edit_distance": 24}, {"image_id": 42, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "def main():\n    while front_is_clear():\n        move()\n    if front_is_blocked():\n        turn_around()\n    move()\n    turn_left()\n    move()\n    pick_beeper()\n    turn_left()\n    turn_left()\n    while front_is_clear():\n        move()\n    if front_is_blocked():\n        turn_around()\n    move()\n    turn_around()\n\ndef turn_around():\n    for i in range(3):\n        turn_left()\n", "lm_post_processed_edit_distance": 34}, {"image_id": 43, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 = 0:\n            if year % 400 == 0:\n                return True\n            elbe:\n                return False\n        elbe:\n            return False\n    else:\n        return False\n\ndef main():\n    yearc = int(input(\"Enter a year: \"))\n    is_leap = is_leap_year(yearc)\n    print(is_leap)\nif __name__ == \"__ main__\":\n    main()\n", "lm_post_processed_edit_distance": 7}, {"image_id": 44, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "def main():\n    print(\" problem - 5\")\n    print(\"--------------\")\n    print(\"write an integer number; \")\n    numb = int(input())\n    mak_list = [int(x) for x in str(numb)]\n    add_numb = 0\n    for i in mak_list:\n        add_numb += i\n    print(\"sum of the numbers: \", add_numb)\n\nif __name__ == \"__main__\":\n    main()\n", "lm_post_processed_edit_distance": 55}, {"image_id": 45, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "list = [6, 14, 5, 8, 9]\nfor elem in list:\n    max = 0\n    if elem > max:\n        max = elem\nreturn max\n", "lm_post_processed_edit_distance": 0}, {"image_id": 46, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "def palindromic(stro):\n    for i in range(int(len(stro)/2)):\n        if stro[i] != str[len(stro)-i]:\n            return False\n    return True\n", "lm_post_processed_edit_distance": 8}, {"image_id": 47, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "def factorial(n):\n    result = n * factorial(n-1)\n    return result\n", "lm_post_processed_edit_distance": 2}, {"image_id": 48, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "def fibonacci(n):\n    sequence = [0,1]\n    i = 0\n    while len(sequence) <= n:\n        sequence.append(sequence[i+1] + sequence[i+2])\n        i += 1\n    return sequence\nresult = fibonacci(6)\nprint(result)\n", "lm_post_processed_edit_distance": 6}, {"image_id": 49, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "def CountFrequency(my_list):\n    freq = {}\n    for item in my_list:\n        freq[item] += 1\n    return freq\n", "lm_post_processed_edit_distance": 0}, {"image_id": 50, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "def twoSum(nums, target):\n    for i in range(len(nums)):\n        for p in range(i, len(nums)):\n            if(nums[i] + nums[p] == target):\n                return (i, p)\n", "lm_post_processed_edit_distance": 4}, {"image_id": 51, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "def removeDuplicate():\n    for num in duplicate:\n        final_list = []\n        if num not in final_list:\n            final_list.append(num)\n    return final_list\n", "lm_post_processed_edit_distance": 40}, {"image_id": 52, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "def even_or_odd(number):\n    if number / 2 == 0:\n        return \"Even\"\n    if number / 2 != 0:\n        return \"Odd\"\n", "lm_post_processed_edit_distance": 0}, {"image_id": 53, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "def upper_lower_count(str):\n    upper_case = 0\n    lower_case = 0\n    for char in str:\n        if char.isupper():\n            upper_case += 1\n        else:\n            lower_case += 1\n    return upper_case, lower_case\n", "lm_post_processed_edit_distance": 0}, {"image_id": 54, "ocr_provider": "none", "ocr_ouptut": "none", "ir_algo_name": "none", "ir_algo_output_code": "none", "ir_algo_output_edit_distance": 0, "prompting_method": "GPT-4b", "lm_post_processed_code": "def multiply(numbers):\n    total = 0\n    for x in numbers:\n        total *= x\n    return total\n", "lm_post_processed_edit_distance": 0}]