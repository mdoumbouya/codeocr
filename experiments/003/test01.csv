Ground Truth,Azure,Azure ED,1,1 ED,2,2 ED,3,3 ED,4,4 ED,5,5 ED,6,6 ED,7,7 ED,8,8 ED,9,9 ED,10,10 ED,11,11 ED,12,12 ED,13,13 ED,14,14 ED,15,15 ED,16,16 ED,17,17 ED,18,18 ED,19,19 ED,20,20 ED,21,21 ED,22,22 ED,23,23 ED,24,24 ED,25,25 ED,26,26 ED,27,27 ED,28,28 ED,29,29 ED,30,30 ED,31,31 ED,32,32 ED,33,33 ED,34,34 ED,35,35 ED,36,36 ED,37,37 ED,38,38 ED,39,39 ED,40,40 ED,41,41 ED,42,42 ED,43,43 ED,44,44 ED,45,45 ED,46,46 ED,47,47 ED,48,48 ED,49,49 ED,50,50 ED,51,51 ED,52,52 ED,53,53 ED,54,54 ED,55,55 ED,56,56 ED,57,57 ED,58,58 ED,59,59 ED,60,60 ED,61,61 ED,62,62 ED,63,63 ED,64,64 ED,65,65 ED,66,66 ED,67,67 ED,68,68 ED,69,69 ED,70,70 ED,71,71 ED,72,72 ED,73,73 ED,74,74 ED,75,75 ED,76,76 ED,77,77 ED,78,78 ED,79,79 ED,80,80 ED,81,81 ED,82,82 ED,83,83 ED,84,84 ED,85,85 ED,86,86 ED,87,87 ED,88,88 ED,89,89 ED,90,90 ED,91,91 ED,92,92 ED,93,93 ED,94,94 ED,95,95 ED,96,96 ED,97,97 ED,98,98 ED,99,99 ED,100,100 ED
Ground Truth,Azure,Azure ED,1,1 ED,2,2 ED,3,3 ED,4,4 ED,5,5 ED,6,6 ED,7,7 ED,8,8 ED,9,9 ED,10,10 ED,11,11 ED,12,12 ED,13,13 ED,14,14 ED,15,15 ED,16,16 ED,17,17 ED,18,18 ED,19,19 ED,20,20 ED,21,21 ED,22,22 ED,23,23 ED,24,24 ED,25,25 ED,26,26 ED,27,27 ED,28,28 ED,29,29 ED,30,30 ED,31,31 ED,32,32 ED,33,33 ED,34,34 ED,35,35 ED,36,36 ED,37,37 ED,38,38 ED,39,39 ED,40,40 ED,41,41 ED,42,42 ED,43,43 ED,44,44 ED,45,45 ED,46,46 ED,47,47 ED,48,48 ED,49,49 ED,50,50 ED,51,51 ED,52,52 ED,53,53 ED,54,54 ED,55,55 ED,56,56 ED,57,57 ED,58,58 ED,59,59 ED,60,60 ED,61,61 ED,62,62 ED,63,63 ED,64,64 ED,65,65 ED,66,66 ED,67,67 ED,68,68 ED,69,69 ED,70,70 ED,71,71 ED,72,72 ED,73,73 ED,74,74 ED,75,75 ED,76,76 ED,77,77 ED,78,78 ED,79,79 ED,80,80 ED,81,81 ED,82,82 ED,83,83 ED,84,84 ED,85,85 ED,86,86 ED,87,87 ED,88,88 ED,89,89 ED,90,90 ED,91,91 ED,92,92 ED,93,93 ED,94,94 ED,95,95 ED,96,96 ED,97,97 ED,98,98 ED,99,99 ED,100,100 ED
"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
","num = int (input (""Enter a number: ""
Ans =1
while num > 1 :
Ans * = num
num -= 1
return Ans",16,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                num = int (input (""Enter a number: "")
            Ans =1
        while num > 1 :
    Ans * = num
num -= 1
return Ans
",46,"            num = int (input (""Enter a number: "")
        Ans =1
        while num > 1 :
    Ans * = num
num -= 1
return Ans
",38,"        num = int (input (""Enter a number: "")
        Ans =1
    while num > 1 :
    Ans * = num
num -= 1
return Ans
",30,"        num = int (input (""Enter a number: "")
        Ans =1
        while num > 1 :
    Ans * = num
num -= 1
return Ans
",34
"from karel.stanfordkarel import *
# This program makes Karel pick up a beeper and go back into her house.

def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()
# This function moves Karel to the beeper.

def move_beeper():
    for i in range(2):
        move()
    turn_right()
    move()
    turn_left()
    move()
# This function return to Karel's starting point.

def go_back():
    for i in range(2):
        turn_left()
    for i in range(3):
        move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left

if __name__ == ""__main__"":
    main()
","from Karel. stanfordkarel import *
# This program makes Kavel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick- beeper ()
# Return to Karel's starting point.
go - back ()
# This function moves karel to the beeper.
def move-beeper ():
for i in range (2):
move ()
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back ();
For ?. in range (2):
turn-left ()
for i in range (3):
move()
turn right ()
move (),
turn-right ()
def turn-right () ?
for i in range (3):
turn-left
if -- name == ' -- main_';
main ()",173,"                        from Karel. stanfordkarel import *
                    # This program makes Karel pick up
                            a beeper and go back into her house.
                        def main ():
                                                # Move to the beeper.
                                                                move_ beeper ()
                                                # Pick the beeper up.
                                                        pick-beeper ()
                                            # Return to Karel's starting point.
                                                            go- back ()
            # This function moves Karel to the beeper.
            def move_beeper ():
                                                for i in range (2):
                                                                                            move ( )
                                                        turn right ()
                                                                    move ()
                                                                        turn left ()
                                                                            move()
        # this function return to Karel's starting poin
                def 90-back () ;
                                        for i in range (2):
                                                                                    turn-left ()
                                            for i in range (3).
                                                                                        move()
                                                    turn_right ()
                                                                move ()
                                                    turn - right ( )
    def turn-right ( )?
                                    for i in range (3):
                                                                                turn-left
if -- name= = ' __ main __
                                main ()
",1406,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
        # Move to the beeper.
        move_ beeper ()
        # Pick the beeper up.
        pick-beeper ()
        # Return to Karel's starting point.
        go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
        for i in range (2):
                move ( )
        turn right ()
        move ()
        turn left ()
            move()
    # this function return to Karel's starting poin
    def 90-back () ;
        for i in range (2):
                turn-left ()
        for i in range (3).
                move()
        turn_right ()
        move ()
        turn - right ( )
    def turn-right ( )?
        for i in range (3):
            turn-left
if -- name= = ' __ main __
        main ()
",202,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
        # Move to the beeper.
        move_ beeper ()
        # Pick the beeper up.
        pick-beeper ()
        # Return to Karel's starting point.
        go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
        for i in range (2):
        move ( )
        turn right ()
        move ()
        turn left ()
        move()
    # this function return to Karel's starting poin
    def 90-back () ;
        for i in range (2):
        turn-left ()
        for i in range (3).
        move()
        turn_right ()
        move ()
        turn - right ( )
    def turn-right ( )?
        for i in range (3):
        turn-left
if -- name= = ' __ main __
        main ()
",170,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
    # Move to the beeper.
    move_ beeper ()
    # Pick the beeper up.
    pick-beeper ()
    # Return to Karel's starting point.
    go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
    for i in range (2):
    move ( )
    turn right ()
    move ()
    turn left ()
    move()
# this function return to Karel's starting poin
def 90-back () ;
    for i in range (2):
    turn-left ()
    for i in range (3).
    move()
    turn_right ()
    move ()
    turn - right ( )
def turn-right ( )?
    for i in range (3):
    turn-left
if -- name= = ' __ main __
    main ()
",81,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168
"def main():
    # input
    my_word = input(""Enter the original word: "")
    # function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is"" + "" "" + '""' + reversed_word + '""')
# Helper function

def reverse(word):
    # reversed_word
    new_word = """"
    # char by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word

if __name__ == ""__main__"":
    main()
","def main ( ) :
Limput
my _ word = input( Enten- The original word : 7
#Function calling
reversed- word = reverse (my-word )
Print ( the reversed word is (+) ""+""""+reversed-wordt""}
# Helpen- Function
def sevense
be (word) :
# reversed - word
mew-word = """"
A chen by chan-
For- chan- in word:
new-word = Char + new-word
# return
return new_word
name-
main 1 :
main ()",146,"    def main ( ) :
                Himput
                    my_ word = input( Enter The original word: 7
            #Function calling
                        reversed- word = reverse (my-word )
                        Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
    def severse (word) :
                                        # reversed-word
                                            mew-word = """"
                                    A chent by chan-
                                            For- chan- in word :
                                                    new-word = Char + new-word
                                            # return
                                                return new-word
        if
                            name_
                                                        ==
                                                            main1 :
                                main ()
",602,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
        mew-word = """"
    A chent by chan-
        For- chan- in word :
            new-word = Char + new-word
        # return
        return new-word
if
    name_
                ==
                    main1 :
    main ()
",127,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
            ==
                main1 :
    main ()
",99,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
        ==
            main1 :
    main ()
",91,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
    main1 :
main ()
",129,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
    main1 :
main ()
",129,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
    main1 :
main ()
",129,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
new-word = Char + new-word
# return
return new-word
if
name_
==
main1 :
main ()
",131,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
new-word = Char + new-word
# return
return new-word
if
name_
==
main1 :
main ()
",131,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
new-word = Char + new-word
# return
return new-word
if
name_
==
main1 :
main ()
",131
"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial for "" + str(input_nmb) + "" is "" + str(result))
","inpur_number =
int(impur (""Enter number""
Val = inpur-number
result = input-number
While (val>1):
val =
val -1
result = result & val
print ('factorial f& + sur(input-node)
+ spr (result))",50,"    inpur-number =
                                int(impur (Enter number)
                Val = inpur-number
result = input-number
            While (val>1):
                            val =
                                        Val -1
                    L
                        Result = result & val
        print ('factorial f& +shr(input-nale]
                                    + spr (result))
",245,"inpur-number =
        int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
        val =
                Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
            + spr (result))
",77,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
    Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",53,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
    Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",53,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
+ spr (result))
",55,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
+ spr (result))
",55,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
+ spr (result))
",55,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
+ spr (result))
",55
"def main():
    num = input(""input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
","def main () :
num = input (""Input : "")
sum = 0
for n in num :
sum + = int (n)
print (sum)",34,"def main () :
    num = input ("" Input : "" )
        sum = 0
            for h in num :
                    sum + = int (n)
                print ( sum )
",50,"def main () :
    num = input ("" Input : "" )
        sum = 0
        for h in num :
            sum + = int (n)
        print ( sum )
",30,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
num = input ("" Input : "" )
sum = 0
for h in num :
    sum + = int (n)
print ( sum )
",34,"def main () :
num = input ("" Input : "" )
sum = 0
for h in num :
sum + = int (n)
print ( sum )
",38,"def main () :
num = input ("" Input : "" )
sum = 0
for h in num :
sum + = int (n)
print ( sum )
",38,"def main () :
num = input ("" Input : "" )
sum = 0
for h in num :
sum + = int (n)
print ( sum )
",38
"def main():
    num = input(""enter the number you want to add"")
    sum = 0
    for i in str(num):
        sum = sum + int(i)
    print(""sum of the value you entered is"", sum)
","def main () .
08168 TU
11
num = input (""enter the number you want to add )
Som=0
zpnivo
1ovoseidl o prieoorla
hotel
heH
ab
ot ti of no blerl gabelq
for è in str (num) :
Vi inucoDA
Sum = Sum+ int (i)
raltil touo >A
Print (""sum of the value you entered in, som)
00.000
.1
noitosil
noitgo Inemoanu
LFT",154,"        def main ( ) .
                                                            81108 x68.09
                                                                -
                    num = input (""enter the number you want to add )
            Som=0
    apnivoa
talioteb adt ero preHab10591 100Y
                            rot ti of no blerl sabelq
                    for è in str (num):
                                                        tatoO auze
                                                hedmull inuopDA
                        Sum = Sum+ int (i)
                                                    eltil tnuossA
                Print (""sum of the value you entered in, som)
                                    00.000,83
                                        BM
                                nioit
                                            hoitqO Inemoandaid 12516Mil
",728,"    def main ( ) .
                                                81108 x68.09
                                                    -
        num = input (""enter the number you want to add )
        Som=0
apnivoa
talioteb adt ero preHab10591 100Y
                rot ti of no blerl sabelq
        for è in str (num):
                                            tatoO auze
                                    hedmull inuopDA
            Sum = Sum+ int (i)
                                        eltil tnuossA
        Print (""sum of the value you entered in, som)
                        00.000,83
                            BM
                    nioit
                                hoitqO Inemoandaid 12516Mil
",552,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) .
                                81108 x68.09
                                    -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                            tatoO auze
                            hedmull inuopDA
        Sum = Sum+ int (i)
                            eltil tnuossA
    Print (""sum of the value you entered in, som)
                00.000,83
                    BM
            nioit
                        hoitqO Inemoandaid 12516Mil
",424,"def main ( ) .
                            81108 x68.09
                                -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                            tatoO auze
                            hedmull inuopDA
        Sum = Sum+ int (i)
                            eltil tnuossA
    Print (""sum of the value you entered in, som)
                00.000,83
                    BM
            nioit
                        hoitqO Inemoandaid 12516Mil
",416,"def main ( ) .
                        81108 x68.09
                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
        rot ti of no blerl sabelq
    for è in str (num):
                        tatoO auze
                        hedmull inuopDA
        Sum = Sum+ int (i)
                        eltil tnuossA
    Print (""sum of the value you entered in, som)
            00.000,83
                BM
        nioit
                    hoitqO Inemoandaid 12516Mil
",376,"def main ( ) .
                        81108 x68.09
                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
        rot ti of no blerl sabelq
    for è in str (num):
                        tatoO auze
                        hedmull inuopDA
        Sum = Sum+ int (i)
                        eltil tnuossA
    Print (""sum of the value you entered in, som)
            00.000,83
                BM
        nioit
                    hoitqO Inemoandaid 12516Mil
",376,"def main ( ) .
                    81108 x68.09
                        -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
        rot ti of no blerl sabelq
    for è in str (num):
                    tatoO auze
                    hedmull inuopDA
        Sum = Sum+ int (i)
                    eltil tnuossA
    Print (""sum of the value you entered in, som)
            00.000,83
            BM
        nioit
                hoitqO Inemoandaid 12516Mil
",348
"user_input = input(""Write your string here: "")
upper = user_input.upper()
print(upper)
","user-input = input(""write your string here:
11
Upper = user_input. upper()
print (upper)",9,"user-input = input(""write your string here:
            "")
        Upper = user input. upper()
    print (upper)
",30,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10
"from karel.stanfordkarel import *
""""""
Karel should fill the whole world with beepers.
""""""

def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
","from Karel. stanfordkarel import *
hun
Karel should fill the world with keepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()",77,"        from karel. stanfordkarel import *
        Karel should fill the world with beepers.
    1100
def main () :
                        # decomposition using a function name for
                    # each associated activity
                    while left-is-clear ():
                                    fill_one-row()
                                return_to_row-start ()
                            Nove-up()
            # rewrite code after while loop to overcome
            # fencepost bug
                fill-one-row()
",195,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
    # decomposition using a function name for
    # each associated activity
    while left-is-clear ():
        fill_one-row()
        return_to_row-start ()
        Nove-up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill-one-row()
",27,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
    fill_one-row()
    return_to_row-start ()
    Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",63,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75
"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    for i in range(2):
        turn_left()

if __name__ == ""__main__"":
    main()
","from karel. stanfordkarel import*
det main ()
move()
move()
turn-right ()
move()
turn-left()
move()
pick-beeper()
return-home()
def return_home()
turn-around()
move()
turn-right ()
move ()
turn-left ()
move()
move()
turn-around()
det turn-right()
for i in range (3):
turn-left ()
def turn- around()
for i in range (2):
turn-left ()
if
name
== '_main ' :
main()",139,"    from karel. stanfordkarel import*
        def main ()
                            move()
                                move()
                                turn-right ()
                                    move()
                                    turn-left()
                                            move()
                                            pick-beeper()
                                                        return-home()
                def return_home()
                                turn-around()
                                    move()
                                        turn-right()
                                            move ()
                                                turn-left ()
                                                    move()
                                                        move()
                                                    turn-around ()
            det turn-right()
                                            for i in range (3):
                                                                turn-left ()
                    def turn- around()
                                            for i in range (2):
                                                            turn-left ()
if
                        name == '_main' ':
                    main()
",929,"    from karel. stanfordkarel import*
    def main ()
        move()
        move()
        turn-right ()
        move()
        turn-left()
        move()
        pick-beeper()
        return-home()
    def return_home()
        turn-around()
        move()
        turn-right()
        move ()
        turn-left ()
        move()
        move()
        turn-around ()
    det turn-right()
        for i in range (3):
            turn-left ()
    def turn- around()
        for i in range (2):
            turn-left ()
if
    name == '_main' ':
    main()
",141,"    from karel. stanfordkarel import*
    def main ()
        move()
        move()
        turn-right ()
        move()
        turn-left()
        move()
        pick-beeper()
        return-home()
    def return_home()
        turn-around()
        move()
        turn-right()
        move ()
        turn-left ()
        move()
        move()
        turn-around ()
    det turn-right()
        for i in range (3):
            turn-left ()
    def turn- around()
        for i in range (2):
            turn-left ()
if
    name == '_main' ':
    main()
",141,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel. stanfordkarel import*
def main ()
move()
move()
turn-right ()
move()
turn-left()
move()
pick-beeper()
return-home()
def return_home()
turn-around()
move()
turn-right()
move ()
turn-left ()
move()
move()
turn-around ()
det turn-right()
for i in range (3):
turn-left ()
def turn- around()
for i in range (2):
turn-left ()
if
name == '_main' ':
main()
",136,"from karel. stanfordkarel import*
def main ()
move()
move()
turn-right ()
move()
turn-left()
move()
pick-beeper()
return-home()
def return_home()
turn-around()
move()
turn-right()
move ()
turn-left ()
move()
move()
turn-around ()
det turn-right()
for i in range (3):
turn-left ()
def turn- around()
for i in range (2):
turn-left ()
if
name == '_main' ':
main()
",136,"from karel. stanfordkarel import*
def main ()
move()
move()
turn-right ()
move()
turn-left()
move()
pick-beeper()
return-home()
def return_home()
turn-around()
move()
turn-right()
move ()
turn-left ()
move()
move()
turn-around ()
det turn-right()
for i in range (3):
turn-left ()
def turn- around()
for i in range (2):
turn-left ()
if
name == '_main' ':
main()
",136,"from karel. stanfordkarel import*
def main ()
move()
move()
turn-right ()
move()
turn-left()
move()
pick-beeper()
return-home()
def return_home()
turn-around()
move()
turn-right()
move ()
turn-left ()
move()
move()
turn-around ()
det turn-right()
for i in range (3):
turn-left ()
def turn- around()
for i in range (2):
turn-left ()
if
name == '_main' ':
main()
",136,"from karel. stanfordkarel import*
def main ()
move()
move()
turn-right ()
move()
turn-left()
move()
pick-beeper()
return-home()
def return_home()
turn-around()
move()
turn-right()
move ()
turn-left ()
move()
move()
turn-around ()
det turn-right()
for i in range (3):
turn-left ()
def turn- around()
for i in range (2):
turn-left ()
if
name == '_main' ':
main()
",136
"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string: "")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)

if __name__ == ""__main__"":
    main()
","de main () :
vowel-count=0
vowels= ['à','e', 'i', 'o','u']
input_string = input (""Enter the string:"")
input string = input_string . lower ()
for char in input string:
for vowel in vowels :
if char == vawel:
vowel-count +=1
print (nouvel count)
if _name_ = = '_main _- ':
main ()",111,"de main ():
    vowel-count=0
            vowels=['à' ,'e' ,' i','o', 'u']
                input-string = input (""Enter the string:"")
                    input string = input_string . lower ()
                        for char in input string:
                                    for vowel in vowels :
                                        if char == vowel:
                                            vowel-count+=1
                                point (nouvel_count)
        y_name _== '_main __ :
                            main ( )
",247,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
        input-string = input (""Enter the string:"")
            input string = input_string . lower ()
                for char in input string:
                        for vowel in vowels :
                            if char == vowel:
                                vowel-count+=1
                    point (nouvel_count)
    y_name _== '_main __ :
                main ( )
",152,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
            for char in input string:
                for vowel in vowels :
                    if char == vowel:
                        vowel-count+=1
            point (nouvel_count)
    y_name _== '_main __ :
            main ( )
",104,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
        for char in input string:
            for vowel in vowels :
                if char == vowel:
                    vowel-count+=1
            point (nouvel_count)
    y_name _== '_main __ :
        main ( )
",84,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
    input string = input_string . lower ()
        for char in input string:
        for vowel in vowels :
            if char == vowel:
                vowel-count+=1
        point (nouvel_count)
    y_name _== '_main __ :
        main ( )
",64,"de main ():
vowel-count=0
vowels=['à' ,'e' ,' i','o', 'u']
input-string = input (""Enter the string:"")
input string = input_string . lower ()
for char in input string:
for vowel in vowels :
    if char == vowel:
        vowel-count+=1
point (nouvel_count)
y_name _== '_main __ :
main ( )
",105,"de main ():
vowel-count=0
vowels=['à' ,'e' ,' i','o', 'u']
input-string = input (""Enter the string:"")
input string = input_string . lower ()
for char in input string:
for vowel in vowels :
    if char == vowel:
        vowel-count+=1
point (nouvel_count)
y_name _== '_main __ :
main ( )
",105,"de main ():
vowel-count=0
vowels=['à' ,'e' ,' i','o', 'u']
input-string = input (""Enter the string:"")
input string = input_string . lower ()
for char in input string:
for vowel in vowels :
    if char == vowel:
        vowel-count+=1
point (nouvel_count)
y_name _== '_main __ :
main ( )
",105,"de main ():
vowel-count=0
vowels=['à' ,'e' ,' i','o', 'u']
input-string = input (""Enter the string:"")
input string = input_string . lower ()
for char in input string:
for vowel in vowels :
    if char == vowel:
        vowel-count+=1
point (nouvel_count)
y_name _== '_main __ :
main ( )
",105,"de main ():
vowel-count=0
vowels=['à' ,'e' ,' i','o', 'u']
input-string = input (""Enter the string:"")
input string = input_string . lower ()
for char in input string:
for vowel in vowels :
    if char == vowel:
    vowel-count+=1
point (nouvel_count)
y_name _== '_main __ :
main ( )
",109
"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])
","det
main ():
string = str (input ('Enter string: '))
for i in range ((len (string)-1), - 1 ,- 1).
print (string [i])",34,"det main ():
        String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
            print (string [1])
",28,"det main ():
        String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
            print (string [1])
",28,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20
"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It check every element in list(sequence) --
for i in seq:
    # It decides whether an element from sequence is even ---
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list(seq_even)
print(seq_even)
","seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9]
Seg-even=[]
# It checks every element in list (sequence) - --
for i in seg:
# it decides whether an element from sequence is even --.
if i % 2 = = 0:
seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)",43,"        seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
    Seq-even=[]
# It checks every element in list (sequence) -
    for i in seg:
                #it decides whether an element from sequence is even -..
                    if i % 2 == 0 ;
                        seg-even. append (i) # appends even ; in empty list (seq-even)
            print (seg-even)
",99,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
    seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",31,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
#it decides whether an element from sequence is even -..
if i % 2 == 0 ;
seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",43,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
#it decides whether an element from sequence is even -..
if i % 2 == 0 ;
seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",43,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
#it decides whether an element from sequence is even -..
if i % 2 == 0 ;
seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",43,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
#it decides whether an element from sequence is even -..
if i % 2 == 0 ;
seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",43
"from graphics import Canvas
CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01

def main:
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    while TRUE
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if mouse_x >= 0 and mouse_x <= CANVAS_WIDTH and mouse_y >=0 and mouse_y <= CANVAS_HEIGHT
","FROM GRAPHICS IMPORT CANVAS
CANVAS_WIDTH = 300
CANVAS_ HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0,01
DEF MAIN :
CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH)
WHILE TRUE
MOUSE_ X = CANVAS . GET_MOUSE _ X ()
MOUSE- Y = CANVAS . GET MOUSE_ Y ( )
IF MOUSE XT =U AND MOUSE X E CANVAS_WIDTH
AND MOUSELY SEO AND MOUSE-TE CANVAS HEIGH",193,"                FROM GRAPHIES IMPORT CANVAS
            CANVAS WIDTH = 300
    CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
        DELAY = 0, 01
DEF MAIN :
                        CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)
                    WHILE TRUE
                                        MOUSE-X = CANVAS . GET_MOUSE _ X ()
                                MOUSE- Y = CANVAS . GET MOUSE_ Y ( )
                                    IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH
                            AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH
",348,"    FROM GRAPHIES IMPORT CANVAS
CANVAS WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0, 01
DEF MAIN :
        CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)
        WHILE TRUE
                MOUSE-X = CANVAS . GET_MOUSE _ X ()
            MOUSE- Y = CANVAS . GET MOUSE_ Y ( )
            IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH
        AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH
",201,"    FROM GRAPHIES IMPORT CANVAS
CANVAS WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0, 01
DEF MAIN :
    CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)
    WHILE TRUE
        MOUSE-X = CANVAS . GET_MOUSE _ X ()
    MOUSE- Y = CANVAS . GET MOUSE_ Y ( )
    IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH
    AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH
",182,"    FROM GRAPHIES IMPORT CANVAS
CANVAS WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0, 01
DEF MAIN :
    CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)
    WHILE TRUE
    MOUSE-X = CANVAS . GET_MOUSE _ X ()
    MOUSE- Y = CANVAS . GET MOUSE_ Y ( )
    IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH
    AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH
",186,"FROM GRAPHIES IMPORT CANVAS
CANVAS WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0, 01
DEF MAIN :
CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)
WHILE TRUE
MOUSE-X = CANVAS . GET_MOUSE _ X ()
MOUSE- Y = CANVAS . GET MOUSE_ Y ( )
IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH
AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH
",194,"FROM GRAPHIES IMPORT CANVAS
CANVAS WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0, 01
DEF MAIN :
CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)
WHILE TRUE
MOUSE-X = CANVAS . GET_MOUSE _ X ()
MOUSE- Y = CANVAS . GET MOUSE_ Y ( )
IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH
AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH
",194,"FROM GRAPHIES IMPORT CANVAS
CANVAS WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0, 01
DEF MAIN :
CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)
WHILE TRUE
MOUSE-X = CANVAS . GET_MOUSE _ X ()
MOUSE- Y = CANVAS . GET MOUSE_ Y ( )
IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH
AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH
",194,"FROM GRAPHIES IMPORT CANVAS
CANVAS WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0, 01
DEF MAIN :
CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)
WHILE TRUE
MOUSE-X = CANVAS . GET_MOUSE _ X ()
MOUSE- Y = CANVAS . GET MOUSE_ Y ( )
IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH
AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH
",194,"FROM GRAPHIES IMPORT CANVAS
CANVAS WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0, 01
DEF MAIN :
CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)
WHILE TRUE
MOUSE-X = CANVAS . GET_MOUSE _ X ()
MOUSE- Y = CANVAS . GET MOUSE_ Y ( )
IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH
AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH
",194,"FROM GRAPHIES IMPORT CANVAS
CANVAS WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0, 01
DEF MAIN :
CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH8)
WHILE TRUE
MOUSE-X = CANVAS . GET_MOUSE _ X ()
MOUSE- Y = CANVAS . GET MOUSE_ Y ( )
IF MOUSE XT=U AND MOUSE X E CANVAS_WIDTH
AND MOUSELY SE O AND MOUSE-YE CANVAS HEIGH
",194
"# 1 karel Problem - karel Home
from karel.stanfordkarel import *
# This program defines a main function which should make Karel
# move to the beeper, pick it up and return home.

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()

if __name__ == ""__main__"":
    main()
","# 1 karel Problem - Karel home
from Karel. Stanfordkarel import*
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre: Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ()
move ()
turn_ left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn-around ( )
# post: Karel facing east, at the corner of starting position
def get_back_home () :
move ()
Move ()
move ()
turn right ()
move ( )
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == - main -:
main ()",172,"# 1 karel Problem - Karel home
                        from Karel. Stanfordkarel import *
                        # This program defines a main function which should make karel
                    # move to the beeper, pick it up and return home
                            def main () :
                                                    get_Out ()
                                                        pick_food ()
                                                        get back_ home ()
                    # pre : Karel facing east, at the corner of starting position
                    # post: karel facing east, outside the home, at the position of beeper
                    def get_out () :
                                                            turn_right ( )
                                                                move ()
                                                                    turn_left ()
                                                                    move ()
                                                                        move ()
                                                                        move ()
                # post: Karel facing west, at the position of beeper
                    def pick-food ():
                                            pick_beeper ()
                                                turn- around ()
            # post: Karel facing east, at the corner of starting position
                def get_ back_home () :
                                                    move ()
                                                    Move ()
                                                    move ()
                                                    turn right ()
                                                    move ()
                                                        turn right ()
def turn right () ;
                                    for i in range (3) :
                                                                            turn-left ()
    def
                                    turn-around () :
                                        turn_left ()
                                            turn_kft ()
        if_ name_ == '-main -:
                                main ()
",1451,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
    turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",89,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
    turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",89,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169
"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)
print(factorial(5))
","def factorial (n) :
if n=0 :
return 1
else:
return 1 * factorial (n-1)
print (factorial (5)",37,"def factorial (n):
            if n= = 0 :
                    return 1
        else :
                return 1 * factorial (n-1)
    print (factorial (5)
",48,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
if n= = 0 :
    return 1
else :
    return 1 * factorial (n-1)
print (factorial (5)
",28,"def factorial (n):
if n= = 0 :
    return 1
else :
    return 1 * factorial (n-1)
print (factorial (5)
",28
"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    list = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                list.append(elem)
    print(list)
","det main () :
list 1 2 [1, 2,3,4]
list 2 =
(3,4,5,6)
List = []
for elem1 in list 1?
for eleme in list2:
it elem1 = = elem2?
elem = elem 2
list- append (elem)
print (ist)",100,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"                                    det main () :
                                list 1 = [1, 2,3,4]
                            list 2 =
                            (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",202,"                            det main () :
                        list 1 = [1, 2,3,4]
                        list 2 =
                        (3,4,5,6)
                    List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",175,"                    det main () :
                list 1 = [1, 2,3,4]
                list 2 =
                (3,4,5,6)
            List = []
            for elem1 in list 1?
        for eleme in list2:
        it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",127,"                    det main () :
                    list 1 = [1, 2,3,4]
                list 2 =
                (3,4,5,6)
            List = []
            for elem1 in list 1?
        for eleme in list2:
        it elem1 = = elem2:
    elem = elema
    list. append (elem)
print (ist)
",135,"            det main () :
            list 1 = [1, 2,3,4]
            list 2 =
            (3,4,5,6)
            List = []
        for elem1 in list 1?
        for eleme in list2:
    it elem1 = = elem2:
    elem = elema
    list. append (elem)
print (ist)
",111,"            det main () :
            list 1 = [1, 2,3,4]
            list 2 =
            (3,4,5,6)
            List = []
        for elem1 in list 1?
        for eleme in list2:
    it elem1 = = elem2:
    elem = elema
    list. append (elem)
print (ist)
",111,"        det main () :
        list 1 = [1, 2,3,4]
        list 2 =
        (3,4,5,6)
        List = []
    for elem1 in list 1?
    for eleme in list2:
    it elem1 = = elem2:
elem = elema
list. append (elem)
print (ist)
",99
"String = input()
print(String[::-1])
","String = input c)
print (String [ ::- 1])",7,"String = input c)
    Print (String [ ::- 1])
",11,"String = input c)
    Print (String [ ::- 1])
",11,"String = input c)
Print (String [ ::- 1])
",7,"String = input c)
Print (String [ ::- 1])
",7,"String = input c)
Print (String [ ::- 1])
",7,"String = input c)
Print (String [ ::- 1])
",7,"String = input c)
Print (String [ ::- 1])
",7,"String = input c)
Print (String [ ::- 1])
",7,"String = input c)
Print (String [ ::- 1])
",7,"String = input c)
Print (String [ ::- 1])
",7
"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_S()
    move_4x()
    turn_left()
    tower_N()
    tower_S()

def tower_S():
    turn_3x()
    tower()
    turn_left()

def tower_N():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()

if __name__ == ""__main__"":
    main()
","from Karel. Stanford Kad import ""
def main () :
turn - left 11
tower_N()
tower- SC)
move- 4x ( )
turn-left ( )
tower- N()
tower - SC )
del tower - s():
turn - 3x ()
Tower ()
Turn- left ( )
del tower- NC) .
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ):
Put-boper ()
move ()
else:
Put- beeper ()
def.turn- 3x (1:
Turn- left ()
turn - left ()
burn- left ()
def . mere_ 4x();
move ()
move ()
morell
move ()
if -- name __ = = -- main __
main ()",270,"                                                            from Karel. Stanford Kad import *
                del main ():
                                                                    turn- left 1)
                                                            tower_N()
                                                            tower-SC)
                                                        move-4x ( )
                                                    turn-left ( )
                                                    tower _ N()
                                                tower -SC )
        de tower - SC):
                        turn - 3x()
                    Tower ()
                                Turn- left ( )
    del tower- NC).
                            Tower ()
                            turn- 3x()
                            move- 4x ()
        del tower ():
                                    for i in range (5) :
                                                                        il front-is- clear ( ) :
                                                                                Put-boper ()
                                                                                        move ()
                                                                            else:
                                                                                    put- beeper ()
            def. turn- 3x (1.
                                                        Turn_left ()
                                                turn - left ()
                                                    burn- left ()
        def . meve_4x11;
                                        move 11
                                            move ()
                                        morell
                                            move ()
if -- name __ == ' -- main __ :
                                                                main ()
",1474,"    from Karel. Stanford Kad import *
del main ():
    turn- left 1)
    tower_N()
    tower-SC)
    move-4x ( )
    turn-left ( )
    tower _ N()
    tower -SC )
de tower - SC):
    turn - 3x()
    Tower ()
    Turn- left ( )
del tower- NC).
    Tower ()
    turn- 3x()
    move- 4x ()
del tower ():
    for i in range (5) :
        il front-is- clear ( ) :
            Put-boper ()
            move ()
        else:
            put- beeper ()
def. turn- 3x (1.
    Turn_left ()
    turn - left ()
    burn- left ()
def . meve_4x11;
    move 11
    move ()
    morell
    move ()
if -- name __ == ' -- main __ :
    main ()
",128,"    from Karel. Stanford Kad import *
del main ():
    turn- left 1)
    tower_N()
    tower-SC)
    move-4x ( )
    turn-left ( )
    tower _ N()
    tower -SC )
de tower - SC):
turn - 3x()
Tower ()
    Turn- left ( )
del tower- NC).
    Tower ()
    turn- 3x()
    move- 4x ()
del tower ():
    for i in range (5) :
        il front-is- clear ( ) :
        Put-boper ()
        move ()
        else:
        put- beeper ()
def. turn- 3x (1.
    Turn_left ()
    turn - left ()
    burn- left ()
def . meve_4x11;
    move 11
    move ()
    morell
    move ()
if -- name __ == ' -- main __ :
    main ()
",148,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261
"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])

if __name__ == ""__main__"":
    main()
","det main ( ):
String = str (input (""Enter string: '))
for i in range ((len (string) -1) ,- 1 ,- 1):
print (string [i])
if __ name _== '_main-':
main ()",49,"    det main ( ):
                String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                    print (string [1])
if __ name _== '-main-':
        main()
",70,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"det main ( ):
    String = str (input (""Enter string: ')
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [1])
if __ name _== '-main-':
main()
",34,"det main ( ):
    String = str (input (""Enter string: ')
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [1])
if __ name _== '-main-':
main()
",34,"det main ( ):
    String = str (input (""Enter string: ')
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [1])
if __ name _== '-main-':
main()
",34,"det main ( ):
    String = str (input (""Enter string: ')
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [1])
if __ name _== '-main-':
main()
",34
"def main():
    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")

def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main()
","def main():
num = int (input( ""Enter a NM bu :
print (f""Enums is S'prime if is_ prime (nom)
else not primé 3"">
def is_ prime(1):
if n <= 12
return false
elif > <= 3:
Cetun True
elf n/ 2 = = x OR 1% 3=6 ;
return False
for i in Range (5, int(1 +0.5) + 1,6
if 1% i = = x or 1% (1+2) =0 :
return False
return True
if
= =
- - main
main ()",162,"        def main ():
                num = int (input ("" Enter a Nmbu :
            print (f""Enums is &'prime if is_ prime (nom)
                                                                    else not primé 3"")
def is- prone (1) :
                                    if n <= 12
                                                        return false
                                        elif > <= 3:
                                                return True
                            elf n/ 2 == x OR 1% 3= 6 ;
                                                    return False
                    for i in Range (5, int (n+""0.5) + 1,6
                                            if 1% i =x or 1%(i+2) =6:
                                                            return False
                                return True
    - nor
                                                                = - - main
                        main ()
",603,"    def main ():
    num = int (input ("" Enter a Nmbu :
    print (f""Enums is &'prime if is_ prime (nom)
                        else not primé 3"")
def is- prone (1) :
        if n <= 12
                return false
        elif > <= 3:
            return True
        elf n/ 2 == x OR 1% 3= 6 ;
                return False
    for i in Range (5, int (n+""0.5) + 1,6
        if 1% i =x or 1%(i+2) =6:
                    return False
        return True
- nor
                        = - - main
        main ()
",176,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
                else not primé 3"")
def is- prone (1) :
    if n <= 12
        return false
    elif > <= 3:
        return True
    elf n/ 2 == x OR 1% 3= 6 ;
        return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
            return False
    return True
- nor
                = - - main
    main ()
",129,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
        else not primé 3"")
def is- prone (1) :
if n <= 12
    return false
elif > <= 3:
return True
elf n/ 2 == x OR 1% 3= 6 ;
    return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
    return False
return True
- nor
        = - - main
main ()
",162,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
    else not primé 3"")
def is- prone (1) :
if n <= 12
return false
elif > <= 3:
return True
elf n/ 2 == x OR 1% 3= 6 ;
return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
return False
return True
- nor
    = - - main
main ()
",168,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
    else not primé 3"")
def is- prone (1) :
if n <= 12
return false
elif > <= 3:
return True
elf n/ 2 == x OR 1% 3= 6 ;
return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
return False
return True
- nor
    = - - main
main ()
",168,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
    else not primé 3"")
def is- prone (1) :
if n <= 12
return false
elif > <= 3:
return True
elf n/ 2 == x OR 1% 3= 6 ;
return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
return False
return True
- nor
    = - - main
main ()
",168,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
    else not primé 3"")
def is- prone (1) :
if n <= 12
return false
elif > <= 3:
return True
elf n/ 2 == x OR 1% 3= 6 ;
return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
return False
return True
- nor
    = - - main
main ()
",168,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
    else not primé 3"")
def is- prone (1) :
if n <= 12
return false
elif > <= 3:
return True
elf n/ 2 == x OR 1% 3= 6 ;
return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
return False
return True
- nor
    = - - main
main ()
",168,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
    else not primé 3"")
def is- prone (1) :
if n <= 12
return false
elif > <= 3:
return True
elf n/ 2 == x OR 1% 3= 6 ;
return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
return False
return True
- nor
    = - - main
main ()
",168
"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
","from karel . stamfordkarel. import *
def mais ():
turn-left ():
while frent_ is_ alpar ();
turn-right ()
fill-row ( )
return_to_ home()
jumprow ()
turn-right ()
fill-row ()
returnkte -home ()
while front- is Elcar();
meve ()
Sef fill -row() ;
while front- is clear()
put - beeper ()
move ()
put-beeper ()",145,"    from karel . stamfordkarel import *
def mais ():
                    turn-left ():
                while frent_ is_ alpar () ;
                                            turn-right ()
                                                    fill-row( )
                                                return _to_ home()
                                                    Jumprow ()
                    turn-right ()
                            fill-row ()
                        returnkte - home ()
                                while front- is- Elcar ()
                                                        meve()
        def fill-row() ;
                while front- is clear()
                                    put - beeper()
                                        move ()
            put-beeper ()
",478,"from karel . stamfordkarel import *
def mais ():
        turn-left ():
        while frent_ is_ alpar () ;
                turn-right ()
                    fill-row( )
                    return _to_ home()
                    Jumprow ()
        turn-right ()
        fill-row ()
        returnkte - home ()
        while front- is- Elcar ()
                    meve()
    def fill-row() ;
        while front- is clear()
            put - beeper()
            move ()
        put-beeper ()
",158,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel . stamfordkarel import *
def mais ():
turn-left ():
while frent_ is_ alpar () ;
    turn-right ()
    fill-row( )
    return _to_ home()
    Jumprow ()
turn-right ()
fill-row ()
returnkte - home ()
while front- is- Elcar ()
    meve()
def fill-row() ;
while front- is clear()
    put - beeper()
    move ()
put-beeper ()
",117,"from karel . stamfordkarel import *
def mais ():
turn-left ():
while frent_ is_ alpar () ;
    turn-right ()
    fill-row( )
    return _to_ home()
    Jumprow ()
turn-right ()
fill-row ()
returnkte - home ()
while front- is- Elcar ()
    meve()
def fill-row() ;
while front- is clear()
    put - beeper()
    move ()
put-beeper ()
",117,"from karel . stamfordkarel import *
def mais ():
turn-left ():
while frent_ is_ alpar () ;
    turn-right ()
    fill-row( )
    return _to_ home()
    Jumprow ()
turn-right ()
fill-row ()
returnkte - home ()
while front- is- Elcar ()
    meve()
def fill-row() ;
while front- is clear()
    put - beeper()
    move ()
put-beeper ()
",117,"from karel . stamfordkarel import *
def mais ():
turn-left ():
while frent_ is_ alpar () ;
    turn-right ()
    fill-row( )
    return _to_ home()
    Jumprow ()
turn-right ()
fill-row ()
returnkte - home ()
while front- is- Elcar ()
    meve()
def fill-row() ;
while front- is clear()
    put - beeper()
    move ()
put-beeper ()
",117,"from karel . stamfordkarel import *
def mais ():
turn-left ():
while frent_ is_ alpar () ;
    turn-right ()
    fill-row( )
    return _to_ home()
    Jumprow ()
turn-right ()
fill-row ()
returnkte - home ()
while front- is- Elcar ()
    meve()
def fill-row() ;
while front- is clear()
    put - beeper()
    move ()
put-beeper ()
",117,"from karel . stamfordkarel import *
def mais ():
turn-left ():
while frent_ is_ alpar () ;
turn-right ()
fill-row( )
return _to_ home()
Jumprow ()
turn-right ()
fill-row ()
returnkte - home ()
while front- is- Elcar ()
meve()
def fill-row() ;
while front- is clear()
put - beeper()
move ()
put-beeper ()
",144
"from stanfordkarel import *
""""""
Karel should fill the whole world with beepers.
""""""

def main():
    """"""
    You should write your code to make Karel do its task in
    this function. Make sure to delete the 'pass' line before
    starting to write your own code. You should also delete this
    comment and replace it with a better, more descriptive one.
    """"""
    while not left_is_blocked():
        put_beeper_Line()
        reset_Position()
    put_beeper_Line()

def put_beeper_Line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
","from stanfordkarel import *
Kard should fill the whole world with
keepers.
11 11 11
daf main () :
11 11 11
You should write your code to males
Karel do its task in this function.
Make sure to delete the 'pass line
before starting to write your own
code. You should also delete this
comment and replace it with a
better more descriptive one.
11 11 11
While not left-is - blocked ():
put -beeper -Line()
reset_Position ()
put-buper _line ()
de put_leeper-Line ():
put -beeper ()
While front-is- clear ():
move ( )
put -beeper ()",139,"                from stanfordkarel import *
            Kard should fill the whole world with
        keepers.
                    -
    daf main () :
                                                                11 11 11
                                                            You should write your code to males
                                                        kard do its task in this function
                                                    Make sure to delete the 'pass' line
                                        before starting to write your own
                                code. You should also delete this
                                            comment and replace it with a
                                    better more descriptive one.
                                                11 11 11
                                                While not left-is - blocked ():
                                                                                put - beeper -Line( )
                                                                            reset_Position ()
                                put-beeper _line ()
de put_beeper-Line ():
                        put -beeper ()
                            while front-is- clear ():
                                                                        move ()
                                                                    put -beeper ()
",924,"        from stanfordkarel import *
        Kard should fill the whole world with
        keepers.
        -
    daf main () :
                        11 11 11
                    You should write your code to males
                    kard do its task in this function
                Make sure to delete the 'pass' line
                before starting to write your own
            code. You should also delete this
                comment and replace it with a
            better more descriptive one.
                11 11 11
                While not left-is - blocked ():
                                put - beeper -Line( )
                                reset_Position ()
            put-beeper _line ()
de put_beeper-Line ():
            put -beeper ()
            while front-is- clear ():
                            move ()
                            put -beeper ()
",364,"    from stanfordkarel import *
    Kard should fill the whole world with
    keepers.
    -
daf main () :
            11 11 11
            You should write your code to males
            kard do its task in this function
            Make sure to delete the 'pass' line
        before starting to write your own
        code. You should also delete this
        comment and replace it with a
        better more descriptive one.
        11 11 11
        While not left-is - blocked ():
                    put - beeper -Line( )
                    reset_Position ()
        put-beeper _line ()
de put_beeper-Line ():
        put -beeper ()
        while front-is- clear ():
                move ()
                put -beeper ()
",213,"    from stanfordkarel import *
    Kard should fill the whole world with
    keepers.
    -
daf main () :
        11 11 11
        You should write your code to males
        kard do its task in this function
        Make sure to delete the 'pass' line
        before starting to write your own
        code. You should also delete this
        comment and replace it with a
        better more descriptive one.
        11 11 11
        While not left-is - blocked ():
            put - beeper -Line( )
            reset_Position ()
        put-beeper _line ()
de put_beeper-Line ():
        put -beeper ()
        while front-is- clear ():
            move ()
            put -beeper ()
",173,"from stanfordkarel import *
Kard should fill the whole world with
keepers.
-
daf main () :
    11 11 11
    You should write your code to males
    kard do its task in this function
    Make sure to delete the 'pass' line
    before starting to write your own
    code. You should also delete this
    comment and replace it with a
    better more descriptive one.
    11 11 11
    While not left-is - blocked ():
        put - beeper -Line( )
        reset_Position ()
    put-beeper _line ()
de put_beeper-Line ():
    put -beeper ()
    while front-is- clear ():
        move ()
        put -beeper ()
",97,"from stanfordkarel import *
Kard should fill the whole world with
keepers.
-
daf main () :
    11 11 11
    You should write your code to males
    kard do its task in this function
    Make sure to delete the 'pass' line
    before starting to write your own
    code. You should also delete this
    comment and replace it with a
    better more descriptive one.
    11 11 11
    While not left-is - blocked ():
        put - beeper -Line( )
        reset_Position ()
    put-beeper _line ()
de put_beeper-Line ():
    put -beeper ()
    while front-is- clear ():
        move ()
        put -beeper ()
",97,"from stanfordkarel import *
Kard should fill the whole world with
keepers.
-
daf main () :
        11 11 11
    You should write your code to males
    kard do its task in this function
    Make sure to delete the 'pass' line
    before starting to write your own
    code. You should also delete this
    comment and replace it with a
    better more descriptive one.
    11 11 11
    While not left-is - blocked ():
        put - beeper -Line( )
        reset_Position ()
    put-beeper _line ()
de put_beeper-Line ():
    put -beeper ()
    while front-is- clear ():
        move ()
        put -beeper ()
",101,"from stanfordkarel import *
Kard should fill the whole world with
keepers.
-
daf main () :
11 11 11
You should write your code to males
kard do its task in this function
Make sure to delete the 'pass' line
before starting to write your own
code. You should also delete this
comment and replace it with a
better more descriptive one.
11 11 11
While not left-is - blocked ():
put - beeper -Line( )
reset_Position ()
put-beeper _line ()
de put_beeper-Line ():
put -beeper ()
while front-is- clear ():
move ()
put -beeper ()
",134,"from stanfordkarel import *
Kard should fill the whole world with
keepers.
-
daf main () :
11 11 11
You should write your code to males
kard do its task in this function
Make sure to delete the 'pass' line
before starting to write your own
code. You should also delete this
comment and replace it with a
better more descriptive one.
11 11 11
While not left-is - blocked ():
put - beeper -Line( )
reset_Position ()
put-beeper _line ()
de put_beeper-Line ():
put -beeper ()
while front-is- clear ():
move ()
put -beeper ()
",134,"from stanfordkarel import *
Kard should fill the whole world with
keepers.
-
daf main () :
11 11 11
You should write your code to males
kard do its task in this function
Make sure to delete the 'pass' line
before starting to write your own
code. You should also delete this
comment and replace it with a
better more descriptive one.
11 11 11
While not left-is - blocked ():
put - beeper -Line( )
reset_Position ()
put-beeper _line ()
de put_beeper-Line ():
put -beeper ()
while front-is- clear ():
move ()
put -beeper ()
",134
"#karel needs to move to the bottom of the next arch to commence 
#building the next column.
#precondition: karel is facing east
#post condition: karel is still facing east at the next column site.

def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()""

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
","#karel needs to move to the bottom of the next noch to com
Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_botton ();
if front is clear ():
for i in range (4) :
move ()
def turn around ():
turn_left ( )
turn left ()
if __ name.
main
main ()",88,"        #karel needs to move to the bottom of the next noch to como
                Hence building the next column.
            # Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
                    def move_to_next_arch botton () ;
                                    if front is clear ():
                                        for i in range (4) :
                                            move ( )
                def turn around ():
                            turn left ( )
                                turn_left ()
    if __ name.
                                                main
                        main ()
",333,"#karel needs to move to the bottom of the next noch to como
Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch botton () ;
        if front is clear ():
            for i in range (4) :
                move ( )
def turn around ():
        turn left ( )
        turn_left ()
if __ name.
                    main
    main ()
",86,"#karel needs to move to the bottom of the next noch to como
Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch botton () ;
        if front is clear ():
            for i in range (4) :
                move ( )
def turn around ():
        turn left ( )
        turn_left ()
if __ name.
                    main
    main ()
",86,"#karel needs to move to the bottom of the next noch to como
Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch botton () ;
        if front is clear ():
            for i in range (4) :
                move ( )
def turn around ():
        turn left ( )
        turn_left ()
if __ name.
                    main
    main ()
",86,"#karel needs to move to the bottom of the next noch to como
Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch botton () ;
    if front is clear ():
        for i in range (4) :
            move ( )
def turn around ():
    turn left ( )
    turn_left ()
if __ name.
                main
    main ()
",62,"#karel needs to move to the bottom of the next noch to como
Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch botton () ;
    if front is clear ():
        for i in range (4) :
            move ( )
def turn around ():
    turn left ( )
    turn_left ()
if __ name.
                main
    main ()
",62,"#karel needs to move to the bottom of the next noch to como
Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch botton () ;
    if front is clear ():
        for i in range (4) :
            move ( )
def turn around ():
    turn left ( )
    turn_left ()
if __ name.
                main
    main ()
",62,"#karel needs to move to the bottom of the next noch to como
Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch botton () ;
    if front is clear ():
        for i in range (4) :
            move ( )
def turn around ():
    turn left ( )
    turn_left ()
if __ name.
                main
    main ()
",62,"#karel needs to move to the bottom of the next noch to como
Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch botton () ;
    if front is clear ():
        for i in range (4) :
        move ( )
def turn around ():
    turn left ( )
    turn_left ()
if __ name.
            main
main ()
",66,"#karel needs to move to the bottom of the next noch to como
Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch botton () ;
if front is clear ():
    for i in range (4) :
    move ( )
def turn around ():
turn left ( )
turn_left ()
if __ name.
        main
main ()
",81
"def find_lrgst_smallst(number):
    if not numbers:
        return none
    smallest = largest = number[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest
# Example Usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_lrgst_smallst(numbers)
print(result)
","def find_Ligst_smallst (number):
00
if not numbers:
Return none
Smallest=largest = number [0]
-
for num in numbers:
lif
num < smallest:
smallest = num
if
nam > Largest :
Largest = num
tieturin smallest, Largest
# Example usage:
numbers = [1,2,3, 4,5,6,7,8,9]
Hresult = find_ligst_smallst(numbers)
print (result)
उदास-उदास मिका शंतिबाज़",115,"    def find_Ligst_smallst (number):
                        if not numbers:
                                    Return none
                                Smallest= largest = number [0]
                    for num in
                                                in numbers :
                                        if num < smallest:
                                                    smallest = num
                                            if num > Largest :
                                                        Largest = num
                            tieturin smallest, Largest
# Example usage.
            numbers = [1,2,3, 4,5,6,7,8,9]
        result = find_Ligst_smallst (numberis)
                print (result)
                                                            इमाम-जत्रास मिक्का शनिवाज़
",475,"    def find_Ligst_smallst (number):
                if not numbers:
                        Return none
                    Smallest= largest = number [0]
                for num in
                                in numbers :
                        if num < smallest:
                                    smallest = num
                            if num > Largest :
                                        Largest = num
                tieturin smallest, Largest
# Example usage.
            numbers = [1,2,3, 4,5,6,7,8,9]
        result = find_Ligst_smallst (numberis)
            print (result)
                                            इमाम-जत्रास मिक्का शनिवाज़
",327,"    def find_Ligst_smallst (number):
        if not numbers:
            Return none
        Smallest= largest = number [0]
        for num in
                    in numbers :
            if num < smallest:
                        smallest = num
                if num > Largest :
                            Largest = num
        tieturin smallest, Largest
# Example usage.
    numbers = [1,2,3, 4,5,6,7,8,9]
    result = find_Ligst_smallst (numberis)
    print (result)
                                इमाम-जत्रास मिक्का शनिवाज़
",187,"    def find_Ligst_smallst (number):
        if not numbers:
            Return none
        Smallest= largest = number [0]
        for num in
                in numbers :
            if num < smallest:
                    smallest = num
            if num > Largest :
                        Largest = num
        tieturin smallest, Largest
# Example usage.
    numbers = [1,2,3, 4,5,6,7,8,9]
    result = find_Ligst_smallst (numberis)
    print (result)
                            इमाम-जत्रास मिक्का शनिवाज़
",167,"def find_Ligst_smallst (number):
    if not numbers:
        Return none
    Smallest= largest = number [0]
    for num in
            in numbers :
        if num < smallest:
                smallest = num
        if num > Largest :
                    Largest = num
    tieturin smallest, Largest
# Example usage.
numbers = [1,2,3, 4,5,6,7,8,9]
result = find_Ligst_smallst (numberis)
print (result)
                        इमाम-जत्रास मिक्का शनिवाज़
",107,"def find_Ligst_smallst (number):
    if not numbers:
        Return none
    Smallest= largest = number [0]
    for num in
            in numbers :
        if num < smallest:
                smallest = num
        if num > Largest :
                    Largest = num
    tieturin smallest, Largest
# Example usage.
numbers = [1,2,3, 4,5,6,7,8,9]
result = find_Ligst_smallst (numberis)
print (result)
                        इमाम-जत्रास मिक्का शनिवाज़
",107,"def find_Ligst_smallst (number):
    if not numbers:
        Return none
    Smallest= largest = number [0]
    for num in
        in numbers :
        if num < smallest:
            smallest = num
        if num > Largest :
            Largest = num
    tieturin smallest, Largest
# Example usage.
numbers = [1,2,3, 4,5,6,7,8,9]
result = find_Ligst_smallst (numberis)
print (result)
                इमाम-जत्रास मिक्का शनिवाज़
",83,"def find_Ligst_smallst (number):
    if not numbers:
        Return none
    Smallest= largest = number [0]
    for num in
        in numbers :
        if num < smallest:
            smallest = num
        if num > Largest :
            Largest = num
    tieturin smallest, Largest
# Example usage.
numbers = [1,2,3, 4,5,6,7,8,9]
result = find_Ligst_smallst (numberis)
print (result)
                इमाम-जत्रास मिक्का शनिवाज़
",83,"def find_Ligst_smallst (number):
    if not numbers:
        Return none
    Smallest= largest = number [0]
    for num in
        in numbers :
        if num < smallest:
            smallest = num
        if num > Largest :
            Largest = num
    tieturin smallest, Largest
# Example usage.
numbers = [1,2,3, 4,5,6,7,8,9]
result = find_Ligst_smallst (numberis)
print (result)
                इमाम-जत्रास मिक्का शनिवाज़
",83,"def find_Ligst_smallst (number):
    if not numbers:
        Return none
    Smallest= largest = number [0]
    for num in
        in numbers :
        if num < smallest:
            smallest = num
        if num > Largest :
            Largest = num
    tieturin smallest, Largest
# Example usage.
numbers = [1,2,3, 4,5,6,7,8,9]
result = find_Ligst_smallst (numberis)
print (result)
                इमाम-जत्रास मिक्का शनिवाज़
",83
"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The Sum of the Digits is: "", result)

def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum

if __name__ == ""__main__"":
    main()
","def main():
user_number = input (""Enter the number:
"")
result = sum_of_digits (user_number )
print (""The sum of the digits is "", result)
def Sum_of_digits (user_number):
number_str = Str (user_number)
digit_sum=0 # zero
for digit in number-str:
digit_sum + = int (digit)
return digit sum
if _name _== ""_main_"":
main()",69,"    def main():
                    user-number = input (""Enter the number: "")
                        result = sum_of_digits (user_number)
                            print (""The sum of the digits is "", result)
def Sum_of_digits (user_ number):
            number_str = Str (user_number)
                digit-sum=0 # zero
                            for digit in number- str:
                                    digit_sum + = int (digit)
                                return digit sum
    if _name_ = ""_main_"":
        main ()
",204,"def main():
        user-number = input (""Enter the number: "")
        result = sum_of_digits (user_number)
        print (""The sum of the digits is "", result)
def Sum_of_digits (user_ number):
        number_str = Str (user_number)
        digit-sum=0 # zero
        for digit in number- str:
            digit_sum + = int (digit)
        return digit sum
if _name_ = ""_main_"":
    main ()
",65,"def main():
        user-number = input (""Enter the number: "")
        result = sum_of_digits (user_number)
        print (""The sum of the digits is "", result)
def Sum_of_digits (user_ number):
        number_str = Str (user_number)
        digit-sum=0 # zero
        for digit in number- str:
            digit_sum + = int (digit)
        return digit sum
if _name_ = ""_main_"":
    main ()
",65,"def main():
    user-number = input (""Enter the number: "")
    result = sum_of_digits (user_number)
    print (""The sum of the digits is "", result)
def Sum_of_digits (user_ number):
    number_str = Str (user_number)
    digit-sum=0 # zero
    for digit in number- str:
        digit_sum + = int (digit)
    return digit sum
if _name_ = ""_main_"":
main ()
",37,"def main():
    user-number = input (""Enter the number: "")
    result = sum_of_digits (user_number)
    print (""The sum of the digits is "", result)
def Sum_of_digits (user_ number):
    number_str = Str (user_number)
    digit-sum=0 # zero
    for digit in number- str:
        digit_sum + = int (digit)
    return digit sum
if _name_ = ""_main_"":
main ()
",37,"def main():
user-number = input (""Enter the number: "")
result = sum_of_digits (user_number)
print (""The sum of the digits is "", result)
def Sum_of_digits (user_ number):
number_str = Str (user_number)
digit-sum=0 # zero
for digit in number- str:
digit_sum + = int (digit)
return digit sum
if _name_ = ""_main_"":
main ()
",71,"def main():
user-number = input (""Enter the number: "")
result = sum_of_digits (user_number)
print (""The sum of the digits is "", result)
def Sum_of_digits (user_ number):
number_str = Str (user_number)
digit-sum=0 # zero
for digit in number- str:
digit_sum + = int (digit)
return digit sum
if _name_ = ""_main_"":
main ()
",71,"def main():
user-number = input (""Enter the number: "")
result = sum_of_digits (user_number)
print (""The sum of the digits is "", result)
def Sum_of_digits (user_ number):
number_str = Str (user_number)
digit-sum=0 # zero
for digit in number- str:
digit_sum + = int (digit)
return digit sum
if _name_ = ""_main_"":
main ()
",71,"def main():
user-number = input (""Enter the number: "")
result = sum_of_digits (user_number)
print (""The sum of the digits is "", result)
def Sum_of_digits (user_ number):
number_str = Str (user_number)
digit-sum=0 # zero
for digit in number- str:
digit_sum + = int (digit)
return digit sum
if _name_ = ""_main_"":
main ()
",71,"def main():
user-number = input (""Enter the number: "")
result = sum_of_digits (user_number)
print (""The sum of the digits is "", result)
def Sum_of_digits (user_ number):
number_str = Str (user_number)
digit-sum=0 # zero
for digit in number- str:
digit_sum + = int (digit)
return digit sum
if _name_ = ""_main_"":
main ()
",71
"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")

if __name__ == ""__main__"":
    main()
","def is-prime (n):
1104
Returns True if n is prime, False otherwise
11011
if n <= 1:
return False
for i in range (2, int(n*0.5)+1):
if n % i == 0.
return False
return True
def main () :
11 /11
The main function.
/11.11
n = int ( input (""Enter a number: "")
if is- prime (n):
print (n, "" is a prime number."")
else :
print( n, ""is not a prime number. "")
it
- - name __ == __ main -- :
main ( )",146,"def is-prime (n):
                1104
                        Returns True if n is prime, False otherwise
                        11011
                    if n < = 1 :
                                                                    return False
            for i in range (2, int(n* 0.5) +1):
                                                        if n % i == 0.
                                                                        return False
                    return True
    def main () :
                                                    11 /11
                                The main function .
                                                /11.11
                                            n = int ( input (""Enter a number: "")
                                        if is-prime (n):
                                                                print (n, "" is a prime number. "")
                            else :
                                                            print( n, "" is not a prime number. "")
        if
                                    -- name __ == ""
                                                                            - - main __ :
                                            main ( )
",811,"def is-prime (n):
        1104
        Returns True if n is prime, False otherwise
        11011
        if n < = 1 :
                    return False
        for i in range (2, int(n* 0.5) +1):
                if n % i == 0.
                        return False
        return True
def main () :
            11 /11
            The main function .
            /11.11
            n = int ( input (""Enter a number: "")
            if is-prime (n):
                    print (n, "" is a prime number. "")
        else :
                    print( n, "" is not a prime number. "")
    if
            -- name __ == ""
                            - - main __ :
            main ( )
",236,"def is-prime (n):
        1104
        Returns True if n is prime, False otherwise
        11011
        if n < = 1 :
            return False
        for i in range (2, int(n* 0.5) +1):
            if n % i == 0.
                return False
        return True
def main () :
        11 /11
        The main function .
        /11.11
        n = int ( input (""Enter a number: "")
        if is-prime (n):
            print (n, "" is a prime number. "")
        else :
            print( n, "" is not a prime number. "")
    if
        -- name __ == ""
                    - - main __ :
        main ( )
",164,"def is-prime (n):
    1104
    Returns True if n is prime, False otherwise
    11011
    if n < = 1 :
        return False
    for i in range (2, int(n* 0.5) +1):
        if n % i == 0.
            return False
    return True
def main () :
    11 /11
    The main function .
    /11.11
    n = int ( input (""Enter a number: "")
    if is-prime (n):
        print (n, "" is a prime number. "")
    else :
        print( n, "" is not a prime number. "")
if
    -- name __ == ""
                - - main __ :
    main ( )
",81,"def is-prime (n):
    1104
    Returns True if n is prime, False otherwise
    11011
    if n < = 1 :
        return False
    for i in range (2, int(n* 0.5) +1):
        if n % i == 0.
            return False
    return True
def main () :
    11 /11
    The main function .
    /11.11
    n = int ( input (""Enter a number: "")
    if is-prime (n):
        print (n, "" is a prime number. "")
    else :
        print( n, "" is not a prime number. "")
if
    -- name __ == ""
                - - main __ :
    main ( )
",81,"def is-prime (n):
    1104
    Returns True if n is prime, False otherwise
    11011
    if n < = 1 :
        return False
    for i in range (2, int(n* 0.5) +1):
    if n % i == 0.
        return False
    return True
def main () :
    11 /11
    The main function .
    /11.11
    n = int ( input (""Enter a number: "")
    if is-prime (n):
    print (n, "" is a prime number. "")
    else :
    print( n, "" is not a prime number. "")
if
    -- name __ == ""
            - - main __ :
    main ( )
",93,"def is-prime (n):
    1104
    Returns True if n is prime, False otherwise
    11011
    if n < = 1 :
    return False
    for i in range (2, int(n* 0.5) +1):
    if n % i == 0.
        return False
    return True
def main () :
    11 /11
    The main function .
    /11.11
    n = int ( input (""Enter a number: "")
    if is-prime (n):
    print (n, "" is a prime number. "")
    else :
    print( n, "" is not a prime number. "")
if
    -- name __ == ""
        - - main __ :
    main ( )
",93,"def is-prime (n):
1104
Returns True if n is prime, False otherwise
11011
if n < = 1 :
return False
for i in range (2, int(n* 0.5) +1):
if n % i == 0.
    return False
return True
def main () :
11 /11
The main function .
/11.11
n = int ( input (""Enter a number: "")
if is-prime (n):
print (n, "" is a prime number. "")
else :
print( n, "" is not a prime number. "")
if
-- name __ == ""
    - - main __ :
main ( )
",148,"def is-prime (n):
1104
Returns True if n is prime, False otherwise
11011
if n < = 1 :
return False
for i in range (2, int(n* 0.5) +1):
if n % i == 0.
    return False
return True
def main () :
11 /11
The main function .
/11.11
n = int ( input (""Enter a number: "")
if is-prime (n):
print (n, "" is a prime number. "")
else :
print( n, "" is not a prime number. "")
if
-- name __ == ""
    - - main __ :
main ( )
",148,"def is-prime (n):
1104
Returns True if n is prime, False otherwise
11011
if n < = 1 :
return False
for i in range (2, int(n* 0.5) +1):
if n % i == 0.
    return False
return True
def main () :
11 /11
The main function .
/11.11
n = int ( input (""Enter a number: "")
if is-prime (n):
print (n, "" is a prime number. "")
else :
print( n, "" is not a prime number. "")
if
-- name __ == ""
    - - main __ :
main ( )
",148
"# Reverse String

def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)

if __name__ == ""__main__"":
    main()
","#Reverse String
def man ():
str = input (""Input a string: "")
ro _str= """"
for i'm str:
r_ str = i+ n_ str
print (no_stro)
if_name _= = ""_main_"":
main ()",55,"# Reverse String
        def main ():
                            str = input (""Input a string: "")
                        ro-str= ""
                    for i'm str:
                                r_ str = 1+ r_ str
            print (rostro)
    if_name _= ""_main_"":
                main ()
",139,"# Reverse String
def main ():
    str = input (""Input a string: "")
    ro-str= ""
    for i'm str:
        r_ str = 1+ r_ str
    print (rostro)
if_name _= ""_main_"":
    main ()
",26,"# Reverse String
def main ():
    str = input (""Input a string: "")
    ro-str= ""
    for i'm str:
        r_ str = 1+ r_ str
    print (rostro)
if_name _= ""_main_"":
    main ()
",26,"# Reverse String
def main ():
    str = input (""Input a string: "")
    ro-str= ""
    for i'm str:
        r_ str = 1+ r_ str
    print (rostro)
if_name _= ""_main_"":
    main ()
",26,"# Reverse String
def main ():
    str = input (""Input a string: "")
    ro-str= ""
    for i'm str:
        r_ str = 1+ r_ str
    print (rostro)
if_name _= ""_main_"":
    main ()
",26,"# Reverse String
def main ():
    str = input (""Input a string: "")
    ro-str= ""
    for i'm str:
        r_ str = 1+ r_ str
    print (rostro)
if_name _= ""_main_"":
    main ()
",26,"# Reverse String
def main ():
    str = input (""Input a string: "")
    ro-str= ""
    for i'm str:
        r_ str = 1+ r_ str
    print (rostro)
if_name _= ""_main_"":
    main ()
",26,"# Reverse String
def main ():
str = input (""Input a string: "")
ro-str= ""
for i'm str:
    r_ str = 1+ r_ str
print (rostro)
if_name _= ""_main_"":
main ()
",50,"# Reverse String
def main ():
str = input (""Input a string: "")
ro-str= ""
for i'm str:
    r_ str = 1+ r_ str
print (rostro)
if_name _= ""_main_"":
main ()
",50,"# Reverse String
def main ():
str = input (""Input a string: "")
ro-str= ""
for i'm str:
    r_ str = 1+ r_ str
print (rostro)
if_name _= ""_main_"":
main ()
",50
"# Write a Python program to find the longest word in a given text

def main():
    sentence = input(""Input a sentence: "")
    list = sentence.split()
    l_word = """"
    for word in list:
        if len(word) > len(l_word):
            l_word = word
    print(l_word)

if __name__ == ""__main__"":
    main()
","# Write a Python program to find the longest word i'm a given text
def main ():
sentence = input (""Input a sentence: "")
list = sentence. split ( )
Lword = """"1
for word in List:
if len (word) > 1en (1-word):
1-word = word
print (1-word)
if_name = ""_main_"" :
main ()",76,"    # Write a Python program to find the longest word in a given text
def main ():
                sentence = input (""Input a sentence: "")
                list = sentence . split ( )
                    Lword = "" ""
            for word in List:
                            if len (word) > len (1-word):
                                1- word = word
            print (1-word)
        if _name=""_main_"":
                        main ()
",157,"# Write a Python program to find the longest word in a given text
def main ():
        sentence = input (""Input a sentence: "")
        list = sentence . split ( )
        Lword = "" ""
        for word in List:
            if len (word) > len (1-word):
                1- word = word
        print (1-word)
    if _name=""_main_"":
        main ()
",65,"# Write a Python program to find the longest word in a given text
def main ():
    sentence = input (""Input a sentence: "")
    list = sentence . split ( )
    Lword = "" ""
    for word in List:
        if len (word) > len (1-word):
            1- word = word
    print (1-word)
if _name=""_main_"":
    main ()
",31,"# Write a Python program to find the longest word in a given text
def main ():
    sentence = input (""Input a sentence: "")
    list = sentence . split ( )
    Lword = "" ""
    for word in List:
        if len (word) > len (1-word):
            1- word = word
    print (1-word)
if _name=""_main_"":
    main ()
",31,"# Write a Python program to find the longest word in a given text
def main ():
sentence = input (""Input a sentence: "")
list = sentence . split ( )
Lword = "" ""
for word in List:
    if len (word) > len (1-word):
    1- word = word
print (1-word)
if _name=""_main_"":
main ()
",64,"# Write a Python program to find the longest word in a given text
def main ():
sentence = input (""Input a sentence: "")
list = sentence . split ( )
Lword = "" ""
for word in List:
    if len (word) > len (1-word):
    1- word = word
print (1-word)
if _name=""_main_"":
main ()
",64,"# Write a Python program to find the longest word in a given text
def main ():
sentence = input (""Input a sentence: "")
list = sentence . split ( )
Lword = "" ""
for word in List:
    if len (word) > len (1-word):
    1- word = word
print (1-word)
if _name=""_main_"":
main ()
",64,"# Write a Python program to find the longest word in a given text
def main ():
sentence = input (""Input a sentence: "")
list = sentence . split ( )
Lword = "" ""
for word in List:
if len (word) > len (1-word):
1- word = word
print (1-word)
if _name=""_main_"":
main ()
",72,"# Write a Python program to find the longest word in a given text
def main ():
sentence = input (""Input a sentence: "")
list = sentence . split ( )
Lword = "" ""
for word in List:
if len (word) > len (1-word):
1- word = word
print (1-word)
if _name=""_main_"":
main ()
",72,"# Write a Python program to find the longest word in a given text
def main ():
sentence = input (""Input a sentence: "")
list = sentence . split ( )
Lword = "" ""
for word in List:
if len (word) > len (1-word):
1- word = word
print (1-word)
if _name=""_main_"":
main ()
",72
"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
","def greatest_common_divisor (a,b) :
smaller_ number = a if a <b else 10
common_divisor = []
for i in range (1, smaller_number +1):
if 9 % i == 0 and 6% i == 0:
common_divisor. append (i)
return common_divisor [-1]",52,"det greatest_common_divisor(a,b) :
        smaller_ number = a if a <b else lo
            common_divisor= []
                for i in range (1, smaller_number +1):
                    if 9% i == 0 and 6% i == 0:
                        common_divisor. append (i)
    return common_divisor [-1]
",65,"det greatest_common_divisor(a,b) :
    smaller_ number = a if a <b else lo
    common_divisor= []
    for i in range (1, smaller_number +1):
        if 9% i == 0 and 6% i == 0:
            common_divisor. append (i)
    return common_divisor [-1]
",17,"det greatest_common_divisor(a,b) :
    smaller_ number = a if a <b else lo
    common_divisor= []
    for i in range (1, smaller_number +1):
        if 9% i == 0 and 6% i == 0:
            common_divisor. append (i)
    return common_divisor [-1]
",17,"det greatest_common_divisor(a,b) :
    smaller_ number = a if a <b else lo
    common_divisor= []
    for i in range (1, smaller_number +1):
        if 9% i == 0 and 6% i == 0:
            common_divisor. append (i)
    return common_divisor [-1]
",17,"det greatest_common_divisor(a,b) :
    smaller_ number = a if a <b else lo
    common_divisor= []
    for i in range (1, smaller_number +1):
        if 9% i == 0 and 6% i == 0:
            common_divisor. append (i)
    return common_divisor [-1]
",17,"det greatest_common_divisor(a,b) :
    smaller_ number = a if a <b else lo
    common_divisor= []
    for i in range (1, smaller_number +1):
        if 9% i == 0 and 6% i == 0:
            common_divisor. append (i)
    return common_divisor [-1]
",17,"det greatest_common_divisor(a,b) :
    smaller_ number = a if a <b else lo
    common_divisor= []
    for i in range (1, smaller_number +1):
        if 9% i == 0 and 6% i == 0:
            common_divisor. append (i)
    return common_divisor [-1]
",17,"det greatest_common_divisor(a,b) :
    smaller_ number = a if a <b else lo
    common_divisor= []
    for i in range (1, smaller_number +1):
        if 9% i == 0 and 6% i == 0:
            common_divisor. append (i)
    return common_divisor [-1]
",17,"det greatest_common_divisor(a,b) :
    smaller_ number = a if a <b else lo
    common_divisor= []
    for i in range (1, smaller_number +1):
        if 9% i == 0 and 6% i == 0:
            common_divisor. append (i)
    return common_divisor [-1]
",17,"det greatest_common_divisor(a,b) :
    smaller_ number = a if a <b else lo
    common_divisor= []
    for i in range (1, smaller_number +1):
        if 9% i == 0 and 6% i == 0:
        common_divisor. append (i)
    return common_divisor [-1]
",21
"def main():
    """"""
    The program should determine whether the given year is a leap year
    (divisible by 4, divisible by 100 but also by 400).
    """"""
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()

def identify_a_leap_year():
    print(""Please input a year below(in number form)."")
    Year = int(input(""Year : ""))
    print("" "")
    if (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" "" + ""is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" "" + ""is not a leap year."")

def ask_for_a_new_year_to_identify():
    while True:
        print("" "")
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" or ask != ""yes"" or ask != ""No"" or ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")

if __name__ == ""__main__"":
    main()
","def main () :
The program should determine whether the given year is a leap year
( divisible by 4, divisible by 100 but also by 400).
print ( "" This program will help you identify if a given year is a leap
year or not . "")
print ("" "")
identify_a_leap year ( )
ask _ for _ a _ new _year _ to _identify ( )
def identify _ a _ leap year ( ) :
print ( "" Please input a year below ( in number form ) . "")
Year = int (input (""Year:
print ("" "")
if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;
print (""The Year + str(Year) + "" ""+ ""is a leap year."")
else :
print ( "" The Year "" + str ( Year ) + "" "" + "" is not a leap year . "" )
def ask-for-a-new year_ to _ identify ( ) :
white True :
print ("" "")
ask - input ( "" Do you want to identify a new year ? Yes / No : "" )
print ("" "")
if ask == ""Yes "" or ask == ""yes"":
identify_ a_ leap -year ( )
elif ask == ""NO"" or ask = ""no"":
print ( "" Thank you . See you again ! "" )
break
elif ask != ""Yes or ask != ""yes"" a ask! = ""No"" or ask != ""no"".
print ( "" Wrong keyword . Please type the exact keyword . "")
if
__ name_ == "" __ main __ "":
main ()",304,"def main ( ) :
                    The program should determine whether the given year is a leap year
                        ( divisible by 4, divisible by 100 but also by 400).
                print ( "" This program will help you identify if a given year is a leap
                                                                year or not . "")
                print ( ""
                    identify_a_ leap year ()
                            ask _ for _ a _ new _year _ to _identify ( )
    def identify_ a_ leap-year () :
                                    print (""Please input a year below ( in number form). "")
                                Year = int (input (""Year:
                                        print ("" "")
                                if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;
                                                        print (""The Year"" + str (Year) + "" ""+ "" is a leap year. "")
                        else :
                                                            print ( "" the Year "" + str ( Year ) + "" "" + "" is not a leap year . "" )
def ask-for-a-new year_ to _ identify ( ) :
                while True :
                                            print ("" "")
                                                    ask - input ( "" Do you want to identify a new year ? Yes / No : "" )
                                                print ("" "")
                                                    if ask == ""Yes "" or ask == ""yes"":
                                                                                identify_ a _ leap - year ( )
                                                elif ask == ""No"" or ask = ""no"":
                                                                    print ( "" Thank you . See you again ! "")
                                                                        break
                                            elif ask != ""Yes or ask ! = ""yes"" a ask != ""No"" or ask != ""no"".
                                                                            print ( "" Wrong keyword . Please type the exact keyword . "")
if
        _ name_ == "" __ main __ "":
            main ()
",1037,"def main ( ) :
        The program should determine whether the given year is a leap year
        ( divisible by 4, divisible by 100 but also by 400).
        print ( "" This program will help you identify if a given year is a leap
                year or not . "")
        print ( ""
        identify_a_ leap year ()
        ask _ for _ a _ new _year _ to _identify ( )
def identify_ a_ leap-year () :
        print (""Please input a year below ( in number form). "")
        Year = int (input (""Year:
        print ("" "")
        if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;
            print (""The Year"" + str (Year) + "" ""+ "" is a leap year. "")
        else :
            print ( "" the Year "" + str ( Year ) + "" "" + "" is not a leap year . "" )
def ask-for-a-new year_ to _ identify ( ) :
        while True :
            print ("" "")
            ask - input ( "" Do you want to identify a new year ? Yes / No : "" )
            print ("" "")
            if ask == ""Yes "" or ask == ""yes"":
                    identify_ a _ leap - year ( )
            elif ask == ""No"" or ask = ""no"":
                    print ( "" Thank you . See you again ! "")
                    break
            elif ask != ""Yes or ask ! = ""yes"" a ask != ""No"" or ask != ""no"".
                    print ( "" Wrong keyword . Please type the exact keyword . "")
if
    _ name_ == "" __ main __ "":
        main ()
",256,"def main ( ) :
    The program should determine whether the given year is a leap year
    ( divisible by 4, divisible by 100 but also by 400).
    print ( "" This program will help you identify if a given year is a leap
        year or not . "")
    print ( ""
    identify_a_ leap year ()
    ask _ for _ a _ new _year _ to _identify ( )
def identify_ a_ leap-year () :
    print (""Please input a year below ( in number form). "")
    Year = int (input (""Year:
    print ("" "")
    if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;
        print (""The Year"" + str (Year) + "" ""+ "" is a leap year. "")
    else :
        print ( "" the Year "" + str ( Year ) + "" "" + "" is not a leap year . "" )
def ask-for-a-new year_ to _ identify ( ) :
    while True :
        print ("" "")
        ask - input ( "" Do you want to identify a new year ? Yes / No : "" )
        print ("" "")
        if ask == ""Yes "" or ask == ""yes"":
            identify_ a _ leap - year ( )
        elif ask == ""No"" or ask = ""no"":
            print ( "" Thank you . See you again ! "")
            break
        elif ask != ""Yes or ask ! = ""yes"" a ask != ""No"" or ask != ""no"".
            print ( "" Wrong keyword . Please type the exact keyword . "")
if
_ name_ == "" __ main __ "":
    main ()
",147,"def main ( ) :
    The program should determine whether the given year is a leap year
    ( divisible by 4, divisible by 100 but also by 400).
    print ( "" This program will help you identify if a given year is a leap
        year or not . "")
    print ( ""
    identify_a_ leap year ()
    ask _ for _ a _ new _year _ to _identify ( )
def identify_ a_ leap-year () :
    print (""Please input a year below ( in number form). "")
    Year = int (input (""Year:
    print ("" "")
    if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;
        print (""The Year"" + str (Year) + "" ""+ "" is a leap year. "")
    else :
        print ( "" the Year "" + str ( Year ) + "" "" + "" is not a leap year . "" )
def ask-for-a-new year_ to _ identify ( ) :
    while True :
        print ("" "")
        ask - input ( "" Do you want to identify a new year ? Yes / No : "" )
        print ("" "")
        if ask == ""Yes "" or ask == ""yes"":
            identify_ a _ leap - year ( )
        elif ask == ""No"" or ask = ""no"":
            print ( "" Thank you . See you again ! "")
            break
        elif ask != ""Yes or ask ! = ""yes"" a ask != ""No"" or ask != ""no"".
            print ( "" Wrong keyword . Please type the exact keyword . "")
if
_ name_ == "" __ main __ "":
    main ()
",147,"def main ( ) :
    The program should determine whether the given year is a leap year
    ( divisible by 4, divisible by 100 but also by 400).
    print ( "" This program will help you identify if a given year is a leap
        year or not . "")
    print ( ""
    identify_a_ leap year ()
    ask _ for _ a _ new _year _ to _identify ( )
def identify_ a_ leap-year () :
    print (""Please input a year below ( in number form). "")
    Year = int (input (""Year:
    print ("" "")
    if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;
        print (""The Year"" + str (Year) + "" ""+ "" is a leap year. "")
    else :
        print ( "" the Year "" + str ( Year ) + "" "" + "" is not a leap year . "" )
def ask-for-a-new year_ to _ identify ( ) :
    while True :
        print ("" "")
        ask - input ( "" Do you want to identify a new year ? Yes / No : "" )
        print ("" "")
        if ask == ""Yes "" or ask == ""yes"":
        identify_ a _ leap - year ( )
        elif ask == ""No"" or ask = ""no"":
        print ( "" Thank you . See you again ! "")
        break
        elif ask != ""Yes or ask ! = ""yes"" a ask != ""No"" or ask != ""no"".
        print ( "" Wrong keyword . Please type the exact keyword . "")
if
_ name_ == "" __ main __ "":
    main ()
",163,"def main ( ) :
    The program should determine whether the given year is a leap year
    ( divisible by 4, divisible by 100 but also by 400).
    print ( "" This program will help you identify if a given year is a leap
        year or not . "")
    print ( ""
    identify_a_ leap year ()
    ask _ for _ a _ new _year _ to _identify ( )
def identify_ a_ leap-year () :
    print (""Please input a year below ( in number form). "")
    Year = int (input (""Year:
    print ("" "")
    if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;
        print (""The Year"" + str (Year) + "" ""+ "" is a leap year. "")
    else :
        print ( "" the Year "" + str ( Year ) + "" "" + "" is not a leap year . "" )
def ask-for-a-new year_ to _ identify ( ) :
    while True :
        print ("" "")
        ask - input ( "" Do you want to identify a new year ? Yes / No : "" )
        print ("" "")
        if ask == ""Yes "" or ask == ""yes"":
        identify_ a _ leap - year ( )
        elif ask == ""No"" or ask = ""no"":
        print ( "" Thank you . See you again ! "")
        break
        elif ask != ""Yes or ask ! = ""yes"" a ask != ""No"" or ask != ""no"".
        print ( "" Wrong keyword . Please type the exact keyword . "")
if
_ name_ == "" __ main __ "":
    main ()
",163,"def main ( ) :
    The program should determine whether the given year is a leap year
    ( divisible by 4, divisible by 100 but also by 400).
    print ( "" This program will help you identify if a given year is a leap
        year or not . "")
    print ( ""
    identify_a_ leap year ()
    ask _ for _ a _ new _year _ to _identify ( )
def identify_ a_ leap-year () :
    print (""Please input a year below ( in number form). "")
    Year = int (input (""Year:
    print ("" "")
    if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;
        print (""The Year"" + str (Year) + "" ""+ "" is a leap year. "")
    else :
        print ( "" the Year "" + str ( Year ) + "" "" + "" is not a leap year . "" )
def ask-for-a-new year_ to _ identify ( ) :
    while True :
        print ("" "")
        ask - input ( "" Do you want to identify a new year ? Yes / No : "" )
        print ("" "")
        if ask == ""Yes "" or ask == ""yes"":
        identify_ a _ leap - year ( )
        elif ask == ""No"" or ask = ""no"":
        print ( "" Thank you . See you again ! "")
        break
        elif ask != ""Yes or ask ! = ""yes"" a ask != ""No"" or ask != ""no"".
        print ( "" Wrong keyword . Please type the exact keyword . "")
if
_ name_ == "" __ main __ "":
    main ()
",163,"def main ( ) :
The program should determine whether the given year is a leap year
( divisible by 4, divisible by 100 but also by 400).
print ( "" This program will help you identify if a given year is a leap
    year or not . "")
print ( ""
identify_a_ leap year ()
ask _ for _ a _ new _year _ to _identify ( )
def identify_ a_ leap-year () :
print (""Please input a year below ( in number form). "")
Year = int (input (""Year:
print ("" "")
if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;
    print (""The Year"" + str (Year) + "" ""+ "" is a leap year. "")
else :
    print ( "" the Year "" + str ( Year ) + "" "" + "" is not a leap year . "" )
def ask-for-a-new year_ to _ identify ( ) :
while True :
    print ("" "")
    ask - input ( "" Do you want to identify a new year ? Yes / No : "" )
    print ("" "")
    if ask == ""Yes "" or ask == ""yes"":
    identify_ a _ leap - year ( )
    elif ask == ""No"" or ask = ""no"":
    print ( "" Thank you . See you again ! "")
    break
    elif ask != ""Yes or ask ! = ""yes"" a ask != ""No"" or ask != ""no"".
    print ( "" Wrong keyword . Please type the exact keyword . "")
if
_ name_ == "" __ main __ "":
main ()
",257,"def main ( ) :
    The program should determine whether the given year is a leap year
    ( divisible by 4, divisible by 100 but also by 400).
    print ( "" This program will help you identify if a given year is a leap
    year or not . "")
    print ( ""
    identify_a_ leap year ()
    ask _ for _ a _ new _year _ to _identify ( )
def identify_ a_ leap-year () :
    print (""Please input a year below ( in number form). "")
    Year = int (input (""Year:
    print ("" "")
    if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;
    print (""The Year"" + str (Year) + "" ""+ "" is a leap year. "")
    else :
    print ( "" the Year "" + str ( Year ) + "" "" + "" is not a leap year . "" )
def ask-for-a-new year_ to _ identify ( ) :
    while True :
    print ("" "")
    ask - input ( "" Do you want to identify a new year ? Yes / No : "" )
    print ("" "")
    if ask == ""Yes "" or ask == ""yes"":
    identify_ a _ leap - year ( )
    elif ask == ""No"" or ask = ""no"":
    print ( "" Thank you . See you again ! "")
    break
    elif ask != ""Yes or ask ! = ""yes"" a ask != ""No"" or ask != ""no"".
    print ( "" Wrong keyword . Please type the exact keyword . "")
if
_ name_ == "" __ main __ "":
    main ()
",206,"def main ( ) :
The program should determine whether the given year is a leap year
( divisible by 4, divisible by 100 but also by 400).
print ( "" This program will help you identify if a given year is a leap
year or not . "")
print ( ""
identify_a_ leap year ()
ask _ for _ a _ new _year _ to _identify ( )
def identify_ a_ leap-year () :
print (""Please input a year below ( in number form). "")
Year = int (input (""Year:
print ("" "")
if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;
print (""The Year"" + str (Year) + "" ""+ "" is a leap year. "")
else :
print ( "" the Year "" + str ( Year ) + "" "" + "" is not a leap year . "" )
def ask-for-a-new year_ to _ identify ( ) :
while True :
print ("" "")
ask - input ( "" Do you want to identify a new year ? Yes / No : "" )
print ("" "")
if ask == ""Yes "" or ask == ""yes"":
identify_ a _ leap - year ( )
elif ask == ""No"" or ask = ""no"":
print ( "" Thank you . See you again ! "")
break
elif ask != ""Yes or ask ! = ""yes"" a ask != ""No"" or ask != ""no"".
print ( "" Wrong keyword . Please type the exact keyword . "")
if
_ name_ == "" __ main __ "":
main ()
",301
"sum = 0
number = input()
for i in number:
    sum += int(i)
Print(sum)
","Sun = D
number = input ()
for i in number :
Sun + = int (i)
Print (Sum)",16,"            Sun = D
        number = input ()
for i in number :
                Sun + = int (i)
    Print (Sum)
",47,"    Sun = D
number = input ()
for i in number :
        Sun + = int (i)
Print (Sum)
",19,"Sun = D
number = input ()
for i in number :
    Sun + = int (i)
Print (Sum)
",11,"Sun = D
number = input ()
for i in number :
    Sun + = int (i)
Print (Sum)
",11,"Sun = D
number = input ()
for i in number :
    Sun + = int (i)
Print (Sum)
",11,"Sun = D
number = input ()
for i in number :
    Sun + = int (i)
Print (Sum)
",11,"Sun = D
number = input ()
for i in number :
    Sun + = int (i)
Print (Sum)
",11,"Sun = D
number = input ()
for i in number :
    Sun + = int (i)
Print (Sum)
",11,"Sun = D
number = input ()
for i in number :
    Sun + = int (i)
Print (Sum)
",11,"Sun = D
number = input ()
for i in number :
    Sun + = int (i)
Print (Sum)
",11
"def factorial(n):
    if n <= 1:
        return 1
    else:
        return factorial(n - 1) * n
print(factorial(int(input())))
","def factorial (n):
if n <= 1 ;
Return 1
else :
Return factorial (n-1) * h
Print (factorial (int (input ()))",40,"def factorial (n) :
        if n <= 1 :
                Return 1
            else :
                    Return factorial (n-1) * h
    Print (factorial (int (input ())))
",51,"def factorial (n) :
    if n <= 1 :
            Return 1
        else :
                Return factorial (n-1) * h
Print (factorial (int (input ())))
",31,"def factorial (n) :
    if n <= 1 :
        Return 1
    else :
            Return factorial (n-1) * h
Print (factorial (int (input ())))
",19,"def factorial (n) :
    if n <= 1 :
        Return 1
    else :
        Return factorial (n-1) * h
Print (factorial (int (input ())))
",15,"def factorial (n) :
    if n <= 1 :
        Return 1
    else :
        Return factorial (n-1) * h
Print (factorial (int (input ())))
",15,"def factorial (n) :
    if n <= 1 :
        Return 1
    else :
        Return factorial (n-1) * h
Print (factorial (int (input ())))
",15,"def factorial (n) :
    if n <= 1 :
        Return 1
    else :
        Return factorial (n-1) * h
Print (factorial (int (input ())))
",15,"def factorial (n) :
    if n <= 1 :
        Return 1
    else :
        Return factorial (n-1) * h
Print (factorial (int (input ())))
",15,"def factorial (n) :
    if n <= 1 :
        Return 1
    else :
        Return factorial (n-1) * h
Print (factorial (int (input ())))
",15,"def factorial (n) :
    if n <= 1 :
        Return 1
    else :
        Return factorial (n-1) * h
Print (factorial (int (input ())))
",15
"year = int(input)
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
","Year = ent (input)
if year / n == 4 and year 0/ 100 /=/ or year / 400 == 0 ;
Print (true)
else :
Print (False )",29,"Year = int (input)
    if year % n == 4 and year 1/ 140 != / or Year / 400 == 0 ;
                Print (true)
        else :
            Print (False)
",50,"Year = int (input)
if year % n == 4 and year 1/ 140 != / or Year / 400 == 0 ;
    Print (true)
else :
    Print (False)
",18,"Year = int (input)
if year % n == 4 and year 1/ 140 != / or Year / 400 == 0 ;
    Print (true)
else :
    Print (False)
",18,"Year = int (input)
if year % n == 4 and year 1/ 140 != / or Year / 400 == 0 ;
    Print (true)
else :
    Print (False)
",18,"Year = int (input)
if year % n == 4 and year 1/ 140 != / or Year / 400 == 0 ;
    Print (true)
else :
    Print (False)
",18,"Year = int (input)
if year % n == 4 and year 1/ 140 != / or Year / 400 == 0 ;
    Print (true)
else :
    Print (False)
",18,"Year = int (input)
if year % n == 4 and year 1/ 140 != / or Year / 400 == 0 ;
    Print (true)
else :
    Print (False)
",18,"Year = int (input)
if year % n == 4 and year 1/ 140 != / or Year / 400 == 0 ;
    Print (true)
else :
    Print (False)
",18,"Year = int (input)
if year % n == 4 and year 1/ 140 != / or Year / 400 == 0 ;
    Print (true)
else :
    Print (False)
",18,"Year = int (input)
if year % n == 4 and year 1/ 140 != / or Year / 400 == 0 ;
    Print (true)
else :
    Print (False)
",18
"Word = input()
Word = "" "".join([i for i in word[::-1]])
Print(Word)
","Word = input ()
Word = """". join ([ "" for i in word [-]
Print (Word)",14,"Word = input ()
    Word = ""1"". join ([ i for i in word[ -]
        Print (Word)
",22,"Word = input ()
Word = ""1"". join ([ i for i in word[ -]
    Print (Word)
",14,"Word = input ()
Word = ""1"". join ([ i for i in word[ -]
Print (Word)
",11,"Word = input ()
Word = ""1"". join ([ i for i in word[ -]
Print (Word)
",11,"Word = input ()
Word = ""1"". join ([ i for i in word[ -]
Print (Word)
",11,"Word = input ()
Word = ""1"". join ([ i for i in word[ -]
Print (Word)
",11,"Word = input ()
Word = ""1"". join ([ i for i in word[ -]
Print (Word)
",11,"Word = input ()
Word = ""1"". join ([ i for i in word[ -]
Print (Word)
",11,"Word = input ()
Word = ""1"". join ([ i for i in word[ -]
Print (Word)
",11,"Word = input ()
Word = ""1"". join ([ i for i in word[ -]
Print (Word)
",11
"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
","list 1 = [ 1, 2, 3, 4]
bist 2 = [ 3,4,5,6]
list 3 = Ji par i in list 1 if i in listz]
Print (list 3)",18,"list 1 = [ 1, 2, 3, 4]
        list 2 = [ 3, 4, 5, 6 ]
    list 3 = Ji por i in list 1 if i in listz]
        Print (list 3)
",33,"list 1 = [ 1, 2, 3, 4]
    list 2 = [ 3, 4, 5, 6 ]
    list 3 = Ji por i in list 1 if i in listz]
    Print (list 3)
",25,"list 1 = [ 1, 2, 3, 4]
list 2 = [ 3, 4, 5, 6 ]
list 3 = Ji por i in list 1 if i in listz]
Print (list 3)
",13,"list 1 = [ 1, 2, 3, 4]
list 2 = [ 3, 4, 5, 6 ]
list 3 = Ji por i in list 1 if i in listz]
Print (list 3)
",13,"list 1 = [ 1, 2, 3, 4]
list 2 = [ 3, 4, 5, 6 ]
list 3 = Ji por i in list 1 if i in listz]
Print (list 3)
",13,"list 1 = [ 1, 2, 3, 4]
list 2 = [ 3, 4, 5, 6 ]
list 3 = Ji por i in list 1 if i in listz]
Print (list 3)
",13,"list 1 = [ 1, 2, 3, 4]
list 2 = [ 3, 4, 5, 6 ]
list 3 = Ji por i in list 1 if i in listz]
Print (list 3)
",13,"list 1 = [ 1, 2, 3, 4]
list 2 = [ 3, 4, 5, 6 ]
list 3 = Ji por i in list 1 if i in listz]
Print (list 3)
",13,"list 1 = [ 1, 2, 3, 4]
list 2 = [ 3, 4, 5, 6 ]
list 3 = Ji por i in list 1 if i in listz]
Print (list 3)
",13,"list 1 = [ 1, 2, 3, 4]
list 2 = [ 3, 4, 5, 6 ]
list 3 = Ji por i in list 1 if i in listz]
Print (list 3)
",13
"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
","list 1 = [1, 2, 3, 4, 5, 6, 7, 8,9]
even = [è for i in list 1 if i|2=]
Print (even)",14,"list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]
    even = [è for i in list1 if i /2=]
    Print ( even)
",18,"list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]
    even = [è for i in list1 if i /2=]
    Print ( even)
",18,"list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [è for i in list1 if i /2=]
Print ( even)
",12,"list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [è for i in list1 if i /2=]
Print ( even)
",12,"list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [è for i in list1 if i /2=]
Print ( even)
",12,"list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [è for i in list1 if i /2=]
Print ( even)
",12,"list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [è for i in list1 if i /2=]
Print ( even)
",12,"list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [è for i in list1 if i /2=]
Print ( even)
",12,"list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [è for i in list1 if i /2=]
Print ( even)
",12,"list 1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [è for i in list1 if i /2=]
Print ( even)
",12
"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")

if __name__ == ""__main__"":
    main()
","def main ():
year = int (input ()
if ( year % 4 == 0 and year % 100 ! = 0):
print (""True"")
elif (year % 100 == 0 and year % 400=0):
print (""True"")
else:
print (""False"")
if
__ name __== "" __ main_"".
main ()",70,"def main ():
        year = int (input()
        if ( year % 4 == 0 and year % 100 ! = 0):
                        print (""True"")
                elif (year % 100 == 0 and year % 400=0):
                            print (""True"")
            else:
                                print (""False"")
if
    __ name _== "" __ main_"":
                    main ()
",130,"def main ():
        year = int (input()
        if ( year % 4 == 0 and year % 100 ! = 0):
            print (""True"")
        elif (year % 100 == 0 and year % 400=0):
                print (""True"")
        else:
                print (""False"")
if
    __ name _== "" __ main_"":
        main ()
",66,"def main ():
        year = int (input()
        if ( year % 4 == 0 and year % 100 ! = 0):
            print (""True"")
        elif (year % 100 == 0 and year % 400=0):
            print (""True"")
        else:
            print (""False"")
if
    __ name _== "" __ main_"":
        main ()
",59,"def main ():
        year = int (input()
        if ( year % 4 == 0 and year % 100 ! = 0):
            print (""True"")
        elif (year % 100 == 0 and year % 400=0):
            print (""True"")
        else:
            print (""False"")
if
    __ name _== "" __ main_"":
        main ()
",59,"def main ():
        year = int (input()
        if ( year % 4 == 0 and year % 100 ! = 0):
            print (""True"")
        elif (year % 100 == 0 and year % 400=0):
            print (""True"")
        else:
            print (""False"")
if
    __ name _== "" __ main_"":
        main ()
",59,"def main ():
    year = int (input()
    if ( year % 4 == 0 and year % 100 ! = 0):
        print (""True"")
    elif (year % 100 == 0 and year % 400=0):
        print (""True"")
    else:
        print (""False"")
if
    __ name _== "" __ main_"":
    main ()
",27,"def main ():
    year = int (input()
    if ( year % 4 == 0 and year % 100 ! = 0):
        print (""True"")
    elif (year % 100 == 0 and year % 400=0):
        print (""True"")
    else:
        print (""False"")
if
__ name _== "" __ main_"":
    main ()
",24,"def main ():
    year = int (input()
    if ( year % 4 == 0 and year % 100 ! = 0):
        print (""True"")
    elif (year % 100 == 0 and year % 400=0):
        print (""True"")
    else:
        print (""False"")
if
__ name _== "" __ main_"":
    main ()
",24,"def main ():
year = int (input()
if ( year % 4 == 0 and year % 100 ! = 0):
    print (""True"")
elif (year % 100 == 0 and year % 400=0):
    print (""True"")
else:
    print (""False"")
if
__ name _== "" __ main_"":
main ()
",55,"def main ():
year = int (input()
if ( year % 4 == 0 and year % 100 ! = 0):
    print (""True"")
elif (year % 100 == 0 and year % 400=0):
    print (""True"")
else:
    print (""False"")
if
__ name _== "" __ main_"":
main ()
",55
"from karel.stanfordkarel import *

def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()

def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()

def build_beeper():
    put_beeper()
    move()

def go_back():
    turn_around()
    step_up()

def turn_around():
    turn_left()
    turn_left()

def step_up():
    move()
    move()
    move()
    move()

if __name__ == ""__main__"":
    main()
","from karel. stanford kavel import *
def main ():
build-column ( )
step -up ( )
build- column ()
Step -up ()
build- column ( )
Step -up ()
build - column ()
def
build - column ( ) :
turn - left ( )
build - beeper ()
build - beeper ( )
build - beeper ( )
build - beeper ( )
put - beeper ( )
go - back ()
turn- left ( )
def
build - beeper ( ) :
put - beeper ()
move ()
det
go - back ():
turn- around ( )
step -up ()
dex
turn- around () :
turn - left ()
turn - left ()
dex
step-up ():
move ()
move ( )
move ( )
move ( )
-
if - name _ == - main _:
main ( )",245,"from karel. stanford kavel import *
    def main ():
                                build-column ( )
                                    Step -up ( )
                                        build - column ()
                                            Step-up()
                                                build- column ( )
                                                    Step-up()
                                                            build - column ()
        def
                                                        build - column ( ) :
                                                turn - left ( )
                                                            build - beeper ( )
                                                                    build - beeper ( )
                                                                build - beeper ( )
                                                                            build - beeper ( )
                                                                            put - beeper ()
                                                                        go - back ()
                                                                        turn- left ( )
            def
                                                                    build - beeper ( ):
                                                                                put- beeper ( )
                                                                                move ()
                det
                                                                                    go - back ():
                                                                                    turn- around ( )
                                                                                        Step -up ()
                    dex
                                                                                turn- around ( ) :
                                                                                    turn - left ()
                                                                                        turn - left ()
                        dex
                                                                                                step -up():
                                                                                                        move ( )
                                                                                                    move ( )
                                                                                                        move ( )
                                                                                                            move ( )
                            if - name _ = = - main _:
                                                                                            main ( )
",2382,"from karel. stanford kavel import *
def main ():
            build-column ( )
            Step -up ( )
            build - column ()
            Step-up()
            build- column ( )
            Step-up()
            build - column ()
def
            build - column ( ) :
            turn - left ( )
            build - beeper ( )
            build - beeper ( )
            build - beeper ( )
                build - beeper ( )
                put - beeper ()
            go - back ()
            turn- left ( )
    def
            build - beeper ( ):
                put- beeper ( )
                move ()
    det
                go - back ():
                turn- around ( )
                Step -up ()
        dex
                turn- around ( ) :
                turn - left ()
                turn - left ()
        dex
                    step -up():
                    move ( )
                    move ( )
                    move ( )
                    move ( )
        if - name _ = = - main _:
                    main ( )
",520,"from karel. stanford kavel import *
def main ():
    build-column ( )
    Step -up ( )
    build - column ()
    Step-up()
    build- column ( )
    Step-up()
    build - column ()
def
    build - column ( ) :
    turn - left ( )
    build - beeper ( )
    build - beeper ( )
    build - beeper ( )
    build - beeper ( )
    put - beeper ()
    go - back ()
    turn- left ( )
def
    build - beeper ( ):
    put- beeper ( )
    move ()
det
    go - back ():
    turn- around ( )
    Step -up ()
dex
    turn- around ( ) :
    turn - left ()
    turn - left ()
dex
    step -up():
    move ( )
    move ( )
    move ( )
    move ( )
if - name _ = = - main _:
    main ( )
",157,"from karel. stanford kavel import *
def main ():
    build-column ( )
    Step -up ( )
    build - column ()
    Step-up()
    build- column ( )
    Step-up()
    build - column ()
def
    build - column ( ) :
    turn - left ( )
    build - beeper ( )
    build - beeper ( )
    build - beeper ( )
    build - beeper ( )
    put - beeper ()
    go - back ()
    turn- left ( )
def
    build - beeper ( ):
    put- beeper ( )
    move ()
det
    go - back ():
    turn- around ( )
    Step -up ()
dex
    turn- around ( ) :
    turn - left ()
    turn - left ()
dex
    step -up():
    move ( )
    move ( )
    move ( )
    move ( )
if - name _ = = - main _:
    main ( )
",157,"from karel. stanford kavel import *
def main ():
    build-column ( )
    Step -up ( )
    build - column ()
    Step-up()
    build- column ( )
    Step-up()
    build - column ()
def
    build - column ( ) :
    turn - left ( )
    build - beeper ( )
    build - beeper ( )
    build - beeper ( )
    build - beeper ( )
    put - beeper ()
    go - back ()
    turn- left ( )
def
    build - beeper ( ):
    put- beeper ( )
    move ()
det
    go - back ():
    turn- around ( )
    Step -up ()
dex
    turn- around ( ) :
    turn - left ()
    turn - left ()
dex
    step -up():
    move ( )
    move ( )
    move ( )
    move ( )
if - name _ = = - main _:
    main ( )
",157,"from karel. stanford kavel import *
def main ():
    build-column ( )
    Step -up ( )
    build - column ()
    Step-up()
    build- column ( )
    Step-up()
    build - column ()
def
    build - column ( ) :
    turn - left ( )
    build - beeper ( )
    build - beeper ( )
    build - beeper ( )
    build - beeper ( )
    put - beeper ()
    go - back ()
    turn- left ( )
def
    build - beeper ( ):
    put- beeper ( )
    move ()
det
    go - back ():
    turn- around ( )
    Step -up ()
dex
    turn- around ( ) :
    turn - left ()
    turn - left ()
dex
    step -up():
    move ( )
    move ( )
    move ( )
    move ( )
if - name _ = = - main _:
    main ( )
",157,"from karel. stanford kavel import *
def main ():
    build-column ( )
    Step -up ( )
    build - column ()
    Step-up()
    build- column ( )
    Step-up()
    build - column ()
def
    build - column ( ) :
    turn - left ( )
    build - beeper ( )
    build - beeper ( )
    build - beeper ( )
    build - beeper ( )
    put - beeper ()
    go - back ()
    turn- left ( )
def
    build - beeper ( ):
    put- beeper ( )
    move ()
det
    go - back ():
    turn- around ( )
    Step -up ()
dex
    turn- around ( ) :
    turn - left ()
    turn - left ()
dex
    step -up():
    move ( )
    move ( )
    move ( )
    move ( )
if - name _ = = - main _:
    main ( )
",157,"from karel. stanford kavel import *
def main ():
    build-column ( )
    Step -up ( )
    build - column ()
    Step-up()
    build- column ( )
    Step-up()
    build - column ()
def
    build - column ( ) :
    turn - left ( )
    build - beeper ( )
    build - beeper ( )
    build - beeper ( )
    build - beeper ( )
    put - beeper ()
    go - back ()
    turn- left ( )
def
    build - beeper ( ):
    put- beeper ( )
    move ()
det
    go - back ():
    turn- around ( )
    Step -up ()
dex
    turn- around ( ) :
    turn - left ()
    turn - left ()
dex
    step -up():
    move ( )
    move ( )
    move ( )
    move ( )
if - name _ = = - main _:
    main ( )
",157,"from karel. stanford kavel import *
def main ():
    build-column ( )
    Step -up ( )
    build - column ()
    Step-up()
    build- column ( )
    Step-up()
    build - column ()
def
    build - column ( ) :
    turn - left ( )
    build - beeper ( )
    build - beeper ( )
    build - beeper ( )
    build - beeper ( )
    put - beeper ()
    go - back ()
    turn- left ( )
def
    build - beeper ( ):
    put- beeper ( )
    move ()
det
    go - back ():
    turn- around ( )
    Step -up ()
dex
    turn- around ( ) :
    turn - left ()
    turn - left ()
dex
    step -up():
    move ( )
    move ( )
    move ( )
    move ( )
if - name _ = = - main _:
    main ( )
",157,"from karel. stanford kavel import *
def main ():
build-column ( )
Step -up ( )
build - column ()
Step-up()
build- column ( )
Step-up()
build - column ()
def
build - column ( ) :
turn - left ( )
build - beeper ( )
build - beeper ( )
build - beeper ( )
build - beeper ( )
put - beeper ()
go - back ()
turn- left ( )
def
build - beeper ( ):
put- beeper ( )
move ()
det
go - back ():
turn- around ( )
Step -up ()
dex
turn- around ( ) :
turn - left ()
turn - left ()
dex
step -up():
move ( )
move ( )
move ( )
move ( )
if - name _ = = - main _:
main ( )
",245
"def main():
    input_string = input('Input string: ')
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print ret
if __name__ == '__main__':
    main()
","def main () ;
input_ string = input ( Input string:')
ret = "" ""
for ch in input string
ref = ret + ch.upper()
print ref
if __ name __ =
1
1
- -
main
--
main ( )",57,"    def main () ;
                    input_ string = input ( Input string:')
                ret = "" ""
                    for ch in input string
                        ref = ret + ch.upper()
            print ret
if __ name __ =
                            1
                                                1
                                        main
                                -
                                    -
                                                    -
                                            --
        main ( )
",384,"def main () ;
    input_ string = input ( Input string:')
    ret = "" ""
    for ch in input string
        ref = ret + ch.upper()
    print ret
if __ name __ =
            1
                                1
                        main
                -
                    -
                                    -
                            --
    main ( )
",196,"def main () ;
    input_ string = input ( Input string:')
    ret = "" ""
    for ch in input string
        ref = ret + ch.upper()
    print ret
if __ name __ =
            1
                    1
            main
            -
            -
                    -
                --
    main ( )
",132,"def main () ;
    input_ string = input ( Input string:')
    ret = "" ""
    for ch in input string
        ref = ret + ch.upper()
    print ret
if __ name __ =
            1
                    1
            main
            -
            -
                    -
                --
    main ( )
",132,"def main () ;
input_ string = input ( Input string:')
ret = "" ""
for ch in input string
    ref = ret + ch.upper()
print ret
if __ name __ =
        1
                1
        main
        -
        -
                -
            --
main ( )
",119,"def main () ;
input_ string = input ( Input string:')
ret = "" ""
for ch in input string
    ref = ret + ch.upper()
print ret
if __ name __ =
        1
            1
        main
        -
        -
            -
            --
main ( )
",111,"def main () ;
input_ string = input ( Input string:')
ret = "" ""
for ch in input string
ref = ret + ch.upper()
print ret
if __ name __ =
    1
        1
    main
    -
    -
        -
        --
main ( )
",87,"def main () ;
input_ string = input ( Input string:')
ret = "" ""
for ch in input string
ref = ret + ch.upper()
print ret
if __ name __ =
    1
        1
    main
    -
    -
        -
        --
main ( )
",87,"def main () ;
input_ string = input ( Input string:')
ret = "" ""
for ch in input string
ref = ret + ch.upper()
print ret
if __ name __ =
    1
        1
    main
    -
    -
        -
        --
main ( )
",87,"def main () ;
input_ string = input ( Input string:')
ret = "" ""
for ch in input string
ref = ret + ch.upper()
print ret
if __ name __ =
    1
    1
    main
    -
    -
    -
    --
main ( )
",75
"from karel.stanfordkarel import *

def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()

def move_to_beeper():
    while front_is_clear():
        move
    turn_right()
    move()
    turn_left()
    move()

def turn_around():
    turn_left()
    turn_left()
","from Karel. StanfordKarel import
def main ():
move_to_beeper ()
pick-beeper ()
turn-around()
return_to_start ()
def more_to_ beeper () :
While front-is-clear ();
move
turn_Right ()
move ()
turn-left ()
move ()
def turu_around ():
tura_left ()
turn left ()",89,"from Karel. Stanford Karel import
    def main ():
                move_to_beeper ()
                        pick_beeper ()
                                turn-around()
                                    return_to_start ()
        def more_to_ beeper () :
                    While front-is-clear ();
                                                        move
                            turn_right ()
                                    more ()
                                        turn-left ()
                                            Nuove ()
            def turu_around ();
                                                tura_left ()
                                                    turn left ()
",438,"from Karel. Stanford Karel import
def main ():
        move_to_beeper ()
        pick_beeper ()
        turn-around()
        return_to_start ()
def more_to_ beeper () :
        While front-is-clear ();
                move
        turn_right ()
        more ()
        turn-left ()
        Nuove ()
    def turu_around ();
            tura_left ()
            turn left ()
",102,"from Karel. Stanford Karel import
def main ():
    move_to_beeper ()
    pick_beeper ()
    turn-around()
    return_to_start ()
def more_to_ beeper () :
    While front-is-clear ();
        move
    turn_right ()
    more ()
    turn-left ()
    Nuove ()
def turu_around ();
    tura_left ()
    turn left ()
",39,"from Karel. Stanford Karel import
def main ():
    move_to_beeper ()
    pick_beeper ()
    turn-around()
    return_to_start ()
def more_to_ beeper () :
    While front-is-clear ();
        move
    turn_right ()
    more ()
    turn-left ()
    Nuove ()
def turu_around ();
    tura_left ()
    turn left ()
",39,"from Karel. Stanford Karel import
def main ():
    move_to_beeper ()
    pick_beeper ()
    turn-around()
    return_to_start ()
def more_to_ beeper () :
    While front-is-clear ();
    move
    turn_right ()
    more ()
    turn-left ()
    Nuove ()
def turu_around ();
    tura_left ()
    turn left ()
",43,"from Karel. Stanford Karel import
def main ():
    move_to_beeper ()
    pick_beeper ()
    turn-around()
    return_to_start ()
def more_to_ beeper () :
    While front-is-clear ();
    move
    turn_right ()
    more ()
    turn-left ()
    Nuove ()
def turu_around ();
    tura_left ()
    turn left ()
",43,"from Karel. Stanford Karel import
def main ():
    move_to_beeper ()
    pick_beeper ()
    turn-around()
    return_to_start ()
def more_to_ beeper () :
    While front-is-clear ();
    move
    turn_right ()
    more ()
    turn-left ()
    Nuove ()
def turu_around ();
    tura_left ()
    turn left ()
",43,"from Karel. Stanford Karel import
def main ():
move_to_beeper ()
pick_beeper ()
turn-around()
return_to_start ()
def more_to_ beeper () :
While front-is-clear ();
move
turn_right ()
more ()
turn-left ()
Nuove ()
def turu_around ();
tura_left ()
turn left ()
",90,"from Karel. Stanford Karel import
def main ():
move_to_beeper ()
pick_beeper ()
turn-around()
return_to_start ()
def more_to_ beeper () :
While front-is-clear ();
move
turn_right ()
more ()
turn-left ()
Nuove ()
def turu_around ();
tura_left ()
turn left ()
",90,"from Karel. Stanford Karel import
def main ():
move_to_beeper ()
pick_beeper ()
turn-around()
return_to_start ()
def more_to_ beeper () :
While front-is-clear ();
move
turn_right ()
more ()
turn-left ()
Nuove ()
def turu_around ();
tura_left ()
turn left ()
",90
"from karel.stanfordkarel import *

def main():
    while front_is_clear():
        fill_tower()

def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()

def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()

def turn_around():
    for i in range(2):
        turn_left()

def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()

def turn_right():
    for i in range(3):
        turn_left()

if __name__ == ""__main__"":
    main()
","from kanel stanfordkard import *
det main () :
while front_is_clear ():
bill_tower ( )
det fill-tower ():
while front-is-clean ():
put-beeper ()
move ()
put_beeper ()
column_return ()
def column_return ():
while front_ is_blocked ():
turn-around ()
while front_is_clear () :
move ( )
next_tower ()
det turn-around ():
for i in range (2) :
turn-left ( )
det next_tower ():
if right_is_clean ():
turn-right ( )
move()
turn-right ()
else :
turn-around ()
while front-is-clear ():
move( )
def turn-right ():
for i in range (3):
turn_left ()
if
- name _
== '_ main
1
..
main ()",236,"                    from kanel stanfordkard import *
                det main ():
                            while front_is_clear ():
                                                                    bill_tower ( )
            det fill_tower():
                                    while front_is_clean ():
                                                                        put-beeper ()
                                                                            move ()
                                put_beeper ()
                                        column_return ()
    def column_return ():
                                        while front_ is_blocked ():
                                                                                turn-around()
                                            while front_is_clear () :
                                                                                    move ( )
                                                    next_tower ()
        det turn-around ():
                                                        for i in range (2) :
                                                                                        turn-left ( )
    det
                                        next_tower ():
                                                        if right_is_clean ():
                                                                                            turn-right ( )
                                                                                            move ()
                                                                                                    turn-right ()
                                                else :
                                                                                                turn-around ()
                                                                                                    while front_is_dear ():
                                                                                                        move( )
def turn-right ():
                                                            for i in range (3):
                                                                                                    turn_left ()
                                                                                                            -
        if
                        - name _ = =
                                                                                                                main _'
                                                                main ()
",1974,"from kanel stanfordkard import *
det main ():
        while front_is_clear ():
            bill_tower ( )
det fill_tower():
        while front_is_clean ():
            put-beeper ()
            move ()
        put_beeper ()
        column_return ()
def column_return ():
        while front_ is_blocked ():
            turn-around()
        while front_is_clear () :
                move ( )
        next_tower ()
det turn-around ():
        for i in range (2) :
                    turn-left ( )
det
        next_tower ():
        if right_is_clean ():
                    turn-right ( )
                    move ()
                    turn-right ()
        else :
                    turn-around ()
                    while front_is_dear ():
                        move( )
def turn-right ():
        for i in range (3):
                    turn_left ()
                            -
if
    - name _ = =
                                main _'
        main ()
",311,"from kanel stanfordkard import *
det main ():
        while front_is_clear ():
            bill_tower ( )
det fill_tower():
        while front_is_clean ():
            put-beeper ()
            move ()
        put_beeper ()
        column_return ()
def column_return ():
        while front_ is_blocked ():
            turn-around()
        while front_is_clear () :
                move ( )
        next_tower ()
det turn-around ():
        for i in range (2) :
                turn-left ( )
det
        next_tower ():
        if right_is_clean ():
                turn-right ( )
                move ()
                turn-right ()
        else :
                turn-around ()
                while front_is_dear ():
                    move( )
def turn-right ():
        for i in range (3):
                turn_left ()
                        -
if
    - name _ = =
                            main _'
        main ()
",271,"from kanel stanfordkard import *
det main ():
        while front_is_clear ():
            bill_tower ( )
det fill_tower():
        while front_is_clean ():
            put-beeper ()
            move ()
        put_beeper ()
        column_return ()
def column_return ():
        while front_ is_blocked ():
            turn-around()
        while front_is_clear () :
            move ( )
        next_tower ()
det turn-around ():
        for i in range (2) :
            turn-left ( )
det
        next_tower ():
        if right_is_clean ():
            turn-right ( )
            move ()
            turn-right ()
        else :
            turn-around ()
            while front_is_dear ():
                move( )
def turn-right ():
        for i in range (3):
            turn_left ()
                    -
if
    - name _ = =
                        main _'
        main ()
",227,"from kanel stanfordkard import *
det main ():
    while front_is_clear ():
        bill_tower ( )
det fill_tower():
    while front_is_clean ():
        put-beeper ()
        move ()
    put_beeper ()
    column_return ()
def column_return ():
    while front_ is_blocked ():
        turn-around()
    while front_is_clear () :
        move ( )
    next_tower ()
det turn-around ():
    for i in range (2) :
        turn-left ( )
det
    next_tower ():
    if right_is_clean ():
        turn-right ( )
        move ()
        turn-right ()
    else :
        turn-around ()
        while front_is_dear ():
            move( )
def turn-right ():
    for i in range (3):
        turn_left ()
                -
if
    - name _ = =
                    main _'
    main ()
",115,"from kanel stanfordkard import *
det main ():
    while front_is_clear ():
        bill_tower ( )
det fill_tower():
    while front_is_clean ():
        put-beeper ()
        move ()
    put_beeper ()
    column_return ()
def column_return ():
    while front_ is_blocked ():
        turn-around()
    while front_is_clear () :
        move ( )
    next_tower ()
det turn-around ():
    for i in range (2) :
        turn-left ( )
det
    next_tower ():
    if right_is_clean ():
        turn-right ( )
        move ()
        turn-right ()
    else :
        turn-around ()
        while front_is_dear ():
            move( )
def turn-right ():
    for i in range (3):
        turn_left ()
            -
if
- name _ = =
            main _'
    main ()
",100,"from kanel stanfordkard import *
det main ():
    while front_is_clear ():
        bill_tower ( )
det fill_tower():
    while front_is_clean ():
        put-beeper ()
        move ()
    put_beeper ()
    column_return ()
def column_return ():
    while front_ is_blocked ():
        turn-around()
    while front_is_clear () :
        move ( )
    next_tower ()
det turn-around ():
    for i in range (2) :
        turn-left ( )
det
    next_tower ():
    if right_is_clean ():
        turn-right ( )
        move ()
        turn-right ()
    else :
        turn-around ()
        while front_is_dear ():
            move( )
def turn-right ():
    for i in range (3):
        turn_left ()
            -
if
- name _ = =
            main _'
    main ()
",100,"from kanel stanfordkard import *
det main ():
while front_is_clear ():
    bill_tower ( )
det fill_tower():
while front_is_clean ():
    put-beeper ()
    move ()
put_beeper ()
column_return ()
def column_return ():
while front_ is_blocked ():
    turn-around()
while front_is_clear () :
    move ( )
next_tower ()
det turn-around ():
    for i in range (2) :
    turn-left ( )
det
next_tower ():
    if right_is_clean ():
    turn-right ( )
    move ()
    turn-right ()
else :
    turn-around ()
    while front_is_dear ():
        move( )
def turn-right ():
    for i in range (3):
    turn_left ()
        -
if
- name _ = =
        main _'
    main ()
",173,"from kanel stanfordkard import *
det main ():
while front_is_clear ():
bill_tower ( )
det fill_tower():
while front_is_clean ():
put-beeper ()
move ()
put_beeper ()
column_return ()
def column_return ():
while front_ is_blocked ():
turn-around()
while front_is_clear () :
move ( )
next_tower ()
det turn-around ():
for i in range (2) :
turn-left ( )
det
next_tower ():
if right_is_clean ():
turn-right ( )
move ()
turn-right ()
else :
turn-around ()
while front_is_dear ():
    move( )
def turn-right ():
for i in range (3):
turn_left ()
    -
if
- name _ = =
    main _'
main ()
",232,"from kanel stanfordkard import *
det main ():
while front_is_clear ():
bill_tower ( )
det fill_tower():
while front_is_clean ():
put-beeper ()
move ()
put_beeper ()
column_return ()
def column_return ():
while front_ is_blocked ():
turn-around()
while front_is_clear () :
move ( )
next_tower ()
det turn-around ():
for i in range (2) :
turn-left ( )
det
next_tower ():
if right_is_clean ():
turn-right ( )
move ()
turn-right ()
else :
turn-around ()
while front_is_dear ():
    move( )
def turn-right ():
for i in range (3):
turn_left ()
    -
if
- name _ = =
    main _'
main ()
",232
"def filter_string_a(string):
      string.sort()
      filtered_string_list = [ ]
      for str in string:
             if str.startswith(""a""):
                    filtered_string_list.append(str)
       return filtered_string_list
input_string = [""apple"", ""banana"", ""avacado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)
","det filter-string-a (string) :
string. sort ()
filtered- string-list = []
foru stre in strung :
if stru. startswith (""a""):
filtered-string-lint: append
( stru)
returen filtered-string- list
input_string = \""apple"", ""bunana"", ""avacado
""cheving "" ""apricot""]
Output = filter-string-a (input_string)
print (output)",105,"def filter-string-a (string);
                string. sort ()
                        filtered- string-list = []
                    fore stry in string:
                            if stru startswith (""a"") :
                                filtered-string-lint: append
                                        (strc)
                        returin filtered-string-list
    input_string = \""apple"", ""bunana"", ""avacado
                                    ""chevery "" ""apriest ""]
        Output = filter- string-a (input_ string)
            print (output)
",228,"def filter-string-a (string);
        string. sort ()
        filtered- string-list = []
        fore stry in string:
            if stru startswith (""a"") :
                filtered-string-lint: append
                        (strc)
        returin filtered-string-list
    input_string = \""apple"", ""bunana"", ""avacado
                    ""chevery "" ""apriest ""]
    Output = filter- string-a (input_ string)
    print (output)
",110,"def filter-string-a (string);
        string. sort ()
        filtered- string-list = []
        fore stry in string:
            if stru startswith (""a"") :
                filtered-string-lint: append
                        (strc)
        returin filtered-string-list
    input_string = \""apple"", ""bunana"", ""avacado
                    ""chevery "" ""apriest ""]
    Output = filter- string-a (input_ string)
    print (output)
",110,"def filter-string-a (string);
    string. sort ()
    filtered- string-list = []
    fore stry in string:
        if stru startswith (""a"") :
            filtered-string-lint: append
                    (strc)
    returin filtered-string-list
input_string = \""apple"", ""bunana"", ""avacado
                ""chevery "" ""apriest ""]
Output = filter- string-a (input_ string)
print (output)
",100,"def filter-string-a (string);
    string. sort ()
    filtered- string-list = []
    fore stry in string:
        if stru startswith (""a"") :
            filtered-string-lint: append
                    (strc)
    returin filtered-string-list
input_string = \""apple"", ""bunana"", ""avacado
                ""chevery "" ""apriest ""]
Output = filter- string-a (input_ string)
print (output)
",100,"def filter-string-a (string);
    string. sort ()
    filtered- string-list = []
    fore stry in string:
        if stru startswith (""a"") :
            filtered-string-lint: append
                    (strc)
    returin filtered-string-list
input_string = \""apple"", ""bunana"", ""avacado
                ""chevery "" ""apriest ""]
Output = filter- string-a (input_ string)
print (output)
",100,"def filter-string-a (string);
    string. sort ()
    filtered- string-list = []
    fore stry in string:
        if stru startswith (""a"") :
            filtered-string-lint: append
                    (strc)
    returin filtered-string-list
input_string = \""apple"", ""bunana"", ""avacado
                ""chevery "" ""apriest ""]
Output = filter- string-a (input_ string)
print (output)
",100,"def filter-string-a (string);
    string. sort ()
    filtered- string-list = []
    fore stry in string:
        if stru startswith (""a"") :
            filtered-string-lint: append
                (strc)
    returin filtered-string-list
input_string = \""apple"", ""bunana"", ""avacado
            ""chevery "" ""apriest ""]
Output = filter- string-a (input_ string)
print (output)
",92,"def filter-string-a (string);
    string. sort ()
    filtered- string-list = []
    fore stry in string:
        if stru startswith (""a"") :
            filtered-string-lint: append
                (strc)
    returin filtered-string-list
input_string = \""apple"", ""bunana"", ""avacado
            ""chevery "" ""apriest ""]
Output = filter- string-a (input_ string)
print (output)
",92,"def filter-string-a (string);
    string. sort ()
    filtered- string-list = []
    fore stry in string:
        if stru startswith (""a"") :
            filtered-string-lint: append
                (strc)
    returin filtered-string-list
input_string = \""apple"", ""bunana"", ""avacado
            ""chevery "" ""apriest ""]
Output = filter- string-a (input_ string)
print (output)
",92
"def main():
  while front_is_clear():
      move()
  if front_is_blocked():
      turn_around()
  move()
  turn_left()
  move()
  pick_beeper()
  turn_left()
  turn_left()
  while front_is_clear():
      move()
  if front_is_blocked():
      turn_around()
  move()
  turn_around()

def turn_around():
    for i in range(3)
        turn_left ()
","def main :
While front-is-clear():
move ( )
if front_is_blocked ().
turn-around ()
move ()
turn_left ( )
move ()
pick-beeper ()
turn- left ()
turn-left ()
while front_is_clear ()!
move ( )
if front_is _ blocked ( ).
turn - around ( )
move ()
turn around ()
def turn-around ():
for i in range (3)
left ()",108,"    def main :
                    While front- is-clear():
                                            move ( )
        if front_is_blocked ().
                                    turn-around ()
            move ()
                turn_left ( )
            move ()
                pick-beeper ( )
                turn- left ()
                turn_left ()
                    while front_is_ clear ()!
                                                move ()
                    if front_ is_ blocked ( ).
                                        turn - around ( )
                            move ( )
                                turn around ()
def turn-around ().
                        for i in range (3)
                                                    Left ()
",451,"    def main :
        While front- is-clear():
                    move ( )
        if front_is_blocked ().
                turn-around ()
        move ()
        turn_left ( )
        move ()
        pick-beeper ( )
        turn- left ()
        turn_left ()
        while front_is_ clear ()!
                    move ()
        if front_ is_ blocked ( ).
                    turn - around ( )
        move ( )
            turn around ()
def turn-around ().
        for i in range (3)
                        Left ()
",199,"    def main :
        While front- is-clear():
                move ( )
        if front_is_blocked ().
            turn-around ()
        move ()
        turn_left ( )
        move ()
        pick-beeper ( )
        turn- left ()
        turn_left ()
        while front_is_ clear ()!
                move ()
        if front_ is_ blocked ( ).
                turn - around ( )
        move ( )
        turn around ()
def turn-around ().
        for i in range (3)
                    Left ()
",175,"    def main :
        While front- is-clear():
            move ( )
        if front_is_blocked ().
            turn-around ()
        move ()
        turn_left ( )
        move ()
        pick-beeper ( )
        turn- left ()
        turn_left ()
        while front_is_ clear ()!
            move ()
        if front_ is_ blocked ( ).
            turn - around ( )
        move ( )
        turn around ()
def turn-around ().
        for i in range (3)
                Left ()
",159,"def main :
    While front- is-clear():
        move ( )
    if front_is_blocked ().
        turn-around ()
    move ()
    turn_left ( )
    move ()
    pick-beeper ( )
    turn- left ()
    turn_left ()
    while front_is_ clear ()!
        move ()
    if front_ is_ blocked ( ).
        turn - around ( )
    move ( )
    turn around ()
def turn-around ().
    for i in range (3)
            Left ()
",84,"def main :
    While front- is-clear():
        move ( )
    if front_is_blocked ().
        turn-around ()
    move ()
    turn_left ( )
    move ()
    pick-beeper ( )
    turn- left ()
    turn_left ()
    while front_is_ clear ()!
        move ()
    if front_ is_ blocked ( ).
        turn - around ( )
    move ( )
    turn around ()
def turn-around ().
    for i in range (3)
            Left ()
",84,"def main :
    While front- is-clear():
        move ( )
    if front_is_blocked ().
        turn-around ()
    move ()
    turn_left ( )
    move ()
    pick-beeper ( )
    turn- left ()
    turn_left ()
    while front_is_ clear ()!
        move ()
    if front_ is_ blocked ( ).
        turn - around ( )
    move ( )
    turn around ()
def turn-around ().
    for i in range (3)
            Left ()
",84,"def main :
    While front- is-clear():
        move ( )
    if front_is_blocked ().
        turn-around ()
    move ()
    turn_left ( )
    move ()
    pick-beeper ( )
    turn- left ()
    turn_left ()
    while front_is_ clear ()!
        move ()
    if front_ is_ blocked ( ).
        turn - around ( )
    move ( )
    turn around ()
def turn-around ().
    for i in range (3)
            Left ()
",84,"def main :
    While front- is-clear():
        move ( )
    if front_is_blocked ().
        turn-around ()
    move ()
    turn_left ( )
    move ()
    pick-beeper ( )
    turn- left ()
    turn_left ()
    while front_is_ clear ()!
        move ()
    if front_ is_ blocked ( ).
        turn - around ( )
    move ( )
    turn around ()
def turn-around ().
    for i in range (3)
            Left ()
",84,"def main :
    While front- is-clear():
    move ( )
    if front_is_blocked ().
    turn-around ()
    move ()
    turn_left ( )
    move ()
    pick-beeper ( )
    turn- left ()
    turn_left ()
    while front_is_ clear ()!
    move ()
    if front_ is_ blocked ( ).
    turn - around ( )
    move ( )
    turn around ()
def turn-around ().
    for i in range (3)
        Left ()
",84
"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return False
    else:
        return False

def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)

if __name__ == ""__main__"":
    main()
","def is-leap year (year):
if years % 4 == 0'
if year % 100= = 0:
year % 400 = = 0:
return True
else:
return False
else:
return False
else:
return False
def main ().
year = int (input (""Enter a year: "")
is- leap= is-leap- year (years)
print (is-leap)
if
name_ = ""_main_"":
main()",152,"    def is-leap year (year):
            if year % 4 == 0'
                            if years % 100 = = 0:
                                            year % 400 = = 0:
                                                return True
                                    else:
                                                    return False
                    else:
                                        return False
        else:
                                return False
def main ().
                        years = int (input (""Enter a year: ""))
                    is_leap=is_leap-year (year)
                    print (is-leap)
            name_ = ""_main_"":
                main()
",321,"    def is-leap year (year):
        if year % 4 == 0'
        if years % 100 = = 0:
                    year % 400 = = 0:
                        return True
            else:
                            return False
        else:
                return False
    else:
            return False
def main ().
        years = int (input (""Enter a year: ""))
        is_leap=is_leap-year (year)
        print (is-leap)
        name_ = ""_main_"":
        main()
",89,"def is-leap year (year):
    if year % 4 == 0'
    if years % 100 = = 0:
        year % 400 = = 0:
            return True
        else:
            return False
    else:
        return False
else:
        return False
def main ().
    years = int (input (""Enter a year: ""))
    is_leap=is_leap-year (year)
    print (is-leap)
    name_ = ""_main_"":
    main()
",63,"def is-leap year (year):
if year % 4 == 0'
if years % 100 = = 0:
    year % 400 = = 0:
    return True
    else:
    return False
else:
    return False
else:
    return False
def main ().
years = int (input (""Enter a year: ""))
is_leap=is_leap-year (year)
print (is-leap)
name_ = ""_main_"":
main()
",124,"def is-leap year (year):
if year % 4 == 0'
if years % 100 = = 0:
    year % 400 = = 0:
    return True
    else:
    return False
else:
    return False
else:
    return False
def main ().
years = int (input (""Enter a year: ""))
is_leap=is_leap-year (year)
print (is-leap)
name_ = ""_main_"":
main()
",124,"def is-leap year (year):
if year % 4 == 0'
if years % 100 = = 0:
year % 400 = = 0:
return True
else:
return False
else:
return False
else:
return False
def main ().
years = int (input (""Enter a year: ""))
is_leap=is_leap-year (year)
print (is-leap)
name_ = ""_main_"":
main()
",148,"def is-leap year (year):
if year % 4 == 0'
if years % 100 = = 0:
year % 400 = = 0:
return True
else:
return False
else:
return False
else:
return False
def main ().
years = int (input (""Enter a year: ""))
is_leap=is_leap-year (year)
print (is-leap)
name_ = ""_main_"":
main()
",148,"def is-leap year (year):
if year % 4 == 0'
if years % 100 = = 0:
year % 400 = = 0:
return True
else:
return False
else:
return False
else:
return False
def main ().
years = int (input (""Enter a year: ""))
is_leap=is_leap-year (year)
print (is-leap)
name_ = ""_main_"":
main()
",148,"def is-leap year (year):
if year % 4 == 0'
if years % 100 = = 0:
year % 400 = = 0:
return True
else:
return False
else:
return False
else:
return False
def main ().
years = int (input (""Enter a year: ""))
is_leap=is_leap-year (year)
print (is-leap)
name_ = ""_main_"":
main()
",148,"def is-leap year (year):
if year % 4 == 0'
if years % 100 = = 0:
year % 400 = = 0:
return True
else:
return False
else:
return False
else:
return False
def main ().
years = int (input (""Enter a year: ""))
is_leap=is_leap-year (year)
print (is-leap)
name_ = ""_main_"":
main()
",148
"def main():
    print("" problem - 5 "")
    print(""-----------------"")
    numb = int(input(""write an  number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the number's digit: "", add_numb)

if __name__ == ""__main__"":
    main()
","def main () :
print (""problem - 5 "")
print (""-
rumb = int (input ('write an integer number:
mak_list = [int (x) for x in str (numb)]
add-numb = 0
for is in mak-list :
add-numb +=i
print (""Sum of the number's:
"", add_numb)
digit
if_ name __ = =
-- main __:
main()",108,"def main () :
            print (""problem - 5 "")
                        print ("") --
                rumb = int (input ('write an integer number:
                                                    "")
                    mak_list = [int (x) for x in str (numb)]
                            add-numb = 0
                                for is in mak-list :
                                        add-numb + =;
                                    print (""Sum of the number's: "", add-numb)
                                            digit
    If_ name __ = = ""
                                                -main __:
        main()
",377,"def main () :
        print (""problem - 5 "")
        print ("") --
        rumb = int (input ('write an integer number:
                                "")
        mak_list = [int (x) for x in str (numb)]
            add-numb = 0
            for is in mak-list :
                    add-numb + =;
                print (""Sum of the number's: "", add-numb)
                        digit
    If_ name __ = = ""
                            -main __:
        main()
",209,"def main () :
        print (""problem - 5 "")
        print ("") --
        rumb = int (input ('write an integer number:
                            "")
        mak_list = [int (x) for x in str (numb)]
        add-numb = 0
        for is in mak-list :
                add-numb + =;
            print (""Sum of the number's: "", add-numb)
                    digit
    If_ name __ = = ""
                        -main __:
        main()
",181,"def main () :
        print (""problem - 5 "")
        print ("") --
        rumb = int (input ('write an integer number:
                    "")
        mak_list = [int (x) for x in str (numb)]
        add-numb = 0
        for is in mak-list :
            add-numb + =;
        print (""Sum of the number's: "", add-numb)
            digit
    If_ name __ = = ""
                -main __:
        main()
",149,"def main () :
        print (""problem - 5 "")
        print ("") --
        rumb = int (input ('write an integer number:
                "")
        mak_list = [int (x) for x in str (numb)]
        add-numb = 0
        for is in mak-list :
            add-numb + =;
        print (""Sum of the number's: "", add-numb)
            digit
    If_ name __ = = ""
            -main __:
        main()
",141,"def main () :
        print (""problem - 5 "")
        print ("") --
        rumb = int (input ('write an integer number:
                "")
        mak_list = [int (x) for x in str (numb)]
        add-numb = 0
        for is in mak-list :
            add-numb + =;
        print (""Sum of the number's: "", add-numb)
            digit
    If_ name __ = = ""
            -main __:
        main()
",141,"def main () :
        print (""problem - 5 "")
        print ("") --
        rumb = int (input ('write an integer number:
                "")
        mak_list = [int (x) for x in str (numb)]
        add-numb = 0
        for is in mak-list :
            add-numb + =;
        print (""Sum of the number's: "", add-numb)
            digit
    If_ name __ = = ""
            -main __:
        main()
",141,"def main () :
    print (""problem - 5 "")
    print ("") --
    rumb = int (input ('write an integer number:
            "")
    mak_list = [int (x) for x in str (numb)]
    add-numb = 0
    for is in mak-list :
        add-numb + =;
    print (""Sum of the number's: "", add-numb)
        digit
If_ name __ = = ""
        -main __:
    main()
",94,"def main () :
    print (""problem - 5 "")
    print ("") --
    rumb = int (input ('write an integer number:
            "")
    mak_list = [int (x) for x in str (numb)]
    add-numb = 0
    for is in mak-list :
        add-numb + =;
    print (""Sum of the number's: "", add-numb)
        digit
If_ name __ = = ""
        -main __:
    main()
",94,"def main () :
    print (""problem - 5 "")
    print ("") --
    rumb = int (input ('write an integer number:
            "")
    mak_list = [int (x) for x in str (numb)]
    add-numb = 0
    for is in mak-list :
        add-numb + =;
    print (""Sum of the number's: "", add-numb)
        digit
If_ name __ = = ""
        -main __:
    main()
",94
"list = [6, 14, 5, 8, 9]
for elem in list:
    max = 0
    if elem > max:
        max = elem
return max
","list = [6, 11,5,8,9]
for elem in list:
max=0
if elem> max :
max = elem
return max",25,"        list = [6, 11,5,8,9]
    for elem in list :
                max=0
            if elem> max :
                    max = elem
return max
",52,"list = [6, 11,5,8,9]
for elem in list :
        max=0
    if elem> max :
            max = elem
return max
",17,"list = [6, 11,5,8,9]
for elem in list :
    max=0
    if elem> max :
        max = elem
return max
",9,"list = [6, 11,5,8,9]
for elem in list :
    max=0
    if elem> max :
        max = elem
return max
",9,"list = [6, 11,5,8,9]
for elem in list :
    max=0
    if elem> max :
        max = elem
return max
",9,"list = [6, 11,5,8,9]
for elem in list :
    max=0
    if elem> max :
        max = elem
return max
",9,"list = [6, 11,5,8,9]
for elem in list :
    max=0
    if elem> max :
    max = elem
return max
",13,"list = [6, 11,5,8,9]
for elem in list :
    max=0
    if elem> max :
    max = elem
return max
",13,"list = [6, 11,5,8,9]
for elem in list :
max=0
if elem> max :
max = elem
return max
",25,"list = [6, 11,5,8,9]
for elem in list :
max=0
if elem> max :
max = elem
return max
",25
"def palindromic(str):
    for i in range(int(len(str) / 2)):
        if str[i] != str[len(str) - i]:
            return False
    return True
","def palindromic (stro):
for i in range (int (len(str)/2)):
if stro [i] ! = str [len(stn) -i] :
return False
return True",42,"def palindroomic (stro):
    for i in range (int (len(str)/2)):
            if stro [i] ! = str [len (st) -i]:
                .
                    return False
        return True
",48,"def palindroomic (stro):
    for i in range (int (len(str)/2)):
        if stro [i] ! = str [len (st) -i]:
            .
                return False
    return True
",32,"def palindroomic (stro):
    for i in range (int (len(str)/2)):
        if stro [i] ! = str [len (st) -i]:
        .
            return False
    return True
",24,"def palindroomic (stro):
    for i in range (int (len(str)/2)):
        if stro [i] ! = str [len (st) -i]:
        .
        return False
    return True
",20,"def palindroomic (stro):
    for i in range (int (len(str)/2)):
        if stro [i] ! = str [len (st) -i]:
        .
        return False
    return True
",20,"def palindroomic (stro):
    for i in range (int (len(str)/2)):
        if stro [i] ! = str [len (st) -i]:
        .
        return False
    return True
",20,"def palindroomic (stro):
    for i in range (int (len(str)/2)):
    if stro [i] ! = str [len (st) -i]:
    .
    return False
    return True
",22,"def palindroomic (stro):
    for i in range (int (len(str)/2)):
    if stro [i] ! = str [len (st) -i]:
    .
    return False
    return True
",22,"def palindroomic (stro):
for i in range (int (len(str)/2)):
if stro [i] ! = str [len (st) -i]:
.
return False
return True
",42,"def palindroomic (stro):
for i in range (int (len(str)/2)):
if stro [i] ! = str [len (st) -i]:
.
return False
return True
",42
"def factorial(n):
    result = n * factorial(n - 1)
    return result
","def factorial (n):
result = n * factorial (n-1)
return result",13,"def factorial (n):
    result = n * factorial (n-1)
        return result
",8,"def factorial (n):
    result = n * factorial (n-1)
    return result
",4,"def factorial (n):
    result = n * factorial (n-1)
    return result
",4,"def factorial (n):
    result = n * factorial (n-1)
    return result
",4,"def factorial (n):
    result = n * factorial (n-1)
    return result
",4,"def factorial (n):
    result = n * factorial (n-1)
    return result
",4,"def factorial (n):
    result = n * factorial (n-1)
    return result
",4,"def factorial (n):
    result = n * factorial (n-1)
    return result
",4,"def factorial (n):
result = n * factorial (n-1)
return result
",12,"def factorial (n):
result = n * factorial (n-1)
return result
",12
"def fibonacci(n):
    sequence = [0, 1]
    i = 0
    while len(sequence) <= n:
        sequence.append(sequence[i + 1] + sequence[i + 2])
        i += 1
    return sequence
result = fibonacci(5)
print(result)
","def fibonacci (n):
sequence = [0,1]
1 = 0
while len (sequence> <= n:
sequence. append (sequence [+]+ sequence [i+2]
it = 1
return sequence
result = fibonacci (5)
print (result)",54,"def fibonacci (n):
                        sequence = [0,1]
                    1 = 0
                while len (sequence> <= n:
                                sequence. append (sequence [+]+ sequence [i+2]
                            it = 1
            return sequence
    result = fibonacci (5)
        print (result)
",132,"def fibonacci (n):
    sequence = [0,1]
    1 = 0
    while len (sequence> <= n:
        sequence. append (sequence [+]+ sequence [i+2]
        it = 1
    return sequence
result = fibonacci (5)
print (result)
",21,"def fibonacci (n):
    sequence = [0,1]
    1 = 0
    while len (sequence> <= n:
        sequence. append (sequence [+]+ sequence [i+2]
        it = 1
    return sequence
result = fibonacci (5)
print (result)
",21,"def fibonacci (n):
sequence = [0,1]
1 = 0
while len (sequence> <= n:
    sequence. append (sequence [+]+ sequence [i+2]
    it = 1
return sequence
result = fibonacci (5)
print (result)
",45,"def fibonacci (n):
sequence = [0,1]
1 = 0
while len (sequence> <= n:
    sequence. append (sequence [+]+ sequence [i+2]
    it = 1
return sequence
result = fibonacci (5)
print (result)
",45,"def fibonacci (n):
sequence = [0,1]
1 = 0
while len (sequence> <= n:
sequence. append (sequence [+]+ sequence [i+2]
it = 1
return sequence
result = fibonacci (5)
print (result)
",53,"def fibonacci (n):
sequence = [0,1]
1 = 0
while len (sequence> <= n:
sequence. append (sequence [+]+ sequence [i+2]
it = 1
return sequence
result = fibonacci (5)
print (result)
",53,"def fibonacci (n):
sequence = [0,1]
1 = 0
while len (sequence> <= n:
sequence. append (sequence [+]+ sequence [i+2]
it = 1
return sequence
result = fibonacci (5)
print (result)
",53,"def fibonacci (n):
sequence = [0,1]
1 = 0
while len (sequence> <= n:
sequence. append (sequence [+]+ sequence [i+2]
it = 1
return sequence
result = fibonacci (5)
print (result)
",53,"def fibonacci (n):
sequence = [0,1]
1 = 0
while len (sequence> <= n:
sequence. append (sequence [+]+ sequence [i+2]
it = 1
return sequence
result = fibonacci (5)
print (result)
",53
"def CountFrequency(my_list):
    freq = {}
    for item in my_list:
        freq[item] += 1
    return freq
","def CountFrequency (my-list):
freq = { }
for item in my-list:
freq [item]+=1
return freq",28,"def CountFrequency (my-list):
            freq = {}
    for item in my-list:
                freq [item]+=1
        return freq
",26,"def CountFrequency (my-list):
    freq = {}
    for item in my-list:
        freq [item]+=1
    return freq
",6,"def CountFrequency (my-list):
    freq = {}
    for item in my-list:
        freq [item]+=1
    return freq
",6,"def CountFrequency (my-list):
    freq = {}
    for item in my-list:
        freq [item]+=1
    return freq
",6,"def CountFrequency (my-list):
    freq = {}
    for item in my-list:
        freq [item]+=1
    return freq
",6,"def CountFrequency (my-list):
    freq = {}
    for item in my-list:
        freq [item]+=1
    return freq
",6,"def CountFrequency (my-list):
freq = {}
for item in my-list:
    freq [item]+=1
return freq
",22,"def CountFrequency (my-list):
freq = {}
for item in my-list:
    freq [item]+=1
return freq
",22,"def CountFrequency (my-list):
freq = {}
for item in my-list:
    freq [item]+=1
return freq
",22,"def CountFrequency (my-list):
freq = {}
for item in my-list:
    freq [item]+=1
return freq
",22
"def twoSum(nums, target):
    for i in range(len(nums)):
        for p in range(i, len(nums)):
            if nums[i] + nums[p] == target:
                return [i, p]
","def two Sam (nams, target):
for i in range (len (nams) :
for p in range (i) Lan (namp):
if (names [i] + numa[P] == fanget):
Detunn [i, P]",69,"def two Sam (nums, target):
    for i in range (len (namA) :
        for p in range (i) Lon (namp) :
            if (name [i] + numa [P] == fanget):
                netann [i, P]
",30,"def two Sam (nums, target):
    for i in range (len (namA) :
        for p in range (i) Lon (namp) :
            if (name [i] + numa [P] == fanget):
                netann [i, P]
",30,"def two Sam (nums, target):
    for i in range (len (namA) :
        for p in range (i) Lon (namp) :
            if (name [i] + numa [P] == fanget):
                netann [i, P]
",30,"def two Sam (nums, target):
    for i in range (len (namA) :
        for p in range (i) Lon (namp) :
            if (name [i] + numa [P] == fanget):
                netann [i, P]
",30,"def two Sam (nums, target):
    for i in range (len (namA) :
        for p in range (i) Lon (namp) :
            if (name [i] + numa [P] == fanget):
                netann [i, P]
",30,"def two Sam (nums, target):
    for i in range (len (namA) :
        for p in range (i) Lon (namp) :
        if (name [i] + numa [P] == fanget):
            netann [i, P]
",38,"def two Sam (nums, target):
    for i in range (len (namA) :
        for p in range (i) Lon (namp) :
        if (name [i] + numa [P] == fanget):
        netann [i, P]
",42,"def two Sam (nums, target):
for i in range (len (namA) :
    for p in range (i) Lon (namp) :
    if (name [i] + numa [P] == fanget):
    netann [i, P]
",58,"def two Sam (nums, target):
for i in range (len (namA) :
    for p in range (i) Lon (namp) :
    if (name [i] + numa [P] == fanget):
    netann [i, P]
",58,"def two Sam (nums, target):
for i in range (len (namA) :
    for p in range (i) Lon (namp) :
    if (name [i] + numa [P] == fanget):
    netann [i, P]
",58
"def Remove(duplicate):
	for num in duplicate:
	final_list = []
	if num not in final_list:
		final_list.append(num)
	return final_list
","des Remove (duplicate):
for wam in duplicate:
Sinal-Lint = []
if num not in final-list :
final-lint. append(num)
return final-lint",22,"def Remove (duplicate):
    for wam in duplicate:
        Sinal-Lint =[]
            if num not in final-list:
                    final-lint append (num)
                return final-lint
",75,"def Remove (duplicate):
    for wam in duplicate:
    Sinal-Lint =[]
    if num not in final-list:
            final-lint append (num)
        return final-lint
",47,"def Remove (duplicate):
    for wam in duplicate:
    Sinal-Lint =[]
    if num not in final-list:
            final-lint append (num)
        return final-lint
",47,"def Remove (duplicate):
    for wam in duplicate:
    Sinal-Lint =[]
    if num not in final-list:
        final-lint append (num)
    return final-lint
",39,"def Remove (duplicate):
    for wam in duplicate:
    Sinal-Lint =[]
    if num not in final-list:
        final-lint append (num)
    return final-lint
",39,"def Remove (duplicate):
    for wam in duplicate:
    Sinal-Lint =[]
    if num not in final-list:
        final-lint append (num)
    return final-lint
",39,"def Remove (duplicate):
    for wam in duplicate:
    Sinal-Lint =[]
    if num not in final-list:
    final-lint append (num)
    return final-lint
",35,"def Remove (duplicate):
    for wam in duplicate:
    Sinal-Lint =[]
    if num not in final-list:
    final-lint append (num)
    return final-lint
",35,"def Remove (duplicate):
for wam in duplicate:
Sinal-Lint =[]
if num not in final-list:
final-lint append (num)
return final-lint
",21,"def Remove (duplicate):
for wam in duplicate:
Sinal-Lint =[]
if num not in final-list:
final-lint append (num)
return final-lint
",21
"def even_or_odd(number):
    if number / 2 == 0:
        return ""Even""
    if number / 2 != 0:
        return ""Odd""
","det even-or-odd (number):
if number /2=0:
Detann ""Even""
if number 12 != 0:
retain ""Odd""",40,"det even-on-odd (number):
    if number /2=0:
            Detann ""Even""
        if number 12 != 0:
                return ""Odd""
",30,"det even-on-odd (number):
    if number /2=0:
        Detann ""Even""
    if number 12 != 0:
        return ""Odd""
",14,"det even-on-odd (number):
    if number /2=0:
        Detann ""Even""
    if number 12 != 0:
        return ""Odd""
",14,"det even-on-odd (number):
    if number /2=0:
        Detann ""Even""
    if number 12 != 0:
        return ""Odd""
",14,"det even-on-odd (number):
    if number /2=0:
        Detann ""Even""
    if number 12 != 0:
        return ""Odd""
",14,"det even-on-odd (number):
    if number /2=0:
        Detann ""Even""
    if number 12 != 0:
        return ""Odd""
",14,"det even-on-odd (number):
    if number /2=0:
    Detann ""Even""
    if number 12 != 0:
    return ""Odd""
",22,"det even-on-odd (number):
if number /2=0:
Detann ""Even""
if number 12 != 0:
return ""Odd""
",38,"det even-on-odd (number):
if number /2=0:
Detann ""Even""
if number 12 != 0:
return ""Odd""
",38,"det even-on-odd (number):
if number /2=0:
Detann ""Even""
if number 12 != 0:
return ""Odd""
",38
"def upper_lower_count(str):
    upper_case = 0
    lower_case = 0
    for char in str:
        if char.isupper():
            upper_case += 1
        else:
            lower_case += 1
    return upper_case, lower_case
","daf
upper-lower-count (sto):
Upper-case = 0
lower-case = 0
for char in str.
if chan, inupper():
upper-case +=1
elpe:
lower-case += 1
return upper-care, lowercase",78,"upper-lower-count (sto):
    Upper-case = 0
    lower-case = 0
    for char in str.
            if chan, inupper():
                        upper-cane +=1
                elpe:
                    lower-case += 1
        return upper-care, lowercase
",60,"upper-lower-count (sto):
Upper-case = 0
lower-case = 0
for char in str.
        if chan, inupper():
                upper-cane +=1
        elpe:
            lower-case += 1
    return upper-care, lowercase
",40,"upper-lower-count (sto):
Upper-case = 0
lower-case = 0
for char in str.
    if chan, inupper():
            upper-cane +=1
    elpe:
        lower-case += 1
return upper-care, lowercase
",52,"upper-lower-count (sto):
Upper-case = 0
lower-case = 0
for char in str.
    if chan, inupper():
        upper-cane +=1
    elpe:
        lower-case += 1
return upper-care, lowercase
",56,"upper-lower-count (sto):
Upper-case = 0
lower-case = 0
for char in str.
    if chan, inupper():
        upper-cane +=1
    elpe:
        lower-case += 1
return upper-care, lowercase
",56,"upper-lower-count (sto):
Upper-case = 0
lower-case = 0
for char in str.
    if chan, inupper():
    upper-cane +=1
    elpe:
    lower-case += 1
return upper-care, lowercase
",64,"upper-lower-count (sto):
Upper-case = 0
lower-case = 0
for char in str.
    if chan, inupper():
    upper-cane +=1
    elpe:
    lower-case += 1
return upper-care, lowercase
",64,"upper-lower-count (sto):
Upper-case = 0
lower-case = 0
for char in str.
    if chan, inupper():
    upper-cane +=1
    elpe:
    lower-case += 1
return upper-care, lowercase
",64,"upper-lower-count (sto):
Upper-case = 0
lower-case = 0
for char in str.
    if chan, inupper():
    upper-cane +=1
    elpe:
    lower-case += 1
return upper-care, lowercase
",64,"upper-lower-count (sto):
Upper-case = 0
lower-case = 0
for char in str.
if chan, inupper():
upper-cane +=1
elpe:
lower-case += 1
return upper-care, lowercase
",80
"def multiply(numbers):
    total = 0
    for x in numbers:
        total *= x
    return total
","det multiply (numbers);
total= 0
for se in numbers:
total * = Je
return total
Tony Upper case. la",47,"det multiply (numbon);
    total = 0
        for se in numbers;
                total* * = Je
            return total
                        moppepo
                    ppor care.
",96,"det multiply (numbon);
    total = 0
    for se in numbers;
            total* * = Je
        return total
                    moppepo
                ppor care.
",76,"det multiply (numbon);
    total = 0
    for se in numbers;
        total* * = Je
    return total
                moppepo
            ppor care.
",60,"det multiply (numbon);
    total = 0
    for se in numbers;
        total* * = Je
    return total
                moppepo
            ppor care.
",60,"det multiply (numbon);
    total = 0
    for se in numbers;
        total* * = Je
    return total
                moppepo
            ppor care.
",60,"det multiply (numbon);
    total = 0
    for se in numbers;
        total* * = Je
    return total
                moppepo
            ppor care.
",60,"det multiply (numbon);
    total = 0
    for se in numbers;
        total* * = Je
    return total
                moppepo
            ppor care.
",60,"det multiply (numbon);
    total = 0
    for se in numbers;
    total* * = Je
    return total
            moppepo
        ppor care.
",56,"det multiply (numbon);
    total = 0
    for se in numbers;
    total* * = Je
    return total
        moppepo
        ppor care.
",52,"det multiply (numbon);
total = 0
for se in numbers;
total* * = Je
return total
    moppepo
    ppor care.
",54
