Ground Truth,Azure,Azure ED,1,1 ED,1 LM,1 LM ED,2,2 ED,2 LM,2 LM ED,3,3 ED,3 LM,3 LM ED,4,4 ED,4 LM,4 LM ED,5,5 ED,5 LM,5 LM ED,6,6 ED,6 LM,6 LM ED,7,7 ED,7 LM,7 LM ED,8,8 ED,8 LM,8 LM ED,9,9 ED,9 LM,9 LM ED,10,10 ED,10 LM,10 LM ED,11,11 ED,11 LM,11 LM ED,12,12 ED,12 LM,12 LM ED,13,13 ED,13 LM,13 LM ED,14,14 ED,14 LM,14 LM ED,15,15 ED,15 LM,15 LM ED,16,16 ED,16 LM,16 LM ED,17,17 ED,17 LM,17 LM ED,18,18 ED,18 LM,18 LM ED,19,19 ED,19 LM,19 LM ED,20,20 ED,20 LM,20 LM ED,21,21 ED,21 LM,21 LM ED,22,22 ED,22 LM,22 LM ED,23,23 ED,23 LM,23 LM ED,24,24 ED,24 LM,24 LM ED,25,25 ED,25 LM,25 LM ED,26,26 ED,26 LM,26 LM ED,27,27 ED,27 LM,27 LM ED,28,28 ED,28 LM,28 LM ED,29,29 ED,29 LM,29 LM ED,30,30 ED,30 LM,30 LM ED,31,31 ED,31 LM,31 LM ED,32,32 ED,32 LM,32 LM ED,33,33 ED,33 LM,33 LM ED,34,34 ED,34 LM,34 LM ED,35,35 ED,35 LM,35 LM ED,36,36 ED,36 LM,36 LM ED,37,37 ED,37 LM,37 LM ED,38,38 ED,38 LM,38 LM ED,39,39 ED,39 LM,39 LM ED,40,40 ED,40 LM,40 LM ED,41,41 ED,41 LM,41 LM ED,42,42 ED,42 LM,42 LM ED,43,43 ED,43 LM,43 LM ED,44,44 ED,44 LM,44 LM ED,45,45 ED,45 LM,45 LM ED,46,46 ED,46 LM,46 LM ED,47,47 ED,47 LM,47 LM ED,48,48 ED,48 LM,48 LM ED,49,49 ED,49 LM,49 LM ED,50,50 ED,50 LM,50 LM ED,51,51 ED,51 LM,51 LM ED,52,52 ED,52 LM,52 LM ED,53,53 ED,53 LM,53 LM ED,54,54 ED,54 LM,54 LM ED,55,55 ED,55 LM,55 LM ED,56,56 ED,56 LM,56 LM ED,57,57 ED,57 LM,57 LM ED,58,58 ED,58 LM,58 LM ED,59,59 ED,59 LM,59 LM ED,60,60 ED,60 LM,60 LM ED,61,61 ED,61 LM,61 LM ED,62,62 ED,62 LM,62 LM ED,63,63 ED,63 LM,63 LM ED,64,64 ED,64 LM,64 LM ED,65,65 ED,65 LM,65 LM ED,66,66 ED,66 LM,66 LM ED,67,67 ED,67 LM,67 LM ED,68,68 ED,68 LM,68 LM ED,69,69 ED,69 LM,69 LM ED,70,70 ED,70 LM,70 LM ED,71,71 ED,71 LM,71 LM ED,72,72 ED,72 LM,72 LM ED,73,73 ED,73 LM,73 LM ED,74,74 ED,74 LM,74 LM ED,75,75 ED,75 LM,75 LM ED,76,76 ED,76 LM,76 LM ED,77,77 ED,77 LM,77 LM ED,78,78 ED,78 LM,78 LM ED,79,79 ED,79 LM,79 LM ED,80,80 ED,80 LM,80 LM ED,81,81 ED,81 LM,81 LM ED,82,82 ED,82 LM,82 LM ED,83,83 ED,83 LM,83 LM ED,84,84 ED,84 LM,84 LM ED,85,85 ED,85 LM,85 LM ED,86,86 ED,86 LM,86 LM ED,87,87 ED,87 LM,87 LM ED,88,88 ED,88 LM,88 LM ED,89,89 ED,89 LM,89 LM ED,90,90 ED,90 LM,90 LM ED,91,91 ED,91 LM,91 LM ED,92,92 ED,92 LM,92 LM ED,93,93 ED,93 LM,93 LM ED,94,94 ED,94 LM,94 LM ED,95,95 ED,95 LM,95 LM ED,96,96 ED,96 LM,96 LM ED,97,97 ED,97 LM,97 LM ED,98,98 ED,98 LM,98 LM ED,99,99 ED,99 LM,99 LM ED,100,100 ED,100 LM,100 LM ED
"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
","num = int (input (""Enter a number: ""
Ans =1
while num > 1 :
Ans * = num
num -= 1
return Ans",16,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1 :
        Ans *= num
    num -= 1
return Ans
",53,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,,99,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,,99,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52,"                    num = int (input (""Enter a number: "")
                Ans =1
            while num > 1 :
        Ans * = num
    num -= 1
return Ans
",58,"                    num = int(input(""Enter a number: ""))
                Ans = 1
            while num > 1:
        Ans *= num
    num -= 1
return Ans
",52
"from karel.stanfordkarel import *
# This program makes Karel pick up a beeper and go back into her house.

def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()
# This function moves Karel to the beeper.

def move_beeper():
    for i in range(2):
        move()
    turn_right()
    move()
    turn_left()
    move()
# This function return to Karel's starting point.

def go_back():
    for i in range(2):
        turn_left()
    for i in range(3):
        move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left

if __name__ == ""__main__"":
    main()
","from Karel. stanfordkarel import *
# This program makes Kavel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick- beeper ()
# Return to Karel's starting point.
go - back ()
# This function moves karel to the beeper.
def move-beeper ():
for i in range (2):
move ()
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back ();
For ?. in range (2):
turn-left ()
for i in range (3):
move()
turn right ()
move (),
turn-right ()
def turn-right () ?
for i in range (3):
turn-left
if -- name == ' -- main_';
main ()",173,"                        from Karel. stanfordkarel import *
                    # This program makes Karel pick up
                            a beeper and go back into her house.
                        def main ():
                                                # Move to the beeper.
                                                                move_ beeper ()
                                                # Pick the beeper up.
                                                        pick-beeper ()
                                            # Return to Karel's starting point.
                                                            go- back ()
            # This function moves Karel to the beeper.
            def move_beeper ():
                                                for i in range (2):
                                                                                            move ( )
                                                        turn right ()
                                                                    move ()
                                                                        turn left ()
                                                                            move()
        # this function return to Karel's starting poin
                def 90-back () ;
                                        for i in range (2):
                                                                                    turn-left ()
                                            for i in range (3).
                                                                                        move()
                                                    turn_right ()
                                                                move ()
                                                    turn - right ( )
    def turn-right ( )?
                                    for i in range (3):
                                                                                turn-left
if -- name= = ' __ main __
                                main ()
",1406,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
    # Move to the beeper.
        move_beeper()
    # Pick the beeper up.
        pick_beeper()
    # Return to Karel's starting point.
        go_back()
# This function moves Karel to the beeper.

def move_beeper():
    for i in range(2):
        move()
    turn_right()
    move()
    turn_left()
    move()
# this function return to Karel's starting point

def go_back():
    for i in range(2):
        turn_left()
    for i in range(3):
        move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()
if __name__ == '__main__':
    main()
",24,"                from Karel. stanfordkarel import *
            # This program makes Karel pick up
                    a beeper and go back into her house.
                def main ():
                                        # Move to the beeper.
                                                move_ beeper ()
                                        # Pick the beeper up.
                                            pick-beeper ()
                                    # Return to Karel's starting point.
                                                go- back ()
        # This function moves Karel to the beeper.
        def move_beeper ():
                                        for i in range (2):
                                                                            move ( )
                                            turn right ()
                                                    move ()
                                                        turn left ()
                                                            move()
        # this function return to Karel's starting poin
        def 90-back () ;
                                for i in range (2):
                                                                    turn-left ()
                                    for i in range (3).
                                                                        move()
                                            turn_right ()
                                                move ()
                                            turn - right ( )
    def turn-right ( )?
                            for i in range (3):
                                                                turn-left
if -- name= = ' __ main __
                        main ()
",1098,"from karel.stanfordkarel import *
            # This program makes Karel pick up
                    # a beeper and go back into her house.

                def main():
                                        # Move to the beeper.
                                                move_beeper()
                                        # Pick the beeper up.
                                            pick_beeper()
                                    # Return to Karel's starting point.
                                                go_back()
        # This function moves Karel to the beeper.

        def move_beeper():
                                        for i in range(2):
                                                                            move()
                                            turn_right()
                                                    move()
                                                        turn_left()
                                                            move()
        # this function return to Karel's starting point

        def go_back():
                                for i in range(2):
                                                                    turn_left()
                                    for i in range(3):
                                                                        move()
                                            turn_right()
                                                move()
                                            turn_right()

    def turn_right():
                            for i in range(3):
                                                                turn_left()
if __name__ == '__main__':
                        main()
",1032,"                from Karel. stanfordkarel import *
            # This program makes Karel pick up
                    a beeper and go back into her house.
                def main ():
                                # Move to the beeper.
                                            move_ beeper ()
                                # Pick the beeper up.
                                    pick-beeper ()
                                # Return to Karel's starting point.
                                        go- back ()
        # This function moves Karel to the beeper.
        def move_beeper ():
                                for i in range (2):
                                                                    move ( )
                                    turn right ()
                                            move ()
                                                turn left ()
                                                    move()
    # this function return to Karel's starting poin
            def 90-back () ;
                            for i in range (2):
                                                            turn-left ()
                                for i in range (3).
                                                                move()
                                    turn_right ()
                                            move ()
                                    turn - right ( )
    def turn-right ( )?
                            for i in range (3):
                                                        turn-left
if -- name= = ' __ main __
                        main ()
",958,"from karel.stanfordkarel import *
            # This program makes Karel pick up
                    # a beeper and go back into her house.

                def main():
                                # Move to the beeper.
                                            move_beeper()
                                # Pick the beeper up.
                                    pick_beeper()
                                # Return to Karel's starting point.
                                        go_back()
        # This function moves Karel to the beeper.

        def move_beeper():
                                for i in range(2):
                                                                    move()
                                    turn_right()
                                            move()
                                                turn_left()
                                                    move()
    # this function return to Karel's starting point

            def go_back():
                            for i in range(2):
                                                            turn_left()
                                for i in range(3):
                                                                move()
                                    turn_right()
                                            move()
                                    turn_right()

    def turn_right():
                            for i in range(3):
                                                        turn_left()
if __name__ == '__main__':
                        main()
",892,"        from Karel. stanfordkarel import *
    # This program makes Karel pick up
            a beeper and go back into her house.
        def main ():
                        # Move to the beeper.
                                move_ beeper ()
                        # Pick the beeper up.
                            pick-beeper ()
                        # Return to Karel's starting point.
                            go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
                        for i in range (2):
                                                        move ( )
                            turn right ()
                                move ()
                                    turn left ()
                                        move()
    # this function return to Karel's starting poin
    def 90-back () ;
                    for i in range (2):
                                                turn-left ()
                        for i in range (3).
                                                    move()
                            turn_right ()
                                move ()
                            turn - right ( )
    def turn-right ( )?
                    for i in range (3):
                                            turn-left
if -- name= = ' __ main __
                main ()
",694,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
            # Move to the beeper.
    move_beeper()
            # Pick the beeper up.
    pick_beeper()
            # Return to Karel's starting point.
    go_back()
# This function moves Karel to the beeper.

def move_beeper():
            for i in range(2):
                move()
                turn_right()
                move()
                turn_left()
                move()
# This function returns to Karel's starting point.

def go_back():
            for i in range(2):
                turn_left()
            for i in range(3):
                move()
                turn_right()
                move()
                turn_right()

def turn_right():
            for i in range(3):
                turn_left()
if __name__ == '__main__':
    main()
",183,"        from Karel. stanfordkarel import *
    # This program makes Karel pick up
            a beeper and go back into her house.
        def main ():
                        # Move to the beeper.
                            move_ beeper ()
                        # Pick the beeper up.
                            pick-beeper ()
                        # Return to Karel's starting point.
                            go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
                        for i in range (2):
                                                    move ( )
                            turn right ()
                                move ()
                                turn left ()
                                    move()
    # this function return to Karel's starting poin
    def 90-back () ;
                    for i in range (2):
                                            turn-left ()
                        for i in range (3).
                                                move()
                            turn_right ()
                            move ()
                            turn - right ( )
    def turn-right ( )?
                    for i in range (3):
                                        turn-left
if -- name= = ' __ main __
                main ()
",662,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
                        # Move to the beeper.
    move_beeper()
                        # Pick the beeper up.
    pick_beeper()
                        # Return to Karel's starting point.
    go_back()
# This function moves Karel to the beeper.

def move_beeper():
                        for i in range(2):
                                                    move()
                            turn_right()
                                move()
                                turn_left()
                                    move()
# this function return to Karel's starting point

def go_back():
                    for i in range(2):
                                            turn_left()
                        for i in range(3):
                                                move()
                            turn_right()
                            move()
                            turn_right()

def turn_right():
                    for i in range(3):
                                        turn_left()
if __name__ == '__main__':
                main()
",492,"        from Karel. stanfordkarel import *
        # This program makes Karel pick up
            a beeper and go back into her house.
        def main ():
                        # Move to the beeper.
                            move_ beeper ()
                        # Pick the beeper up.
                            pick-beeper ()
                        # Return to Karel's starting point.
                            go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
                        for i in range (2):
                                                move ( )
                            turn right ()
                            move ()
                                turn left ()
                                move()
    # this function return to Karel's starting poin
    def 90-back () ;
                    for i in range (2):
                                        turn-left ()
                        for i in range (3).
                                            move()
                            turn_right ()
                            move ()
                            turn - right ( )
    def turn-right ( )?
                    for i in range (3):
                                    turn-left
if -- name= = ' __ main __
                main ()
",642,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
                        # Move to the beeper.
    move_beeper()
                        # Pick the beeper up.
    pick_beeper()
                        # Return to Karel's starting point.
    go_back()
# This function moves Karel to the beeper.

def move_beeper():
                        for i in range(2):
                                                move()
                            turn_right()
                            move()
                                turn_left()
                                move()
# This function returns to Karel's starting point.

def go_back():
                    for i in range(2):
                                        turn_left()
                        for i in range(3):
                                            move()
                            turn_right()
                            move()
                            turn_right()

def turn_right():
                    for i in range(3):
                                    turn_left()
if __name__ == '__main__':
                main()
",467,"        from Karel. stanfordkarel import *
        # This program makes Karel pick up
            a beeper and go back into her house.
        def main ():
                        # Move to the beeper.
                            move_ beeper ()
                        # Pick the beeper up.
                            pick-beeper ()
                        # Return to Karel's starting point.
                            go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
                        for i in range (2):
                                                move ( )
                            turn right ()
                            move ()
                                turn left ()
                                move()
    # this function return to Karel's starting poin
    def 90-back () ;
                    for i in range (2):
                                        turn-left ()
                        for i in range (3).
                                            move()
                            turn_right ()
                            move ()
                            turn - right ( )
    def turn-right ( )?
                    for i in range (3):
                                    turn-left
if -- name= = ' __ main __
                main ()
",642,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
                        # Move to the beeper.
                            move_beeper()
                        # Pick the beeper up.
                            pick_beeper()
                        # Return to Karel's starting point.
                            go_back()
# This function moves Karel to the beeper.

def move_beeper():
                        for i in range(2):
                                                move()
                            turn_right()
                            move()
                                turn_left()
                                move()
# This function returns to Karel's starting point.

def go_back():
                    for i in range(2):
                                        turn_left()
                        for i in range(3):
                                            move()
                            turn_right()
                            move()
                            turn_right()

def turn_right():
                    for i in range(3):
                                    turn_left()
if __name__ == '__main__':
                main()
",539,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
                    # Move to the beeper.
                        move_ beeper ()
                    # Pick the beeper up.
                        pick-beeper ()
                    # Return to Karel's starting point.
                        go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
                    for i in range (2):
                                            move ( )
                        turn right ()
                            move ()
                            turn left ()
                            move()
    # this function return to Karel's starting poin
    def 90-back () ;
                for i in range (2):
                                    turn-left ()
                    for i in range (3).
                                        move()
                        turn_right ()
                        move ()
                        turn - right ( )
    def turn-right ( )?
                for i in range (3):
                                turn-left
if -- name= = ' __ main __
            main ()
",542,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
                    # Move to the beeper.
                        move_beeper()
                    # Pick the beeper up.
                        pick_beeper()
                    # Return to Karel's starting point.
                        go_back()
# This function moves Karel to the beeper.

def move_beeper():
                    for i in range(2):
                                            move()
                        turn_right()
                            move()
                            turn_left()
                            move()
# This function returns to Karel's starting point.

def go_back():
                for i in range(2):
                                    turn_left()
                    for i in range(3):
                                        move()
                        turn_right()
                        move()
                        turn_right()

def turn_right():
                for i in range(3):
                                turn_left()
if __name__ == '__main__':
            main()
",455,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
                # Move to the beeper.
                    move_ beeper ()
                # Pick the beeper up.
                    pick-beeper ()
                # Return to Karel's starting point.
                    go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
                for i in range (2):
                                        move ( )
                    turn right ()
                    move ()
                        turn left ()
                        move()
    # this function return to Karel's starting poin
    def 90-back () ;
                for i in range (2):
                                turn-left ()
                for i in range (3).
                                    move()
                    turn_right ()
                    move ()
                    turn - right ( )
    def turn-right ( )?
            for i in range (3):
                            turn-left
if -- name= = ' __ main __
            main ()
",458,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
                # Move to the beeper.
                    move_beeper()
                # Pick the beeper up.
                    pick_beeper()
                # Return to Karel's starting point.
                    go_back()
# This function moves Karel to the beeper.

def move_beeper():
                for i in range(2):
                                        move()
                    turn_right()
                    move()
                        turn_left()
                        move()
# This function returns to Karel's starting point.

def go_back():
                for i in range(2):
                                turn_left()
                for i in range(3):
                                    move()
                    turn_right()
                    move()
                    turn_right()

def turn_right():
            for i in range(3):
                            turn_left()
if __name__ == '__main__':
            main()
",371,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
                # Move to the beeper.
                move_ beeper ()
                # Pick the beeper up.
                pick-beeper ()
                # Return to Karel's starting point.
                go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
                for i in range (2):
                            move ( )
                turn right ()
                move ()
                turn left ()
                    move()
    # this function return to Karel's starting poin
    def 90-back () ;
            for i in range (2):
                        turn-left ()
                for i in range (3).
                            move()
                turn_right ()
                move ()
                turn - right ( )
    def turn-right ( )?
            for i in range (3):
                    turn-left
if -- name= = ' __ main __
            main ()
",374,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
                # Move to the beeper.
                move_beeper()
                # Pick the beeper up.
                pick_beeper()
                # Return to Karel's starting point.
                go_back()
# This function moves Karel to the beeper.

def move_beeper():
                for i in range(2):
                            move()
                turn_right()
                move()
                turn_left()
                move()
# this function return to Karel's starting point

def go_back():
            for i in range(2):
                        turn_left()
                for i in range(3):
                            move()
                turn_right()
                move()
                turn_right()

def turn_right():
            for i in range(3):
                    turn_left()
if __name__ == '__main__':
            main()
",284,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
                # Move to the beeper.
                move_ beeper ()
                # Pick the beeper up.
                pick-beeper ()
                # Return to Karel's starting point.
                go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
                for i in range (2):
                            move ( )
                turn right ()
                move ()
                turn left ()
                    move()
    # this function return to Karel's starting poin
    def 90-back () ;
            for i in range (2):
                        turn-left ()
                for i in range (3).
                            move()
                turn_right ()
                move ()
                turn - right ( )
    def turn-right ( )?
            for i in range (3):
                    turn-left
if -- name= = ' __ main __
            main ()
",374,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
                # Move to the beeper.
                move_beeper()
                # Pick the beeper up.
                pick_beeper()
                # Return to Karel's starting point.
                go_back()
# This function moves Karel to the beeper.

def move_beeper():
                for i in range(2):
                            move()
                turn_right()
                move()
                turn_left()
                move()
# This function returns to Karel's starting point.

def go_back():
            for i in range(2):
                        turn_left()
            for i in range(3):
                        move()
            turn_right()
            move()
            turn_right()

def turn_right():
            for i in range(3):
                    turn_left()
if __name__ == '__main__':
            main()
",263,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
                # Move to the beeper.
                move_ beeper ()
                # Pick the beeper up.
                pick-beeper ()
                # Return to Karel's starting point.
                go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
                for i in range (2):
                            move ( )
                turn right ()
                move ()
                turn left ()
                    move()
    # this function return to Karel's starting poin
    def 90-back () ;
            for i in range (2):
                        turn-left ()
                for i in range (3).
                            move()
                turn_right ()
                move ()
                turn - right ( )
    def turn-right ( )?
            for i in range (3):
                    turn-left
if -- name= = ' __ main __
            main ()
",374,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
                # Move to the beeper.
                move_beeper()
                # Pick the beeper up.
                pick_beeper()
                # Return to Karel's starting point.
                go_back()
# This function moves Karel to the beeper.

def move_beeper():
                for i in range(2):
                            move()
                turn_right()
                move()
                turn_left()
                move()
# this function return to Karel's starting point

def go_back():
            for i in range(2):
                        turn_left()
                for i in range(3):
                            move()
                turn_right()
                move()
                turn_right()

def turn_right():
            for i in range(3):
                    turn_left()
if __name__ == '__main__':
            main()
",284,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
            # Move to the beeper.
            move_ beeper ()
            # Pick the beeper up.
            pick-beeper ()
            # Return to Karel's starting point.
            go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
            for i in range (2):
                    move ( )
            turn right ()
            move ()
            turn left ()
                move()
    # this function return to Karel's starting poin
    def 90-back () ;
            for i in range (2):
                    turn-left ()
            for i in range (3).
                    move()
            turn_right ()
            move ()
            turn - right ( )
    def turn-right ( )?
            for i in range (3):
                turn-left
if -- name= = ' __ main __
        main ()
",286,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
        # Move to the beeper.
        move_beeper()
        # Pick the beeper up.
        pick_beeper()
        # Return to Karel's starting point.
        go_back()
# This function moves Karel to the beeper.

def move_beeper():
        for i in range(2):
                move()
        turn_right()
        move()
        turn_left()
        move()
# this function return to Karel's starting point

def go_back():
        for i in range(2):
                turn_left()
        for i in range(3):
                move()
        turn_right()
        move()
        turn_right()

def turn_right():
        for i in range(3):
            turn_left()
if __name__ == '__main__':
        main()
",112,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
            # Move to the beeper.
            move_ beeper ()
            # Pick the beeper up.
            pick-beeper ()
            # Return to Karel's starting point.
            go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
            for i in range (2):
                    move ( )
            turn right ()
            move ()
            turn left ()
                move()
    # this function return to Karel's starting poin
    def 90-back () ;
            for i in range (2):
                    turn-left ()
            for i in range (3).
                    move()
            turn_right ()
            move ()
            turn - right ( )
    def turn-right ( )?
            for i in range (3):
                turn-left
if -- name= = ' __ main __
        main ()
",286,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
        # Move to the beeper.
        move_beeper()
        # Pick the beeper up.
        pick_beeper()
        # Return to Karel's starting point.
        go_back()
# This function moves Karel to the beeper.

def move_beeper():
        for i in range(2):
                move()
        turn_right()
        move()
        turn_left()
        move()
# this function return to Karel's starting point

def go_back():
        for i in range(2):
                turn_left()
        for i in range(3):
                move()
        turn_right()
        move()
        turn_right()

def turn_right():
        for i in range(3):
                turn_left()
if __name__ == '__main__':
        main()
",116,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
            # Move to the beeper.
            move_ beeper ()
            # Pick the beeper up.
            pick-beeper ()
            # Return to Karel's starting point.
            go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
            for i in range (2):
                    move ( )
            turn right ()
            move ()
            turn left ()
                move()
    # this function return to Karel's starting poin
    def 90-back () ;
            for i in range (2):
                    turn-left ()
            for i in range (3).
                    move()
            turn_right ()
            move ()
            turn - right ( )
    def turn-right ( )?
            for i in range (3):
                turn-left
if -- name= = ' __ main __
        main ()
",286,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
        # Move to the beeper.
        move_beeper()
        # Pick the beeper up.
        pick_beeper()
        # Return to Karel's starting point.
        go_back()
# This function moves Karel to the beeper.

def move_beeper():
        for i in range(2):
                move()
        turn_right()
        move()
        turn_left()
        move()
# this function return to Karel's starting point

def go_back():
        for i in range(2):
                turn_left()
        for i in range(3):
                move()
        turn_right()
        move()
        turn_right()

def turn_right():
        for i in range(3):
            turn_left()
if __name__ == '__main__':
        main()
",112,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
            # Move to the beeper.
            move_ beeper ()
            # Pick the beeper up.
            pick-beeper ()
            # Return to Karel's starting point.
            go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
            for i in range (2):
                    move ( )
            turn right ()
            move ()
            turn left ()
                move()
    # this function return to Karel's starting poin
    def 90-back () ;
            for i in range (2):
                    turn-left ()
            for i in range (3).
                    move()
            turn_right ()
            move ()
            turn - right ( )
    def turn-right ( )?
            for i in range (3):
                turn-left
if -- name= = ' __ main __
        main ()
",286,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
        # Move to the beeper.
        move_beeper()
        # Pick the beeper up.
        pick_beeper()
        # Return to Karel's starting point.
        go_back()
# This function moves Karel to the beeper.

def move_beeper():
        for i in range(2):
                move()
        turn_right()
        move()
        turn_left()
        move()
# this function return to Karel's starting point

def go_back():
        for i in range(2):
                turn_left()
        for i in range(3):
                move()
        turn_right()
        move()
        turn_right()

def turn_right():
        for i in range(3):
            turn_left()
if __name__ == '__main__':
        main()
",112,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
            # Move to the beeper.
            move_ beeper ()
            # Pick the beeper up.
            pick-beeper ()
            # Return to Karel's starting point.
            go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
            for i in range (2):
                move ( )
            turn right ()
            move ()
            turn left ()
            move()
    # this function return to Karel's starting poin
    def 90-back () ;
            for i in range (2):
                turn-left ()
            for i in range (3).
                move()
            turn_right ()
            move ()
            turn - right ( )
    def turn-right ( )?
        for i in range (3):
                turn-left
if -- name= = ' __ main __
        main ()
",266,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
        # Move to the beeper.
        move_beeper()
        # Pick the beeper up.
        pick_beeper()
        # Return to Karel's starting point.
        go_back()
# This function moves Karel to the beeper.

def move_beeper():
        for i in range(2):
            move()
        turn_right()
        move()
        turn_left()
        move()
# this function return to Karel's starting point

def go_back():
        for i in range(2):
            turn_left()
        for i in range(3):
            move()
        turn_right()
        move()
        turn_right()

def turn_right():
    for i in range(3):
            turn_left()
if __name__ == '__main__':
    main()
",92,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
            # Move to the beeper.
            move_ beeper ()
            # Pick the beeper up.
            pick-beeper ()
            # Return to Karel's starting point.
            go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
            for i in range (2):
                move ( )
            turn right ()
            move ()
            turn left ()
            move()
    # this function return to Karel's starting poin
    def 90-back () ;
            for i in range (2):
                turn-left ()
            for i in range (3).
                move()
            turn_right ()
            move ()
            turn - right ( )
    def turn-right ( )?
        for i in range (3):
                turn-left
if -- name= = ' __ main __
        main ()
",266,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
        # Move to the beeper.
        move_beeper()
        # Pick the beeper up.
        pick_beeper()
        # Return to Karel's starting point.
        go_back()
# This function moves Karel to the beeper.

def move_beeper():
        for i in range(2):
            move()
        turn_right()
        move()
        turn_left()
        move()
# this function return to Karel's starting point

def go_back():
        for i in range(2):
            turn_left()
        for i in range(3):
            move()
        turn_right()
        move()
        turn_right()

def turn_right():
    for i in range(3):
            turn_left()
if __name__ == '__main__':
        main()
",96,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
        # Move to the beeper.
        move_ beeper ()
        # Pick the beeper up.
        pick-beeper ()
        # Return to Karel's starting point.
        go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
        for i in range (2):
            move ( )
        turn right ()
        move ()
        turn left ()
        move()
    # this function return to Karel's starting poin
    def 90-back () ;
        for i in range (2):
            turn-left ()
        for i in range (3).
            move()
        turn_right ()
        move ()
        turn - right ( )
    def turn-right ( )?
        for i in range (3):
            turn-left
if -- name= = ' __ main __
        main ()
",186,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
        # Move to the beeper.
        move_beeper()
        # Pick the beeper up.
        pick_beeper()
        # Return to Karel's starting point.
        go_back()
    # This function moves Karel to the beeper.

def move_beeper():
        for i in range(2):
            move()
        turn_right()
        move()
        turn_left()
        move()
    # this function return to Karel's starting point

def go_back():
        for i in range(2):
            turn_left()
        for i in range(3):
            move()
        turn_right()
        move()
        turn_right()

def turn_right():
        for i in range(3):
            turn_left()
if __name__ == '__main__':
        main()
",108,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
        # Move to the beeper.
        move_ beeper ()
        # Pick the beeper up.
        pick-beeper ()
        # Return to Karel's starting point.
        go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
        for i in range (2):
                move ( )
        turn right ()
        move ()
        turn left ()
            move()
    # this function return to Karel's starting poin
    def 90-back () ;
        for i in range (2):
                turn-left ()
        for i in range (3).
                move()
        turn_right ()
        move ()
        turn - right ( )
    def turn-right ( )?
        for i in range (3):
            turn-left
if -- name= = ' __ main __
        main ()
",202,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
        # Move to the beeper.
        move_beeper()
        # Pick the beeper up.
        pick_beeper()
        # Return to Karel's starting point.
        go_back()
    # This function moves Karel to the beeper.

def move_beeper():
        for i in range(2):
                move()
        turn_right()
        move()
        turn_left()
            move()
    # this function return to Karel's starting point

def go_back():
        for i in range(2):
                turn_left()
        for i in range(3):
                move()
        turn_right()
        move()
        turn_right()

def turn_right():
        for i in range(3):
            turn_left()
if __name__ == '__main__':
        main()
",124,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
        # Move to the beeper.
        move_ beeper ()
        # Pick the beeper up.
        pick-beeper ()
        # Return to Karel's starting point.
        go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
        for i in range (2):
                move ( )
        turn right ()
        move ()
        turn left ()
            move()
    # this function return to Karel's starting poin
    def 90-back () ;
        for i in range (2):
                turn-left ()
        for i in range (3).
                move()
        turn_right ()
        move ()
        turn - right ( )
    def turn-right ( )?
        for i in range (3):
            turn-left
if -- name= = ' __ main __
        main ()
",202,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
        # Move to the beeper.
        move_beeper()
        # Pick the beeper up.
        pick_beeper()
        # Return to Karel's starting point.
        go_back()
    # This function moves Karel to the beeper.

def move_beeper():
        for i in range(2):
                move()
        turn_right()
        move()
        turn_left()
            move()
    # this function return to Karel's starting point

def go_back():
        for i in range(2):
                turn_left()
        for i in range(3):
                move()
        turn_right()
        move()
        turn_right()

def turn_right():
        for i in range(3):
            turn_left()
if __name__ == '__main__':
        main()
",124,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
        # Move to the beeper.
        move_ beeper ()
        # Pick the beeper up.
        pick-beeper ()
        # Return to Karel's starting point.
        go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
        for i in range (2):
                move ( )
        turn right ()
        move ()
        turn left ()
            move()
    # this function return to Karel's starting poin
    def 90-back () ;
        for i in range (2):
                turn-left ()
        for i in range (3).
                move()
        turn_right ()
        move ()
        turn - right ( )
    def turn-right ( )?
        for i in range (3):
            turn-left
if -- name= = ' __ main __
        main ()
",202,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
        # Move to the beeper.
        move_beeper()
        # Pick the beeper up.
        pick_beeper()
        # Return to Karel's starting point.
        go_back()
# This function moves Karel to the beeper.

def move_beeper():
        for i in range(2):
                move()
        turn_right()
        move()
        turn_left()
        move()
# this function return to Karel's starting point

def go_back():
        for i in range(2):
                turn_left()
        for i in range(3):
                move()
        turn_right()
        move()
        turn_right()

def turn_right():
        for i in range(3):
            turn_left()
if __name__ == '__main__':
        main()
",112,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
        # Move to the beeper.
        move_ beeper ()
        # Pick the beeper up.
        pick-beeper ()
        # Return to Karel's starting point.
        go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
        for i in range (2):
                move ( )
        turn right ()
        move ()
        turn left ()
            move()
    # this function return to Karel's starting poin
    def 90-back () ;
        for i in range (2):
                turn-left ()
        for i in range (3).
                move()
        turn_right ()
        move ()
        turn - right ( )
    def turn-right ( )?
        for i in range (3):
            turn-left
if -- name= = ' __ main __
        main ()
",202,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
        # Move to the beeper.
        move_beeper()
        # Pick the beeper up.
        pick_beeper()
        # Return to Karel's starting point.
        go_back()
    # This function moves Karel to the beeper.

def move_beeper():
        for i in range(2):
                move()
        turn_right()
        move()
        turn_left()
            move()
    # this function return to Karel's starting point

def go_back():
        for i in range(2):
                turn_left()
        for i in range(3):
                move()
        turn_right()
        move()
        turn_right()

def turn_right():
        for i in range(3):
            turn_left()
if __name__ == '__main__':
        main()
",124,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
        # Move to the beeper.
        move_ beeper ()
        # Pick the beeper up.
        pick-beeper ()
        # Return to Karel's starting point.
        go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
        for i in range (2):
            move ( )
        turn right ()
        move ()
        turn left ()
        move()
    # this function return to Karel's starting poin
    def 90-back () ;
        for i in range (2):
            turn-left ()
        for i in range (3).
            move()
        turn_right ()
        move ()
        turn - right ( )
    def turn-right ( )?
        for i in range (3):
            turn-left
if -- name= = ' __ main __
        main ()
",186,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
        # Move to the beeper.
        move_beeper()
        # Pick the beeper up.
        pick_beeper()
        # Return to Karel's starting point.
        go_back()
    # This function moves Karel to the beeper.

def move_beeper():
        for i in range(2):
            move()
        turn_right()
        move()
        turn_left()
        move()
    # this function return to Karel's starting point

def go_back():
        for i in range(2):
            turn_left()
        for i in range(3):
            move()
        turn_right()
        move()
        turn_right()

def turn_right():
        for i in range(3):
            turn_left()
if __name__ == '__main__':
        main()
",108,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
        # Move to the beeper.
        move_ beeper ()
        # Pick the beeper up.
        pick-beeper ()
        # Return to Karel's starting point.
        go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
        for i in range (2):
            move ( )
        turn right ()
        move ()
        turn left ()
        move()
    # this function return to Karel's starting poin
    def 90-back () ;
        for i in range (2):
            turn-left ()
        for i in range (3).
            move()
        turn_right ()
        move ()
        turn - right ( )
    def turn-right ( )?
        for i in range (3):
            turn-left
if -- name= = ' __ main __
        main ()
",186,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
        # Move to the beeper.
        move_beeper()
        # Pick the beeper up.
        pick_beeper()
        # Return to Karel's starting point.
        go_back()
# This function moves Karel to the beeper.

def move_beeper():
        for i in range(2):
            move()
        turn_right()
        move()
        turn_left()
        move()
# this function return to Karel's starting point

def go_back():
        for i in range(2):
            turn_left()
        for i in range(3):
            move()
        turn_right()
        move()
        turn_right()

def turn_right():
        for i in range(3):
            turn_left()
if __name__ == '__main__':
        main()
",100,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
        # Move to the beeper.
        move_ beeper ()
        # Pick the beeper up.
        pick-beeper ()
        # Return to Karel's starting point.
        go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
        for i in range (2):
            move ( )
        turn right ()
        move ()
        turn left ()
        move()
    # this function return to Karel's starting poin
    def 90-back () ;
        for i in range (2):
            turn-left ()
        for i in range (3).
            move()
        turn_right ()
        move ()
        turn - right ( )
    def turn-right ( )?
        for i in range (3):
            turn-left
if -- name= = ' __ main __
        main ()
",186,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
        # Move to the beeper.
        move_beeper()
        # Pick the beeper up.
        pick_beeper()
        # Return to Karel's starting point.
        go_back()
# This function moves Karel to the beeper.

def move_beeper():
        for i in range(2):
            move()
        turn_right()
        move()
        turn_left()
        move()
# this function return to Karel's starting point

def go_back():
        for i in range(2):
            turn_left()
        for i in range(3):
            move()
        turn_right()
        move()
        turn_right()

def turn_right():
        for i in range(3):
            turn_left()
if __name__ == '__main__':
        main()
",100,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
        # Move to the beeper.
        move_ beeper ()
        # Pick the beeper up.
        pick-beeper ()
        # Return to Karel's starting point.
        go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
        for i in range (2):
            move ( )
        turn right ()
        move ()
        turn left ()
        move()
    # this function return to Karel's starting poin
    def 90-back () ;
        for i in range (2):
            turn-left ()
        for i in range (3).
            move()
        turn_right ()
        move ()
        turn - right ( )
    def turn-right ( )?
        for i in range (3):
            turn-left
if -- name= = ' __ main __
        main ()
",186,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
        # Move to the beeper.
        move_beeper()
        # Pick the beeper up.
        pick_beeper()
        # Return to Karel's starting point.
        go_back()
    # This function moves Karel to the beeper.

def move_beeper():
        for i in range(2):
            move()
        turn_right()
        move()
        turn_left()
        move()
    # this function return to Karel's starting point

def go_back():
        for i in range(2):
            turn_left()
        for i in range(3):
            move()
        turn_right()
        move()
        turn_right()

def turn_right():
        for i in range(3):
            turn_left()
if __name__ == '__main__':
        main()
",108,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
        # Move to the beeper.
        move_ beeper ()
        # Pick the beeper up.
        pick-beeper ()
        # Return to Karel's starting point.
        go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
        for i in range (2):
            move ( )
        turn right ()
        move ()
        turn left ()
        move()
    # this function return to Karel's starting poin
    def 90-back () ;
        for i in range (2):
            turn-left ()
        for i in range (3).
            move()
        turn_right ()
        move ()
        turn - right ( )
    def turn-right ( )?
        for i in range (3):
            turn-left
if -- name= = ' __ main __
        main ()
",186,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
        # Move to the beeper.
        move_beeper()
        # Pick the beeper up.
        pick_beeper()
        # Return to Karel's starting point.
        go_back()
    # This function moves Karel to the beeper.

def move_beeper():
        for i in range(2):
            move()
        turn_right()
        move()
        turn_left()
        move()
    # this function return to Karel's starting point

def go_back():
        for i in range(2):
            turn_left()
        for i in range(3):
            move()
        turn_right()
        move()
        turn_right()

def turn_right():
        for i in range(3):
            turn_left()
if __name__ == '__main__':
        main()
",108,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
        # Move to the beeper.
        move_ beeper ()
        # Pick the beeper up.
        pick-beeper ()
        # Return to Karel's starting point.
        go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
        for i in range (2):
            move ( )
        turn right ()
        move ()
        turn left ()
        move()
    # this function return to Karel's starting poin
    def 90-back () ;
        for i in range (2):
            turn-left ()
        for i in range (3).
            move()
        turn_right ()
        move ()
        turn - right ( )
    def turn-right ( )?
        for i in range (3):
            turn-left
if -- name= = ' __ main __
        main ()
",186,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
        # Move to the beeper.
        move_beeper()
        # Pick the beeper up.
        pick_beeper()
        # Return to Karel's starting point.
        go_back()
    # This function moves Karel to the beeper.

def move_beeper():
        for i in range(2):
            move()
        turn_right()
        move()
        turn_left()
        move()
    # this function return to Karel's starting point

def go_back():
        for i in range(2):
            turn_left()
        for i in range(3):
            move()
        turn_right()
        move()
        turn_right()

def turn_right():
        for i in range(3):
            turn_left()
if __name__ == '__main__':
        main()
",108,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
        # Move to the beeper.
        move_ beeper ()
        # Pick the beeper up.
        pick-beeper ()
        # Return to Karel's starting point.
        go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
        for i in range (2):
            move ( )
        turn right ()
        move ()
        turn left ()
        move()
    # this function return to Karel's starting poin
    def 90-back () ;
        for i in range (2):
            turn-left ()
        for i in range (3).
            move()
        turn_right ()
        move ()
        turn - right ( )
    def turn-right ( )?
        for i in range (3):
            turn-left
if -- name= = ' __ main __
        main ()
",186,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
        # Move to the beeper.
        move_beeper()
        # Pick the beeper up.
        pick_beeper()
        # Return to Karel's starting point.
        go_back()
    # This function moves Karel to the beeper.

def move_beeper():
        for i in range(2):
            move()
        turn_right()
        move()
        turn_left()
        move()
    # this function return to Karel's starting point

def go_back():
        for i in range(2):
            turn_left()
        for i in range(3):
            move()
        turn_right()
        move()
        turn_right()

def turn_right():
        for i in range(3):
            turn_left()
if __name__ == '__main__':
        main()
",108,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
        # Move to the beeper.
        move_ beeper ()
        # Pick the beeper up.
        pick-beeper ()
        # Return to Karel's starting point.
        go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
        for i in range (2):
            move ( )
        turn right ()
        move ()
        turn left ()
        move()
    # this function return to Karel's starting poin
    def 90-back () ;
        for i in range (2):
            turn-left ()
        for i in range (3).
            move()
        turn_right ()
        move ()
        turn - right ( )
    def turn-right ( )?
        for i in range (3):
            turn-left
if -- name= = ' __ main __
        main ()
",186,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
        # Move to the beeper.
        move_beeper()
        # Pick the beeper up.
        pick_beeper()
        # Return to Karel's starting point.
        go_back()
    # This function moves Karel to the beeper.

def move_beeper():
        for i in range(2):
            move()
        turn_right()
        move()
        turn_left()
        move()
    # this function return to Karel's starting point

def go_back():
        for i in range(2):
            turn_left()
        for i in range(3):
            move()
        turn_right()
        move()
        turn_right()

def turn_right():
        for i in range(3):
            turn_left()
if __name__ == '__main__':
        main()
",108,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
        # Move to the beeper.
        move_ beeper ()
        # Pick the beeper up.
        pick-beeper ()
        # Return to Karel's starting point.
        go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
        for i in range (2):
            move ( )
        turn right ()
        move ()
        turn left ()
        move()
    # this function return to Karel's starting poin
    def 90-back () ;
        for i in range (2):
            turn-left ()
        for i in range (3).
            move()
        turn_right ()
        move ()
        turn - right ( )
    def turn-right ( )?
        for i in range (3):
            turn-left
if -- name= = ' __ main __
        main ()
",186,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
        # Move to the beeper.
        move_beeper()
        # Pick the beeper up.
        pick_beeper()
        # Return to Karel's starting point.
        go_back()
    # This function moves Karel to the beeper.

def move_beeper():
        for i in range(2):
            move()
        turn_right()
        move()
        turn_left()
        move()
    # this function return to Karel's starting point

def go_back():
        for i in range(2):
            turn_left()
        for i in range(3):
            move()
        turn_right()
        move()
        turn_right()

def turn_right():
        for i in range(3):
            turn_left()
if __name__ == '__main__':
        main()
",108,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
        # Move to the beeper.
        move_ beeper ()
        # Pick the beeper up.
        pick-beeper ()
        # Return to Karel's starting point.
        go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
        for i in range (2):
            move ( )
        turn right ()
        move ()
        turn left ()
        move()
    # this function return to Karel's starting poin
    def 90-back () ;
        for i in range (2):
            turn-left ()
        for i in range (3).
            move()
        turn_right ()
        move ()
        turn - right ( )
    def turn-right ( )?
        for i in range (3):
            turn-left
if -- name= = ' __ main __
        main ()
",186,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
        # Move to the beeper.
        move_beeper()
        # Pick the beeper up.
        pick_beeper()
        # Return to Karel's starting point.
        go_back()
    # This function moves Karel to the beeper.

def move_beeper():
        for i in range(2):
            move()
        turn_right()
        move()
        turn_left()
        move()
    # this function return to Karel's starting point

def go_back():
        for i in range(2):
            turn_left()
        for i in range(3):
            move()
        turn_right()
        move()
        turn_right()

def turn_right():
        for i in range(3):
            turn_left()
if __name__ == '__main__':
        main()
",108,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
        # Move to the beeper.
        move_ beeper ()
        # Pick the beeper up.
        pick-beeper ()
        # Return to Karel's starting point.
        go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
        for i in range (2):
            move ( )
        turn right ()
        move ()
        turn left ()
        move()
    # this function return to Karel's starting poin
    def 90-back () ;
        for i in range (2):
            turn-left ()
        for i in range (3).
            move()
        turn_right ()
        move ()
        turn - right ( )
    def turn-right ( )?
        for i in range (3):
            turn-left
if -- name= = ' __ main __
        main ()
",186,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
        # Move to the beeper.
        move_beeper()
        # Pick the beeper up.
        pick_beeper()
        # Return to Karel's starting point.
        go_back()
    # This function moves Karel to the beeper.

def move_beeper():
        for i in range(2):
            move()
        turn_right()
        move()
        turn_left()
        move()
    # this function return to Karel's starting point

def go_back():
        for i in range(2):
            turn_left()
        for i in range(3):
            move()
        turn_right()
        move()
        turn_right()

def turn_right():
        for i in range(3):
            turn_left()
if __name__ == '__main__':
        main()
",108,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
        # Move to the beeper.
        move_ beeper ()
        # Pick the beeper up.
        pick-beeper ()
        # Return to Karel's starting point.
        go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
        for i in range (2):
            move ( )
        turn right ()
        move ()
        turn left ()
        move()
    # this function return to Karel's starting poin
    def 90-back () ;
        for i in range (2):
            turn-left ()
        for i in range (3).
            move()
        turn_right ()
        move ()
        turn - right ( )
    def turn-right ( )?
        for i in range (3):
            turn-left
if -- name= = ' __ main __
        main ()
",186,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
        # Move to the beeper.
        move_beeper()
        # Pick the beeper up.
        pick_beeper()
        # Return to Karel's starting point.
        go_back()
    # This function moves Karel to the beeper.

def move_beeper():
        for i in range(2):
            move()
        turn_right()
        move()
        turn_left()
        move()
    # this function return to Karel's starting point

def go_back():
        for i in range(2):
            turn_left()
        for i in range(3):
            move()
        turn_right()
        move()
        turn_right()

def turn_right():
        for i in range(3):
            turn_left()
if __name__ == '__main__':
        main()
",108,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
        # Move to the beeper.
        move_ beeper ()
        # Pick the beeper up.
        pick-beeper ()
        # Return to Karel's starting point.
        go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
        for i in range (2):
            move ( )
        turn right ()
        move ()
        turn left ()
        move()
    # this function return to Karel's starting poin
    def 90-back () ;
        for i in range (2):
            turn-left ()
        for i in range (3).
            move()
        turn_right ()
        move ()
        turn - right ( )
    def turn-right ( )?
        for i in range (3):
            turn-left
if -- name= = ' __ main __
        main ()
",186,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
        # Move to the beeper.
        move_beeper()
        # Pick the beeper up.
        pick_beeper()
        # Return to Karel's starting point.
        go_back()
    # This function moves Karel to the beeper.

def move_beeper():
        for i in range(2):
            move()
        turn_right()
        move()
        turn_left()
        move()
    # this function return to Karel's starting point

def go_back():
        for i in range(2):
            turn_left()
        for i in range(3):
            move()
        turn_right()
        move()
        turn_right()

def turn_right():
        for i in range(3):
            turn_left()
if __name__ == '__main__':
        main()
",108,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
        # Move to the beeper.
        move_ beeper ()
        # Pick the beeper up.
        pick-beeper ()
        # Return to Karel's starting point.
        go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
        for i in range (2):
            move ( )
        turn right ()
        move ()
        turn left ()
        move()
    # this function return to Karel's starting poin
    def 90-back () ;
        for i in range (2):
            turn-left ()
        for i in range (3).
            move()
        turn_right ()
        move ()
        turn - right ( )
    def turn-right ( )?
        for i in range (3):
            turn-left
if -- name= = ' __ main __
        main ()
",186,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
        # Move to the beeper.
        move_beeper()
        # Pick the beeper up.
        pick_beeper()
        # Return to Karel's starting point.
        go_back()
    # This function moves Karel to the beeper.

def move_beeper():
        for i in range(2):
            move()
        turn_right()
        move()
        turn_left()
        move()
    # this function return to Karel's starting point

def go_back():
        for i in range(2):
            turn_left()
        for i in range(3):
            move()
        turn_right()
        move()
        turn_right()

def turn_right():
        for i in range(3):
            turn_left()
if __name__ == '__main__':
        main()
",108,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
        # Move to the beeper.
        move_ beeper ()
        # Pick the beeper up.
        pick-beeper ()
        # Return to Karel's starting point.
        go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
        for i in range (2):
            move ( )
        turn right ()
        move ()
        turn left ()
        move()
    # this function return to Karel's starting poin
    def 90-back () ;
        for i in range (2):
            turn-left ()
        for i in range (3).
            move()
        turn_right ()
        move ()
        turn - right ( )
    def turn-right ( )?
        for i in range (3):
            turn-left
if -- name= = ' __ main __
        main ()
",186,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
        # Move to the beeper.
        move_beeper()
        # Pick the beeper up.
        pick_beeper()
        # Return to Karel's starting point.
        go_back()
    # This function moves Karel to the beeper.

def move_beeper():
        for i in range(2):
            move()
        turn_right()
        move()
        turn_left()
        move()
    # this function return to Karel's starting point

def go_back():
        for i in range(2):
            turn_left()
        for i in range(3):
            move()
        turn_right()
        move()
        turn_right()

def turn_right():
        for i in range(3):
            turn_left()
if __name__ == '__main__':
        main()
",108,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
        # Move to the beeper.
        move_ beeper ()
        # Pick the beeper up.
        pick-beeper ()
        # Return to Karel's starting point.
        go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
        for i in range (2):
            move ( )
        turn right ()
        move ()
        turn left ()
        move()
    # this function return to Karel's starting poin
    def 90-back () ;
        for i in range (2):
            turn-left ()
        for i in range (3).
            move()
        turn_right ()
        move ()
        turn - right ( )
    def turn-right ( )?
        for i in range (3):
            turn-left
if -- name= = ' __ main __
        main ()
",186,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
        # Move to the beeper.
        move_beeper()
        # Pick the beeper up.
        pick_beeper()
        # Return to Karel's starting point.
        go_back()
    # This function moves Karel to the beeper.

def move_beeper():
        for i in range(2):
            move()
        turn_right()
        move()
        turn_left()
        move()
    # this function return to Karel's starting point

def go_back():
        for i in range(2):
            turn_left()
        for i in range(3):
            move()
        turn_right()
        move()
        turn_right()

def turn_right():
        for i in range(3):
            turn_left()
if __name__ == '__main__':
        main()
",108,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
        # Move to the beeper.
        move_ beeper ()
        # Pick the beeper up.
        pick-beeper ()
        # Return to Karel's starting point.
        go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
        for i in range (2):
            move ( )
        turn right ()
        move ()
        turn left ()
        move()
    # this function return to Karel's starting poin
    def 90-back () ;
        for i in range (2):
            turn-left ()
        for i in range (3).
            move()
        turn_right ()
        move ()
        turn - right ( )
    def turn-right ( )?
        for i in range (3):
            turn-left
if -- name= = ' __ main __
        main ()
",186,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
        # Move to the beeper.
        move_beeper()
        # Pick the beeper up.
        pick_beeper()
        # Return to Karel's starting point.
        go_back()
    # This function moves Karel to the beeper.

def move_beeper():
        for i in range(2):
            move()
        turn_right()
        move()
        turn_left()
        move()
    # this function return to Karel's starting point

def go_back():
        for i in range(2):
            turn_left()
        for i in range(3):
            move()
        turn_right()
        move()
        turn_right()

def turn_right():
        for i in range(3):
            turn_left()
if __name__ == '__main__':
        main()
",108,"    from Karel. stanfordkarel import *
    # This program makes Karel pick up
        a beeper and go back into her house.
    def main ():
        # Move to the beeper.
        move_ beeper ()
        # Pick the beeper up.
        pick-beeper ()
        # Return to Karel's starting point.
        go- back ()
    # This function moves Karel to the beeper.
    def move_beeper ():
        for i in range (2):
        move ( )
        turn right ()
        move ()
        turn left ()
        move()
    # this function return to Karel's starting poin
    def 90-back () ;
        for i in range (2):
        turn-left ()
        for i in range (3).
        move()
        turn_right ()
        move ()
        turn - right ( )
    def turn-right ( )?
        for i in range (3):
        turn-left
if -- name= = ' __ main __
        main ()
",170,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
        # Move to the beeper.
        move_beeper()
        # Pick the beeper up.
        pick_beeper()
        # Return to Karel's starting point.
        go_back()
    # This function moves Karel to the beeper.

def move_beeper():
        for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()
    # this function return to Karel's starting point

def go_back():
        for i in range(2):
        turn_left()
        for i in range(3):
        move()
        turn_right()
        move()
        turn_right()

def turn_right():
        for i in range(3):
        turn_left()
if __name__ == '__main__':
        main()
",92,"from Karel. stanfordkarel import *
# This program makes Karel pick up
    a beeper and go back into her house.
def main ():
    # Move to the beeper.
    move_ beeper ()
    # Pick the beeper up.
    pick-beeper ()
    # Return to Karel's starting point.
    go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
    for i in range (2):
    move ( )
    turn right ()
    move ()
    turn left ()
    move()
# this function return to Karel's starting poin
def 90-back () ;
    for i in range (2):
    turn-left ()
    for i in range (3).
    move()
    turn_right ()
    move ()
    turn - right ( )
def turn-right ( )?
    for i in range (3):
    turn-left
if -- name= = ' __ main __
    main ()
",84,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()
# This function moves Karel to the beeper.

def move_beeper():
    for i in range(2):
    move()
    turn_right()
    move()
    turn_left()
    move()
# this function return to Karel's starting point

def go_back():
    for i in range(2):
    turn_left()
    for i in range(3):
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
    turn_left()
if __name__ == '__main__':
    main()
",28,"from Karel. stanfordkarel import *
# This program makes Karel pick up
    a beeper and go back into her house.
def main ():
    # Move to the beeper.
    move_ beeper ()
    # Pick the beeper up.
    pick-beeper ()
    # Return to Karel's starting point.
    go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
    for i in range (2):
    move ( )
    turn right ()
    move ()
    turn left ()
    move()
# this function return to Karel's starting poin
def 90-back () ;
    for i in range (2):
    turn-left ()
    for i in range (3).
    move()
    turn_right ()
    move ()
    turn - right ( )
def turn-right ( )?
    for i in range (3):
    turn-left
if -- name= = ' __ main __
    main ()
",84,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()
# This function moves Karel to the beeper.

def move_beeper():
    for i in range(2):
    move()
    turn_right()
    move()
    turn_left()
    move()
# this function return to Karel's starting point

def go_back():
    for i in range(2):
    turn_left()
    for i in range(3):
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
    turn_left()
if __name__ == '__main__':
    main()
",28,"from Karel. stanfordkarel import *
# This program makes Karel pick up
    a beeper and go back into her house.
def main ():
    # Move to the beeper.
    move_ beeper ()
    # Pick the beeper up.
    pick-beeper ()
    # Return to Karel's starting point.
    go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
    for i in range (2):
    move ( )
    turn right ()
    move ()
    turn left ()
    move()
# this function return to Karel's starting poin
def 90-back () ;
    for i in range (2):
    turn-left ()
    for i in range (3).
    move()
    turn_right ()
    move ()
    turn - right ( )
def turn-right ( )?
    for i in range (3):
    turn-left
if -- name= = ' __ main __
    main ()
",84,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()
# This function moves Karel to the beeper.

def move_beeper():
    for i in range(2):
    move()
    turn_right()
    move()
    turn_left()
    move()
# this function return to Karel's starting point

def go_back():
    for i in range(2):
    turn_left()
    for i in range(3):
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
    turn_left()
if __name__ == '__main__':
    main()
",28,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
    # Move to the beeper.
    move_ beeper ()
    # Pick the beeper up.
    pick-beeper ()
    # Return to Karel's starting point.
    go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
    for i in range (2):
    move ( )
    turn right ()
    move ()
    turn left ()
    move()
# this function return to Karel's starting poin
def 90-back () ;
    for i in range (2):
    turn-left ()
    for i in range (3).
    move()
    turn_right ()
    move ()
    turn - right ( )
def turn-right ( )?
    for i in range (3):
    turn-left
if -- name= = ' __ main __
    main ()
",81,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
    # Move to the beeper.
    move_ beeper ()
    # Pick the beeper up.
    pick-beeper ()
    # Return to Karel's starting point.
    go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
    for i in range (2):
    move ( )
    turn right ()
    move ()
    turn left ()
    move()
# this function return to Karel's starting poin
def 90-back () ;
    for i in range (2):
    turn-left ()
    for i in range (3).
    move()
    turn_right ()
    move ()
    turn - right ( )
def turn-right ( )?
    for i in range (3):
    turn-left
if -- name= = ' __ main __
    main ()
",81,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
    # Move to the beeper.
    move_ beeper ()
    # Pick the beeper up.
    pick-beeper ()
    # Return to Karel's starting point.
    go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
    for i in range (2):
    move ( )
    turn right ()
    move ()
    turn left ()
    move()
# this function return to Karel's starting poin
def 90-back () ;
    for i in range (2):
    turn-left ()
    for i in range (3).
    move()
    turn_right ()
    move ()
    turn - right ( )
def turn-right ( )?
    for i in range (3):
    turn-left
if -- name= = ' __ main __
    main ()
",81,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
    # Move to the beeper.
    move_ beeper ()
    # Pick the beeper up.
    pick-beeper ()
    # Return to Karel's starting point.
    go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
    for i in range (2):
    move ( )
    turn right ()
    move ()
    turn left ()
    move()
# this function return to Karel's starting poin
def 90-back () ;
    for i in range (2):
    turn-left ()
    for i in range (3).
    move()
    turn_right ()
    move ()
    turn - right ( )
def turn-right ( )?
    for i in range (3):
    turn-left
if -- name= = ' __ main __
    main ()
",81,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
    # Move to the beeper.
    move_ beeper ()
    # Pick the beeper up.
    pick-beeper ()
    # Return to Karel's starting point.
    go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
    for i in range (2):
    move ( )
    turn right ()
    move ()
    turn left ()
    move()
# this function return to Karel's starting poin
def 90-back () ;
    for i in range (2):
    turn-left ()
    for i in range (3).
    move()
    turn_right ()
    move ()
    turn - right ( )
def turn-right ( )?
    for i in range (3):
    turn-left
if -- name= = ' __ main __
    main ()
",81,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
    # Move to the beeper.
    move_ beeper ()
    # Pick the beeper up.
    pick-beeper ()
    # Return to Karel's starting point.
    go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
    for i in range (2):
    move ( )
    turn right ()
    move ()
    turn left ()
    move()
# this function return to Karel's starting poin
def 90-back () ;
    for i in range (2):
    turn-left ()
    for i in range (3).
    move()
    turn_right ()
    move ()
    turn - right ( )
def turn-right ( )?
    for i in range (3):
    turn-left
if -- name= = ' __ main __
    main ()
",81,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
    a beeper and go back into her house.
def main ():
    # Move to the beeper.
    move_ beeper ()
    # Pick the beeper up.
    pick-beeper ()
    # Return to Karel's starting point.
    go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
    for i in range (2):
    move ( )
    turn right ()
    move ()
    turn left ()
    move()
# this function return to Karel's starting poin
def 90-back () ;
    for i in range (2):
    turn-left ()
    for i in range (3).
    move()
    turn_right ()
    move ()
    turn - right ( )
def turn-right ( )?
    for i in range (3):
    turn-left
if -- name= = ' __ main __
    main ()
",84,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()
# This function moves Karel to the beeper.

def move_beeper():
    for i in range(2):
    move()
    turn_right()
    move()
    turn_left()
    move()
# this function return to Karel's starting point

def go_back():
    for i in range(2):
    turn_left()
    for i in range(3):
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
    turn_left()
if __name__ == '__main__':
    main()
",28,"from Karel. stanfordkarel import *
# This program makes Karel pick up
    a beeper and go back into her house.
def main ():
    # Move to the beeper.
    move_ beeper ()
    # Pick the beeper up.
    pick-beeper ()
    # Return to Karel's starting point.
    go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
    for i in range (2):
    move ( )
    turn right ()
    move ()
    turn left ()
    move()
# this function return to Karel's starting poin
def 90-back () ;
    for i in range (2):
    turn-left ()
    for i in range (3).
    move()
    turn_right ()
    move ()
    turn - right ( )
def turn-right ( )?
    for i in range (3):
    turn-left
if -- name= = ' __ main __
    main ()
",84,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()
# This function moves Karel to the beeper.

def move_beeper():
    for i in range(2):
    move()
    turn_right()
    move()
    turn_left()
    move()
# this function return to Karel's starting point

def go_back():
    for i in range(2):
    turn_left()
    for i in range(3):
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
    turn_left()
if __name__ == '__main__':
    main()
",28,"from Karel. stanfordkarel import *
# This program makes Karel pick up
    a beeper and go back into her house.
def main ():
    # Move to the beeper.
    move_ beeper ()
    # Pick the beeper up.
    pick-beeper ()
    # Return to Karel's starting point.
    go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
    for i in range (2):
    move ( )
    turn right ()
    move ()
    turn left ()
    move()
# this function return to Karel's starting poin
def 90-back () ;
    for i in range (2):
    turn-left ()
    for i in range (3).
    move()
    turn_right ()
    move ()
    turn - right ( )
def turn-right ( )?
    for i in range (3):
    turn-left
if -- name= = ' __ main __
    main ()
",84,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()
# This function moves Karel to the beeper.

def move_beeper():
    for i in range(2):
    move()
    turn_right()
    move()
    turn_left()
    move()
# this function return to Karel's starting point

def go_back():
    for i in range(2):
    turn_left()
    for i in range(3):
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
    turn_left()
if __name__ == '__main__':
    main()
",28,"from Karel. stanfordkarel import *
# This program makes Karel pick up
    a beeper and go back into her house.
def main ():
    # Move to the beeper.
    move_ beeper ()
    # Pick the beeper up.
    pick-beeper ()
    # Return to Karel's starting point.
    go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
    for i in range (2):
    move ( )
    turn right ()
    move ()
    turn left ()
    move()
# this function return to Karel's starting poin
def 90-back () ;
    for i in range (2):
    turn-left ()
    for i in range (3).
    move()
    turn_right ()
    move ()
    turn - right ( )
def turn-right ( )?
    for i in range (3):
    turn-left
if -- name= = ' __ main __
    main ()
",84,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()
# This function moves Karel to the beeper.

def move_beeper():
    for i in range(2):
    move()
    turn_right()
    move()
    turn_left()
    move()
# this function return to Karel's starting point

def go_back():
    for i in range(2):
    turn_left()
    for i in range(3):
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
    turn_left()
if __name__ == '__main__':
    main()
",28,"from Karel. stanfordkarel import *
# This program makes Karel pick up
    a beeper and go back into her house.
def main ():
    # Move to the beeper.
    move_ beeper ()
    # Pick the beeper up.
    pick-beeper ()
    # Return to Karel's starting point.
    go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
    for i in range (2):
    move ( )
    turn right ()
    move ()
    turn left ()
    move()
# this function return to Karel's starting poin
def 90-back () ;
    for i in range (2):
    turn-left ()
    for i in range (3).
    move()
    turn_right ()
    move ()
    turn - right ( )
def turn-right ( )?
    for i in range (3):
    turn-left
if -- name= = ' __ main __
    main ()
",84,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()
# This function moves Karel to the beeper.

def move_beeper():
    for i in range(2):
    move()
    turn_right()
    move()
    turn_left()
    move()
# this function return to Karel's starting point

def go_back():
    for i in range(2):
    turn_left()
    for i in range(3):
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
    turn_left()
if __name__ == '__main__':
    main()
",28,"from Karel. stanfordkarel import *
# This program makes Karel pick up
    a beeper and go back into her house.
def main ():
    # Move to the beeper.
    move_ beeper ()
    # Pick the beeper up.
    pick-beeper ()
    # Return to Karel's starting point.
    go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
    for i in range (2):
    move ( )
    turn right ()
    move ()
    turn left ()
    move()
# this function return to Karel's starting poin
def 90-back () ;
    for i in range (2):
    turn-left ()
    for i in range (3).
    move()
    turn_right ()
    move ()
    turn - right ( )
def turn-right ( )?
    for i in range (3):
    turn-left
if -- name= = ' __ main __
    main ()
",84,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()
# This function moves Karel to the beeper.

def move_beeper():
    for i in range(2):
    move()
    turn_right()
    move()
    turn_left()
    move()
# this function return to Karel's starting point

def go_back():
    for i in range(2):
    turn_left()
    for i in range(3):
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
    turn_left()
if __name__ == '__main__':
    main()
",28,"from Karel. stanfordkarel import *
# This program makes Karel pick up
    a beeper and go back into her house.
def main ():
    # Move to the beeper.
    move_ beeper ()
    # Pick the beeper up.
    pick-beeper ()
    # Return to Karel's starting point.
    go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
    for i in range (2):
    move ( )
    turn right ()
    move ()
    turn left ()
    move()
# this function return to Karel's starting poin
def 90-back () ;
    for i in range (2):
    turn-left ()
    for i in range (3).
    move()
    turn_right ()
    move ()
    turn - right ( )
def turn-right ( )?
    for i in range (3):
    turn-left
if -- name= = ' __ main __
    main ()
",84,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()
# This function moves Karel to the beeper.

def move_beeper():
    for i in range(2):
    move()
    turn_right()
    move()
    turn_left()
    move()
# this function return to Karel's starting point

def go_back():
    for i in range(2):
    turn_left()
    for i in range(3):
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
    turn_left()
if __name__ == '__main__':
    main()
",28,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
    # Move to the beeper.
    move_ beeper ()
    # Pick the beeper up.
    pick-beeper ()
    # Return to Karel's starting point.
    go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
    for i in range (2):
    move ( )
    turn right ()
    move ()
    turn left ()
    move()
# this function return to Karel's starting poin
def 90-back () ;
    for i in range (2):
    turn-left ()
    for i in range (3).
    move()
    turn_right ()
    move ()
    turn - right ( )
def turn-right ( )?
    for i in range (3):
    turn-left
if -- name= = ' __ main __
    main ()
",81,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
    a beeper and go back into her house.
def main ():
    # Move to the beeper.
    move_ beeper ()
    # Pick the beeper up.
    pick-beeper ()
    # Return to Karel's starting point.
    go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
    for i in range (2):
    move ( )
    turn right ()
    move ()
    turn left ()
    move()
# this function return to Karel's starting poin
def 90-back () ;
    for i in range (2):
    turn-left ()
    for i in range (3).
    move()
    turn_right ()
    move ()
    turn - right ( )
def turn-right ( )?
    for i in range (3):
    turn-left
if -- name= = ' __ main __
    main ()
",84,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()
# This function moves Karel to the beeper.

def move_beeper():
    for i in range(2):
    move()
    turn_right()
    move()
    turn_left()
    move()
# this function return to Karel's starting point

def go_back():
    for i in range(2):
    turn_left()
    for i in range(3):
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
    turn_left()
if __name__ == '__main__':
    main()
",28,"from Karel. stanfordkarel import *
# This program makes Karel pick up
    a beeper and go back into her house.
def main ():
    # Move to the beeper.
    move_ beeper ()
    # Pick the beeper up.
    pick-beeper ()
    # Return to Karel's starting point.
    go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
    for i in range (2):
    move ( )
    turn right ()
    move ()
    turn left ()
    move()
# this function return to Karel's starting poin
def 90-back () ;
    for i in range (2):
    turn-left ()
    for i in range (3).
    move()
    turn_right ()
    move ()
    turn - right ( )
def turn-right ( )?
    for i in range (3):
    turn-left
if -- name= = ' __ main __
    main ()
",84,"from karel.stanfordkarel import *
# This program makes Karel pick up
    # a beeper and go back into her house.

def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()
# This function moves Karel to the beeper.

def move_beeper():
    for i in range(2):
    move()
    turn_right()
    move()
    turn_left()
    move()
# this function return to Karel's starting point

def go_back():
    for i in range(2):
    turn_left()
    for i in range(3):
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
    turn_left()
if __name__ == '__main__':
    main()
",28,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
    # Move to the beeper.
    move_ beeper ()
    # Pick the beeper up.
    pick-beeper ()
    # Return to Karel's starting point.
    go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
    for i in range (2):
    move ( )
    turn right ()
    move ()
    turn left ()
    move()
# this function return to Karel's starting poin
def 90-back () ;
    for i in range (2):
    turn-left ()
    for i in range (3).
    move()
    turn_right ()
    move ()
    turn - right ( )
def turn-right ( )?
    for i in range (3):
    turn-left
if -- name= = ' __ main __
    main ()
",81,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
    # Move to the beeper.
    move_ beeper ()
    # Pick the beeper up.
    pick-beeper ()
    # Return to Karel's starting point.
    go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
    for i in range (2):
    move ( )
    turn right ()
    move ()
    turn left ()
    move()
# this function return to Karel's starting poin
def 90-back () ;
    for i in range (2):
    turn-left ()
    for i in range (3).
    move()
    turn_right ()
    move ()
    turn - right ( )
def turn-right ( )?
    for i in range (3):
    turn-left
if -- name= = ' __ main __
    main ()
",81,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
    # Move to the beeper.
    move_ beeper ()
    # Pick the beeper up.
    pick-beeper ()
    # Return to Karel's starting point.
    go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
    for i in range (2):
    move ( )
    turn right ()
    move ()
    turn left ()
    move()
# this function return to Karel's starting poin
def 90-back () ;
    for i in range (2):
    turn-left ()
    for i in range (3).
    move()
    turn_right ()
    move ()
    turn - right ( )
def turn-right ( )?
    for i in range (3):
    turn-left
if -- name= = ' __ main __
    main ()
",81,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
    # Move to the beeper.
    move_ beeper ()
    # Pick the beeper up.
    pick-beeper ()
    # Return to Karel's starting point.
    go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
    for i in range (2):
    move ( )
    turn right ()
    move ()
    turn left ()
    move()
# this function return to Karel's starting poin
def 90-back () ;
    for i in range (2):
    turn-left ()
    for i in range (3).
    move()
    turn_right ()
    move ()
    turn - right ( )
def turn-right ( )?
    for i in range (3):
    turn-left
if -- name= = ' __ main __
    main ()
",81,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",88,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
    # Move to the beeper.
    move_ beeper ()
    # Pick the beeper up.
    pick-beeper ()
    # Return to Karel's starting point.
    go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
    for i in range (2):
    move ( )
    turn right ()
    move ()
    turn left ()
    move()
# this function return to Karel's starting poin
def 90-back () ;
    for i in range (2):
    turn-left ()
    for i in range (3).
    move()
    turn_right ()
    move ()
    turn - right ( )
def turn-right ( )?
    for i in range (3):
    turn-left
if -- name= = ' __ main __
    main ()
",81,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
    # Move to the beeper.
    move_ beeper ()
    # Pick the beeper up.
    pick-beeper ()
    # Return to Karel's starting point.
    go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
    for i in range (2):
    move ( )
    turn right ()
    move ()
    turn left ()
    move()
# this function return to Karel's starting poin
def 90-back () ;
    for i in range (2):
    turn-left ()
    for i in range (3).
    move()
    turn_right ()
    move ()
    turn - right ( )
def turn-right ( )?
    for i in range (3):
    turn-left
if -- name= = ' __ main __
    main ()
",81,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
    # Move to the beeper.
    move_ beeper ()
    # Pick the beeper up.
    pick-beeper ()
    # Return to Karel's starting point.
    go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
    for i in range (2):
    move ( )
    turn right ()
    move ()
    turn left ()
    move()
# this function return to Karel's starting poin
def 90-back () ;
    for i in range (2):
    turn-left ()
    for i in range (3).
    move()
    turn_right ()
    move ()
    turn - right ( )
def turn-right ( )?
    for i in range (3):
    turn-left
if -- name= = ' __ main __
    main ()
",81,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
    # Move to the beeper.
    move_ beeper ()
    # Pick the beeper up.
    pick-beeper ()
    # Return to Karel's starting point.
    go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
    for i in range (2):
    move ( )
    turn right ()
    move ()
    turn left ()
    move()
# this function return to Karel's starting poin
def 90-back () ;
    for i in range (2):
    turn-left ()
    for i in range (3).
    move()
    turn_right ()
    move ()
    turn - right ( )
def turn-right ( )?
    for i in range (3):
    turn-left
if -- name= = ' __ main __
    main ()
",81,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
    # Move to the beeper.
    move_ beeper ()
    # Pick the beeper up.
    pick-beeper ()
    # Return to Karel's starting point.
    go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
    for i in range (2):
    move ( )
    turn right ()
    move ()
    turn left ()
    move()
# this function return to Karel's starting poin
def 90-back () ;
    for i in range (2):
    turn-left ()
    for i in range (3).
    move()
    turn_right ()
    move ()
    turn - right ( )
def turn-right ( )?
    for i in range (3):
    turn-left
if -- name= = ' __ main __
    main ()
",81,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",88,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
    # Move to the beeper.
    move_ beeper ()
    # Pick the beeper up.
    pick-beeper ()
    # Return to Karel's starting point.
    go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
    for i in range (2):
    move ( )
    turn right ()
    move ()
    turn left ()
    move()
# this function return to Karel's starting poin
def 90-back () ;
    for i in range (2):
    turn-left ()
    for i in range (3).
    move()
    turn_right ()
    move ()
    turn - right ( )
def turn-right ( )?
    for i in range (3):
    turn-left
if -- name= = ' __ main __
    main ()
",81,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112,"from Karel. stanfordkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick-beeper ()
# Return to Karel's starting point.
go- back ()
# This function moves Karel to the beeper.
def move_beeper ():
for i in range (2):
move ( )
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back () ;
for i in range (2):
turn-left ()
for i in range (3).
move()
turn_right ()
move ()
turn - right ( )
def turn-right ( )?
for i in range (3):
turn-left
if -- name= = ' __ main __
main ()
",168,"from karel.stanfordkarel import *
# This program makes Karel pick up
# a beeper and go back into her house.

def main():
# Move to the beeper.
move_beeper()
# Pick the beeper up.
pick_beeper()
# Return to Karel's starting point.
go_back()
# This function moves Karel to the beeper.

def move_beeper():
for i in range(2):
move()
turn_right()
move()
turn_left()
move()
# this function return to Karel's starting point

def go_back():
for i in range(2):
turn_left()
for i in range(3):
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()
if __name__ == '__main__':
main()
",112
"def main():
    # input
    my_word = input(""Enter the original word: "")
    # function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is"" + "" "" + '""' + reversed_word + '""')
# Helper function

def reverse(word):
    # reversed_word
    new_word = """"
    # char by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word

if __name__ == ""__main__"":
    main()
","def main ( ) :
Limput
my _ word = input( Enten- The original word : 7
#Function calling
reversed- word = reverse (my-word )
Print ( the reversed word is (+) ""+""""+reversed-wordt""}
# Helpen- Function
def sevense
be (word) :
# reversed - word
mew-word = """"
A chen by chan-
For- chan- in word:
new-word = Char + new-word
# return
return new_word
name-
main 1 :
main ()",146,"    def main ( ) :
                Himput
                    my_ word = input( Enter The original word: 7
            #Function calling
                        reversed- word = reverse (my-word )
                        Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
    def severse (word) :
                                        # reversed-word
                                            mew-word = """"
                                    A chent by chan-
                                            For- chan- in word :
                                                    new-word = Char + new-word
                                            # return
                                                return new-word
        if
                            name_
                                                        ==
                                                            main1 :
                                main ()
",602,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed-word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",39,"    def main ( ) :
                Himput
                    my_ word = input( Enter The original word: 7
            #Function calling
                        reversed- word = reverse (my-word )
                        Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
    def severse (word) :
                                        # reversed-word
                                            mew-word = """"
                                    A chent by chan-
                                            For- chan- in word :
                                                    new-word = Char + new-word
                                            # return
                                                return new-word
        if
                            name_
                                                        ==
                                                            main1 :
                                main ()
",602,"def main ( ) :
                my_word = input(""Enter The original word: "")
            #Function calling
                        reversed_word = reverse(my_word)
                        print(""The reversed word is: "" + reversed_word)
# Helper Function

    def reverse(word) :
                                        # reversed-word
                                            new_word = """"
                                    # char by char
                                            for char in word :
                                                    new_word = char + new_word
                                            # return
                                                return new_word

        if __name__ == ""__main__"":
                                main()
",397,"    def main ( ) :
                Himput
                    my_ word = input( Enter The original word: 7
            #Function calling
                        reversed- word = reverse (my-word )
                        Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
    def severse (word) :
                                        # reversed-word
                                            mew-word = """"
                                    A chent by chan-
                                            For- chan- in word :
                                                    new-word = Char + new-word
                                            # return
                                                return new-word
        if
                            name_
                                                        ==
                                                            main1 :
                                main ()
",602,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed-word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",39,"    def main ( ) :
                Himput
                    my_ word = input( Enter The original word: 7
            #Function calling
                        reversed- word = reverse (my-word )
                        Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
    def severse (word) :
                                    # reversed-word
                                        mew-word = """"
                                A chent by chan-
                                        For- chan- in word :
                                            new-word = Char + new-word
                                        # return
                                        return new-word
        if
                            name_
                                                ==
                                                    main1 :
                            main ()
",546,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed-word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",39,"    def main ( ) :
                Himput
                    my_ word = input( Enter The original word: 7
            #Function calling
                        reversed- word = reverse (my-word )
                        Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
    def severse (word) :
                                    # reversed-word
                                        mew-word = """"
                                A chent by chan-
                                        For- chan- in word :
                                            new-word = Char + new-word
                                        # return
                                        return new-word
        if
                            name_
                                                ==
                                                    main1 :
                            main ()
",546,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed-word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",39,"    def main ( ) :
                Himput
                my_ word = input( Enter The original word: 7
            #Function calling
                    reversed- word = reverse (my-word )
                    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
    def severse (word) :
                            # reversed-word
                                mew-word = """"
                        A chent by chan-
                                For- chan- in word :
                                    new-word = Char + new-word
                                # return
                                return new-word
        if
                    name_
                                        ==
                                            main1 :
                    main ()
",446,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main()
",29,"    def main ( ) :
                Himput
                my_ word = input( Enter The original word: 7
            #Function calling
                    reversed- word = reverse (my-word )
                    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
    def severse (word) :
                        # reversed-word
                            mew-word = """"
                        A chent by chan-
                            For- chan- in word :
                                new-word = Char + new-word
                            # return
                            return new-word
        if
                    name_
                                    ==
                                        main1 :
                    main ()
",414,"def main ( ) :
                # Input
                my_word = input(""Enter The original word: "")
            # Function calling
                    reversed_word = reverse(my_word)
                    print(""The reversed word is: "" + reversed_word)
# Helper Function

    def reverse(word) :
                        # reversed word
                            new_word = """"
                        # char by char
                            for char in word :
                                new_word = char + new_word
                            # return
                            return new_word

        if __name__ == ""__main__"":
                    main()
",279,"    def main ( ) :
            Himput
            my_ word = input( Enter The original word: 7
        #Function calling
                reversed- word = reverse (my-word )
                Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
    def severse (word) :
                    # reversed-word
                        mew-word = """"
                    A chent by chan-
                        For- chan- in word :
                            new-word = Char + new-word
                        # return
                        return new-word
    if
                name_
                                ==
                                    main1 :
                main ()
",346,"def main ( ) :
        # Input
        my_word = input(""Enter The original word: "")
    # Function calling
        reversed_word = reverse(my_word)
        print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
        # reversed word
            new_word = """"
        # char by char
            for char in word :
                new_word = char + new_word
            # return
            return new_word
if __name__ == ""__main__"" :
    main ()
",94,"    def main ( ) :
        Himput
        my_ word = input( Enter The original word: 7
        #Function calling
            reversed- word = reverse (my-word )
            Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
    def severse (word) :
                # reversed-word
                    mew-word = """"
                A chent by chan-
                    For- chan- in word :
                        new-word = Char + new-word
                    # return
                    return new-word
    if
            name_
                            ==
                                main1 :
            main ()
",286,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed-word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",30,"    def main ( ) :
        Himput
            my_ word = input( Enter The original word: 7
        #Function calling
                reversed- word = reverse (my-word )
                Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
    def severse (word) :
                    # reversed-word
                        mew-word = """"
                    A chent by chan-
                        For- chan- in word :
                            new-word = Char + new-word
                        # return
                        return new-word
    if
                name_
                                ==
                                    main1 :
                main ()
",342,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed-word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main()
",38,"    def main ( ) :
        Himput
        my_ word = input( Enter The original word: 7
        #Function calling
            reversed- word = reverse (my-word )
            Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
    def severse (word) :
                # reversed-word
                    mew-word = """"
                A chent by chan-
                    For- chan- in word :
                        new-word = Char + new-word
                    # return
                    return new-word
    if
            name_
                            ==
                                main1 :
            main ()
",286,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed-word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",39,"    def main ( ) :
        Himput
        my_ word = input( Enter The original word: 7
        #Function calling
            reversed- word = reverse (my-word )
        Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
    def severse (word) :
                # reversed-word
                    mew-word = """"
                A chent by chan-
                    For- chan- in word :
                        new-word = Char + new-word
                    # return
                    return new-word
    if
            name_
                            ==
                                main1 :
            main ()
",282,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed-word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",30,"    def main ( ) :
        Himput
        my_ word = input( Enter The original word: 7
        #Function calling
            reversed- word = reverse (my-word )
            Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
    def severse (word) :
            # reversed-word
                mew-word = """"
            A chent by chan-
                For- chan- in word :
                    new-word = Char + new-word
                # return
                return new-word
    if
            name_
                        ==
                            main1 :
            main ()
",250,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse (my_word )
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",34,"    def main ( ) :
        Himput
        my_ word = input( Enter The original word: 7
        #Function calling
            reversed- word = reverse (my-word )
            Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
    def severse (word) :
            # reversed-word
                mew-word = """"
            A chent by chan-
                For- chan- in word :
                    new-word = Char + new-word
                # return
                return new-word
    if
            name_
                        ==
                            main1 :
            main ()
",250,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse (my_word )
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",34,"    def main ( ) :
        Himput
        my_ word = input( Enter The original word: 7
        #Function calling
            reversed- word = reverse (my-word )
            Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
    def severse (word) :
            # reversed-word
                mew-word = """"
            A chent by chan-
                For- chan- in word :
                    new-word = Char + new-word
                # return
                return new-word
    if
            name_
                        ==
                            main1 :
            main ()
",250,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse (my_word )
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",34,"    def main ( ) :
        Himput
        my_ word = input( Enter The original word: 7
        #Function calling
            reversed- word = reverse (my-word )
            Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
    def severse (word) :
            # reversed-word
                mew-word = """"
            A chent by chan-
                For- chan- in word :
                    new-word = Char + new-word
                # return
                return new-word
    if
            name_
                        ==
                            main1 :
            main ()
",250,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse (my_word )
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",34,"    def main ( ) :
        Himput
        my_ word = input( Enter The original word: 7
        #Function calling
        reversed- word = reverse (my-word )
        Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
    def severse (word) :
        # reversed-word
            mew-word = """"
        A chent by chan-
            For- chan- in word :
                new-word = Char + new-word
            # return
            return new-word
    if
        name_
                    ==
                        main1 :
        main ()
",198,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse (my_word )
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",33,"    def main ( ) :
        Himput
        my_ word = input( Enter The original word: 7
        #Function calling
        reversed- word = reverse (my-word )
        Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
    def severse (word) :
        # reversed-word
            mew-word = """"
        A chent by chan-
            For- chan- in word :
                new-word = Char + new-word
            # return
            return new-word
    if
        name_
                    ==
                        main1 :
        main ()
",198,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse (my_word )
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",33,"    def main ( ) :
        Himput
        my_ word = input( Enter The original word: 7
        #Function calling
        reversed- word = reverse (my-word )
        Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
    def severse (word) :
        # reversed-word
            mew-word = """"
        A chent by chan-
            For- chan- in word :
                new-word = Char + new-word
            # return
            return new-word
    if
        name_
                    ==
                        main1 :
        main ()
",198,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse (my_word )
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",34,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
        mew-word = """"
    A chent by chan-
        For- chan- in word :
            new-word = Char + new-word
        # return
        return new-word
if
    name_
                ==
                    main1 :
    main ()
",127,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",30,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
        mew-word = """"
    A chent by chan-
        For- chan- in word :
            new-word = Char + new-word
        # return
        return new-word
if
    name_
                ==
                    main1 :
    main ()
",127,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse (my_word )
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",34,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
        mew-word = """"
    A chent by chan-
        For- chan- in word :
            new-word = Char + new-word
        # return
        return new-word
if
    name_
                ==
                    main1 :
    main ()
",127,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse (my_word )
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",34,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
        mew-word = """"
    A chent by chan-
        For- chan- in word :
            new-word = Char + new-word
        # return
        return new-word
if
    name_
                ==
                    main1 :
    main ()
",127,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",30,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
        mew-word = """"
    A chent by chan-
        For- chan- in word :
            new-word = Char + new-word
        # return
        return new-word
if
    name_
                ==
                    main1 :
    main ()
",127,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse (my_word )
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",34,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
        mew-word = """"
    A chent by chan-
        For- chan- in word :
            new-word = Char + new-word
        # return
        return new-word
if
    name_
                ==
                    main1 :
    main ()
",127,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",30,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
        mew-word = """"
    A chent by chan-
        For- chan- in word :
            new-word = Char + new-word
        # return
        return new-word
if
    name_
                ==
                    main1 :
    main ()
",127,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",30,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
        # reversed-word
        mew-word = """"
    A chent by chan-
        For- chan- in word :
            new-word = Char + new-word
        # return
        return new-word
if
    name_
                ==
                    main1 :
    main ()
",131,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",43,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
        # reversed-word
        mew-word = """"
    A chent by chan-
        For- chan- in word :
            new-word = Char + new-word
        # return
        return new-word
if
    name_
                ==
                    main1 :
    main ()
",131,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
        # reversed word
        new_word = """"
    # char by char
        for char in word :
            new_word = char + new_word
        # return
        return new_word
if __name__ == ""__main__"" :
    main ()
",67,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
        # reversed-word
        mew-word = """"
    A chent by chan-
        For- chan- in word :
            new-word = Char + new-word
        # return
        return new-word
if
    name_
                ==
                    main1 :
    main ()
",131,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
        # reversed word
        new_word = """"
    # char by char
        for char in word :
            new_word = char + new_word
        # return
        return new_word
if __name__ == ""__main__"" :
    main ()
",67,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
        # reversed-word
        mew-word = """"
    A chent by chan-
        For- chan- in word :
            new-word = Char + new-word
        # return
        return new-word
if
    name_
                ==
                    main1 :
    main ()
",131,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",43,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
            ==
                main1 :
    main ()
",99,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",30,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
            ==
                main1 :
    main ()
",99,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",30,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
            ==
                main1 :
    main ()
",99,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",30,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
            ==
                main1 :
    main ()
",99,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",30,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
            ==
                main1 :
    main ()
",99,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",30,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
            ==
                main1 :
    main ()
",99,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",30,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
            ==
                main1 :
    main ()
",99,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",30,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
            ==
                main1 :
    main ()
",99,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",30,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
            ==
                main1 :
    main ()
",99,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed-word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",30,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
            ==
                main1 :
    main ()
",99,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed-word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",30,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
            ==
                main1 :
    main ()
",99,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",43,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
            ==
                main1 :
    main ()
",99,"def main ( ) :
    # Input
    my_word = input( ""Enter The original word: "" )
    # Function calling
    reversed_word = reverse (my_word )
    print ( ""The reversed word is: "" + reversed_word )
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",36,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
            ==
                main1 :
    main ()
",99,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",30,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
            ==
                main1 :
    main ()
",99,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",43,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
            ==
                main1 :
    main ()
",99,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse (my_word )
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",34,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
            ==
                main1 :
    main ()
",99,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",30,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
            ==
                main1 :
    main ()
",99,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",30,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
            ==
                main1 :
    main ()
",99,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse (my_word )
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed-word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",34,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
            ==
                main1 :
    main ()
",99,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse (my_word )
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",34,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
            ==
                main1 :
    main ()
",99,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",30,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
        ==
            main1 :
    main ()
",91,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed-word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",30,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
        ==
            main1 :
    main ()
",91,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed-word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",30,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
        ==
            main1 :
    main ()
",91,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse (my_word )
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",34,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
        ==
            main1 :
    main ()
",91,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed-word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",43,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
        ==
            main1 :
    main ()
",91,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main()
",29,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
        ==
            main1 :
    main ()
",91,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main()
",29,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
        ==
            main1 :
    main ()
",91,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse (my_word )
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",34,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
        ==
            main1 :
    main ()
",91,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",30,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
        ==
            main1 :
    main ()
",91,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse (my_word )
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",34,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
        ==
            main1 :
    main ()
",91,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",30,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
        ==
            main1 :
    main ()
",91,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse (my_word )
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",34,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
        ==
            main1 :
    main ()
",91,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed-word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",30,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
        ==
            main1 :
    main ()
",91,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",30,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
        ==
            main1 :
    main ()
",91,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",30,"def main ( ) :
    Himput
    my_ word = input( Enter The original word: 7
    #Function calling
    reversed- word = reverse (my-word )
    Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
    # reversed-word
    mew-word = """"
    A chent by chan-
    For- chan- in word :
        new-word = Char + new-word
    # return
    return new-word
if
    name_
        ==
            main1 :
    main ()
",91,"def main ( ) :
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
# Helper Function

def reverse(word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",30,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
        main1 :
main ()
",133,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",43,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
        main1 :
main ()
",133,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print ( ""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",44,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
        main1 :
main ()
",133,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",43,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
        main1 :
main ()
",133,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",43,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
        main1 :
main ()
",133,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print ( ""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",44,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
        main1 :
main ()
",133,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",43,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
        main1 :
main ()
",133,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print ( ""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",44,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
        main1 :
main ()
",133,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",43,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
        main1 :
main ()
",133,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",43,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
        main1 :
main ()
",133,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print ( ""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",44,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
    main1 :
main ()
",129,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",43,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
    main1 :
main ()
",129,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print ( ""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",44,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
    main1 :
main ()
",129,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print ( ""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",44,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
    main1 :
main ()
",129,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print ( ""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",44,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
    main1 :
main ()
",129,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print ( ""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",44,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
    main1 :
main ()
",129,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print ( ""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",44,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
    main1 :
main ()
",129,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print ( ""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",44,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
    main1 :
main ()
",129,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print ( ""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",44,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
    main1 :
main ()
",129,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",43,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
    main1 :
main ()
",129,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",43,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
    main1 :
main ()
",129,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",43,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
    main1 :
main ()
",129,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print ( ""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",44,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
    main1 :
main ()
",129,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word)
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",42,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
    main1 :
main ()
",129,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print ( ""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",44,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
    main1 :
main ()
",129,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",43,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
    main1 :
main ()
",129,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print ( ""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",44,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
    main1 :
main ()
",129,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word)
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",42,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
    main1 :
main ()
",129,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print ( ""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",44,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
    main1 :
main ()
",129,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print ( ""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",44,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
    main1 :
main ()
",129,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word)
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",42,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
    main1 :
main ()
",129,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",43,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
    main1 :
main ()
",129,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",43,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
    main1 :
main ()
",129,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word)
    print (""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",42,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
    main1 :
main ()
",129,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print ( ""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",44,"def main ( ) :
Himput
my_ word = input( Enter The original word: 7
#Function calling
reversed- word = reverse (my-word )
Print ( The reversed word is (+) "" +""""+reversed-wordt""
# Helpen- Function
def severse (word) :
# reversed-word
mew-word = """"
A chent by chan-
For- chan- in word :
    new-word = Char + new-word
# return
return new-word
if
name_
    ==
    main1 :
main ()
",129,"def main ( ) :
    my_word = input(""Enter The original word: "")
    #Function calling
    reversed_word = reverse (my_word )
    print ( ""The reversed word is: "" + reversed_word)
# Helper Function

def reverse (word) :
    # reversed word
    new_word = """"
    # char by char
    for char in word :
        new_word = char + new_word
    # return
    return new_word
if __name__ == ""__main__"" :
    main ()
",44
"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial for "" + str(input_nmb) + "" is "" + str(result))
","inpur_number =
int(impur (""Enter number""
Val = inpur-number
result = input-number
While (val>1):
val =
val -1
result = result & val
print ('factorial f& + sur(input-node)
+ spr (result))",50,"    inpur-number =
                                int(impur (Enter number)
                Val = inpur-number
result = input-number
            While (val>1):
                            val =
                                        Val -1
                    L
                        Result = result & val
        print ('factorial f& +shr(input-nale]
                                    + spr (result))
",245,"input_number = int(input(""Enter number""))
    val = input_number
result = input_number
            while (val > 1):
                            val = val - 1
                    result = result * val
        print('factorial of ' + str(input_number) + ' is ' + str(result))
",75,"    inpur-number =
                                int(impur (Enter number)
                Val = inpur-number
result = input-number
            While (val>1):
                            val =
                                        Val -1
                    L
                        Result = result & val
        print ('factorial f& +shr(input-nale]
                                    + spr (result))
",245,"input_number = int(input(""Enter number""))
    val = input_number
result = input_number
            while (val > 1):
                            val = val - 1
                    result = result * val
        print('factorial of ' + str(input_number) + ' is ' + str(result))
",75,"    inpur-number =
                        int(impur (Enter number)
            Val = inpur-number
result = input-number
        While (val>1):
                        val =
                                Val -1
                L
                    Result = result & val
    print ('factorial f& +shr(input-nale]
                            + spr (result))
",197,"input_number = int(input(""Enter number""))
    val = input_number
result = input_number
        while (val > 1):
                        val = val - 1
                result = result * val
    print ('factorial of ' + str(input_number) + ' is ' + str(result))
",60,"    inpur-number =
                        int(impur (Enter number)
            Val = inpur-number
result = input-number
        While (val>1):
                        val =
                                Val -1
                L
                    Result = result & val
    print ('factorial f& +shr(input-nale]
                            + spr (result))
",197,"input_number = int(input(""Enter number""))
    val = input_number
result = input_number
        while (val > 1):
                        val = val - 1
                result = result * val
    print ('factorial of ' + str(input_number) + ' is ' + str(result))
",60,"    inpur-number =
                        int(impur (Enter number)
            Val = inpur-number
result = input-number
        While (val>1):
                        val =
                                Val -1
                L
                    Result = result & val
    print ('factorial f& +shr(input-nale]
                            + spr (result))
",197,"input_number = int(input(""Enter number""))
    val = input_number
result = input_number
        while (val > 1):
                        val = val - 1
                result = result * val
    print ('factorial of ' + str(input_number) + ' is ' + str(result))
",60,"    inpur-number =
                        int(impur (Enter number)
            Val = inpur-number
result = input-number
        While (val>1):
                        val =
                                Val -1
                L
                    Result = result & val
    print ('factorial f& +shr(input-nale]
                            + spr (result))
",197,"input_number = int(input(""Enter number""))
    val = input_number
result = input_number
        while (val > 1):
                        val = val - 1
                result = result * val
    print ('factorial of ' + str(input_number) + ' is ' + str(result))
",60,"    inpur-number =
                        int(impur (Enter number)
            Val = inpur-number
result = input-number
        While (val>1):
                        val =
                                Val -1
                L
                    Result = result & val
    print ('factorial f& +shr(input-nale]
                            + spr (result))
",197,"input_number = int(input(""Enter number""))
    val = input_number
result = input_number
        while (val > 1):
                        val = val - 1
                result = result * val
    print('factorial of ' + str(input_number) + ' is ' + str(result))
",59,"inpur-number =
                    int(impur (Enter number)
        Val = inpur-number
result = input-number
    While (val>1):
                    val =
                            Val -1
            L
                Result = result & val
print ('factorial f& +shr(input-nale]
                        + spr (result))
",157,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
    while (val > 1):
        val = val - 1
            result = result * val
print('factorial of ' + str(input_number) + ' is ' + str(result))
",27,"inpur-number =
                    int(impur (Enter number)
        Val = inpur-number
result = input-number
    While (val>1):
                    val =
                            Val -1
            L
                Result = result & val
print ('factorial f& +shr(input-nale]
                        + spr (result))
",157,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
    while (val > 1):
        val = val - 1
            result = result * val
print('factorial of ' + str(input_number) + ' is ' + str(result))
",27,"inpur-number =
                    int(impur (Enter number)
        Val = inpur-number
result = input-number
    While (val>1):
                    val =
                            Val -1
            L
                Result = result & val
print ('factorial f& +shr(input-nale]
                        + spr (result))
",157,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
    while (val > 1):
        val = val - 1
            result = result * val
print('factorial of ' + str(input_number) + ' is ' + str(result))
",27,"inpur-number =
                    int(impur (Enter number)
        Val = inpur-number
result = input-number
    While (val>1):
                    val =
                            Val -1
            L
                Result = result & val
print ('factorial f& +shr(input-nale]
                        + spr (result))
",157,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
    while (val > 1):
        val = val - 1
            result = result * val
print('factorial of ' + str(input_number) + ' is ' + str(result))
",27,"inpur-number =
                int(impur (Enter number)
    Val = inpur-number
result = input-number
    While (val>1):
                val =
                        Val -1
        L
            Result = result & val
print ('factorial f& +shr(input-nale]
                    + spr (result))
",129,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
    while (val > 1):
        val = val - 1
            result = result * val
print('factorial of ' + str(input_number) + ' is ' + str(result))
",27,"inpur-number =
                int(impur (Enter number)
    Val = inpur-number
result = input-number
    While (val>1):
                val =
                        Val -1
        L
            Result = result & val
print ('factorial f& +shr(input-nale]
                    + spr (result))
",129,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
    while (val > 1):
                val = val - 1
        result = result * val
print('factorial of ' + str(input_number) + ' is ' + str(result))
",31,"inpur-number =
                int(impur (Enter number)
    Val = inpur-number
result = input-number
    While (val>1):
                val =
                        Val -1
        L
            Result = result & val
print ('factorial f& +shr(input-nale]
                    + spr (result))
",129,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
    while (val > 1):
                val = val - 1
        result = result * val
print('factorial of ' + str(input_number) + ' is ' + str(result))
",31,"inpur-number =
                int(impur (Enter number)
    Val = inpur-number
result = input-number
    While (val>1):
                val =
                        Val -1
        L
            Result = result & val
print ('factorial f& +shr(input-nale]
                    + spr (result))
",129,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
    while (val > 1):
                val = val - 1
        result = result * val
print('factorial of ' + str(input_number) + ' is ' + str(result))
",31,"inpur-number =
                int(impur (Enter number)
    Val = inpur-number
result = input-number
    While (val>1):
                val =
                        Val -1
        L
            Result = result & val
print ('factorial f& +shr(input-nale]
                    + spr (result))
",129,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
    while (val > 1):
        val = val - 1
    result = result * val
print('factorial of ' + str(input_number) + ' is ' + str(result))
",19,"inpur-number =
            int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
            val =
                    Val -1
    L
        Result = result & val
print ('factorial f& +shr(input-nale]
                + spr (result))
",97,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
            val = val - 1
    result = result * val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",20,"inpur-number =
        int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
        val =
                Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
            + spr (result))
",77,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
        val = val - 1
    result = result * val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",16,"inpur-number =
        int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
        val =
                Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
            + spr (result))
",77,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
        val = val - 1
    result = result * val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",16,"inpur-number =
        int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
        val =
                Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
            + spr (result))
",77,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
        val = val - 1
    result = result * val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",16,"inpur-number =
        int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
        val =
                Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
            + spr (result))
",77,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
        val = val - 1
    result = result * val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",16,"inpur-number =
        int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
        val =
                Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
            + spr (result))
",77,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
        val = val - 1
    result = result * val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",16,"inpur-number =
        int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
        val =
                Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
            + spr (result))
",77,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print('factorial of ' + str(input_number) + ' is ' + str(result))
",12,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print('factorial of ' + str(input_number) + ' is ' + str(result))
",12,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print('factorial of ' + str(input_number) + ' is ' + str(result))
",11,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
    int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
    val =
            Val -1
    L
    Result = result & val
print ('factorial f& +shr(input-nale]
        + spr (result))
",62,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",13,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
        Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",55,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print('factorial of ' + str(input_number) + ' is ' + str(result))
",11,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
        Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",55,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print('factorial of ' + str(input_number) + ' is ' + str(result))
",11,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
        Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",55,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print('factorial of ' + str(input_number) + ' is ' + str(result))
",11,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
        Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",55,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print('factorial of ' + str(input_number) + ' is ' + str(result))
",12,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
        Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",55,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print('factorial of ' + str(input_number) + ' is ' + str(result))
",11,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
        Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",55,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print('factorial of ' + str(input_number) + ' is ' + str(result))
",11,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
        Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",55,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print('factorial of ' + str(input_number) + ' is ' + str(result))
",11,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
        Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",55,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print('factorial of ' + str(input_number) + ' is ' + str(result))
",11,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
        Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",55,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print('factorial of ' + str(input_number) + ' is ' + str(result))
",11,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
        Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",55,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",12,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
        Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",55,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print('factorial of ' + str(input_number) + ' is ' + str(result))
",11,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
        Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",55,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result & val
print('factorial of ' + str(input_number) + ' is ' + str(result))
",12,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
        Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",55,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print('factorial of ' + str(input_number) + ' is ' + str(result))
",11,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
    Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",53,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",12,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
    Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",53,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",12,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
    Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",53,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",12,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
    Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",53,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",12,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
    Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",53,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",12,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
    Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",53,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",12,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
    Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",53,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",12,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
    Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",53,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",12,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
    Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",53,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",12,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
    Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",53,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",12,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
    Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",53,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",12,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
    Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",53,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",12,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
    Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",53,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",12,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
    Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",53,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",12,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
    Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",53,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",12,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
    Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",53,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",12,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
    Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",53,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",12,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
    Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",53,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",12,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
    Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",53,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",12,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
    Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",53,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",12,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
    Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",53,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",12,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
    Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",53,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",12,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
    Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",53,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",12,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
    Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",53,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",12,"inpur-number =
int(impur (Enter number)
Val = inpur-number
result = input-number
While (val>1):
val =
    Val -1
L
Result = result & val
print ('factorial f& +shr(input-nale]
    + spr (result))
",53,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print ('factorial of ' + str(input_number) + ' is ' + str(result))
",12
"def main():
    num = input(""input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
","def main () :
num = input (""Input : "")
sum = 0
for n in num :
sum + = int (n)
print (sum)",34,"def main () :
    num = input ("" Input : "" )
        sum = 0
            for h in num :
                    sum + = int (n)
                print ( sum )
",50,"def main():
    num = input(""Input: "")
        sum = 0
            for h in num:
                    sum += int(n)
                print(sum)
",38,"def main () :
    num = input ("" Input : "" )
        sum = 0
            for h in num :
                    sum + = int (n)
                print ( sum )
",50,"def main():
    num = input(""Input: "")
        sum = 0
            for n in num:
                    sum += int(n)
                print(sum)
",37,"def main () :
    num = input ("" Input : "" )
        sum = 0
            for h in num :
                    sum + = int (n)
                print ( sum )
",50,"def main():
    num = input(""Input: "")
        sum = 0
            for n in num:
                    sum += int(n)
                print(sum)
",37,"def main () :
    num = input ("" Input : "" )
        sum = 0
            for h in num :
                    sum + = int (n)
                print ( sum )
",50,"def main():
    num = input(""Input: "")
        sum = 0
            for h in num:
                    sum += int(n)
                print(sum)
",38,"def main () :
    num = input ("" Input : "" )
        sum = 0
        for h in num :
                sum + = int (n)
            print ( sum )
",38,"def main():
    num = input(""Input: "")
    sum = 0
    for h in num:
        sum += int(n)
    print(sum)
",2,"def main () :
    num = input ("" Input : "" )
        sum = 0
        for h in num :
                sum + = int (n)
            print ( sum )
",38,"def main():
    num = input(""Input: "")
    sum = 0
    for h in num:
        sum += int(n)
    print(sum)
",2,"def main () :
    num = input ("" Input : "" )
        sum = 0
        for h in num :
            sum + = int (n)
        print ( sum )
",30,"def main():
    num = input(""Input: "")
        sum = 0
        for n in num:
            sum += int(n)
        print(sum)
",17,"def main () :
    num = input ("" Input : "" )
        sum = 0
        for h in num :
            sum + = int (n)
        print ( sum )
",30,"def main():
    num = input(""Input: "")
    sum = 0
    for h in num:
        sum += int(n)
    print(sum)
",2,"def main () :
    num = input ("" Input : "" )
        sum = 0
        for h in num :
            sum + = int (n)
        print ( sum )
",30,"def main():
    num = input(""Input: "")
        sum = 0
        for n in num:
            sum += int(n)
        print(sum)
",17,"def main () :
    num = input ("" Input : "" )
        sum = 0
        for h in num :
            sum + = int (n)
        print ( sum )
",30,"def main():
    num = input(""Input: "")
    sum = 0
    for h in num:
        sum += int(n)
    print(sum)
",2,"def main () :
    num = input ("" Input : "" )
        sum = 0
        for h in num :
            sum + = int (n)
        print ( sum )
",30,"def main():
    num = input(""Input: "")
        sum = 0
        for h in num:
            sum += int(n)
        print(sum)
",18,"def main () :
    num = input ("" Input : "" )
        sum = 0
        for h in num :
            sum + = int (n)
        print ( sum )
",30,"def main():
    num = input(""Input: "")
    sum = 0
    for h in num:
        sum += int(n)
    print(sum)
",2,"def main () :
    num = input ("" Input : "" )
        sum = 0
        for h in num :
            sum + = int (n)
        print ( sum )
",30,"def main():
    num = input(""Input: "")
        sum = 0
        for h in num:
            sum += int(n)
        print(sum)
",18,"def main () :
    num = input ("" Input : "" )
        sum = 0
        for h in num :
            sum + = int (n)
        print ( sum )
",30,"def main():
    num = input(""Input: "")
        sum = 0
        for h in num:
            sum += int(n)
        print(sum)
",18,"def main () :
    num = input ("" Input : "" )
        sum = 0
        for h in num :
            sum + = int (n)
        print ( sum )
",30,"def main():
    num = input(""Input: "")
    sum = 0
    for h in num:
        sum += int(n)
    print(sum)
",2,"def main () :
    num = input ("" Input : "" )
        sum = 0
        for h in num :
            sum + = int (n)
        print ( sum )
",30,"def main():
    num = input(""Input: "")
        sum = 0
        for h in num:
            sum += int(n)
        print(sum)
",18,"def main () :
    num = input ("" Input : "" )
        sum = 0
        for h in num :
            sum + = int (n)
        print ( sum )
",30,"def main():
    num = input(""Input: "")
    sum = 0
    for h in num:
        sum += int(n)
    print(sum)
",2,"def main () :
    num = input ("" Input : "" )
        sum = 0
        for h in num :
            sum + = int (n)
        print ( sum )
",30,"def main():
    num = input(""Input: "")
        sum = 0
        for n in num:
            sum += int(n)
        print(sum)
",17,"def main () :
    num = input ("" Input : "" )
        sum = 0
        for h in num :
            sum + = int (n)
        print ( sum )
",30,"def main():
    num = input(""Input: "")
        sum = 0
        for n in num:
            sum += int(n)
        print(sum)
",17,"def main () :
    num = input ("" Input : "" )
        sum = 0
        for h in num :
            sum + = int (n)
        print ( sum )
",30,"def main():
    num = input(""Input: "")
        sum = 0
        for h in num:
            sum += int(n)
        print(sum)
",18,"def main () :
    num = input ("" Input : "" )
        sum = 0
        for h in num :
            sum + = int (n)
        print ( sum )
",30,"def main():
    num = input(""Input: "")
        sum = 0
        for h in num:
            sum += int(n)
        print(sum)
",18,"def main () :
    num = input ("" Input : "" )
        sum = 0
        for h in num :
            sum + = int (n)
        print ( sum )
",30,"def main():
    num = input(""Input: "")
        sum = 0
        for h in num:
            sum += int(n)
        print(sum)
",18,"def main () :
    num = input ("" Input : "" )
        sum = 0
        for h in num :
            sum + = int (n)
        print ( sum )
",30,"def main():
    num = input(""Input: "")
    sum = 0
    for h in num:
        sum += int(n)
    print(sum)
",2,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum += int (n)
    print ( sum )
",13,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum += int (n)
    print ( sum )
",13,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum += int (n)
    print ( sum )
",13,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,,106,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main():
    num = input(""Input: "")
    sum = 0
    for h in num:
        sum += int(n)
    print(sum)
",2,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum += int (n)
    print ( sum )
",13,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for h in num :
        sum + = int (n)
    print ( sum )
",14,"def main () :
    num = input ("" Input : "" )
    sum = 0
    for n in num :
        sum += int (n)
    print ( sum )
",12
"def main():
    num = input(""enter the number you want to add"")
    sum = 0
    for i in str(num):
        sum = sum + int(i)
    print(""sum of the value you entered is"", sum)
","def main () .
08168 TU
11
num = input (""enter the number you want to add )
Som=0
zpnivo
1ovoseidl o prieoorla
hotel
heH
ab
ot ti of no blerl gabelq
for è in str (num) :
Vi inucoDA
Sum = Sum+ int (i)
raltil touo >A
Print (""sum of the value you entered in, som)
00.000
.1
noitosil
noitgo Inemoanu
LFT",154,"        def main ( ) .
                                                            81108 x68.09
                                                                -
                    num = input (""enter the number you want to add )
            Som=0
    apnivoa
talioteb adt ero preHab10591 100Y
                            rot ti of no blerl sabelq
                    for è in str (num):
                                                        tatoO auze
                                                hedmull inuopDA
                        Sum = Sum+ int (i)
                                                    eltil tnuossA
                Print (""sum of the value you entered in, som)
                                    00.000,83
                                        BM
                                nioit
                                            hoitqO Inemoandaid 12516Mil
",728,"def main ( ) :
    num = input (""enter the number you want to add )
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",15,"        def main ( ) .
                                                            81108 x68.09
                                                                -
                    num = input (""enter the number you want to add )
            Som=0
    apnivoa
talioteb adt ero preHab10591 100Y
                            rot ti of no blerl sabelq
                    for è in str (num):
                                                        tatoO auze
                                                hedmull inuopDA
                        Sum = Sum+ int (i)
                                                    eltil tnuossA
                Print (""sum of the value you entered in, som)
                                    00.000,83
                                        BM
                                nioit
                                            hoitqO Inemoandaid 12516Mil
",728,"def main ( ) :
    num = input (""enter the number you want to add )
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",15,"        def main ( ) .
                                                            81108 x68.09
                                                                -
                    num = input (""enter the number you want to add )
            Som=0
    apnivoa
talioteb adt ero preHab10591 100Y
                            rot ti of no blerl sabelq
                    for è in str (num):
                                                        tatoO auze
                                                hedmull inuopDA
                        Sum = Sum+ int (i)
                                                    eltil tnuossA
                Print (""sum of the value you entered in, som)
                                    00.000,83
                                        BM
                                nioit
                                            hoitqO Inemoandaid 12516Mil
",728,"def main ( ) :
    num = input (""enter the number you want to add: "")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is: "", Sum)
",18,"        def main ( ) .
                                                            81108 x68.09
                                                                -
                    num = input (""enter the number you want to add )
            Som=0
    apnivoa
talioteb adt ero preHab10591 100Y
                            rot ti of no blerl sabelq
                    for è in str (num):
                                                        tatoO auze
                                                hedmull inuopDA
                        Sum = Sum+ int (i)
                                                    eltil tnuossA
                Print (""sum of the value you entered in, som)
                                    00.000,83
                                        BM
                                nioit
                                            hoitqO Inemoandaid 12516Mil
",728,"def main ( ) :
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",14,"        def main ( ) .
                                                            81108 x68.09
                                                                -
                    num = input (""enter the number you want to add )
            Som=0
    apnivoa
talioteb adt ero preHab10591 100Y
                            rot ti of no blerl sabelq
                    for è in str (num):
                                                        tatoO auze
                                                hedmull inuopDA
                        Sum = Sum+ int (i)
                                                    eltil tnuossA
                Print (""sum of the value you entered in, som)
                                    00.000,83
                                        BM
                                nioit
                                            hoitqO Inemoandaid 12516Mil
",728,"def main ( ) :
    num = input (""enter the number you want to add: "")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is: "", Sum)
",18,"        def main ( ) .
                                                            81108 x68.09
                                                                -
                    num = input (""enter the number you want to add )
            Som=0
    apnivoa
talioteb adt ero preHab10591 100Y
                            rot ti of no blerl sabelq
                    for è in str (num):
                                                        tatoO auze
                                                hedmull inuopDA
                        Sum = Sum+ int (i)
                                                    eltil tnuossA
                Print (""sum of the value you entered in, som)
                                    00.000,83
                                        BM
                                nioit
                                            hoitqO Inemoandaid 12516Mil
",728,"def main ( ) :
    num = input (""enter the number you want to add )
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",15,"        def main ( ) .
                                                            81108 x68.09
                                                                -
                    num = input (""enter the number you want to add )
            Som=0
    apnivoa
talioteb adt ero preHab10591 100Y
                            rot ti of no blerl sabelq
                    for è in str (num):
                                                        tatoO auze
                                                hedmull inuopDA
                        Sum = Sum+ int (i)
                                                    eltil tnuossA
                Print (""sum of the value you entered in, som)
                                    00.000,83
                                        BM
                                nioit
                                            hoitqO Inemoandaid 12516Mil
",728,"def main ( ) :
    num = input (""enter the number you want to add: "")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is: "", Sum)
",18,"        def main ( ) .
                                                        81108 x68.09
                                                            -
                num = input (""enter the number you want to add )
            Som=0
    apnivoa
talioteb adt ero preHab10591 100Y
                        rot ti of no blerl sabelq
                for è in str (num):
                                                    tatoO auze
                                            hedmull inuopDA
                    Sum = Sum+ int (i)
                                                eltil tnuossA
                Print (""sum of the value you entered in, som)
                                00.000,83
                                    BM
                            nioit
                                        hoitqO Inemoandaid 12516Mil
",676,"def main ( ) :
    num = input (""enter the number you want to add )
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",15,"        def main ( ) .
                                                        81108 x68.09
                                                            -
                num = input (""enter the number you want to add )
            Som=0
    apnivoa
talioteb adt ero preHab10591 100Y
                        rot ti of no blerl sabelq
                for è in str (num):
                                                    tatoO auze
                                            hedmull inuopDA
                    Sum = Sum+ int (i)
                                                eltil tnuossA
            Print (""sum of the value you entered in, som)
                                00.000,83
                                    BM
                            nioit
                                        hoitqO Inemoandaid 12516Mil
",672,"def main ( ) :
    num = input (""enter the number you want to add )
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    Print (""sum of the value you entered is"", Sum)
",16,"        def main ( ) .
                                                        81108 x68.09
                                                            -
                num = input (""enter the number you want to add )
            Som=0
    apnivoa
talioteb adt ero preHab10591 100Y
                        rot ti of no blerl sabelq
                for è in str (num):
                                                    tatoO auze
                                            hedmull inuopDA
                    Sum = Sum+ int (i)
                                                eltil tnuossA
            Print (""sum of the value you entered in, som)
                                00.000,83
                                    BM
                            nioit
                                        hoitqO Inemoandaid 12516Mil
",672,"def main ( ) :
    num = input (""enter the number you want to add )
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",15,"    def main ( ) .
                                                81108 x68.09
                                                    -
        num = input (""enter the number you want to add )
        Som=0
apnivoa
talioteb adt ero preHab10591 100Y
                rot ti of no blerl sabelq
        for è in str (num):
                                            tatoO auze
                                    hedmull inuopDA
            Sum = Sum+ int (i)
                                        eltil tnuossA
        Print (""sum of the value you entered in, som)
                        00.000,83
                            BM
                    nioit
                                hoitqO Inemoandaid 12516Mil
",552,"def main ( ) :
    num = input (""enter the number you want to add )
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    Print (""sum of the value you entered is"", Sum)
",16,"    def main ( ) .
                                                81108 x68.09
                                                    -
        num = input (""enter the number you want to add )
        Som=0
apnivoa
talioteb adt ero preHab10591 100Y
                rot ti of no blerl sabelq
        for è in str (num):
                                            tatoO auze
                                    hedmull inuopDA
            Sum = Sum+ int (i)
                                        eltil tnuossA
        Print (""sum of the value you entered in, som)
                        00.000,83
                            BM
                    nioit
                                hoitqO Inemoandaid 12516Mil
",552,"def main ():
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",12,"    def main ( ) .
                                                81108 x68.09
                                                    -
        num = input (""enter the number you want to add )
        Som=0
apnivoa
talioteb adt ero preHab10591 100Y
                rot ti of no blerl sabelq
        for è in str (num):
                                            tatoO auze
                                    hedmull inuopDA
            Sum = Sum+ int (i)
                                        eltil tnuossA
        Print (""sum of the value you entered in, som)
                        00.000,83
                            BM
                    nioit
                                hoitqO Inemoandaid 12516Mil
",552,"def main ():
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",12,"    def main ( ) .
                                                81108 x68.09
                                                    -
        num = input (""enter the number you want to add )
        Som=0
apnivoa
talioteb adt ero preHab10591 100Y
                rot ti of no blerl sabelq
        for è in str (num):
                                            tatoO auze
                                    hedmull inuopDA
            Sum = Sum+ int (i)
                                        eltil tnuossA
        Print (""sum of the value you entered in, som)
                        00.000,83
                            BM
                    nioit
                                hoitqO Inemoandaid 12516Mil
",552,"def main ():
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",12,"    def main ( ) .
                                                81108 x68.09
                                                    -
        num = input (""enter the number you want to add )
        Som=0
apnivoa
talioteb adt ero preHab10591 100Y
                rot ti of no blerl sabelq
        for è in str (num):
                                            tatoO auze
                                    hedmull inuopDA
            Sum = Sum+ int (i)
                                        eltil tnuossA
        Print (""sum of the value you entered in, som)
                        00.000,83
                            BM
                    nioit
                                hoitqO Inemoandaid 12516Mil
",552,"def main ():
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",12,"    def main ( ) .
                                                81108 x68.09
                                                    -
        num = input (""enter the number you want to add )
        Som=0
apnivoa
talioteb adt ero preHab10591 100Y
                rot ti of no blerl sabelq
        for è in str (num):
                                            tatoO auze
                                    hedmull inuopDA
            Sum = Sum+ int (i)
                                        eltil tnuossA
        Print (""sum of the value you entered in, som)
                        00.000,83
                            BM
                    nioit
                                hoitqO Inemoandaid 12516Mil
",552,"def main ():
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",12,"    def main ( ) .
                                                81108 x68.09
                                                    -
        num = input (""enter the number you want to add )
        Som=0
apnivoa
talioteb adt ero preHab10591 100Y
                rot ti of no blerl sabelq
        for è in str (num):
                                            tatoO auze
                                    hedmull inuopDA
            Sum = Sum+ int (i)
                                        eltil tnuossA
        Print (""sum of the value you entered in, som)
                        00.000,83
                            BM
                    nioit
                                hoitqO Inemoandaid 12516Mil
",552,,176,"    def main ( ) .
                                                81108 x68.09
                                                    -
        num = input (""enter the number you want to add )
        Som=0
apnivoa
talioteb adt ero preHab10591 100Y
                rot ti of no blerl sabelq
        for è in str (num):
                                            tatoO auze
                                    hedmull inuopDA
            Sum = Sum+ int (i)
                                        eltil tnuossA
        Print (""sum of the value you entered in, som)
                        00.000,83
                            BM
                    nioit
                                hoitqO Inemoandaid 12516Mil
",552,"def main ():
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",12,"    def main ( ) .
                                                81108 x68.09
                                                    -
        num = input (""enter the number you want to add )
        Som=0
apnivoa
talioteb adt ero preHab10591 100Y
                rot ti of no blerl sabelq
        for è in str (num):
                                            tatoO auze
                                    hedmull inuopDA
            Sum = Sum+ int (i)
                                        eltil tnuossA
        Print (""sum of the value you entered in, som)
                        00.000,83
                            BM
                    nioit
                                hoitqO Inemoandaid 12516Mil
",552,"def main ():
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",12,"    def main ( ) .
                                                81108 x68.09
                                                    -
        num = input (""enter the number you want to add )
        Som=0
apnivoa
talioteb adt ero preHab10591 100Y
                rot ti of no blerl sabelq
        for è in str (num):
                                            tatoO auze
                                    hedmull inuopDA
            Sum = Sum+ int (i)
                                        eltil tnuossA
        Print (""sum of the value you entered in, som)
                        00.000,83
                            BM
                    nioit
                                hoitqO Inemoandaid 12516Mil
",552,"def main ( ) :
    num = input (""enter the number you want to add )
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",15,"    def main ( ) .
                                                81108 x68.09
                                                    -
        num = input (""enter the number you want to add )
        Som=0
apnivoa
talioteb adt ero preHab10591 100Y
                rot ti of no blerl sabelq
        for è in str (num):
                                            tatoO auze
                                    hedmull inuopDA
            Sum = Sum+ int (i)
                                        eltil tnuossA
        Print (""sum of the value you entered in, som)
                        00.000,83
                            BM
                    nioit
                                hoitqO Inemoandaid 12516Mil
",552,"def main ():
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",12,"    def main ( ) .
                                                81108 x68.09
                                                    -
        num = input (""enter the number you want to add )
        Som=0
apnivoa
talioteb adt ero preHab10591 100Y
                rot ti of no blerl sabelq
        for è in str (num):
                                            tatoO auze
                                    hedmull inuopDA
            Sum = Sum+ int (i)
                                        eltil tnuossA
        Print (""sum of the value you entered in, som)
                        00.000,83
                            BM
                    nioit
                                hoitqO Inemoandaid 12516Mil
",552,"def main ( ) :
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",14,"    def main ( ) .
                                                81108 x68.09
                                                    -
        num = input (""enter the number you want to add )
        Som=0
apnivoa
talioteb adt ero preHab10591 100Y
                rot ti of no blerl sabelq
        for è in str (num):
                                            tatoO auze
                                    hedmull inuopDA
            Sum = Sum+ int (i)
                                        eltil tnuossA
        Print (""sum of the value you entered in, som)
                        00.000,83
                            BM
                    nioit
                                hoitqO Inemoandaid 12516Mil
",552,"def main ():
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",12,"    def main ( ) .
                                                81108 x68.09
                                                    -
        num = input (""enter the number you want to add )
        Som=0
apnivoa
talioteb adt ero preHab10591 100Y
                rot ti of no blerl sabelq
        for è in str (num):
                                            tatoO auze
                                    hedmull inuopDA
            Sum = Sum+ int (i)
                                        eltil tnuossA
        Print (""sum of the value you entered in, som)
                        00.000,83
                            BM
                    nioit
                                hoitqO Inemoandaid 12516Mil
",552,"def main ():
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",12,"    def main ( ) .
                                                81108 x68.09
                                                    -
        num = input (""enter the number you want to add )
        Som=0
apnivoa
talioteb adt ero preHab10591 100Y
                rot ti of no blerl sabelq
        for è in str (num):
                                            tatoO auze
                                    hedmull inuopDA
            Sum = Sum+ int (i)
                                        eltil tnuossA
        Print (""sum of the value you entered in, som)
                        00.000,83
                            BM
                    nioit
                                hoitqO Inemoandaid 12516Mil
",552,"def main ():
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",12,"    def main ( ) .
                                                81108 x68.09
                                                    -
        num = input (""enter the number you want to add )
        Som=0
apnivoa
talioteb adt ero preHab10591 100Y
                rot ti of no blerl sabelq
        for è in str (num):
                                            tatoO auze
                                    hedmull inuopDA
            Sum = Sum+ int (i)
                                        eltil tnuossA
        Print (""sum of the value you entered in, som)
                        00.000,83
                            BM
                    nioit
                                hoitqO Inemoandaid 12516Mil
",552,"def main ():
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",12,"    def main ( ) .
                                                81108 x68.09
                                                    -
        num = input (""enter the number you want to add )
        Som=0
apnivoa
talioteb adt ero preHab10591 100Y
                rot ti of no blerl sabelq
        for è in str (num):
                                            tatoO auze
                                    hedmull inuopDA
            Sum = Sum+ int (i)
                                        eltil tnuossA
        Print (""sum of the value you entered in, som)
                        00.000,83
                            BM
                    nioit
                                hoitqO Inemoandaid 12516Mil
",552,"def main ( ) :
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",14,"    def main ( ) .
                                                81108 x68.09
                                                    -
        num = input (""enter the number you want to add )
        Som=0
apnivoa
talioteb adt ero preHab10591 100Y
                rot ti of no blerl sabelq
        for è in str (num):
                                            tatoO auze
                                    hedmull inuopDA
            Sum = Sum+ int (i)
                                        eltil tnuossA
        Print (""sum of the value you entered in, som)
                        00.000,83
                            BM
                    nioit
                                hoitqO Inemoandaid 12516Mil
",552,"def main ():
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",12,"    def main ( ) .
                                                81108 x68.09
                                                    -
        num = input (""enter the number you want to add )
        Som=0
apnivoa
talioteb adt ero preHab10591 100Y
                rot ti of no blerl sabelq
        for è in str (num):
                                            tatoO auze
                                    hedmull inuopDA
            Sum = Sum+ int (i)
                                        eltil tnuossA
        Print (""sum of the value you entered in, som)
                        00.000,83
                            BM
                    nioit
                                hoitqO Inemoandaid 12516Mil
",552,"def main ( ) :
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",14,"    def main ( ) .
                                                81108 x68.09
                                                    -
        num = input (""enter the number you want to add )
        Som=0
apnivoa
talioteb adt ero preHab10591 100Y
                rot ti of no blerl sabelq
        for è in str (num):
                                            tatoO auze
                                    hedmull inuopDA
            Sum = Sum+ int (i)
                                        eltil tnuossA
        Print (""sum of the value you entered in, som)
                        00.000,83
                            BM
                    nioit
                                hoitqO Inemoandaid 12516Mil
",552,"def main ():
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",12,"    def main ( ) .
                                                81108 x68.09
                                                    -
        num = input (""enter the number you want to add )
        Som=0
apnivoa
talioteb adt ero preHab10591 100Y
                rot ti of no blerl sabelq
        for è in str (num):
                                            tatoO auze
                                    hedmull inuopDA
            Sum = Sum+ int (i)
                                        eltil tnuossA
        Print (""sum of the value you entered in, som)
                        00.000,83
                            BM
                    nioit
                                hoitqO Inemoandaid 12516Mil
",552,"def main ( ) :
    num = input (""enter the number you want to add )
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    Print (""sum of the value you entered is"", Sum)
",16,"    def main ( ) .
                                                81108 x68.09
                                                    -
        num = input (""enter the number you want to add )
        Som=0
apnivoa
talioteb adt ero preHab10591 100Y
                rot ti of no blerl sabelq
        for è in str (num):
                                            tatoO auze
                                    hedmull inuopDA
            Sum = Sum+ int (i)
                                        eltil tnuossA
        Print (""sum of the value you entered in, som)
                        00.000,83
                            BM
                    nioit
                                hoitqO Inemoandaid 12516Mil
",552,"def main ():
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",12,"    def main ( ) .
                                                81108 x68.09
                                                    -
        num = input (""enter the number you want to add )
        Som=0
apnivoa
talioteb adt ero preHab10591 100Y
                rot ti of no blerl sabelq
        for è in str (num):
                                            tatoO auze
                                    hedmull inuopDA
            Sum = Sum+ int (i)
                                        eltil tnuossA
        Print (""sum of the value you entered in, som)
                        00.000,83
                            BM
                    nioit
                                hoitqO Inemoandaid 12516Mil
",552,"def main ():
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",12,"    def main ( ) .
                                                81108 x68.09
                                                    -
        num = input (""enter the number you want to add )
        Som=0
apnivoa
talioteb adt ero preHab10591 100Y
                rot ti of no blerl sabelq
        for è in str (num):
                                            tatoO auze
                                    hedmull inuopDA
            Sum = Sum+ int (i)
                                        eltil tnuossA
        Print (""sum of the value you entered in, som)
                        00.000,83
                            BM
                    nioit
                                hoitqO Inemoandaid 12516Mil
",552,"def main ():
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",12,"    def main ( ) .
                                                81108 x68.09
                                                    -
        num = input (""enter the number you want to add )
        Som=0
apnivoa
talioteb adt ero preHab10591 100Y
                rot ti of no blerl sabelq
        for è in str (num):
                                            tatoO auze
                                    hedmull inuopDA
            Sum = Sum+ int (i)
                                        eltil tnuossA
        Print (""sum of the value you entered in, som)
                        00.000,83
                            BM
                    nioit
                                hoitqO Inemoandaid 12516Mil
",552,"def main ( ) :
    num = input (""enter the number you want to add )
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",15,"    def main ( ) .
                                                81108 x68.09
                                                    -
        num = input (""enter the number you want to add )
        Som=0
apnivoa
talioteb adt ero preHab10591 100Y
                rot ti of no blerl sabelq
        for è in str (num):
                                            tatoO auze
                                    hedmull inuopDA
            Sum = Sum+ int (i)
                                        eltil tnuossA
        Print (""sum of the value you entered in, som)
                        00.000,83
                            BM
                    nioit
                                hoitqO Inemoandaid 12516Mil
",552,"def main ():
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",12,"def main ( ) .
                                            81108 x68.09
                                                -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                        tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",488,"def main ( ) :
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",14,"def main ( ) .
                                            81108 x68.09
                                                -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                        tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",488,"def main ( ) :
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",14,"def main ( ) .
                                            81108 x68.09
                                                -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                        tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",488,"def main ( ) :
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",14,"def main ( ) .
                                            81108 x68.09
                                                -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                        tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",488,"def main ( ) :
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",14,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add )
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",15,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add )
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",15,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",14,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add: "")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is: "", Sum)
",18,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",14,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add )
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",15,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add: "")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is: "", Sum)
",18,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add: "")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is: "", Sum)
",18,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add: "")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is: "", Sum)
",18,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add )
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",15,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",14,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add: "")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is: "", Sum)
",18,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add )
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",15,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add )
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",15,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add )
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",15,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",14,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add: "")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is: "", Sum)
",18,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add )
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",15,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add )
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",15,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",14,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",14,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add )
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",15,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add: "")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is: "", Sum)
",18,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",14,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add: "")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is: "", Sum)
",18,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add )
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",15,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add: "")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is: "", Sum)
",18,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add )
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",15,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add )
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",15,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add )
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",15,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",14,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add )
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",15,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",14,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add )
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",15,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add: "")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is: "", Sum)
",18,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add )
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",15,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",14,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add )
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",15,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",14,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",14,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",14,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add: "")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is: "", Sum)
",18,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add )
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",15,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add: "")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is: "", Sum)
",18,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add: "")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is: "", Sum)
",18,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add )
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",15,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",14,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add: "")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is: "", Sum)
",18,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add: "")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is: "", Sum)
",18,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add: "")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is: "", Sum)
",18,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add"")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",14,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add )
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",15,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add )
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",15,"def main ( ) .
                                        81108 x68.09
                                            -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                    tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                    eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",476,"def main ( ) :
    num = input (""enter the number you want to add )
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",15,"def main ( ) .
                                    81108 x68.09
                                        -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                                tatoO auze
                                hedmull inuopDA
        Sum = Sum+ int (i)
                                eltil tnuossA
    Print (""sum of the value you entered in, som)
                    00.000,83
                        BM
                nioit
                            hoitqO Inemoandaid 12516Mil
",460,"def main ( ) :
    num = input (""enter the number you want to add )
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",15,"def main ( ) .
                                81108 x68.09
                                    -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                            tatoO auze
                            hedmull inuopDA
        Sum = Sum+ int (i)
                            eltil tnuossA
    Print (""sum of the value you entered in, som)
                00.000,83
                    BM
            nioit
                        hoitqO Inemoandaid 12516Mil
",424,"def main ( ) :
    num = input (""enter the number you want to add )
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",15,"def main ( ) .
                                81108 x68.09
                                    -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                            tatoO auze
                            hedmull inuopDA
        Sum = Sum+ int (i)
                            eltil tnuossA
    Print (""sum of the value you entered in, som)
                00.000,83
                    BM
            nioit
                        hoitqO Inemoandaid 12516Mil
",424,"def main ( ) :
    num = input (""enter the number you want to add: "")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",16,"def main ( ) .
                                81108 x68.09
                                    -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                            tatoO auze
                            hedmull inuopDA
        Sum = Sum+ int (i)
                            eltil tnuossA
    Print (""sum of the value you entered in, som)
                00.000,83
                    BM
            nioit
                        hoitqO Inemoandaid 12516Mil
",424,"def main ( ) :
    num = input (""enter the number you want to add: "")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",16,"def main ( ) .
                                81108 x68.09
                                    -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                            tatoO auze
                            hedmull inuopDA
        Sum = Sum+ int (i)
                            eltil tnuossA
    Print (""sum of the value you entered in, som)
                00.000,83
                    BM
            nioit
                        hoitqO Inemoandaid 12516Mil
",424,"def main ( ) :
    num = input (""enter the number you want to add: "")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is"", Sum)
",16,"def main ( ) .
                                81108 x68.09
                                    -
    num = input (""enter the number you want to add )
    Som=0
apnivoa
talioteb adt ero preHab10591 100Y
            rot ti of no blerl sabelq
    for è in str (num):
                            tatoO auze
                            hedmull inuopDA
        Sum = Sum+ int (i)
                            eltil tnuossA
    Print (""sum of the value you entered in, som)
                00.000,83
                    BM
            nioit
                        hoitqO Inemoandaid 12516Mil
",424,"def main ( ) :
    num = input (""enter the number you want to add: "")
    Sum=0
    for i in str (num):
        Sum = Sum+ int (i)
    print (""sum of the value you entered is: "", Sum)
",18
"user_input = input(""Write your string here: "")
upper = user_input.upper()
print(upper)
","user-input = input(""write your string here:
11
Upper = user_input. upper()
print (upper)",9,"user-input = input(""write your string here:
            "")
        Upper = user input. upper()
    print (upper)
",30,"user_input = input(""write your string here: "")
Upper = user_input.upper()
print(Upper)
",3,"user-input = input(""write your string here:
            "")
        Upper = user input. upper()
    print (upper)
",30,"user_input = input(""write your string here: "")
Upper = user_input.upper()
print(Upper)
",3,"user-input = input(""write your string here:
            "")
        Upper = user input. upper()
    print (upper)
",30,"user_input = input(""write your string here: "")
Upper = user_input.upper()
print(Upper)
",3,"user-input = input(""write your string here:
            "")
        Upper = user input. upper()
    print (upper)
",30,"user_input = input(""write your string here: "")
Upper = user_input.upper()
print(Upper)
",3,"user-input = input(""write your string here:
            "")
        Upper = user input. upper()
    print (upper)
",30,"user_input = input(""write your string here: "")
Upper = user_input.upper()
print(Upper)
",3,"user-input = input(""write your string here:
            "")
        Upper = user input. upper()
    print (upper)
",30,"user_input = input(""write your string here: "")
Upper = user_input.upper()
print (Upper)
",4,"user-input = input(""write your string here:
            "")
        Upper = user input. upper()
    print (upper)
",30,"user_input = input(""write your string here: "")
Upper = user_input.upper()
print(Upper)
",3,"user-input = input(""write your string here:
            "")
        Upper = user input. upper()
    print (upper)
",30,"user_input = input(""write your string here: "")
Upper = user_input.upper()
print (Upper)
",4,"user-input = input(""write your string here:
            "")
        Upper = user input. upper()
    print (upper)
",30,"user_input = input(""write your string here: "")
Upper = user_input.upper()
print(Upper)
",3,"user-input = input(""write your string here:
            "")
        Upper = user input. upper()
    print (upper)
",30,"user_input = input(""write your string here: "")
Upper = user_input.upper()
print(Upper)
",3,"user-input = input(""write your string here:
            "")
        Upper = user input. upper()
    print (upper)
",30,"user_input = input(""write your string here: "")
Upper = user_input.upper()
print(Upper)
",3,"user-input = input(""write your string here:
            "")
        Upper = user input. upper()
    print (upper)
",30,"user_input = input(""write your string here: "")
Upper = user_input.upper()
print(Upper)
",3,"user-input = input(""write your string here:
            "")
        Upper = user input. upper()
    print (upper)
",30,"user_input = input(""write your string here: "")
Upper = user_input.upper()
print(Upper)
",3,"user-input = input(""write your string here:
            "")
        Upper = user input. upper()
    print (upper)
",30,"user_input = input(""write your string here: "")
Upper = user_input.upper()
print(Upper)
",3,"user-input = input(""write your string here:
            "")
        Upper = user input. upper()
    print (upper)
",30,"user_input = input(""write your string here: "")
Upper = user_input.upper()
print(Upper)
",3,"user-input = input(""write your string here:
            "")
        Upper = user input. upper()
    print (upper)
",30,"user_input = input(""write your string here: "")
Upper = user_input.upper()
print(Upper)
",3,"user-input = input(""write your string here:
        "")
    Upper = user input. upper()
    print (upper)
",22,"user_input = input(""write your string here: "")
Upper = user_input.upper()
print (Upper)
",4,"user-input = input(""write your string here:
        "")
    Upper = user input. upper()
    print (upper)
",22,"user_input = input(""write your string here: 
        "")
Upper = user_input.upper()
print (Upper)
",13,"user-input = input(""write your string here:
        "")
    Upper = user input. upper()
    print (upper)
",22,"user_input = input(""write your string here: 
        "")
Upper = user_input.upper()
print (Upper)
",13,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here:
    "")
Upper = user_input.upper()
print (Upper)
",8,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here:
    "")
Upper = user_input.upper()
print (Upper)
",8,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here:
    "")
Upper = user_input.upper()
print (Upper)
",8,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here:
    "")
Upper = user_input.upper()
print (Upper)
",8,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here:
    "")
Upper = user_input.upper()
print (Upper)
",8,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here:
    "")
Upper = user_input.upper()
print (Upper)
",8,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here:
    "")
Upper = user_input.upper()
print (Upper)
",8,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
"")
Upper = user_input.upper()
print (Upper)
",5,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here:
    "")
Upper = user_input.upper()
print (Upper)
",8,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here:
    "")
Upper = user_input.upper()
print (Upper)
",8,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here:
    "")
Upper = user_input.upper()
print (Upper)
",8,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here:
    "")
Upper = user_input.upper()
print (Upper)
",8,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here:
    "")
Upper = user_input.upper()
print (Upper)
",8,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here:
    "")
Upper = user_input.upper()
print (Upper)
",8,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here:
    "")
Upper = user_input.upper()
print (Upper)
",8,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here:
    "")
Upper = user_input.upper()
print (Upper)
",8,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here:
    "")
upper = user_input.upper()
print (upper)
",6,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here:
    "")
Upper = user_input.upper()
print (Upper)
",8,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here:
    "")
Upper = user_input.upper()
print (Upper)
",8,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here:
    "")
Upper = user_input.upper()
print (Upper)
",8,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here:
    "")
Upper = user_input.upper()
print (Upper)
",8,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here:
    "")
Upper = user_input.upper()
print (Upper)
",8,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here:
    "")
Upper = user_input.upper()
print (Upper)
",8,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here:
    "")
Upper = user_input.upper()
print (Upper)
",8,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here:
    "")
Upper = user_input.upper()
print (Upper)
",8,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9,"user-input = input(""write your string here:
    "")
Upper = user input. upper()
print (upper)
",10,"user_input = input(""write your string here: 
    "")
Upper = user_input.upper()
print (Upper)
",9
"from karel.stanfordkarel import *
""""""
Karel should fill the whole world with beepers.
""""""

def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
","from Karel. stanfordkarel import *
hun
Karel should fill the world with keepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()",77,"        from karel. stanfordkarel import *
        Karel should fill the world with beepers.
    1100
def main () :
                        # decomposition using a function name for
                    # each associated activity
                    while left-is-clear ():
                                    fill_one-row()
                                return_to_row-start ()
                            Nove-up()
            # rewrite code after while loop to overcome
            # fencepost bug
                fill-one-row()
",195,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
                        # decomposition using a function name for
                    # each associated activity
                    while left_is_clear():
                                    fill_one_row()
                                return_to_row_start()
                            move_up()
            # rewrite code after while loop to overcome
            # fencepost bug
                fill_one_row()
",166,"        from karel. stanfordkarel import *
        Karel should fill the world with beepers.
    1100
def main () :
                    # decomposition using a function name for
                # each associated activity
                while left-is-clear ():
                            fill_one-row()
                        return_to_row-start ()
                        Nove-up()
            # rewrite code after while loop to overcome
            # fencepost bug
            fill-one-row()
",159,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
                    # decomposition using a function name for
                # each associated activity
                while left_is_clear():
                            fill_one_row()
                        return_to_row_start()
                        move_up()
            # rewrite code after while loop to overcome
            # fencepost bug
            fill_one_row()
",130,"        from karel. stanfordkarel import *
        Karel should fill the world with beepers.
    1100
def main () :
                # decomposition using a function name for
                # each associated activity
                while left-is-clear ():
                        fill_one-row()
                    return_to_row-start ()
                    Nove-up()
            # rewrite code after while loop to overcome
            # fencepost bug
            fill-one-row()
",143,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
                # decomposition using a function name for
                # each associated activity
                while left_is_clear():
                        fill_one_row()
                    return_to_row_start()
                    move_up()
            # rewrite code after while loop to overcome
            # fencepost bug
            fill_one_row()
",114,"    from karel. stanfordkarel import *
    Karel should fill the world with beepers.
1100
def main () :
            # decomposition using a function name for
            # each associated activity
            while left-is-clear ():
                    fill_one-row()
                return_to_row-start ()
                Nove-up()
        # rewrite code after while loop to overcome
        # fencepost bug
        fill-one-row()
",95,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
            # decomposition using a function name for
            # each associated activity
            while left_is_clear():
                    fill_one_row()
                return_to_row_start()
                move_up()
        # rewrite code after while loop to overcome
        # fencepost bug
        fill_one_row()
",78,"    from karel. stanfordkarel import *
    Karel should fill the world with beepers.
1100
def main () :
        # decomposition using a function name for
        # each associated activity
        while left-is-clear ():
                fill_one-row()
            return_to_row-start ()
            Nove-up()
        # rewrite code after while loop to overcome
        # fencepost bug
        fill-one-row()
",71,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main () :
        # decomposition using a function name for
        # each associated activity
        while left_is_clear ():
                fill_one_row()
        return_to_row_start ()
        move_up()
        # rewrite code after while loop to overcome
        # fencepost bug
        fill_one_row()
",50,"    from karel. stanfordkarel import *
    Karel should fill the world with beepers.
1100
def main () :
        # decomposition using a function name for
        # each associated activity
        while left-is-clear ():
                fill_one-row()
            return_to_row-start ()
            Nove-up()
        # rewrite code after while loop to overcome
        # fencepost bug
        fill-one-row()
",71,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main () :
        # decomposition using a function name for
        # each associated activity
        while left_is_clear ():
                fill_one_row()
        return_to_row_start ()
        move_up()
        # rewrite code after while loop to overcome
        # fencepost bug
        fill_one_row()
",50,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
    # decomposition using a function name for
    # each associated activity
    while left-is-clear ():
            fill_one-row()
        return_to_row-start ()
        Nove-up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill-one-row()
",31,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
            fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",18,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
    # decomposition using a function name for
    # each associated activity
    while left-is-clear ():
        fill_one-row()
        return_to_row-start ()
        Nove-up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill-one-row()
",27,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",14,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
    # decomposition using a function name for
    # each associated activity
    while left-is-clear ():
        fill_one-row()
        return_to_row-start ()
        Nove-up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill-one-row()
",27,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",14,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
    # decomposition using a function name for
    # each associated activity
    while left-is-clear ():
        fill_one-row()
        return_to_row-start ()
        Nove-up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill-one-row()
",27,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main () :
    # decomposition using a function name for
    # each associated activity
    while left_is_clear ():
        fill_one_row()
        return_to_row_start ()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",18,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
    # decomposition using a function name for
    # each associated activity
    while left-is-clear ():
        fill_one-row()
        return_to_row-start ()
        Nove-up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill-one-row()
",27,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",14,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
    # decomposition using a function name for
    # each associated activity
    while left-is-clear ():
        fill_one-row()
        return_to_row-start ()
        Nove-up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill-one-row()
",27,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main () :
    # decomposition using a function name for
    # each associated activity
    while left_is_clear ():
        fill_one_row()
        return_to_row_start ()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",18,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
    # decomposition using a function name for
    # each associated activity
    while left-is-clear ():
        fill_one-row()
        return_to_row-start ()
        Nove-up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill-one-row()
",27,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",14,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
    # decomposition using a function name for
    # each associated activity
    while left-is-clear ():
        fill_one-row()
        return_to_row-start ()
        Nove-up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill-one-row()
",27,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",14,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
    # decomposition using a function name for
    # each associated activity
    while left-is-clear ():
        fill_one-row()
        return_to_row-start ()
        Nove-up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill-one-row()
",27,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main () :
    # decomposition using a function name for
    # each associated activity
    while left_is_clear ():
        fill_one_row()
        return_to_row_start ()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",18,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
    # decomposition using a function name for
    # each associated activity
    while left-is-clear ():
        fill_one-row()
        return_to_row-start ()
        Nove-up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill-one-row()
",27,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",14,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
    # decomposition using a function name for
    # each associated activity
    while left-is-clear ():
        fill_one-row()
        return_to_row-start ()
        Nove-up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill-one-row()
",27,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",14,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
    # decomposition using a function name for
    # each associated activity
    while left-is-clear ():
        fill_one-row()
        return_to_row-start ()
        Nove-up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill-one-row()
",27,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",14,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
    # decomposition using a function name for
    # each associated activity
    while left-is-clear ():
        fill_one-row()
        return_to_row-start ()
        Nove-up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill-one-row()
",27,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",14,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
    # decomposition using a function name for
    # each associated activity
    while left-is-clear ():
        fill_one-row()
        return_to_row-start ()
        Nove-up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill-one-row()
",27,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",14,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
    # decomposition using a function name for
    # each associated activity
    while left-is-clear ():
        fill_one-row()
        return_to_row-start ()
        Nove-up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill-one-row()
",27,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",14,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
    # decomposition using a function name for
    # each associated activity
    while left-is-clear ():
        fill_one-row()
        return_to_row-start ()
        Nove-up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill-one-row()
",27,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",14,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
    # decomposition using a function name for
    # each associated activity
    while left-is-clear ():
        fill_one-row()
        return_to_row-start ()
        Nove-up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill-one-row()
",27,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",14,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
    # decomposition using a function name for
    # each associated activity
    while left-is-clear ():
        fill_one-row()
        return_to_row-start ()
        Nove-up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill-one-row()
",27,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main () :
    # decomposition using a function name for
    # each associated activity
    while left_is_clear ():
        fill_one_row()
        return_to_row_start ()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",18,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
    # decomposition using a function name for
    # each associated activity
    while left-is-clear ():
        fill_one-row()
        return_to_row-start ()
        Nove-up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill-one-row()
",27,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",14,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
    # decomposition using a function name for
    # each associated activity
    while left-is-clear ():
        fill_one-row()
        return_to_row-start ()
        Nove-up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill-one-row()
",27,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main () :
    # decomposition using a function name for
    # each associated activity
    while left_is_clear ():
        fill_one_row()
        return_to_row_start ()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",18,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
    # decomposition using a function name for
    # each associated activity
    while left-is-clear ():
        fill_one-row()
        return_to_row-start ()
        Nove-up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill-one-row()
",27,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",14,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
    # decomposition using a function name for
    # each associated activity
    while left-is-clear ():
        fill_one-row()
        return_to_row-start ()
        Nove-up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill-one-row()
",27,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",14,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
    # decomposition using a function name for
    # each associated activity
    while left-is-clear ():
        fill_one-row()
        return_to_row-start ()
        Nove-up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill-one-row()
",27,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main () :
    # decomposition using a function name for
    # each associated activity
    while left_is_clear ():
        fill_one_row()
        return_to_row_start ()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",18,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
    fill_one-row()
    return_to_row-start ()
    Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",63,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
# rewrite code after while loop to overcome
# fencepost bug
    fill_one_row()
",30,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
    fill_one-row()
    return_to_row-start ()
    Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",63,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
# rewrite code after while loop to overcome
# fencepost bug
    fill_one_row()
",30,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
    fill_one-row()
    return_to_row-start ()
    Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",63,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
# rewrite code after while loop to overcome
# fencepost bug
    fill_one_row()
",30,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
    fill_one-row()
    return_to_row-start ()
    Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",63,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
# rewrite code after while loop to overcome
# fencepost bug
    fill_one_row()
",30,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
    fill_one-row()
    return_to_row-start ()
    Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",63,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
# rewrite code after while loop to overcome
# fencepost bug
    fill_one_row()
",30,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
    fill_one-row()
    return_to_row-start ()
    Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",63,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
# rewrite code after while loop to overcome
# fencepost bug
    fill_one_row()
",30,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
    fill_one-row()
    return_to_row-start ()
    Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",63,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
# rewrite code after while loop to overcome
# fencepost bug
    fill_one_row()
",30,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
    fill_one-row()
    return_to_row-start ()
    Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",63,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
# rewrite code after while loop to overcome
# fencepost bug
    fill_one_row()
",30,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
    fill_one-row()
    return_to_row-start ()
    Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",63,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
# rewrite code after while loop to overcome
# fencepost bug
    fill_one_row()
",30,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
    fill_one-row()
    return_to_row-start ()
    Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",63,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
# rewrite code after while loop to overcome
# fencepost bug
    fill_one_row()
",30,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
    fill_one-row()
    return_to_row-start ()
    Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",63,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main () :
    # decomposition using a function name for
    # each associated activity
    while left_is_clear ():
        fill_one_row()
        return_to_row_start ()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",18,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
    fill_one-row()
    return_to_row-start ()
    Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",63,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
# rewrite code after while loop to overcome
# fencepost bug
    fill_one_row()
",30,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
    fill_one-row()
    return_to_row-start ()
    Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",63,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
while left_is_clear():
    fill_one_row()
    return_to_row_start()
    move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill_one_row()
",50,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
    fill_one-row()
    return_to_row-start ()
    Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",63,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main () :
    # decomposition using a function name for
    # each associated activity
    while left_is_clear ():
        fill_one_row()
        return_to_row_start ()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",18,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
    fill_one-row()
    return_to_row-start ()
    Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",63,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
# rewrite code after while loop to overcome
# fencepost bug
    fill_one_row()
",30,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
    fill_one-row()
    return_to_row-start ()
    Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",63,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main () :
    # decomposition using a function name for
    # each associated activity
    while left_is_clear ():
        fill_one_row()
        return_to_row_start ()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",18,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
    fill_one-row()
    return_to_row-start ()
    Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",63,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
# rewrite code after while loop to overcome
# fencepost bug
    fill_one_row()
",30,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
    fill_one-row()
    return_to_row-start ()
    Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",63,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
# rewrite code after while loop to overcome
# fencepost bug
    fill_one_row()
",30,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
    fill_one-row()
    return_to_row-start ()
    Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",63,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main () :
    # decomposition using a function name for
    # each associated activity
    while left_is_clear ():
        fill_one_row()
        return_to_row_start ()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",18,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
    fill_one-row()
    return_to_row-start ()
    Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",63,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
# rewrite code after while loop to overcome
# fencepost bug
    fill_one_row()
",30,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
    fill_one-row()
    return_to_row-start ()
    Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",63,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
# rewrite code after while loop to overcome
# fencepost bug
    fill_one_row()
",30,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
    fill_one-row()
    return_to_row-start ()
    Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",63,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
while left_is_clear():
    fill_one_row()
    return_to_row_start()
    move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill_one_row()
",50,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main () :
    # decomposition using a function name for
    # each associated activity
    while left_is_clear ():
        fill_one_row()
        return_to_row_start ()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",18,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
while left_is_clear():
fill_one_row()
return_to_row_start()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill_one_row()
",62,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
while left_is_clear():
fill_one_row()
return_to_row_start()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill_one_row()
",62,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
while left_is_clear():
fill_one_row()
return_to_row_start()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill_one_row()
",62,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
while left_is_clear():
fill_one_row()
return_to_row_start()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill_one_row()
",62,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main () :
    # decomposition using a function name for
    # each associated activity
    while left_is_clear ():
        fill_one_row()
        return_to_row_start ()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",18,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
while left_is_clear():
fill_one_row()
return_to_row_start()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill_one_row()
",62,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
while left_is_clear():
fill_one_row()
return_to_row_start()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill_one_row()
",62,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main () :
    # decomposition using a function name for
    # each associated activity
    while left_is_clear ():
        fill_one_row()
        return_to_row_start ()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",18,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main () :
    # decomposition using a function name for
    # each associated activity
    while left_is_clear ():
        fill_one_row()
        return_to_row_start ()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",18,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
while left_is_clear():
fill_one_row()
return_to_row_start()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill_one_row()
",62,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main () :
    # decomposition using a function name for
    # each associated activity
    while left_is_clear ():
        fill_one_row()
        return_to_row_start ()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",18,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
while left_is_clear():
fill_one_row()
return_to_row_start()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill_one_row()
",62,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main () :
    # decomposition using a function name for
    # each associated activity
    while left_is_clear ():
        fill_one_row()
        return_to_row_start ()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",18,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
while left_is_clear():
fill_one_row()
return_to_row_start()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill_one_row()
",62,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
while left_is_clear():
fill_one_row()
return_to_row_start()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill_one_row()
",62,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main () :
    # decomposition using a function name for
    # each associated activity
    while left_is_clear ():
        fill_one_row()
        return_to_row_start ()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",18,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should activity
    while left_is_clear ():
        fill_one_row()
        return_to_row_start ()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",126,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
while left_is_clear():
fill_one_row()
return_to_row_start()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill_one_row()
",62,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
while left_is_clear():
fill_one_row()
return_to_row_start()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill_one_row()
",62,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
while left_is_clear():
fill_one_row()
return_to_row_start()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill_one_row()
",62,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
while left_is_clear():
fill_one_row()
return_to_row_start()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill_one_row()
",62,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
while left_is_clear():
fill_one_row()
return_to_row_start()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill_one_row()
",62,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
while left_is_clear():
fill_one_row()
return_to_row_start()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill_one_row()
",62,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main () :
    # decomposition using a function name for
    # each associated activity
    while left_is_clear ():
        fill_one_row()
        return_to_row_start ()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",18,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main () :
    # decomposition using a function name for
    # each associated activity
    while left_is_clear ():
        fill_one_row()
        return_to_row_start ()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",18,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
while left_is_clear():
fill_one_row()
return_to_row_start()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill_one_row()
",62,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main () :
    # decomposition using a function name for
    # each associated activity
    while left_is_clear ():
        fill_one_row()
        return_to_row_start ()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",18,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main () :
    # decomposition using a function name for
    # each associated activity
    while left_is_clear ():
        fill_one_row()
        return_to_row_start ()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",18,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
while left_is_clear():
fill_one_row()
return_to_row_start()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill_one_row()
",62,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main () :
    # decomposition using a function name for
    # each associated activity
    while left_is_clear ():
        fill_one_row()
        return_to_row_start ()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",18,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
while left_is_clear():
fill_one_row()
return_to_row_start()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill_one_row()
",62,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
while left_is_clear():
fill_one_row()
return_to_row_start()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill_one_row()
",62,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main () :
    # decomposition using a function name for
    # each associated activity
    while left_is_clear ():
        fill_one_row()
        return_to_row_start ()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",18,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
while left_is_clear():
fill_one_row()
return_to_row_start()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill_one_row()
",62,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
while left_is_clear():
fill_one_row()
return_to_row_start()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill_one_row()
",62,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main () :
    # decomposition using a function name for
    # each associated activity
    while left_is_clear ():
        fill_one_row()
        return_to_row_start ()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",18,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
while left_is_clear():
fill_one_row()
return_to_row_start()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill_one_row()
",62,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main () :
    # decomposition using a function name for
    # each associated activity
    while left_is_clear ():
        fill_one_row()
        return_to_row_start ()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",18,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",22,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
while left_is_clear():
fill_one_row()
return_to_row_start()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill_one_row()
",62,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
while left_is_clear():
fill_one_row()
return_to_row_start()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill_one_row()
",62,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
while left_is_clear():
fill_one_row()
return_to_row_start()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill_one_row()
",62,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
while left_is_clear():
fill_one_row()
return_to_row_start()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill_one_row()
",62,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main () :
    # decomposition using a function name for
    # each associated activity
    while left_is_clear ():
        fill_one_row()
        return_to_row_start ()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",18,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main () :
    # decomposition using a function name for
    # each associated activity
    while left_is_clear ():
        fill_one_row()
        return_to_row_start ()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",18,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
while left_is_clear():
fill_one_row()
return_to_row_start()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill_one_row()
",62,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
while left_is_clear():
fill_one_row()
return_to_row_start()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill_one_row()
",62,"from karel. stanfordkarel import *
Karel should fill the world with beepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()
",75,"from karel.stanfordkarel import *
# Karel should fill the world with beepers.

def main():
# decomposition using a function name for
# each associated activity
while left_is_clear():
fill_one_row()
return_to_row_start()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill_one_row()
",62
"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    for i in range(2):
        turn_left()

if __name__ == ""__main__"":
    main()
","from karel. stanfordkarel import*
det main ()
move()
move()
turn-right ()
move()
turn-left()
move()
pick-beeper()
return-home()
def return_home()
turn-around()
move()
turn-right ()
move ()
turn-left ()
move()
move()
turn-around()
det turn-right()
for i in range (3):
turn-left ()
def turn- around()
for i in range (2):
turn-left ()
if
name
== '_main ' :
main()",139,"    from karel. stanfordkarel import*
        def main ()
                            move()
                                move()
                                turn-right ()
                                    move()
                                    turn-left()
                                            move()
                                            pick-beeper()
                                                        return-home()
                def return_home()
                                turn-around()
                                    move()
                                        turn-right()
                                            move ()
                                                turn-left ()
                                                    move()
                                                        move()
                                                    turn-around ()
            det turn-right()
                                            for i in range (3):
                                                                turn-left ()
                    def turn- around()
                                            for i in range (2):
                                                            turn-left ()
if
                        name == '_main' ':
                    main()
",929,"from karel.stanfordkarel import *

    def main():
                            move()
                                move()
                                turn_right()
                                    move()
                                    turn_left()
                                            move()
                                            pick_beeper()
                                                        return_home()

                def return_home():
                                turn_around()
                                    move()
                                        turn_right()
                                            move()
                                                turn_left()
                                                    move()
                                                        move()
                                                    turn_around()

            def turn_right():
                                            for i in range(3):
                                                                turn_left()

                    def turn_around():
                                            for i in range(2):
                                                            turn_left()
if __name__ == '__main__':
                    main()
",863,"    from karel. stanfordkarel import*
        def main ()
                            move()
                                move()
                                turn-right ()
                                    move()
                                    turn-left()
                                            move()
                                            pick-beeper()
                                                return-home()
                def return_home()
                                turn-around()
                                    move()
                                        turn-right()
                                            move ()
                                                turn-left ()
                                                move()
                                                move()
                                                turn-around ()
            det turn-right()
                                            for i in range (3):
                                                        turn-left ()
                    def turn- around()
                                            for i in range (2):
                                                    turn-left ()
if
                        name == '_main' ':
                    main()
",889,"from karel.stanfordkarel import *

    def main():
                            move()
                                move()
                                turn_right()
                                    move()
                                    turn_left()
                                            move()
                                            pick_beeper()
                                                return_home()

                def return_home():
                                turn_around()
                                    move()
                                        turn_right()
                                            move()
                                                turn_left()
                                                move()
                                                move()
                                                turn_around()

            def turn_right():
                                            for i in range(3):
                                                        turn_left()

                    def turn_around():
                                            for i in range(2):
                                                    turn_left()
if __name__ == '__main__':
                    main()
",823,"    from karel. stanfordkarel import*
        def main ()
                        move()
                            move()
                            turn-right ()
                                move()
                                turn-left()
                                    move()
                                    pick-beeper()
                                        return-home()
            def return_home()
                            turn-around()
                                move()
                                    turn-right()
                                    move ()
                                        turn-left ()
                                        move()
                                        move()
                                        turn-around ()
        det turn-right()
                                    for i in range (3):
                                                turn-left ()
                def turn- around()
                                    for i in range (2):
                                            turn-left ()
if
                    name == '_main' ':
                main()
",741,"from karel.stanfordkarel import *

    def main():
                    move()
                        move()
                        turn_right()
                            move()
                            turn_left()
                                move()
                                pick_beeper()
                                    return_home()

        def return_home():
                        turn_around()
                            move()
                                turn_right()
                                move()
                                    turn_left()
                                    move()
                                    move()
                                    turn_around()

    def turn_right():
                                for i in range(3):
                                            turn_left()

            def turn_around():
                                for i in range(2):
                                        turn_left()
if __name__ == '__main__':
            main()
",583,"    from karel. stanfordkarel import*
        def main ()
                    move()
                        move()
                        turn-right ()
                            move()
                            turn-left()
                                move()
                                pick-beeper()
                                    return-home()
        def return_home()
                        turn-around()
                            move()
                                turn-right()
                                move ()
                                    turn-left ()
                                    move()
                                    move()
                                    turn-around ()
        det turn-right()
                                for i in range (3):
                                            turn-left ()
            def turn- around()
                                for i in range (2):
                                        turn-left ()
if
                name == '_main' ':
            main()
",645,"from karel.stanfordkarel import *

    def main():
        move()
            move()
            turn_right()
                move()
                turn_left()
                    move()
                    pick_beeper()
                        return_home()

    def return_home():
        turn_around()
            move()
                turn_right()
                move()
                    turn_left()
                    move()
                    move()
                    turn_around()

    def turn_right():
        for i in range(3):
            turn_left()

        def turn_around():
            for i in range(2):
                turn_left()
if __name__ == '__main__':
    main()
",243,"    from karel. stanfordkarel import*
        def main ()
                    move()
                        move()
                        turn-right ()
                            move()
                            turn-left()
                                move()
                                pick-beeper()
                                return-home()
        def return_home()
                        turn-around()
                            move()
                                turn-right()
                                move ()
                                turn-left ()
                                move()
                                move()
                                turn-around ()
        det turn-right()
                                for i in range (3):
                                        turn-left ()
            def turn- around()
                                for i in range (2):
                                    turn-left ()
if
                name == '_main' ':
            main()
",617,"from karel.stanfordkarel import *

    def main():
        move()
            move()
            turn_right()
                move()
                turn_left()
                    move()
                    pick_beeper()
                    return_home()

    def return_home():
        turn_around()
            move()
            turn_right()
            move()
            turn_left()
            move()
            move()
            turn_around()

    def turn_right():
        for i in range(3):
            turn_left()

    def turn_around():
        for i in range(2):
            turn_left()
if __name__ == '__main__':
    main()
",187,"    from karel. stanfordkarel import*
        def main ()
                    move()
                    move()
                    turn-right ()
                    move()
                    turn-left()
                        move()
                        pick-beeper()
                        return-home()
        def return_home()
                    turn-around()
                    move()
                        turn-right()
                        move ()
                        turn-left ()
                        move()
                        move()
                        turn-around ()
        det turn-right()
                        for i in range (3):
                                turn-left ()
            def turn- around()
                        for i in range (2):
                            turn-left ()
if
                name == '_main' ':
            main()
",477,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    for i in range(2):
        turn_left()
if __name__ == '__main__':
    main()
",3,"    from karel. stanfordkarel import*
        def main ()
                    move()
                    move()
                    turn-right ()
                    move()
                    turn-left()
                        move()
                        pick-beeper()
                        return-home()
        def return_home()
                    turn-around()
                    move()
                        turn-right()
                        move ()
                        turn-left ()
                        move()
                        move()
                        turn-around ()
        det turn-right()
                        for i in range (3):
                                turn-left ()
            def turn- around()
                        for i in range (2):
                            turn-left ()
if
                name == '_main' ':
            main()
",477,"from karel.stanfordkarel import *

    def main():
        move()
        move()
        turn_right()
        move()
        turn_left()
            move()
            pick_beeper()
            return_home()

    def return_home():
        turn_around()
        move()
            turn_right()
            move()
            turn_left()
            move()
            move()
            turn_around()

    def turn_right():
            for i in range(3):
                turn_left()

        def turn_around():
            for i in range(2):
                turn_left()
if __name__ == '__main__':
    main()
",155,"    from karel. stanfordkarel import*
        def main ()
                    move()
                    move()
                    turn-right ()
                    move()
                    turn-left()
                        move()
                        pick-beeper()
                        return-home()
        def return_home()
                    turn-around()
                    move()
                        turn-right()
                        move ()
                        turn-left ()
                        move()
                        move()
                        turn-around ()
        det turn-right()
                        for i in range (3):
                                turn-left ()
            def turn- around()
                        for i in range (2):
                            turn-left ()
if
                name == '_main' ':
            main()
",477,"from karel.stanfordkarel import *

    def main():
        move()
        move()
        turn_right()
        move()
        turn_left()
            move()
            pick_beeper()
            return_home()

    def return_home():
        turn_around()
        move()
            turn_right()
            move()
            turn_left()
            move()
            move()
            turn_around()

    def turn_right():
            for i in range(3):
                turn_left()

        def turn_around():
            for i in range(2):
                turn_left()
if __name__ == '__main__':
    main()
",155,"    from karel. stanfordkarel import*
        def main ()
                move()
                move()
                turn-right ()
                move()
                turn-left()
                    move()
                    pick-beeper()
                    return-home()
        def return_home()
                turn-around()
                move()
                    turn-right()
                    move ()
                    turn-left ()
                    move()
                    move()
                    turn-around ()
        det turn-right()
                    for i in range (3):
                            turn-left ()
        def turn- around()
                    for i in range (2):
                        turn-left ()
if
            name == '_main' ':
        main()
",385,"from karel.stanfordkarel import *

    def main():
            move()
            move()
            turn_right()
            move()
            turn_left()
                move()
                pick_beeper()
                return_home()

    def return_home():
            turn_around()
            move()
                turn_right()
                move()
                turn_left()
                move()
                move()
                turn_around()

    def turn_right():
                for i in range(3):
                        turn_left()

    def turn_around():
                for i in range(2):
                    turn_left()
if __name__ == '__main__':
    main()
",235,"    from karel. stanfordkarel import*
    def main ()
            move()
            move()
            turn-right ()
            move()
            turn-left()
                move()
                pick-beeper()
                return-home()
    def return_home()
            turn-around()
            move()
            turn-right()
                move ()
                turn-left ()
                move()
                move()
                turn-around ()
    det turn-right()
                for i in range (3):
                        turn-left ()
    def turn- around()
                for i in range (2):
                    turn-left ()
if
        name == '_main' ':
    main()
",277,"from karel.stanfordkarel import *

def main():
        move()
        move()
        turn_right()
        move()
        turn_left()
            move()
            pick_beeper()
            return_home()

def return_home():
        turn_around()
        move()
        turn_right()
            move()
            turn_left()
            move()
            move()
            turn_around()

def turn_right():
            for i in range(3):
                    turn_left()

def turn_around():
            for i in range(2):
                turn_left()
if __name__ == '__main__':
    main()
",135,"    from karel. stanfordkarel import*
    def main ()
            move()
            move()
            turn-right ()
            move()
            turn-left()
                move()
                pick-beeper()
                return-home()
    def return_home()
            turn-around()
            move()
                turn-right()
                move ()
                turn-left ()
                move()
                move()
                turn-around ()
    det turn-right()
                for i in range (3):
                    turn-left ()
        def turn- around()
                for i in range (2):
                    turn-left ()
if
        name == '_main' ':
        main()
",285,"from karel.stanfordkarel import *

def main():
        move()
        move()
        turn_right()
        move()
        turn_left()
            move()
            pick_beeper()
            return_home()

def return_home():
        turn_around()
        move()
            turn_right()
            move()
            turn_left()
            move()
            move()
            turn_around()

def turn_right():
            for i in range(3):
                turn_left()

def turn_around():
            for i in range(2):
                turn_left()
if __name__ == '__main__':
        main()
",139,"    from karel. stanfordkarel import*
    def main ()
        move()
        move()
        turn-right ()
        move()
        turn-left()
            move()
            pick-beeper()
            return-home()
    def return_home()
        turn-around()
        move()
            turn-right()
            move ()
            turn-left ()
            move()
            move()
            turn-around ()
    det turn-right()
            for i in range (3):
                turn-left ()
    def turn- around()
            for i in range (2):
                turn-left ()
if
    name == '_main' ':
    main()
",193,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
        move()
        pick_beeper()
        return_home()

def return_home():
    turn_around()
    move()
        turn_right()
        move()
        turn_left()
        move()
        move()
        turn_around()

def turn_right():
        for i in range(3):
            turn_left()

def turn_around():
        for i in range(2):
            turn_left()
if __name__ == '__main__':
    main()
",55,"    from karel. stanfordkarel import*
    def main ()
        move()
        move()
        turn-right ()
        move()
        turn-left()
            move()
            pick-beeper()
            return-home()
    def return_home()
        turn-around()
        move()
            turn-right()
            move ()
            turn-left ()
            move()
            move()
            turn-around ()
    det turn-right()
            for i in range (3):
                turn-left ()
    def turn- around()
            for i in range (2):
                turn-left ()
if
    name == '_main' ':
    main()
",193,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
        move()
        pick_beeper()
        return_home()

def return_home():
    turn_around()
    move()
        turn_right()
        move()
        turn_left()
        move()
        move()
        turn_around()

def turn_right():
        for i in range(3):
            turn_left()

def turn_around():
        for i in range(2):
            turn_left()
if __name__ == '__main__':
    main()
",55,"    from karel. stanfordkarel import*
    def main ()
        move()
        move()
        turn-right ()
        move()
        turn-left()
        move()
        pick-beeper()
        return-home()
    def return_home()
        turn-around()
        move()
        turn-right()
        move ()
        turn-left ()
        move()
        move()
        turn-around ()
    det turn-right()
        for i in range (3):
            turn-left ()
    def turn- around()
        for i in range (2):
            turn-left ()
if
    name == '_main' ':
    main()
",141,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    for i in range(2):
        turn_left()
if __name__ == '__main__':
    main()
",3,"    from karel. stanfordkarel import*
    def main ()
        move()
        move()
        turn-right ()
        move()
        turn-left()
        move()
        pick-beeper()
        return-home()
    def return_home()
        turn-around()
        move()
        turn-right()
        move ()
        turn-left ()
        move()
        move()
        turn-around ()
    det turn-right()
        for i in range (3):
            turn-left ()
    def turn- around()
        for i in range (2):
            turn-left ()
if
    name == '_main' ':
    main()
",141,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    for i in range(2):
        turn_left()
if __name__ == '__main__':
    main()
",3,"    from karel. stanfordkarel import*
    def main ()
        move()
        move()
        turn-right ()
        move()
        turn-left()
        move()
        pick-beeper()
        return-home()
    def return_home()
        turn-around()
        move()
        turn-right()
        move ()
        turn-left ()
        move()
        move()
        turn-around ()
    det turn-right()
        for i in range (3):
            turn-left ()
    def turn- around()
        for i in range (2):
            turn-left ()
if
    name == '_main' ':
    main()
",141,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    for i in range(2):
        turn_left()
if __name__ == '__main__':
    main()
",3,"    from karel. stanfordkarel import*
    def main ()
        move()
        move()
        turn-right ()
        move()
        turn-left()
        move()
        pick-beeper()
        return-home()
    def return_home()
        turn-around()
        move()
        turn-right()
        move ()
        turn-left ()
        move()
        move()
        turn-around ()
    det turn-right()
        for i in range (3):
            turn-left ()
    def turn- around()
        for i in range (2):
            turn-left ()
if
    name == '_main' ':
    main()
",141,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    for i in range(2):
        turn_left()
if __name__ == '__main__':
    main()
",3,"    from karel. stanfordkarel import*
    def main ()
        move()
        move()
        turn-right ()
        move()
        turn-left()
        move()
        pick-beeper()
        return-home()
    def return_home()
        turn-around()
        move()
        turn-right()
        move ()
        turn-left ()
        move()
        move()
        turn-around ()
    det turn-right()
        for i in range (3):
            turn-left ()
    def turn- around()
        for i in range (2):
            turn-left ()
if
    name == '_main' ':
    main()
",141,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    for i in range(2):
        turn_left()
if __name__ == '__main__':
    main()
",3,"    from karel. stanfordkarel import*
    def main ()
        move()
        move()
        turn-right ()
        move()
        turn-left()
        move()
        pick-beeper()
        return-home()
    def return_home()
        turn-around()
        move()
        turn-right()
        move ()
        turn-left ()
        move()
        move()
        turn-around ()
    det turn-right()
        for i in range (3):
            turn-left ()
    def turn- around()
        for i in range (2):
            turn-left ()
if
    name == '_main' ':
    main()
",141,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    for i in range(2):
        turn_left()
if __name__ == '__main__':
    main()
",3,"    from karel. stanfordkarel import*
    def main ()
        move()
        move()
        turn-right ()
        move()
        turn-left()
        move()
        pick-beeper()
        return-home()
    def return_home()
        turn-around()
        move()
        turn-right()
        move ()
        turn-left ()
        move()
        move()
        turn-around ()
    det turn-right()
        for i in range (3):
            turn-left ()
    def turn- around()
        for i in range (2):
            turn-left ()
if
    name == '_main' ':
    main()
",141,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    for i in range(2):
        turn_left()
if __name__ == '__main__':
    main()
",3,"    from karel. stanfordkarel import*
    def main ()
        move()
        move()
        turn-right ()
        move()
        turn-left()
        move()
        pick-beeper()
        return-home()
    def return_home()
        turn-around()
        move()
        turn-right()
        move ()
        turn-left ()
        move()
        move()
        turn-around ()
    det turn-right()
        for i in range (3):
            turn-left ()
    def turn- around()
        for i in range (2):
            turn-left ()
if
    name == '_main' ':
    main()
",141,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    for i in range(2):
        turn_left()
if __name__ == '__main__':
    main()
",3,"    from karel. stanfordkarel import*
    def main ()
        move()
        move()
        turn-right ()
        move()
        turn-left()
        move()
        pick-beeper()
        return-home()
    def return_home()
        turn-around()
        move()
        turn-right()
        move ()
        turn-left ()
        move()
        move()
        turn-around ()
    det turn-right()
        for i in range (3):
            turn-left ()
    def turn- around()
        for i in range (2):
            turn-left ()
if
    name == '_main' ':
    main()
",141,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    for i in range(2):
        turn_left()
if __name__ == '__main__':
    main()
",3,"    from karel. stanfordkarel import*
    def main ()
        move()
        move()
        turn-right ()
        move()
        turn-left()
        move()
        pick-beeper()
        return-home()
    def return_home()
        turn-around()
        move()
        turn-right()
        move ()
        turn-left ()
        move()
        move()
        turn-around ()
    det turn-right()
        for i in range (3):
            turn-left ()
    def turn- around()
        for i in range (2):
            turn-left ()
if
    name == '_main' ':
    main()
",141,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    for i in range(2):
        turn_left()
if __name__ == '__main__':
    main()
",3,"    from karel. stanfordkarel import*
    def main ()
        move()
        move()
        turn-right ()
        move()
        turn-left()
        move()
        pick-beeper()
        return-home()
    def return_home()
        turn-around()
        move()
        turn-right()
        move ()
        turn-left ()
        move()
        move()
        turn-around ()
    det turn-right()
        for i in range (3):
            turn-left ()
    def turn- around()
        for i in range (2):
            turn-left ()
if
    name == '_main' ':
    main()
",141,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    for i in range(2):
        turn_left()
if __name__ == '__main__':
    main()
",3,"    from karel. stanfordkarel import*
    def main ()
        move()
        move()
        turn-right ()
        move()
        turn-left()
        move()
        pick-beeper()
        return-home()
    def return_home()
        turn-around()
        move()
        turn-right()
        move ()
        turn-left ()
        move()
        move()
        turn-around ()
    det turn-right()
        for i in range (3):
            turn-left ()
    def turn- around()
        for i in range (2):
            turn-left ()
if
    name == '_main' ':
    main()
",141,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    for i in range(2):
        turn_left()
if __name__ == '__main__':
    main()
",3,"    from karel. stanfordkarel import*
    def main ()
        move()
        move()
        turn-right ()
        move()
        turn-left()
        move()
        pick-beeper()
        return-home()
    def return_home()
        turn-around()
        move()
        turn-right()
        move ()
        turn-left ()
        move()
        move()
        turn-around ()
    det turn-right()
        for i in range (3):
            turn-left ()
    def turn- around()
        for i in range (2):
            turn-left ()
if
    name == '_main' ':
    main()
",141,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    for i in range(2):
        turn_left()
if __name__ == '__main__':
    main()
",3,"    from karel. stanfordkarel import*
    def main ()
        move()
        move()
        turn-right ()
        move()
        turn-left()
        move()
        pick-beeper()
        return-home()
    def return_home()
        turn-around()
        move()
        turn-right()
        move ()
        turn-left ()
        move()
        move()
        turn-around ()
    det turn-right()
        for i in range (3):
            turn-left ()
    def turn- around()
        for i in range (2):
            turn-left ()
if
    name == '_main' ':
    main()
",141,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    for i in range(2):
        turn_left()
if __name__ == '__main__':
    main()
",3,"    from karel. stanfordkarel import*
    def main ()
        move()
        move()
        turn-right ()
        move()
        turn-left()
        move()
        pick-beeper()
        return-home()
    def return_home()
        turn-around()
        move()
        turn-right()
        move ()
        turn-left ()
        move()
        move()
        turn-around ()
    det turn-right()
        for i in range (3):
            turn-left ()
    def turn- around()
        for i in range (2):
            turn-left ()
if
    name == '_main' ':
    main()
",141,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    for i in range(2):
        turn_left()
if __name__ == '__main__':
    main()
",3,"    from karel. stanfordkarel import*
    def main ()
        move()
        move()
        turn-right ()
        move()
        turn-left()
        move()
        pick-beeper()
        return-home()
    def return_home()
        turn-around()
        move()
        turn-right()
        move ()
        turn-left ()
        move()
        move()
        turn-around ()
    det turn-right()
        for i in range (3):
            turn-left ()
    def turn- around()
        for i in range (2):
            turn-left ()
if
    name == '_main' ':
    main()
",141,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    for i in range(2):
        turn_left()
if __name__ == '__main__':
    main()
",3,"    from karel. stanfordkarel import*
    def main ()
        move()
        move()
        turn-right ()
        move()
        turn-left()
        move()
        pick-beeper()
        return-home()
    def return_home()
        turn-around()
        move()
        turn-right()
        move ()
        turn-left ()
        move()
        move()
        turn-around ()
    det turn-right()
        for i in range (3):
            turn-left ()
    def turn- around()
        for i in range (2):
            turn-left ()
if
    name == '_main' ':
    main()
",141,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    for i in range(2):
        turn_left()
if __name__ == '__main__':
    main()
",3,"    from karel. stanfordkarel import*
    def main ()
        move()
        move()
        turn-right ()
        move()
        turn-left()
        move()
        pick-beeper()
        return-home()
    def return_home()
        turn-around()
        move()
        turn-right()
        move ()
        turn-left ()
        move()
        move()
        turn-around ()
    det turn-right()
        for i in range (3):
            turn-left ()
    def turn- around()
        for i in range (2):
            turn-left ()
if
    name == '_main' ':
    main()
",141,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    for i in range(2):
        turn_left()
if __name__ == '__main__':
    main()
",3,"    from karel. stanfordkarel import*
    def main ()
        move()
        move()
        turn-right ()
        move()
        turn-left()
        move()
        pick-beeper()
        return-home()
    def return_home()
        turn-around()
        move()
        turn-right()
        move ()
        turn-left ()
        move()
        move()
        turn-around ()
    det turn-right()
        for i in range (3):
            turn-left ()
    def turn- around()
        for i in range (2):
            turn-left ()
if
    name == '_main' ':
    main()
",141,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    for i in range(2):
        turn_left()
if __name__ == '__main__':
    main()
",3,"    from karel. stanfordkarel import*
    def main ()
        move()
        move()
        turn-right ()
        move()
        turn-left()
        move()
        pick-beeper()
        return-home()
    def return_home()
        turn-around()
        move()
        turn-right()
        move ()
        turn-left ()
        move()
        move()
        turn-around ()
    det turn-right()
        for i in range (3):
            turn-left ()
    def turn- around()
        for i in range (2):
            turn-left ()
if
    name == '_main' ':
    main()
",141,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    for i in range(2):
        turn_left()
if __name__ == '__main__':
    main()
",3,"    from karel. stanfordkarel import*
    def main ()
        move()
        move()
        turn-right ()
        move()
        turn-left()
        move()
        pick-beeper()
        return-home()
    def return_home()
        turn-around()
        move()
        turn-right()
        move ()
        turn-left ()
        move()
        move()
        turn-around ()
    det turn-right()
        for i in range (3):
            turn-left ()
    def turn- around()
        for i in range (2):
            turn-left ()
if
    name == '_main' ':
    main()
",141,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    for i in range(2):
        turn_left()
if __name__ == '__main__':
    main()
",3,"    from karel. stanfordkarel import*
    def main ()
        move()
        move()
        turn-right ()
        move()
        turn-left()
        move()
        pick-beeper()
        return-home()
    def return_home()
        turn-around()
        move()
        turn-right()
        move ()
        turn-left ()
        move()
        move()
        turn-around ()
    det turn-right()
        for i in range (3):
            turn-left ()
    def turn- around()
        for i in range (2):
            turn-left ()
if
    name == '_main' ':
    main()
",141,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    for i in range(2):
        turn_left()
if __name__ == '__main__':
    main()
",3,"    from karel. stanfordkarel import*
    def main ()
        move()
        move()
        turn-right ()
        move()
        turn-left()
        move()
        pick-beeper()
        return-home()
    def return_home()
        turn-around()
        move()
        turn-right()
        move ()
        turn-left ()
        move()
        move()
        turn-around ()
    det turn-right()
        for i in range (3):
            turn-left ()
    def turn- around()
        for i in range (2):
            turn-left ()
if
    name == '_main' ':
    main()
",141,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    for i in range(2):
        turn_left()
if __name__ == '__main__':
    main()
",3,"    from karel. stanfordkarel import*
    def main ()
        move()
        move()
        turn-right ()
        move()
        turn-left()
        move()
        pick-beeper()
        return-home()
    def return_home()
        turn-around()
        move()
        turn-right()
        move ()
        turn-left ()
        move()
        move()
        turn-around ()
    det turn-right()
        for i in range (3):
            turn-left ()
    def turn- around()
        for i in range (2):
            turn-left ()
if
    name == '_main' ':
    main()
",141,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    for i in range(2):
        turn_left()
if __name__ == '__main__':
    main()
",3,"    from karel. stanfordkarel import*
    def main ()
        move()
        move()
        turn-right ()
        move()
        turn-left()
        move()
        pick-beeper()
        return-home()
    def return_home()
        turn-around()
        move()
        turn-right()
        move ()
        turn-left ()
        move()
        move()
        turn-around ()
    det turn-right()
        for i in range (3):
            turn-left ()
    def turn- around()
        for i in range (2):
            turn-left ()
if
    name == '_main' ':
    main()
",141,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    for i in range(2):
        turn_left()
if __name__ == '__main__':
    main()
",3,"    from karel. stanfordkarel import*
    def main ()
        move()
        move()
        turn-right ()
        move()
        turn-left()
        move()
        pick-beeper()
        return-home()
    def return_home()
        turn-around()
        move()
        turn-right()
        move ()
        turn-left ()
        move()
        move()
        turn-around ()
    det turn-right()
        for i in range (3):
            turn-left ()
    def turn- around()
        for i in range (2):
            turn-left ()
if
    name == '_main' ':
    main()
",141,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    for i in range(2):
        turn_left()
if __name__ == '__main__':
    main()
",3,"    from karel. stanfordkarel import*
    def main ()
        move()
        move()
        turn-right ()
        move()
        turn-left()
        move()
        pick-beeper()
        return-home()
    def return_home()
        turn-around()
        move()
        turn-right()
        move ()
        turn-left ()
        move()
        move()
        turn-around ()
    det turn-right()
        for i in range (3):
            turn-left ()
    def turn- around()
        for i in range (2):
            turn-left ()
if
    name == '_main' ':
    main()
",141,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    for i in range(2):
        turn_left()
if __name__ == '__main__':
    main()
",3,"    from karel. stanfordkarel import*
    def main ()
        move()
        move()
        turn-right ()
        move()
        turn-left()
        move()
        pick-beeper()
        return-home()
    def return_home()
        turn-around()
        move()
        turn-right()
        move ()
        turn-left ()
        move()
        move()
        turn-around ()
    det turn-right()
        for i in range (3):
            turn-left ()
    def turn- around()
        for i in range (2):
            turn-left ()
if
    name == '_main' ':
    main()
",141,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    for i in range(2):
        turn_left()
if __name__ == '__main__':
    main()
",3,"    from karel. stanfordkarel import*
    def main ()
        move()
        move()
        turn-right ()
        move()
        turn-left()
        move()
        pick-beeper()
        return-home()
    def return_home()
        turn-around()
        move()
        turn-right()
        move ()
        turn-left ()
        move()
        move()
        turn-around ()
    det turn-right()
        for i in range (3):
            turn-left ()
    def turn- around()
        for i in range (2):
            turn-left ()
if
    name == '_main' ':
    main()
",141,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    for i in range(2):
        turn_left()
if __name__ == '__main__':
    main()
",3,"    from karel. stanfordkarel import*
    def main ()
        move()
        move()
        turn-right ()
        move()
        turn-left()
        move()
        pick-beeper()
        return-home()
    def return_home()
        turn-around()
        move()
        turn-right()
        move ()
        turn-left ()
        move()
        move()
        turn-around ()
    det turn-right()
        for i in range (3):
            turn-left ()
    def turn- around()
        for i in range (2):
            turn-left ()
if
    name == '_main' ':
    main()
",141,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    for i in range(2):
        turn_left()
if __name__ == '__main__':
    main()
",3,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
move()
move()
turn_right()
move()
turn_left()
move()
pick_beeper()
return_home()

def return_home():
turn_around()
move()
turn_right()
move()
turn_left()
move()
move()
turn_around()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
for i in range(2):
turn_left()
if __name__ == '__main__':
main()
",95,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
move()
move()
turn_right()
move()
turn_left()
move()
pick_beeper()
return_home()

def return_home():
turn_around()
move()
turn_right()
move()
turn_left()
move()
move()
turn_around()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
for i in range(2):
turn_left()
if __name__ == '__main__':
main()
",95,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
move()
move()
turn_right()
move()
turn_left()
move()
pick_beeper()
return_home()

def return_home():
turn_around()
move()
turn_right()
move()
turn_left()
move()
move()
turn_around()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
for i in range(2):
turn_left()
if __name__ == '__main__':
main()
",95,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
    move()
    move()
    turn-right ()
    move()
    turn-left()
    move()
    pick-beeper()
    return-home()
def return_home()
    turn-around()
    move()
    turn-right()
    move ()
    turn-left ()
    move()
    move()
    turn-around ()
det turn-right()
    for i in range (3):
    turn-left ()
def turn- around()
    for i in range (2):
    turn-left ()
if
name == '_main' ':
main()
",56,"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
    turn_left()

def turn_around():
    for i in range(2):
    turn_left()
if __name__ == '__main__':
    main()
",11,"from karel. stanfordkarel import*
def main ()
move()
move()
turn-right ()
move()
turn-left()
move()
pick-beeper()
return-home()
def return_home()
turn-around()
move()
turn-right()
move ()
turn-left ()
move()
move()
turn-around ()
det turn-right()
for i in range (3):
turn-left ()
def turn- around()
for i in range (2):
turn-left ()
if
name == '_main' ':
main()
",136,"from karel.stanfordkarel import *

def main():
move()
move()
turn_right()
move()
turn_left()
move()
pick_beeper()
return_home()

def return_home():
turn_around()
move()
turn_right()
move()
turn_left()
move()
move()
turn_around()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
for i in range(2):
turn_left()
if __name__ == '__main__':
main()
",95,"from karel. stanfordkarel import*
def main ()
move()
move()
turn-right ()
move()
turn-left()
move()
pick-beeper()
return-home()
def return_home()
turn-around()
move()
turn-right()
move ()
turn-left ()
move()
move()
turn-around ()
det turn-right()
for i in range (3):
turn-left ()
def turn- around()
for i in range (2):
turn-left ()
if
name == '_main' ':
main()
",136,"from karel.stanfordkarel import *

def main():
move()
move()
turn_right()
move()
turn_left()
move()
pick_beeper()
return_home()

def return_home():
turn_around()
move()
turn_right()
move()
turn_left()
move()
move()
turn_around()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
for i in range(2):
turn_left()
if __name__ == '__main__':
main()
",95,"from karel. stanfordkarel import*
def main ()
move()
move()
turn-right ()
move()
turn-left()
move()
pick-beeper()
return-home()
def return_home()
turn-around()
move()
turn-right()
move ()
turn-left ()
move()
move()
turn-around ()
det turn-right()
for i in range (3):
turn-left ()
def turn- around()
for i in range (2):
turn-left ()
if
name == '_main' ':
main()
",136,"from karel.stanfordkarel import *

def main():
move()
move()
turn_right()
move()
turn_left()
move()
pick_beeper()
return_home()

def return_home():
turn_around()
move()
turn_right()
move()
turn_left()
move()
move()
turn_around()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
for i in range(2):
turn_left()
if __name__ == '__main__':
main()
",95,"from karel. stanfordkarel import*
def main ()
move()
move()
turn-right ()
move()
turn-left()
move()
pick-beeper()
return-home()
def return_home()
turn-around()
move()
turn-right()
move ()
turn-left ()
move()
move()
turn-around ()
det turn-right()
for i in range (3):
turn-left ()
def turn- around()
for i in range (2):
turn-left ()
if
name == '_main' ':
main()
",136,"from karel.stanfordkarel import *

def main():
move()
move()
turn_right()
move()
turn_left()
move()
pick_beeper()
return_home()

def return_home():
turn_around()
move()
turn_right()
move()
turn_left()
move()
move()
turn_around()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
for i in range(2):
turn_left()
if __name__ == '__main__':
main()
",95,"from karel. stanfordkarel import*
def main ()
move()
move()
turn-right ()
move()
turn-left()
move()
pick-beeper()
return-home()
def return_home()
turn-around()
move()
turn-right()
move ()
turn-left ()
move()
move()
turn-around ()
det turn-right()
for i in range (3):
turn-left ()
def turn- around()
for i in range (2):
turn-left ()
if
name == '_main' ':
main()
",136,"from karel.stanfordkarel import *

def main():
move()
move()
turn_right()
move()
turn_left()
move()
pick_beeper()
return_home()

def return_home():
turn_around()
move()
turn_right()
move()
turn_left()
move()
move()
turn_around()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
for i in range(2):
turn_left()
if __name__ == '__main__':
main()
",95,"from karel. stanfordkarel import*
def main ()
move()
move()
turn-right ()
move()
turn-left()
move()
pick-beeper()
return-home()
def return_home()
turn-around()
move()
turn-right()
move ()
turn-left ()
move()
move()
turn-around ()
det turn-right()
for i in range (3):
turn-left ()
def turn- around()
for i in range (2):
turn-left ()
if
name == '_main' ':
main()
",136,"from karel.stanfordkarel import *

def main():
move()
move()
turn_right()
move()
turn_left()
move()
pick_beeper()
return_home()

def return_home():
turn_around()
move()
turn_right()
move()
turn_left()
move()
move()
turn_around()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
for i in range(2):
turn_left()
if __name__ == '__main__':
main()
",95,"from karel. stanfordkarel import*
def main ()
move()
move()
turn-right ()
move()
turn-left()
move()
pick-beeper()
return-home()
def return_home()
turn-around()
move()
turn-right()
move ()
turn-left ()
move()
move()
turn-around ()
det turn-right()
for i in range (3):
turn-left ()
def turn- around()
for i in range (2):
turn-left ()
if
name == '_main' ':
main()
",136,"from karel.stanfordkarel import *

def main():
move()
move()
turn_right()
move()
turn_left()
move()
pick_beeper()
return_home()

def return_home():
turn_around()
move()
turn_right()
move()
turn_left()
move()
move()
turn_around()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
for i in range(2):
turn_left()
if __name__ == '__main__':
main()
",95,"from karel. stanfordkarel import*
def main ()
move()
move()
turn-right ()
move()
turn-left()
move()
pick-beeper()
return-home()
def return_home()
turn-around()
move()
turn-right()
move ()
turn-left ()
move()
move()
turn-around ()
det turn-right()
for i in range (3):
turn-left ()
def turn- around()
for i in range (2):
turn-left ()
if
name == '_main' ':
main()
",136,"from karel.stanfordkarel import *

def main():
move()
move()
turn_right()
move()
turn_left()
move()
pick_beeper()
return_home()

def return_home():
turn_around()
move()
turn_right()
move()
turn_left()
move()
move()
turn_around()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
for i in range(2):
turn_left()
if __name__ == '__main__':
main()
",95,"from karel. stanfordkarel import*
def main ()
move()
move()
turn-right ()
move()
turn-left()
move()
pick-beeper()
return-home()
def return_home()
turn-around()
move()
turn-right()
move ()
turn-left ()
move()
move()
turn-around ()
det turn-right()
for i in range (3):
turn-left ()
def turn- around()
for i in range (2):
turn-left ()
if
name == '_main' ':
main()
",136,"from karel.stanfordkarel import *

def main():
move()
move()
turn_right()
move()
turn_left()
move()
pick_beeper()
return_home()

def return_home():
turn_around()
move()
turn_right()
move()
turn_left()
move()
move()
turn_around()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
for i in range(2):
turn_left()
if __name__ == '__main__':
main()
",95,"from karel. stanfordkarel import*
def main ()
move()
move()
turn-right ()
move()
turn-left()
move()
pick-beeper()
return-home()
def return_home()
turn-around()
move()
turn-right()
move ()
turn-left ()
move()
move()
turn-around ()
det turn-right()
for i in range (3):
turn-left ()
def turn- around()
for i in range (2):
turn-left ()
if
name == '_main' ':
main()
",136,"from karel.stanfordkarel import *

def main():
move()
move()
turn_right()
move()
turn_left()
move()
pick_beeper()
return_home()

def return_home():
turn_around()
move()
turn_right()
move()
turn_left()
move()
move()
turn_around()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
for i in range(2):
turn_left()
if __name__ == '__main__':
main()
",95,"from karel. stanfordkarel import*
def main ()
move()
move()
turn-right ()
move()
turn-left()
move()
pick-beeper()
return-home()
def return_home()
turn-around()
move()
turn-right()
move ()
turn-left ()
move()
move()
turn-around ()
det turn-right()
for i in range (3):
turn-left ()
def turn- around()
for i in range (2):
turn-left ()
if
name == '_main' ':
main()
",136,"from karel.stanfordkarel import *

def main():
move()
move()
turn_right()
move()
turn_left()
move()
pick_beeper()
return_home()

def return_home():
turn_around()
move()
turn_right()
move()
turn_left()
move()
move()
turn_around()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
for i in range(2):
turn_left()
if __name__ == '__main__':
main()
",95,"from karel. stanfordkarel import*
def main ()
move()
move()
turn-right ()
move()
turn-left()
move()
pick-beeper()
return-home()
def return_home()
turn-around()
move()
turn-right()
move ()
turn-left ()
move()
move()
turn-around ()
det turn-right()
for i in range (3):
turn-left ()
def turn- around()
for i in range (2):
turn-left ()
if
name == '_main' ':
main()
",136,"from karel.stanfordkarel import *

def main():
move()
move()
turn_right()
move()
turn_left()
move()
pick_beeper()
return_home()

def return_home():
turn_around()
move()
turn_right()
move()
turn_left()
move()
move()
turn_around()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
for i in range(2):
turn_left()
if __name__ == '__main__':
main()
",95,"from karel. stanfordkarel import*
def main ()
move()
move()
turn-right ()
move()
turn-left()
move()
pick-beeper()
return-home()
def return_home()
turn-around()
move()
turn-right()
move ()
turn-left ()
move()
move()
turn-around ()
det turn-right()
for i in range (3):
turn-left ()
def turn- around()
for i in range (2):
turn-left ()
if
name == '_main' ':
main()
",136,"from karel.stanfordkarel import *

def main():
move()
move()
turn_right()
move()
turn_left()
move()
pick_beeper()
return_home()

def return_home():
turn_around()
move()
turn_right()
move()
turn_left()
move()
move()
turn_around()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
for i in range(2):
turn_left()
if __name__ == '__main__':
main()
",95,"from karel. stanfordkarel import*
def main ()
move()
move()
turn-right ()
move()
turn-left()
move()
pick-beeper()
return-home()
def return_home()
turn-around()
move()
turn-right()
move ()
turn-left ()
move()
move()
turn-around ()
det turn-right()
for i in range (3):
turn-left ()
def turn- around()
for i in range (2):
turn-left ()
if
name == '_main' ':
main()
",136,"from karel.stanfordkarel import *

def main():
move()
move()
turn_right()
move()
turn_left()
move()
pick_beeper()
return_home()

def return_home():
turn_around()
move()
turn_right()
move()
turn_left()
move()
move()
turn_around()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
for i in range(2):
turn_left()
if __name__ == '__main__':
main()
",95,"from karel. stanfordkarel import*
def main ()
move()
move()
turn-right ()
move()
turn-left()
move()
pick-beeper()
return-home()
def return_home()
turn-around()
move()
turn-right()
move ()
turn-left ()
move()
move()
turn-around ()
det turn-right()
for i in range (3):
turn-left ()
def turn- around()
for i in range (2):
turn-left ()
if
name == '_main' ':
main()
",136,"from karel.stanfordkarel import *

def main():
move()
move()
turn_right()
move()
turn_left()
move()
pick_beeper()
return_home()

def return_home():
turn_around()
move()
turn_right()
move()
turn_left()
move()
move()
turn_around()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
for i in range(2):
turn_left()
if __name__ == '__main__':
main()
",95
"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string: "")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)

if __name__ == ""__main__"":
    main()
","de main () :
vowel-count=0
vowels= ['à','e', 'i', 'o','u']
input_string = input (""Enter the string:"")
input string = input_string . lower ()
for char in input string:
for vowel in vowels :
if char == vawel:
vowel-count +=1
print (nouvel count)
if _name_ = = '_main _- ':
main ()",111,"de main ():
    vowel-count=0
            vowels=['à' ,'e' ,' i','o', 'u']
                input-string = input (""Enter the string:"")
                    input string = input_string . lower ()
                        for char in input string:
                                    for vowel in vowels :
                                        if char == vowel:
                                            vowel-count+=1
                                point (nouvel_count)
        y_name _== '_main __ :
                            main ( )
",247,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels :
            if char == vowel:
                vowel_count+=1
    print(vowel_count)

if __name__ == ""__main__"":
    main()
",23,"de main ():
    vowel-count=0
            vowels=['à' ,'e' ,' i','o', 'u']
                input-string = input (""Enter the string:"")
                    input string = input_string . lower ()
                        for char in input string:
                                    for vowel in vowels :
                                        if char == vowel:
                                            vowel-count+=1
                                point (nouvel_count)
        y_name _== '_main __ :
                            main ( )
",247,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
        input_string = input(""Enter the string:"")
            input_string = input_string.lower()
                for char in input_string:
                    for vowel in vowels:
                        if char == vowel:
                            vowel_count+=1
                print(vowel_count)
if __name__ == '__main__':
    main()
",97,"de main ():
    vowel-count=0
            vowels=['à' ,'e' ,' i','o', 'u']
                input-string = input (""Enter the string:"")
                    input string = input_string . lower ()
                        for char in input string:
                                    for vowel in vowels :
                                        if char == vowel:
                                            vowel-count+=1
                                point (nouvel_count)
        y_name _== '_main __ :
                            main ( )
",247,"def main():
    vowel_count=0
        vowels=['a' ,'e' ,'i','o', 'u']
            input_string = input(""Enter the string:"")
                input_string = input_string.lower()
                    for char in input_string:
                                for vowel in vowels:
                                    if char == vowel:
                                        vowel_count+=1
                            print(vowel_count)
if __name__ == '__main__':
    main()
",161,"de main ():
    vowel-count=0
            vowels=['à' ,'e' ,' i','o', 'u']
                input-string = input (""Enter the string:"")
                    input string = input_string . lower ()
                        for char in input string:
                                for vowel in vowels :
                                    if char == vowel:
                                        vowel-count+=1
                            point (nouvel_count)
        y_name _== '_main __ :
                        main ( )
",227,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count+=1
    print(vowel_count)
if __name__ == '__main__':
    main()
",25,"de main ():
    vowel-count=0
            vowels=['à' ,'e' ,' i','o', 'u']
                input-string = input (""Enter the string:"")
                    input string = input_string . lower ()
                        for char in input string:
                                for vowel in vowels :
                                    if char == vowel:
                                        vowel-count+=1
                            point (nouvel_count)
        y_name _== '_main __ :
                        main ( )
",227,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
        print(vowel_count)
if __name__ == '__main__':
    main()
",45,"de main ():
    vowel-count=0
            vowels=['à' ,'e' ,' i','o', 'u']
                input-string = input (""Enter the string:"")
                    input string = input_string . lower ()
                        for char in input string:
                                for vowel in vowels :
                                    if char == vowel:
                                        vowel-count+=1
                            point (nouvel_count)
        y_name _== '_main __ :
                        main ( )
",227,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count+=1
    print(vowel_count)
if __name__ == '__main__':
    main()
",25,"de main ():
    vowel-count=0
            vowels=['à' ,'e' ,' i','o', 'u']
                input-string = input (""Enter the string:"")
                    input string = input_string . lower ()
                        for char in input string:
                                for vowel in vowels :
                                    if char == vowel:
                                        vowel-count+=1
                            point (nouvel_count)
        y_name _== '_main __ :
                        main ( )
",227,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count+=1
    print(vowel_count)
if __name__ == '__main__':
    main()
",25,"de main ():
    vowel-count=0
            vowels=['à' ,'e' ,' i','o', 'u']
                input-string = input (""Enter the string:"")
                    input string = input_string . lower ()
                        for char in input string:
                                for vowel in vowels :
                                    if char == vowel:
                                        vowel-count+=1
                            point (nouvel_count)
        y_name _== '_main __ :
                        main ( )
",227,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count+=1
    print(vowel_count)
if __name__ == '__main__':
    main()
",25,"de main ():
    vowel-count=0
            vowels=['à' ,'e' ,' i','o', 'u']
                input-string = input (""Enter the string:"")
                    input string = input_string . lower ()
                        for char in input string:
                                for vowel in vowels :
                                    if char == vowel:
                                        vowel-count+=1
                            point (nouvel_count)
        y_name _== '_main __ :
                        main ( )
",227,"def main():
    vowel_count=0
        vowels=['a' ,'e' ,'i','o', 'u']
            input_string = input(""Enter the string:"")
                input_string = input_string.lower()
                    for char in input_string:
                            for vowel in vowels:
                                if char == vowel:
                                    vowel_count+=1
                        print(vowel_count)
    if __name__ == '__main__':
                        main()
",168,"de main ():
    vowel-count=0
            vowels=['à' ,'e' ,' i','o', 'u']
                input-string = input (""Enter the string:"")
                    input string = input_string . lower ()
                        for char in input string:
                                for vowel in vowels :
                                    if char == vowel:
                                        vowel-count+=1
                            point (nouvel_count)
        y_name _== '_main __ :
                        main ( )
",227,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count+=1
    print(vowel_count)
if __name__ == '__main__':
    main()
",25,"de main ():
    vowel-count=0
            vowels=['à' ,'e' ,' i','o', 'u']
                input-string = input (""Enter the string:"")
                    input string = input_string . lower ()
                        for char in input string:
                                for vowel in vowels :
                                    if char == vowel:
                                        vowel-count+=1
                            point (nouvel_count)
        y_name _== '_main __ :
                        main ( )
",227,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count+=1
    print(vowel_count)
if __name__ == '__main__':
    main()
",25,"de main ():
    vowel-count=0
            vowels=['à' ,'e' ,' i','o', 'u']
                input-string = input (""Enter the string:"")
                    input string = input_string . lower ()
                        for char in input string:
                                for vowel in vowels :
                                    if char == vowel:
                                        vowel-count+=1
                            point (nouvel_count)
        y_name _== '_main __ :
                        main ( )
",227,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count+=1
    print(vowel_count)
if __name__ == '__main__':
    main()
",25,"de main ():
    vowel-count=0
            vowels=['à' ,'e' ,' i','o', 'u']
                input-string = input (""Enter the string:"")
                    input string = input_string . lower ()
                        for char in input string:
                                for vowel in vowels :
                                    if char == vowel:
                                        vowel-count+=1
                            point (nouvel_count)
        y_name _== '_main __ :
                        main ( )
",227,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count+=1
    print(vowel_count)
if __name__ == '__main__':
    main()
",25,"de main ():
    vowel-count=0
        vowels=['à' ,'e' ,' i','o', 'u']
            input-string = input (""Enter the string:"")
                input string = input_string . lower ()
                    for char in input string:
                            for vowel in vowels :
                                if char == vowel:
                                    vowel-count+=1
                        point (nouvel_count)
        y_name _== '_main __ :
                    main ( )
",192,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
        input_string = input(""Enter the string:"")
            input_string = input_string.lower()
                for char in input_string:
                    for vowel in vowels:
                        if char == vowel:
                            vowel_count+=1
                print(vowel_count)
if __name__ == '__main__':
    main()
",97,"de main ():
    vowel-count=0
        vowels=['à' ,'e' ,' i','o', 'u']
            input-string = input (""Enter the string:"")
                input string = input_string . lower ()
                    for char in input string:
                            for vowel in vowels :
                                if char == vowel:
                                    vowel-count+=1
                        point (nouvel_count)
        y_name _== '_main __ :
                    main ( )
",192,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
        input_string = input(""Enter the string:"")
            input_string = input_string.lower()
                for char in input_string:
                    for vowel in vowels:
                        if char == vowel:
                            vowel_count+=1
                print(vowel_count)
if __name__ == '__main__':
    main()
",97,"de main ():
    vowel-count=0
        vowels=['à' ,'e' ,' i','o', 'u']
            input-string = input (""Enter the string:"")
                input string = input_string . lower ()
                    for char in input string:
                            for vowel in vowels :
                                if char == vowel:
                                    vowel-count+=1
                        point (nouvel_count)
        y_name _== '_main __ :
                    main ( )
",192,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
        input_string = input(""Enter the string:"")
            input_string = input_string.lower()
                for char in input_string:
                        for vowel in vowels:
                            if char == vowel:
                                vowel_count+=1
                    print(vowel_count)
if __name__ == '__main__':
    main()
",113,"de main ():
    vowel-count=0
        vowels=['à' ,'e' ,' i','o', 'u']
            input-string = input (""Enter the string:"")
                input string = input_string . lower ()
                    for char in input string:
                            for vowel in vowels :
                                if char == vowel:
                                    vowel-count+=1
                        point (nouvel_count)
        y_name _== '_main __ :
                    main ( )
",192,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
        input_string = input(""Enter the string:"")
            input_string = input_string.lower()
                for char in input_string:
                        for vowel in vowels:
                            if char == vowel:
                                vowel_count+=1
                    print(vowel_count)
if __name__ == '__main__':
    main()
",113,"de main ():
    vowel-count=0
        vowels=['à' ,'e' ,' i','o', 'u']
            input-string = input (""Enter the string:"")
                input string = input_string . lower ()
                    for char in input string:
                            for vowel in vowels :
                                if char == vowel:
                                    vowel-count+=1
                        point (nouvel_count)
        y_name _== '_main __ :
                    main ( )
",192,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
        input_string = input(""Enter the string:"")
            input_string = input_string.lower()
                for char in input_string:
                        for vowel in vowels:
                            if char == vowel:
                                vowel_count+=1
                    print(vowel_count)
if __name__ == '__main__':
    main()
",113,"de main ():
    vowel-count=0
        vowels=['à' ,'e' ,' i','o', 'u']
            input-string = input (""Enter the string:"")
                input string = input_string . lower ()
                    for char in input string:
                            for vowel in vowels :
                                if char == vowel:
                                    vowel-count+=1
                        point (nouvel_count)
        y_name _== '_main __ :
                    main ( )
",192,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
        input_string = input(""Enter the string:"")
            input_string = input_string.lower()
                for char in input_string:
                        for vowel in vowels:
                            if char == vowel:
                                vowel_count+=1
                    print(vowel_count)
if __name__ == '__main__':
    main()
",113,"de main ():
    vowel-count=0
        vowels=['à' ,'e' ,' i','o', 'u']
            input-string = input (""Enter the string:"")
                input string = input_string . lower ()
                    for char in input string:
                            for vowel in vowels :
                                if char == vowel:
                                    vowel-count+=1
                        point (nouvel_count)
        y_name _== '_main __ :
                    main ( )
",192,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
        input_string = input(""Enter the string:"")
            input_string = input_string.lower()
                for char in input_string:
                        for vowel in vowels:
                            if char == vowel:
                                vowel_count+=1
                    print(vowel_count)
if __name__ == '__main__':
    main()
",113,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
        input-string = input (""Enter the string:"")
            input string = input_string . lower ()
                for char in input string:
                        for vowel in vowels :
                            if char == vowel:
                                vowel-count+=1
                    point (nouvel_count)
    y_name _== '_main __ :
                main ( )
",152,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
    print(vowel_count)
if __name__ == '__main__':
    main()
",41,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
        input-string = input (""Enter the string:"")
            input string = input_string . lower ()
                for char in input string:
                        for vowel in vowels :
                            if char == vowel:
                                vowel-count+=1
                    point (nouvel_count)
    y_name _== '_main __ :
                main ( )
",152,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
        input_string = input_string.lower()
            for char in input_string:
                for vowel in vowels:
                    if char == vowel:
                        vowel_count+=1
    print(vowel_count)
if __name__ == '__main__':
    main()
",61,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
        input-string = input (""Enter the string:"")
            input string = input_string . lower ()
                for char in input string:
                        for vowel in vowels :
                            if char == vowel:
                                vowel-count+=1
                    point (nouvel_count)
    y_name _== '_main __ :
                main ( )
",152,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
    print(vowel_count)
if __name__ == '__main__':
    main()
",41,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
        input-string = input (""Enter the string:"")
            input string = input_string . lower ()
                for char in input string:
                        for vowel in vowels :
                            if char == vowel:
                                vowel-count+=1
                    point (nouvel_count)
    y_name _== '_main __ :
                main ( )
",152,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
        input_string = input_string.lower()
            for char in input_string:
                for vowel in vowels:
                    if char == vowel:
                        vowel_count+=1
            print(vowel_count)
if __name__ == '__main__':
    main()
",69,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
        input-string = input (""Enter the string:"")
            input string = input_string . lower ()
                for char in input string:
                        for vowel in vowels :
                            if char == vowel:
                                vowel-count+=1
                    point (nouvel_count)
    y_name _== '_main __ :
                main ( )
",152,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
        input_string = input_string.lower()
            for char in input_string:
                for vowel in vowels:
                    if char == vowel:
                        vowel_count+=1
    print(vowel_count)
if __name__ == '__main__':
    main()
",61,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
        input-string = input (""Enter the string:"")
            input string = input_string . lower ()
                for char in input string:
                        for vowel in vowels :
                            if char == vowel:
                                vowel-count+=1
                    point (nouvel_count)
    y_name _== '_main __ :
                main ( )
",152,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
        input_string = input_string.lower()
            for char in input_string:
                for vowel in vowels:
                    if char == vowel:
                        vowel_count+=1
    print(vowel_count)
if __name__ == '__main__':
    main()
",61,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
            for char in input string:
                    for vowel in vowels :
                        if char == vowel:
                            vowel-count+=1
                point (nouvel_count)
    y_name _== '_main __ :
            main ( )
",120,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
    print(vowel_count)
if __name__ == '__main__':
    main()
",41,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
            for char in input string:
                    for vowel in vowels :
                        if char == vowel:
                            vowel-count+=1
                point (nouvel_count)
    y_name _== '_main __ :
            main ( )
",120,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
    print(vowel_count)
if __name__ == '__main__':
    main()
",41,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
            for char in input string:
                    for vowel in vowels :
                        if char == vowel:
                            vowel-count+=1
                point (nouvel_count)
    y_name _== '_main __ :
            main ( )
",120,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
    print(vowel_count)
if __name__ == '__main__':
    main()
",41,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
            for char in input string:
                    for vowel in vowels :
                        if char == vowel:
                            vowel-count+=1
                point (nouvel_count)
    y_name _== '_main __ :
            main ( )
",120,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
    print(vowel_count)
if __name__ == '__main__':
    main()
",41,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
            for char in input string:
                    for vowel in vowels :
                        if char == vowel:
                            vowel-count+=1
                point (nouvel_count)
    y_name _== '_main __ :
            main ( )
",120,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
    print(vowel_count)
if __name__ == '__main__':
    main()
",41,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
            for char in input string:
                    for vowel in vowels :
                        if char == vowel:
                            vowel-count+=1
                point (nouvel_count)
    y_name _== '_main __ :
            main ( )
",120,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
    print(vowel_count)
if __name__ == '__main__':
    main()
",41,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
            for char in input string:
                    for vowel in vowels :
                        if char == vowel:
                            vowel-count+=1
                point (nouvel_count)
    y_name _== '_main __ :
            main ( )
",120,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
    print(vowel_count)
if __name__ == '__main__':
    main()
",41,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
            for char in input string:
                    for vowel in vowels :
                        if char == vowel:
                            vowel-count+=1
                point (nouvel_count)
    y_name _== '_main __ :
            main ( )
",120,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
    print(vowel_count)
if __name__ == '__main__':
    main()
",41,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
            for char in input string:
                    for vowel in vowels :
                        if char == vowel:
                            vowel-count+=1
                point (nouvel_count)
    y_name _== '_main __ :
            main ( )
",120,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
    print(vowel_count)
if __name__ == '__main__':
    main()
",41,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
            for char in input string:
                    for vowel in vowels :
                        if char == vowel:
                            vowel-count+=1
                point (nouvel_count)
    y_name _== '_main __ :
            main ( )
",120,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
    print(vowel_count)
if __name__ == '__main__':
    main()
",41,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
            for char in input string:
                    for vowel in vowels :
                        if char == vowel:
                            vowel-count+=1
                point (nouvel_count)
    y_name _== '_main __ :
            main ( )
",120,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
    print(vowel_count)
if __name__ == '__main__':
    main()
",41,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
            for char in input string:
                    for vowel in vowels :
                        if char == vowel:
                            vowel-count+=1
                point (nouvel_count)
    y_name _== '_main __ :
            main ( )
",120,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
    print(vowel_count)
if __name__ == '__main__':
    main()
",41,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
            for char in input string:
                for vowel in vowels :
                    if char == vowel:
                        vowel-count+=1
            point (nouvel_count)
    y_name _== '_main __ :
            main ( )
",104,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
        print(vowel_count)
if __name__ == '__main__':
    main()
",45,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
            for char in input string:
                for vowel in vowels :
                    if char == vowel:
                        vowel-count+=1
            point (nouvel_count)
    y_name _== '_main __ :
            main ( )
",104,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
        print(vowel_count)
if __name__ == '__main__':
    main()
",45,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
            for char in input string:
                for vowel in vowels :
                    if char == vowel:
                        vowel-count+=1
            point (nouvel_count)
    y_name _== '_main __ :
            main ( )
",104,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
        print(vowel_count)
if __name__ == '__main__':
    main()
",45,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
            for char in input string:
                for vowel in vowels :
                    if char == vowel:
                        vowel-count+=1
            point (nouvel_count)
    y_name _== '_main __ :
            main ( )
",104,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
        print(vowel_count)
if __name__ == '__main__':
    main()
",45,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
        input-string = input (""Enter the string:"")
        input string = input_string . lower ()
            for char in input string:
                for vowel in vowels :
                    if char == vowel:
                        vowel-count+=1
            point (nouvel_count)
    y_name _== '_main __ :
            main ( )
",108,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
        print(vowel_count)
if __name__ == '__main__':
    main()
",45,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
        input-string = input (""Enter the string:"")
        input string = input_string . lower ()
            for char in input string:
                for vowel in vowels :
                    if char == vowel:
                        vowel-count+=1
            point (nouvel_count)
    y_name _== '_main __ :
            main ( )
",108,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
        print(vowel_count)
if __name__ == '__main__':
    main()
",45,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
        input-string = input (""Enter the string:"")
        input string = input_string . lower ()
            for char in input string:
                for vowel in vowels :
                    if char == vowel:
                        vowel-count+=1
            point (nouvel_count)
    y_name _== '_main __ :
            main ( )
",108,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
        print(vowel_count)
if __name__ == '__main__':
    main()
",45,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
        input-string = input (""Enter the string:"")
        input string = input_string . lower ()
            for char in input string:
                for vowel in vowels :
                    if char == vowel:
                        vowel-count+=1
            point (nouvel_count)
    y_name _== '_main __ :
            main ( )
",108,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
        print(vowel_count)
if __name__ == '__main__':
    main()
",45,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
        for char in input string:
            for vowel in vowels :
                if char == vowel:
                    vowel-count+=1
        point (nouvel_count)
    y_name _== '_main __ :
        main ( )
",80,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
        print(vowel_count)
if __name__ == '__main__':
    main()
",45,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
        for char in input string:
            for vowel in vowels :
                if char == vowel:
                    vowel-count+=1
        point (nouvel_count)
    y_name _== '_main __ :
        main ( )
",80,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
        print(vowel_count)
if __name__ == '__main__':
    main()
",45,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
        for char in input string:
            for vowel in vowels :
                if char == vowel:
                    vowel-count+=1
        point (nouvel_count)
    y_name _== '_main __ :
        main ( )
",80,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
        print(vowel_count)
if __name__ == '__main__':
    main()
",45,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
        for char in input string:
            for vowel in vowels :
                if char == vowel:
                    vowel-count+=1
        point (nouvel_count)
    y_name _== '_main __ :
        main ( )
",80,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
        print(vowel_count)
if __name__ == '__main__':
    main()
",45,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
        for char in input string:
            for vowel in vowels :
                if char == vowel:
                    vowel-count+=1
        point (nouvel_count)
    y_name _== '_main __ :
        main ( )
",80,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
        print(vowel_count)
if __name__ == '__main__':
    main()
",45,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
        for char in input string:
            for vowel in vowels :
                if char == vowel:
                    vowel-count+=1
        point (nouvel_count)
    y_name _== '_main __ :
        main ( )
",80,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
        print(vowel_count)
if __name__ == '__main__':
    main()
",45,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
        for char in input string:
            for vowel in vowels :
                if char == vowel:
                    vowel-count+=1
        point (nouvel_count)
    y_name _== '_main __ :
        main ( )
",80,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
        print(vowel_count)
if __name__ == '__main__':
    main()
",45,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
        for char in input string:
            for vowel in vowels :
                if char == vowel:
                    vowel-count+=1
        point (nouvel_count)
    y_name _== '_main __ :
        main ( )
",80,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
        print(vowel_count)
if __name__ == '__main__':
    main()
",45,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
        for char in input string:
            for vowel in vowels :
                if char == vowel:
                    vowel-count+=1
            point (nouvel_count)
    y_name _== '_main __ :
        main ( )
",84,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
            print(vowel_count)
if __name__ == '__main__':
    main()
",49,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
        for char in input string:
            for vowel in vowels :
                if char == vowel:
                    vowel-count+=1
            point (nouvel_count)
    y_name _== '_main __ :
        main ( )
",84,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
            print(vowel_count)
if __name__ == '__main__':
    main()
",49,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
        for char in input string:
            for vowel in vowels :
                if char == vowel:
                    vowel-count+=1
            point (nouvel_count)
    y_name _== '_main __ :
        main ( )
",84,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
            print(vowel_count)
if __name__ == '__main__':
    main()
",49,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
        for char in input string:
            for vowel in vowels :
                if char == vowel:
                    vowel-count+=1
            point (nouvel_count)
    y_name _== '_main __ :
        main ( )
",84,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
            print(vowel_count)
if __name__ == '__main__':
    main()
",49,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
        for char in input string:
            for vowel in vowels :
                if char == vowel:
                    vowel-count+=1
            point (nouvel_count)
    y_name _== '_main __ :
        main ( )
",84,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
            print(vowel_count)
if __name__ == '__main__':
    main()
",49,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
        for char in input string:
            for vowel in vowels :
                if char == vowel:
                    vowel-count+=1
            point (nouvel_count)
    y_name _== '_main __ :
        main ( )
",84,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
            print(vowel_count)
if __name__ == '__main__':
    main()
",49,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
        for char in input string:
            for vowel in vowels :
                if char == vowel:
                    vowel-count+=1
            point (nouvel_count)
    y_name _== '_main __ :
        main ( )
",84,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
            print(vowel_count)
if __name__ == '__main__':
    main()
",49,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
        for char in input string:
            for vowel in vowels :
                if char == vowel:
                    vowel-count+=1
            point (nouvel_count)
    y_name _== '_main __ :
            main ( )
",88,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
            print(vowel_count)
if __name__ == '__main__':
    main()
",49,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
        for char in input string:
            for vowel in vowels :
                if char == vowel:
                    vowel-count+=1
            point (nouvel_count)
    y_name _== '_main __ :
            main ( )
",88,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
            print(vowel_count)
if __name__ == '__main__':
    main()
",49,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
        for char in input string:
            for vowel in vowels :
                if char == vowel:
                    vowel-count+=1
            point (nouvel_count)
    y_name _== '_main __ :
            main ( )
",88,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
            print(vowel_count)
if __name__ == '__main__':
    main()
",49,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
        for char in input string:
            for vowel in vowels :
                if char == vowel:
                    vowel-count+=1
            point (nouvel_count)
    y_name _== '_main __ :
            main ( )
",88,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
            print(vowel_count)
if __name__ == '__main__':
    main()
",49,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
        for char in input string:
            for vowel in vowels :
                if char == vowel:
                    vowel-count+=1
            point (nouvel_count)
    y_name _== '_main __ :
            main ( )
",88,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
            print(vowel_count)
if __name__ == '__main__':
    main()
",49,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
        for char in input string:
            for vowel in vowels :
                if char == vowel:
                    vowel-count+=1
            point (nouvel_count)
    y_name _== '_main __ :
            main ( )
",88,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
            print(vowel_count)
if __name__ == '__main__':
    main()
",49,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
        for char in input string:
            for vowel in vowels :
                if char == vowel:
                    vowel-count+=1
            point (nouvel_count)
    y_name _== '_main __ :
            main ( )
",88,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
            print(vowel_count)
if __name__ == '__main__':
    main()
",49,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
        for char in input string:
            for vowel in vowels :
                if char == vowel:
                    vowel-count+=1
            point (nouvel_count)
    y_name _== '_main __ :
            main ( )
",88,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
            print(vowel_count)
if __name__ == '__main__':
    main()
",49,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
            for char in input string:
            for vowel in vowels :
                if char == vowel:
                    vowel-count+=1
            point (nouvel_count)
    y_name _== '_main __ :
            main ( )
",92,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count+=1
        print(vowel_count)
if __name__ == '__main__':
    main()
",33,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
            for char in input string:
            for vowel in vowels :
                if char == vowel:
                    vowel-count+=1
            point (nouvel_count)
    y_name _== '_main __ :
            main ( )
",92,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count+=1
        print(vowel_count)
if __name__ == '__main__':
    main()
",33,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
        input string = input_string . lower ()
            for char in input string:
            for vowel in vowels :
                if char == vowel:
                    vowel-count+=1
            point (nouvel_count)
    y_name _== '_main __ :
            main ( )
",92,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
            for vowel in vowels:
                if char == vowel:
                    vowel_count+=1
            print(vowel_count)
if __name__ == '__main__':
    main()
",49,"de main ():
vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
    input string = input_string . lower ()
        for char in input string:
        for vowel in vowels :
            if char == vowel:
                vowel-count+=1
        point (nouvel_count)
    y_name _== '_main __ :
        main ( )
",68,"def main():
vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count+=1
        print(vowel_count)
if __name__ == '__main__':
    main()
",37,"de main ():
vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
    input string = input_string . lower ()
        for char in input string:
        for vowel in vowels :
            if char == vowel:
                vowel-count+=1
        point (nouvel_count)
    y_name _== '_main __ :
        main ( )
",68,"def main():
vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count+=1
        print(vowel_count)
if __name__ == '__main__':
    main()
",37,"de main ():
vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
    input string = input_string . lower ()
        for char in input string:
        for vowel in vowels :
            if char == vowel:
                vowel-count+=1
        point (nouvel_count)
    y_name _== '_main __ :
        main ( )
",68,"def main():
vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count+=1
        print(vowel_count)
if __name__ == '__main__':
    main()
",37,"de main ():
vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
    input string = input_string . lower ()
        for char in input string:
        for vowel in vowels :
            if char == vowel:
                vowel-count+=1
        point (nouvel_count)
    y_name _== '_main __ :
        main ( )
",68,"def main():
vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count+=1
        print(vowel_count)
if __name__ == '__main__':
    main()
",37,"de main ():
vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
    input string = input_string . lower ()
        for char in input string:
        for vowel in vowels :
            if char == vowel:
                vowel-count+=1
        point (nouvel_count)
    y_name _== '_main __ :
        main ( )
",68,"def main():
vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count+=1
        print(vowel_count)
if __name__ == '__main__':
    main()
",37,"de main ():
vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
    input string = input_string . lower ()
        for char in input string:
        for vowel in vowels :
            if char == vowel:
                vowel-count+=1
        point (nouvel_count)
    y_name _== '_main __ :
        main ( )
",68,"def main():
vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count+=1
        print(vowel_count)
if __name__ == '__main__':
    main()
",37,"de main ():
vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
    input string = input_string . lower ()
        for char in input string:
        for vowel in vowels :
            if char == vowel:
                vowel-count+=1
        point (nouvel_count)
    y_name _== '_main __ :
        main ( )
",68,"def main():
vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count+=1
        print(vowel_count)
if __name__ == '__main__':
    main()
",37,"de main ():
vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
    input string = input_string . lower ()
        for char in input string:
        for vowel in vowels :
            if char == vowel:
                vowel-count+=1
        point (nouvel_count)
    y_name _== '_main __ :
        main ( )
",68,"def main():
vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count+=1
        print(vowel_count)
if __name__ == '__main__':
    main()
",37,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
    input string = input_string . lower ()
        for char in input string:
        for vowel in vowels :
            if char == vowel:
                vowel-count+=1
        point (nouvel_count)
    y_name _== '_main __ :
        main ( )
",64,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count+=1
        print(vowel_count)
if __name__ == '__main__':
    main()
",33,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
    input string = input_string . lower ()
        for char in input string:
        for vowel in vowels :
            if char == vowel:
                vowel-count+=1
        point (nouvel_count)
    y_name _== '_main __ :
        main ( )
",64,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count+=1
        print(vowel_count)
if __name__ == '__main__':
    main()
",33,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
    input string = input_string . lower ()
        for char in input string:
        for vowel in vowels :
            if char == vowel:
                vowel-count+=1
        point (nouvel_count)
    y_name _== '_main __ :
        main ( )
",64,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count+=1
        print(vowel_count)
if __name__ == '__main__':
    main()
",33,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
    input string = input_string . lower ()
    for char in input string:
    for vowel in vowels :
        if char == vowel:
            vowel-count+=1
    point (nouvel_count)
    y_name _== '_main __ :
    main ( )
",64,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count+=1
    print(vowel_count)
if __name__ == '__main__':
    main()
",25,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
    input string = input_string . lower ()
    for char in input string:
    for vowel in vowels :
        if char == vowel:
            vowel-count+=1
    point (nouvel_count)
    y_name _== '_main __ :
    main ( )
",64,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count+=1
        print(vowel_count)
if __name__ == '__main__':
    main()
",29,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
    input string = input_string . lower ()
    for char in input string:
    for vowel in vowels :
        if char == vowel:
            vowel-count+=1
    point (nouvel_count)
    y_name _== '_main __ :
    main ( )
",64,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count+=1
        print(vowel_count)
if __name__ == '__main__':
    main()
",29,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
    input string = input_string . lower ()
    for char in input string:
    for vowel in vowels :
        if char == vowel:
            vowel-count+=1
    point (nouvel_count)
    y_name _== '_main __ :
    main ( )
",64,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count+=1
    print(vowel_count)
if __name__ == '__main__':
    main()
",25,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
    input string = input_string . lower ()
    for char in input string:
    for vowel in vowels :
        if char == vowel:
            vowel-count+=1
    point (nouvel_count)
    y_name _== '_main __ :
    main ( )
",64,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count+=1
        print(vowel_count)
if __name__ == '__main__':
    main()
",29,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
    input string = input_string . lower ()
        for char in input string:
        for vowel in vowels :
            if char == vowel:
                vowel-count+=1
        point (nouvel_count)
    y_name _== '_main __ :
        main ( )
",64,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count+=1
        print(vowel_count)
if __name__ == '__main__':
    main()
",33,"de main ():
    vowel-count=0
    vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
    input string = input_string . lower ()
        for char in input string:
        for vowel in vowels :
            if char == vowel:
                vowel-count+=1
        point (nouvel_count)
    y_name _== '_main __ :
        main ( )
",64,"def main():
    vowel_count=0
    vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
        for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count+=1
        print(vowel_count)
if __name__ == '__main__':
    main()
",33,"de main ():
vowel-count=0
vowels=['à' ,'e' ,' i','o', 'u']
input-string = input (""Enter the string:"")
input string = input_string . lower ()
    for char in input string:
    for vowel in vowels :
        if char == vowel:
            vowel-count+=1
    point (nouvel_count)
y_name _== '_main __ :
    main ( )
",81,"def main():
vowel_count=0
vowels=['a' ,'e' ,'i','o', 'u']
input_string = input(""Enter the string:"")
input_string = input_string.lower()
    for char in input_string:
    for vowel in vowels:
        if char == vowel:
            vowel_count+=1
    print(vowel_count)
if __name__ == '__main__':
    main()
",53,"de main ():
vowel-count=0
vowels=['à' ,'e' ,' i','o', 'u']
input-string = input (""Enter the string:"")
input string = input_string . lower ()
for char in input string:
for vowel in vowels :
    if char == vowel:
        vowel-count+=1
point (nouvel_count)
y_name _== '_main __ :
main ( )
",105,"def main():
vowel_count=0
vowels=['a' ,'e' ,'i','o', 'u']
input_string = input(""Enter the string:"")
input_string = input_string.lower()
for char in input_string:
for vowel in vowels:
    if char == vowel:
        vowel_count+=1
print(vowel_count)
if __name__ == '__main__':
main()
",77,"de main ():
vowel-count=0
vowels=['à' ,'e' ,' i','o', 'u']
input-string = input (""Enter the string:"")
input string = input_string . lower ()
for char in input string:
for vowel in vowels :
    if char == vowel:
        vowel-count+=1
point (nouvel_count)
y_name _== '_main __ :
main ( )
",105,"def main():
vowel_count=0
vowels=['a' ,'e' ,'i','o', 'u']
input_string = input(""Enter the string:"")
input_string = input_string.lower()
for char in input_string:
for vowel in vowels:
    if char == vowel:
        vowel_count+=1
print(vowel_count)
if __name__ == '__main__':
main()
",77,"de main ():
vowel-count=0
vowels=['à' ,'e' ,' i','o', 'u']
input-string = input (""Enter the string:"")
input string = input_string . lower ()
for char in input string:
for vowel in vowels :
    if char == vowel:
        vowel-count+=1
point (nouvel_count)
y_name _== '_main __ :
main ( )
",105,"def main():
vowel_count=0
vowels=['a' ,'e' ,'i','o', 'u']
input_string = input(""Enter the string:"")
input_string = input_string.lower()
for char in input_string:
for vowel in vowels:
    if char == vowel:
        vowel_count+=1
print(vowel_count)
if __name__ == '__main__':
main()
",77,"de main ():
vowel-count=0
vowels=['à' ,'e' ,' i','o', 'u']
input-string = input (""Enter the string:"")
input string = input_string . lower ()
for char in input string:
for vowel in vowels :
    if char == vowel:
        vowel-count+=1
point (nouvel_count)
y_name _== '_main __ :
main ( )
",105,"def main():
vowel_count=0
vowels=['a' ,'e' ,'i','o', 'u']
input_string = input(""Enter the string:"")
input_string = input_string.lower()
for char in input_string:
for vowel in vowels:
    if char == vowel:
        vowel_count+=1
print(vowel_count)
if __name__ == '__main__':
main()
",77,"de main ():
vowel-count=0
vowels=['à' ,'e' ,' i','o', 'u']
input-string = input (""Enter the string:"")
input string = input_string . lower ()
for char in input string:
for vowel in vowels :
    if char == vowel:
        vowel-count+=1
point (nouvel_count)
y_name _== '_main __ :
main ( )
",105,"def main():
vowel_count=0
vowels=['a' ,'e' ,'i','o', 'u']
input_string = input(""Enter the string:"")
input_string = input_string.lower()
for char in input_string:
for vowel in vowels:
    if char == vowel:
        vowel_count+=1
print(vowel_count)
if __name__ == '__main__':
main()
",77,"de main ():
vowel-count=0
vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
    input string = input_string . lower ()
    for char in input string:
    for vowel in vowels :
        if char == vowel:
            vowel-count+=1
    point (nouvel_count)
y_name _== '_main __ :
    main ( )
",73,"def main():
vowel_count=0
vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
    for vowel in vowels:
        if char == vowel:
            vowel_count+=1
    print(vowel_count)
if __name__ == '__main__':
    main()
",45,"de main ():
vowel-count=0
vowels=['à' ,'e' ,' i','o', 'u']
    input-string = input (""Enter the string:"")
    input string = input_string . lower ()
    for char in input string:
    for vowel in vowels :
        if char == vowel:
            vowel-count+=1
    point (nouvel_count)
y_name _== '_main __ :
    main ( )
",73,"def main():
vowel_count=0
vowels=['a' ,'e' ,'i','o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
    for vowel in vowels:
        if char == vowel:
            vowel_count+=1
    print(vowel_count)
if __name__ == '__main__':
    main()
",45,"de main ():
vowel-count=0
vowels=['à' ,'e' ,' i','o', 'u']
input-string = input (""Enter the string:"")
input string = input_string . lower ()
for char in input string:
for vowel in vowels :
    if char == vowel:
        vowel-count+=1
point (nouvel_count)
y_name _== '_main __ :
main ( )
",105,"def main():
vowel_count=0
vowels=['a' ,'e' ,'i','o', 'u']
input_string = input(""Enter the string:"")
input_string = input_string.lower()
for char in input_string:
for vowel in vowels:
    if char == vowel:
        vowel_count+=1
print(vowel_count)
if __name__ == '__main__':
main()
",77,"de main ():
vowel-count=0
vowels=['à' ,'e' ,' i','o', 'u']
input-string = input (""Enter the string:"")
input string = input_string . lower ()
for char in input string:
for vowel in vowels :
    if char == vowel:
        vowel-count+=1
point (nouvel_count)
y_name _== '_main __ :
main ( )
",105,"def main():
vowel_count=0
vowels=['a' ,'e' ,'i','o', 'u']
input_string = input(""Enter the string:"")
input_string = input_string.lower()
for char in input_string:
for vowel in vowels:
    if char == vowel:
        vowel_count+=1
print(vowel_count)
if __name__ == '__main__':
main()
",77
"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])
","det
main ():
string = str (input ('Enter string: '))
for i in range ((len (string)-1), - 1 ,- 1).
print (string [i])",34,"det main ():
        String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
            print (string [1])
",28,"def main():
        string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
            print(string[i])
",12,"det main ():
        String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
            print (string [1])
",28,"def main():
        string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
            print(string[i])
",12,"det main ():
        String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
            print (string [1])
",28,"def main():
        string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
            print(string[i])
",12,"det main ():
        String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
            print (string [1])
",28,"def main():
        string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
            print(string[i])
",12,"det main ():
        String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
            print (string [1])
",28,"def main():
        string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
            print(string[i])
",12,"det main ():
        String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
            print (string [1])
",28,"def main():
        string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
            print(string[i])
",12,"det main ():
        String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
            print (string [1])
",28,"def main():
        string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
            print(string[i])
",12,"det main ():
        String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
            print (string [1])
",28,"def main():
        string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
            print(string[i])
",12,"det main ():
        String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
            print (string [1])
",28,"def main():
        string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
            print(string[i])
",12,"det main ():
        String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
            print (string [1])
",28,"def main():
        string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
            print(string[i])
",12,"det main ():
        String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
            print (string [1])
",28,"def main():
        string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
            print(string[i])
",12,"det main ():
        String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
            print (string [1])
",28,"def main():
        string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
            print(string[i])
",12,"det main ():
        String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
            print (string [1])
",28,"def main():
        string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
            print(string[i])
",12,"det main ():
        String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
            print (string [1])
",28,"def main():
        string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
            print(string[i])
",12,"det main ():
        String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
            print (string [1])
",28,"def main():
        string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
            print(string[i])
",12,"det main ():
        String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
            print (string [1])
",28,"def main():
        string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
            print(string[i])
",12,"det main ():
        String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
            print (string [1])
",28,"def main():
        string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
            print(string[i])
",12,"det main ():
        String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
            print (string [1])
",28,"def main():
        string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
            print(string[i])
",12,"det main ():
        String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
            print (string [1])
",28,"def main():
        string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
            print(string[i])
",12,"det main ():
        String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
            print (string [1])
",28,"def main():
        string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
            print(string[i])
",12,"det main ():
        String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
            print (string [1])
",28,"def main():
        string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
            print(string[i])
",12,"det main ():
        String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
            print (string [1])
",28,"def main():
        string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
            print(string[i])
",12,"det main ():
        String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
            print (string [1])
",28,"def main():
        string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
            print(string[i])
",12,"det main ():
        String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
            print (string [1])
",28,"def main():
        string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
            print(string[i])
",12,"det main ():
        String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
            print (string [1])
",28,"def main():
        string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
            print(string[i])
",12,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5,"det main ():
    String = str (input ('Enter string: '))
    for i in range ((len (string)-1) ,- 1 ,- 1):
        print (string [1])
",20,"def main():
    string = str(input('Enter string: '))
    for i in range((len(string)-1), -1, -1):
        print(string[1])
",5
"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It check every element in list(sequence) --
for i in seq:
    # It decides whether an element from sequence is even ---
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list(seq_even)
print(seq_even)
","seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9]
Seg-even=[]
# It checks every element in list (sequence) - --
for i in seg:
# it decides whether an element from sequence is even --.
if i % 2 = = 0:
seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)",43,"        seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
    Seq-even=[]
# It checks every element in list (sequence) -
    for i in seg:
                #it decides whether an element from sequence is even -..
                    if i % 2 == 0 ;
                        seg-even. append (i) # appends even ; in empty list (seq-even)
            print (seg-even)
",99,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
            #it decides whether an element from sequence is even -..
                if i % 2 == 0 :
                    seq_even.append(i) # appends even ; in empty list (seq_even)
        print(seq_even)
",55,"        seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
    Seq-even=[]
# It checks every element in list (sequence) -
    for i in seg:
                #it decides whether an element from sequence is even -..
                    if i % 2 == 0 ;
                        seg-even. append (i) # appends even ; in empty list (seq-even)
            print (seg-even)
",99,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
            #it decides whether an element from sequence is even -..
                if i % 2 == 0 :
                    seq_even.append (i) # appends even ; in empty list (seq-even)
        print (seq_even)
",58,"        seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
    Seq-even=[]
# It checks every element in list (sequence) -
    for i in seg:
                #it decides whether an element from sequence is even -..
                    if i % 2 == 0 ;
                        seg-even. append (i) # appends even ; in empty list (seq-even)
            print (seg-even)
",99,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
            #it decides whether an element from sequence is even -..
                if i % 2 == 0 :
                    seq_even.append(i) # appends even ; in empty list (seq_even)
        print (seq_even)
",56,"        seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
    Seq-even=[]
# It checks every element in list (sequence) -
    for i in seg:
                #it decides whether an element from sequence is even -..
                if i % 2 == 0 ;
                    seg-even. append (i) # appends even ; in empty list (seq-even)
            print (seg-even)
",91,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"        seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
    Seq-even=[]
# It checks every element in list (sequence) -
    for i in seg:
                #it decides whether an element from sequence is even -..
                if i % 2 == 0 ;
                    seg-even. append (i) # appends even ; in empty list (seq-even)
            print (seg-even)
",91,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
            #it decides whether an element from sequence is even -..
            if i % 2 == 0 :
                seq_even.append (i) # appends even ; in empty list (seq_even)
        print (seq_even)
",49,"    seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
    Seq-even=[]
# It checks every element in list (sequence) -
    for i in seg:
            #it decides whether an element from sequence is even -..
            if i % 2 == 0 ;
                seg-even. append (i) # appends even ; in empty list (seq-even)
        print (seg-even)
",71,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
        #it decides whether an element from sequence is even -..
        if i % 2 == 0 :
            seq_even.append (i) # appends even ; in empty list (seq_even)
    print (seq_even)
",33,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
        #it decides whether an element from sequence is even -..
        if i % 2 == 0 ;
            seg-even. append (i) # appends even ; in empty list (seq-even)
    print (seg-even)
",43,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
        #it decides whether an element from sequence is even -..
        if i % 2 == 0 :
            seq_even.append (i) # appends even ; in empty list (seq_even)
    print (seq_even)
",33,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
        #it decides whether an element from sequence is even -..
        if i % 2 == 0 ;
            seg-even. append (i) # appends even ; in empty list (seq-even)
    print (seg-even)
",43,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
        #it decides whether an element from sequence is even -..
        if i % 2 == 0:
            seq_even.append(i) # appends even ; in empty list (seq_even)
    print(seq_even)
",30,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
        #it decides whether an element from sequence is even -..
        if i % 2 == 0 ;
            seg-even. append (i) # appends even ; in empty list (seq-even)
    print (seg-even)
",43,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in list (sequence) -
for i in seq:
        # it decides whether an element from sequence is even -
        if i % 2 == 0:
            seq_even.append(i)  # appends even ; in empty list (seq_even)
    print(seq_even)
",23,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
        #it decides whether an element from sequence is even -..
        if i % 2 == 0 ;
            seg-even. append (i) # appends even ; in empty list (seq-even)
    print (seg-even)
",43,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
        #it decides whether an element from sequence is even -..
        if i % 2 == 0 :
            seq_even.append (i) # appends even ; in empty list (seq_even)
    print (seq_even)
",33,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
        #it decides whether an element from sequence is even -..
        if i % 2 == 0 ;
            seg-even. append (i) # appends even ; in empty list (seq-even)
    print (seg-even)
",43,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in list (sequence) -
for i in seq:
        # it decides whether an element from sequence is even -
        if i % 2 == 0:
            seq_even.append(i)  # appends even ; in empty list (seq_even)
    print(seq_even)
",23,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
        #it decides whether an element from sequence is even -..
        if i % 2 == 0 ;
            seg-even. append (i) # appends even ; in empty list (seq-even)
    print (seg-even)
",43,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in list (sequence) -
for i in seq:
        # it decides whether an element from sequence is even -
        if i % 2 == 0:
            seq_even.append(i)  # appends even ; in empty list (seq_even)
    print(seq_even)
",23,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
        #it decides whether an element from sequence is even -..
        if i % 2 == 0 ;
            seg-even. append (i) # appends even ; in empty list (seq-even)
    print (seg-even)
",43,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in list (sequence) -
for i in seq:
        # it decides whether an element from sequence is even -
        if i % 2 == 0:
            seq_even.append(i)  # appends even ; in empty list (seq_even)
    print(seq_even)
",23,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
        #it decides whether an element from sequence is even -..
        if i % 2 == 0 ;
            seg-even. append (i) # appends even ; in empty list (seq-even)
    print (seg-even)
",43,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in list (sequence) -
for i in seq:
        # it decides whether an element from sequence is even -
        if i % 2 == 0:
            seq_even.append(i)  # appends even ; in empty list (seq_even)
    print(seq_even)
",23,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
        #it decides whether an element from sequence is even -..
        if i % 2 == 0 ;
            seg-even. append (i) # appends even ; in empty list (seq-even)
    print (seg-even)
",43,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in list (sequence) -
for i in seq:
        # it decides whether an element from sequence is even -
        if i % 2 == 0:
            seq_even.append(i)  # appends even ; in empty list (seq_even)
    print(seq_even)
",23,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
        #it decides whether an element from sequence is even -..
        if i % 2 == 0 ;
            seg-even. append (i) # appends even ; in empty list (seq-even)
    print (seg-even)
",43,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
        #it decides whether an element from sequence is even -..
        if i % 2 == 0 :
            seq_even.append (i) # appends even ; in empty list (seq_even)
    print (seq_even)
",33,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
        #it decides whether an element from sequence is even -..
        if i % 2 == 0 ;
            seg-even. append (i) # appends even ; in empty list (seq-even)
    print (seg-even)
",43,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in list (sequence) -
for i in seq:
        # it decides whether an element from sequence is even -
        if i % 2 == 0:
            seq_even.append(i)  # appends even ; in empty list (seq_even)
    print(seq_even)
",23,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
        #it decides whether an element from sequence is even -..
        if i % 2 == 0 ;
            seg-even. append (i) # appends even ; in empty list (seq-even)
    print (seg-even)
",43,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in list (sequence) -
for i in seq:
        # it decides whether an element from sequence is even -
        if i % 2 == 0:
            seq_even.append(i)  # appends even ; in empty list (seq_even)
    print(seq_even)
",23,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
        #it decides whether an element from sequence is even -..
        if i % 2 == 0 ;
            seg-even. append (i) # appends even ; in empty list (seq-even)
    print (seg-even)
",43,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in list (sequence) -
for i in seq:
        # it decides whether an element from sequence is even -
        if i % 2 == 0:
            seq_even.append(i)  # appends even ; in empty list (seq_even)
    print(seq_even)
",23,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,,274,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0:
        seq_even.append(i) # appends even ; in empty list (seq_even)
print(seq_even)
",15,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq-even)
print (seq_even)
",19,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
        seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",28,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
#it decides whether an element from sequence is even -..
if i % 2 == 0 ;
    seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",39,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in list (sequence) -
for i in seq:
#it decides whether an element from sequence is even -
if i % 2 == 0:
    seq_even.append(i) # appends even ; in empty list (seq_even)
print(seq_even)
",22,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
#it decides whether an element from sequence is even -..
if i % 2 == 0 ;
    seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",39,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in list (sequence) -
for i in seq:
#it decides whether an element from sequence is even -
if i % 2 == 0:
    seq_even.append(i) # appends even ; in empty list (seq_even)
print(seq_even)
",22,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
#it decides whether an element from sequence is even -..
if i % 2 == 0 ;
    seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",39,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in list (sequence) -
for i in seq:
#it decides whether an element from sequence is even -
if i % 2 == 0:
    seq_even.append(i) # appends even ; in empty list (seq_even)
print(seq_even)
",22,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
    seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",31,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
    seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",22,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
    seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",31,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
    seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",22,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
    seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",31,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
    seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",31,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
    seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",31,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
    seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",31,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0:
        seq_even.append(i) # appends even ; in empty list (seq_even)
print(seq_even)
",15,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
Seq-even=[]
# It checks every element in list (sequence) -
for i in seg:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 ;
    seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)
",31,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9 ]
seq_even=[]
# It checks every element in list (sequence) -
for i in seq:
    #it decides whether an element from sequence is even -..
    if i % 2 == 0 :
        seq_even.append (i) # appends even ; in empty list (seq_even)
print (seq_even)
",18
"# 1 karel Problem - karel Home
from karel.stanfordkarel import *
# This program defines a main function which should make Karel
# move to the beeper, pick it up and return home.

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()

if __name__ == ""__main__"":
    main()
","# 1 karel Problem - Karel home
from Karel. Stanfordkarel import*
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre: Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ()
move ()
turn_ left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn-around ( )
# post: Karel facing east, at the corner of starting position
def get_back_home () :
move ()
Move ()
move ()
turn right ()
move ( )
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == - main -:
main ()",172,"# 1 karel Problem - Karel home
                        from Karel. Stanfordkarel import *
                        # This program defines a main function which should make karel
                    # move to the beeper, pick it up and return home
                            def main () :
                                                    get_Out ()
                                                        pick_food ()
                                                        get back_ home ()
                    # pre : Karel facing east, at the corner of starting position
                    # post: karel facing east, outside the home, at the position of beeper
                    def get_out () :
                                                            turn_right ( )
                                                                move ()
                                                                    turn_left ()
                                                                    move ()
                                                                        move ()
                                                                        move ()
                # post: Karel facing west, at the position of beeper
                    def pick-food ():
                                            pick_beeper ()
                                                turn- around ()
            # post: Karel facing east, at the corner of starting position
                def get_ back_home () :
                                                    move ()
                                                    Move ()
                                                    move ()
                                                    turn right ()
                                                    move ()
                                                        turn right ()
def turn right () ;
                                    for i in range (3) :
                                                                            turn-left ()
    def
                                    turn-around () :
                                        turn_left ()
                                            turn_kft ()
        if_ name_ == '-main -:
                                main ()
",1451,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: Karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
",11,"# 1 karel Problem - Karel home
                    from Karel. Stanfordkarel import *
                    # This program defines a main function which should make karel
                    # move to the beeper, pick it up and return home
                        def main () :
                                            get_Out ()
                                                pick_food ()
                                                get back_ home ()
                    # pre : Karel facing east, at the corner of starting position
                    # post: karel facing east, outside the home, at the position of beeper
                    def get_out () :
                                                    turn_right ( )
                                                        move ()
                                                            turn_left ()
                                                            move ()
                                                            move ()
                                                            move ()
                # post: Karel facing west, at the position of beeper
                def pick-food ():
                                        pick_beeper ()
                                        turn- around ()
            # post: Karel facing east, at the corner of starting position
                def get_ back_home () :
                                            move ()
                                            Move ()
                                            move ()
                                            turn right ()
                                            move ()
                                                turn right ()
def turn right () ;
                                for i in range (3) :
                                                                turn-left ()
    def
                                turn-around () :
                                    turn_left ()
                                        turn_kft ()
        if_ name_ == '-main -:
                            main ()
",1263,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()

if __name__ == ""__main__"":
    main()
",7,"# 1 karel Problem - Karel home
                from Karel. Stanfordkarel import *
                # This program defines a main function which should make karel
                # move to the beeper, pick it up and return home
                    def main () :
                                        get_Out ()
                                            pick_food ()
                                            get back_ home ()
                # pre : Karel facing east, at the corner of starting position
                # post: karel facing east, outside the home, at the position of beeper
                def get_out () :
                                            turn_right ( )
                                                move ()
                                                turn_left ()
                                                move ()
                                                move ()
                                                move ()
                # post: Karel facing west, at the position of beeper
                def pick-food ():
                                    pick_beeper ()
                                    turn- around ()
            # post: Karel facing east, at the corner of starting position
                def get_ back_home () :
                                        move ()
                                        Move ()
                                        move ()
                                        turn right ()
                                        move ()
                                            turn right ()
def turn right () ;
                            for i in range (3) :
                                                    turn-left ()
    def
                            turn-around () :
                                turn_left ()
                                    turn_kft ()
        if_ name_ == '-main -:
                        main ()
",1095,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
",10,"# 1 karel Problem - Karel home
        from Karel. Stanfordkarel import *
        # This program defines a main function which should make karel
        # move to the beeper, pick it up and return home
            def main () :
                                get_Out ()
                                pick_food ()
                                get back_ home ()
        # pre : Karel facing east, at the corner of starting position
        # post: karel facing east, outside the home, at the position of beeper
        def get_out () :
                                turn_right ( )
                                    move ()
                                    turn_left ()
                                    move ()
                                    move ()
                                    move ()
        # post: Karel facing west, at the position of beeper
        def pick-food ():
                            pick_beeper ()
                            turn- around ()
    # post: Karel facing east, at the corner of starting position
        def get_ back_home () :
                                move ()
                                Move ()
                                move ()
                                turn right ()
                                move ()
                                turn right ()
def turn right () ;
                    for i in range (3) :
                                        turn-left ()
    def
                    turn-around () :
                        turn_left ()
                            turn_kft ()
    if_ name_ == '-main -:
                main ()
",779,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()

if __name__ == ""__main__"":
    main()
",10,"# 1 karel Problem - Karel home
        from Karel. Stanfordkarel import *
        # This program defines a main function which should make karel
        # move to the beeper, pick it up and return home
            def main () :
                            get_Out ()
                            pick_food ()
                            get back_ home ()
        # pre : Karel facing east, at the corner of starting position
        # post: karel facing east, outside the home, at the position of beeper
        def get_out () :
                            turn_right ( )
                                move ()
                                turn_left ()
                                move ()
                                move ()
                                move ()
        # post: Karel facing west, at the position of beeper
        def pick-food ():
                        pick_beeper ()
                        turn- around ()
    # post: Karel facing east, at the corner of starting position
        def get_ back_home () :
                            move ()
                            Move ()
                            move ()
                            turn right ()
                            move ()
                            turn right ()
def turn right () ;
                    for i in range (3) :
                                    turn-left ()
    def
                    turn-around () :
                        turn_left ()
                        turn_kft ()
    if_ name_ == '-main -:
                main ()
",703,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
",10,"# 1 karel Problem - Karel home
        from Karel. Stanfordkarel import *
        # This program defines a main function which should make karel
        # move to the beeper, pick it up and return home
        def main () :
                        get_Out ()
                        pick_food ()
                        get back_ home ()
        # pre : Karel facing east, at the corner of starting position
        # post: karel facing east, outside the home, at the position of beeper
        def get_out () :
                        turn_right ( )
                            move ()
                            turn_left ()
                            move ()
                            move ()
                            move ()
        # post: Karel facing west, at the position of beeper
        def pick-food ():
                    pick_beeper ()
                    turn- around ()
    # post: Karel facing east, at the corner of starting position
        def get_ back_home () :
                        move ()
                        Move ()
                        move ()
                        turn right ()
                        move ()
                        turn right ()
def turn right () ;
                for i in range (3) :
                                turn-left ()
    def
                turn-around () :
                    turn_left ()
                    turn_kft ()
    if_ name_ == '-main -:
            main ()
",607,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()

if __name__ == ""__main__"":
    main()
",7,"# 1 karel Problem - Karel home
    from Karel. Stanfordkarel import *
    # This program defines a main function which should make karel
    # move to the beeper, pick it up and return home
    def main () :
                    get_Out ()
                    pick_food ()
                    get back_ home ()
    # pre : Karel facing east, at the corner of starting position
    # post: karel facing east, outside the home, at the position of beeper
    def get_out () :
                    turn_right ( )
                        move ()
                        turn_left ()
                        move ()
                        move ()
                        move ()
    # post: Karel facing west, at the position of beeper
    def pick-food ():
                pick_beeper ()
                turn- around ()
    # post: Karel facing east, at the corner of starting position
    def get_ back_home () :
                    move ()
                    Move ()
                    move ()
                    turn right ()
                    move ()
                    turn right ()
def turn right () ;
            for i in range (3) :
                            turn-left ()
def
            turn-around () :
                turn_left ()
                turn_kft ()
if_ name_ == '-main -:
        main ()
",469,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
",10,"# 1 karel Problem - Karel home
    from Karel. Stanfordkarel import *
    # This program defines a main function which should make karel
    # move to the beeper, pick it up and return home
    def main () :
                get_Out ()
                pick_food ()
                get back_ home ()
    # pre : Karel facing east, at the corner of starting position
    # post: karel facing east, outside the home, at the position of beeper
    def get_out () :
                    turn_right ( )
                    move ()
                    turn_left ()
                    move ()
                    move ()
                    move ()
    # post: Karel facing west, at the position of beeper
    def pick-food ():
                pick_beeper ()
                turn- around ()
    # post: Karel facing east, at the corner of starting position
    def get_ back_home () :
                move ()
                Move ()
                move ()
                turn right ()
                move ()
                turn right ()
def turn right () ;
            for i in range (3) :
                        turn-left ()
def
            turn-around () :
            turn_left ()
                turn_kft ()
if_ name_ == '-main -:
        main ()
",405,"# Karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
",13,"# 1 karel Problem - Karel home
    from Karel. Stanfordkarel import *
    # This program defines a main function which should make karel
    # move to the beeper, pick it up and return home
    def main () :
                get_Out ()
                pick_food ()
                get back_ home ()
    # pre : Karel facing east, at the corner of starting position
    # post: karel facing east, outside the home, at the position of beeper
    def get_out () :
                    turn_right ( )
                    move ()
                    turn_left ()
                    move ()
                    move ()
                    move ()
    # post: Karel facing west, at the position of beeper
    def pick-food ():
            pick_beeper ()
                turn- around ()
# post: Karel facing east, at the corner of starting position
    def get_ back_home () :
                move ()
                Move ()
                move ()
                turn right ()
                move ()
                turn right ()
def turn right () ;
            for i in range (3) :
                        turn-left ()
def
            turn-around () :
            turn_left ()
            turn_kft ()
if_ name_ == '-main -:
        main ()
",393,"# Karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
",13,"# 1 karel Problem - Karel home
    from Karel. Stanfordkarel import *
    # This program defines a main function which should make karel
    # move to the beeper, pick it up and return home
    def main () :
                get_Out ()
                pick_food ()
                get back_ home ()
    # pre : Karel facing east, at the corner of starting position
    # post: karel facing east, outside the home, at the position of beeper
    def get_out () :
                    turn_right ( )
                    move ()
                    turn_left ()
                    move ()
                    move ()
                    move ()
    # post: Karel facing west, at the position of beeper
    def pick-food ():
            pick_beeper ()
                turn- around ()
# post: Karel facing east, at the corner of starting position
    def get_ back_home () :
                move ()
                Move ()
                move ()
                turn right ()
                move ()
                turn right ()
def turn right () ;
            for i in range (3) :
                        turn-left ()
def
            turn-around () :
            turn_left ()
            turn_kft ()
if_ name_ == '-main -:
        main ()
",393,"# Karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
",13,"# 1 karel Problem - Karel home
    from Karel. Stanfordkarel import *
    # This program defines a main function which should make karel
    # move to the beeper, pick it up and return home
    def main () :
                get_Out ()
                pick_food ()
                get back_ home ()
    # pre : Karel facing east, at the corner of starting position
    # post: karel facing east, outside the home, at the position of beeper
    def get_out () :
                turn_right ( )
                move ()
                turn_left ()
                move ()
                    move ()
                    move ()
    # post: Karel facing west, at the position of beeper
    def pick-food ():
            pick_beeper ()
                turn- around ()
# post: Karel facing east, at the corner of starting position
    def get_ back_home () :
                move ()
                Move ()
                move ()
                turn right ()
                move ()
                turn right ()
def turn right () ;
            for i in range (3) :
                    turn-left ()
def
            turn-around () :
            turn_left ()
            turn_kft ()
if_ name_ == '-main -:
        main ()
",373,"# Karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
",13,"# 1 karel Problem - Karel home
    from Karel. Stanfordkarel import *
    # This program defines a main function which should make karel
    # move to the beeper, pick it up and return home
    def main () :
            get_Out ()
            pick_food ()
            get back_ home ()
    # pre : Karel facing east, at the corner of starting position
    # post: karel facing east, outside the home, at the position of beeper
    def get_out () :
            turn_right ( )
            move ()
            turn_left ()
            move ()
            move ()
            move ()
    # post: Karel facing west, at the position of beeper
    def pick-food ():
            pick_beeper ()
            turn- around ()
# post: Karel facing east, at the corner of starting position
    def get_ back_home () :
            move ()
            Move ()
            move ()
            turn right ()
            move ()
            turn right ()
def turn right () ;
        for i in range (3) :
                turn-left ()
def
        turn-around () :
            turn_left ()
            turn_kft ()
if_ name_ == '-main -:
        main ()
",289,"# Karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
        get_out()
        pick_food()
        get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
        turn_right()
        move()
        turn_left()
        move()
        move()
        move()
# post: Karel facing west, at the position of beeper

def pick_food():
        pick_beeper()
        turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
        move()
        move()
        move()
        turn_right()
        move()
        turn_right()

def turn_right():
        for i in range(3):
                turn_left()

def turn_around():
        turn_left()
        turn_left()
if __name__ == '__main__':
        main()
",104,"# 1 karel Problem - Karel home
    from Karel. Stanfordkarel import *
    # This program defines a main function which should make karel
    # move to the beeper, pick it up and return home
    def main () :
            get_Out ()
            pick_food ()
            get back_ home ()
    # pre : Karel facing east, at the corner of starting position
    # post: karel facing east, outside the home, at the position of beeper
    def get_out () :
            turn_right ( )
            move ()
            turn_left ()
            move ()
                move ()
                move ()
    # post: Karel facing west, at the position of beeper
    def pick-food ():
            pick_beeper ()
            turn- around ()
# post: Karel facing east, at the corner of starting position
    def get_ back_home () :
            move ()
            Move ()
            move ()
            turn right ()
            move ()
            turn right ()
def turn right () ;
        for i in range (3) :
                turn-left ()
def
        turn-around () :
            turn_left ()
            turn_kft ()
if_ name_ == '-main -:
        main ()
",297,"# Karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
",13,"# 1 karel Problem - Karel home
    from Karel. Stanfordkarel import *
    # This program defines a main function which should make karel
    # move to the beeper, pick it up and return home
    def main () :
            get_Out ()
            pick_food ()
            get back_ home ()
    # pre : Karel facing east, at the corner of starting position
    # post: karel facing east, outside the home, at the position of beeper
    def get_out () :
            turn_right ( )
            move ()
            turn_left ()
            move ()
            move ()
            move ()
    # post: Karel facing west, at the position of beeper
    def pick-food ():
            pick_beeper ()
            turn- around ()
# post: Karel facing east, at the corner of starting position
    def get_ back_home () :
            move ()
            Move ()
            move ()
            turn right ()
            move ()
            turn right ()
def turn right () ;
        for i in range (3) :
                turn-left ()
def
        turn-around () :
            turn_left ()
            turn_kft ()
if_ name_ == '-main -:
        main ()
",289,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
",10,"# 1 karel Problem - Karel home
    from Karel. Stanfordkarel import *
    # This program defines a main function which should make karel
    # move to the beeper, pick it up and return home
    def main () :
            get_Out ()
            pick_food ()
            get back_ home ()
    # pre : Karel facing east, at the corner of starting position
    # post: karel facing east, outside the home, at the position of beeper
    def get_out () :
            turn_right ( )
            move ()
            turn_left ()
            move ()
            move ()
            move ()
    # post: Karel facing west, at the position of beeper
    def pick-food ():
            pick_beeper ()
            turn- around ()
# post: Karel facing east, at the corner of starting position
    def get_ back_home () :
            move ()
            Move ()
            move ()
            turn right ()
            move ()
            turn right ()
def turn right () ;
        for i in range (3) :
                turn-left ()
def
        turn-around () :
            turn_left ()
            turn_kft ()
if_ name_ == '-main -:
        main ()
",289,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
",10,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
        get_Out ()
        pick_food ()
        get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
        turn_right ( )
        move ()
        turn_left ()
        move ()
        move ()
        move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
        pick_beeper ()
        turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
        move ()
        Move ()
        move ()
        turn right ()
        move ()
        turn right ()
def turn right () ;
    for i in range (3) :
            turn-left ()
def
    turn-around () :
        turn_left ()
        turn_kft ()
if_ name_ == '-main -:
    main ()
",161,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
        get_out()
        pick_food()
        get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
        turn_right()
        move()
        turn_left()
        move()
        move()
        move()
# post: Karel facing west, at the position of beeper

def pick_food():
        pick_beeper()
        turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
        move()
        move()
        move()
        turn_right()
        move()
        turn_right()

def turn_right():
    for i in range(3):
            turn_left()

def turn_around():
        turn_left()
        turn_left()
if __name__ == '__main__':
    main()
",90,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
        turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",85,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
",10,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
    turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",89,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main () :
    get_Out ()
    pick_food ()
    get_back_home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper

def pick_food ():
    pick_beeper ()
    turn_around ()
# post: Karel facing east, at the corner of starting position

def get_back_home () :
    move ()
    move ()
    move ()
    turn_right ()
    move ()
    turn_right ()

def turn_right () :
    for i in range (3) :
        turn_left ()

def turn_around () :
    turn_left ()
    turn_left ()
if __name__ == '__main__' :
    main ()
",50,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
    turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",89,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
",10,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
    turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",89,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
",10,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
    turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",89,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
",10,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
    turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",89,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
",10,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
    turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",89,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main () :
    get_Out ()
    pick_food ()
    get_back_home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper

def pick_food ():
    pick_beeper ()
    turn_around ()
# post: Karel facing east, at the corner of starting position

def get_back_home () :
    move ()
    move ()
    move ()
    turn_right ()
    move ()
    turn_right ()

def turn_right () :
    for i in range (3) :
        turn_left ()

def turn_around () :
    turn_left ()
    turn_left ()
if __name__ == '__main__':
    main ()
",49,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
    turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",89,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
",10,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
    turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",89,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main ():
    get_out ()
    pick_food ()
    get_back_home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out ():
    turn_right ()
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper

def pick_food ():
    pick_beeper ()
    turn_around ()
# post: Karel facing east, at the corner of starting position

def get_back_home ():
    move ()
    move ()
    move ()
    turn_right ()
    move ()
    turn_right ()

def turn_right ():
    for i in range (3):
        turn_left ()

def turn_around ():
    turn_left ()
    turn_left ()
if __name__ == '__main__':
    main ()
",41,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
    turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",89,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
",10,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
    turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",89,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
",10,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
    turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",89,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main ():
    get_out ()
    pick_food ()
    get_back_home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out ():
    turn_right ()
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper

def pick_food ():
    pick_beeper ()
    turn_around ()
# post: Karel facing east, at the corner of starting position

def get_back_home ():
    move ()
    move ()
    move ()
    turn_right ()
    move ()
    turn_right ()

def turn_right ():
    for i in range (3):
        turn_left ()

def turn_around ():
    turn_left ()
    turn_left ()
if __name__ == '__main__':
    main ()
",41,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
    turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",89,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main () :
    get_out ()
    pick_food ()
    get_back_home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper

def pick_food ():
    pick_beeper ()
    turn_around ()
# post: Karel facing east, at the corner of starting position

def get_back_home () :
    move ()
    move ()
    move ()
    turn_right ()
    move ()
    turn_right ()

def turn_right () :
    for i in range (3) :
        turn_left ()

def turn_around () :
    turn_left ()
    turn_left ()
if __name__ == '__main__':
    main ()
",48,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
    turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",89,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
",10,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
    turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",89,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main () :
    get_Out ()
    pick_food ()
    get_back_home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper

def pick_food ():
    pick_beeper ()
    turn_around ()
# post: Karel facing east, at the corner of starting position

def get_back_home () :
    move ()
    move ()
    move ()
    turn_right ()
    move ()
    turn_right ()

def turn_right () :
    for i in range (3) :
        turn_left ()

def turn_around () :
    turn_left ()
    turn_left ()
if __name__ == '__main__':
    main ()
",49,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
    turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",89,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
",10,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
    turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",89,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main () :
    get_Out ()
    pick_food ()
    get_back_home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper

def pick_food ():
    pick_beeper ()
    turn_around ()
# post: Karel facing east, at the corner of starting position

def get_back_home () :
    move ()
    move ()
    move ()
    turn_right ()
    move ()
    turn_right ()

def turn_right () :
    for i in range (3) :
        turn_left ()

def turn_around () :
    turn_left ()
    turn_left ()
if __name__ == '__main__':
    main ()
",49,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
    turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",89,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main () :
    get_out ()
    pick_food ()
    get_back_home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper

def pick_food ():
    pick_beeper ()
    turn_around ()
# post: Karel facing east, at the corner of starting position

def get_back_home () :
    move ()
    move ()
    move ()
    turn_right ()
    move ()
    turn_right ()

def turn_right () :
    for i in range (3) :
        turn_left ()

def turn_around () :
    turn_left ()
    turn_left ()
if __name__ == '__main__':
    main ()
",48,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
    turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",89,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
",10,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
    turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",89,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
",10,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
    turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",89,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
",10,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
        get_Out ()
        pick_food ()
        get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
        turn_right ( )
        move ()
        turn_left ()
        move ()
        move ()
        move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
        pick_beeper ()
        turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
        move ()
        Move ()
        move ()
        turn right ()
        move ()
        turn right ()
def turn right () ;
    for i in range (3) :
        turn-left ()
def
    turn-around () :
        turn_left ()
        turn_kft ()
if_ name_ == '-main -:
    main ()
",157,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main () :
    get_Out ()
    pick_food ()
    get_back_home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper

def pick_food ():
    pick_beeper ()
    turn_around ()
# post: Karel facing east, at the corner of starting position

def get_back_home () :
    move ()
    move ()
    move ()
    turn_right ()
    move ()
    turn_right ()

def turn_right () :
    for i in range (3) :
        turn_left ()

def turn_around () :
    turn_left ()
    turn_left ()
if __name__ == '__main__':
    main ()
",49,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
    turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",89,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main () :
    get_out ()
    pick_food ()
    get_back_home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper

def pick_food ():
    pick_beeper ()
    turn_around ()
# post: Karel facing east, at the corner of starting position

def get_back_home () :
    move ()
    move ()
    move ()
    turn_right ()
    move ()
    turn_right ()

def turn_right () :
    for i in range (3) :
        turn_left ()

def turn_around () :
    turn_left ()
    turn_left ()
if __name__ == '__main__':
    main ()
",48,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
    turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",89,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
",10,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
    turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",89,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
",10,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
    turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",89,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
",10,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
    turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",89,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
",10,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
    turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",89,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main () :
    get_out ()
    pick_food ()
    get_back_home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper

def pick_food ():
    pick_beeper ()
    turn_around ()
# post: Karel facing east, at the corner of starting position

def get_back_home () :
    move ()
    move ()
    move ()
    turn_right ()
    move ()
    turn_right ()

def turn_right () :
    for i in range (3) :
        turn_left ()

def turn_around () :
    turn_left ()
    turn_left ()
if __name__ == '__main__':
    main ()
",48,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
    turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",89,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
",10,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
    turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",89,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
",10,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
    turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",89,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main () :
    get_Out ()
    pick_food ()
    get_back_home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper

def pick_food ():
    pick_beeper ()
    turn_around ()
# post: Karel facing east, at the corner of starting position

def get_back_home () :
    move ()
    move ()
    move ()
    turn_right ()
    move ()
    turn_right ()

def turn_right () :
    for i in range (3) :
        turn_left ()

def turn_around () :
    turn_left ()
    turn_left ()
if __name__ == '__main__':
    main ()
",49,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
    turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",89,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
",10,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
    turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",89,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
",10,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
    turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",89,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
",10,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
    get_Out ()
    pick_food ()
    get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
    turn_right ( )
    move ()
    turn_left ()
    move ()
    move ()
    move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
    pick_beeper ()
    turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
    move ()
    Move ()
    move ()
    turn right ()
    move ()
    turn right ()
def turn right () ;
    for i in range (3) :
    turn-left ()
def
    turn-around () :
    turn_left ()
    turn_kft ()
if_ name_ == '-main -:
main ()
",89,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: Karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
",10,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main ():
get_out ()
pick_food ()
get_back_home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out ():
turn_right ()
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper

def pick_food ():
pick_beeper ()
turn_around ()
# post: Karel facing east, at the corner of starting position

def get_back_home ():
move ()
move ()
move ()
turn_right ()
move ()
turn_right ()

def turn_right ():
for i in range (3):
turn_left ()

def turn_around ():
turn_left ()
turn_left ()
if __name__ == '__main__':
main ()
",133,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# Karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()
if __name__ == '__main__':
main()
",105,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()

if __name__ == ""__main__"":
main()
",99,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()

if __name__ == ""__main__"":
main()
",99,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# Karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()

if __name__ == ""__main__"":
main()
",102,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()
if __name__ == '__main__':
main()
",102,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# Karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()

if __name__ == ""__main__"":
main()
",102,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()
if __name__ == '__main__':
main()
",102,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# Karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: Karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()

if __name__ == ""__main__"":
main()
",103,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main () :
get_out ()
pick_food ()
get_back_home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out () :
turn_right ()
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper

def pick_food ():
pick_beeper ()
turn_around ()
# post: Karel facing east, at the corner of starting position

def get_back_home () :
move ()
move ()
move ()
turn_right ()
move ()
turn_right ()

def turn_right () :
for i in range (3) :
turn_left ()

def turn_around () :
turn_left ()
turn_left ()
if __name__ == '__main__':
main ()
",139,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main ():
get_out ()
pick_food ()
get_back_home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out ():
turn_right ()
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper

def pick_food ():
pick_beeper ()
turn_around ()
# post: Karel facing east, at the corner of starting position

def get_back_home ():
move ()
move ()
move ()
turn_right ()
move ()
turn_right ()

def turn_right ():
for i in range (3):
turn_left ()

def turn_around ():
turn_left ()
turn_left ()
if __name__ == '__main__':
main ()
",133,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main () :
get_out ()
pick_food ()
get_back_home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out () :
turn_right ()
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper

def pick_food ():
pick_beeper ()
turn_around ()
# post: Karel facing east, at the corner of starting position

def get_back_home () :
move ()
move ()
move ()
turn_right ()
move ()
turn_right ()

def turn_right () :
for i in range (3) :
turn_left ()

def turn_around () :
turn_left ()
turn_left ()
if __name__ == '__main__':
main ()
",139,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()

if __name__ == ""__main__"":
main()
",99,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# Karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()

if __name__ == ""__main__"":
main()
",102,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()

if __name__ == ""__main__"":
main()
",99,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()

if __name__ == ""__main__"":
main()
",99,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()

if __name__ == ""__main__"":
main()
",99,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()
if __name__ == '__main__':
main()
",102,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main ():
get_out ()
pick_food ()
get_back_home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out ():
turn_right ()
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper

def pick_food ():
pick_beeper ()
turn_around ()
# post: Karel facing east, at the corner of starting position

def get_back_home ():
move ()
move ()
move ()
turn_right ()
move ()
turn_right ()

def turn_right ():
for i in range (3):
turn_left ()

def turn_around ():
turn_left ()
turn_left ()
if __name__ == '__main__':
main ()
",133,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()
if __name__ == '__main__':
main()
",102,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()

if __name__ == ""__main__"":
main()
",99,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()
if __name__ == '__main__':
main()
",102,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()
if __name__ == '__main__':
main()
",105,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main () :
get_out ()
pick_food ()
get_back_home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out () :
turn_right ()
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper

def pick_food ():
pick_beeper ()
turn_around ()
# post: Karel facing east, at the corner of starting position

def get_back_home () :
move ()
move ()
move ()
turn_right ()
move ()
turn_right ()

def turn_right () :
for i in range (3) :
turn_left ()

def turn_around () :
turn_left ()
turn_left ()
if __name__ == '__main__':
main ()
",139,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# Karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()
if __name__ == '__main__':
main()
",105,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()
if __name__ == '__main__':
main()
",102,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()
if __name__ == '__main__':
main()
",102,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# Karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()

if __name__ == ""__main__"":
main()
",102,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# Karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: Karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()

if __name__ == ""__main__"":
main()
",103,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()

if __name__ == ""__main__"":
main()
",99,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# Karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()

if __name__ == ""__main__"":
main()
",102,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main ():
get_out ()
pick_food ()
get_back_home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out ():
turn_right ()
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper

def pick_food ():
pick_beeper ()
turn_around ()
# post: Karel facing east, at the corner of starting position

def get_back_home ():
move ()
move ()
move ()
turn_right ()
move ()
turn_right ()

def turn_right ():
for i in range (3):
turn_left ()

def turn_around ():
turn_left ()
turn_left ()

if __name__ == ""__main__"":
main ()
",130,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# Karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()

if __name__ == ""__main__"":
main()
",102,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main ():
get_out ()
pick_food ()
get_back_home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out ():
turn_right ()
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper

def pick_food ():
pick_beeper ()
turn_around ()
# post: Karel facing east, at the corner of starting position

def get_back_home ():
move ()
move ()
move ()
turn_right ()
move ()
turn_right ()

def turn_right ():
for i in range (3):
turn_left ()

def turn_around ():
turn_left ()
turn_left ()
if __name__ == '__main__':
main ()
",133,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()
if __name__ == '__main__':
main()
",102,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# Karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()
if __name__ == '__main__':
main()
",105,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()

if __name__ == ""__main__"":
main()
",99,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main ():
get_out ()
pick_food ()
get_back_home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out ():
turn_right ()
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper

def pick_food ():
pick_beeper ()
turn_around ()
# post: Karel facing east, at the corner of starting position

def get_back_home ():
move ()
move ()
move ()
turn_right ()
move ()
turn_right ()

def turn_right ():
for i in range (3):
turn_left ()

def turn_around ():
turn_left ()
turn_left ()

if __name__ == ""__main__"":
main ()
",130,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main ():
get_out ()
pick_food ()
get_back_home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out ():
turn_right ()
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper

def pick_food ():
pick_beeper ()
turn_around ()
# post: Karel facing east, at the corner of starting position

def get_back_home ():
move ()
move ()
move ()
turn_right ()
move ()
turn_right ()

def turn_right ():
for i in range (3):
turn_left ()

def turn_around ():
turn_left ()
turn_left ()
if __name__ == '__main__':
main ()
",133,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()
if __name__ == '__main__':
main()
",102,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# Karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: Karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()
if __name__ == '__main__':
main()
",106,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main () :
get_out ()
pick_food ()
get_back_home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out () :
turn_right ()
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper

def pick_food ():
pick_beeper ()
turn_around ()
# post: Karel facing east, at the corner of starting position

def get_back_home () :
move ()
move ()
move ()
turn_right ()
move ()
turn_right ()

def turn_right () :
for i in range (3) :
turn_left ()

def turn_around () :
turn_left ()
turn_left ()
if __name__ == '__main__':
main ()
",139,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# Karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()
if __name__ == '__main__':
main()
",105,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()

if __name__ == ""__main__"":
main()
",99,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()
if __name__ == '__main__':
main()
",102,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# Karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: Karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()
if __name__ == '__main__':
main()
",106,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()

if __name__ == ""__main__"":
main()
",102,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# Karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()
if __name__ == '__main__':
main()
",105,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre : Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ( )
move ()
turn_left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn- around ()
# post: Karel facing east, at the corner of starting position
def get_ back_home () :
move ()
Move ()
move ()
turn right ()
move ()
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == '-main -:
main ()
",169,"# Karel Problem - Karel home
from karel.stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home

def main():
get_out()
pick_food()
get_back_home()
# pre : Karel facing east, at the corner of starting position
# post: Karel facing east, outside the home, at the position of beeper

def get_out():
turn_right()
move()
turn_left()
move()
move()
move()
# post: Karel facing west, at the position of beeper

def pick_food():
pick_beeper()
turn_around()
# post: Karel facing east, at the corner of starting position

def get_back_home():
move()
move()
move()
turn_right()
move()
turn_right()

def turn_right():
for i in range(3):
turn_left()

def turn_around():
turn_left()
turn_left()

if __name__ == ""__main__"":
main()
",103
"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)
print(factorial(5))
","def factorial (n) :
if n=0 :
return 1
else:
return 1 * factorial (n-1)
print (factorial (5)",37,"def factorial (n):
            if n= = 0 :
                    return 1
        else :
                return 1 * factorial (n-1)
    print (factorial (5)
",48,"def factorial (n):
            if n == 0 :
                    return 1
            else :
                    return 1 * factorial (n-1)
    print (factorial (5))
",53,"def factorial (n):
            if n= = 0 :
                    return 1
        else :
                return 1 * factorial (n-1)
    print (factorial (5)
",48,"def factorial (n):
            if n == 0 :
                    return 1
            else :
                    return 1 * factorial (n-1)
    print (factorial (5))
",53,"def factorial (n):
            if n= = 0 :
                    return 1
        else :
                return 1 * factorial (n-1)
    print (factorial (5)
",48,"def factorial (n):
            if n == 0 :
                    return 1
        else :
                return 1 * factorial (n-1)
    print (factorial (5))
",45,"def factorial (n):
            if n= = 0 :
                    return 1
        else :
                return 1 * factorial (n-1)
    print (factorial (5)
",48,"def factorial (n):
            if n == 0 :
                    return 1
        else :
                return n * factorial (n-1)
    print (factorial (5))
",44,"def factorial (n):
            if n= = 0 :
                return 1
        else :
                return 1 * factorial (n-1)
    print (factorial (5)
",44,"def factorial (n):
            if n == 0 :
                return 1
        else :
                return 1 * factorial (n-1)
    print (factorial (5))
",41,"def factorial (n):
            if n= = 0 :
                return 1
        else :
                return 1 * factorial (n-1)
    print (factorial (5)
",44,"def factorial (n):
            if n == 0 :
                return 1
        else :
                return 1 * factorial (n-1)
    print (factorial (5))
",41,"def factorial (n):
            if n= = 0 :
                return 1
        else :
                return 1 * factorial (n-1)
    print (factorial (5)
",44,"def factorial (n):
            if n == 0 :
                return 1
        else :
                return 1 * factorial (n-1)
    print (factorial (5))
",41,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5))
",29,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5))
",29,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5))
",29,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5))
",29,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5))
",29,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5))
",29,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5))
",29,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5))
",29,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5))
",29,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5))
",29,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5))
",29,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5))
",29,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5))
",29,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5))
",29,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5))
",29,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5))
",29,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5))
",29,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5))
",29,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5))
",29,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5))
",29,"def factorial (n):
        if n= = 0 :
            return 1
        else :
            return 1 * factorial (n-1)
    print (factorial (5)
",32,"def factorial (n):
        if n == 0 :
            return 1
        else :
            return n * factorial (n-1)
    print (factorial (5))
",28,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9,"def factorial (n):
    if n= = 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5)
",12,"def factorial (n):
    if n == 0 :
        return 1
    else :
        return 1 * factorial (n-1)
print (factorial (5))
",9
"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    list = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                list.append(elem)
    print(list)
","det main () :
list 1 2 [1, 2,3,4]
list 2 =
(3,4,5,6)
List = []
for elem1 in list 1?
for eleme in list2:
it elem1 = = elem2?
elem = elem 2
list- append (elem)
print (ist)",100,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"                                        def main():
                                    list1 = [1, 2, 3, 4]
                            list2 = (3, 4, 5, 6)
                        List = []
                    for elem1 in list1:
                for elem2 in list2:
            if elem1 == elem2:
        elem = elem1
    List.append(elem)
print(List)
",169,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = (3, 4, 5, 6)
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",37,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = (3, 4, 5, 6)
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",37,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
    List.append(elem)
print(List)
",19,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = (3, 4, 5, 6)
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",37,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)
",3,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)
",3,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = (3, 4, 5, 6)
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",37,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = (3, 4, 5, 6)
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",37,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"                                        def main():
                                    list1 = [1, 2, 3, 4]
                            list2 = [3, 4, 5, 6]
                        List = []
                    for elem1 in list1:
                for elem2 in list2:
            if elem1 == elem2:
        elem = elem1
    List.append(elem)
print(List)
",167,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = (3, 4, 5, 6)
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",37,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = (3, 4, 5, 6)
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",37,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = (3, 4, 5, 6)
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",37,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)
",3,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = (3, 4, 5, 6)
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",37,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = (3, 4, 5, 6)
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",37,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = (3, 4, 5, 6)
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)
",5,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = (3, 4, 5, 6)
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",37,"                                        det main () :
                                    list 1 = [1, 2,3,4]
                            list 2 =
                                (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",214,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                    det main () :
                                list 1 = [1, 2,3,4]
                            list 2 =
                            (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",202,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)
",3,"                                    det main () :
                                list 1 = [1, 2,3,4]
                            list 2 =
                            (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",202,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                    det main () :
                                list 1 = [1, 2,3,4]
                            list 2 =
                            (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",202,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                    det main () :
                                list 1 = [1, 2,3,4]
                            list 2 =
                            (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",202,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                    det main () :
                                list 1 = [1, 2,3,4]
                            list 2 =
                            (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",202,"def main():
    list1 = [1, 2, 3, 4]
    list2 = (3, 4, 5, 6)
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",37,"                                    det main () :
                                list 1 = [1, 2,3,4]
                            list 2 =
                            (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",202,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                    det main () :
                                list 1 = [1, 2,3,4]
                            list 2 =
                            (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",202,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                    det main () :
                                list 1 = [1, 2,3,4]
                            list 2 =
                            (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",202,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                    det main () :
                                list 1 = [1, 2,3,4]
                            list 2 =
                            (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",202,"def main():
    list1 = [1, 2, 3, 4]
    list2 = (3, 4, 5, 6)
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",37,"                                    det main () :
                                list 1 = [1, 2,3,4]
                            list 2 =
                            (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",202,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)
",3,"                                    det main () :
                                list 1 = [1, 2,3,4]
                            list 2 =
                            (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",202,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                    det main () :
                                list 1 = [1, 2,3,4]
                            list 2 =
                            (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",202,"def main():
    list1 = [1, 2, 3, 4]
    list2 = (3, 4, 5, 6)
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",37,"                                    det main () :
                                list 1 = [1, 2,3,4]
                            list 2 =
                            (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",202,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                    det main () :
                                list 1 = [1, 2,3,4]
                            list 2 =
                            (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",202,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                    det main () :
                                list 1 = [1, 2,3,4]
                            list 2 =
                            (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",202,"def main():
    list1 = [1, 2, 3, 4]
    list2 = (3, 4, 5, 6)
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",37,"                                    det main () :
                                list 1 = [1, 2,3,4]
                            list 2 =
                            (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",202,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                    det main () :
                                list 1 = [1, 2,3,4]
                            list 2 =
                            (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",202,"def main():
    list1 = [1, 2, 3, 4]
    list2 = (3, 4, 5, 6)
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",37,"                                    det main () :
                                list 1 = [1, 2,3,4]
                            list 2 =
                            (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",202,"                                    def main():
                                list1 = [1, 2, 3, 4]
                            list2 = (3, 4, 5, 6)
                        List = []
                    for elem1 in list1:
                for elem2 in list2:
            if elem1 == elem2:
        elem = elem1
    List.append(elem)
print(List)
",161,"                                    det main () :
                                list 1 = [1, 2,3,4]
                            list 2 =
                            (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",202,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                    det main () :
                                list 1 = [1, 2,3,4]
                            list 2 =
                            (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",202,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                    det main () :
                                list 1 = [1, 2,3,4]
                            list 2 =
                            (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",202,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                    det main () :
                                list 1 = [1, 2,3,4]
                            list 2 =
                            (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",202,"def main():
    list1 = [1, 2, 3, 4]
    list2 = (3, 4, 5, 6)
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",37,"                                    det main () :
                                list 1 = [1, 2,3,4]
                            list 2 =
                            (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",202,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                                det main () :
                            list 1 = [1, 2,3,4]
                        list 2 =
                        (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",187,"def main() :
    list1 = [1, 2,3,4]
    list2 = [3,4,5,6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)
",9,"                                det main () :
                            list 1 = [1, 2,3,4]
                        list 2 =
                        (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",187,"def main() :
    list1 = [1, 2,3,4]
    list2 = [3,4,5,6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)
",9,"                                det main () :
                            list 1 = [1, 2,3,4]
                        list 2 =
                        (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",187,"def main() :
    list1 = [1, 2,3,4]
    list2 = [3,4,5,6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)
",9,"                                det main () :
                            list 1 = [1, 2,3,4]
                        list 2 =
                        (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",187,"def main() :
    list1 = [1, 2,3,4]
    list2 = [3,4,5,6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)
",9,"                                det main () :
                            list 1 = [1, 2,3,4]
                        list 2 =
                        (3,4,5,6)
                        List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",187,"def main() :
    list1 = [1, 2,3,4]
    list2 = [3,4,5,6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)
",9,"                                det main () :
                            list 1 = [1, 2,3,4]
                        list 2 =
                        (3,4,5,6)
                    List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",183,"def main() :
    list1 = [1, 2,3,4]
    list2 = [3,4,5,6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)
",9,"                                det main () :
                            list 1 = [1, 2,3,4]
                        list 2 =
                        (3,4,5,6)
                    List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",183,"def main() :
    list1 = [1, 2,3,4]
    list2 = (3,4,5,6)
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)
",11,"                                det main () :
                            list 1 = [1, 2,3,4]
                        list 2 =
                        (3,4,5,6)
                    List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",183,"def main() :
    list1 = [1, 2,3,4]
    list2 = [3,4,5,6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)
",9,"                                det main () :
                            list 1 = [1, 2,3,4]
                        list 2 =
                        (3,4,5,6)
                    List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",183,"def main() :
    list1 = [1, 2,3,4]
    list2 = (3,4,5,6)
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem2
                List.append(elem)
    print(List)
",12,"                                det main () :
                            list 1 = [1, 2,3,4]
                        list 2 =
                        (3,4,5,6)
                    List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",183,"def main() :
    list1 = [1, 2,3,4]
    list2 = [3,4,5,6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)
",9,"                                det main () :
                            list 1 = [1, 2,3,4]
                        list 2 =
                        (3,4,5,6)
                    List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",183,"def main() :
    list1 = [1, 2,3,4]
    list2 = [3,4,5,6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)
",9,"                            det main () :
                        list 1 = [1, 2,3,4]
                        list 2 =
                        (3,4,5,6)
                    List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",175,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                            det main () :
                        list 1 = [1, 2,3,4]
                        list 2 =
                        (3,4,5,6)
                    List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",175,"def main():
    list1 = [1, 2, 3, 4]
    list2 = (3, 4, 5, 6)
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",37,"                            det main () :
                        list 1 = [1, 2,3,4]
                        list 2 =
                        (3,4,5,6)
                    List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",175,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                            det main () :
                        list 1 = [1, 2,3,4]
                        list 2 =
                        (3,4,5,6)
                    List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",175,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                            det main () :
                        list 1 = [1, 2,3,4]
                        list 2 =
                        (3,4,5,6)
                    List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",175,"def main():
    list1 = [1, 2, 3, 4]
    list2 = (3, 4, 5, 6)
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",37,"                            det main () :
                        list 1 = [1, 2,3,4]
                        list 2 =
                        (3,4,5,6)
                    List = []
                    for elem1 in list 1?
                for eleme in list2:
            it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",175,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                        det main () :
                    list 1 = [1, 2,3,4]
                    list 2 =
                    (3,4,5,6)
                List = []
                for elem1 in list 1?
            for eleme in list2:
        it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",154,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)
",3,"                        det main () :
                    list 1 = [1, 2,3,4]
                    list 2 =
                    (3,4,5,6)
                List = []
                for elem1 in list 1?
            for eleme in list2:
        it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",154,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
print(List)
",7,"                        det main () :
                    list 1 = [1, 2,3,4]
                    list 2 =
                    (3,4,5,6)
                List = []
                for elem1 in list 1?
            for eleme in list2:
        it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",154,"def main() :
    list1 = [1, 2,3,4]
    list2 = [3,4,5,6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)
",9,"                        det main () :
                    list 1 = [1, 2,3,4]
                    list 2 =
                    (3,4,5,6)
                List = []
                for elem1 in list 1?
            for eleme in list2:
        it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",154,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)
",3,"                        det main () :
                    list 1 = [1, 2,3,4]
                    list 2 =
                    (3,4,5,6)
                List = []
                for elem1 in list 1?
            for eleme in list2:
        it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",154,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
        for elem1 in list1:
            for elem2 in list2:
                if elem1 == elem2:
                    elem = elem1
    List.append(elem)
print(List)
",35,"                        det main () :
                    list 1 = [1, 2,3,4]
                    list 2 =
                    (3,4,5,6)
                List = []
                for elem1 in list 1?
            for eleme in list2:
        it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",154,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)
",3,"                        det main () :
                    list 1 = [1, 2,3,4]
                    list 2 =
                    (3,4,5,6)
                List = []
                for elem1 in list 1?
            for eleme in list2:
        it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",154,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)
",3,"                        det main () :
                    list 1 = [1, 2,3,4]
                    list 2 =
                    (3,4,5,6)
                List = []
                for elem1 in list 1?
            for eleme in list2:
        it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",154,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)
",3,"                        det main () :
                    list 1 = [1, 2,3,4]
                    list 2 =
                    (3,4,5,6)
                List = []
                for elem1 in list 1?
            for eleme in list2:
        it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",154,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)
",3,"                        det main () :
                    list 1 = [1, 2,3,4]
                    list 2 =
                    (3,4,5,6)
                List = []
                for elem1 in list 1?
            for eleme in list2:
        it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",154,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
print(List)
",7,"                        det main () :
                    list 1 = [1, 2,3,4]
                    list 2 =
                    (3,4,5,6)
                List = []
                for elem1 in list 1?
            for eleme in list2:
        it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",154,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
print(List)
",7,"                    det main () :
                list 1 = [1, 2,3,4]
                list 2 =
                (3,4,5,6)
            List = []
            for elem1 in list 1?
        for eleme in list2:
        it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",127,"def main():
    list1 = [1, 2, 3, 4]
    list2 = (3, 4, 5, 6)
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
print(List)
",9,"                    det main () :
                list 1 = [1, 2,3,4]
                list 2 =
                (3,4,5,6)
            List = []
            for elem1 in list 1?
        for eleme in list2:
        it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",127,"def main():
    list1 = [1, 2,3,4]
    list2 = (3,4,5,6)
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)
",10,"                    det main () :
                list 1 = [1, 2,3,4]
                list 2 =
                (3,4,5,6)
            List = []
            for elem1 in list 1?
        for eleme in list2:
        it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",127,"def main():
    list1 = [1, 2, 3, 4]
    list2 = (3, 4, 5, 6)
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
    List.append(elem)
print(List)
",21,"                    det main () :
                list 1 = [1, 2,3,4]
                list 2 =
                (3,4,5,6)
            List = []
            for elem1 in list 1?
        for eleme in list2:
        it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",127,"def main():
    list1 = [1, 2,3,4]
    list2 = (3,4,5,6)
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
    List.append(elem)
print(List)
",26,"                    det main () :
                list 1 = [1, 2,3,4]
                list 2 =
                (3,4,5,6)
            List = []
            for elem1 in list 1?
        for eleme in list2:
        it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",127,"def main():
    list1 = [1, 2, 3, 4]
    list2 = (3, 4, 5, 6)
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
    List.append(elem)
print(List)
",21,"                    det main () :
                list 1 = [1, 2,3,4]
                list 2 =
                (3,4,5,6)
            List = []
            for elem1 in list 1?
        for eleme in list2:
        it elem1 = = elem2:
        elem = elema
    list. append (elem)
print (ist)
",127,"def main():
    list1 = [1, 2, 3, 4]
    list2 = (3, 4, 5, 6)
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
print(List)
",9
"String = input()
print(String[::-1])
","String = input c)
print (String [ ::- 1])",7,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
    print(string[::-1])
",6,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
    print(string[::-1])
",6,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
    print(string[::-1])
",6,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
print(string[::-1])
",2,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
    print(string[::-1])
",6,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
    print(string[::-1])
",6,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
    print(string[::-1])
",6,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
print(string[::-1])
",2,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
    print(string[::-1])
",6,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
    print(string[::-1])
",6,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
    print(string[::-1])
",6,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
    print(string[::-1])
",6,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
print(string[::-1])
",2,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
print(string[::-1])
",2,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
    print(string[::-1])
",6,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
    print(string[::-1])
",6,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
print(string[::-1])
",2,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
print(string[::-1])
",2,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
print(string[::-1])
",2,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
    print(string[::-1])
",6,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
    print(string[::-1])
",6,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
    print(string[::-1])
",6,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
    print(string[::-1])
",6,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
print(string[::-1])
",2,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
    print(string[::-1])
",6,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
    print(string[::-1])
",6,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
    print(string[::-1])
",6,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
    print(string[::-1])
",6,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
    print(string[::-1])
",6,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
    print(string[::-1])
",6,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
    print(string[::-1])
",6,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
    print(string[::-1])
",6,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
    print(string[::-1])
",6,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
    print(string[::-1])
",6,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
print(string[::-1])
",2,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
print(string[::-1])
",2,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
    print(string[::-1])
",6,"String = input c)
    Print (String [ ::- 1])
",11,"string = input()
    print(string[::-1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"String = input()
Print (String [ ::- 1])
",5,"String = input c)
Print (String [ ::- 1])
",7,"String = input()
Print (String [ ::- 1])
",5,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print(string[::-1])
",2,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"String = input()
Print (String [ ::- 1])
",5,"String = input c)
Print (String [ ::- 1])
",7,"String = input()
Print (String [ ::- 1])
",5,"String = input c)
Print (String [ ::- 1])
",7,"String = input()
Print (String [ ::- 1])
",5,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"String = input()
Print (String [ ::- 1])
",5,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"String = input()
Print (String [ ::- 1])
",5,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"String = input()
Print (String [ ::- 1])
",5,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"String = input()
Print (String [ ::- 1])
",5,"String = input c)
Print (String [ ::- 1])
",7,"String = input()
Print (String [ ::- 1])
",5,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"String = input()
Print (String [ ::- 1])
",5,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"String = input()
Print (String [ ::- 1])
",5,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"String = input()
Print (String [ ::- 1])
",5,"String = input c)
Print (String [ ::- 1])
",7,"String = input()
Print (String [ ::- 1])
",5,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"String = input()
Print (String [ ::- 1])
",5,"String = input c)
Print (String [ ::- 1])
",7,"String = input()
Print (String [ ::- 1])
",5,"String = input c)
Print (String [ ::- 1])
",7,"String = input()
Print (String [ ::- 1])
",5,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"String = input()
Print (String [ ::- 1])
",5,"String = input c)
Print (String [ ::- 1])
",7,"String = input()
Print (String [ ::- 1])
",5,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"String = input()
Print (String [ ::- 1])
",5,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"String = input()
Print (String [ ::- 1])
",5,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"String = input()
Print (String [ ::- 1])
",5,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"String = input()
Print (String [ ::- 1])
",5,"String = input c)
Print (String [ ::- 1])
",7,"string = input()
print (string [ ::- 1])
",6,"String = input c)
Print (String [ ::- 1])
",7,"String = input()
Print (String [ ::- 1])
",5
"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_S()
    move_4x()
    turn_left()
    tower_N()
    tower_S()

def tower_S():
    turn_3x()
    tower()
    turn_left()

def tower_N():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()

if __name__ == ""__main__"":
    main()
","from Karel. Stanford Kad import ""
def main () :
turn - left 11
tower_N()
tower- SC)
move- 4x ( )
turn-left ( )
tower- N()
tower - SC )
del tower - s():
turn - 3x ()
Tower ()
Turn- left ( )
del tower- NC) .
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ):
Put-boper ()
move ()
else:
Put- beeper ()
def.turn- 3x (1:
Turn- left ()
turn - left ()
burn- left ()
def . mere_ 4x();
move ()
move ()
morell
move ()
if -- name __ = = -- main __
main ()",270,"                                                            from Karel. Stanford Kad import *
                del main ():
                                                                    turn- left 1)
                                                            tower_N()
                                                            tower-SC)
                                                        move-4x ( )
                                                    turn-left ( )
                                                    tower _ N()
                                                tower -SC )
        de tower - SC):
                        turn - 3x()
                    Tower ()
                                Turn- left ( )
    del tower- NC).
                            Tower ()
                            turn- 3x()
                            move- 4x ()
        del tower ():
                                    for i in range (5) :
                                                                        il front-is- clear ( ) :
                                                                                Put-boper ()
                                                                                        move ()
                                                                            else:
                                                                                    put- beeper ()
            def. turn- 3x (1.
                                                        Turn_left ()
                                                turn - left ()
                                                    burn- left ()
        def . meve_4x11;
                                        move 11
                                            move ()
                                        morell
                                            move ()
if -- name __ == ' -- main __ :
                                                                main ()
",1474,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"                                                    from Karel. Stanford Kad import *
                del main ():
                                                            turn- left 1)
                                                        tower_N()
                                                        tower-SC)
                                                    move-4x ( )
                                                turn-left ( )
                                                tower _ N()
                                        tower -SC )
        de tower - SC):
                        turn - 3x()
                    Tower ()
                                Turn- left ( )
    del tower- NC).
                            Tower ()
                            turn- 3x()
                            move- 4x ()
        del tower ():
                                    for i in range (5) :
                                                                il front-is- clear ( ) :
                                                                        Put-boper ()
                                                                                move ()
                                                                    else:
                                                                            put- beeper ()
            def. turn- 3x (1.
                                                    Turn_left ()
                                            turn - left ()
                                            burn- left ()
        def . meve_4x11;
                                    move 11
                                        move ()
                                    morell
                                        move ()
if -- name __ == ' -- main __ :
                                                        main ()
",1350,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"                                    from Karel. Stanford Kad import *
            del main ():
                                        turn- left 1)
                                    tower_N()
                                    tower-SC)
                                move-4x ( )
                            turn-left ( )
                                tower _ N()
                        tower -SC )
    de tower - SC):
                    turn - 3x()
                Tower ()
                    Turn- left ( )
    del tower- NC).
                    Tower ()
                    turn- 3x()
                    move- 4x ()
    del tower ():
                        for i in range (5) :
                                            il front-is- clear ( ) :
                                                    Put-boper ()
                                                            move ()
                                                else:
                                                        put- beeper ()
        def. turn- 3x (1.
                                Turn_left ()
                            turn - left ()
                            burn- left ()
    def . meve_4x11;
                        move 11
                        move ()
                        morell
                        move ()
if -- name __ == ' -- main __ :
                                        main ()
",902,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"                            from Karel. Stanford Kad import *
            del main ():
                            turn- left 1)
                            tower_N()
                            tower-SC)
                            move-4x ( )
                            turn-left ( )
                            tower _ N()
                        tower -SC )
    de tower - SC):
                    turn - 3x()
                Tower ()
                    Turn- left ( )
    del tower- NC).
                    Tower ()
                    turn- 3x()
                    move- 4x ()
    del tower ():
                        for i in range (5) :
                                il front-is- clear ( ) :
                                    Put-boper ()
                                            move ()
                                else:
                                        put- beeper ()
        def. turn- 3x (1.
                            Turn_left ()
                        turn - left ()
                        burn- left ()
    def . meve_4x11;
                        move 11
                        move ()
                        morell
                        move ()
if -- name __ == ' -- main __ :
                            main ()
",758,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"                            from Karel. Stanford Kad import *
            del main ():
                            turn- left 1)
                            tower_N()
                            tower-SC)
                            move-4x ( )
                        turn-left ( )
                        tower _ N()
                        tower -SC )
    de tower - SC):
                    turn - 3x()
                Tower ()
                    Turn- left ( )
    del tower- NC).
                    Tower ()
                    turn- 3x()
                    move- 4x ()
    del tower ():
                        for i in range (5) :
                                il front-is- clear ( ) :
                                    Put-boper ()
                                        move ()
                                else:
                                    put- beeper ()
        def. turn- 3x (1.
                            Turn_left ()
                        turn - left ()
                        burn- left ()
    def . meve_4x11;
                        move 11
                        move ()
                        morell
                        move ()
if -- name __ == ' -- main __ :
                            main ()
",742,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"                        from Karel. Stanford Kad import *
            del main ():
                        turn- left 1)
                        tower_N()
                        tower-SC)
                        move-4x ( )
                    turn-left ( )
                        tower _ N()
                    tower -SC )
    de tower - SC):
                turn - 3x()
                Tower ()
                Turn- left ( )
    del tower- NC).
                Tower ()
                turn- 3x()
                move- 4x ()
    del tower ():
                    for i in range (5) :
                            il front-is- clear ( ) :
                                Put-boper ()
                                    move ()
                            else:
                                put- beeper ()
        def. turn- 3x (1.
                        Turn_left ()
                    turn - left ()
                    burn- left ()
    def . meve_4x11;
                    move 11
                    move ()
                    morell
                    move ()
if -- name __ == ' -- main __ :
                        main ()
",638,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"                    from Karel. Stanford Kad import *
            del main ():
                    turn- left 1)
                    tower_N()
                    tower-SC)
                    move-4x ( )
                    turn-left ( )
                    tower _ N()
                    tower -SC )
    de tower - SC):
                turn - 3x()
                Tower ()
                Turn- left ( )
    del tower- NC).
                Tower ()
                turn- 3x()
                move- 4x ()
    del tower ():
                    for i in range (5) :
                        il front-is- clear ( ) :
                            Put-boper ()
                                move ()
                        else:
                            put- beeper ()
        def. turn- 3x (1.
                    Turn_left ()
                    turn - left ()
                    burn- left ()
    def . meve_4x11;
                    move 11
                    move ()
                    morell
                    move ()
if -- name __ == ' -- main __ :
                    main ()
",586,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"                    from Karel. Stanford Kad import *
            del main ():
                    turn- left 1)
                    tower_N()
                    tower-SC)
                    move-4x ( )
                    turn-left ( )
                    tower _ N()
                    tower -SC )
    de tower - SC):
                turn - 3x()
                Tower ()
                Turn- left ( )
    del tower- NC).
                Tower ()
                turn- 3x()
                move- 4x ()
    del tower ():
                    for i in range (5) :
                        il front-is- clear ( ) :
                            Put-boper ()
                                move ()
                        else:
                            put- beeper ()
        def. turn- 3x (1.
                    Turn_left ()
                    turn - left ()
                    burn- left ()
    def . meve_4x11;
                    move 11
                    move ()
                    morell
                    move ()
if -- name __ == ' -- main __ :
                    main ()
",586,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"                from Karel. Stanford Kad import *
        del main ():
                turn- left 1)
                tower_N()
                tower-SC)
                move-4x ( )
                turn-left ( )
                tower _ N()
                tower -SC )
    de tower - SC):
            turn - 3x()
            Tower ()
            Turn- left ( )
    del tower- NC).
            Tower ()
            turn- 3x()
            move- 4x ()
    del tower ():
                for i in range (5) :
                    il front-is- clear ( ) :
                        Put-boper ()
                            move ()
                    else:
                        put- beeper ()
        def. turn- 3x (1.
                Turn_left ()
                turn - left ()
                burn- left ()
    def . meve_4x11;
                move 11
                move ()
                morell
                move ()
if -- name __ == ' -- main __ :
                main ()
",470,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"            from Karel. Stanford Kad import *
    del main ():
            turn- left 1)
            tower_N()
            tower-SC)
            move-4x ( )
            turn-left ( )
            tower _ N()
            tower -SC )
de tower - SC):
        turn - 3x()
        Tower ()
        Turn- left ( )
del tower- NC).
        Tower ()
        turn- 3x()
        move- 4x ()
del tower ():
            for i in range (5) :
                il front-is- clear ( ) :
                    Put-boper ()
                        move ()
                else:
                    put- beeper ()
    def. turn- 3x (1.
            Turn_left ()
            turn - left ()
            burn- left ()
def . meve_4x11;
            move 11
            move ()
            morell
            move ()
if -- name __ == ' -- main __ :
            main ()
",338,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"            from Karel. Stanford Kad import *
    del main ():
            turn- left 1)
            tower_N()
            tower-SC)
            move-4x ( )
            turn-left ( )
            tower _ N()
            tower -SC )
de tower - SC):
        turn - 3x()
        Tower ()
        Turn- left ( )
del tower- NC).
        Tower ()
        turn- 3x()
        move- 4x ()
del tower ():
            for i in range (5) :
                il front-is- clear ( ) :
                    Put-boper ()
                        move ()
                else:
                    put- beeper ()
    def. turn- 3x (1.
            Turn_left ()
            turn - left ()
            burn- left ()
def . meve_4x11;
            move 11
            move ()
            morell
            move ()
if -- name __ == ' -- main __ :
            main ()
",338,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"            from Karel. Stanford Kad import *
    del main ():
            turn- left 1)
            tower_N()
            tower-SC)
            move-4x ( )
            turn-left ( )
            tower _ N()
            tower -SC )
de tower - SC):
        turn - 3x()
        Tower ()
        Turn- left ( )
del tower- NC).
        Tower ()
        turn- 3x()
        move- 4x ()
del tower ():
            for i in range (5) :
                il front-is- clear ( ) :
                    Put-boper ()
                        move ()
                else:
                    put- beeper ()
    def. turn- 3x (1.
            Turn_left ()
            turn - left ()
            burn- left ()
def . meve_4x11;
            move 11
            move ()
            morell
            move ()
if -- name __ == ' -- main __ :
            main ()
",338,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"            from Karel. Stanford Kad import *
    del main ():
            turn- left 1)
            tower_N()
            tower-SC)
            move-4x ( )
            turn-left ( )
            tower _ N()
            tower -SC )
de tower - SC):
        turn - 3x()
        Tower ()
        Turn- left ( )
del tower- NC).
        Tower ()
        turn- 3x()
        move- 4x ()
del tower ():
            for i in range (5) :
                il front-is- clear ( ) :
                    Put-boper ()
                        move ()
                else:
                    put- beeper ()
    def. turn- 3x (1.
            Turn_left ()
            turn - left ()
            burn- left ()
def . meve_4x11;
            move 11
            move ()
            morell
            move ()
if -- name __ == ' -- main __ :
            main ()
",338,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"            from Karel. Stanford Kad import *
    del main ():
            turn- left 1)
            tower_N()
            tower-SC)
            move-4x ( )
            turn-left ( )
            tower _ N()
            tower -SC )
de tower - SC):
        turn - 3x()
        Tower ()
        Turn- left ( )
del tower- NC).
        Tower ()
        turn- 3x()
        move- 4x ()
del tower ():
            for i in range (5) :
                il front-is- clear ( ) :
                    Put-boper ()
                    move ()
                else:
                    put- beeper ()
    def. turn- 3x (1.
            Turn_left ()
            turn - left ()
            burn- left ()
def . meve_4x11;
            move 11
            move ()
            morell
            move ()
if -- name __ == ' -- main __ :
            main ()
",334,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"            from Karel. Stanford Kad import *
    del main ():
            turn- left 1)
            tower_N()
            tower-SC)
            move-4x ( )
            turn-left ( )
            tower _ N()
            tower -SC )
de tower - SC):
        turn - 3x()
        Tower ()
        Turn- left ( )
del tower- NC).
        Tower ()
        turn- 3x()
        move- 4x ()
del tower ():
            for i in range (5) :
                il front-is- clear ( ) :
                    Put-boper ()
                    move ()
                else:
                    put- beeper ()
    def. turn- 3x (1.
            Turn_left ()
            turn - left ()
            burn- left ()
def . meve_4x11;
            move 11
            move ()
            morell
            move ()
if -- name __ == ' -- main __ :
            main ()
",334,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"        from Karel. Stanford Kad import *
del main ():
        turn- left 1)
        tower_N()
        tower-SC)
        move-4x ( )
        turn-left ( )
        tower _ N()
        tower -SC )
de tower - SC):
    turn - 3x()
    Tower ()
    Turn- left ( )
del tower- NC).
    Tower ()
    turn- 3x()
    move- 4x ()
del tower ():
        for i in range (5) :
            il front-is- clear ( ) :
                Put-boper ()
                move ()
            else:
                put- beeper ()
def. turn- 3x (1.
        Turn_left ()
        turn - left ()
        burn- left ()
def . meve_4x11;
        move 11
        move ()
        morell
        move ()
if -- name __ == ' -- main __ :
        main ()
",216,"from karel.stanfordkarel import *

def main():
        turn_left()
        tower_N()
        tower_SC()
        move_4x()
        turn_left()
        tower_N()
        tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
        for i in range(5):
            if front_is_clear():
                put_beeper()
                move()
            else:
                put_beeper()

def turn_3x():
        turn_left()
        turn_left()
        turn_left()

def move_4x():
        move()
        move()
        move()
        move()
if __name__ == '__main__':
        main()
",91,"    from Karel. Stanford Kad import *
del main ():
    turn- left 1)
    tower_N()
    tower-SC)
    move-4x ( )
    turn-left ( )
    tower _ N()
    tower -SC )
de tower - SC):
    turn - 3x()
    Tower ()
    Turn- left ( )
del tower- NC).
    Tower ()
    turn- 3x()
    move- 4x ()
del tower ():
    for i in range (5) :
        il front-is- clear ( ) :
            Put-boper ()
            move ()
        else:
            put- beeper ()
def. turn- 3x (1.
    Turn_left ()
    turn - left ()
    burn- left ()
def . meve_4x11;
    move 11
    move ()
    morell
    move ()
if -- name __ == ' -- main __ :
    main ()
",128,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"    from Karel. Stanford Kad import *
del main ():
    turn- left 1)
    tower_N()
    tower-SC)
    move-4x ( )
    turn-left ( )
    tower _ N()
    tower -SC )
de tower - SC):
    turn - 3x()
    Tower ()
    Turn- left ( )
del tower- NC).
    Tower ()
    turn- 3x()
    move- 4x ()
del tower ():
    for i in range (5) :
        il front-is- clear ( ) :
            Put-boper ()
            move ()
        else:
            put- beeper ()
def. turn- 3x (1.
    Turn_left ()
    turn - left ()
    burn- left ()
def . meve_4x11;
    move 11
    move ()
    morell
    move ()
if -- name __ == ' -- main __ :
    main ()
",128,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"    from Karel. Stanford Kad import *
del main ():
    turn- left 1)
    tower_N()
    tower-SC)
    move-4x ( )
    turn-left ( )
    tower _ N()
    tower -SC )
de tower - SC):
    turn - 3x()
    Tower ()
    Turn- left ( )
del tower- NC).
    Tower ()
    turn- 3x()
    move- 4x ()
del tower ():
    for i in range (5) :
        il front-is- clear ( ) :
            Put-boper ()
            move ()
        else:
            put- beeper ()
def. turn- 3x (1.
    Turn_left ()
    turn - left ()
    burn- left ()
def . meve_4x11;
    move 11
    move ()
    morell
    move ()
if -- name __ == ' -- main __ :
    main ()
",128,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"    from Karel. Stanford Kad import *
del main ():
    turn- left 1)
    tower_N()
    tower-SC)
    move-4x ( )
    turn-left ( )
    tower _ N()
    tower -SC )
de tower - SC):
    turn - 3x()
    Tower ()
    Turn- left ( )
del tower- NC).
    Tower ()
    turn- 3x()
    move- 4x ()
del tower ():
    for i in range (5) :
        il front-is- clear ( ) :
            Put-boper ()
            move ()
        else:
            put- beeper ()
def. turn- 3x (1.
    Turn_left ()
    turn - left ()
    burn- left ()
def . meve_4x11;
    move 11
    move ()
    morell
    move ()
if -- name __ == ' -- main __ :
    main ()
",128,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"    from Karel. Stanford Kad import *
del main ():
    turn- left 1)
    tower_N()
    tower-SC)
    move-4x ( )
    turn-left ( )
    tower _ N()
    tower -SC )
de tower - SC):
    turn - 3x()
    Tower ()
    Turn- left ( )
del tower- NC).
    Tower ()
    turn- 3x()
    move- 4x ()
del tower ():
    for i in range (5) :
        il front-is- clear ( ) :
            Put-boper ()
            move ()
        else:
            put- beeper ()
def. turn- 3x (1.
    Turn_left ()
    turn - left ()
    burn- left ()
def . meve_4x11;
    move 11
    move ()
    morell
    move ()
if -- name __ == ' -- main __ :
    main ()
",128,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_N():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",6,"    from Karel. Stanford Kad import *
del main ():
    turn- left 1)
    tower_N()
    tower-SC)
    move-4x ( )
    turn-left ( )
    tower _ N()
    tower -SC )
de tower - SC):
    turn - 3x()
    Tower ()
    Turn- left ( )
del tower- NC).
    Tower ()
    turn- 3x()
    move- 4x ()
del tower ():
    for i in range (5) :
    il front-is- clear ( ) :
        Put-boper ()
        move ()
    else:
        put- beeper ()
def. turn- 3x (1.
    Turn_left ()
    turn - left ()
    burn- left ()
def . meve_4x11;
    move 11
    move ()
    morell
    move ()
if -- name __ == ' -- main __ :
    main ()
",148,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
    else:
        put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",15,"    from Karel. Stanford Kad import *
del main ():
    turn- left 1)
    tower_N()
    tower-SC)
    move-4x ( )
    turn-left ( )
    tower _ N()
    tower -SC )
de tower - SC):
    turn - 3x()
    Tower ()
    Turn- left ( )
del tower- NC).
    Tower ()
    turn- 3x()
    move- 4x ()
del tower ():
    for i in range (5) :
    il front-is- clear ( ) :
        Put-boper ()
        move ()
    else:
        put- beeper ()
def. turn- 3x (1.
    Turn_left ()
    turn - left ()
    burn- left ()
def . meve_4x11;
    move 11
    move ()
    morell
    move ()
if -- name __ == ' -- main __ :
    main ()
",148,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"    from Karel. Stanford Kad import *
del main ():
    turn- left 1)
    tower_N()
    tower-SC)
    move-4x ( )
    turn-left ( )
    tower _ N()
    tower -SC )
de tower - SC):
    turn - 3x()
    Tower ()
    Turn- left ( )
del tower- NC).
    Tower ()
    turn- 3x()
    move- 4x ()
del tower ():
    for i in range (5) :
    il front-is- clear ( ) :
        Put-boper ()
        move ()
    else:
        put- beeper ()
def. turn- 3x (1.
    Turn_left ()
    turn - left ()
    burn- left ()
def . meve_4x11;
    move 11
    move ()
    morell
    move ()
if -- name __ == ' -- main __ :
    main ()
",148,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"    from Karel. Stanford Kad import *
del main ():
    turn- left 1)
    tower_N()
    tower-SC)
    move-4x ( )
    turn-left ( )
    tower _ N()
    tower -SC )
de tower - SC):
    turn - 3x()
    Tower ()
    Turn- left ( )
del tower- NC).
    Tower ()
    turn- 3x()
    move- 4x ()
del tower ():
    for i in range (5) :
    il front-is- clear ( ) :
        Put-boper ()
        move ()
    else:
        put- beeper ()
def. turn- 3x (1.
    Turn_left ()
    turn - left ()
    burn- left ()
def . meve_4x11;
    move 11
    move ()
    morell
    move ()
if -- name __ == ' -- main __ :
    main ()
",148,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"    from Karel. Stanford Kad import *
del main ():
    turn- left 1)
    tower_N()
    tower-SC)
    move-4x ( )
    turn-left ( )
    tower _ N()
    tower -SC )
de tower - SC):
    turn - 3x()
    Tower ()
    Turn- left ( )
del tower- NC).
    Tower ()
    turn- 3x()
    move- 4x ()
del tower ():
    for i in range (5) :
    il front-is- clear ( ) :
        Put-boper ()
        move ()
    else:
        put- beeper ()
def. turn- 3x (1.
    Turn_left ()
    turn - left ()
    burn- left ()
def . meve_4x11;
    move 11
    move ()
    morell
    move ()
if -- name __ == ' -- main __ :
    main ()
",148,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"    from Karel. Stanford Kad import *
del main ():
    turn- left 1)
    tower_N()
    tower-SC)
    move-4x ( )
    turn-left ( )
    tower _ N()
    tower -SC )
de tower - SC):
    turn - 3x()
    Tower ()
    Turn- left ( )
del tower- NC).
    Tower ()
    turn- 3x()
    move- 4x ()
del tower ():
    for i in range (5) :
    il front-is- clear ( ) :
        Put-boper ()
        move ()
    else:
        put- beeper ()
def. turn- 3x (1.
    Turn_left ()
    turn - left ()
    burn- left ()
def . meve_4x11;
    move 11
    move ()
    morell
    move ()
if -- name __ == ' -- main __ :
    main ()
",148,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"    from Karel. Stanford Kad import *
del main ():
    turn- left 1)
    tower_N()
    tower-SC)
    move-4x ( )
    turn-left ( )
    tower _ N()
    tower -SC )
de tower - SC):
    turn - 3x()
    Tower ()
    Turn- left ( )
del tower- NC).
    Tower ()
    turn- 3x()
    move- 4x ()
del tower ():
    for i in range (5) :
    il front-is- clear ( ) :
        Put-boper ()
        move ()
    else:
        put- beeper ()
def. turn- 3x (1.
    Turn_left ()
    turn - left ()
    burn- left ()
def . meve_4x11;
    move 11
    move ()
    morell
    move ()
if -- name __ == ' -- main __ :
    main ()
",148,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"    from Karel. Stanford Kad import *
del main ():
    turn- left 1)
    tower_N()
    tower-SC)
    move-4x ( )
    turn-left ( )
    tower _ N()
    tower -SC )
de tower - SC):
    turn - 3x()
    Tower ()
    Turn- left ( )
del tower- NC).
    Tower ()
    turn- 3x()
    move- 4x ()
del tower ():
    for i in range (5) :
    il front-is- clear ( ) :
        Put-boper ()
        move ()
    else:
        put- beeper ()
def. turn- 3x (1.
    Turn_left ()
    turn - left ()
    burn- left ()
def . meve_4x11;
    move 11
    move ()
    morell
    move ()
if -- name __ == ' -- main __ :
    main ()
",148,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"    from Karel. Stanford Kad import *
del main ():
    turn- left 1)
    tower_N()
    tower-SC)
    move-4x ( )
    turn-left ( )
    tower _ N()
    tower -SC )
de tower - SC):
    turn - 3x()
Tower ()
    Turn- left ( )
del tower- NC).
    Tower ()
    turn- 3x()
    move- 4x ()
del tower ():
    for i in range (5) :
    il front-is- clear ( ) :
        Put-boper ()
        move ()
    else:
        put- beeper ()
def. turn- 3x (1.
    Turn_left ()
    turn - left ()
    burn- left ()
def . meve_4x11;
    move 11
    move ()
    morell
    move ()
if -- name __ == ' -- main __ :
    main ()
",152,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_N():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",6,"    from Karel. Stanford Kad import *
del main ():
    turn- left 1)
    tower_N()
    tower-SC)
    move-4x ( )
    turn-left ( )
    tower _ N()
    tower -SC )
de tower - SC):
    turn - 3x()
    Tower ()
    Turn- left ( )
del tower- NC).
    Tower ()
    turn- 3x()
    move- 4x ()
del tower ():
    for i in range (5) :
    il front-is- clear ( ) :
        Put-boper ()
        move ()
    else:
        put- beeper ()
def. turn- 3x (1.
    Turn_left ()
    turn - left ()
    burn- left ()
def . meve_4x11;
    move 11
    move ()
    morell
    move ()
if -- name __ == ' -- main __ :
    main ()
",148,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"    from Karel. Stanford Kad import *
del main ():
    turn- left 1)
    tower_N()
    tower-SC)
    move-4x ( )
    turn-left ( )
    tower _ N()
    tower -SC )
de tower - SC):
turn - 3x()
Tower ()
    Turn- left ( )
del tower- NC).
    Tower ()
    turn- 3x()
    move- 4x ()
del tower ():
    for i in range (5) :
    il front-is- clear ( ) :
        Put-boper ()
        move ()
    else:
        put- beeper ()
def. turn- 3x (1.
    Turn_left ()
    turn - left ()
    burn- left ()
def . meve_4x11;
    move 11
    move ()
    morell
    move ()
if -- name __ == ' -- main __ :
    main ()
",156,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"    from Karel. Stanford Kad import *
del main ():
    turn- left 1)
    tower_N()
    tower-SC)
    move-4x ( )
    turn-left ( )
    tower _ N()
    tower -SC )
de tower - SC):
turn - 3x()
Tower ()
    Turn- left ( )
del tower- NC).
    Tower ()
    turn- 3x()
    move- 4x ()
del tower ():
    for i in range (5) :
    il front-is- clear ( ) :
        Put-boper ()
        move ()
    else:
        put- beeper ()
def. turn- 3x (1.
    Turn_left ()
    turn - left ()
    burn- left ()
def . meve_4x11;
    move 11
    move ()
    morell
    move ()
if -- name __ == ' -- main __ :
    main ()
",156,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"    from Karel. Stanford Kad import *
del main ():
    turn- left 1)
    tower_N()
    tower-SC)
    move-4x ( )
    turn-left ( )
    tower _ N()
    tower -SC )
de tower - SC):
turn - 3x()
Tower ()
    Turn- left ( )
del tower- NC).
    Tower ()
    turn- 3x()
    move- 4x ()
del tower ():
    for i in range (5) :
    il front-is- clear ( ) :
        Put-boper ()
        move ()
    else:
        put- beeper ()
def. turn- 3x (1.
    Turn_left ()
    turn - left ()
    burn- left ()
def . meve_4x11;
    move 11
    move ()
    morell
    move ()
if -- name __ == ' -- main __ :
    main ()
",156,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"    from Karel. Stanford Kad import *
del main ():
    turn- left 1)
    tower_N()
    tower-SC)
    move-4x ( )
    turn-left ( )
    tower _ N()
    tower -SC )
de tower - SC):
turn - 3x()
Tower ()
    Turn- left ( )
del tower- NC).
    Tower ()
    turn- 3x()
    move- 4x ()
del tower ():
    for i in range (5) :
    il front-is- clear ( ) :
        Put-boper ()
        move ()
    else:
        put- beeper ()
def. turn- 3x (1.
    Turn_left ()
    turn - left ()
    burn- left ()
def . meve_4x11;
    move 11
    move ()
    morell
    move ()
if -- name __ == ' -- main __ :
    main ()
",156,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"    from Karel. Stanford Kad import *
del main ():
    turn- left 1)
    tower_N()
    tower-SC)
    move-4x ( )
    turn-left ( )
    tower _ N()
    tower -SC )
de tower - SC):
turn - 3x()
Tower ()
    Turn- left ( )
del tower- NC).
    Tower ()
    turn- 3x()
    move- 4x ()
del tower ():
    for i in range (5) :
    il front-is- clear ( ) :
        Put-boper ()
        move ()
    else:
        put- beeper ()
def. turn- 3x (1.
    Turn_left ()
    turn - left ()
    burn- left ()
def . meve_4x11;
    move 11
    move ()
    morell
    move ()
if -- name __ == ' -- main __ :
    main ()
",156,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_N():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",6,"    from Karel. Stanford Kad import *
del main ():
    turn- left 1)
    tower_N()
    tower-SC)
    move-4x ( )
    turn-left ( )
    tower _ N()
    tower -SC )
de tower - SC):
turn - 3x()
Tower ()
    Turn- left ( )
del tower- NC).
    Tower ()
    turn- 3x()
    move- 4x ()
del tower ():
    for i in range (5) :
    il front-is- clear ( ) :
        Put-boper ()
        move ()
    else:
        put- beeper ()
def. turn- 3x (1.
    Turn_left ()
    turn - left ()
    burn- left ()
def . meve_4x11;
    move 11
    move ()
    morell
    move ()
if -- name __ == ' -- main __ :
    main ()
",156,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"    from Karel. Stanford Kad import *
del main ():
    turn- left 1)
    tower_N()
    tower-SC)
    move-4x ( )
    turn-left ( )
    tower _ N()
    tower -SC )
de tower - SC):
turn - 3x()
Tower ()
    Turn- left ( )
del tower- NC).
    Tower ()
    turn- 3x()
    move- 4x ()
del tower ():
    for i in range (5) :
    il front-is- clear ( ) :
        Put-boper ()
        move ()
    else:
        put- beeper ()
def. turn- 3x (1.
    Turn_left ()
    turn - left ()
    burn- left ()
def . meve_4x11;
    move 11
    move ()
    morell
    move ()
if -- name __ == ' -- main __ :
    main ()
",156,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"    from Karel. Stanford Kad import *
del main ():
    turn- left 1)
    tower_N()
    tower-SC)
    move-4x ( )
    turn-left ( )
    tower _ N()
    tower -SC )
de tower - SC):
    turn - 3x()
Tower ()
    Turn- left ( )
del tower- NC).
    Tower ()
    turn- 3x()
    move- 4x ()
del tower ():
    for i in range (5) :
    il front-is- clear ( ) :
        Put-boper ()
        move ()
    else:
        put- beeper ()
def. turn- 3x (1.
    Turn_left ()
    turn - left ()
    burn- left ()
def . meve_4x11;
    move 11
    move ()
    morell
    move ()
if -- name __ == ' -- main __ :
    main ()
",152,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"    from Karel. Stanford Kad import *
del main ():
    turn- left 1)
    tower_N()
    tower-SC)
    move-4x ( )
    turn-left ( )
    tower _ N()
    tower -SC )
de tower - SC):
turn - 3x()
Tower ()
    Turn- left ( )
del tower- NC).
    Tower ()
    turn- 3x()
    move- 4x ()
del tower ():
    for i in range (5) :
        il front-is- clear ( ) :
        Put-boper ()
        move ()
        else:
        put- beeper ()
def. turn- 3x (1.
    Turn_left ()
    turn - left ()
    burn- left ()
def . meve_4x11;
    move 11
    move ()
    morell
    move ()
if -- name __ == ' -- main __ :
    main ()
",148,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"    from Karel. Stanford Kad import *
del main ():
    turn- left 1)
    tower_N()
    tower-SC)
    move-4x ( )
    turn-left ( )
    tower _ N()
    tower -SC )
de tower - SC):
turn - 3x()
Tower ()
    Turn- left ( )
del tower- NC).
    Tower ()
    turn- 3x()
    move- 4x ()
del tower ():
    for i in range (5) :
        il front-is- clear ( ) :
        Put-boper ()
        move ()
        else:
        put- beeper ()
def. turn- 3x (1.
    Turn_left ()
    turn - left ()
    burn- left ()
def . meve_4x11;
    move 11
    move ()
    morell
    move ()
if -- name __ == ' -- main __ :
    main ()
",148,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
    il front-is- clear ( ) :
    Put-boper ()
    move ()
    else:
    put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",241,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
    if front_is_clear():
    put_beeper()
    move()
    else:
    put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",127,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
    il front-is- clear ( ) :
    Put-boper ()
    move ()
    else:
    put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",241,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_N():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
    if front_is_clear():
        put_beeper()
        move()
    else:
        put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",114,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
    il front-is- clear ( ) :
    Put-boper ()
    move ()
    else:
    put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",241,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
    if front_is_clear():
    put_beeper()
    move()
    else:
    put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",127,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
    il front-is- clear ( ) :
    Put-boper ()
    move ()
    else:
    put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",241,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_N():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
    if front_is_clear():
        put_beeper()
        move()
    else:
        put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",114,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
    il front-is- clear ( ) :
    Put-boper ()
    move ()
    else:
    put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",241,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_N():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
    if front_is_clear():
        put_beeper()
        move()
    else:
        put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",114,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
    il front-is- clear ( ) :
    Put-boper ()
    move ()
    else:
    put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",241,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
    if front_is_clear():
    put_beeper()
    move()
    else:
    put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",127,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
    il front-is- clear ( ) :
    Put-boper ()
    move ()
    else:
    put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",241,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
    if front_is_clear():
        put_beeper()
        move()
    else:
        put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",115,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
    il front-is- clear ( ) :
    Put-boper ()
    move ()
    else:
    put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",241,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
    if front_is_clear():
        put_beeper()
        move()
    else:
        put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",115,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
    il front-is- clear ( ) :
    Put-boper ()
    move ()
    else:
    put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",241,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
    if front_is_clear():
        put_beeper()
        move()
    else:
        put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",115,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
    il front-is- clear ( ) :
    Put-boper ()
    move ()
    else:
    put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",241,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
    if front_is_clear():
        put_beeper()
        move()
    else:
        put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",115,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_N():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",146,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_N():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",146,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_N():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",146,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_NC():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",7,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_N():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",146,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()

def tower_SC():
    turn_3x()
    tower()
    turn_left()

def tower_N():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()
if __name__ == '__main__':
    main()
",6,"from Karel. Stanford Kad import *
del main ():
turn- left 1)
tower_N()
tower-SC)
move-4x ( )
turn-left ( )
tower _ N()
tower -SC )
de tower - SC):
turn - 3x()
Tower ()
Turn- left ( )
del tower- NC).
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ) :
Put-boper ()
move ()
else:
put- beeper ()
def. turn- 3x (1.
Turn_left ()
turn - left ()
burn- left ()
def . meve_4x11;
move 11
move ()
morell
move ()
if -- name __ == ' -- main __ :
main ()
",261,"from karel.stanfordkarel import *

def main():
turn_left()
tower_N()
tower_SC()
move_4x()
turn_left()
tower_N()
tower_SC()

def tower_SC():
turn_3x()
tower()
turn_left()

def tower_NC():
tower()
turn_3x()
move_4x()

def tower():
for i in range(5):
if front_is_clear():
put_beeper()
move()
else:
put_beeper()

def turn_3x():
turn_left()
turn_left()
turn_left()

def move_4x():
move()
move()
move()
move()
if __name__ == '__main__':
main()
",147
"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])

if __name__ == ""__main__"":
    main()
","det main ( ):
String = str (input (""Enter string: '))
for i in range ((len (string) -1) ,- 1 ,- 1):
print (string [i])
if __ name _== '_main-':
main ()",49,"    det main ( ):
                String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                    print (string [1])
if __ name _== '-main-':
        main()
",70,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"    det main ( ):
                String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                    print (string [1])
if __ name _== '-main-':
        main()
",70,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"    det main ( ):
                String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                    print (string [1])
if __ name _== '-main-':
        main()
",70,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"    det main ( ):
                String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                    print (string [1])
if __ name _== '-main-':
        main()
",70,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"    det main ( ):
                String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                    print (string [1])
if __ name _== '-main-':
        main()
",70,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"    det main ( ):
                String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                    print (string [1])
if __ name _== '-main-':
        main()
",70,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"    det main ( ):
                String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                    print (string [1])
if __ name _== '-main-':
        main()
",70,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"    det main ( ):
                String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                    print (string [1])
if __ name _== '-main-':
        main()
",70,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"    det main ( ):
                String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                    print (string [1])
if __ name _== '-main-':
        main()
",70,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"    det main ( ):
                String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                    print (string [1])
if __ name _== '-main-':
        main()
",70,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"    det main ( ):
            String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                print (string [1])
if __ name _== '-main-':
        main()
",62,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"    det main ( ):
            String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                print (string [1])
if __ name _== '-main-':
        main()
",62,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"    det main ( ):
            String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                print (string [1])
if __ name _== '-main-':
        main()
",62,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"    det main ( ):
            String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                print (string [1])
if __ name _== '-main-':
        main()
",62,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"    det main ( ):
            String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                print (string [1])
if __ name _== '-main-':
        main()
",62,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"    det main ( ):
            String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                print (string [1])
if __ name _== '-main-':
        main()
",62,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"    det main ( ):
            String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                print (string [1])
if __ name _== '-main-':
        main()
",62,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"    det main ( ):
            String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                print (string [1])
if __ name _== '-main-':
        main()
",62,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"    det main ( ):
            String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                print (string [1])
if __ name _== '-main-':
        main()
",62,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"    det main ( ):
            String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                print (string [1])
if __ name _== '-main-':
        main()
",62,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string[i])

if __name__ == ""__main__"":
    main()
",14,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15
"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])

if __name__ == ""__main__"":
    main()
","det main ( ):
String = str (input (""Enter string: '))
for i in range ((len (string) -1) ,- 1 ,- 1):
print (string [i])
if __ name _== '_main-':
main ()",49,"    det main ( ):
                String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                    print (string [1])
if __ name _== '-main-':
        main()
",70,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"    det main ( ):
                String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                    print (string [1])
if __ name _== '-main-':
        main()
",70,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"    det main ( ):
                String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                    print (string [1])
if __ name _== '-main-':
        main()
",70,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"    det main ( ):
                String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                    print (string [1])
if __ name _== '-main-':
        main()
",70,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"    det main ( ):
                String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                    print (string [1])
if __ name _== '-main-':
        main()
",70,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"    det main ( ):
                String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                    print (string [1])
if __ name _== '-main-':
        main()
",70,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"    det main ( ):
                String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                    print (string [1])
if __ name _== '-main-':
        main()
",70,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"    det main ( ):
                String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                    print (string [1])
if __ name _== '-main-':
        main()
",70,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"    det main ( ):
                String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                    print (string [1])
if __ name _== '-main-':
        main()
",70,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"    det main ( ):
                String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                    print (string [1])
if __ name _== '-main-':
        main()
",70,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"    det main ( ):
            String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                print (string [1])
if __ name _== '-main-':
        main()
",62,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"    det main ( ):
            String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                print (string [1])
if __ name _== '-main-':
        main()
",62,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"    det main ( ):
            String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                print (string [1])
if __ name _== '-main-':
        main()
",62,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"    det main ( ):
            String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                print (string [1])
if __ name _== '-main-':
        main()
",62,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"    det main ( ):
            String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                print (string [1])
if __ name _== '-main-':
        main()
",62,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"    det main ( ):
            String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                print (string [1])
if __ name _== '-main-':
        main()
",62,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"    det main ( ):
            String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                print (string [1])
if __ name _== '-main-':
        main()
",62,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"    det main ( ):
            String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                print (string [1])
if __ name _== '-main-':
        main()
",62,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"    det main ( ):
            String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                print (string [1])
if __ name _== '-main-':
        main()
",62,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"    det main ( ):
            String = str (input (""Enter string: ')
            for i in range ((len(string)-1) ,- 1 ,- 1):
                print (string [1])
if __ name _== '-main-':
        main()
",62,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
        string = str (input (""Enter string: ""))
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [i])
if __name__ == '__main__':
    main()
",30,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
        string = str (input (""Enter string: ""))
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [i])
if __name__ == '__main__':
    main()
",30,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
        string = str (input (""Enter string: ""))
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [i])
if __name__ == '__main__':
    main()
",30,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
        string = str (input (""Enter string: ""))
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [i])
if __name__ == '__main__':
    main()
",30,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
        string = str (input (""Enter string: ""))
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [i])
if __name__ == '__main__':
    main()
",30,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
        string = str (input (""Enter string: ""))
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [i])
if __name__ == '__main__':
    main()
",30,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])

if __name__ == ""__main__"":
    main()
",15,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18,"det main ( ):
        String = str (input (""Enter string: ')
        for i in range ((len(string)-1) ,- 1 ,- 1):
            print (string [1])
if __ name _== '-main-':
    main()
",42,"def main ( ):
    string = str (input (""Enter string: ""))
    for i in range ((len(string)-1) ,- 1 ,- 1):
        print (string [i])
if __name__ == '__main__':
    main()
",18
"def main():
    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")

def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main()
","def main():
num = int (input( ""Enter a NM bu :
print (f""Enums is S'prime if is_ prime (nom)
else not primé 3"">
def is_ prime(1):
if n <= 12
return false
elif > <= 3:
Cetun True
elf n/ 2 = = x OR 1% 3=6 ;
return False
for i in Range (5, int(1 +0.5) + 1,6
if 1% i = = x or 1% (1+2) =0 :
return False
return True
if
= =
- - main
main ()",162,"        def main ():
                num = int (input ("" Enter a Nmbu :
            print (f""Enums is &'prime if is_ prime (nom)
                                                                    else not primé 3"")
def is- prone (1) :
                                    if n <= 12
                                                        return false
                                        elif > <= 3:
                                                return True
                            elf n/ 2 == x OR 1% 3= 6 ;
                                                    return False
                    for i in Range (5, int (n+""0.5) + 1,6
                                            if 1% i =x or 1%(i+2) =6:
                                                            return False
                                return True
    - nor
                                                                = - - main
                        main ()
",603,"def main ():
        num = int (input (""Enter a Num:""))
        print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n):
        if n <= 1:
                return False
        elif n <= 3:
                return True
        elif n % 2 == 0 or n % 3 == 0:
                return False
        for i in range (5, int (n**0.5) + 1, 6):
                if n % i == 0 or n % (i+2) == 0:
                        return False
        return True

if __name__ == ""__main__"":
        main ()
",99,"        def main ():
            num = int (input ("" Enter a Nmbu :
        print (f""Enums is &'prime if is_ prime (nom)
                                                            else not primé 3"")
def is- prone (1) :
                                if n <= 12
                                                    return false
                                    elif > <= 3:
                                            return True
                        elf n/ 2 == x OR 1% 3= 6 ;
                                                return False
                for i in Range (5, int (n+""0.5) + 1,6
                                        if 1% i =x or 1%(i+2) =6:
                                                        return False
                            return True
    - nor
                                                            = - - main
                    main ()
",540,"def main():
    num = int(input(""Enter a Num: ""))
    print(f""Num is 'prime' if is_prime(num) else 'not prime'"")

def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main()
",11,"        def main ():
        num = int (input ("" Enter a Nmbu :
        print (f""Enums is &'prime if is_ prime (nom)
                                                        else not primé 3"")
def is- prone (1) :
                            if n <= 12
                                                return false
                                elif > <= 3:
                                        return True
                    elf n/ 2 == x OR 1% 3= 6 ;
                                            return False
            for i in Range (5, int (n+""0.5) + 1,6
                                    if 1% i =x or 1%(i+2) =6:
                                                    return False
                        return True
    - nor
                                                        = - - main
                main ()
",484,"def main ():
    num = int (input (""Enter a Number: ""))
    print (f""Number is prime"" if is_prime(num) else ""Number is not prime"")

def is_prime (n) :
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range (5, int (n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",33,"        def main ():
        num = int (input ("" Enter a Nmbu :
        print (f""Enums is &'prime if is_ prime (nom)
                                                        else not primé 3"")
def is- prone (1) :
                            if n <= 12
                                                return false
                                elif > <= 3:
                                        return True
                    elf n/ 2 == x OR 1% 3= 6 ;
                                            return False
            for i in Range (5, int (n+""0.5) + 1,6
                                    if 1% i =x or 1%(i+2) =6:
                                                    return False
                        return True
    - nor
                                                        = - - main
                main ()
",484,"def main():
    num = int(input(""Enter a Number: ""))
    print(f""Number is prime"" if is_prime(num) else ""Number is not prime"")

def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main()
",24,"        def main ():
        num = int (input ("" Enter a Nmbu :
        print (f""Enums is &'prime if is_ prime (nom)
                                                    else not primé 3"")
def is- prone (1) :
                            if n <= 12
                                            return false
                            elif > <= 3:
                                    return True
                    elf n/ 2 == x OR 1% 3= 6 ;
                                        return False
            for i in Range (5, int (n+""0.5) + 1,6
                                if 1% i =x or 1%(i+2) =6:
                                                return False
                        return True
    - nor
                                                    = - - main
                main ()
",452,"def main ():
    num = int (input (""Enter a Number: ""))
    print (f""Number is prime"" if is_prime (num) else ""Number is not prime"")

def is_prime (n) :
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range (5, int (n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",34,"        def main ():
        num = int (input ("" Enter a Nmbu :
        print (f""Enums is &'prime if is_ prime (nom)
                                                else not primé 3"")
def is- prone (1) :
                        if n <= 12
                                        return false
                        elif > <= 3:
                                return True
                    elf n/ 2 == x OR 1% 3= 6 ;
                                    return False
            for i in Range (5, int (n+""0.5) + 1,6
                            if 1% i =x or 1%(i+2) =6:
                                            return False
                    return True
    - nor
                                                = - - main
                main ()
",412,"def main ():
    num = int (input (""Enter a Num: ""))
    print (f""Num is prime"" if is_prime (num) else ""not prime"")

def is_prime (n) :
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range (5, int (n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",25,"        def main ():
        num = int (input ("" Enter a Nmbu :
        print (f""Enums is &'prime if is_ prime (nom)
                                            else not primé 3"")
def is- prone (1) :
                        if n <= 12
                                    return false
                        elif > <= 3:
                                return True
                    elf n/ 2 == x OR 1% 3= 6 ;
                                    return False
            for i in Range (5, int (n+""0.5) + 1,6
                            if 1% i =x or 1%(i+2) =6:
                                        return False
                    return True
    - nor
                                            = - - main
                main ()
",396,"def main ():
    num = int (input (""Enter a Num: ""))
    print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range (5, int (n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",22,"        def main ():
        num = int (input ("" Enter a Nmbu :
        print (f""Enums is &'prime if is_ prime (nom)
                                            else not primé 3"")
def is- prone (1) :
                        if n <= 12
                                    return false
                        elif > <= 3:
                                return True
                    elf n/ 2 == x OR 1% 3= 6 ;
                                    return False
            for i in Range (5, int (n+""0.5) + 1,6
                            if 1% i =x or 1%(i+2) =6:
                                        return False
                    return True
    - nor
                                            = - - main
                main ()
",396,"def main ():
    num = int (input (""Enter a Num: ""))
    print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range (5, int (n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",22,"        def main ():
        num = int (input ("" Enter a Nmbu :
        print (f""Enums is &'prime if is_ prime (nom)
                                            else not primé 3"")
def is- prone (1) :
                        if n <= 12
                                    return false
                        elif > <= 3:
                                return True
                    elf n/ 2 == x OR 1% 3= 6 ;
                                    return False
            for i in Range (5, int (n+""0.5) + 1,6
                            if 1% i =x or 1%(i+2) =6:
                                        return False
                    return True
    - nor
                                            = - - main
                main ()
",396,"def main():
    num = int(input(""Enter a Num: ""))
    print(f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main()
",15,"        def main ():
        num = int (input ("" Enter a Nmbu :
        print (f""Enums is &'prime if is_ prime (nom)
                                            else not primé 3"")
def is- prone (1) :
                        if n <= 12
                                    return false
                        elif > <= 3:
                                return True
                    elf n/ 2 == x OR 1% 3= 6 ;
                                    return False
            for i in Range (5, int (n+""0.5) + 1,6
                            if 1% i =x or 1%(i+2) =6:
                                        return False
                    return True
    - nor
                                            = - - main
                main ()
",396,"def main ():
    num = int (input (""Enter a Number: ""))
    print (f""Number is prime"" if is_prime (num) else ""Number is not prime"")

def is_prime (n) :
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range (5, int (n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",34,"        def main ():
        num = int (input ("" Enter a Nmbu :
        print (f""Enums is &'prime if is_ prime (nom)
                                            else not primé 3"")
def is- prone (1) :
                        if n <= 12
                                    return false
                        elif > <= 3:
                                return True
                    elf n/ 2 == x OR 1% 3= 6 ;
                                    return False
            for i in Range (5, int (n+""0.5) + 1,6
                            if 1% i =x or 1%(i+2) =6:
                                        return False
                    return True
    - nor
                                            = - - main
                main ()
",396,"def main ():
    num = int (input (""Enter a Number: ""))
    print (f""Number is prime"" if is_prime (num) else ""Number is not prime"")

def is_prime (n) :
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range (5, int (n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",34,"        def main ():
        num = int (input ("" Enter a Nmbu :
        print (f""Enums is &'prime if is_ prime (nom)
                                        else not primé 3"")
def is- prone (1) :
                    if n <= 12
                                return false
                    elif > <= 3:
                            return True
                elf n/ 2 == x OR 1% 3= 6 ;
                                return False
            for i in Range (5, int (n+""0.5) + 1,6
                        if 1% i =x or 1%(i+2) =6:
                                    return False
                    return True
    - nor
                                        = - - main
                main ()
",356,"def main():
    num = int(input(""Enter a Num: ""))
    print(f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main()
",15,"        def main ():
        num = int (input ("" Enter a Nmbu :
        print (f""Enums is &'prime if is_ prime (nom)
                                        else not primé 3"")
def is- prone (1) :
                    if n <= 12
                                return false
                    elif > <= 3:
                            return True
                elf n/ 2 == x OR 1% 3= 6 ;
                                return False
            for i in Range (5, int (n+""0.5) + 1,6
                        if 1% i =x or 1%(i+2) =6:
                                    return False
                return True
    - nor
                                        = - - main
                main ()
",352,"def main ():
    num = int (input (""Enter a Number: ""))
    print (f""Number is prime"" if is_prime(num) else ""Number is not prime"")

def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",29,"        def main ():
        num = int (input ("" Enter a Nmbu :
        print (f""Enums is &'prime if is_ prime (nom)
                                        else not primé 3"")
def is- prone (1) :
                    if n <= 12
                                return false
                    elif > <= 3:
                            return True
                elf n/ 2 == x OR 1% 3= 6 ;
                                return False
            for i in Range (5, int (n+""0.5) + 1,6
                        if 1% i =x or 1%(i+2) =6:
                                    return False
                return True
    - nor
                                        = - - main
                main ()
",352,"def main ():
    num = int (input (""Enter a Number: ""))
    print (f""Number is prime"" if is_prime (num) else ""Number is not prime"")

def is_prime (n) :
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range (5, int (n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",34,"        def main ():
        num = int (input ("" Enter a Nmbu :
        print (f""Enums is &'prime if is_ prime (nom)
                                    else not primé 3"")
def is- prone (1) :
                if n <= 12
                            return false
                elif > <= 3:
                        return True
                elf n/ 2 == x OR 1% 3= 6 ;
                            return False
            for i in Range (5, int (n+""0.5) + 1,6
                    if 1% i =x or 1%(i+2) =6:
                                return False
                return True
    - nor
                                    = - - main
                main ()
",317,"def main ():
    num = int (input (""Enter a Number: ""))
    print (f""Number is prime"" if is_prime(num) else ""Number is not prime"")

def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",29,"        def main ():
        num = int (input ("" Enter a Nmbu :
        print (f""Enums is &'prime if is_ prime (nom)
                                    else not primé 3"")
def is- prone (1) :
                if n <= 12
                            return false
                elif > <= 3:
                        return True
                elf n/ 2 == x OR 1% 3= 6 ;
                            return False
            for i in Range (5, int (n+""0.5) + 1,6
                    if 1% i =x or 1%(i+2) =6:
                                return False
                return True
    - nor
                                    = - - main
                main ()
",317,"def main ():
    num = int (input (""Enter a Num: ""))
    print (f""Num is prime"" if is_prime (num) else ""not prime"")

def is_prime (n) :
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range (5, int (n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",25,"        def main ():
        num = int (input ("" Enter a Nmbu :
        print (f""Enums is &'prime if is_ prime (nom)
                                    else not primé 3"")
def is- prone (1) :
                if n <= 12
                            return false
                elif > <= 3:
                        return True
                elf n/ 2 == x OR 1% 3= 6 ;
                            return False
            for i in Range (5, int (n+""0.5) + 1,6
                    if 1% i =x or 1%(i+2) =6:
                                return False
                return True
    - nor
                                    = - - main
                main ()
",317,"def main():
    num = int(input(""Enter a Num: ""))
    print(f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main()
",15,"    def main ():
    num = int (input ("" Enter a Nmbu :
    print (f""Enums is &'prime if is_ prime (nom)
                                else not primé 3"")
def is- prone (1) :
            if n <= 12
                        return false
            elif > <= 3:
                    return True
            elf n/ 2 == x OR 1% 3= 6 ;
                        return False
        for i in Range (5, int (n+""0.5) + 1,6
                if 1% i =x or 1%(i+2) =6:
                            return False
            return True
    - nor
                                = - - main
            main ()
",257,"def main ():
    num = int (input (""Enter a Num:""))
    print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range (5, int (n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",23,"    def main ():
    num = int (input ("" Enter a Nmbu :
    print (f""Enums is &'prime if is_ prime (nom)
                                else not primé 3"")
def is- prone (1) :
            if n <= 12
                        return false
            elif > <= 3:
                    return True
            elf n/ 2 == x OR 1% 3= 6 ;
                        return False
        for i in Range (5, int (n+""0.5) + 1,6
                if 1% i =x or 1%(i+2) =6:
                            return False
            return True
    - nor
                                = - - main
            main ()
",257,"def main ():
    num = int (input (""Enter a Num:""))
    print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n) :
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range (5, int (n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",24,"    def main ():
    num = int (input ("" Enter a Nmbu :
    print (f""Enums is &'prime if is_ prime (nom)
                                else not primé 3"")
def is- prone (1) :
                if n <= 12
                        return false
                elif > <= 3:
                    return True
            elf n/ 2 == x OR 1% 3= 6 ;
                        return False
        for i in Range (5, int (n+""0.5) + 1,6
                if 1% i =x or 1%(i+2) =6:
                            return False
            return True
    - nor
                                = - - main
            main ()
",265,"def main ():
    num = int (input (""Enter a Num:""))
    print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",21,"    def main ():
    num = int (input ("" Enter a Nmbu :
    print (f""Enums is &'prime if is_ prime (nom)
                        else not primé 3"")
def is- prone (1) :
        if n <= 12
                return false
        elif > <= 3:
            return True
        elf n/ 2 == x OR 1% 3= 6 ;
                return False
    for i in Range (5, int (n+""0.5) + 1,6
        if 1% i =x or 1%(i+2) =6:
                    return False
        return True
- nor
                        = - - main
        main ()
",176,"def main ():
    num = int (input (""Enter a Num:""))
    print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",21,"    def main ():
    num = int (input ("" Enter a Nmbu :
    print (f""Enums is &'prime if is_ prime (nom)
                    else not primé 3"")
def is- prone (1) :
        if n <= 12
            return false
        elif > <= 3:
            return True
        elf n/ 2 == x OR 1% 3= 6 ;
            return False
    for i in Range (5, int (n+""0.5) + 1,6
        if 1% i =x or 1%(i+2) =6:
                return False
        return True
- nor
                    = - - main
        main ()
",156,"def main ():
    num = int (input (""Enter a Num:""))
    print (f""Num is prime"" if is_prime (num) else ""not prime"")

def is_prime (n) :
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range (5, int (n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",26,"    def main ():
    num = int (input ("" Enter a Nmbu :
    print (f""Enums is &'prime if is_ prime (nom)
                    else not primé 3"")
def is- prone (1) :
        if n <= 12
            return false
        elif > <= 3:
            return True
        elf n/ 2 == x OR 1% 3= 6 ;
            return False
    for i in Range (5, int (n+""0.5) + 1,6
        if 1% i =x or 1%(i+2) =6:
                return False
        return True
    - nor
                    = - - main
        main ()
",160,"def main ():
    num = int (input (""Enter a Num:""))
    print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range (5, int (n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",23,"    def main ():
    num = int (input ("" Enter a Nmbu :
    print (f""Enums is &'prime if is_ prime (nom)
                    else not primé 3"")
def is- prone (1) :
        if n <= 12
            return false
        elif > <= 3:
            return True
        elf n/ 2 == x OR 1% 3= 6 ;
            return False
    for i in Range (5, int (n+""0.5) + 1,6
        if 1% i =x or 1%(i+2) =6:
                return False
        return True
- nor
                    = - - main
        main ()
",156,"def main ():
    num = int (input (""Enter a Num:""))
    print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n) :
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range (5, int (n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",24,"    def main ():
    num = int (input ("" Enter a Nmbu :
    print (f""Enums is &'prime if is_ prime (nom)
                    else not primé 3"")
def is- prone (1) :
        if n <= 12
            return false
        elif > <= 3:
            return True
        elf n/ 2 == x OR 1% 3= 6 ;
            return False
    for i in Range (5, int (n+""0.5) + 1,6
        if 1% i =x or 1%(i+2) =6:
                return False
        return True
- nor
                    = - - main
        main ()
",156,"def main ():
    num = int (input (""Enter a Num:""))
    print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range (5, int (n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",23,"    def main ():
    num = int (input ("" Enter a Nmbu :
    print (f""Enums is &'prime if is_ prime (nom)
                    else not primé 3"")
def is- prone (1) :
        if n <= 12
            return false
        elif > <= 3:
            return True
        elf n/ 2 == x OR 1% 3= 6 ;
            return False
    for i in Range (5, int (n+""0.5) + 1,6
        if 1% i =x or 1%(i+2) =6:
                return False
        return True
- nor
                    = - - main
        main ()
",156,"def main ():
    num = int (input (""Enter a Num:""))
    print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n) :
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range (5, int (n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",24,"    def main ():
    num = int (input ("" Enter a Nmbu :
    print (f""Enums is &'prime if is_ prime (nom)
                        else not primé 3"")
def is- prone (1) :
            if n <= 12
                return false
            elif > <= 3:
                return True
        elf n/ 2 == x OR 1% 3= 6 ;
                return False
    for i in Range (5, int (n+""0.5) + 1,6
            if 1% i =x or 1%(i+2) =6:
                    return False
            return True
- nor
                        = - - main
        main ()
",195,"def main ():
    num = int (input (""Enter a Num:""))
    print (f""Num is prime"" if is_prime (num) else ""not prime"")

def is_prime (n) :
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range (5, int (n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",26,"    def main ():
    num = int (input ("" Enter a Nmbu :
    print (f""Enums is &'prime if is_ prime (nom)
                        else not primé 3"")
def is- prone (1) :
            if n <= 12
                return false
            elif > <= 3:
                return True
        elf n/ 2 == x OR 1% 3= 6 ;
                return False
    for i in Range (5, int (n+""0.5) + 1,6
            if 1% i =x or 1%(i+2) =6:
                    return False
            return True
- nor
                        = - - main
        main ()
",195,"def main ():
    num = int (input (""Enter a Num:""))
    print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n) :
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",22,"    def main ():
    num = int (input ("" Enter a Nmbu :
    print (f""Enums is &'prime if is_ prime (nom)
                    else not primé 3"")
def is- prone (1) :
        if n <= 12
            return false
        elif > <= 3:
            return True
        elf n/ 2 == x OR 1% 3= 6 ;
            return False
    for i in Range (5, int (n+""0.5) + 1,6
        if 1% i =x or 1%(i+2) =6:
                return False
        return True
- nor
                    = - - main
        main ()
",156,"def main ():
    num = int (input (""Enter a Num:""))
    print (f""Num is prime"" if is_prime (num) else ""not prime"")

def is_prime (n) :
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range (5, int (n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",26,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
                else not primé 3"")
def is- prone (1) :
    if n <= 12
        return false
    elif > <= 3:
        return True
    elf n/ 2 == x OR 1% 3= 6 ;
        return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
            return False
    return True
- nor
                = - - main
    main ()
",129,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime(num) else ""Num is not prime"")

def is_prime(n) :
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
for i in range(5, int(n**0.5) + 1, 6):
    if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",44,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
                else not primé 3"")
def is- prone (1) :
    if n <= 12
        return false
    elif > <= 3:
        return True
    elf n/ 2 == x OR 1% 3= 6 ;
        return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
            return False
    return True
- nor
                = - - main
    main ()
",129,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
for i in range(5, int(n**0.5) + 1, 6):
    if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",36,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
                else not primé 3"")
def is- prone (1) :
    if n <= 12
        return false
    elif > <= 3:
        return True
    elf n/ 2 == x OR 1% 3= 6 ;
        return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
            return False
    return True
- nor
                = - - main
    main ()
",129,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
for i in range(5, int(n**0.5) + 1, 6):
    if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",36,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
                else not primé 3"")
def is- prone (1) :
    if n <= 12
        return false
    elif > <= 3:
        return True
    elf n/ 2 == x OR 1% 3= 6 ;
        return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
            return False
    return True
- nor
                = - - main
    main ()
",129,"def main ():
    num = int (input (""Enter a Num: ""))
    print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",20,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
                else not primé 3"")
def is- prone (1) :
    if n <= 12
        return false
    elif > <= 3:
        return True
    elf n/ 2 == x OR 1% 3= 6 ;
        return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
            return False
    return True
- nor
                = - - main
    main ()
",129,"def main ():
    num = int (input (""Enter a Num: ""))
    print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n) :
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range (5, int (n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",23,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
                else not primé 3"")
def is- prone (1) :
    if n <= 12
        return false
    elif > <= 3:
        return True
    elf n/ 2 == x OR 1% 3= 6 ;
        return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
            return False
    return True
- nor
                = - - main
    main ()
",129,"def main ():
num = int (input (""Enter a Number: ""))
print (f""Number is prime"" if is_prime(num) else ""Number is not prime"")

def is_prime(n) :
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
for i in range(5, int(n**0.5) + 1, 6):
    if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",46,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
                else not primé 3"")
def is- prone (1) :
    if n <= 12
        return false
    elif > <= 3:
        return True
    elf n/ 2 == x OR 1% 3= 6 ;
        return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
            return False
    return True
- nor
                = - - main
    main ()
",129,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
for i in range(5, int(n**0.5) + 1, 6):
    if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",36,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
                else not primé 3"")
def is- prone (1) :
    if n <= 12
        return false
    elif > <= 3:
        return True
    elf n/ 2 == x OR 1% 3= 6 ;
        return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
            return False
    return True
- nor
                = - - main
    main ()
",129,"def main ():
num = int (input (""Enter a Number: ""))
print (f""Number is prime"" if is_prime(num) else ""Number is not prime"")

def is_prime(n) :
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
for i in range(5, int(n**0.5) + 1, 6):
    if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",46,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
                else not primé 3"")
def is- prone (1) :
    if n <= 12
        return false
    elif > <= 3:
        return True
    elf n/ 2 == x OR 1% 3= 6 ;
        return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
            return False
    return True
- nor
                = - - main
    main ()
",129,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
for i in range(5, int(n**0.5) + 1, 6):
    if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",36,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
                else not primé 3"")
def is- prone (1) :
    if n <= 12
        return false
    elif > <= 3:
        return True
    elf n/ 2 == x OR 1% 3= 6 ;
        return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
            return False
    return True
- nor
                = - - main
    main ()
",129,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime(num) else ""Num is not prime"")

def is_prime(n) :
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
for i in range(5, int(n**0.5) + 1, 6):
    if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",44,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
                else not primé 3"")
def is- prone (1) :
    if n <= 12
        return false
    elif > <= 3:
        return True
    elf n/ 2 == x OR 1% 3= 6 ;
        return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
            return False
    return True
- nor
                = - - main
    main ()
",129,"def main ():
    num = int (input (""Enter a Number: ""))
    print (f""Number is prime"" if is_prime (num) else ""Number is not prime"")

def is_prime (n) :
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range (5, int (n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",34,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
                else not primé 3"")
def is- prone (1) :
    if n <= 12
        return false
    elif > <= 3:
        return True
    elf n/ 2 == x OR 1% 3= 6 ;
        return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
            return False
    return True
- nor
                = - - main
    main ()
",129,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime(num) else ""Num is not prime"")

def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
for i in range(5, int(n**0.5) + 1, 6):
    if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",43,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
                else not primé 3"")
def is- prone (1) :
    if n <= 12
        return false
    elif > <= 3:
        return True
    elf n/ 2 == x OR 1% 3= 6 ;
        return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
            return False
    return True
- nor
                = - - main
    main ()
",129,"def main():
num = int(input(""Enter a Num: ""))
print(f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
for i in range(5, int(n**0.5) + 1, 6):
    if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main()
",31,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
                else not primé 3"")
def is- prone (1) :
    if n <= 12
        return false
    elif > <= 3:
        return True
    elf n/ 2 == x OR 1% 3= 6 ;
        return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
            return False
    return True
- nor
                = - - main
    main ()
",129,"def main ():
num = int (input (""Enter a Number: ""))
print (f""Number is prime"" if is_prime(num) else ""Number is not prime"")

def is_prime(n) :
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
for i in range(5, int(n**0.5) + 1, 6):
    if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",46,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
                else not primé 3"")
def is- prone (1) :
    if n <= 12
        return false
    elif > <= 3:
        return True
    elf n/ 2 == x OR 1% 3= 6 ;
        return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
            return False
    return True
- nor
                = - - main
    main ()
",129,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime(num) else ""Num is not prime"")

def is_prime(n) :
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
for i in range(5, int(n**0.5) + 1, 6):
    if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",44,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
                else not primé 3"")
def is- prone (1) :
    if n <= 12
        return false
    elif > <= 3:
        return True
    elf n/ 2 == x OR 1% 3= 6 ;
        return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
            return False
    return True
- nor
                = - - main
    main ()
",129,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime(num) else ""Num is not prime"")

def is_prime(n) :
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
for i in range(5, int(n**0.5) + 1, 6):
    if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",44,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
                else not primé 3"")
def is- prone (1) :
    if n <= 12
        return false
    elif > <= 3:
        return True
    elf n/ 2 == x OR 1% 3= 6 ;
        return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
            return False
    return True
- nor
                = - - main
    main ()
",129,"def main():
num = int(input(""Enter a Num: ""))
print(f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
for i in range(5, int(n**0.5) + 1, 6):
    if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main()
",31,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
                else not primé 3"")
def is- prone (1) :
    if n <= 12
        return false
    elif > <= 3:
        return True
    elf n/ 2 == x OR 1% 3= 6 ;
        return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
            return False
    return True
- nor
                = - - main
    main ()
",129,"def main ():
num = int (input ("" Enter a Num: ""))
print (f""Num is prime"" if is_prime (num)
                else ""not prime"")

def is_prime (n) :
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
for i in range (5, int (n**0.5) + 1, 6):
    if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",58,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
                else not primé 3"")
def is- prone (1) :
    if n <= 12
        return false
    elif > <= 3:
        return True
    elf n/ 2 == x OR 1% 3= 6 ;
        return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
            return False
    return True
- nor
                = - - main
    main ()
",129,"def main ():
num = int (input ("" Enter a Num: ""))
print (f""Num is prime"" if is_prime (num)
                else ""Num is not prime"")

def is_prime (n) :
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
for i in range (5, int (n**0.5) + 1, 6):
    if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",65,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
            else not primé 3"")
def is- prone (1) :
if n <= 12
    return false
elif > <= 3:
    return True
elf n/ 2 == x OR 1% 3= 6 ;
    return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
        return False
return True
- nor
            = - - main
main ()
",157,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n) :
if n <= 1:
    return False
elif n <= 3:
    return True
elif n % 2 == 0 or n % 3 == 0:
    return False
for i in range(5, int(n**0.5) + 1, 6):
    if n % i == 0 or n % (i+2) == 0:
        return False
return True

if __name__ == ""__main__"":
main ()
",73,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
            else not primé 3"")
def is- prone (1) :
if n <= 12
    return false
elif > <= 3:
    return True
elf n/ 2 == x OR 1% 3= 6 ;
    return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
        return False
return True
- nor
            = - - main
main ()
",157,"def main():
num = int(input(""Enter a Num: ""))
print(f""Num is prime"" if is_prime(num) else ""Num is not prime"")

def is_prime(n):
if n <= 1:
    return False
elif n <= 3:
    return True
elif n % 2 == 0 or n % 3 == 0:
    return False
for i in range(5, int(n**0.5) + 1, 6):
    if n % i == 0 or n % (i+2) == 0:
        return False
return True

if __name__ == ""__main__"":
main()
",74,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
            else not primé 3"")
def is- prone (1) :
if n <= 12
    return false
elif > <= 3:
    return True
elf n/ 2 == x OR 1% 3= 6 ;
    return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
        return False
return True
- nor
            = - - main
main ()
",157,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n):
if n <= 1:
    return False
elif n <= 3:
    return True
elif n % 2 == 0 or n % 3 == 0:
    return False
for i in range(5, int(n**0.5) + 1, 6):
    if n % i == 0 or n % (i+2) == 0:
        return False
return True

if __name__ == ""__main__"":
main ()
",72,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
            else not primé 3"")
def is- prone (1) :
if n <= 12
    return false
elif > <= 3:
    return True
elf n/ 2 == x OR 1% 3= 6 ;
    return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
        return False
return True
- nor
            = - - main
main ()
",157,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n):
if n <= 1:
    return False
elif n <= 3:
    return True
elif n % 2 == 0 or n % 3 == 0:
    return False
for i in range(5, int(n**0.5) + 1, 6):
    if n % i == 0 or n % (i+2) == 0:
        return False
return True

if __name__ == ""__main__"":
main ()
",72,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
            else not primé 3"")
def is- prone (1) :
if n <= 12
    return false
elif > <= 3:
    return True
elf n/ 2 == x OR 1% 3= 6 ;
    return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
        return False
return True
- nor
            = - - main
main ()
",157,"def main():
num = int(input(""Enter a Num: ""))
print(f""Num is prime"" if is_prime(num) else ""Num is not prime"")

def is_prime(n):
if n <= 1:
    return False
elif n <= 3:
    return True
elif n % 2 == 0 or n % 3 == 0:
    return False
for i in range(5, int(n**0.5) + 1, 6):
    if n % i == 0 or n % (i+2) == 0:
        return False
return True

if __name__ == ""__main__"":
main()
",74,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
            else not primé 3"")
def is- prone (1) :
if n <= 12
    return false
elif > <= 3:
    return True
elf n/ 2 == x OR 1% 3= 6 ;
    return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
        return False
return True
- nor
            = - - main
main ()
",157,"def main ():
    num = int (input (""Enter a Num: ""))
    print (f""Num is prime"" if is_prime (num) else ""Num is not prime"")

def is_prime (n) :
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range (5, int (n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",32,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
            else not primé 3"")
def is- prone (1) :
if n <= 12
    return false
elif > <= 3:
    return True
elf n/ 2 == x OR 1% 3= 6 ;
    return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
        return False
return True
- nor
            = - - main
main ()
",157,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n) :
if n <= 1:
    return False
elif n <= 3:
    return True
elif n % 2 == 0 or n % 3 == 0:
    return False
for i in range(5, int(n**0.5) + 1, 6):
    if n % i == 0 or n % (i+2) == 0:
        return False
return True

if __name__ == ""__main__"":
main ()
",73,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
            else not primé 3"")
def is- prone (1) :
if n <= 12
    return false
elif > <= 3:
    return True
elf n/ 2 == x OR 1% 3= 6 ;
    return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
        return False
return True
- nor
            = - - main
main ()
",157,"def main ():
    num = int (input (""Enter a Num: ""))
    print (f""Num is prime"" if is_prime (num) else ""Num is not prime"")

def is_prime (n) :
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range (5, int (n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",32,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
            else not primé 3"")
def is- prone (1) :
if n <= 12
    return false
elif > <= 3:
    return True
elf n/ 2 == x OR 1% 3= 6 ;
    return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
        return False
return True
- nor
            = - - main
main ()
",157,"def main():
num = int(input(""Enter a Num: ""))
print(f""Num is prime"" if is_prime(num) else ""Num is not prime"")

def is_prime(n):
if n <= 1:
    return False
elif n <= 3:
    return True
elif n % 2 == 0 or n % 3 == 0:
    return False
for i in range(5, int(n**0.5) + 1, 6):
    if n % i == 0 or n % (i+2) == 0:
        return False
return True

if __name__ == ""__main__"":
main()
",74,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
            else not primé 3"")
def is- prone (1) :
if n <= 12
    return false
elif > <= 3:
    return True
elf n/ 2 == x OR 1% 3= 6 ;
    return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
        return False
return True
- nor
            = - - main
main ()
",157,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n):
if n <= 1:
    return False
elif n <= 3:
    return True
elif n % 2 == 0 or n % 3 == 0:
    return False
for i in range(5, int(n**0.5) + 1, 6):
    if n % i == 0 or n % (i+2) == 0:
        return False
return True

if __name__ == ""__main__"":
main ()
",72,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
            else not primé 3"")
def is- prone (1) :
if n <= 12
    return false
elif > <= 3:
    return True
elf n/ 2 == x OR 1% 3= 6 ;
    return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
        return False
return True
- nor
            = - - main
main ()
",157,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n):
if n <= 1:
    return False
elif n <= 3:
    return True
elif n % 2 == 0 or n % 3 == 0:
    return False
for i in range(5, int(n**0.5) + 1, 6):
    if n % i == 0 or n % (i+2) == 0:
        return False
return True

if __name__ == ""__main__"":
main ()
",72,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
            else not primé 3"")
def is- prone (1) :
if n <= 12
    return false
elif > <= 3:
    return True
elf n/ 2 == x OR 1% 3= 6 ;
    return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
        return False
return True
- nor
            = - - main
main ()
",157,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n):
if n <= 1:
    return False
elif n <= 3:
    return True
elif n % 2 == 0 or n % 3 == 0:
    return False
for i in range(5, int(n**0.5) + 1, 6):
    if n % i == 0 or n % (i+2) == 0:
        return False
return True

if __name__ == ""__main__"":
main ()
",72,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
        else not primé 3"")
def is- prone (1) :
if n <= 12
    return false
elif > <= 3:
return True
elf n/ 2 == x OR 1% 3= 6 ;
    return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
    return False
return True
- nor
        = - - main
main ()
",162,"def main():
num = int(input(""Enter a Num: ""))
print(f""Num is prime"" if is_prime(num) else ""Num is not prime"")

def is_prime(n):
if n <= 1:
    return False
elif n <= 3:
return True
elif n % 2 == 0 or n % 3 == 0:
    return False
for i in range(5, int(n**0.5) + 1, 6):
if n % i == 0 or n % (i+2) == 0:
    return False
return True

if __name__ == ""__main__"":
main()
",86,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
        else not primé 3"")
def is- prone (1) :
if n <= 12
    return false
elif > <= 3:
return True
elf n/ 2 == x OR 1% 3= 6 ;
    return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
    return False
return True
- nor
        = - - main
main ()
",162,"def main ():
    num = int (input (""Enter a Num: ""))
    print (f""Num is prime"" if is_prime (num) else ""not prime"")

def is_prime (n) :
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range (5, int (n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",25,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
        else not primé 3"")
def is- prone (1) :
if n <= 12
    return false
elif > <= 3:
return True
elf n/ 2 == x OR 1% 3= 6 ;
    return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
    return False
return True
- nor
        = - - main
main ()
",162,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n):
if n <= 1:
    return False
elif n <= 3:
    return True
elif n % 2 == 0 or n % 3 == 0:
    return False
for i in range(5, int(n**0.5) + 1, 6):
if n % i == 0 or n % (i+2) == 0:
    return False
return True

if __name__ == ""__main__"":
main ()
",80,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
        else not primé 3"")
def is- prone (1) :
if n <= 12
    return false
elif > <= 3:
return True
elf n/ 2 == x OR 1% 3= 6 ;
    return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
    return False
return True
- nor
        = - - main
main ()
",162,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n) :
if n <= 1:
    return False
elif n <= 3:
return True
elif n % 2 == 0 or n % 3 == 0:
    return False
for i in range(5, int(n**0.5) + 1, 6):
if n % i == 0 or n % (i+2) == 0:
    return False
return True

if __name__ == ""__main__"":
main ()
",85,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
        else not primé 3"")
def is- prone (1) :
if n <= 12
    return false
elif > <= 3:
return True
elf n/ 2 == x OR 1% 3= 6 ;
    return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
    return False
return True
- nor
        = - - main
main ()
",162,"def main():
num = int(input(""Enter a Num: ""))
print(f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n):
if n <= 1:
    return False
elif n <= 3:
return True
elif n % 2 == 0 or n % 3 == 0:
    return False
for i in range(5, int(n**0.5) + 1, 6):
if n % i == 0 or n % (i+2) == 0:
    return False
return True

if __name__ == ""__main__"":
main()
",79,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
        else not primé 3"")
def is- prone (1) :
if n <= 12
    return false
elif > <= 3:
return True
elf n/ 2 == x OR 1% 3= 6 ;
    return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
    return False
return True
- nor
        = - - main
main ()
",162,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n):
if n <= 1:
    return False
elif n <= 3:
    return True
elif n % 2 == 0 or n % 3 == 0:
    return False
for i in range(5, int(n**0.5) + 1, 6):
if n % i == 0 or n % (i+2) == 0:
    return False
return True

if __name__ == ""__main__"":
main ()
",80,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
        else not primé 3"")
def is- prone (1) :
if n <= 12
    return false
elif > <= 3:
    return True
elf n/ 2 == x OR 1% 3= 6 ;
    return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
    return False
return True
- nor
        = - - main
main ()
",158,"def main ():
    num = int (input (""Enter a Num: ""))
    print (f""Num is prime"" if is_prime (num) else ""not prime"")

def is_prime (n) :
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range (5, int (n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",25,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
        else not primé 3"")
def is- prone (1) :
if n <= 12
    return false
elif > <= 3:
    return True
elf n/ 2 == x OR 1% 3= 6 ;
    return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
    return False
return True
- nor
        = - - main
main ()
",158,"def main ():
num = int (input ("" Enter a Num: ""))
print (f""Num is prime"" if is_prime (num) else ""Num is not prime"")

def is_prime (n) :
if n <= 1:
    return False
elif n <= 3:
    return True
elif n % 2 == 0 or n % 3 == 0:
    return False
for i in range (5, int (n**0.5) + 1, 6):
if n % i == 0 or n % (i+2) == 0:
    return False
return True

if __name__ == ""__main__"":
main ()
",93,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
        else not primé 3"")
def is- prone (1) :
if n <= 12
    return false
elif > <= 3:
    return True
elf n/ 2 == x OR 1% 3= 6 ;
    return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
    return False
return True
- nor
        = - - main
main ()
",158,"def main ():
    num = int (input (""Enter a Num: ""))
    print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",20,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
        else not primé 3"")
def is- prone (1) :
if n <= 12
    return false
elif > <= 3:
    return True
elf n/ 2 == x OR 1% 3= 6 ;
    return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
    return False
return True
- nor
        = - - main
main ()
",158,"def main ():
num = int (input ("" Enter a Num: ""))
print (f""Num is prime"" if is_prime (num) else ""Num is not prime"")

def is_prime (n) :
if n <= 1:
    return False
elif n <= 3:
    return True
elif n % 2 == 0 or n % 3 == 0:
    return False
for i in range (5, int (n**0.5) + 1, 6):
if n % i == 0 or n % (i+2) == 0:
    return False
return True

if __name__ == ""__main__"":
main ()
",93,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
        else not primé 3"")
def is- prone (1) :
if n <= 12
    return false
elif > <= 3:
    return True
elf n/ 2 == x OR 1% 3= 6 ;
    return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
    return False
return True
- nor
        = - - main
main ()
",158,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime(num) else ""Num is not prime"")

def is_prime(n):
if n <= 1:
    return False
elif n <= 3:
    return True
elif n % 2 == 0 or n % 3 == 0:
    return False
for i in range(5, int(n**0.5) + 1, 6):
if n % i == 0 or n % (i+2) == 0:
    return False
return True

if __name__ == ""__main__"":
main ()
",87,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
        else not primé 3"")
def is- prone (1) :
if n <= 12
    return false
elif > <= 3:
    return True
elf n/ 2 == x OR 1% 3= 6 ;
    return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
    return False
return True
- nor
        = - - main
main ()
",158,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n):
if n <= 1:
    return False
elif n <= 3:
    return True
elif n % 2 == 0 or n % 3 == 0:
    return False
for i in range(5, int(n**0.5) + 1, 6):
if n % i == 0 or n % (i+2) == 0:
    return False
return True

if __name__ == ""__main__"":
main ()
",80,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
        else not primé 3"")
def is- prone (1) :
if n <= 12
    return false
elif > <= 3:
    return True
elf n/ 2 == x OR 1% 3= 6 ;
    return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
    return False
return True
- nor
        = - - main
main ()
",158,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n):
if n <= 1:
    return False
elif n <= 3:
    return True
elif n % 2 == 0 or n % 3 == 0:
    return False
for i in range(5, int(n**0.5) + 1, 6):
if n % i == 0 or n % (i+2) == 0:
    return False
return True

if __name__ == ""__main__"":
main ()
",80,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
        else not primé 3"")
def is- prone (1) :
if n <= 12
    return false
elif > <= 3:
    return True
elf n/ 2 == x OR 1% 3= 6 ;
    return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
    return False
return True
- nor
        = - - main
main ()
",154,"def main():
num = int(input(""Enter a Num: ""))
print(f""Num is prime"" if is_prime(num) else ""Num is not prime"")

def is_prime(n):
if n <= 1:
    return False
elif n <= 3:
    return True
elif n % 2 == 0 or n % 3 == 0:
    return False
for i in range(5, int(n**0.5) + 1, 6):
    if n % i == 0 or n % (i+2) == 0:
    return False
return True

if __name__ == ""__main__"":
main()
",78,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
        else not primé 3"")
def is- prone (1) :
if n <= 12
    return false
elif > <= 3:
    return True
elf n/ 2 == x OR 1% 3= 6 ;
    return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
    return False
return True
- nor
        = - - main
main ()
",154,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime (num) else ""not prime"")

def is_prime (n) :
if n <= 1:
    return False
elif n <= 3:
    return True
elif n % 2 == 0 or n % 3 == 0:
    return False
for i in range (5, int (n**0.5) + 1, 6):
    if n % i == 0 or n % (i+2) == 0:
    return False
return True

if __name__ == ""__main__"":
    main ()
",77,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
        else not primé 3"")
def is- prone (1) :
if n <= 12
    return false
elif > <= 3:
    return True
elf n/ 2 == x OR 1% 3= 6 ;
    return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
    return False
return True
- nor
        = - - main
main ()
",154,"def main ():
    num = int (input (""Enter a Num: ""))
    print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range (5, int (n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",22,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
        else not primé 3"")
def is- prone (1) :
if n <= 12
    return false
elif > <= 3:
    return True
elf n/ 2 == x OR 1% 3= 6 ;
    return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
    return False
return True
- nor
        = - - main
main ()
",154,"def main():
num = int(input(""Enter a Num: ""))
print(f""Num is prime"" if is_prime(num) else ""Num is not prime"")

def is_prime(n):
if n <= 1:
    return False
elif n <= 3:
    return True
elif n % 2 == 0 or n % 3 == 0:
    return False
for i in range(5, int(n**0.5) + 1, 6):
    if n % i == 0 or n % (i+2) == 0:
    return False
return True

if __name__ == ""__main__"":
main()
",78,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
        else not primé 3"")
def is- prone (1) :
if n <= 12
    return false
elif > <= 3:
    return True
elf n/ 2 == x OR 1% 3= 6 ;
    return False
for i in Range (5, int (n+""0.5) + 1,6
    if 1% i =x or 1%(i+2) =6:
    return False
return True
- nor
        = - - main
main ()
",154,"def main ():
    num = int (input (""Enter a Num: ""))
    print (f""Num is prime"" if is_prime (num) else ""not prime"")

def is_prime (n) :
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range (5, int (n**0.5) + 1, 6):
        if n % i == 0 or n % (i+2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main ()
",25,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
    else not primé 3"")
def is- prone (1) :
if n <= 12
return false
elif > <= 3:
return True
elf n/ 2 == x OR 1% 3= 6 ;
return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
return False
return True
- nor
    = - - main
main ()
",168,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime (num) else ""Num is not prime"")

def is_prime (n) :
if n <= 1:
return False
elif n <= 3:
return True
elif n % 2 == 0 or n % 3 == 0:
return False
for i in range (5, int (n**0.5) + 1, 6:
if n % i == 0 or n % (i+2) == 0:
return False
return True

if __name__ == ""__main__"":
main ()
",109,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
    else not primé 3"")
def is- prone (1) :
if n <= 12
return false
elif > <= 3:
return True
elf n/ 2 == x OR 1% 3= 6 ;
return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
return False
return True
- nor
    = - - main
main ()
",168,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime(num) else ""Num is not prime"")

def is_prime(n):
if n <= 1:
return False
elif n <= 3:
return True
elif n % 2 == 0 or n % 3 == 0:
return False
for i in range(5, int(n**0.5) + 1, 6):
if n % i == 0 or n % (i+2) == 0:
return False
return True

if __name__ == ""__main__"":
main ()
",103,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
    else not primé 3"")
def is- prone (1) :
if n <= 12
return false
elif > <= 3:
return True
elf n/ 2 == x OR 1% 3= 6 ;
return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
return False
return True
- nor
    = - - main
main ()
",168,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime(num) else ""Num is not prime"")

def is_prime(n) :
if n <= 1:
return False
elif n <= 3:
return True
elif n % 2 == 0 or n % 3 == 0:
return False
for i in range(5, int(n**0.5) + 1, 6):
if n % i == 0 or n % (i+2) == 0:
return False
return True

if __name__ == ""__main__"":
main ()
",104,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
    else not primé 3"")
def is- prone (1) :
if n <= 12
return false
elif > <= 3:
return True
elf n/ 2 == x OR 1% 3= 6 ;
return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
return False
return True
- nor
    = - - main
main ()
",168,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime(num) else ""Num is not prime"")

def is_prime(n):
if n <= 1:
return False
elif n <= 3:
return True
elif n % 2 == 0 or n % 3 == 0:
return False
for i in range(5, int(n**0.5) + 1, 6):
if n % i == 0 or n % (i+2) == 0:
return False
return True

if __name__ == ""__main__"":
main ()
",103,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
    else not primé 3"")
def is- prone (1) :
if n <= 12
return false
elif > <= 3:
return True
elf n/ 2 == x OR 1% 3= 6 ;
return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
return False
return True
- nor
    = - - main
main ()
",168,"def main ():
num = int (input ("" Enter a Num: ""))
print (f""Num is prime"" if is_prime (num) else ""Num is not prime"")

def is_prime (n) :
if n <= 1:
return False
elif n <= 3:
return True
elif n % 2 == 0 or n % 3 == 0:
return False
for i in range (5, int (n**0.5) + 1, 6):
if n % i == 0 or n % (i+2) == 0:
return False
return True

if __name__ == ""__main__"":
main ()
",109,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
    else not primé 3"")
def is- prone (1) :
if n <= 12
return false
elif > <= 3:
return True
elf n/ 2 == x OR 1% 3= 6 ;
return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
return False
return True
- nor
    = - - main
main ()
",168,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n):
if n <= 1:
return False
elif n <= 3:
return True
elif n % 2 == 0 or n % 3 == 0:
return False
for i in range(5, int(n**0.5) + 1, 6):
if n % i == 0 or n % (i+2) == 0:
return False
return True

if __name__ == ""__main__"":
main ()
",96,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
    else not primé 3"")
def is- prone (1) :
if n <= 12
return false
elif > <= 3:
return True
elf n/ 2 == x OR 1% 3= 6 ;
return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
return False
return True
- nor
    = - - main
main ()
",168,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime (num) else ""not prime"")

def is_prime (n) :
if n <= 1:
return False
elif n <= 3:
return True
elif n % 2 == 0 or n % 3 == 0:
return False
for i in range (5, int (n**0.5) + 1, 6):
if n % i == 0 or n % (i+2) == 0:
return False
return True

if __name__ == ""__main__"":
main ()
",101,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
    else not primé 3"")
def is- prone (1) :
if n <= 12
return false
elif > <= 3:
return True
elf n/ 2 == x OR 1% 3= 6 ;
return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
return False
return True
- nor
    = - - main
main ()
",168,"def main ():
num = int (input (""Enter a Num:""))
print (f""Num is prime"" if is_prime (num) else ""Num is not prime"")

def is_prime (n) :
if n <= 1:
return False
elif n <= 3:
return True
elif n % 2 == 0 or n % 3 == 0:
return False
for i in range (5, int (n**0.5) + 1, 6):
if n % i == 0 or n % (i+2) == 0:
return False
return True

if __name__ == ""__main__"":
main ()
",109,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
    else not primé 3"")
def is- prone (1) :
if n <= 12
return false
elif > <= 3:
return True
elf n/ 2 == x OR 1% 3= 6 ;
return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
return False
return True
- nor
    = - - main
main ()
",168,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n) :
if n <= 1:
return False
elif n <= 3:
return True
elif n % 2 == 0 or n % 3 == 0:
return False
for i in range(5, int(n**0.5) + 1, 6):
if n % i == 0 or n % (i+2) == 0:
return False
return True

if __name__ == ""__main__"":
main ()
",97,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
    else not primé 3"")
def is- prone (1) :
if n <= 12
return false
elif > <= 3:
return True
elf n/ 2 == x OR 1% 3= 6 ;
return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
return False
return True
- nor
    = - - main
main ()
",168,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime (num) else ""Num is not prime"")

def is_prime (n) :
if n <= 1:
return False
elif n <= 3:
return True
elif n % 2 == 0 or n % 3 == 0:
return False
for i in range (5, int (n**0.5) + 1, 6):
if n % i == 0 or n % (i+2) == 0:
return False
return True

if __name__ == ""__main__"":
main ()
",108,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
    else not primé 3"")
def is- prone (1) :
if n <= 12
return false
elif > <= 3:
return True
elf n/ 2 == x OR 1% 3= 6 ;
return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
return False
return True
- nor
    = - - main
main ()
",168,"def main ():
num = int (input ("" Enter a Num: ""))
print (f""Num is prime"" if is_prime (num) else ""Num is not prime"")

def is_prime (n) :
if n <= 1:
return False
elif n <= 3:
return True
elif n % 2 == 0 or n % 3 == 0:
return False
for i in range (5, int (n**0.5) + 1, 6):
if n % i == 0 or n % (i+2) == 0:
return False
return True

if __name__ == ""__main__"":
main ()
",109,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
    else not primé 3"")
def is- prone (1) :
if n <= 12
return false
elif > <= 3:
return True
elf n/ 2 == x OR 1% 3= 6 ;
return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
return False
return True
- nor
    = - - main
main ()
",168,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n):
if n <= 1:
return False
elif n <= 3:
return True
elif n % 2 == 0 or n % 3 == 0:
return False
for i in range(5, int(n**0.5) + 1, 6):
if n % i == 0 or n % (i+2) == 0:
return False
return True

if __name__ == ""__main__"":
main ()
",96,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
    else not primé 3"")
def is- prone (1) :
if n <= 12
return false
elif > <= 3:
return True
elf n/ 2 == x OR 1% 3= 6 ;
return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
return False
return True
- nor
    = - - main
main ()
",168,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime (num) else ""Num is not prime"")

def is_prime (n) :
if n <= 1:
return False
elif n <= 3:
return True
elif n % 2 == 0 or n % 3 == 0:
return False
for i in range (5, int (n**0.5) + 1, 6):
if n % i == 0 or n % (i+2) == 0:
return False
return True

if __name__ == ""__main__"":
main ()
",108,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
    else not primé 3"")
def is- prone (1) :
if n <= 12
return false
elif > <= 3:
return True
elf n/ 2 == x OR 1% 3= 6 ;
return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
return False
return True
- nor
    = - - main
main ()
",168,"def main ():
num = int (input ("" Enter a Num: ""))
print (f""Num is prime"" if is_prime (num) else ""Num is not prime"")

def is_prime (n) :
if n <= 1:
return False
elif n <= 3:
return True
elif n % 2 == 0 or n % 3 == 0:
return False
for i in range (5, int (n**0.5) + 1, 6):
if n % i == 0 or n % (i+2) == 0:
return False
return True

if __name__ == ""__main__"":
main ()
",109,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
    else not primé 3"")
def is- prone (1) :
if n <= 12
return false
elif > <= 3:
return True
elf n/ 2 == x OR 1% 3= 6 ;
return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
return False
return True
- nor
    = - - main
main ()
",168,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime (num) else ""not prime"")

def is_prime (n) :
if n <= 1:
return False
elif n <= 3:
return True
elif n % 2 == 0 or n % 3 == 0:
return False
for i in range (5, int (n**0.5) + 1, 6):
if n % i == 0 or n % (i+2) == 0:
return False
return True

if __name__ == ""__main__"":
main ()
",101,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
    else not primé 3"")
def is- prone (1) :
if n <= 12
return false
elif > <= 3:
return True
elf n/ 2 == x OR 1% 3= 6 ;
return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
return False
return True
- nor
    = - - main
main ()
",168,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n):
if n <= 1:
return False
elif n <= 3:
return True
elif n % 2 == 0 or n % 3 == 0:
return False
for i in range(5, int(n**0.5) + 1, 6):
if n % i == 0 or n % (i+2) == 0:
return False
return True

if __name__ == ""__main__"":
main ()
",96,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
    else not primé 3"")
def is- prone (1) :
if n <= 12
return false
elif > <= 3:
return True
elf n/ 2 == x OR 1% 3= 6 ;
return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
return False
return True
- nor
    = - - main
main ()
",168,"def main ():
num = int (input (""Enter a Num: ""))
print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n):
if n <= 1:
return False
elif n <= 3:
return True
elif n % 2 == 0 or n % 3 == 0:
return False
for i in range(5, int(n**0.5) + 1, 6):
if n % i == 0 or n % (i+2) == 0:
return False
return True

if __name__ == ""__main__"":
main ()
",96,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
    else not primé 3"")
def is- prone (1) :
if n <= 12
return false
elif > <= 3:
return True
elf n/ 2 == x OR 1% 3= 6 ;
return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
return False
return True
- nor
    = - - main
main ()
",168,"def main ():
num = int (input ("" Enter a Num: ""))
print (f""Num is prime"" if is_prime (num) else ""Num is not prime"")

def is_prime (n) :
if n <= 1:
return False
elif n <= 3:
return True
elif n % 2 == 0 or n % 3 == 0:
return False
for i in range (5, int (n**0.5) + 1, 6):
if n % i == 0 or n % (i+2) == 0:
return False
return True

if __name__ == ""__main__"":
main ()
",109,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
    else not primé 3"")
def is- prone (1) :
if n <= 12
return false
elif > <= 3:
return True
elf n/ 2 == x OR 1% 3= 6 ;
return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
return False
return True
- nor
    = - - main
main ()
",168,"def main ():
num = int (input ("" Enter a Num: ""))
print (f""Num is prime"" if is_prime (num) else ""Num is not prime"")

def is_prime (n) :
if n <= 1:
return False
elif n <= 3:
return True
elif n % 2 == 0 or n % 3 == 0:
return False
for i in range (5, int (n**0.5) + 1, 6):
if n % i == 0 or n % (i+2) == 0:
return False
return True

if __name__ == ""__main__"":
main ()
",109,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
    else not primé 3"")
def is- prone (1) :
if n <= 12
return false
elif > <= 3:
return True
elf n/ 2 == x OR 1% 3= 6 ;
return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
return False
return True
- nor
    = - - main
main ()
",168,"def main ():
num = int (input ("" Enter a Num: ""))
print (f""Num is prime"" if is_prime (num) else ""Num is not prime"")

def is_prime (n) :
if n <= 1:
return False
elif n <= 3:
return True
elif n % 2 == 0 or n % 3 == 0:
return False
for i in range (5, int (n**0.5) + 1, 6):
if n % i == 0 or n % (i+2) == 0:
return False
return True

if __name__ == ""__main__"":
main ()
",109,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
    else not primé 3"")
def is- prone (1) :
if n <= 12
return false
elif > <= 3:
return True
elf n/ 2 == x OR 1% 3= 6 ;
return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
return False
return True
- nor
    = - - main
main ()
",168,"def main ():
num = int (input (""Enter a Num:""))
print (f""Num is prime"" if is_prime(num) else ""not prime"")

def is_prime(n):
if n <= 1:
return False
elif n <= 3:
return True
elif n % 2 == 0 or n % 3 == 0:
return False
for i in range(5, int(n**0.5) + 1, 6):
if n % i == 0 or n % (i+2) == 0:
return False
return True

if __name__ == ""__main__"":
main ()
",97,"def main ():
num = int (input ("" Enter a Nmbu :
print (f""Enums is &'prime if is_ prime (nom)
    else not primé 3"")
def is- prone (1) :
if n <= 12
return false
elif > <= 3:
return True
elf n/ 2 == x OR 1% 3= 6 ;
return False
for i in Range (5, int (n+""0.5) + 1,6
if 1% i =x or 1%(i+2) =6:
return False
return True
- nor
    = - - main
main ()
",168,"def main ():
num = int (input ("" Enter a Num: ""))
print (f""Num is prime"" if is_prime (num) else ""Num is not prime"")

def is_prime (n) :
if n <= 1:
return False
elif n <= 3:
return True
elif n % 2 == 0 or n % 3 == 0:
return False
for i in range (5, int (n**0.5) + 1, 6):
if n % i == 0 or n % (i+2) == 0:
return False
return True

if __name__ == ""__main__"":
main ()
",109
"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
","from karel . stamfordkarel. import *
def mais ():
turn-left ():
while frent_ is_ alpar ();
turn-right ()
fill-row ( )
return_to_ home()
jumprow ()
turn-right ()
fill-row ()
returnkte -home ()
while front- is Elcar();
meve ()
Sef fill -row() ;
while front- is clear()
put - beeper ()
move ()
put-beeper ()",145,"    from karel . stamfordkarel import *
def mais ():
                    turn-left ():
                while frent_ is_ alpar () ;
                                            turn-right ()
                                                    fill-row( )
                                                return _to_ home()
                                                    Jumprow ()
                    turn-right ()
                            fill-row ()
                        returnkte - home ()
                                while front- is- Elcar ()
                                                        meve()
        def fill-row() ;
                while front- is clear()
                                    put - beeper()
                                        move ()
            put-beeper ()
",478,"from karel.stanfordkarel import *

def main():
    turn_left()
        while front_is_clear():
            turn_right()
                fill_row()
            return_to_home()
                jump_row()
            turn_right()
                fill_row()
            return_to_home()
                while front_is_clear():
                    move()

def fill_row():
    while front_is_clear():
        put_beeper()
            move()
    put_beeper()
",84,"    from karel . stamfordkarel import *
def mais ():
                turn-left ():
                while frent_ is_ alpar () ;
                                        turn-right ()
                                                fill-row( )
                                            return _to_ home()
                                                Jumprow ()
                turn-right ()
                        fill-row ()
                    returnkte - home ()
                            while front- is- Elcar ()
                                                    meve()
        def fill-row() ;
                while front- is clear()
                                put - beeper()
                                    move ()
            put-beeper ()
",430,"from karel.stanfordkarel import *

def main():
                turn_left()
                while front_is_clear():
                                        turn_right()
                                                fill_row()
                                            return_to_home()
                                                jump_row()
                turn_right()
                        fill_row()
                    return_to_home()
                            while front_is_clear():
                                                    move()

        def fill_row():
                while front_is_clear():
                                put_beeper()
                                    move()
            put_beeper()
",368,"    from karel . stamfordkarel import *
def mais ():
            turn-left ():
            while frent_ is_ alpar () ;
                                turn-right ()
                                        fill-row( )
                                    return _to_ home()
                                        Jumprow ()
            turn-right ()
                fill-row ()
                returnkte - home ()
                    while front- is- Elcar ()
                                            meve()
        def fill-row() ;
            while front- is clear()
                        put - beeper()
                            move ()
            put-beeper ()
",338,"from karel.stanfordkarel import *

def main():
            turn_left()
            while front_is_clear():
                                turn_right()
                                        fill_row()
                                    return_to_home()
                                        jump_row()
            turn_right()
                fill_row()
                return_to_home()
                    while front_is_clear():
                                            move()

        def fill_row():
            while front_is_clear():
                        put_beeper()
                            move()
            put_beeper()
",276,"    from karel . stamfordkarel import *
def mais ():
            turn-left ():
            while frent_ is_ alpar () ;
                                turn-right ()
                                    fill-row( )
                                    return _to_ home()
                                    Jumprow ()
            turn-right ()
                fill-row ()
                returnkte - home ()
                    while front- is- Elcar ()
                                        meve()
        def fill-row() ;
            while front- is clear()
                        put - beeper()
                            move ()
            put-beeper ()
",326,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",12,"    from karel . stamfordkarel import *
def mais ():
            turn-left ():
            while frent_ is_ alpar () ;
                            turn-right ()
                                fill-row( )
                                return _to_ home()
                                Jumprow ()
            turn-right ()
                fill-row ()
            returnkte - home ()
                while front- is- Elcar ()
                                    meve()
        def fill-row() ;
            while front- is clear()
                    put - beeper()
                        move ()
            put-beeper ()
",290,"from karel.stanfordkarel import *

def main():
            turn_left()
            while front_is_clear():
                            turn_right()
                                fill_row()
                                return_to_home()
                                jump_row()
            turn_right()
                fill_row()
            return_to_home()
                while front_is_clear():
                                    move()

        def fill_row():
            while front_is_clear():
                    put_beeper()
                        move()
            put_beeper()
",228,"    from karel . stamfordkarel import *
def mais ():
            turn-left ():
            while frent_ is_ alpar () ;
                            turn-right ()
                                fill-row( )
                                return _to_ home()
                                Jumprow ()
            turn-right ()
                fill-row ()
            returnkte - home ()
                while front- is- Elcar ()
                                    meve()
        def fill-row() ;
            while front- is clear()
                    put - beeper()
                        move ()
            put-beeper ()
",290,"from karel.stanfordkarel import *

def main():
            turn_left()
            while front_is_clear():
                            turn_right()
                                fill_row()
                                return_to_home()
                                jump_row()
            turn_right()
                fill_row()
            return_to_home()
                while front_is_clear():
                                    move()

        def fill_row():
            while front_is_clear():
                    put_beeper()
                        move()
            put_beeper()
",228,"    from karel . stamfordkarel import *
def mais ():
            turn-left ():
            while frent_ is_ alpar () ;
                        turn-right ()
                            fill-row( )
                            return _to_ home()
                            Jumprow ()
            turn-right ()
            fill-row ()
            returnkte - home ()
            while front- is- Elcar ()
                                meve()
        def fill-row() ;
            while front- is clear()
                put - beeper()
                    move ()
            put-beeper ()
",254,"from karel.stanfordkarel import *

def main():
            turn_left()
            while front_is_clear():
                        turn_right()
                            fill_row()
                            return_to_home()
                            jump_row()
            turn_right()
            fill_row()
            return_to_home()
            while front_is_clear():
                                move()

        def fill_row():
            while front_is_clear():
                put_beeper()
                    move()
            put_beeper()
",192,"    from karel . stamfordkarel import *
def mais ():
            turn-left ():
            while frent_ is_ alpar () ;
                        turn-right ()
                            fill-row( )
                            return _to_ home()
                            Jumprow ()
            turn-right ()
            fill-row ()
            returnkte - home ()
            while front- is- Elcar ()
                                meve()
        def fill-row() ;
            while front- is clear()
                put - beeper()
                    move ()
            put-beeper ()
",254,"from karel.stanfordkarel import *

def main():
            turn_left()
            while front_is_clear():
                        turn_right()
                            fill_row()
                            return_to_home()
                            jump_row()
            turn_right()
            fill_row()
            return_to_home()
            while front_is_clear():
                                move()

        def fill_row():
            while front_is_clear():
                put_beeper()
                    move()
            put_beeper()
",192,"from karel . stamfordkarel import *
def mais ():
        turn-left ():
        while frent_ is_ alpar () ;
                    turn-right ()
                        fill-row( )
                        return _to_ home()
                        Jumprow ()
        turn-right ()
        fill-row ()
        returnkte - home ()
        while front- is- Elcar ()
                            meve()
    def fill-row() ;
        while front- is clear()
            put - beeper()
                move ()
        put-beeper ()
",186,"from karel.stanfordkarel import *

def main():
        turn_left()
        while front_is_clear():
                    turn_right()
                        fill_row()
                        return_to_home()
                        jump_row()
        turn_right()
        fill_row()
        return_to_home()
        while front_is_clear():
                            move()

def fill_row():
        while front_is_clear():
            put_beeper()
                move()
        put_beeper()
",124,"from karel . stamfordkarel import *
def mais ():
        turn-left ():
        while frent_ is_ alpar () ;
                    turn-right ()
                        fill-row( )
                        return _to_ home()
                        Jumprow ()
        turn-right ()
        fill-row ()
        returnkte - home ()
        while front- is- Elcar ()
                            meve()
    def fill-row() ;
        while front- is clear()
            put - beeper()
                move ()
        put-beeper ()
",186,"from karel.stanfordkarel import *

def main():
        turn_left()
        while front_is_clear():
                    turn_right()
                        fill_row()
                        return_to_home()
                        jump_row()
        turn_right()
        fill_row()
        return_to_home()
        while front_is_clear():
                            move()

    def fill_row():
        while front_is_clear():
            put_beeper()
                move()
        put_beeper()
",128,"from karel . stamfordkarel import *
def mais ():
        turn-left ():
        while frent_ is_ alpar () ;
                    turn-right ()
                        fill-row( )
                        return _to_ home()
                        Jumprow ()
        turn-right ()
        fill-row ()
        returnkte - home ()
        while front- is- Elcar ()
                            meve()
    def fill-row() ;
        while front- is clear()
            put - beeper()
                move ()
        put-beeper ()
",186,"from karel.stanfordkarel import *

def main():
        turn_left()
        while front_is_clear():
                    turn_right()
                        fill_row()
                        return_to_home()
                        jump_row()
        turn_right()
        fill_row()
        return_to_home()
        while front_is_clear():
                            move()

    def fill_row():
        while front_is_clear():
            put_beeper()
                move()
        put_beeper()
",128,"from karel . stamfordkarel import *
def mais ():
        turn-left ():
        while frent_ is_ alpar () ;
                    turn-right ()
                        fill-row( )
                        return _to_ home()
                        Jumprow ()
        turn-right ()
        fill-row ()
        returnkte - home ()
        while front- is- Elcar ()
                            meve()
    def fill-row() ;
        while front- is clear()
            put - beeper()
                move ()
        put-beeper ()
",186,"from karel.stanfordkarel import *

def main():
        turn_left()
        while front_is_clear():
                    turn_right()
                        fill_row()
                        return_to_home()
                        jump_row()
        turn_right()
        fill_row()
        return_to_home()
        while front_is_clear():
                            move()

    def fill_row():
        while front_is_clear():
            put_beeper()
                move()
        put_beeper()
",128,"from karel . stamfordkarel import *
def mais ():
        turn-left ():
        while frent_ is_ alpar () ;
                    turn-right ()
                        fill-row( )
                        return _to_ home()
                        Jumprow ()
        turn-right ()
        fill-row ()
        returnkte - home ()
        while front- is- Elcar ()
                            meve()
    def fill-row() ;
        while front- is clear()
            put - beeper()
                move ()
        put-beeper ()
",186,"from karel.stanfordkarel import *

def main():
        turn_left()
        while front_is_clear():
                    turn_right()
                        fill_row()
                        return_to_home()
                        jump_row()
        turn_right()
        fill_row()
        return_to_home()
        while front_is_clear():
                            move()

    def fill_row():
        while front_is_clear():
            put_beeper()
                move()
        put_beeper()
",128,"from karel . stamfordkarel import *
def mais ():
        turn-left ():
        while frent_ is_ alpar () ;
                turn-right ()
                    fill-row( )
                    return _to_ home()
                    Jumprow ()
        turn-right ()
        fill-row ()
        returnkte - home ()
        while front- is- Elcar ()
                        meve()
    def fill-row() ;
        while front- is clear()
            put - beeper()
            move ()
        put-beeper ()
",162,"from karel.stanfordkarel import *

def main():
        turn_left()
        while front_is_clear():
                turn_right()
                    fill_row()
                    return_to_home()
                    jump_row()
        turn_right()
        fill_row()
        return_to_home()
        while front_is_clear():
                        move()

    def fill_row():
        while front_is_clear():
            put_beeper()
            move()
        put_beeper()
",104,"from karel . stamfordkarel import *
def mais ():
        turn-left ():
        while frent_ is_ alpar () ;
            turn-right ()
                fill-row( )
                return _to_ home()
                Jumprow ()
        turn-right ()
        fill-row ()
        returnkte - home ()
        while front- is- Elcar ()
                    meve()
    def fill-row() ;
        while front- is clear()
            put - beeper()
            move ()
        put-beeper ()
",142,"from karel.stanfordkarel import *

def main():
        turn_left()
        while front_is_clear():
            turn_right()
                fill_row()
                return_to_home()
                jump_row()
        turn_right()
        fill_row()
        return_to_home()
        while front_is_clear():
                    move()

    def fill_row():
        while front_is_clear():
            put_beeper()
            move()
        put_beeper()
",84,"from karel . stamfordkarel import *
def mais ():
        turn-left ():
        while frent_ is_ alpar () ;
            turn-right ()
                fill-row( )
                return _to_ home()
                Jumprow ()
        turn-right ()
        fill-row ()
        returnkte - home ()
        while front- is- Elcar ()
                    meve()
    def fill-row() ;
        while front- is clear()
            put - beeper()
            move ()
        put-beeper ()
",142,"from karel.stanfordkarel import *

def main():
        turn_left()
        while front_is_clear():
            turn_right()
                fill_row()
                return_to_home()
                jump_row()
        turn_right()
        fill_row()
        return_to_home()
        while front_is_clear():
                    move()

    def fill_row():
        while front_is_clear():
            put_beeper()
            move()
        put_beeper()
",84,"from karel . stamfordkarel import *
def mais ():
        turn-left ():
        while frent_ is_ alpar () ;
            turn-right ()
                fill-row( )
                return _to_ home()
                Jumprow ()
        turn-right ()
        fill-row ()
        returnkte - home ()
        while front- is- Elcar ()
                    meve()
    def fill-row() ;
        while front- is clear()
            put - beeper()
            move ()
        put-beeper ()
",142,"from karel.stanfordkarel import *

def main():
        turn_left()
        while front_is_clear():
            turn_right()
                fill_row()
                return_to_home()
                jump_row()
        turn_right()
        fill_row()
        return_to_home()
        while front_is_clear():
                    move()

    def fill_row():
        while front_is_clear():
            put_beeper()
            move()
        put_beeper()
",84,"from karel . stamfordkarel import *
def mais ():
        turn-left ():
        while frent_ is_ alpar () ;
            turn-right ()
                fill-row( )
                return _to_ home()
                Jumprow ()
        turn-right ()
        fill-row ()
        returnkte - home ()
        while front- is- Elcar ()
                meve()
    def fill-row() ;
        while front- is clear()
            put - beeper()
            move ()
        put-beeper ()
",138,"from karel.stanfordkarel import *

def main():
        turn_left()
        while front_is_clear():
            turn_right()
                fill_row()
                return_to_home()
                jump_row()
        turn_right()
        fill_row()
        return_to_home()
        while front_is_clear():
                move()

    def fill_row():
        while front_is_clear():
            put_beeper()
            move()
        put_beeper()
",80,"from karel . stamfordkarel import *
def mais ():
        turn-left ():
        while frent_ is_ alpar () ;
                turn-right ()
                    fill-row( )
                    return _to_ home()
                    Jumprow ()
        turn-right ()
        fill-row ()
        returnkte - home ()
        while front- is- Elcar ()
                    meve()
    def fill-row() ;
        while front- is clear()
            put - beeper()
            move ()
        put-beeper ()
",158,"from karel.stanfordkarel import *

def main():
        turn_left()
        while front_is_clear():
                turn_right()
                    fill_row()
                    return_to_home()
                    jump_row()
        turn_right()
        fill_row()
        return_to_home()
        while front_is_clear():
                    move()

    def fill_row():
        while front_is_clear():
            put_beeper()
            move()
        put_beeper()
",100,"from karel . stamfordkarel import *
def mais ():
        turn-left ():
        while frent_ is_ alpar () ;
                turn-right ()
                    fill-row( )
                    return _to_ home()
                    Jumprow ()
        turn-right ()
        fill-row ()
        returnkte - home ()
        while front- is- Elcar ()
                    meve()
    def fill-row() ;
        while front- is clear()
            put - beeper()
            move ()
        put-beeper ()
",158,"from karel.stanfordkarel import *

def main():
        turn_left()
        while front_is_clear():
                turn_right()
                    fill_row()
                    return_to_home()
                    jump_row()
        turn_right()
        fill_row()
        return_to_home()
        while front_is_clear():
                    move()

    def fill_row():
        while front_is_clear():
            put_beeper()
            move()
        put_beeper()
",100,"from karel . stamfordkarel import *
def mais ():
        turn-left ():
        while frent_ is_ alpar () ;
                turn-right ()
                    fill-row( )
                    return _to_ home()
                    Jumprow ()
        turn-right ()
        fill-row ()
        returnkte - home ()
        while front- is- Elcar ()
                    meve()
    def fill-row() ;
        while front- is clear()
            put - beeper()
            move ()
        put-beeper ()
",158,"from karel.stanfordkarel import *

def main():
        turn_left()
        while front_is_clear():
                turn_right()
                    fill_row()
                    return_to_home()
                    jump_row()
        turn_right()
        fill_row()
        return_to_home()
        while front_is_clear():
                    move()

    def fill_row():
        while front_is_clear():
            put_beeper()
            move()
        put_beeper()
",100,"from karel . stamfordkarel import *
def mais ():
        turn-left ():
        while frent_ is_ alpar () ;
            turn-right ()
                fill-row( )
                return _to_ home()
                Jumprow ()
        turn-right ()
        fill-row ()
        returnkte - home ()
        while front- is- Elcar ()
                meve()
    def fill-row() ;
        while front- is clear()
            put - beeper()
            move ()
        put-beeper ()
",138,"from karel.stanfordkarel import *

def main():
        turn_left()
        while front_is_clear():
            turn_right()
                fill_row()
                return_to_home()
                jump_row()
        turn_right()
        fill_row()
        return_to_home()
        while front_is_clear():
                move()

    def fill_row():
        while front_is_clear():
            put_beeper()
            move()
        put_beeper()
",80,"from karel . stamfordkarel import *
def mais ():
        turn-left ():
        while frent_ is_ alpar () ;
            turn-right ()
                fill-row( )
                return _to_ home()
                Jumprow ()
        turn-right ()
        fill-row ()
        returnkte - home ()
        while front- is- Elcar ()
                meve()
    def fill-row() ;
        while front- is clear()
            put - beeper()
            move ()
        put-beeper ()
",138,"from karel.stanfordkarel import *

def main():
        turn_left()
        while front_is_clear():
            turn_right()
                fill_row()
                return_to_home()
                jump_row()
        turn_right()
        fill_row()
        return_to_home()
        while front_is_clear():
                move()

    def fill_row():
        while front_is_clear():
            put_beeper()
            move()
        put_beeper()
",80,"from karel . stamfordkarel import *
def mais ():
        turn-left ():
        while frent_ is_ alpar () ;
            turn-right ()
                fill-row( )
                return _to_ home()
                Jumprow ()
        turn-right ()
        fill-row ()
        returnkte - home ()
        while front- is- Elcar ()
                meve()
    def fill-row() ;
        while front- is clear()
            put - beeper()
            move ()
        put-beeper ()
",138,"from karel.stanfordkarel import *

def main():
        turn_left()
        while front_is_clear():
            turn_right()
                fill_row()
                return_to_home()
                jump_row()
        turn_right()
        fill_row()
        return_to_home()
        while front_is_clear():
                move()

    def fill_row():
        while front_is_clear():
            put_beeper()
            move()
        put_beeper()
",80,"from karel . stamfordkarel import *
def mais ():
        turn-left ():
        while frent_ is_ alpar () ;
            turn-right ()
                fill-row( )
                return _to_ home()
                Jumprow ()
        turn-right ()
        fill-row ()
        returnkte - home ()
        while front- is- Elcar ()
                meve()
    def fill-row() ;
        while front- is clear()
            put - beeper()
            move ()
        put-beeper ()
",138,"from karel.stanfordkarel import *

def main():
        turn_left()
        while front_is_clear():
            turn_right()
                fill_row()
                return_to_home()
                jump_row()
        turn_right()
        fill_row()
        return_to_home()
        while front_is_clear():
                move()

    def fill_row():
        while front_is_clear():
            put_beeper()
            move()
        put_beeper()
",80,"from karel . stamfordkarel import *
def mais ():
        turn-left ():
        while frent_ is_ alpar () ;
            turn-right ()
                fill-row( )
                return _to_ home()
                Jumprow ()
        turn-right ()
        fill-row ()
        returnkte - home ()
        while front- is- Elcar ()
                meve()
    def fill-row() ;
        while front- is clear()
            put - beeper()
            move ()
        put-beeper ()
",138,"from karel.stanfordkarel import *

def main():
        turn_left()
        while front_is_clear():
            turn_right()
                fill_row()
                return_to_home()
                jump_row()
        turn_right()
        fill_row()
        return_to_home()
        while front_is_clear():
                move()

    def fill_row():
        while front_is_clear():
            put_beeper()
            move()
        put_beeper()
",80,"from karel . stamfordkarel import *
def mais ():
        turn-left ():
        while frent_ is_ alpar () ;
            turn-right ()
                fill-row( )
                return _to_ home()
                Jumprow ()
        turn-right ()
        fill-row ()
        returnkte - home ()
        while front- is- Elcar ()
                meve()
    def fill-row() ;
        while front- is clear()
            put - beeper()
            move ()
        put-beeper ()
",138,"from karel.stanfordkarel import *

def main():
        turn_left()
        while front_is_clear():
            turn_right()
                fill_row()
                return_to_home()
                jump_row()
        turn_right()
        fill_row()
        return_to_home()
        while front_is_clear():
                move()

    def fill_row():
        while front_is_clear():
            put_beeper()
            move()
        put_beeper()
",80,"from karel . stamfordkarel import *
def mais ():
        turn-left ():
        while frent_ is_ alpar () ;
            turn-right ()
                fill-row( )
                return _to_ home()
                Jumprow ()
        turn-right ()
        fill-row ()
        returnkte - home ()
        while front- is- Elcar ()
                meve()
    def fill-row() ;
        while front- is clear()
            put - beeper()
            move ()
        put-beeper ()
",138,"from karel.stanfordkarel import *

def main():
        turn_left()
        while front_is_clear():
            turn_right()
                fill_row()
                return_to_home()
                jump_row()
        turn_right()
        fill_row()
        return_to_home()
        while front_is_clear():
                move()

    def fill_row():
        while front_is_clear():
            put_beeper()
            move()
        put_beeper()
",80,"from karel . stamfordkarel import *
def mais ():
        turn-left ():
        while frent_ is_ alpar () ;
            turn-right ()
                fill-row( )
                return _to_ home()
                Jumprow ()
        turn-right ()
        fill-row ()
        returnkte - home ()
        while front- is- Elcar ()
                meve()
    def fill-row() ;
        while front- is clear()
            put - beeper()
            move ()
        put-beeper ()
",138,"from karel.stanfordkarel import *

def main():
        turn_left()
        while front_is_clear():
            turn_right()
                fill_row()
                return_to_home()
                jump_row()
        turn_right()
        fill_row()
        return_to_home()
        while front_is_clear():
                move()

    def fill_row():
        while front_is_clear():
            put_beeper()
            move()
        put_beeper()
",80,"from karel . stamfordkarel import *
def mais ():
        turn-left ():
        while frent_ is_ alpar () ;
            turn-right ()
                fill-row( )
                return _to_ home()
                Jumprow ()
        turn-right ()
        fill-row ()
        returnkte - home ()
        while front- is- Elcar ()
                meve()
    def fill-row() ;
        while front- is clear()
            put - beeper()
            move ()
        put-beeper ()
",138,"from karel.stanfordkarel import *

def main():
        turn_left()
        while front_is_clear():
            turn_right()
                fill_row()
                return_to_home()
                jump_row()
        turn_right()
        fill_row()
        return_to_home()
        while front_is_clear():
                move()

    def fill_row():
        while front_is_clear():
            put_beeper()
            move()
        put_beeper()
",80,"from karel . stamfordkarel import *
def mais ():
        turn-left ():
        while frent_ is_ alpar () ;
            turn-right ()
                fill-row( )
                return _to_ home()
                Jumprow ()
        turn-right ()
        fill-row ()
        returnkte - home ()
        while front- is- Elcar ()
                meve()
    def fill-row() ;
        while front- is clear()
            put - beeper()
            move ()
        put-beeper ()
",138,"from karel.stanfordkarel import *

def main():
        turn_left()
        while front_is_clear():
            turn_right()
                fill_row()
                return_to_home()
                jump_row()
        turn_right()
        fill_row()
        return_to_home()
        while front_is_clear():
                move()

    def fill_row():
        while front_is_clear():
            put_beeper()
            move()
        put_beeper()
",80,"from karel . stamfordkarel import *
def mais ():
        turn-left ():
        while frent_ is_ alpar () ;
            turn-right ()
            fill-row( )
            return _to_ home()
            Jumprow ()
        turn-right ()
        fill-row ()
        returnkte - home ()
        while front- is- Elcar ()
            meve()
    def fill-row() ;
        while front- is clear()
            put - beeper()
            move ()
        put-beeper ()
",122,"from karel.stanfordkarel import *

def main():
        turn_left()
        while front_is_clear():
            turn_right()
            fill_row()
            return_to_home()
            jump_row()
        turn_right()
        fill_row()
        return_to_home()
        while front_is_clear():
            move()

    def fill_row():
        while front_is_clear():
            put_beeper()
            move()
        put_beeper()
",64,"from karel . stamfordkarel import *
def mais ():
        turn-left ():
        while frent_ is_ alpar () ;
            turn-right ()
            fill-row( )
            return _to_ home()
            Jumprow ()
        turn-right ()
        fill-row ()
        returnkte - home ()
        while front- is- Elcar ()
            meve()
    def fill-row() ;
        while front- is clear()
            put - beeper()
            move ()
        put-beeper ()
",122,"from karel.stanfordkarel import *

def main():
        turn_left()
        while front_is_clear():
            turn_right()
            fill_row()
            return_to_home()
            jump_row()
        turn_right()
        fill_row()
        return_to_home()
        while front_is_clear():
            move()

    def fill_row():
        while front_is_clear():
            put_beeper()
            move()
        put_beeper()
",64,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
turn_left()
while front_is_clear():
turn_right()
fill_row()
return_to_home()
jump_row()
turn_right()
fill_row()
return_to_home()
while front_is_clear():
move()

def fill_row():
while front_is_clear():
put_beeper()
move()
put_beeper()
",88,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
    jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",4,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
    jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",4,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
    jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",4,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
    jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",4,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
    jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",4,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
    jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",4,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
turn_left()
while front_is_clear():
turn_right()
fill_row()
return_to_home()
jump_row()
turn_right()
fill_row()
return_to_home()
while front_is_clear():
move()

def fill_row():
while front_is_clear():
put_beeper()
move()
put_beeper()
",88,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
turn_left()
while front_is_clear():
turn_right()
fill_row()
return_to_home()
jump_row()
turn_right()
fill_row()
return_to_home()
while front_is_clear():
move()

def fill_row():
while front_is_clear():
put_beeper()
move()
put_beeper()
",88,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
    jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",4,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
    jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",4,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
    jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",4,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
    jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",4,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
    jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",4,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
    jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",4,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
    jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",4,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
turn_left()
while front_is_clear():
turn_right()
fill_row()
return_to_home()
jump_row()
turn_right()
fill_row()
return_to_home()
while front_is_clear():
move()

def fill_row():
while front_is_clear():
put_beeper()
move()
put_beeper()
",88,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
turn_left()
while front_is_clear():
turn_right()
fill_row()
return_to_home()
jump_row()
turn_right()
fill_row()
return_to_home()
while front_is_clear():
move()

def fill_row():
while front_is_clear():
put_beeper()
move()
put_beeper()
",88,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
    jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",4,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
turn_left()
while front_is_clear():
turn_right()
fill_row()
return_to_home()
jump_row()
turn_right()
fill_row()
return_to_home()
while front_is_clear():
move()

def fill_row():
while front_is_clear():
put_beeper()
move()
put_beeper()
",88,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
    jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",4,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
turn_left()
while front_is_clear():
    turn_right()
    fill_row()
    return_to_home()
    jump_row()
turn_right()
fill_row()
return_to_home()
while front_is_clear():
    move()

def fill_row():
while front_is_clear():
    put_beeper()
    move()
put_beeper()
",60,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
    jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",4,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
    jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",4,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0,"from karel . stamfordkarel import *
def mais ():
    turn-left ():
    while frent_ is_ alpar () ;
        turn-right ()
        fill-row( )
        return _to_ home()
        Jumprow ()
    turn-right ()
    fill-row ()
    returnkte - home ()
    while front- is- Elcar ()
        meve()
def fill-row() ;
    while front- is clear()
        put - beeper()
        move ()
    put-beeper ()
",59,"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0,"from karel . stamfordkarel import *
def mais ():
turn-left ():
while frent_ is_ alpar () ;
    turn-right ()
    fill-row( )
    return _to_ home()
    Jumprow ()
turn-right ()
fill-row ()
returnkte - home ()
while front- is- Elcar ()
    meve()
def fill-row() ;
while front- is clear()
    put - beeper()
    move ()
put-beeper ()
",117,"from karel.stanfordkarel import *

def main():
turn_left()
while front_is_clear():
    turn_right()
    fill_row()
    return_to_home()
    jump_row()
turn_right()
fill_row()
return_to_home()
while front_is_clear():
    move()

def fill_row():
while front_is_clear():
    put_beeper()
    move()
put_beeper()
",60,"from karel . stamfordkarel import *
def mais ():
turn-left ():
while frent_ is_ alpar () ;
    turn-right ()
    fill-row( )
    return _to_ home()
    Jumprow ()
turn-right ()
fill-row ()
returnkte - home ()
while front- is- Elcar ()
    meve()
def fill-row() ;
while front- is clear()
    put - beeper()
    move ()
put-beeper ()
",117,"from karel.stanfordkarel import *

def main():
turn_left()
while front_is_clear():
    turn_right()
    fill_row()
    return_to_home()
    jump_row()
turn_right()
fill_row()
return_to_home()
while front_is_clear():
    move()

def fill_row():
while front_is_clear():
    put_beeper()
    move()
put_beeper()
",60,"from karel . stamfordkarel import *
def mais ():
turn-left ():
while frent_ is_ alpar () ;
    turn-right ()
    fill-row( )
    return _to_ home()
    Jumprow ()
turn-right ()
fill-row ()
returnkte - home ()
while front- is- Elcar ()
    meve()
def fill-row() ;
while front- is clear()
    put - beeper()
    move ()
put-beeper ()
",117,"from karel.stanfordkarel import *

def main():
turn_left()
while front_is_clear():
    turn_right()
    fill_row()
    return_to_home()
    jump_row()
turn_right()
fill_row()
return_to_home()
while front_is_clear():
    move()

def fill_row():
while front_is_clear():
    put_beeper()
    move()
put_beeper()
",60,"from karel . stamfordkarel import *
def mais ():
turn-left ():
while frent_ is_ alpar () ;
    turn-right ()
    fill-row( )
    return _to_ home()
    Jumprow ()
turn-right ()
fill-row ()
returnkte - home ()
while front- is- Elcar ()
    meve()
def fill-row() ;
while front- is clear()
    put - beeper()
    move ()
put-beeper ()
",117,"from karel.stanfordkarel import *

def main():
turn_left()
while front_is_clear():
    turn_right()
    fill_row()
    return_to_home()
    jump_row()
turn_right()
fill_row()
return_to_home()
while front_is_clear():
    move()

def fill_row():
while front_is_clear():
    put_beeper()
    move()
put_beeper()
",60,"from karel . stamfordkarel import *
def mais ():
turn-left ():
while frent_ is_ alpar () ;
    turn-right ()
    fill-row( )
    return _to_ home()
    Jumprow ()
turn-right ()
fill-row ()
returnkte - home ()
while front- is- Elcar ()
    meve()
def fill-row() ;
while front- is clear()
    put - beeper()
    move ()
put-beeper ()
",117,"from karel.stanfordkarel import *

def main():
turn_left()
while front_is_clear():
    turn_right()
    fill_row()
    return_to_home()
    jump_row()
turn_right()
fill_row()
return_to_home()
while front_is_clear():
    move()

def fill_row():
while front_is_clear():
    put_beeper()
    move()
put_beeper()
",60,"from karel . stamfordkarel import *
def mais ():
turn-left ():
while frent_ is_ alpar () ;
    turn-right ()
    fill-row( )
    return _to_ home()
    Jumprow ()
turn-right ()
fill-row ()
returnkte - home ()
while front- is- Elcar ()
    meve()
def fill-row() ;
while front- is clear()
    put - beeper()
    move ()
put-beeper ()
",117,"from karel.stanfordkarel import *

def main():
turn_left()
while front_is_clear():
    turn_right()
    fill_row()
    return_to_home()
    jump_row()
turn_right()
fill_row()
return_to_home()
while front_is_clear():
    move()

def fill_row():
while front_is_clear():
    put_beeper()
    move()
put_beeper()
",60,"from karel . stamfordkarel import *
def mais ():
turn-left ():
while frent_ is_ alpar () ;
    turn-right ()
    fill-row( )
    return _to_ home()
    Jumprow ()
turn-right ()
fill-row ()
returnkte - home ()
while front- is- Elcar ()
    meve()
def fill-row() ;
while front- is clear()
    put - beeper()
    move ()
put-beeper ()
",117,"from karel.stanfordkarel import *

def main():
turn_left()
while front_is_clear():
    turn_right()
    fill_row()
    return_to_home()
    jump_row()
turn_right()
fill_row()
return_to_home()
while front_is_clear():
    move()

def fill_row():
while front_is_clear():
    put_beeper()
    move()
put_beeper()
",60,"from karel . stamfordkarel import *
def mais ():
turn-left ():
while frent_ is_ alpar () ;
    turn-right ()
    fill-row( )
    return _to_ home()
    Jumprow ()
turn-right ()
fill-row ()
returnkte - home ()
while front- is- Elcar ()
    meve()
def fill-row() ;
while front- is clear()
    put - beeper()
    move ()
put-beeper ()
",117,"from karel.stanfordkarel import *

def main():
turn_left()
while front_is_clear():
    turn_right()
    fill_row()
    return_to_home()
    jump_row()
turn_right()
fill_row()
return_to_home()
while front_is_clear():
    move()

def fill_row():
while front_is_clear():
    put_beeper()
    move()
put_beeper()
",60,"from karel . stamfordkarel import *
def mais ():
turn-left ():
while frent_ is_ alpar () ;
    turn-right ()
    fill-row( )
    return _to_ home()
    Jumprow ()
turn-right ()
fill-row ()
returnkte - home ()
while front- is- Elcar ()
    meve()
def fill-row() ;
while front- is clear()
    put - beeper()
    move ()
put-beeper ()
",117,"from karel.stanfordkarel import *

def main():
turn_left()
while front_is_clear():
    turn_right()
    fill_row()
    return_to_home()
    jump_row()
turn_right()
fill_row()
return_to_home()
while front_is_clear():
    move()

def fill_row():
while front_is_clear():
    put_beeper()
    move()
put_beeper()
",60,"from karel . stamfordkarel import *
def mais ():
turn-left ():
while frent_ is_ alpar () ;
    turn-right ()
    fill-row( )
    return _to_ home()
    Jumprow ()
turn-right ()
fill-row ()
returnkte - home ()
while front- is- Elcar ()
    meve()
def fill-row() ;
while front- is clear()
    put - beeper()
    move ()
put-beeper ()
",117,"from karel.stanfordkarel import *

def main():
turn_left()
while front_is_clear():
    turn_right()
    fill_row()
    return_to_home()
    jump_row()
turn_right()
fill_row()
return_to_home()
while front_is_clear():
    move()

def fill_row():
while front_is_clear():
    put_beeper()
    move()
put_beeper()
",60,"from karel . stamfordkarel import *
def mais ():
turn-left ():
while frent_ is_ alpar () ;
    turn-right ()
    fill-row( )
    return _to_ home()
    Jumprow ()
turn-right ()
fill-row ()
returnkte - home ()
while front- is- Elcar ()
    meve()
def fill-row() ;
while front- is clear()
    put - beeper()
    move ()
put-beeper ()
",117,"from karel.stanfordkarel import *

def main():
turn_left()
while front_is_clear():
    turn_right()
    fill_row()
    return_to_home()
    jump_row()
turn_right()
fill_row()
return_to_home()
while front_is_clear():
    move()

def fill_row():
while front_is_clear():
    put_beeper()
    move()
put_beeper()
",60,"from karel . stamfordkarel import *
def mais ():
turn-left ():
while frent_ is_ alpar () ;
    turn-right ()
    fill-row( )
    return _to_ home()
    Jumprow ()
turn-right ()
fill-row ()
returnkte - home ()
while front- is- Elcar ()
    meve()
def fill-row() ;
while front- is clear()
    put - beeper()
    move ()
put-beeper ()
",117,"from karel.stanfordkarel import *

def main():
turn_left()
while front_is_clear():
    turn_right()
    fill_row()
    return_to_home()
    jump_row()
turn_right()
fill_row()
return_to_home()
while front_is_clear():
    move()

def fill_row():
while front_is_clear():
    put_beeper()
    move()
put_beeper()
",60,"from karel . stamfordkarel import *
def mais ():
turn-left ():
while frent_ is_ alpar () ;
    turn-right ()
    fill-row( )
    return _to_ home()
    Jumprow ()
turn-right ()
fill-row ()
returnkte - home ()
while front- is- Elcar ()
    meve()
def fill-row() ;
while front- is clear()
    put - beeper()
    move ()
put-beeper ()
",117,"from karel.stanfordkarel import *

def main():
turn_left()
while front_is_clear():
    turn_right()
    fill_row()
    return_to_home()
    jump_row()
turn_right()
fill_row()
return_to_home()
while front_is_clear():
    move()

def fill_row():
while front_is_clear():
    put_beeper()
    move()
put_beeper()
",60,"from karel . stamfordkarel import *
def mais ():
turn-left ():
while frent_ is_ alpar () ;
    turn-right ()
    fill-row( )
    return _to_ home()
    Jumprow ()
turn-right ()
fill-row ()
returnkte - home ()
while front- is- Elcar ()
    meve()
def fill-row() ;
while front- is clear()
    put - beeper()
    move ()
put-beeper ()
",117,"from karel.stanfordkarel import *

def main():
turn_left()
while front_is_clear():
    turn_right()
    fill_row()
    return_to_home()
    jump_row()
turn_right()
fill_row()
return_to_home()
while front_is_clear():
    move()

def fill_row():
while front_is_clear():
    put_beeper()
    move()
put_beeper()
",60,"from karel . stamfordkarel import *
def mais ():
turn-left ():
while frent_ is_ alpar () ;
    turn-right ()
    fill-row( )
    return _to_ home()
    Jumprow ()
turn-right ()
fill-row ()
returnkte - home ()
while front- is- Elcar ()
    meve()
def fill-row() ;
while front- is clear()
    put - beeper()
    move ()
put-beeper ()
",117,"from karel.stanfordkarel import *

def main():
turn_left()
while front_is_clear():
    turn_right()
    fill_row()
    return_to_home()
    jump_row()
turn_right()
fill_row()
return_to_home()
while front_is_clear():
    move()

def fill_row():
while front_is_clear():
    put_beeper()
    move()
put_beeper()
",60,"from karel . stamfordkarel import *
def mais ():
turn-left ():
while frent_ is_ alpar () ;
    turn-right ()
    fill-row( )
    return _to_ home()
    Jumprow ()
turn-right ()
fill-row ()
returnkte - home ()
while front- is- Elcar ()
    meve()
def fill-row() ;
while front- is clear()
    put - beeper()
    move ()
put-beeper ()
",117,"from karel.stanfordkarel import *

def main():
turn_left()
while front_is_clear():
    turn_right()
    fill_row()
    return_to_home()
    jump_row()
turn_right()
fill_row()
return_to_home()
while front_is_clear():
    move()

def fill_row():
while front_is_clear():
    put_beeper()
    move()
put_beeper()
",60,"from karel . stamfordkarel import *
def mais ():
turn-left ():
while frent_ is_ alpar () ;
    turn-right ()
    fill-row( )
    return _to_ home()
    Jumprow ()
turn-right ()
fill-row ()
returnkte - home ()
while front- is- Elcar ()
    meve()
def fill-row() ;
while front- is clear()
    put - beeper()
    move ()
put-beeper ()
",117,"from karel.stanfordkarel import *

def main():
turn_left()
while front_is_clear():
    turn_right()
    fill_row()
    return_to_home()
    jump_row()
turn_right()
fill_row()
return_to_home()
while front_is_clear():
    move()

def fill_row():
while front_is_clear():
    put_beeper()
    move()
put_beeper()
",60,"from karel . stamfordkarel import *
def mais ():
turn-left ():
while frent_ is_ alpar () ;
    turn-right ()
    fill-row( )
    return _to_ home()
    Jumprow ()
turn-right ()
fill-row ()
returnkte - home ()
while front- is- Elcar ()
    meve()
def fill-row() ;
while front- is clear()
    put - beeper()
    move ()
put-beeper ()
",117,"from karel.stanfordkarel import *

def main():
turn_left()
while front_is_clear():
    turn_right()
    fill_row()
    return_to_home()
    jump_row()
turn_right()
fill_row()
return_to_home()
while front_is_clear():
    move()

def fill_row():
while front_is_clear():
    put_beeper()
    move()
put_beeper()
",60,"from karel . stamfordkarel import *
def mais ():
turn-left ():
while frent_ is_ alpar () ;
    turn-right ()
    fill-row( )
    return _to_ home()
    Jumprow ()
turn-right ()
fill-row ()
returnkte - home ()
while front- is- Elcar ()
    meve()
def fill-row() ;
while front- is clear()
    put - beeper()
    move ()
put-beeper ()
",117,"from karel.stanfordkarel import *

def main():
turn_left()
while front_is_clear():
    turn_right()
    fill_row()
    return_to_home()
    jump_row()
turn_right()
fill_row()
return_to_home()
while front_is_clear():
    move()

def fill_row():
while front_is_clear():
    put_beeper()
    move()
put_beeper()
",60,"from karel . stamfordkarel import *
def mais ():
turn-left ():
while frent_ is_ alpar () ;
    turn-right ()
    fill-row( )
    return _to_ home()
    Jumprow ()
turn-right ()
fill-row ()
returnkte - home ()
while front- is- Elcar ()
    meve()
def fill-row() ;
while front- is clear()
    put - beeper()
    move ()
put-beeper ()
",117,"from karel.stanfordkarel import *

def main():
turn_left()
while front_is_clear():
    turn_right()
    fill_row()
    return_to_home()
    jump_row()
turn_right()
fill_row()
return_to_home()
while front_is_clear():
    move()

def fill_row():
while front_is_clear():
    put_beeper()
    move()
put_beeper()
",60,"from karel . stamfordkarel import *
def mais ():
turn-left ():
while frent_ is_ alpar () ;
    turn-right ()
    fill-row( )
    return _to_ home()
    Jumprow ()
turn-right ()
fill-row ()
returnkte - home ()
while front- is- Elcar ()
    meve()
def fill-row() ;
while front- is clear()
    put - beeper()
    move ()
put-beeper ()
",117,"from karel.stanfordkarel import *

def main():
turn_left()
while front_is_clear():
    turn_right()
    fill_row()
    return_to_home()
    jump_row()
turn_right()
fill_row()
return_to_home()
while front_is_clear():
    move()

def fill_row():
while front_is_clear():
    put_beeper()
    move()
put_beeper()
",60
