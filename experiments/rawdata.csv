Ground Truth,GCV,ED GCV,AWS,ED AWS,Azure,ED Azure,MP,ED MP
"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
","int (input (""Enter a number: "")
num =
Ans =)
while num > 1:
Ans * = num
num - =|
1
return Ans",29,"num = int input C ""Enter a number: 11)
Ans = )
while num > / :
Ans * = num
mm - = /
return Ans",23,"num = int (input (""Enter a number: ""
Ans =1
while num > 1 :
Ans * = num
num -= 1
return Ans",16,"num = int (input (""Enter a number: "")
\[
\text { Ans = } 1
\]
while num \( >1 \) :
Ans \( *= \) num
mum - \( =1 \)
retirn Ans",45
"from karel.stanfordkarel import *
# This program makes Karel pick up a beeper and go back into her house.

def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()
# This function moves Karel to the beeper.

def move_beeper():
    for i in range(2):
        move()
    turn_right()
    move()
    turn_left()
    move()
# This function return to Karel's starting point.

def go_back():
    for i in range(2):
        turn_left()
    for i in range(3):
        move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left

if __name__ == ""__main__"":
    main()
","from Karel. stanfordkarel import *
#This
program
a beeper and
def main ():
if
Karel pick
up
back into her house,
#Move to the beeper.
makes
go
move beeper ()
#Pick the beeper up.
beeper ()
pick
#Return to Karel's starting point.
go-back ()
#This function moves Karel to the beeper.
def move-beeper ():
for i in
(2):
range
move()
turn right()
move()
turn left()
move()
# This function return to Kard's starting
def go-back();
for ?. in range
turn-left()
for i
name
main ()
move()
turn_right()
move (f
turn-right()
def turn_right()
for i in range (3) =
turn-
left
rang
e (3);
==
main____'",257,"from Karel. stanfor dkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main () :
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick - - beeper
# Return to Karel's starting point.
go back ( )
# This function moves Karel to the beeper.
def move - -beeper ( ) :
for i in range (2) :
move ()
torn right ()
move ( )
turn left( )
movel )
# this function return to Karel's starting poin
def go-back() ; for i. in range (2) :
turn- left ()
for i in rang e (3) :
move()
turn-right
()
turn move() - right ()
def turn right ():
for i in range (3)
turn - left
if
name
main
main ()",195,"from Karel. stanfordkarel import *
# This program makes Kavel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick- beeper ()
# Return to Karel's starting point.
go - back ()
# This function moves karel to the beeper.
def move-beeper ():
for i in range (2):
move ()
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back ();
For ?. in range (2):
turn-left ()
for i in range (3):
move()
turn right ()
move (),
turn-right ()
def turn-right () ?
for i in range (3):
turn-left
if -- name == ' -- main_';
main ()",177,"from Karel.stanfordkarel import * \#This program makes Karel pick up a beeper and go back into her house. def main ():
\#Move to the beeper. move_beeper () \# Pick the beeper up. pick - beeper () \# Return to Karel's starting point. go-back ()
\#This function moves Karel to the beeper. def move-beeper ():
for \( i \) in range (2):
move ()
turn right ()
move ()
turn leftc)
movec)
\# this function refurn to Karel's starting poin def go-back () ;
for i, in range (2):
for \( i \) in range \( (3) \) :
move ()
\[
\text { move ( } \text { tor }^{2} \mathrm{righ}(\mathrm{C})
\]
def turn-right () ?
for \( i \) in range (3):
turn-left
\[
\text { if } \operatorname{mame}_{\operatorname{man}()}==1 \ldots \text { main } \ldots
\]
\( m \operatorname{ain}() \)",306
"def main():
    # input
    my_word = input(""Enter the original word: "")
    # function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is"" + "" "" + '""' + reversed_word + '""')
# Helper function

def reverse(word):
    # reversed_word
    new_word = """"
    # char by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word

if __name__ == ""__main__"":
    main()
","def main ()
#imput
my _ word = imput(""Entlo- The original wood: 7)
#Function calling
reversed word = reverse (my-word)
Print ('The
reversed wood is 1+`
#Helper FunctTION
def
Lif
reverse (woord):
#reversed -won-d
mew-won-d=""/
☆ ster by chan-
for chan- im word:
new-woo-d
return
return new_wond
mame
main()
A/
+revered_word +
=char + new-wood",210,"def main () :
# imput
my wond = inpuTC ""Enter THe original wond:
7)
#
Function calling
reversed_word = reverse (my - -word )
print C' the reversed Wood is + , + "" , + reversd-wordt 1/2)
# Helpen Function
def reverse (wond) :
# revenued -wond
new -wohd - = "" ""
# stert by chan-
for chan- in word :
new-word = Char + new-word
# retun-m
retuntm new_wond
if
name == main :
mainc)",150,"def main ( ) :
Limput
my _ word = input( Enten- The original word : 7
#Function calling
reversed- word = reverse (my-word )
Print ( the reversed word is (+) ""+""""+reversed-wordt""}
# Helpen- Function
def sevense
be (word) :
# reversed - word
mew-word = """"
A chen by chan-
For- chan- in word:
new-word = Char + new-word
# return
return new_word
name-
main 1 :
main ()",149,"defmaim ():
\&imput
\( m y \)-wond = impuT (""EnTen- THe onigimal wond: "")
Function calling
\# Helpen-Fumction
\[
\begin{array}{l}
\text { def nevense (won-d): } \\
\text { * revensed -won-d } \\
\text { mew-won-d = ""1 } \\
\text { X stent by chan- } \\
\text { for chan- im vond: } \\
\text { mew-won-d = chan }+ \text { mew-wond } \\
\text { * } r \text {-etun-m } \\
\text { nietuntm new-won-d } \\
\end{array}
\]",298
"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial for "" + str(input_nmb) + "" is "" + str(result))
","impur-number =
int(impur (""Enter number'))
val = inpur-number
result isput_number
while (val > 1):
Val - 1
result ☆ val
+
Print ('factorial for 't shy (input-node]
+ srr (result))
val
[₁
-result",80,"impur-number =
inr(inpur ('Enter number')
val = inpur-number
result input-number
while (val > 1) :
[
val =
Val - 1
result = result it val
Print ('factorial fir't shr(imput-nula)
Srr (result))",59,"inpur_number =
int(impur (""Enter number""
Val = inpur-number
result = input-number
While (val>1):
val =
val -1
result = result & val
print ('factorial f& + sur(input-node)
+ spr (result))",50,\( \begin{array}{l}\text { inpur-number = } \\ \text { inr(inpur('Entar number')) } \\ \text { val }=\text { impur-number } \\ \text { resalt - roppur-number } \\ \text { while (val }>1 \text { ): } \\ {\left[\begin{array}{c}\text { val }= \\ \text { result }=\text { result }-1 \\ \text { val }\end{array}\right.} \\ \text { pront ('factobial for' + shr(impat-nob) } \\ +\operatorname{srr}(\text { result })) \\\end{array} \),273
"def main():
    num = input(""input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
","def main ():
num = input (""imput :"")
sum
=
O
for nin num =
sum t
print (sum)
=
int (n)",49,"def main () :
num = input (""Input: "")
sum = 0
for n in num i
sum + = int (n)
print (sum)",33,"def main () :
num = input (""Input : "")
sum = 0
for n in num :
sum + = int (n)
print (sum)",34,"def \( \operatorname{main}(C) \) :
\[
\begin{array}{l}
\text { num }=\text { input (""input: "") } \\
\text { sum }=0
\end{array}
\]
for \( n \) in num:
\[
\operatorname{sum} t=\operatorname{int}(n)
\]
print (sum)",132
"def main():
    num = input(""enter the number you want to add"")
    sum = 0
    for i in str(num):
        sum = sum + int(i)
    print(""sum of the value you entered is"", sum)
","def main (s.
()!
61508x08 09
0818 TU O sloj toč
num= Impot (""enter the number you want to add)
поше
Inpri
som = 0 101
zgnivoe nuovesimixam
=0
(AD) tizoged to stopilitie nod ovoseido gnieod
aliotab ort eromeH ab10001 100 ot ti of no blert ezabelą - moosoo ucy to noilomitnoo ei tohol zid
for i in str(num): com
35100 suzel
8181882405
Sum=somt int (i)
edmult inucA
telti tuossA
""mis
Print (""sum of the value you entered is, son)
HILOM
00.000,82
log
alpä yliutoM
noitq Inomseudaid 12915ml
ASOS SS VOM
noitosilofigo inayo?
LF1",375,"SINOE
808
09
def main(s)
num= Imput (""enter the number you want to odd"")
UOV
Sum = 0
estimixom
(I)
tizoqeC
to
stooilities
@dno8
covocaiC
o
UOV
Andri
alinteb
310
enelt
ab10007
no
blort
mov
to
for i in str(mum);ass YDM
hedmuff
Sum-Sumt int (i)
reltiT
00.000,E8
Print (""sum of the Value you entered is, blan sum)
ASOS SS VDM
virutoM
noitosilation
;hoita
LA",227,"def main () .
08168 TU
11
num = input (""enter the number you want to add )
Som=0
zpnivo
1ovoseidl o prieoorla
hotel
heH
ab
ot ti of no blerl gabelq
for è in str (num) :
Vi inucoDA
Sum = Sum+ int (i)
raltil touo >A
Print (""sum of the value you entered in, som)
00.000
.1
noitosil
noitgo Inemoanu
LFT",154,"def main () :
num = Imput (""enter the number youcust to add"")
\[
\text { sum }=0
\]
for i in Mtr(num):
\[
\text { sum }=\operatorname{sum}+\operatorname{int}(i)
\]
Print (""sum or the valee yor entered is"", sum)",79
"user_input = input(""Write your string here: "")
upper = user_input.upper()
print(upper)
","input = imput ( ""write your string
user_ input. upper (1
user_
upper = user_ input
print (upper)
here: "")",50,"user_input = input(""write your string here:
1)
upper = user_input. upper(1
print (upper)",7,"user-input = input(""write your string here:
11
Upper = user_input. upper()
print (upper)",9,"user-input = imput (""write your string here: "") upper \( = \) user input upper ( ) print (upper)",18
"from karel.stanfordkarel import *
""""""
Karel should fill the whole world with beepers.
""""""

def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
","*
from Karel, starfordkarel import
han
kanel should fill the world with beepers.
1100
def main ():
#decomposition using a
function
#each associated
while left_ is_clear():
fill_one_row()
return_to_row_start()
activity
паме
for
move_up()
#rewrite code after white loop to overcome
# fencepost bug
one-how ()
fill_",121,"from karel. stanfordkarel import
will
karel should fill the world with beepers.
1110
def main() :
# decomposition using a function name for
# each associated activity
while left_is-clean
retur_to_row- start()
fill_one-row()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill - one - -row()",105,"from Karel. stanfordkarel import *
hun
Karel should fill the world with keepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()",79,"from karel.stayfordkarel inport
IIII""
karel should fill the world with beepers.
""u u
\( \operatorname{def} \operatorname{main}() \) :
\# decomposition using a function rave for \# each associated activity while left-is_clear ():
fill-ore-row()
retur _to _ row_start \( ( \) )
nove_up ()
\# rewirite code after white loop to overcone \# fencepost bug
fill_one-row()",118
"from karel.stanfordkarel import *

def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()

def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    for i in range(2):
        turn_left()

if __name__ == ""__main__"":
    main()
","if
from karel.stanfordkarel import*
def main ()
move()
move()
turn_right()
move()
turn_left()
move()
-
pick-beeper()
return-home()
def return home()
turn-around()
move()
turn_right()
move ()
turn_left()
movel)
move()
turn_around ()
def turn_right()
for i in range (3):
turn-left()
def turn around ()
for i in range (2):
turn_left()
name.
main()
^_main_",144,"from karel.stamfordkaral import
def main()
move()
move()
turn-right(
move()
turn-left()
move()
pick. beeper()
return-home()
def return_home()
t#urn_around()
move()
turn_right(?
move ()
turn- left()
movel)
move()
turn_around()
def turn-right()
for i in range (3):
turn- left()
def turn. around ()
for i in range (2):
turn-left()
if name - main' :
mainl",146,"from karel. stanfordkarel import*
det main ()
move()
move()
turn-right ()
move()
turn-left()
move()
pick-beeper()
return-home()
def return_home()
turn-around()
move()
turn-right ()
move ()
turn-left ()
move()
move()
turn-around()
det turn-right()
for i in range (3):
turn-left ()
def turn- around()
for i in range (2):
turn-left ()
if
name
== '_main ' :
main()",144,"from karel. stanfordkarel import *
def main ()
move ()
move()
turn-right ()
move ()
turn-leff()
move ()
pick-beeper ()
return-home()
def return_home()
trurn_around()
move ()
turn_right()
move ()
turn_left ()
movel)
move ()
turn_around ()
def turn-right ()
for \( i \) in range (3):
turn-left ()
def turn around()
for \( i \) in range (2):
turn-left \( ( \) )
if \( \operatorname{mame}_{-\operatorname{main}()}== \) __main', :",193
"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string: "")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)

if __name__ == ""__main__"":
    main()
","def main ():
rauel caunl=0
vawels = ['a', 'e', 'i', '0', 'u']
""input-string = ""input (""Enter the string:"")
impret string = ""impret_string= lawer ()
for chaor in `imput string:
for vauvel in vamels:
if char = = vowel:
vauvel_cament + = 1
point (vowel count)
`__main_
y__name__ =
main ()
INN
':",148,"dy main ():
vawel_count==0
vawels ['a' 'e' ii, 'o', 'u' ]
input- string= input (""Enter the striegn""."")
input string. lower()
for char in input string:
for vawel 'en vawels:
if char== vowel:
valuel-calest += 1
point (newel count)
if name main__':
main()",146,"de main () :
vowel-count=0
vowels= ['à','e', 'i', 'o','u']
input_string = input (""Enter the string:"")
input string = input_string . lower ()
for char in input string:
for vowel in vowels :
if char == vawel:
vowel-count +=1
print (nouvel count)
if _name_ = = '_main _- ':
main ()",115,"de main ():
vouel caunt \( =0 \)
input_string = input (""Enter the string:"")
input_string = inpet_string. lawer()
for choor in input string:
for vauel 'en vauch:
if char = = vouel:
valuel-caunt \( +=1 \)
print (veuel caunt)
\[
\begin{array}{l}
\text { if _-name__ }==\text { '_ main_- } \\
\operatorname{main}() \\
\end{array}
\]",210
"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])
","def main ():
string = str (input ('Enter string: '))
for i in range
print (string[i])
((len(string)-1),-1,-1):
لك
TO
AYS",60,"our
priud
- "") abuse u! ! way
(5, : bureys capul, ) produc) eys = burays
:
()unow top",104,"det
main ():
string = str (input ('Enter string: '))
for i in range ((len (string)-1), - 1 ,- 1).
print (string [i])",34,"def \( \operatorname{main}( \) ):
\[
\text { string }=\operatorname{str}(\text { input ('Enter string: IJ) }
\]
for \( i \) in range \( (( \) len(string \( )-1),-1,-1) \) : print (string \( [i] \) )",102
"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It check every element in list(sequence) --
for i in seq:
    # It decides whether an element from sequence is even ---
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list(seq_even)
print(seq_even)
","seq - [1, 2, 3, 4, 5, 6, 7, 8, 9]
seg - even = []
#It checks every element in dist (sequence)--
for i in seq:
#it decides whether an element from sequence is even ---
if i % 2 == 0:
seq-even. append(i) #appends even i in empty list (seq-even)
print (seq-even)",40,"seq = [1, 2, 3, 4, 5 , 6, 7, 8, ]
seg even = [ ]
# It checks every element in list (sequence)
for i in seq:
# it decides whether an element from sequence is even
if i % 2 == O:
seq-even. append (i) # appends even i in empty list (seq-even)
print (seq-even)",44,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9]
Seg-even=[]
# It checks every element in list (sequence) - --
for i in seg:
# it decides whether an element from sequence is even --.
if i % 2 = = 0:
seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)",46,"\[
\begin{array}{l}
\text { seq }=[1,2,3,4,5,6,7,8,9] \\
\text { seq-even }=[]
\end{array}
\]
\# It checks every element in dist(sequence.).for \( i \) in seq:
\# it decides whether an clement from sequence is even -.. if \( i \% 2==0 \) :
seq-even. append ( \( i \) ) \# appends even \( i \) in empty list (seq-even) print (seq-even)",127
"from graphics import Canvas
CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01

def main:
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    while TRUE
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if mouse_x >= 0 and mouse_x <= CANVAS_WIDTH and mouse_y >=0 and mouse_y <= CANVAS_HEIGHT
","from
FROM GRAPHICS IMPORT CANVAS
CANVAS_WIDTH = 300
CANVAS-HEIGHT = 300
CIRCLE_SIZE =
DELAY = 0,01
= 20
DEF MAIN:
CANVAS = CANVAS ( CANVAS WIDTH, CANVAS HEIGHT
WHILE TRUE
MOVSE_X = CANVAS. GET_MOUSE_x()
MOUSE-Y = CANVAS. GET MOUSE_Y()
TE
1
IF MOUSE X >= 0 AND MOUSE X E CANVAS_WIDTH
AND MOUSELY TO AND MOUSE_YE CANVAS. HEIGH",203,"FROM GRAPHICS IMPORT CANVAS
CANVAS_WIDTH 11 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0,01
DEF MAIN :
CANVAS = CANVAS(CANVAS WIDTH, CANVAS HEC 641)
WHILE TRUE
MOVSE -X = CANVAS. 6ET MOUSE x()
MOV. SE- - Y = CANVAS. GET MOUSE ( ) )
If MOUSE_ x > = U AND MOUSE x t CANUAS_WIDTH
AND NOUSE. -Y >=0 AND MOUSE_YE CANUVAS.HEIGH",199,"FROM GRAPHICS IMPORT CANVAS
CANVAS_WIDTH = 300
CANVAS_ HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0,01
DEF MAIN :
CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH)
WHILE TRUE
MOUSE_ X = CANVAS . GET_MOUSE _ X ()
MOUSE- Y = CANVAS . GET MOUSE_ Y ( )
IF MOUSE XT =U AND MOUSE X E CANVAS_WIDTH
AND MOUSELY SEO AND MOUSE-TE CANVAS HEIGH",205,"FRIM GRAPHICS I MPORT CANVAS
\[
\begin{array}{l}
\text { CANVAS_WIDTH }=300 \\
\text { CANVAS_HEl6HT }=300 \\
\text { CIRCLE_SIZE }=20 \\
\text { DELAY = } 0,01
\end{array}
\]
DEF MAIN :
canvas = Canvas ( canvar_ wi DFH, canvas Hec b HT)
WHILE TRUE
\[
\begin{array}{l}
\text { MOVSE-X = CONVAS. GET_MOUSE_X() } \\
\text { MOVSE-Y = CANVAS. GET MOUSE_Y () }
\end{array}
\]
If MOUSE_X \( X=0 \) AND MOUSE_X \( E \) CANUNS_WIOT4 AND NOUSE_Y \( T=0 \) AND MOUSE_YE CH, USS. HEIG",321
"# 1 karel Problem - karel Home
from karel.stanfordkarel import *
# This program defines a main function which should make Karel
# move to the beeper, pick it up and return home.

def main():
    get_out()
    pick_food()
    get_back_home()
# pre : karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper

def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()
# post: karel facing west, at the position of beeper

def pick_food():
    pick_beeper()
    turn_around()
# post: karel facing east, at the corner of starting position

def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()

def turn_right():
    for i in range(3):
        turn_left()

def turn_around():
    turn_left()
    turn_left()

if __name__ == ""__main__"":
    main()
","#1 Karel Problem - Karel home
from Kard Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it and return home.
up
def main ():
GRE_ONE ()
pick-food ()
get back home u
#pre: Karel facing eask, at the corner of starting position.
# posk: Karel facing east, outside the home, at the position of beeper
def get out ():
turn_right()
Move (
turn_left()
Move ()
Move ()
move()
# post
· Karel facing west, at
def pick-food ():
pick beeper ()
turn around ()
#post: Karel facing east, at the corner of starting position
def get back home ():
move ()
Move ()
move()
turn_right()
move ()
turn right (1
def turn right ():
for i in range (3)
turn_left()
def turn around ():
turn_left()
zurn_left()
the position of beeper
if_name__ == '__main_ ' :
main ()",229,"# 1 karel Problem - Karel home
from Karel stanfordkarel import
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main ():
get-one(?
pick_food ()
get_back home ()
# pre : Karel facing east, at Line corner of starting position
# post ! karel facing east, outside the home, at the position of beeper
def get out ()
turn_ right
move ()
turn left ()
move ()
move
move
# post Karel facing west at the position of beeper
10°M
def pick-food () :
beeper ()
turn_ around()
# post: Karel facing east, at the corner of starting position
def get- back home () :
move ()
move
move ()
turn_right ( )
move ()
turn
right ()
def turn right ( )
for i in range (3) :
turn_left
def turn_ around () :
turn_ left ()
turn_ left ()
if name- == '-main-':
main ()",202,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import*
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre: Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ()
move ()
turn_ left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn-around ( )
# post: Karel facing east, at the corner of starting position
def get_back_home () :
move ()
Move ()
move ()
turn right ()
move ( )
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == - main -:
main ()",179,"\#1 karel Problem-karel home from karel. Stanfordkarel impork *
\# This program defines a main function which should make karel \# move to the beeper, pick it up and return home
def \( \operatorname{main}() \) :
get_oute \( ( \) )
pick-food ()
get_back_home \( U \)
\# pre: Karel facing eask, at the corner of stomeng position
\# posk: Karel facing east, oukside the home, at the position of beeper
def get_out () :
turn_right ()
move?
turn_left ()
move ()
move ()
move ()
\# post : Karel facing west, at the position of beeper
def pick-food () :
pick_beeper ()
turn_around ()
\# post: karel fring east, at the corner of stonting position def get_back_home ():
move ()
move ()
move ()
turn_right ()
move ()
turn right ( )
def turn right () :
for \( i \) in range (3) :
turn_left ()
def turn around ():
turn_left ()
turn_kft()
if _ name_ \( == \) - main - '
main ()",223
"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)
print(factorial(5))
","def factorial (n):
if n == 0:
return 1
else:
return n* factorial (n-1)
print (factorial (5))",34,"def factorial(n)
if n==
O:
return 1
else :
return n
factorial (n-1) -
print (factorial(5))",39,"def factorial (n) :
if n=0 :
return 1
else:
return 1 * factorial (n-1)
print (factorial (5)",39,"def factorial \( (n) \) :
if \( n==0 \) :
return 1
else:
return \( n \) * factorial \( (n-1) \)
print (factorial \( (5)) \)",56
"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    list = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                list.append(elem)
    print(list)
","det main 1:
List 1 2 (1,2,3,4]
List 2 = (3,4,5,67
List = []
for elem 1 in list 1 1
for elem2 în list 2:
it olem2 = = elem 2:
elem = elem 2
(N46)
print (list)
list-append (etem)
Livor",118,"det main O
list 1 2 (1,2,3,4)
list 2 2 (3,4,5,67
List = 17
for elem1 in list 1 :
for elem2 in list2:
it elem1 == elem2:
elem = elem7
list-append (eum)
print (list)",103,"det main () :
list 1 2 [1, 2,3,4]
list 2 =
(3,4,5,6)
List = []
for elem1 in list 1?
for eleme in list2:
it elem1 = = elem2?
elem = elem 2
list- append (elem)
print (ist)",101,"det \( \operatorname{man}(1) \) :
\[
\begin{array}{l}
\text { list } 1=[1,2,3,4] \\
\text { list } 2=[3,4,5,6] \\
\text { List }=[7] \text { in list } 11 \\
\text { for elem } 1
\end{array}
\]
for elem2 in list2:
it \( \operatorname{elem} 2= \) elem2:
elem = elem 2
list-append (eum)
print (ist)",192
"String = input()
print(String[::-1])
","String = input ()
print (String[::-1])",3,"String = input c)
print (String [:
-
-1])",8,"String = input c)
print (String [ ::- 1])",7,\( \begin{array}{l}\text { String }=\text { input } C) \\ \text { print }(\text { String }[::-1])\end{array} \),77
"from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_S()
    move_4x()
    turn_left()
    tower_N()
    tower_S()

def tower_S():
    turn_3x()
    tower()
    turn_left()

def tower_N():
    tower()
    turn_3x()
    move_4x()

def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()

if __name__ == ""__main__"":
    main()
","from Karel. Stanford Rund emport
def main ():
turn-
laft
Tower_N()
tower_S()
Move 4x()
Fern-
-left()
tower_N()
-S()
tower
del
de tower -S():
Furn-3x()
tower ()
turn_left()
del tower _N():
Town ()
turn _ 3x()
move 4x()
def tower (13
for i in
range
(5):
if front_is_clear():
Put-baper (1
movel)
else:
def. Jurn - 3×(1:
turn_left()
leftis
turn-
Turn_left()
()
pest-beeper ()
- Move_4x();
move()
move()
movell
move()
name --
__main__."":
main ()
K",267,"from Karel. Stanford Kand import
K
de/ main()
turn-left
tower-NC
tower- sc)
move-4x ( )
turn-lette
tower N()
tower - sc )
de/ tower - s():
turn - 3x()
tower ()
turn - lefter
def tower - NC):
town ()
turn. - 3x()
move 4r ()
def tower ():
for i in range (5) :
if front - clear():
Put-baper (
movel
else:
put. buper()
def turn- 3x(1:
turn- left(1
turn - left
Turn - left ()
del move _4x():
move!!
more!!
movel
move
=='--
if
name
main !)",285,"from Karel. Stanford Kad import ""
def main () :
turn - left 11
tower_N()
tower- SC)
move- 4x ( )
turn-left ( )
tower- N()
tower - SC )
del tower - s():
turn - 3x ()
Tower ()
Turn- left ( )
del tower- NC) .
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ):
Put-boper ()
move ()
else:
Put- beeper ()
def.turn- 3x (1:
Turn- left ()
turn - left ()
burn- left ()
def . mere_ 4x();
move ()
move ()
morell
move ()
if -- name __ = = -- main __
main ()",277,"from Karel. Stanfordkad import *
def max \( (1): \)
\[
\begin{array}{l}
\text { furn - let (1) } \\
\text { fown-N() } \\
\text { tower-S() } \\
\text { move-4x () } \\
\text { furm-lyt ( ) } \\
\text { tower-N( ) } \\
\text { tower-S() } \\
\end{array}
\]
def tower-s() :
\[
\begin{array}{l}
\text { furn - } 3 \times() \\
\text { Tower (1) } \\
\text { turn - laff() }
\end{array}
\]
def tower - N ( ):
town ()
\( \operatorname{tin} \) - \( 3 \times() \)
move_ \( 4 \times() \)
def tower (1):
for \( i \) in rang \( (5) \) :
if front-is-clear () :
move ()
else:
put_buper ()
def. fum \( -3 \times(1) \) :
\[
\begin{array}{l}
\text { turn - blff (1) } \\
\text { turn - bff (1) } \\
\text { turn - beft (1) }
\end{array}
\]
def mere_4r(1):
morel)
\[
\begin{array}{c}
\text { if name - }==^{\prime} \text {. main ... } \\
\text { main () }
\end{array}
\]
main 1)",556
"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])

if __name__ == ""__main__"":
    main()
","def main ():
string = str (input ( 'Enter string :'))
for i in range ((len (string)-1),-1,-1):
print (string[i])
if __name__ == '___main__':
main()",41,"def main ():
string = str (input( 'Enter string '))
for i in range ((len(string) - 1),-1,-1) :
print (string[i])
if -name '__main_':
main()",44,"det main ( ):
String = str (input (""Enter string: '))
for i in range ((len (string) -1) ,- 1 ,- 1):
print (string [i])
if __ name _== '_main-':
main ()",50,"det main ():
string \( = \) str (input ( Enter string: '))
for \( i \) in range ((len (string) -1\( ),-1,-1) \) : print (string \( [i] \) )
if name_ \( == \) '_-_main_-1:
\( \operatorname{main}() \)",81
"def main():
    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")

def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True

if __name__ == ""__main__"":
    main()
","if
def main():
nur - int (input (""Enter a umby: ""))
print (f"" { num } is { ""prime if is_preme (nom)
else 'not prime' 3"")
Lef is__ pame(n):
<=
return false
elif n <= 3.
Feton True
elf 0 ² 2 = = 6
0² / 3 = = 0;
retow False
for i iN, Range (5, int(n"" 0.5) +1,6)
if 1% 1 = = 0¹ 0² 0% (i + 2) = = 6:
retor False
netum Thve
пале
maiN ()
--
main",190,"def main():
num = a NMBU: ""))
is {'prime' if ip_proundnorm)
else'not prime'3"")
def is prone(s)
if n<=1
return False
olig n <=3:
retun True
effn82==0 OR n% 3==0:
retor False
for i iN Range (5, int(c (0.5)+1,6)
if n%i==0 OR n% (i+2) == 6
return False
refund True
if
nane
1' main Ir's
main ()",198,"def main():
num = int (input( ""Enter a NM bu :
print (f""Enums is S'prime if is_ prime (nom)
else not primé 3"">
def is_ prime(1):
if n <= 12
return false
elif > <= 3:
Cetun True
elf n/ 2 = = x OR 1% 3=6 ;
return False
for i in Range (5, int(1 +0.5) + 1,6
if 1% i = = x or 1% (1+2) =0 :
return False
return True
if
= =
- - main
main ()",165,"\( \operatorname{deg} \operatorname{main}(): \)
num =int( (iuput(""Entu a NMkn: "")) prutt(f""\{num\} is \{'prime' if is prome(num) else not prime 3 "")
def is prme \( (n) \) :
if \( n<=1 \)
reture alse
\( \operatorname{elif} \cap<=3 \) :
seton True
elf \( n \% 2==\varnothing \) or \( \cap \% 3==\varnothing \) :
re tow Jalse
for i in Ravge \( \left(5\right. \) int \( \left.\left(n^{* *} 0,5\right)+1,6\right) \) if \( n \% i==\varnothing \) or \( n \%(i+2)==\varnothing \) : retur false
nefom thoe",318
"from karel.stanfordkarel import *

def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
","from Karel. Stamfordkarel import
def main ():
turn-left():
while frent_is_ alpar (fi
tunn-right()
fill-row ()
return _to_home ll
Jump_row()
turn_right()
fill-row ()
vetwook to home ()
while frent-is. Elear();
meve (s
Sef fill_row();
while frent_is_ clearl]
put - beeper ()
move ()
put-beeper ()",149,"from Karel. stam fordmarel impert
def main():
turn-left():
while frent- is alpar():
turn-rights
fill-row()
return to home(s)
junprowl
turn-right
fillstow()
return te 3-home()
while front is. Elear(1:
meve()
def fill. rew() :
while front. is. clearl)
put - beeper()
move()
put-seeper()",150,"from karel . stamfordkarel. import *
def mais ():
turn-left ():
while frent_ is_ alpar ();
turn-right ()
fill-row ( )
return_to_ home()
jumprow ()
turn-right ()
fill-row ()
returnkte -home ()
while front- is Elcar();
meve ()
Sef fill -row() ;
while front- is clear()
put - beeper ()
move ()
put-beeper ()",147,"fremkarel. stamfordkared impert*
def \( \operatorname{main}() \) :
turn-left ():
while frent - is _ clpar ():
tumn-right 1)
fill-row()
retwn-te-home()
junprow()
turn - right ()
fillarow ()
ve turnkte - home ()
while front-is. Elear ( \( ) \) :
meve()
def fill-rew():
while front - is - clearl)
put - beeper ()
move ()
put-beeper ()",177
"from stanfordkarel import *
""""""
Karel should fill the whole world with beepers.
""""""

def main():
    """"""
    You should write your code to make Karel do its task in
    this function. Make sure to delete the 'pass' line before
    starting to write your own code. You should also delete this
    comment and replace it with a better, more descriptive one.
    """"""
    while not left_is_blocked():
        put_beeper_Line()
        reset_Position()
    put_beeper_Line()

def put_beeper_Line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
","from stanfordKarel import *
11 11 11
Kard should
beepers.
|| || ||
def
main ():
11 [1 (1
You should write
Karel do its
comment
better
fill
11 [11
/
the whole world with
Make
виче
before starting to
code. You should also
to
task in this
function.
delete the pass line
write your
owen
delete this
with
and replace it
more descriptive one.
move ()
put_ beeper ()
your
put_ beeper _line ()
our code to malce
While not left_it_ blocked ():
put - beeper_Line()
resit_ Position ()
dif put_beeper_Line():
put_beeper ()
front_is_clear
while
():",376,"from stanford hard import
Kard should fill the whole world with
beepers
11 11 11
daf main () :
11
11
11
you should write your code to male
karel do its task in this function.
Make sure to delite the pass line
code. You should also delete
before starting to write your this own
comment and replace it with a
better more descriptive one
11 11
while not left- is blocked C):
put- buper-line()
resit_Position c)
put- buper - Line c)
def put beeper-line() -
put beeper c)
while front is clear C) :
move ()
put- - beeper c)",208,"from stanfordkarel import *
Kard should fill the whole world with
keepers.
11 11 11
daf main () :
11 11 11
You should write your code to males
Karel do its task in this function.
Make sure to delete the 'pass line
before starting to write your own
code. You should also delete this
comment and replace it with a
better more descriptive one.
11 11 11
While not left-is - blocked ():
put -beeper -Line()
reset_Position ()
put-buper _line ()
de put_leeper-Line ():
put -beeper ()
While front-is- clear ():
move ( )
put -beeper ()",141,"Grom stanfordkarel import *
111111
Karel should fill the whole world with bepers.
111111
def \( \operatorname{main}() \) :
""11 11
You should write your code to male karel do its task in this function. Make sure to delete the 'pass'1 line bfore slarting to rurite your owen code. You should also delete thir comment and replace it with a better, more descriptive one. 111111

While not left_ir_blockd ():
put_beper_Lin ()
resit_position ()
put_buper_line C)
dy put_buper-Line \( ( \) ):
put_beper ()
while front_is-clear C):
move ()
put_beper ()",155
"#karel needs to move to the bottom of the next arch to commence 
#building the next column.
#precondition: karel is facing east
#post condition: karel is still facing east at the next column site.

def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()""

def turn_around():
    turn_left()
    turn_left()
if __name__ == '__main__':
    main()
","#Karel needs to move to the bottom of the next arch to comm
#ence building the next column.
# Precondition: Karel is facing east
#post_condition : Karel is facing east at the next column site.
def move_to_ next_arch_botton ():
if front is clear ():
for i in range (4):
move ()
def turn around () =
turn_left()
turn_left (D
if name
Main ()
main",119,"#karel needs to more to the bottom of the next arch to comm
#ence building the next column.
#
Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move to next arch botto ():
if front is clear ():
for i in range (4)
move ()
def turn around ():
turn left()
turn_left(3)
if name 1 i main , :
main ()",117,"#karel needs to move to the bottom of the next noch to com
Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_botton ();
if front is clear ():
for i in range (4) :
move ()
def turn around ():
turn_left ( )
turn left ()
if __ name.
main
main ()",120,"Hikarel needs to move to the bottom of the next arech to comm. Hence building the next column.
\# Precondition: karel is facing east
\#post-condition: kavel is facing east at the next column site. def move_to_next_arch_botton():
if frontis-clear () :
for \( i \) in range (4):
move ()
def turnarounl () :",159
"def find_lrgst_smallst(number):
    if not numbers:
        return none
    smallest = largest = number[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest
# Example Usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_lrgst_smallst(numbers)
print(result)
","HEART
def- find Ligst_smallet (number);
if not numbers:
return none
-Smallest= largest = number [0]
for num in numbers:
if num < smallest:
= num
пит
smallest
if nam > Largest :
Largest.
fieturin smallest, Largest
= num
#Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
Tresult
find_ligst __ smallst (numbens)
print (result)
উদ্ভাস-উন্মেষ শিক্ষা পরিবার",143,"def find-Ligst_smallst - (number):
if not numbers:
return none
-Smallest. = largest = number [0]
for num in numbers:
if num < smallest:
smallest = num
if nam > largest:
Largest = num
return smallest, Largest
Example usage:
numbers = [1, 2, 3, 4,5,6,7,8,9]
result = find_ligst_smalist (numbers)
print (result)",91,"def find_Ligst_smallst (number):
00
if not numbers:
Return none
Smallest=largest = number [0]
-
for num in numbers:
lif
num < smallest:
smallest = num
if
nam > Largest :
Largest = num
tieturin smallest, Largest
# Example usage:
numbers = [1,2,3, 4,5,6,7,8,9]
Hresult = find_ligst_smallst(numbers)
print (result)
उदास-उदास मिका शंतिबाज़",117,"def find_rigst_smallst (number):
if not numbers:
return none
- Smallest = largest = number [0]
for num in numbers:
if num < smallest:
\[
\text { smallest }=\text { num }
\]
if nam > Largest:
\[
\text { Largest }=\text { num }
\]
fietutin smallest, Largest
* Example usage.
\[
\begin{array}{l}
\text { rumbers }=[1,2,3,4,5,6,7,8,9] \\
\text { result }=\text { find_lrgst_smallst (numbers) }
\end{array}
\]
print (result)",170
"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The Sum of the Digits is: "", result)

def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum

if __name__ == ""__main__"":
    main()
","def main():
user number
input (""Enter the number: "")
result = Sum_of_digits (user_number)
print (""The Sum of the digits is"", result)
def Sum_of_digits (user_ number):
W 18
number_str = Str (user_number)
digit_sum = 0
for digit in number str:
#zero
return digit sum
if_name_
main()
digit_sum += int(digit)
_main_"":",112,"def main():
user_number = input (""Enter the number: "")
result = Sum_of-digits (user_number)
print (""The Sum of the digits is"", result)
def Sum- of_digits (user_ number):
1#
number_str = Str (user- number)
digit_sum = 0 # zero
for digit in number-str:
digit_sum + int(digit)
return digit_sum
if name_ == ""__main_"":
main()",71,"def main():
user_number = input (""Enter the number:
"")
result = sum_of_digits (user_number )
print (""The sum of the digits is "", result)
def Sum_of_digits (user_number):
number_str = Str (user_number)
digit_sum=0 # zero
for digit in number-str:
digit_sum + = int (digit)
return digit sum
if _name _== ""_main_"":
main()",71,"def main():
user_number = input (""Enter the number: "")
result = sum_of digits (user_number)
print (""The sum of the digits is"", result)
def sum_of_digits (user_number):
number_st \( r=\operatorname{str} \) (user_number)
digit_sum \( =\varnothing \quad \# \) zero
for digit in numberstr:
\[
\text { digit_sum } t=\operatorname{int} \text { (digit) }
\]
veturn digit_sum
if name_ \( =="" \) main_ \( "" \) :
main()",147
"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")

if __name__ == ""__main__"":
    main()
","def is-prime (n):
DON
if
Returns True if n is prime, False otherwise.
|(α ||
if n <
n < = 1:
return False
for i in range (2, int(n** 0.5) +1);
if n % i = = 0;
def main():
return True
[((11
The main function.
Int
return False
14
n = int ( input (""Enter a number: "")
if is-prime (n):
print (n
else:
""is a
main()
print (n. ""is not a prime number."")
name__ ==
prime number."")
11
main.
--
})",207,"dof is -prime (n):
110V
Returns True if n is prime, False otherwise.
11011
if n <= 1:
return False
for i in range (2 , int(n**0.5 ) +1): :
if n % i == 0 :
return False
return True
def main():
The main function.
n= int (input ( ""Enter a number: "")
if is-prime (n):
print ( n , ""is a prime number."")
else :
print( n, ""is not a prime number. "")
if
name
11
main
"",
""
;
main()",152,"def is-prime (n):
1104
Returns True if n is prime, False otherwise
11011
if n <= 1:
return False
for i in range (2, int(n*0.5)+1):
if n % i == 0.
return False
return True
def main () :
11 /11
The main function.
/11.11
n = int ( input (""Enter a number: "")
if is- prime (n):
print (n, "" is a prime number."")
else :
print( n, ""is not a prime number. "")
it
- - name __ == __ main -- :
main ( )",147,"def is-prime \( (n) \) :
Returns True if \( n \) is prime, False otherwise.
IIU11
if \( n<=1 \) :
return False
for \( i \) in range \( \left(2, \operatorname{int}\left(n^{* *} 0.5\right)+1\right) \) :
if \( n \% i==0 \) :
retum False
return True
def \( \operatorname{main}() \) :
IIIII
The main function.
1....
\( n=\operatorname{int} \) (input (""Enter a number: "")
if is-prime \( (n) \) :
print \( (n \), ""is a prime number."")
else:
print ( \( n \), ""is not a prime number."")
if \( \ldots \) name _. \( =="" \) main .. ""
\( \operatorname{main}() \)",279
"# Reverse String

def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)

if __name__ == ""__main__"":
    main()
","#Reverse String
def mam ():
str = input (""Input a string: "")
ro_str=
for i m str:
||||
if_name
r_str=i+r_stra
primt (r_stro)
mam ()
_maim_"":",78,"# Reverse
string
def main ():
str = input ( ""Input a string: "")
ro-str=
for i instr:
r_str=itn_str
print (n_str)
if_ name - "" - __main_
main ()",63,"#Reverse String
def man ():
str = input (""Input a string: "")
ro _str= """"
for i'm str:
r_ str = i+ n_ str
print (no_stro)
if_name _= = ""_main_"":
main ()",55,"\# Reverse string
def \( \operatorname{mam}() \) :
stro = input (""Input a string: "")
rostro \( ="" 11 \)
for i instr:
\[
r_{-} s t r=i+r_{-} s t r
\]
print (r_stro)
\[
\begin{array}{l}
\text { if_name- }=="" \text {-main_: } \\
\operatorname{mam} \text { () }
\end{array}
\]",157
"# Write a Python program to find the longest word in a given text

def main():
    sentence = input(""Input a sentence: "")
    list = sentence.split()
    l_word = """"
    for word in list:
        if len(word) > len(l_word):
            l_word = word
    print(l_word)

if __name__ == ""__main__"":
    main()
","# Write a Python program to find the longest word in a given text
def maint):
sentence = imput (""Input a sentence: "")
list = sentence.split()
Lword =
for world im List:
if len (word) >len (1-word):
1_ word = word
primt (1- word)
if_name_ == ""_mam_"":
main ()",78,"# Write a Python program to find the longest word in a given text
def main() :
sentence = input (""Input a sentence: "")
list = sentence.split1)
Iword = if 11
for word in List:
if len (word)> len (1 word):
1_ word = word
print(1- word)
if_name- == ""_main-"":
main ()",73,"# Write a Python program to find the longest word i'm a given text
def main ():
sentence = input (""Input a sentence: "")
list = sentence. split ( )
Lword = """"1
for word in List:
if len (word) > 1en (1-word):
1-word = word
print (1-word)
if_name = ""_main_"" :
main ()",77,"\# Write a Python program to find the longest word a \( m \) a given text def main \( ( \) ):
sentence = imput (""Input a sentence: "")
list = sentence.split ()
lword = "" ""
for word im list:
if len (word) >len (1-word):
\[
\text { 1_word }=\text { word }
\]
primt (1-word)
if name_ \( == \) ""-main_"".
\( \operatorname{main}() \)",116
"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
","def greatest common_divisor(a,b):
smaller_number=a if azb else b
common_divisor= []
for i in range (1, smaller_number +1):
if a %i == 0 and b% i ==0:
common_divisor.append()
return common_divisor [-1]",52,"def
greatest_common_divisorca,b):
smaller_number. = a if a4b else 10
common-divisor= []
for i in range (1, smaller_number +1) :
if a %i ==0 and b%i==0:
common_divisor . append(i)
return common_divisor [-1]",60,"def greatest_common_divisor (a,b) :
smaller_ number = a if a <b else 10
common_divisor = []
for i in range (1, smaller_number +1):
if 9 % i == 0 and 6% i == 0:
common_divisor. append (i)
return common_divisor [-1]",52,"def greatest_common_divisor \( (a, b) \) :
smaller_number \( =a \) if \( a<b \) else \( b \) common_divisor \( =[] \)
for \( i \) in range \( (1 \), smaller number +1\( ) \) : if \( a \% i==0 \) and \( b \% i==0 \) : common_divisor. a ppend (i) return common_divisor \( [-1] \)",94
"def main():
    """"""
    The program should determine whether the given year is a leap year
    (divisible by 4, divisible by 100 but also by 400).
    """"""
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()

def identify_a_leap_year():
    print(""Please input a year below(in number form)."")
    Year = int(input(""Year : ""))
    print("" "")
    if (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" "" + ""is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" "" + ""is not a leap year."")

def ask_for_a_new_year_to_identify():
    while True:
        print("" "")
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" or ask != ""yes"" or ask != ""No"" or ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")

if __name__ == ""__main__"":
    main()
","def main ():
The
should determine whether the given year is a leap year
(divisible by 4, divisible by loo but also by 400).
program
print (""This program will help you identify if a given year is a leap
or not."")
year
if
print ("" "")
()
identify_a_leap_year
ask_for_a_new_year_to_ identify ()
def identify_a_leap-year ():
print (""Please input
Year = int (imput ("" Year: ""))
print("" "")
else :
it (Year % 4 = = 0) or (Year %/ 100 ==0) or (Year % 400 ==0);
+ str (Year) +
+ "" is a leap year."")
V
print (""The Year
""+"" is not a leap year."")
print (""the Year
def ask_for_a_new_year_to_
white True:
-_name__
main ()
a year below (ill humber
if ask = =
+ str (Year).
-+
identify ():
print (')
ask - input (""Do you want to identify
print ("" "")
""__main__
form). "")
""Yes"" or ask
ask = = ""yes"" :
identify_a_ leap year ()
""
elif ask = = ""No"" or ask == ""no
a new year? Yes/No: "")
print (""Thank you. See you again!"")
break
elif ask != ""Yes
or ask != ""yes"" of ark! = ""No"" or ask != ""no"":
print (""Wrong keyword. Please type the exact keyword."")",486,"def main ():
The program should determine whether the given year is a leap year
(divisible by 4, divisible by 100 but also by 400).
print (""This program will help you identify if a given year is a leap
year or not."")
print ( a)
identify- a - leap_ year ()
ask_for_a- new- year- to identify()
def identify- a - leap - year () :
print ("" Please input a year below (in number form)."")
Year = int (input (""Year: ""))
print ( .)
if (Year %4==0) or (Year % 100 = = 0) or (Year % 400 = = 0) :
print (""The Year ""+ str (Year) + v t is a leap year."")
else
print (""the Year str(Year) + "" + "" is not a leap year."")
def ask_for a-new. year to- identify ():
white True:
prilit ( 1)
ask = input (""Do you want to identify a new year? Yes/No: "")
print ( "" "")
if ask == ""Yes"" or ask == ""yes"":
identify_a_leap-yaar
elif ask = = ""No"" or ask == ""no"" :
print (""Thank you. See you again!')
break
elif ask != ""Yes or ask != ""yes"" a task!=""No"" or ask != ""no"":
print (""Wrong keyword. Please type the exact keyword. )
if name == ""__ main "":
main ()",296,"def main () :
The program should determine whether the given year is a leap year
( divisible by 4, divisible by 100 but also by 400).
print ( "" This program will help you identify if a given year is a leap
year or not . "")
print ("" "")
identify_a_leap year ( )
ask _ for _ a _ new _year _ to _identify ( )
def identify _ a _ leap year ( ) :
print ( "" Please input a year below ( in number form ) . "")
Year = int (input (""Year:
print ("" "")
if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;
print (""The Year + str(Year) + "" ""+ ""is a leap year."")
else :
print ( "" The Year "" + str ( Year ) + "" "" + "" is not a leap year . "" )
def ask-for-a-new year_ to _ identify ( ) :
white True :
print ("" "")
ask - input ( "" Do you want to identify a new year ? Yes / No : "" )
print ("" "")
if ask == ""Yes "" or ask == ""yes"":
identify_ a_ leap -year ( )
elif ask == ""NO"" or ask = ""no"":
print ( "" Thank you . See you again ! "" )
break
elif ask != ""Yes or ask != ""yes"" a ask! = ""No"" or ask != ""no"".
print ( "" Wrong keyword . Please type the exact keyword . "")
if
__ name_ == "" __ main __ "":
main ()",312,"def \( \operatorname{main}() \) :
""The program should determine whether the given year is a leap year (divisible by 4, divisible by 100 but also by 400).
"" r""
print (""This program will help you identify if a given year is a leap year or not."")
privit ("" "")
identify - a - leap_year ()
ask_for_a new_year_to_identify ()
def identify - a l eap - year () :
print (""Please input a year below (in number form)."")
Year = int (input (""Year: ""))
print ("" "")
if \( ( \) Year \( \% 4=0) \) ) or \( ( \) Year \( \% 100=0) \) ) or \( ( \) Year \( \% 400=0) \) :
print (""The Year "" \( +\operatorname{str}( \) Year) + "" "" ""is a leap year."")
else:
\[
\text { print (""The Year ""+str (Year) }+ \text { "" "" "" is not a leap year."") }
\]
def ask_-fir_a_new - year_to_identify ():
white True:
print (' 1 )
ask = input (""Do you want to identify a new year? Yes/No:"") print ("" "")
if ask = = ""Yes "" or ask = = ""yes"":
identify - a - leap- year ()
elif ask \( == \) ""No"" or ask \( == \) ""no"" :
print (""Thank you. See you again!"")
break
elif ask ! = ""Yes or ask ! = ""yes"" a ask! = ""No"" or ask ! = ""no"":
print (""Wrong keyword. Please type the exact keyword."")
if .. name \( \ldots=="" \) main \( _{2}{ }^{\prime} \) :
main ()",401
"sum = 0
number = input()
for i in number:
    sum += int(i)
Print(sum)
","Sun =
S
number
imput ()
for i in number:
Sun + =
int(i)
Print (surm)
N",20,"sun 2 = $
number N Emput ()
for i in number:
sun + 11 int(i)
print (sum )",20,"Sun = D
number = input ()
for i in number :
Sun + = int (i)
Print (Sum)",16,"\[
\operatorname{sun}=\varnothing
\]
number = imput ()
for: in number:
\[
\text { sun }+=\operatorname{int}(i)
\]
print (sum)",69
"def factorial(n):
    if n <= 1:
        return 1
    else:
        return factorial(n - 1) * n
print(factorial(int(input())))
","def factoria 1 (n):
if n <= 1 :
Return 1
else:
Return factorial (n-1) *
Prist (fractional (int (amput())))
h",49,"def factoric / (n):
if h L=1 :
Return 1
else :
Return factorial (n-1) A h
Print (factorial (int (input() ))) )",49,"def factorial (n):
if n <= 1 ;
Return 1
else :
Return factorial (n-1) * h
Print (factorial (int (input ()))",42,"def factorial (n):
if \( n<1 \) :
Retunn 1
else:
Return factorial \( (n-1) * n \)
Print \( ( \) factarial \( (\operatorname{int}(\operatorname{imput}()))) \)",89
"year = int(input)
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
","Year = int (impot
if yeur 1/4 = = $ and year 1/144 != 0 on Year 1.400 ==&=
Print (true)
else:
print (False)",35,"year 2 int (input)
if I and year 1,144 1=0 on Year% 400==0:
Print (TRUE)
else :
print (False)",43,"Year = ent (input)
if year / n == 4 and year 0/ 100 /=/ or year / 400 == 0 ;
Print (true)
else :
Print (False )",30,"\[
\text { year }=\operatorname{int}(\text { impot })
\]
if Yearn \( \% \mu==\phi \) and year \( \% 1 \phi \phi !=\varnothing \) on Year \( \% 400==\phi \) :
Pine (true)
else:
print (False)",108
"Word = input()
Word = "" "".join([i for i in word[::-1]])
Print(Word)
","Word = imput()
word = """", join (I i for i in word [::
Print (word)",19,"word = imput()
ward = "" "" "" "" join (I i from i in word[-:-]]]
Print (word)",22,"Word = input ()
Word = """". join ([ "" for i in word [-]
Print (Word)",16,"\( \begin{array}{l}\text { Wond }=\operatorname{imput}() \\ \text { wand }="" \text { ""join }([i \text { for } i \text { in word }[\because-1]]) \\ \text { Print (wond) } \\\end{array} \)",134
"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
","list 1 = [1, 2, 3, 4]
bist 2 = [3, 4, 5, 6]
in lista]
bist 3 = [i for i in list 1 if i in
Print (list 3)",27,"list 1 = $ (1,2,3,4)
list2=[3,4,5,6]
=
list 3= [i for i in list 1 if i in listz]
print(list3)",20,"list 1 = [ 1, 2, 3, 4]
bist 2 = [ 3,4,5,6]
list 3 = Ji par i in list 1 if i in listz]
Print (list 3)",20,"\( \begin{array}{l}\text { list } 1=[1,2,3,4] \\ \text { bist } 2=[3,4,5,6] \\ \text { fist } 3=[i \text { for } i \text { in list } 1 \text { if } i \text { in list }] \\ \operatorname{Pint}(\operatorname{list} 3)\end{array} \)",160
"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
","list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [ è for i in lists if */2==4]
Print (even)",15,"list1 = (123456789)
even = [i for i in list1 if i%2==0]
Print (even)",27,"list 1 = [1, 2, 3, 4, 5, 6, 7, 8,9]
even = [è for i in list 1 if i|2=]
Print (even)",16,"\( \begin{array}{l}\text { list } 1=[1,2,3,4,5,6,7,8,9] \\ \text { even }=[i \text { for } i \text { in list } 1 \text { if } i \% 2==] \\ \text { Print (even) }\end{array} \)",116
"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")

if __name__ == ""__main__"":
    main()
","def main ():
year
= int (input())
if (year % 4 == 0 and year % 100 != 0):
print (""True"")
elif (year % 100 == 0 and year % 400 ==0):
print (""True"")
if
else:
print (""False"")
name__
main ()
!!
>>
_main__'",78,"def main ():
year = int (input())
if (year% 4==0 and year % 100 != 0):
print (""True"")
elif (year % 100 ==0 and year % 400 == 0):
print (""True"")
else:
print (""False"")
if -- name "" -- __main__"":
main()",68,"def main ():
year = int (input ()
if ( year % 4 == 0 and year % 100 ! = 0):
print (""True"")
elif (year % 100 == 0 and year % 400=0):
print (""True"")
else:
print (""False"")
if
__ name __== "" __ main_"".
main ()",71,"def main ():
\[
\text { year }=\operatorname{int}(\operatorname{input}())
\]
if (year \% \( 4==0 \) and year \( \% 100 !=0 \) ):
print (""True"")
elif (year \( \% 100==0 \) and year \( \% 400==0 \) ):
print (""True"")
else:
print (""False"")
if __name__ = = ""_main_."":
\( \operatorname{main}() \)",133
"from karel.stanfordkarel import *

def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()

def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()

def build_beeper():
    put_beeper()
    move()

def go_back():
    turn_around()
    step_up()

def turn_around():
    turn_left()
    turn_left()

def step_up():
    move()
    move()
    move()
    move()

if __name__ == ""__main__"":
    main()
","from
def
def
karel. stanford kavel import
main ():
build_column ()
step- up ()
build column()
step-up ()
build- column ()
def
step-up()
build- column()
build
column ():
turn-left()
build- beeper ()
build- beeper ()
build_ beeper ()
build-beeper ()
put - beeper ()
go - back()
turn - left ()
det build - beeper ():
put- beeper ()
move ()
go-back ():
turn around ()
step-up ()
def turn around ():
turn - left()
turn
left()
def step-up():
move ()
move ()
move ()
move ()
if - name
main ()
==
main
*",225,"from karel. . stanford kavel import
def main () :
build - column ( )
step - up ()
build - column()
step - up()
build. column ()
step - up()
build - column (
def
build - column ()
turn - left ()
build- beeper ( )
build beeper ()
build - beeper ()
build. - beeper ()
put - beeper ()
go - back ()
turn - left ()
def
build - beeper ():
put - - beeper ( )
move ()
det
go - - back() :
turn around ()
-
step - up ()
def turn - around ()
turn - left ()
turn - left ()
def step - up' () :
move ()
move ()
move ()
move ()
if 1 name
1 main :
main ()",252,"from karel. stanford kavel import *
def main ():
build-column ( )
step -up ( )
build- column ()
Step -up ()
build- column ( )
Step -up ()
build - column ()
def
build - column ( ) :
turn - left ( )
build - beeper ()
build - beeper ( )
build - beeper ( )
build - beeper ( )
put - beeper ( )
go - back ()
turn- left ( )
def
build - beeper ( ) :
put - beeper ()
move ()
det
go - back ():
turn- around ( )
step -up ()
dex
turn- around () :
turn - left ()
turn - left ()
dex
step-up ():
move ()
move ( )
move ( )
move ( )
-
if - name _ == - main _:
main ( )",251,"from karel. Stanfordkavel import * def main ():
build_column ()
step - up ()
build - column ()
Step - up ()
build_column ()
Step - up ()
build - column()
def build - column ():
turn - left ()
build - beeper ()
build - beeper ()
build - beeper ()
buitd - beeper ()
put - beeper ()
go - back ()
turn - left ()
det build-beeper ():
put - beeper ()
move ()
det go-back ():
turn - around ()
step - up ()
dex turn - around () :
turn - left ()
turn - left()
def step-up ():
move ()
move ()
move ()
move ()
if _ name _ \( == \) 'main _ :
main ()",233
"def main():
    input_string = input('Input string: ')
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print ret
if __name__ == '__main__':
    main()
","def main ():
if
input_ string = input ('Input string; ')
11 11
ret =
for ch in input-string
ret
print ret
71
= ret + ch. uppert)
name__ =
main ()
main
20 07203",78,"def main () :
input - string = input(' Input string ')
ret = 11 11
for ch in input - stiting
ret = ret + ch. upperl )
print ret
1
1
if
name
main
-
-
main
()",66,"def main () ;
input_ string = input ( Input string:')
ret = "" ""
for ch in input string
ref = ret + ch.upper()
print ref
if __ name __ =
1
1
- -
main
--
main ( )",57,"def main ():
\[
\begin{array}{l}
\text { input_string = input ('Input string! ') } \\
\text { ret }="" 11
\end{array}
\]
for ch in input.string
\[
\text { ret }=\text { ret }+ \text { ch. upperd) }
\]
print ret
if name \( \operatorname{main}( \) )",122
"from karel.stanfordkarel import *

def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()

def move_to_beeper():
    while front_is_clear():
        move
    turn_right()
    move()
    turn_left()
    move()

def turn_around():
    turn_left()
    turn_left()
","O
O
O
from Kare!. Stamford Karel impert
def main ():
mere to beeper ()
pick beeper ()
turn-around ()
return to_start()
def muere to beepet():
while front_is_clear ():
Move
turn_right()
more()
turu-left()
More()
det turn around ():
turn left ()
turn left ()",106,"from Karel. stanfordKarel import
def main ():
move to beeper ()
pick_beeper()
turu_around()
Return to-start()
def more to beeper() :
while front-is-clear ():
move
turn_right()
more(
turn-left()
more()
det turu around ();
turn_ left ()
turu left ()",93,"from Karel. StanfordKarel import
def main ():
move_to_beeper ()
pick-beeper ()
turn-around()
return_to_start ()
def more_to_ beeper () :
While front-is-clear ();
move
turn_Right ()
move ()
turn-left ()
move ()
def turu_around ():
tura_left ()
turn left ()",92,"from Karel. stanfordKarel import
def main ():
move to beeper ()
pick-beeper ()
turu_around ()
ceturn to_start()
def more to beeper ():
while frout_is_clear (1):
move
turn_right ()
more ()
turu-left()
morre()
def turu_around ():
turu left ()
turu left ()",96
"from karel.stanfordkarel import *

def main():
    while front_is_clear():
        fill_tower()

def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()

def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()

def turn_around():
    for i in range(2):
        turn_left()

def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()

def turn_right():
    for i in range(3):
        turn_left()

if __name__ == ""__main__"":
    main()
","from kanel.stanfordkarel import
def main ():
while front_is_ clear():
bill tower ()
def fill_tower ():
-
while front_is_ clear ():
put-beeper ()
move()
put_beeper()
column_return ()
def column_return ():
if
def turn around ():
while front_is_blocked ():
turn-around()
while front_is_ clear():
move ()
next-tower()
-
def next tower ():
if right_is_dean ():
turn_right()
move()
turn_right()
for i in range (2):
turn_left()
—
else:
turn around ()
while front_is_dear():
def turn_right():
-
move()
-
name
main ()
for i in range (3):
turn_left()
_main_':",323,"from karel. stanfordkard import
def main ()
while front. is clear () :
fill_tower()
def fill tower () :
while front - is - clean ():
put - beeper ()
move ()
put_beeper()
column_return() -
def columm_return(): -
while front_is_blocked() :
turn-around()
while front_is_clear()
move()
next_tower()
def turn around()
for i in range (2) :
turn-left()
def next tower() :
if right is-clean - ( ) :
turn -right()
move ()
turn_right()
else :
turn around()
while front_is_dear():
move()
def turn - right ():
for i in range (3) :
turn_left(c)
if - name == I main I :
main ()",238,"from kanel stanfordkard import *
det main () :
while front_is_clear ():
bill_tower ( )
det fill-tower ():
while front-is-clean ():
put-beeper ()
move ()
put_beeper ()
column_return ()
def column_return ():
while front_ is_blocked ():
turn-around ()
while front_is_clear () :
move ( )
next_tower ()
det turn-around ():
for i in range (2) :
turn-left ( )
det next_tower ():
if right_is_clean ():
turn-right ( )
move()
turn-right ()
else :
turn-around ()
while front-is-clear ():
move( )
def turn-right ():
for i in range (3):
turn_left ()
if
- name _
== '_ main
1
..
main ()",243,"from karel.stanfordkarel import *
def main ():
while front_is_dear () :
fill_tower ()
def fill_tower ():
while front_is_dear ():
put-beeper ()
move ()
put_beeper ()
column_return ()
def colurn-return () :
while front_is_blocked ( ):
turn-around ()
while front_is_clear () :
move ()
next_tower ()
def turn_around () :
for \( i \) in range (2):
turn-left ()
def next_tower ( ) :
if right_is_dear ( ):
turn_right ()
move ()
turn_right ()
else:
turn_around( )
while front_is_dear ():
move ()
def turn_right () :
for \( i \) in range (3):
turn_left ()
if _ name \( ==1 \) _ main _ '
main ()",245
"def filter_string_a(string):
      string.sort()
      filtered_string_list = [ ]
      for str in string:
             if str.startswith(""a""):
                    filtered_string_list.append(str)
       return filtered_string_list
input_string = [""apple"", ""banana"", ""avacado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)
","der fitters string - a (string);
sont ()
string.
filtered_string_list = [3
toru
1
in
string:
stru. start with (""a"");
stru
filtreried_rodring-lirt: append
returen filtered_string-lit
(stru)
imput_string = [""apple"", ""bunana"", ""avacad""
""cheveny"", ""apriest""""]
output = filtern-string- a (imput_string)
print (output)",131,"def - a (string):
string. sort ()
filtered -string-list = -[I
for stru in string :
if stru startswith (""a""):
append (str))
return
input_ string z [ apple"" ""bunana"", ""avacado)
""chevry"", ""apricot""]
output fifter z string a (input-ntuing)
print (output)",151,"det filter-string-a (string) :
string. sort ()
filtered- string-list = []
foru stre in strung :
if stru. startswith (""a""):
filtered-string-lint: append
( stru)
returen filtered-string- list
input_string = \""apple"", ""bunana"", ""avacado
""cheving "" ""apricot""]
Output = filter-string-a (input_string)
print (output)",104,"def filteru-string-a (ntring):
string. sont ()
filtered-string_list \( =[] \)
for stre in atring:
if stru. Ptark with (""an):
fiterced-atring-lint. append (stru)
return filtered-rtring-lirst
imput_rting \( z \) ""apple"", ""bunana"", ""avacado"" ""cherry"" ""apricot"" pring (output)",146
"def main():
  while front_is_clear():
      move()
  if front_is_blocked():
      turn_around()
  move()
  turn_left()
  move()
  pick_beeper()
  turn_left()
  turn_left()
  while front_is_clear():
      move()
  if front_is_blocked():
      turn_around()
  move()
  turn_around()

def turn_around():
    for i in range(3)
        turn_left ()
","def main:
While front_is_clear();
move()
if front_is_blocked ().
turn-around ()
move ()
turn_left()
move ()
pick_beeper ()
turn - left().
turn_left()
while front is clear ():
Move ()
if front_is_ blocked ():
turn around ().
move()
turn
around ()
def turn around ():
turn- lieft
Left
for i in range (3)
()",117,"def main :
While front is clearc):
move
if front _is_blocked ():
turn_around ()
move ( )
turn_left ()
move ()
pick- beeper()
turn - left )
turn - left()
while front is clear ( ):
move ( )
if front is - blocked ()
turn- around ()
movel )
turn around ()
def turn-around ():
for i in range (3)
life ( )",120,"def main :
While front-is-clear():
move ( )
if front_is_blocked ().
turn-around ()
move ()
turn_left ( )
move ()
pick-beeper ()
turn- left ()
turn-left ()
while front_is_clear ()!
move ( )
if front_is _ blocked ( ).
turn - around ( )
move ()
turn around ()
def turn-around ():
for i in range (3)
left ()",112,"def main:
While front_is_clearc):
move ()
if front-is-blocked ():
tuin-around()
move ()
turn-left ()
move ()
pick-beeperc)
tuin-left()
tuin-left()
while front_is clear ():
move ()
if front-is-blocked ():
turn-around ()
move()
turn around ()
def turn-around ():
for in range (3)",114
"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return False
    else:
        return False

def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)

if __name__ == ""__main__"":
    main()
","-def is_leap-year (year);
if year % 4= = 0!
is yeare °6 100 = = 0:
1 year 1.400.
if
return. Trive
0:
ebbe:
return false
else:
else:
return false
return false
def main ():
yeare = int Cinput (""Enter a year: ""))
is_ leap - is_ leap year (year)
print (is-leap)
if name_
maino
==
11
main"":",185,"def is - leap-year (year):
if year % 4 == O:
if year % 100 = O:
if year % 400 = = O:
return True
else:
return False
else:
return False
else:
return False
def main ():
year = int (input (""Enter a year: ""))
is- leap = is_ 1 eap-year (year)
print (is_ leap)
if 1 name = -"" main
"":
if
main()",153,"def is-leap year (year):
if years % 4 == 0'
if year % 100= = 0:
year % 400 = = 0:
return True
else:
return False
else:
return False
else:
return False
def main ().
year = int (input (""Enter a year: "")
is- leap= is-leap- year (years)
print (is-leap)
if
name_ = ""_main_"":
main()",154,"def is-leap-year (year):
if yeare \( \% 4==0 \) :
if year \( \% 100=0 \) :
if year \( \% 400==0 \) :
return. True
else:
return False
else:
retur false
else:
ruturn False
def \( \operatorname{main}() \) :
yearc = int (input (""Enter a year: ""))
is teap = is leap-year (year)
print (is_leap)
if \( \operatorname{mame}_{-}=="" \) main "":
main()",202
"def main():
    print("" problem - 5 "")
    print(""-----------------"")
    numb = int(input(""write an  number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the number's digit: "", add_numb)

if __name__ == ""__main__"":
    main()
","def main ():
print (""problem - 5
---"")
print (""---
numb = int (input (write an integer number:
mak_list = [int (x) for x in sts (numb)]
add-numb = 0
fon is in mak_list:
-5 "")
add_numb + = i
print (""Sum of the numbers:
digit
if_name__
main()
=
u
main__""
11
')
add_numb)",126,"def main() :
print ("" ""problem -5 "")
"")
numb = int (input (write an integer number: ')
print (""
mak list = [ int (x) for x in str (numb)]
add-numb = 0
for is in mak_list :
add-numb + = i
print (""sum of the number's: "", add-numb)
digit
if name = = ""_ main__""
main()",116,"def main () :
print (""problem - 5 "")
print (""-
rumb = int (input ('write an integer number:
mak_list = [int (x) for x in str (numb)]
add-numb = 0
for is in mak-list :
add-numb +=i
print (""Sum of the number's:
"", add_numb)
digit
if_ name __ = =
-- main __:
main()",109,"def main ():
print (""problem - 5 "")
print (""............"")
numb = int (input ('write an integer number: ')
mak_list \( =[ \) int \( (x) \) for \( x \) in rtr (numb) \( ] \)
add-numb \( =0 \)
fon is in mak-list:
add_numb \( +=i \)
print (""Sum of the numbers: "", \( a d d \)-numb)
If _ name _ \( == \) ""- main_.""
main()",142
"list = [6, 14, 5, 8, 9]
for elem in list:
    max = 0
    if elem > max:
        max = elem
return max
","list = [6, 14, 5, 8, 9]
for elem in list :
max = 0.
if elem > max :
De
max = elem
return max",20,"list = [6, H, 5,8, 9]
for elem in list :
max =0
if elem > max Der
:
max = elem
return max",23,"list = [6, 11,5,8,9]
for elem in list:
max=0
if elem> max :
max = elem
return max",25,"\[
\text { list }=[6,14,5,8,9]
\]
for elem in list:
\[
\max =0
\]
\[
\begin{array}{l} 
\text { if elem }>\max : \\
\max =\text { elem }
\end{array}
\]
return max",89
"def palindromic(str):
    for i in range(int(len(str) / 2)):
        if str[i] != str[len(str) - i]:
            return False
    return True
","def palindromic (sta):
for i in range (int (len (str)/2)):
if str[i] != str [len (str)-i]:.
return False
return True",41,"def palindromic (str)):
for i in range (int (len (str) 12)):
if str [i] ! = str [len (str)-i]:- -
return False
return True",42,"def palindromic (stro):
for i in range (int (len(str)/2)):
if stro [i] ! = str [len(stn) -i] :
return False
return True",42,"def palindromic (str):
for \( i \) in range \( ( \) int \( (\operatorname{len}( \) stro \( ) / 2)) \) :
if \( s+r[i] !=\operatorname{str}[\operatorname{len}(s \operatorname{st})-i]: \)
return False
return True",117
"def factorial(n):
    result = n * factorial(n - 1)
    return result
","def factorial (n):
result = n* factorial (n-1)
return sesut result",20,"def factorial (h):
result = n
factorial (n-1) -
return result result",23,"def factorial (n):
result = n * factorial (n-1)
return result",13,"def factorial \( (n) \) :
\[
\text { result }=n * \text { factorial }(n-1)
\]
return result",36
"def fibonacci(n):
    sequence = [0, 1]
    i = 0
    while len(sequence) <= n:
        sequence.append(sequence[i + 1] + sequence[i + 2])
        i += 1
    return sequence
result = fibonacci(5)
print(result)
","def fibonacci (n):
sequence = [0,1]
1 = 0
while len (sequence) <=n:
sequence. append (sequence [i+1] + sequence [i+2])
i+=1
return sequence
result = fibonacci (5)
print (result)",50,"def fibonacci (n):
sequence = [0,1]
1=0
while len (sequence) <=n:
sequence. append (sequence [i+1] + sequence [i+2])
it=1
return sequence
result = fibonacci (5)
print (result)",53,"def fibonacci (n):
sequence = [0,1]
1 = 0
while len (sequence> <= n:
sequence. append (sequence [+]+ sequence [i+2]
it = 1
return sequence
result = fibonacci (5)
print (result)",54,"def fibmacci \( (n) \) :
sequence \( =[0,1] \)
\[
i=0
\]
while len (sequence) \( <=n \) :
sequence. append (sequence \( [i+1]+ \) sequence \( [i+2]) \) \( i+=1 \)
return sequence
result = fibonaeci (5)
print (result)",73
"def CountFrequency(my_list):
    freq = {}
    for item in my_list:
        freq[item] += 1
    return freq
","def Count Frequency (my-list):
freq = { } !!
for item in my-list:
freq [item] + = 1
return freq",28,"def Count Frequency (my-list):
freq = { }
for item in my-list :
freq [item] += 1
return freq",28,"def CountFrequency (my-list):
freq = { }
for item in my-list:
freq [item]+=1
return freq",28,"def Count Frequency (my-list):
\[
\text { freq }=\{\}
\]
for item in my-list:
\[
\text { freg [item] }+=1
\]
return freq",38
"def twoSum(nums, target):
    for i in range(len(nums)):
        for p in range(i, len(nums)):
            if nums[i] + nums[p] == target:
                return [i, p]
","def two Sam (nams, tanget):
Son i
for
in pange (len (nama)) :
Pin
Pange (i, Lon(namp))!
if (nams [i] + nump [P] == tanget)!
petanu [1, p]",84,"def two Sam(nams, tanget):
for i in range(dev (nams)) :
for P in range(i) (an(nams)):
if(names [i] -namp[p] == tanget):
retann [i, p]",67,"def two Sam (nams, target):
for i in range (len (nams) :
for p in range (i) Lan (namp):
if (names [i] + numa[P] == fanget):
Detunn [i, P]",69,"def two Sam (nams, tanget): for: in pange (len (nams)):
for \( p \) in pange \( (i) \operatorname{len}( \) nams \( )) \) :
\[
\text { if (naws }[i]+\operatorname{nams}[p]==\text { tanget }) \text { ! }
\]
\( \operatorname{retanx}[i, P] \)",139
"def Remove(duplicate):
	for num in duplicate:
	final_list = []
	if num not in final_list:
		final_list.append(num)
	return final_list
","des Remove (duplicate):
Son nam in duplicate:
Simal - Lint = []
if
not in final-lint:
Sinal - lint- append (num)
pefunn final-lint
Mum",41,"def Removeldaplicate):
for nam in daplicats:
Sival-Lint = []
if nvm not in final-lint:
Sinal_lint.append (num)
return final-lint",25,"des Remove (duplicate):
for wam in duplicate:
Sinal-Lint = []
if num not in final-list :
final-lint. append(num)
return final-lint",22,"def Remove(daplicate):
for nam in daplicate:
final-Lint \( =[] \)
if num not in final-lint:
final_lint append (num)
refunu final-lint",29
"def even_or_odd(number):
    if number / 2 == 0:
        return ""Even""
    if number / 2 != 0:
        return ""Odd""
","def even on-odd (number):
if numben / 2 == 0:
petann ""Even""
if numbers 12 !=0%
return ""Old""",39,"def even on-odd(number):
if number 12==0:
retann ""Even""
if number 12 !=0:
return ""odd""",38,"det even-or-odd (number):
if number /2=0:
Detann ""Even""
if number 12 != 0:
retain ""Odd""",40,"Lef even-or-odd(namber):
if numben \( / 2==0 \) :
retann ""Even""
if number \( 12 !=0 \) : retarn ""Odd"".",41
"def upper_lower_count(str):
    upper_case = 0
    lower_case = 0
    for char in str:
        if char.isupper():
            upper_case += 1
        else:
            lower_case += 1
    return upper_case, lower_case
","def
uppen - lower_count (nto):
Upper- cape =
= 0
lower - Cape = 0
for chap in ptp:
is chan, inupper():
upper-cane + = 1
elpe:
lower-case + =
= 1
peturn upper-care, lower cape",94,"daf -
Upper- case = 0
lower - case = 0
for char in str:
if char, inupperu: /
upper-cane += 1
else:
lower-case. += 1
return upper - cape, lowercape",102,"daf
upper-lower-count (sto):
Upper-case = 0
lower-case = 0
for char in str.
if chan, inupper():
upper-case +=1
elpe:
lower-case += 1
return upper-care, lowercase",78,"def upper-lower-count(ntr):
\[
\begin{array}{l}
\text { Upper-case }=0 \\
\text { lower-case }=0
\end{array}
\]
for char in str:
if char. isupper:
\[
\text { upper-case }+=1
\]
elre:
\[
\text { lower-case }+=1
\]
return upper-care, lowercase",113
"def multiply(numbers):
    total = 0
    for x in numbers:
        total *= x
    return total
","def multiply (numboon);
total = 0
for je in numberni
total ** = se
peturn total
moppen:
Mape
lowen cone",55,"def multiply (numbers):
total = 0
for xc in numbern:
total *= re
return total
mopper",31,"det multiply (numbers);
total= 0
for se in numbers:
total * = Je
return total
Tony Upper case. la",47,"def maltiply (numbons):
total \( =0 \)
for \( x \) in nambern!
total \( *=x \)
return total",41