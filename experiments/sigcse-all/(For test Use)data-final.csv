Ground Truth,Model Temperature,GCV,ED GCV,GCV LM Low,ED GCV LM Low,GCV LM Medium,ED GCV LM Medium,GCV LM High,ED GCV LM High,AWS,ED AWS,AWS LM Low,ED AWS LM Low,AWS LM Medium,ED AWS LM Medium,AWS LM High,ED AWS LM High,Azure,ED Azure,Azure LM Low,ED Azure LM Low,Azure LM Medium,ED Azure LM Medium,Azure LM High,ED Azure LM High,MP,ED MP,MP LM Low,ED MP LM Low,MP LM Medium,ED MP LM Medium,MP LM High,ED MP LM High
"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",0,"int (input (""Enter a number: "")
num =
Ans =)
while num > 1:
Ans * = num
num - =|
1
return Ans",29,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int input C ""Enter a number: 11)
Ans = )
while num > / :
Ans * = num
mm - = /
return Ans",23,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",0,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int (input (""Enter a number: ""
Ans =1
while num > 1 :
Ans * = num
num -= 1
return Ans",16,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int (input (""Enter a number: "")
\[
\text { Ans = } 1
\]
while num \( >1 \) :
Ans \( *= \) num
mum - \( =1 \)
retirn Ans",45,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",0,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",0,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",0
"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
    turn_right()
    move()
    turn_left()
    move()


# This function return to Karel's starting point.
def go_back():
    for i in range(2):
        turn_left()
    for i in range(3):
        move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left


if __name__ == ""__main__"":
    main()
",0,"from Karel. stanfordkarel import *
#This
program
a beeper and
def main ():
if
Karel pick
up
back into her house,
#Move to the beeper.
makes
go
move beeper ()
#Pick the beeper up.
beeper ()
pick
#Return to Karel's starting point.
go-back ()
#This function moves Karel to the beeper.
def move-beeper ():
for i in
(2):
range
move()
turn right()
move()
turn left()
move()
# This function return to Kard's starting
def go-back();
for ?. in range
turn-left()
for i
name
main ()
move()
turn_right()
move (f
turn-right()
def turn_right()
for i in range (3) =
turn-
left
rang
e (3);
==
main____'",257,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_to_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_to_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# This function returns to Karel's starting point.
def go_back():
    for i in range(2):
        turn_left()
        for i in range(2):
            move()
            turn_right()
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",59,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_to_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_to_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# This function returns to Karel's starting point.
def go_back():
    for i in range(2):
        turn_left()
        for i in range(3):
            move()
            turn_right()
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",58,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_to_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_to_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# This function returns to Karel's starting point.
def go_back():
    for i in range(2):
        turn_left()
        for i in range(2):
            move()
        turn_right()
        move()
        turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",46,"from Karel. stanfor dkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main () :
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick - - beeper
# Return to Karel's starting point.
go back ( )
# This function moves Karel to the beeper.
def move - -beeper ( ) :
for i in range (2) :
move ()
torn right ()
move ( )
turn left( )
movel )
# this function return to Karel's starting poin
def go-back() ; for i. in range (2) :
turn- left ()
for i in rang e (3) :
move()
turn-right
()
turn move() - right ()
def turn right ():
for i in range (3)
turn - left
if
name
main
main ()",195,"from karel.stanfordkarel import *

# This program makes Karel pick up
# a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# this function return to Karel's starting point
def go_back():
    for i in range(2):
        turn_left()
    for i in range(3):
        move()
        turn_right()
        move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",43,"from karel.stanfordkarel import *

# This program makes Karel pick up
# a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# this function return to Karel's starting point
def go_back():
    for i in range(2):
        turn_left()
    for i in range(3):
        move()
        turn_right()
        move()
        turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",34,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_to_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_to_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# This function returns to Karel's starting point.
def go_back():
    for i in range(2):
        turn_left()
    for i in range(3):
        move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",25,"from Karel. stanfordkarel import *
# This program makes Kavel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick- beeper ()
# Return to Karel's starting point.
go - back ()
# This function moves karel to the beeper.
def move-beeper ():
for i in range (2):
move ()
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back ();
For ?. in range (2):
turn-left ()
for i in range (3):
move()
turn right ()
move (),
turn-right ()
def turn-right () ?
for i in range (3):
turn-left
if -- name == ' -- main_';
main ()",177,"from karel.stanfordkarel import *

# This program makes Karel pick up
# a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# this function return to Karel's starting point
def go_back():
    for i in range(2):
        turn_left()
        for i in range(3):
            move()
        turn_right()
        move()
        turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",43,"from karel.stanfordkarel import *

# This program makes Karel pick up
# a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# this function return to Karel's starting point
def go_back():
    for i in range(2):
        turn_left()
        for i in range(3):
            move()
        turn_right()
        move()
        turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",43,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_to_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_to_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# This function returns to Karel's starting point.
def go_back():
    for i in range(2):
        turn_left()
        for i in range(3):
            move()
        turn_right()
        move()
        turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",45,"from Karel.stanfordkarel import * \#This program makes Karel pick up a beeper and go back into her house. def main ():
\#Move to the beeper. move_beeper () \# Pick the beeper up. pick - beeper () \# Return to Karel's starting point. go-back ()
\#This function moves Karel to the beeper. def move-beeper ():
for \( i \) in range (2):
move ()
turn right ()
move ()
turn leftc)
movec)
\# this function refurn to Karel's starting poin def go-back () ;
for i, in range (2):
for \( i \) in range \( (3) \) :
move ()
\[
\text { move ( } \text { tor }^{2} \mathrm{righ}(\mathrm{C})
\]
def turn-right () ?
for \( i \) in range (3):
turn-left
\[
\text { if } \operatorname{mame}_{\operatorname{man}()}==1 \ldots \text { main } \ldots
\]
\( m \operatorname{ain}() \)",306,"from Karel.stanfordkarel import *

# This program makes Karel pick up
# a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
    turn_right()
    move()
    turn_left()
    move()


# this function return to Karel's starting point
def go_back():
    for i in range(2):
        for i in range(3):
            move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",47,"from Karel.stanfordkarel import *

# This program makes Karel pick up
# a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
    turn_right()
    move()
    turn_left()
    move()


# this function return to Karel's starting point
def go_back():
    for i in range(2):
        for i in range(3):
            move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",47,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_to_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_to_beeper():
    for i in range(2):
        move()
    turn_right()
    move()
    turn_left()
    move()


# This function returns to Karel's starting point.
def go_back():
    for i in range(2):
        for i in range(3):
            move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",49
"def main():
    # input
    my_word = input(""Enter the original word: "")

    # function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is"" + "" "" + '""' + reversed_word + '""')


# Helper function
def reverse(word):
    # reversed_word
    new_word = """"
    # char by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word


if __name__ == ""__main__"":
    main()
",0,"def main ()
#imput
my _ word = imput(""Entlo- The original wood: 7)
#Function calling
reversed word = reverse (my-word)
Print ('The
reversed wood is 1+`
#Helper FunctTION
def
Lif
reverse (woord):
#reversed -won-d
mew-won-d=""/
☆ ster by chan-
for chan- im word:
new-woo-d
return
return new_wond
mame
main()
A/
+revered_word +
=char + new-wood",210,"def main():
    # input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is "" + reversed_word)


# Helper FUNCTION
def reverse(word):
    # reversed word
    new_word = """"
    # step by char
    for char in word:
        new_word = char + new_word
    return new_word


main()
",77,"def main():
    # input
    my_word = input(""Enter the original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is "" + reversed_word)


# Helper Function
def reverse(word):
    # reversed word
    new_word = """"
    # step by char
    for char in word:
        new_word = char + new_word
    return new_word


main()
",69,"def main():
    # input
    my_word = input(""Enter the original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is "" + reversed_word)


# Helper Function
def reverse(word):
    # reversed word
    new_word = """"
    # step by char
    for char in word:
        new_word = char + new_word
    return new_word


main()
",69,"def main () :
# imput
my wond = inpuTC ""Enter THe original wond:
7)
#
Function calling
reversed_word = reverse (my - -word )
print C' the reversed Wood is + , + "" , + reversd-wordt 1/2)
# Helpen Function
def reverse (wond) :
# revenued -wond
new -wohd - = "" ""
# stert by chan-
for chan- in word :
new-word = Char + new-word
# retun-m
retuntm new_wond
if
name == main :
mainc)",150,"def main():
    # input
    my_word = input(""Enter The original word: "")
    #
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)
    # Helper Function


def reverse(word):
    # reversed-word
    new_word = """"
    # start by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word


if __name__ == ""__main__"":
    main()
",34,"def main():
    # input
    my_word = input(""Enter the original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "", reversed_word)


# Helper Function
def reverse(word):
    # reversed-word
    new_word = """"
    # start by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word


if __name__ == ""__main__"":
    main()
",26,"def main():
    # input
    my_word = input(""Enter the original word: "")

    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "", reversed_word)


# Helper Function
def reverse(word):
    # reversed_word
    new_word = """"
    # start by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word


if __name__ == ""__main__"":
    main()
",24,"def main ( ) :
Limput
my _ word = input( Enten- The original word : 7
#Function calling
reversed- word = reverse (my-word )
Print ( the reversed word is (+) ""+""""+reversed-wordt""}
# Helpen- Function
def sevense
be (word) :
# reversed - word
mew-word = """"
A chen by chan-
For- chan- in word:
new-word = Char + new-word
# return
return new_word
name-
main 1 :
main ()",149,"def main():
    my_word = input(""Enter the original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)


# Helper Function
def reverse(word):
    # reversed - word
    new_word = """"
    # A char by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word


if __name__ == ""__main__"":
    main()
",37,"def main():
    my_word = input(""Enter the original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)


# Helper Function
def reverse(word):
    # reversed - word
    new_word = """"
    # A char by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word


if __name__ == ""__main__"":
    main()
",37,"def main():
    my_word = input(""Enter The original word: "")
    # Function calling
    def reverse(word):
        # reversed - word
        new_word = """"
        # A char by char
        for char in word:
            new_word = char + new_word
        # return
        return new_word

    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)


if __name__ == ""__main__"":
    main()
",200,"defmaim ():
\&imput
\( m y \)-wond = impuT (""EnTen- THe onigimal wond: "")
Function calling
\# Helpen-Fumction
\[
\begin{array}{l}
\text { def nevense (won-d): } \\
\text { * revensed -won-d } \\
\text { mew-won-d = ""1 } \\
\text { X stent by chan- } \\
\text { for chan- im vond: } \\
\text { mew-won-d = chan }+ \text { mew-wond } \\
\text { * } r \text {-etun-m } \\
\text { nietuntm new-won-d } \\
\end{array}
\]",298,"def main():
    my_word = input(""Enter the original word: "")
    # Function calling
    # Helper Function
    def reverse(word):
        reversed_word = """"
        for char in word:
            reversed_word = char + reversed_word
        return reversed_word
",224,"def main():
    my_word = input(""Enter the original word: "")
    # Function calling
    # Helper Function


def reverse(word):
    reversed_word = """"
    for char in word:
        reversed_word = char + reversed_word
    return reversed_word
",220,"def main():
    my_word = input(""Enter the original word: "")
    # Function calling
    reverse(my_word)


# Helper Function
def reverse(word):
    reversed_word = """"
    for char in word:
        reversed_word = char + reversed_word
    return reversed_word
",199
"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial for "" + str(input_nmb) + "" is "" + str(result))
",0,"impur-number =
int(impur (""Enter number'))
val = inpur-number
result isput_number
while (val > 1):
Val - 1
result ☆ val
+
Print ('factorial for 't shy (input-node]
+ srr (result))
val
[₁
-result",80,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val -= 1
    result *= val

print(""factorial for "" + str(input_number) + "" is "" + str(result))
val -= 1
result
",37,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val -= 1
    result *= val

print(""factorial for "" + str(input_number) + "" is "" + str(result))
",21,"input_number = int(input(""Enter number: ""))
val = input_number
result = input_number
while val > 1:
    val -= 1
    result *= val

print(""Factorial for "" + str(input_number) + "" is "" + str(result))
",24,"impur-number =
inr(inpur ('Enter number')
val = inpur-number
result input-number
while (val > 1) :
[
val =
Val - 1
result = result it val
Print ('factorial fir't shr(imput-nula)
Srr (result))",59,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial for"", str(input_number), str(result))
",16,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial for"", str(input_number), str(result))
",16,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial for"", str(input_number), str(result))
",16,"inpur_number =
int(impur (""Enter number""
Val = inpur-number
result = input-number
While (val>1):
val =
val -1
result = result & val
print ('factorial f& + sur(input-node)
+ spr (result))",50,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial of "" + str(input_number) + "" is "" + str(result))
",5,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial of "" + str(input_number) + "" is "" + str(result))
",5,"input_number = int(input(""Enter number: ""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial of "" + str(input_number) + "" is "" + str(result))
",7,\( \begin{array}{l}\text { inpur-number = } \\ \text { inr(inpur('Entar number')) } \\ \text { val }=\text { impur-number } \\ \text { resalt - roppur-number } \\ \text { while (val }>1 \text { ): } \\ {\left[\begin{array}{c}\text { val }= \\ \text { result }=\text { result }-1 \\ \text { val }\end{array}\right.} \\ \text { pront ('factobial for' + shr(impat-nob) } \\ +\operatorname{srr}(\text { result })) \\\end{array} \),273,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = result = result - 1
print(""factorial for"" + str(input_number) + str(result))
",28,":
input_number = int(input('Enter number'))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print ('factorial for ' + str(input_number) + ' is ' + str(result))
",14,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val -= 1
    result *= val
print(""factorial for "" + str(input_number) + "" is "" + str(result))
",20
"def main():
    num = input(""input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",0,"def main ():
num = input (""imput :"")
sum
=
O
for nin num =
sum t
print (sum)
=
int (n)",49,"def main():
    num = input(""input :"")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",2,"def main():
    num = input(""input :"")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",2,"def main():
    num = input(""Input :"")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",3,"def main () :
num = input (""Input: "")
sum = 0
for n in num i
sum + = int (n)
print (sum)",33,"def main():
    num = input(""Input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main():
    num = input(""Input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main():
    num = input(""Input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main () :
num = input (""Input : "")
sum = 0
for n in num :
sum + = int (n)
print (sum)",34,"def main():
    num = input(""Input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main():
    num = input(""Input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main():
    num = input(""Input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def \( \operatorname{main}(C) \) :
\[
\begin{array}{l}
\text { num }=\text { input (""input: "") } \\
\text { sum }=0
\end{array}
\]
for \( n \) in num:
\[
\operatorname{sum} t=\operatorname{int}(n)
\]
print (sum)",132,"def main(C):
    num = input(""input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main(C):
    num = input(""input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main(C):
    num = input(""input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1
"def main():
    num = input(""enter the number you want to add"")
    sum = 0
    for i in str(num):
        sum = sum + int(i)
    print(""sum of the value you entered is"", sum)
",0,"def main (s.
()!
61508x08 09
0818 TU O sloj toč
num= Impot (""enter the number you want to add)
поше
Inpri
som = 0 101
zgnivoe nuovesimixam
=0
(AD) tizoged to stopilitie nod ovoseido gnieod
aliotab ort eromeH ab10001 100 ot ti of no blert ezabelą - moosoo ucy to noilomitnoo ei tohol zid
for i in str(num): com
35100 suzel
8181882405
Sum=somt int (i)
edmult inucA
telti tuossA
""mis
Print (""sum of the value you entered is, son)
HILOM
00.000,82
log
alpä yliutoM
noitq Inomseudaid 12915ml
ASOS SS VOM
noitosilofigo inayo?
LF1",375,"def main():
    num = input(""enter the number you want to add"")
    sum = 0
    for i in str(num):
        sum = sum + int(i)
    print(""sum of the value you entered is"", sum)
",0,".python
def main():
    num = input(""enter the number you want to add"")
    sum = 0
    for i in str(num):
        sum = sum + int(i)
    print(""sum of the value you entered is"", sum)
",8,"def main():
    num = input(""Enter the number you want to add: "")
    sum = 0
    for i in str(num):
        sum += int(i)
    print(""Sum of the values you entered is: "", sum)


main()
",23,"SINOE
808
09
def main(s)
num= Imput (""enter the number you want to odd"")
UOV
Sum = 0
estimixom
(I)
tizoqeC
to
stooilities
@dno8
covocaiC
o
UOV
Andri
alinteb
310
enelt
ab10007
no
blort
mov
to
for i in str(mum);ass YDM
hedmuff
Sum-Sumt int (i)
reltiT
00.000,E8
Print (""sum of the Value you entered is, blan sum)
ASOS SS VDM
virutoM
noitosilation
;hoita
LA",227,"def main():
    num = input(""enter the number you want to add"")
    Sum = 0
    for i in str(num):
        Sum = Sum + int(i)
    print(""sum of the values you entered is"", Sum)
    return
",16,"def main():
    num = input(""enter the number you want to add"")
    Sum = 0
    for i in str(num):
        Sum = Sum + int(i)
    print(""sum of the Value you entered is"", Sum)
    return
",16,"def main():
    num = input(""Enter the number you want to add: "")
    Sum = 0
    for i in str(num):
        Sum = Sum + int(i)
    print(""Sum of the values you entered is: "", Sum)
    return


main()
",31,"def main () .
08168 TU
11
num = input (""enter the number you want to add )
Som=0
zpnivo
1ovoseidl o prieoorla
hotel
heH
ab
ot ti of no blerl gabelq
for è in str (num) :
Vi inucoDA
Sum = Sum+ int (i)
raltil touo >A
Print (""sum of the value you entered in, som)
00.000
.1
noitosil
noitgo Inemoanu
LFT",154,"def main():
    num = input(""enter the number you want to add: "")
    Sum = 0
    for i in str(num):
        Sum = Sum + int(i)
    print(""sum of the values you entered is"", Sum)
",7,"def main():
    num = input(""enter the number you want to add: "")
    Sum = 0
    for i in str(num):
        Sum = Sum + int(i)
    print(""sum of the value you entered is"", Sum)
    return
",17,"def main():
    num = input(""Enter the number you want to add: "")
    Sum = 0
    for i in str(num):
        Sum = Sum + int(i)
    print(""Sum of the values you entered is: "", Sum)
",11,"def main () :
num = Imput (""enter the number youcust to add"")
\[
\text { sum }=0
\]
for i in Mtr(num):
\[
\text { sum }=\operatorname{sum}+\operatorname{int}(i)
\]
Print (""sum or the valee yor entered is"", sum)",79,"def main():
    num = input(""enter the number you want to add"")
    sum = 0
    for i in str(num):
        sum = sum + int(i)
    print(""sum of the values you entered is"", sum)
",1,"def main():
    num = input(""enter the number you want to add"")
    sum = 0
    for i in str(num):
        sum = sum + int(i)
    print(""sum of the value you entered is"", sum)
",0,"def main():
    num = input(""Enter the number you want to add: "")
    sum = 0
    for i in str(num):
        sum = sum + int(i)
    print(""Sum of the values you entered is"", sum)
",5
"user_input = input(""Write your string here: "")
upper = user_input.upper()
print(upper)
",0,"input = imput ( ""write your string
user_ input. upper (1
user_
upper = user_ input
print (upper)
here: "")",50,"input = input(""write your string: "")
user_input = input.upper()
print(user_input)
",29,"user_input = input(""write your string here: "")
user_upper = user_input.upper()
print(user_upper)
",11,"user_input = input(""Write your string here: "")
user_upper = user_input.upper()
print(user_upper)
",10,"user_input = input(""write your string here:
1)
upper = user_input. upper(1
print (upper)",7,"user_input = input(""write your string here:"")
upper = user_input.upper()
print(upper)
",2,"user_input = input(""write your string here: "")
upper = user_input.upper()
print(upper)
",1,"user_input = input(""write your string here: "")
upper = user_input.upper()
print(upper)
",1,"user-input = input(""write your string here:
11
Upper = user_input. upper()
print (upper)",9,"user_input = input(""write your string here: "")
Upper = user_input.upper()
print(Upper)
",3,"user_input = input(""write your string here: "")
Upper = user_input.upper()
print(Upper)
",3,"user_input = input(""write your string here: "")
Upper = user_input.upper()
print(Upper)
",3,"user-input = imput (""write your string here: "") upper \( = \) user input upper ( ) print (upper)",18,"user_input = input(""write your string here: "")
upper = user_input.upper()
print(upper)
",1,"user_input = input(""write your string here: "")
upper = user_input.upper()
print(upper)
",1,"user_input = input(""write your string here: "")
upper = user_input.upper()
print(upper)
",1
"from karel.stanfordkarel import *

""""""
Karel should fill the whole world with beepers.
""""""


def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",0,"*
from Karel, starfordkarel import
han
kanel should fill the world with beepers.
1100
def main ():
#decomposition using a
function
#each associated
while left_ is_clear():
fill_one_row()
return_to_row_start()
activity
паме
for
move_up()
#rewrite code after white loop to overcome
# fencepost bug
one-how ()
fill_",121,"
from karel.stanfordkarel import *

# Karel should fill the world with beepers.
def main():
    # Decomposition using a function
    # Each associated
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
    # Activity
    for move_up():
        # Rewrite code after while loop to overcome
        # Fencepost bug
        one_row()
        fill_row()
",87,"from karel.stanfordkarel import *

# Karel should fill the world with beepers.
def main():
    # Decomposition using a function
    # Each associated
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # Rewrite code after while loop to overcome fencepost bug
    fill_one_row()
",43,"from karel.stanfordkarel import *

# Karel should fill the world with beepers.
def main():
    # Decomposition using a function
    # Each associated
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # Rewrite code after while loop to overcome fencepost bug
    fill_one_row()


def fill_one_row():
    pass


def return_to_row_start():
    pass


def move_up():
    pass
",138,"from karel. stanfordkarel import
will
karel should fill the world with beepers.
1110
def main() :
# decomposition using a function name for
# each associated activity
while left_is-clean
retur_to_row- start()
fill_one-row()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill - one - -row()",105,"from karel.stanfordkarel import *

# karel should fill the world with beepers.


def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clean:
        return_to_row_start()
        fill_one_row()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",48,"from karel.stanfordkarel import *

# karel should fill the world with beepers.
def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clean:
        return_to_row_start()
        fill_one_row()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",50,"from karel.stanfordkarel import *

# Karel should fill the world with beepers.
def main():
    # Decomposition using a function name for
    # each associated activity
    while left_is_clear():
        return_to_row_start()
        fill_one_row()
        move_up()
    # Rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",48,"from Karel. stanfordkarel import *
hun
Karel should fill the world with keepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()",79,".python
from karel.stanfordkarel import *

# Karel should fill the world with beepers.
def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",24,".python
from karel.stanfordkarel import *

# Karel should fill the world with beepers.
def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",24,"from karel.stanfordkarel import *

# Karel should fill the world with beepers.
def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",16,"from karel.stayfordkarel inport
IIII""
karel should fill the world with beepers.
""u u
\( \operatorname{def} \operatorname{main}() \) :
\# decomposition using a function rave for \# each associated activity while left-is_clear ():
fill-ore-row()
retur _to _ row_start \( ( \) )
nove_up ()
\# rewirite code after white loop to overcone \# fencepost bug
fill_one-row()",118,"from karel.stanfordkarel import *

""""""
karel should fill the world with beepers.
""""""


def main():
    # decomposition using a function for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",12,"from karel.stanfordkarel import *

""""""
karel should fill the world with beepers.
""""""


def main():
    # decomposition using a function rave for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after white loop to overcome
    # fencepost bug
    fill_one_row()
",10,"from karel.stanfordkarel import *

""""""
karel should fill the world with beepers.
""""""


def main():
    # decomposition using a function for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",12
"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"if
from karel.stanfordkarel import*
def main ()
move()
move()
turn_right()
move()
turn_left()
move()
-
pick-beeper()
return-home()
def return home()
turn-around()
move()
turn_right()
move ()
turn_left()
movel)
move()
turn_around ()
def turn_right()
for i in range (3):
turn-left()
def turn around ()
for i in range (2):
turn_left()
name.
main()
^_main_",144,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stamfordkaral import
def main()
move()
move()
turn-right(
move()
turn-left()
move()
pick. beeper()
return-home()
def return_home()
t#urn_around()
move()
turn_right(?
move ()
turn- left()
movel)
move()
turn_around()
def turn-right()
for i in range (3):
turn- left()
def turn. around ()
for i in range (2):
turn-left()
if name - main' :
mainl",146,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",11,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel. stanfordkarel import*
det main ()
move()
move()
turn-right ()
move()
turn-left()
move()
pick-beeper()
return-home()
def return_home()
turn-around()
move()
turn-right ()
move ()
turn-left ()
move()
move()
turn-around()
det turn-right()
for i in range (3):
turn-left ()
def turn- around()
for i in range (2):
turn-left ()
if
name
== '_main ' :
main()",144,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel. stanfordkarel import *
def main ()
move ()
move()
turn-right ()
move ()
turn-leff()
move ()
pick-beeper ()
return-home()
def return_home()
trurn_around()
move ()
turn_right()
move ()
turn_left ()
movel)
move ()
turn_around ()
def turn-right ()
for \( i \) in range (3):
turn-left ()
def turn around()
for \( i \) in range (2):
turn-left \( ( \) )
if \( \operatorname{mame}_{-\operatorname{main}()}== \) __main', :",193,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0
"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]

    input_string = input(""Enter the string: "")
    input_string = input_string.lower()

    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1

    print(vowel_count)


if __name__ == ""__main__"":
    main()
",0,"def main ():
rauel caunl=0
vawels = ['a', 'e', 'i', '0', 'u']
""input-string = ""input (""Enter the string:"")
impret string = ""impret_string= lawer ()
for chaor in `imput string:
for vauvel in vamels:
if char = = vowel:
vauvel_cament + = 1
point (vowel count)
`__main_
y__name__ =
main ()
INN
':",148,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",4,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",4,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",4,"dy main ():
vawel_count==0
vawels ['a' 'e' ii, 'o', 'u' ]
input- string= input (""Enter the striegn""."")
input string. lower()
for char in input string:
for vawel 'en vawels:
if char== vowel:
valuel-calest += 1
point (newel count)
if name main__':
main()",146,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string: "")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",3,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string: "")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",3,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string: "")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",3,"de main () :
vowel-count=0
vowels= ['à','e', 'i', 'o','u']
input_string = input (""Enter the string:"")
input string = input_string . lower ()
for char in input string:
for vowel in vowels :
if char == vawel:
vowel-count +=1
print (nouvel count)
if _name_ = = '_main _- ':
main ()",115,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",4,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",4,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",4,"de main ():
vouel caunt \( =0 \)
input_string = input (""Enter the string:"")
input_string = inpet_string. lawer()
for choor in input string:
for vauel 'en vauch:
if char = = vouel:
valuel-caunt \( +=1 \)
print (veuel caunt)
\[
\begin{array}{l}
\text { if _-name__ }==\text { '_ main_- } \\
\operatorname{main}() \\
\end{array}
\]",210,"def main():
    vowel_count = 0
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in ""aeiou"":
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",50,"def main():
    vowel_count = 0
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in ""aeiou"":
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",50,"def main():
    vowel_count = 0
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in ""aeiou"":
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",50
"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])
",0,"def main ():
string = str (input ('Enter string: '))
for i in range
print (string[i])
((len(string)-1),-1,-1):
لك
TO
AYS",60,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2,"our
priud
- "") abuse u! ! way
(5, : bureys capul, ) produc) eys = burays
:
()unow top",104,"
our
print
- "") about u! ! way
(5, : burays capul, ) produce) eys = burays
:
()now top

return
",103,"
for proud in ""I abuse you in every way"":
    (s, b): bureys_capul, proud = bureys
    now_top()

return
",100,"I'm sorry, but the provided text doesn't seem to be a valid Python code or it's too distorted to be recognized. Could you please provide a clearer version or describe what the code is supposed to do?",163,"det
main ():
string = str (input ('Enter string: '))
for i in range ((len (string)-1), - 1 ,- 1).
print (string [i])",34,"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])
",0,"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])
",0,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2,"def \( \operatorname{main}( \) ):
\[
\text { string }=\operatorname{str}(\text { input ('Enter string: IJ) }
\]
for \( i \) in range \( (( \) len(string \( )-1),-1,-1) \) : print (string \( [i] \) )",102,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2
"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []


# It check every element in list(sequence) --
for i in seq:
    # It decides whether an element from sequence is even ---
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list(seq_even)

print(seq_even)
",0,"seq - [1, 2, 3, 4, 5, 6, 7, 8, 9]
seg - even = []
#It checks every element in dist (sequence)--
for i in seq:
#it decides whether an element from sequence is even ---
if i % 2 == 0:
seq-even. append(i) #appends even i in empty list (seq-even)
print (seq-even)",40,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in seq (sequence)--
for i in seq:
    # it decides whether an element from sequence is even ---
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list (seq_even)
print(seq_even)
",11,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in seq (sequence)--
for i in seq:
    # it decides whether an element from sequence is even ---
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list (seq_even)
print(seq_even)
",11,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in seq (sequence)--
for i in seq:
    # it decides whether an element from sequence is even ---
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list (seq_even)
print(seq_even)
",11,"seq = [1, 2, 3, 4, 5 , 6, 7, 8, ]
seg even = [ ]
# It checks every element in list (sequence)
for i in seq:
# it decides whether an element from sequence is even
if i % 2 == O:
seq-even. append (i) # appends even i in empty list (seq-even)
print (seq-even)",44,"seq = [
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
]
seq_even = []
# It checks every element in list (sequence)
for i in seq:
    # it decides whether an element from sequence is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list (seq_even)
print(seq_even)
",49,"seq = [
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
]
seq_even = []
# It checks every element in list (sequence)
for i in seq:
    # it decides whether an element from sequence is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list (seq_even)
print(seq_even)
",49,"seq = [1, 2, 3, 4, 5, 6, 7, 8]
seq_even = []
# It checks every element in list (sequence)
for i in seq:
    # it decides whether an element from sequence is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list (seq_even)
print(seq_even)
",17,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9]
Seg-even=[]
# It checks every element in list (sequence) - --
for i in seg:
# it decides whether an element from sequence is even --.
if i % 2 = = 0:
seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)",46,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in list (sequence) - --
for i in seq:
    # it decides whether an element from sequence is even --.
    if i % 2 == 0:
        seq_even.append(i)  # appends even ; in empty list (seq_even)
print(seq_even)
",11,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in list (sequence) - --
for i in seq:
    # it decides whether an element from sequence is even --.
    if i % 2 == 0:
        seq_even.append(i)  # appends even ; in empty list (seq-even)
print(seq_even)
",12,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in list (sequence)
for i in seq:
    # it decides whether an element from sequence is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even numbers in empty list (seq_even)
print(seq_even)
",21,"\[
\begin{array}{l}
\text { seq }=[1,2,3,4,5,6,7,8,9] \\
\text { seq-even }=[]
\end{array}
\]
\# It checks every element in dist(sequence.).for \( i \) in seq:
\# it decides whether an clement from sequence is even -.. if \( i \% 2==0 \) :
seq-even. append ( \( i \) ) \# appends even \( i \) in empty list (seq-even) print (seq-even)",127,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []

# It checks every element in seq
for i in seq:
    # it decides whether an element from sequence is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list seq_even
print(seq_even)
",24,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []

# It checks every element in seq
for i in seq:
    # it decides whether an element from sequence is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list seq_even
print(seq_even)
",24,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []

# It checks every element in seq
for i in seq:
    # it decides whether an element from sequence is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list seq_even

print(seq_even)
",23
"from graphics import Canvas

CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01

def main:
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    

    while TRUE

        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        
        if mouse_x >= 0 and mouse_x <= CANVAS_WIDTH and mouse_y >=0 and mouse_y <= CANVAS_HEIGHT",0,"from
FROM GRAPHICS IMPORT CANVAS
CANVAS_WIDTH = 300
CANVAS-HEIGHT = 300
CIRCLE_SIZE =
DELAY = 0,01
= 20
DEF MAIN:
CANVAS = CANVAS ( CANVAS WIDTH, CANVAS HEIGHT
WHILE TRUE
MOVSE_X = CANVAS. GET_MOUSE_x()
MOUSE-Y = CANVAS. GET MOUSE_Y()
TE
1
IF MOUSE X >= 0 AND MOUSE X E CANVAS_WIDTH
AND MOUSELY TO AND MOUSE_YE CANVAS. HEIGH",203,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x <= canvas_width
            and mouse_y >= 0
            and mouse_y <= canvas_height
        ):
            pass
",170,"from graphics import Canvas

CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01


def main():
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    while True:
        MOUSE_X = canvas.get_mouse_x()
        MOUSE_Y = canvas.get_mouse_y()
        if (
            MOUSE_X >= 0
            and MOUSE_X <= CANVAS_WIDTH
            and MOUSE_Y >= 0
            and MOUSE_Y <= CANVAS_HEIGHT
        ):
            pass
",122,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x <= canvas_width
            and mouse_y >= 0
            and mouse_y <= canvas_height
        ):
            pass
",170,"FROM GRAPHICS IMPORT CANVAS
CANVAS_WIDTH 11 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0,01
DEF MAIN :
CANVAS = CANVAS(CANVAS WIDTH, CANVAS HEC 641)
WHILE TRUE
MOVSE -X = CANVAS. 6ET MOUSE x()
MOV. SE- - Y = CANVAS. GET MOUSE ( ) )
If MOUSE_ x > = U AND MOUSE x t CANUAS_WIDTH
AND NOUSE. -Y >=0 AND MOUSE_YE CANUVAS.HEIGH",199,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x <= canvas_width
            and mouse_y >= 0
            and mouse_y <= canvas_height
        ):
            pass
",170,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x <= canvas_width
            and mouse_y >= 0
            and mouse_y <= canvas_height
        ):
            pass
",170,"from graphics import Canvas

CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01


def main():
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    while True:
        MOUSE_X = canvas.get_mouse_x()
        MOUSE_Y = canvas.get_mouse_y()
        if (
            MOUSE_X >= 0
            and MOUSE_X <= CANVAS_WIDTH
            and MOUSE_Y >= 0
            and MOUSE_Y <= CANVAS_HEIGHT
        ):
            pass
",122,"FROM GRAPHICS IMPORT CANVAS
CANVAS_WIDTH = 300
CANVAS_ HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0,01
DEF MAIN :
CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH)
WHILE TRUE
MOUSE_ X = CANVAS . GET_MOUSE _ X ()
MOUSE- Y = CANVAS . GET MOUSE_ Y ( )
IF MOUSE XT =U AND MOUSE X E CANVAS_WIDTH
AND MOUSELY SEO AND MOUSE-TE CANVAS HEIGH",205,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x <= canvas_width
            and mouse_y >= 0
            and mouse_y <= canvas_height
        ):
            pass
",170,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x <= canvas_width
            and mouse_y >= 0
            and mouse_y <= canvas_height
        ):
            pass
",170,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x <= canvas_width
            and mouse_y >= 0
            and mouse_y <= canvas_height
        ):
            pass
",170,"FRIM GRAPHICS I MPORT CANVAS
\[
\begin{array}{l}
\text { CANVAS_WIDTH }=300 \\
\text { CANVAS_HEl6HT }=300 \\
\text { CIRCLE_SIZE }=20 \\
\text { DELAY = } 0,01
\end{array}
\]
DEF MAIN :
canvas = Canvas ( canvar_ wi DFH, canvas Hec b HT)
WHILE TRUE
\[
\begin{array}{l}
\text { MOVSE-X = CONVAS. GET_MOUSE_X() } \\
\text { MOVSE-Y = CANVAS. GET MOUSE_Y () }
\end{array}
\]
If MOUSE_X \( X=0 \) AND MOUSE_X \( E \) CANUNS_WIOT4 AND NOUSE_Y \( T=0 \) AND MOUSE_YE CH, USS. HEIG",321,"
FROM GRAPHICS IMPORT CANVAS
CANVAS_WIDTH = 300 
CANVAS_HEIGHT = 300 
CIRCLE_SIZE = 20 
DELAY = 0.01

def MAIN():
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    WHILE TRUE:
        MOUSE_X = CANVAS.GET_MOUSE_X() 
        MOUSE_Y = CANVAS.GET_MOUSE_Y() 
        if MOUSE_X >= 0 AND MOUSE_X <= CANVAS_WIDTH AND MOUSE_Y >= 0 AND MOUSE_Y <= CANVAS_HEIGHT:
            pass
",150,"from graphics import Canvas

CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01


def main():
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    while True:
        MOUSE_X = canvas.get_mouse_x()
        MOUSE_Y = canvas.get_mouse_y()
        if (
            MOUSE_X >= 0
            and MOUSE_X <= CANVAS_WIDTH
            and MOUSE_Y >= 0
            and MOUSE_Y <= CANVAS_HEIGHT
        ):
            pass
",122,"from graphics import Canvas

CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01


def main():
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    while True:
        MOUSE_X = canvas.get_mouse_x()
        MOUSE_Y = canvas.get_mouse_y()
        if (
            MOUSE_X >= 0
            and MOUSE_X <= CANVAS_WIDTH
            and MOUSE_Y >= 0
            and MOUSE_Y <= CANVAS_HEIGHT
        ):
            pass
",122
"# 1 karel Problem - karel Home

from karel.stanfordkarel import *

# This program defines a main function which should make Karel
# move to the beeper, pick it up and return home.
def main():
    get_out()
    pick_food()
    get_back_home()


# pre : karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",0,"#1 Karel Problem - Karel home
from Kard Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it and return home.
up
def main ():
GRE_ONE ()
pick-food ()
get back home u
#pre: Karel facing eask, at the corner of starting position.
# posk: Karel facing east, outside the home, at the position of beeper
def get out ():
turn_right()
Move (
turn_left()
Move ()
Move ()
move()
# post
· Karel facing west, at
def pick-food ():
pick beeper ()
turn around ()
#post: Karel facing east, at the corner of starting position
def get back home ():
move ()
Move ()
move()
turn_right()
move ()
turn right (1
def turn right ():
for i in range (3)
turn_left()
def turn around ():
turn_left()
zurn_left()
the position of beeper
if_name__ == '__main_ ' :
main ()",229,"# 1 Karel Problem - Karel home
from Stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it and return home.


def main():
    get_one()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position.
# post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",25,"# 1 Karel Problem - Karel home
from stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it and return home.


def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position.
# post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",22,"# Karel Problem - Karel home
from stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it and return home.


def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position.
# post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",24,"# 1 karel Problem - Karel home
from Karel stanfordkarel import
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main ():
get-one(?
pick_food ()
get_back home ()
# pre : Karel facing east, at Line corner of starting position
# post ! karel facing east, outside the home, at the position of beeper
def get out ()
turn_ right
move ()
turn left ()
move ()
move
move
# post Karel facing west at the position of beeper
10°M
def pick-food () :
beeper ()
turn_ around()
# post: Karel facing east, at the corner of starting position
def get- back home () :
move ()
move
move ()
turn_right ( )
move ()
turn
right ()
def turn right ( )
for i in range (3) :
turn_left
def turn_ around () :
turn_ left ()
turn_ left ()
if name- == '-main-':
main ()",202,"# 1 karel Problem - Karel home
from stanfordkarel import Karel

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre : Karel facing east, at Line corner of starting position
# post : Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west at the position of beeper
def pick_food():
    beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",30,"# 1 karel Problem - Karel home
from stanfordkarel import Karel

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre : Karel facing east, at Line corner of starting position
# post : Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west at the position of beeper


def pick_food():
    beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",32,"# Karel Problem - Karel home
from stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre : Karel facing east, at Line corner of starting position
# post : Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",23,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import*
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre: Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ()
move ()
turn_ left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn-around ( )
# post: Karel facing east, at the corner of starting position
def get_back_home () :
move ()
Move ()
move ()
turn right ()
move ( )
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == - main -:
main ()",179,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",9,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",9,"# Karel Problem - Karel home
from karel.stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",12,"\#1 karel Problem-karel home from karel. Stanfordkarel impork *
\# This program defines a main function which should make karel \# move to the beeper, pick it up and return home
def \( \operatorname{main}() \) :
get_oute \( ( \) )
pick-food ()
get_back_home \( U \)
\# pre: Karel facing eask, at the corner of stomeng position
\# posk: Karel facing east, oukside the home, at the position of beeper
def get_out () :
turn_right ()
move?
turn_left ()
move ()
move ()
move ()
\# post : Karel facing west, at the position of beeper
def pick-food () :
pick_beeper ()
turn_around ()
\# post: karel fring east, at the corner of stonting position def get_back_home ():
move ()
move ()
move ()
turn_right ()
move ()
turn right ( )
def turn right () :
for \( i \) in range (3) :
turn_left ()
def turn around ():
turn_left ()
turn_kft()
if _ name_ \( == \) - main - '
main ()",223,"# 1 karel Problem-karel home
from karel.stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position
# post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post : Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",11,"# 1 karel Problem-karel home
from karel.stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position
# post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post : Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",11,"# karel Problem-karel home
from karel.stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position
# post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post : Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",13
"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial (n):
if n == 0:
return 1
else:
return n* factorial (n-1)
print (factorial (5))",34,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n)
if n==
O:
return 1
else :
return n
factorial (n-1) -
print (factorial(5))",39,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial (n) :
if n=0 :
return 1
else:
return 1 * factorial (n-1)
print (factorial (5)",39,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial \( (n) \) :
if \( n==0 \) :
return 1
else:
return \( n \) * factorial \( (n-1) \)
print (factorial \( (5)) \)",56,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0
"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    list = []

    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                list.append(elem)
    print(list)
",0,"det main 1:
List 1 2 (1,2,3,4]
List 2 = (3,4,5,67
List = []
for elem 1 in list 1 1
for elem2 în list 2:
it olem2 = = elem 2:
elem = elem 2
(N46)
print (list)
list-append (etem)
Livor",118,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    list = []
    for elem1 in list1:
        for elem2 in list2:
            if elem2 == elem1:
                elem = elem2
                print(list)
                list.append(elem)
    return list
",40,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    list = []
    for elem1 in list1:
        for elem2 in list2:
            if elem2 == elem1:
                elem = elem2
                list.append(elem)
    print(list)
    return list
",20,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    list3 = []
    for elem1 in list1:
        for elem2 in list2:
            if elem2 == elem1:
                list3.append(elem2)
    print(list3)
    return list3
",49,"det main O
list 1 2 (1,2,3,4)
list 2 2 (3,4,5,67
List = 17
for elem1 in list 1 :
for elem2 in list2:
it elem1 == elem2:
elem = elem7
list-append (eum)
print (list)",103,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 67]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)


main()
",14,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 67]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)


main()
",14,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)


main()
",13,"det main () :
list 1 2 [1, 2,3,4]
list 2 =
(3,4,5,6)
List = []
for elem1 in list 1?
for eleme in list2:
it elem1 = = elem2?
elem = elem 2
list- append (elem)
print (ist)",101,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                List.append(elem2)
    print(List)


main()
",43,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem2
                List.append(elem)
    print(List)


main()
",14,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                List.append(elem2)
    print(List)


main()
",43,"det \( \operatorname{man}(1) \) :
\[
\begin{array}{l}
\text { list } 1=[1,2,3,4] \\
\text { list } 2=[3,4,5,6] \\
\text { List }=[7] \text { in list } 11 \\
\text { for elem } 1
\end{array}
\]
for elem2 in list2:
it \( \operatorname{elem} 2= \) elem2:
elem = elem 2
list-append (eum)
print (ist)",192,"def man(num):
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = [7]
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem2
                List.append(elem)
    print(List)
",10,"def man(num):
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = [7]
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem2
                List.append(elem)
    print(List)
",10,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                List.append(elem1)
    print(List)


main()
",43
"String = input()
print(String[::-1])
",0,"String = input ()
print (String[::-1])",3,"String = input()
print(String[::-1])
",0,"String = input()
print(String[::-1])
",0,"String = input()
print(String[::-1])
",0,"String = input c)
print (String [:
-
-1])",8,"String = input()
print(String[:-1])
",1,"String = input()
print(String[:-1])
",1,"String = input()
print(String[:-1])
",1,"String = input c)
print (String [ ::- 1])",7,"String = input()
print(String[::-1])
",0,"String = input()
print(String[::-1])
",0,"String = input()
print(String[::-1])
",0,\( \begin{array}{l}\text { String }=\text { input } C) \\ \text { print }(\text { String }[::-1])\end{array} \),77,"String = input()
print(String[::-1])
",0,"String = input()
print(String[::-1])
",0,"String = input()
print(String[::-1])
",0
"from karel.stanfordkarel import *


def main():
    turn_left()
    tower_N()
    tower_S()
    move_4x()
    turn_left()
    tower_N()
    tower_S()


def tower_S():
    turn_3x()
    tower()
    turn_left()


def tower_N():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0,"from Karel. Stanford Rund emport
def main ():
turn-
laft
Tower_N()
tower_S()
Move 4x()
Fern-
-left()
tower_N()
-S()
tower
del
de tower -S():
Furn-3x()
tower ()
turn_left()
del tower _N():
Town ()
turn _ 3x()
move 4x()
def tower (13
for i in
range
(5):
if front_is_clear():
Put-baper (1
movel)
else:
def. Jurn - 3×(1:
turn_left()
leftis
turn-
Turn_left()
()
pest-beeper ()
- Move_4x();
move()
move()
movell
move()
name --
__main__."":
main ()
K",267,"from karel.stanford import *


def main():
    turn_left()
    tower_N()
    tower_S()
    move_4x()
    turn_left()
    tower_N()
    tower_S()


def tower_S():
    turn_3x()
    tower()
    turn_left()


def tower_N():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper(1)
            move()
        else:
            turn_3x()
            turn_left()
            put_beeper()
            move_4x()
            move()
            move()
            move()
            move()


if __name__ == ""__main__"":
    main()
",95,"from karel.stanford import *


def main():
    turn_left()
    tower_N()
    tower_S()
    move_4x()
    turn_left()
    tower_N()
    tower_S()
    tower()


def tower_S():
    turn_3x()
    tower()
    turn_left()


def tower_N():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper(1)
            move()
        else:
            turn_3x()
            turn_left()
            put_beeper()
            move_4x()
            move()
            move()
            move()
            move()


if __name__ == ""__main__"":
    main()
",107,"from karel.stanford import *


def main():
    turn_left()
    tower_N()
    tower_S()
    move_4x()
    turn_left()
    tower_N()
    tower_S()
    tower()


def tower_S():
    turn_3x()
    tower()
    turn_left()


def tower_N():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",56,"from Karel. Stanford Kand import
K
de/ main()
turn-left
tower-NC
tower- sc)
move-4x ( )
turn-lette
tower N()
tower - sc )
de/ tower - s():
turn - 3x()
tower ()
turn - lefter
def tower - NC):
town ()
turn. - 3x()
move 4r ()
def tower ():
for i in range (5) :
if front - clear():
Put-baper (
movel
else:
put. buper()
def turn- 3x(1:
turn- left(1
turn - left
Turn - left ()
del move _4x():
move!!
more!!
movel
move
=='--
if
name
main !)",285,"from Karel.Stanford import K


def main():
    turn_left()
    tower_NC()
    tower_sc()
    move_4x()
    turn_left()
    tower_N()
    tower_sc()


def tower_sc():
    turn_3x()
    tower()
    turn_left()


def tower_NC():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_clear():
            put_beeper()
            move()
        else:
            put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",19,"from karel.stanfordkarel import *


def main():
    turn_left()
    tower_NC()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()


def tower_SC():
    turn_3x()
    tower()
    turn_left()


def tower_NC():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",5,"from karel.stanfordkarel import *


def main():
    turn_left()
    tower_NC()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()


def tower_SC():
    turn_3x()
    tower()
    turn_left()


def tower_NC():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",5,"from Karel. Stanford Kad import ""
def main () :
turn - left 11
tower_N()
tower- SC)
move- 4x ( )
turn-left ( )
tower- N()
tower - SC )
del tower - s():
turn - 3x ()
Tower ()
Turn- left ( )
del tower- NC) .
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ):
Put-boper ()
move ()
else:
Put- beeper ()
def.turn- 3x (1:
Turn- left ()
turn - left ()
burn- left ()
def . mere_ 4x();
move ()
move ()
morell
move ()
if -- name __ = = -- main __
main ()",277,"from karel.stanfordkarel import *


def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()
    del tower_s()
    turn_3x()
    Tower()
    turn_left()
    del tower_NC()
    Tower()
    turn_3x()
    move_4x()
    del tower()
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",24,"from karel.stanfordkarel import *


def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()
    del tower_s()
    turn_3x()
    Tower()
    turn_left()
    del tower_NC()
    Tower()
    turn_3x()
    move_4x()
    del tower()
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",24,"from karel.stanfordkarel import *


def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()
    turn_3x()
    Tower()
    turn_left()
    tower_NC()
    Tower()
    turn_3x()
    move_4x()
    tower()
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",33,"from Karel. Stanfordkad import *
def max \( (1): \)
\[
\begin{array}{l}
\text { furn - let (1) } \\
\text { fown-N() } \\
\text { tower-S() } \\
\text { move-4x () } \\
\text { furm-lyt ( ) } \\
\text { tower-N( ) } \\
\text { tower-S() } \\
\end{array}
\]
def tower-s() :
\[
\begin{array}{l}
\text { furn - } 3 \times() \\
\text { Tower (1) } \\
\text { turn - laff() }
\end{array}
\]
def tower - N ( ):
town ()
\( \operatorname{tin} \) - \( 3 \times() \)
move_ \( 4 \times() \)
def tower (1):
for \( i \) in rang \( (5) \) :
if front-is-clear () :
move ()
else:
put_buper ()
def. fum \( -3 \times(1) \) :
\[
\begin{array}{l}
\text { turn - blff (1) } \\
\text { turn - bff (1) } \\
\text { turn - beft (1) }
\end{array}
\]
def mere_4r(1):
morel)
\[
\begin{array}{c}
\text { if name - }==^{\prime} \text {. main ... } \\
\text { main () }
\end{array}
\]
main 1)",556,"
from Karel.Stanfordkad import *
def max(1):
    turn_left(1)
    turn_down()
    tower_S()
    move_4x()
    turn_right()
    tower_N()
    tower_S()

def tower_S():
    turn_3_times()
    tower(1)
    turn_left()

def tower_N():
    turn()
    turn_3_times()
    move_4_times()

def tower(1):
    for i in range(5):
        if front_is_clear():
            move()
        else:
            put_beeper()

def turn_3_times(1):
    turn_left(1)
    turn_right(1)
    turn_left(1)

def move_4x(1):
    move()

if __name__ == '__main__':
    main()
",129,"from Karel.Stanfordkad import *


def max_1():
    furn_left(1)
    fown_N()
    tower_S()
    move_4x()
    furn_lyt()
    tower_N()
    tower_S()


def tower_s():
    furn_3_times()
    Tower(1)
    turn_left()


def tower_N():
    town()
    tin_3_times()
    move_4_times()


def tower_1():
    for i in range(5):
        if front_is_clear():
            move()
        else:
            put_bumper()


def turn_3_times_1():
    turn_left(1)
    turn_bff(1)
    turn_left(1)


def move_4r_1():
    move()


if __name__ == ""__main__"":
    main()
",120,"from karel.stanfordkarel import *


def main():
    turn_left()
    move()
    tower_s()
    move_4x()
    turn_left()
    tower_n()
    tower_s()


def tower_s():
    for _ in range(3):
        tower(1)
        turn_left()


def tower_n():
    turn()
    for _ in range(3):
        move()


def tower(i):
    for _ in range(5):
        if front_is_clear():
            move()
        else:
            put_beeper()


def turn_left(times=1):
    for _ in range(times):
        turn_left()


def move_4x():
    for _ in range(4):
        move()


if __name__ == ""__main__"":
    main()
",142
"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",0,"def main ():
string = str (input ( 'Enter string :'))
for i in range ((len (string)-1),-1,-1):
print (string[i])
if __name__ == '___main__':
main()",41,"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",0,"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",0,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",2,"def main ():
string = str (input( 'Enter string '))
for i in range ((len(string) - 1),-1,-1) :
print (string[i])
if -name '__main_':
main()",44,"def main():
    string = str(input(""Enter string ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",1,"def main():
    string = str(input(""Enter string ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",1,"def main():
    string = str(input(""Enter string ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",1,"det main ( ):
String = str (input (""Enter string: '))
for i in range ((len (string) -1) ,- 1 ,- 1):
print (string [i])
if __ name _== '_main-':
main ()",50,"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",0,"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",0,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",2,"det main ():
string \( = \) str (input ( Enter string: '))
for \( i \) in range ((len (string) -1\( ),-1,-1) \) : print (string \( [i] \) )
if name_ \( == \) '_-_main_-1:
\( \operatorname{main}() \)",81,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",2
"def main():

    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",0,"if
def main():
nur - int (input (""Enter a umby: ""))
print (f"" { num } is { ""prime if is_preme (nom)
else 'not prime' 3"")
Lef is__ pame(n):
<=
return false
elif n <= 3.
Feton True
elf 0 ² 2 = = 6
0² / 3 = = 0;
retow False
for i iN, Range (5, int(n"" 0.5) +1,6)
if 1% 1 = = 0¹ 0² 0% (i + 2) = = 6:
retor False
netum Thve
пале
maiN ()
--
main",190,"def main():
    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",1,"def main():
    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",1,"def main():
    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True


if __name__ == ""__main__"":
    main()
",44,"def main():
num = a NMBU: ""))
is {'prime' if ip_proundnorm)
else'not prime'3"")
def is prone(s)
if n<=1
return False
olig n <=3:
retun True
effn82==0 OR n% 3==0:
retor False
for i iN Range (5, int(c (0.5)+1,6)
if n%i==0 OR n% (i+2) == 6
return False
refund True
if
nane
1' main Ir's
main ()",198,"def main():
    num = int(input(""Enter a number: ""))
    print(""prime"" if is_prime(num) else ""not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",17,"def main():
    num = int(input(""Enter a number: ""))
    print(""prime"" if is_prime(num) else ""not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",17,"def main():
    num = int(input(""Enter a number: ""))
    print(""prime"" if is_prime(num) else ""not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True


if __name__ == ""__main__"":
    main()
",60,"def main():
num = int (input( ""Enter a NM bu :
print (f""Enums is S'prime if is_ prime (nom)
else not primé 3"">
def is_ prime(1):
if n <= 12
return false
elif > <= 3:
Cetun True
elf n/ 2 = = x OR 1% 3=6 ;
return False
for i in Range (5, int(1 +0.5) + 1,6
if 1% i = = x or 1% (1+2) =0 :
return False
return True
if
= =
- - main
main ()",165,"def main():
    num = int(input(""Enter a num: ""))
    if is_prime(num):
        print(f""Num is prime"")
    else:
        print(""Num is not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True


if __name__ == ""__main__"":
    main()
",107,"def main():
    num = int(input(""Enter a num: ""))
    if is_prime(num):
        print(f""Num is prime"")
    else:
        print(""Num is not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",64,"def main():
    num = int(input(""Enter a num: ""))
    if is_prime(num):
        print(f""Num is prime"")
    else:
        print(""Num is not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True


if __name__ == ""__main__"":
    main()
",107,"\( \operatorname{deg} \operatorname{main}(): \)
num =int( (iuput(""Entu a NMkn: "")) prutt(f""\{num\} is \{'prime' if is prome(num) else not prime 3 "")
def is prme \( (n) \) :
if \( n<=1 \)
reture alse
\( \operatorname{elif} \cap<=3 \) :
seton True
elf \( n \% 2==\varnothing \) or \( \cap \% 3==\varnothing \) :
re tow Jalse
for i in Ravge \( \left(5\right. \) int \( \left.\left(n^{* *} 0,5\right)+1,6\right) \) if \( n \% i==\varnothing \) or \( n \%(i+2)==\varnothing \) : retur false
nefom thoe",318,"def main():
    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif (n % 2 == 0) or (n % 3 == 0):
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if (n % i == 0) or (n % (i + 2) == 0):
            return False
    return True
",49,"def main():
    num = int(input(""Enter a Number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif (n % 2 == 0) or (n % 3 == 0):
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if (n % i == 0) or (n % (i + 2) == 0):
            return False
    return True
",50,"def main():
    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True


main()
",68
"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0,"from Karel. Stamfordkarel import
def main ():
turn-left():
while frent_is_ alpar (fi
tunn-right()
fill-row ()
return _to_home ll
Jump_row()
turn_right()
fill-row ()
vetwook to home ()
while frent-is. Elear();
meve (s
Sef fill_row();
while frent_is_ clearl]
put - beeper ()
move ()
put-beeper ()",149,"from Karel.Stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
        put_beeper()
",18,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
        put_beeper()
",16,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",12,"from Karel. stam fordmarel impert
def main():
turn-left():
while frent- is alpar():
turn-rights
fill-row()
return to home(s)
junprowl
turn-right
fillstow()
return te 3-home()
while front is. Elear(1:
meve()
def fill. rew() :
while front. is. clearl)
put - beeper()
move()
put-seeper()",150,"from Karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",13,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
        put_beeper()
",16,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",12,"from karel . stamfordkarel. import *
def mais ():
turn-left ():
while frent_ is_ alpar ();
turn-right ()
fill-row ( )
return_to_ home()
jumprow ()
turn-right ()
fill-row ()
returnkte -home ()
while front- is Elcar();
meve ()
Sef fill -row() ;
while front- is clear()
put - beeper ()
move ()
put-beeper ()",147,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()

    def fill_row():
        while front_is_clear():
            put_beeper()
            move()
        put_beeper()
",32,"from karel.stamfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()

    def fill_row():
        while front_is_clear():
            put_beeper()
            move()
        put_beeper()
",33,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",12,"fremkarel. stamfordkared impert*
def \( \operatorname{main}() \) :
turn-left ():
while frent - is _ clpar ():
tumn-right 1)
fill-row()
retwn-te-home()
junprow()
turn - right ()
fillarow ()
ve turnkte - home ()
while front-is. Elear ( \( ) \) :
meve()
def fill-rew():
while front - is - clearl)
put - beeper ()
move ()
put-beeper ()",177,"
from karel.stanfordkarel import *
def main():
		turn_left()
		while front_is_clear():
			turn_right()
			fill_row()
			return_to_home()
			jump_row()
		turn_right()
		fill_row()
		return_to_home()
		while front_is_clear():
			move()
	def fill_row():
		while front_is_clear():
			put_beeper()
			move()
		put_beeper()
",93,"
from karel.stanfordkarel import *
def main():
		turn_left()
		while front_is_clear():
			turn_right()
			fill_row()
			return_to_home()
			jump_row()
		turn_right()
		fill_row()
		return_to_home()
		while front_is_clear():
			move()
	def fill_row():
		while front_is_clear():
			put_beeper()
			move()
		put_beeper()
",93,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0
"from stanfordkarel import *

""""""
Karel should fill the whole world with beepers.
""""""


def main():
    """"""
    You should write your code to make Karel do its task in
    this function. Make sure to delete the 'pass' line before
    starting to write your own code. You should also delete this
    comment and replace it with a better, more descriptive one.
    """"""
    while not left_is_blocked():
        put_beeper_Line()
        reset_Position()
    put_beeper_Line()


def put_beeper_Line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",0,"from stanfordKarel import *
11 11 11
Kard should
beepers.
|| || ||
def
main ():
11 [1 (1
You should write
Karel do its
comment
better
fill
11 [11
/
the whole world with
Make
виче
before starting to
code. You should also
to
task in this
function.
delete the pass line
write your
owen
delete this
with
and replace it
more descriptive one.
move ()
put_ beeper ()
your
put_ beeper _line ()
our code to malce
While not left_it_ blocked ():
put - beeper_Line()
resit_ Position ()
dif put_beeper_Line():
put_beeper ()
front_is_clear
while
():",376,"# Code goes here
#
",562,"from stanfordKarel import *

# Karel should fill the whole world with beepers.
# Make sure to plan your code before starting to write. You should also delete the pass line and replace it with your own more descriptive one.


def main():
    # You should write your task in this function.
    # Delete this comment and replace it with your own more descriptive one.
    move()
    put_beeper()
    put_beeper_line()
    # Run your code to make sure it works as expected.
    while not left_is_blocked():
        put_beeper_line()
        reset_position()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
",323,"from stanfordKarel import *

# Karel should fill the whole world with beepers.
# Make sure to write your own code before starting to code.
# You should also complete your task in this function.
# Delete the pass line and replace it with your more descriptive one.


def main():
    move()
    put_beeper()
    put_beeper_line()
    while not left_is_blocked():
        put_beeper_line()
        reset_position()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",227,"from stanford hard import
Kard should fill the whole world with
beepers
11 11 11
daf main () :
11
11
11
you should write your code to male
karel do its task in this function.
Make sure to delite the pass line
code. You should also delete
before starting to write your this own
comment and replace it with a
better more descriptive one
11 11
while not left- is blocked C):
put- buper-line()
resit_Position c)
put- buper - Line c)
def put beeper-line() -
put beeper c)
while front is clear C) :
move ()
put- - beeper c)",208,"# Code goes here
",563,"from stanfordkarel import *


def main():
    """"""
    You should write your code to make
    Karel do its task in this function.
    Make sure to delete the pass line
    code. You should also delete
    before starting to write your own
    comment and replace it with a
    better more descriptive one
    """"""
    while not left_is_blocked():
        put_beeper_line()
        reset_position()
        put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",145,"from stanfordkarel import *

# Karel should fill the whole world with beepers


def main():
    """"""
    You should write your code to make Karel do its task in this function.
    Make sure to delete the pass line code. You should also delete this comment and replace it with a better, more descriptive one.
    """"""
    while not left_is_blocked():
        put_beeper_line()
        reset_position()
        put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",69,"from stanfordkarel import *
Kard should fill the whole world with
keepers.
11 11 11
daf main () :
11 11 11
You should write your code to males
Karel do its task in this function.
Make sure to delete the 'pass line
before starting to write your own
code. You should also delete this
comment and replace it with a
better more descriptive one.
11 11 11
While not left-is - blocked ():
put -beeper -Line()
reset_Position ()
put-buper _line ()
de put_leeper-Line ():
put -beeper ()
While front-is- clear ():
move ( )
put -beeper ()",141,"from stanfordkarel import *

# Karel should fill the whole world with beepers.


def main():
    # You should write your code to make Karel do its task in this function.
    # Make sure to delete the 'pass' line before starting to write your own code.
    # You should also delete this comment and replace it with a better, more descriptive one.

    while not left_is_blocked():
        put_beeper_line()
        reset_position()
        put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",54,"from stanfordkarel import *

# Karel should fill the whole world with beepers.


def main():
    # You should write your code to make Karel do its task in this function.
    # Make sure to delete the 'pass' line before starting to write your own code.
    # You should also delete this comment and replace it with a better more descriptive one.

    while not left_is_blocked():
        put_beeper_line()
        reset_position()
        put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",55,"from stanfordkarel import *

# Karel should fill the whole world with beepers.
def main():
    # You should write your code to make Karel do its task in this function.
    # Make sure to delete the 'pass' line before starting to write your own code.
    # You should also delete this comment and replace it with a better, more descriptive one.
    while not left_is_blocked():
        put_beeper_line()
        reset_position()
        put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",57,"Grom stanfordkarel import *
111111
Karel should fill the whole world with bepers.
111111
def \( \operatorname{main}() \) :
""11 11
You should write your code to male karel do its task in this function. Make sure to delete the 'pass'1 line bfore slarting to rurite your owen code. You should also delete thir comment and replace it with a better, more descriptive one. 111111

While not left_ir_blockd ():
put_beper_Lin ()
resit_position ()
put_buper_line C)
dy put_buper-Line \( ( \) ):
put_beper ()
while front_is-clear C):
move ()
put_beper ()",155,"from stanfordkarel import *


def main():
    while not left_is_blocked():
        put_beeper_line()
        reset_position()
    put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",328,"from stanfordkarel import *


def main():
    """"""
    Karel should fill the whole world with beepers.
    You should write your code to make karel do its task in this function.
    Make sure to delete the 'pass' line before starting to rewrite your own code.
    You should also delete this comment and replace it with a better, more descriptive one.
    """"""
    while not left_is_blocked():
        put_beeper_line()
        reset_position()
    put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",74,"from stanfordkarel import *


def main():
    """"""
    Karel should fill the whole world with beepers.
    You should write your code to make Karel do its task in this function.
    Make sure to delete the 'pass' line before starting to write your own code.
    You should also delete this comment and replace it with a better, more descriptive one.
    """"""
    while not left_is_blocked():
        put_beeper_line()
        reset_position()
    put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",71
"#karel needs to move to the bottom of the next arch to commence 
#building the next column.
#precondition: karel is facing east
#post condition: karel is still facing east at the next column site.
        
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()""
                
def turn_around():
    turn_left()
    turn_left()
        
if __name__ == '__main__':
    main()",0,"#Karel needs to move to the bottom of the next arch to comm
#ence building the next column.
# Precondition: Karel is facing east
#post_condition : Karel is facing east at the next column site.
def move_to_ next_arch_botton ():
if front is clear ():
for i in range (4):
move ()
def turn around () =
turn_left()
turn_left (D
if name
Main ()
main",119,"# Karel needs to move to the bottom of the next arch to commence
# building the next column.
# Precondition: Karel is facing east
# Post_condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",54,"# Karel needs to move to the bottom of the next arch to commence
# building the next column.
# Precondition: Karel is facing east
# post_condition : Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",54,"# Karel needs to move to the bottom of the next arch to commence
# building the next column.
# Precondition: Karel is facing east
# Post_condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",54,"#karel needs to more to the bottom of the next arch to comm
#ence building the next column.
#
Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move to next arch botto ():
if front is clear ():
for i in range (4)
move ()
def turn around ():
turn left()
turn_left(3)
if name 1 i main , :
main ()",117,"# Karel needs to move to the bottom of the next arch to commence
# building the next column.
#
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",55,"# Karel needs to move to the bottom of the next arch to commence
# building the next column.
#
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",55,"# Karel needs to move to the bottom of the next arch to commence
# building the next column.
#
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",55,"#karel needs to move to the bottom of the next noch to com
Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_botton ();
if front is clear ():
for i in range (4) :
move ()
def turn around ():
turn_left ( )
turn left ()
if __ name.
main
main ()",120,"# Karel needs to move to the bottom of the next notch to come
# Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",61,"# Karel needs to move to the bottom of the next notch to come
# Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",61,"# Karel needs to move to the bottom of the next notch to come
# Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",61,"Hikarel needs to move to the bottom of the next arech to comm. Hence building the next column.
\# Precondition: karel is facing east
\#post-condition: kavel is facing east at the next column site. def move_to_next_arch_botton():
if frontis-clear () :
for \( i \) in range (4):
move ()
def turnarounl () :",159,"
# Karel needs to move to the bottom of the next arch to comm.
# Hence building the next column.
# Precondition: karel is facing east
# post-condition: karel is facing east at the next column site.
def move_to_next_arch_bottom():
	if front_is_clear():
		for i in range(4):
			move()
def turnaround():
",150,"# Karel needs to move to the bottom of the next arch to comm.
# Hence building the next column.
# Precondition: karel is facing east
# post-condition: karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turnaround():
    pass
",118,"# Karel needs to move to the bottom of the next arch to comm.
# Hence building the next column.
# Precondition: karel is facing east
# post-condition: karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turnaround():
    pass
",118
"def find_lrgst_smallst(number):
    if not numbers:
        return none
    smallest = largest = number[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example Usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_lrgst_smallst(numbers)
print(result)
",0,"HEART
def- find Ligst_smallet (number);
if not numbers:
return none
-Smallest= largest = number [0]
for num in numbers:
if num < smallest:
= num
пит
smallest
if nam > Largest :
Largest.
fieturin smallest, Largest
= num
#Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
Tresult
find_ligst __ smallst (numbens)
print (result)
উদ্ভাস-উন্মেষ শিক্ষা পরিবার",143,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find-Ligst_smallst - (number):
if not numbers:
return none
-Smallest. = largest = number [0]
for num in numbers:
if num < smallest:
smallest = num
if nam > largest:
Largest = num
return smallest, Largest
Example usage:
numbers = [1, 2, 3, 4,5,6,7,8,9]
result = find_ligst_smalist (numbers)
print (result)",91,"
def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest

Example usage:
numbers = [1, 2, 3, 4,5,6,7,8,9]
result = find_largest_smallest(numbers)
print(result)
",19,"
def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest

Example usage:
numbers = [1, 2, 3, 4,5,6,7,8,9]
result = find_largest_smallest(numbers)
print(result)
",19,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find_Ligst_smallst (number):
00
if not numbers:
Return none
Smallest=largest = number [0]
-
for num in numbers:
lif
num < smallest:
smallest = num
if
nam > Largest :
Largest = num
tieturin smallest, Largest
# Example usage:
numbers = [1,2,3, 4,5,6,7,8,9]
Hresult = find_ligst_smallst(numbers)
print (result)
उदास-उदास मिका शंतिबाज़",117,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find_rigst_smallst (number):
if not numbers:
return none
- Smallest = largest = number [0]
for num in numbers:
if num < smallest:
\[
\text { smallest }=\text { num }
\]
if nam > Largest:
\[
\text { Largest }=\text { num }
\]
fietutin smallest, Largest
* Example usage.
\[
\begin{array}{l}
\text { rumbers }=[1,2,3,4,5,6,7,8,9] \\
\text { result }=\text { find_lrgst_smallst (numbers) }
\end{array}
\]
print (result)",170,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage.
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",11,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage.
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",11,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage.
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",11
"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The Sum of the Digits is: "", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0

    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",0,"def main():
user number
input (""Enter the number: "")
result = Sum_of_digits (user_number)
print (""The Sum of the digits is"", result)
def Sum_of_digits (user_ number):
W 18
number_str = Str (user_number)
digit_sum = 0
for digit in number str:
#zero
return digit sum
if_name_
main()
digit_sum += int(digit)
_main_"":",112,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",5,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The Sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",4,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The Sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",4,"def main():
user_number = input (""Enter the number: "")
result = Sum_of-digits (user_number)
print (""The Sum of the digits is"", result)
def Sum- of_digits (user_ number):
1#
number_str = Str (user- number)
digit_sum = 0 # zero
for digit in number-str:
digit_sum + int(digit)
return digit_sum
if name_ == ""__main_"":
main()",71,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",5,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The Sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",4,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The Sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",4,"def main():
user_number = input (""Enter the number:
"")
result = sum_of_digits (user_number )
print (""The sum of the digits is "", result)
def Sum_of_digits (user_number):
number_str = Str (user_number)
digit_sum=0 # zero
for digit in number-str:
digit_sum + = int (digit)
return digit sum
if _name _== ""_main_"":
main()",71,"def main():
    user_number = input(""Enter the number:\n"")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is "", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",6,"def main():
    user_number = input(""Enter the number:\n"")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is "", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",6,"def main():
    user_number = input(""Enter the number:\n"")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is "", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",6,"def main():
user_number = input (""Enter the number: "")
result = sum_of digits (user_number)
print (""The sum of the digits is"", result)
def sum_of_digits (user_number):
number_st \( r=\operatorname{str} \) (user_number)
digit_sum \( =\varnothing \quad \# \) zero
for digit in numberstr:
\[
\text { digit_sum } t=\operatorname{int} \text { (digit) }
\]
veturn digit_sum
if name_ \( =="" \) main_ \( "" \) :
main()",147,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",5,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",5,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",5
"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"def is-prime (n):
DON
if
Returns True if n is prime, False otherwise.
|(α ||
if n <
n < = 1:
return False
for i in range (2, int(n** 0.5) +1);
if n % i = = 0;
def main():
return True
[((11
The main function.
Int
return False
14
n = int ( input (""Enter a number: "")
if is-prime (n):
print (n
else:
""is a
main()
print (n. ""is not a prime number."")
name__ ==
prime number."")
11
main.
--
})",207,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"dof is -prime (n):
110V
Returns True if n is prime, False otherwise.
11011
if n <= 1:
return False
for i in range (2 , int(n**0.5 ) +1): :
if n % i == 0 :
return False
return True
def main():
The main function.
n= int (input ( ""Enter a number: "")
if is-prime (n):
print ( n , ""is a prime number."")
else :
print( n, ""is not a prime number. "")
if
name
11
main
"",
""
;
main()",152,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"def is-prime (n):
1104
Returns True if n is prime, False otherwise
11011
if n <= 1:
return False
for i in range (2, int(n*0.5)+1):
if n % i == 0.
return False
return True
def main () :
11 /11
The main function.
/11.11
n = int ( input (""Enter a number: "")
if is- prime (n):
print (n, "" is a prime number."")
else :
print( n, ""is not a prime number. "")
it
- - name __ == __ main -- :
main ( )",147,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n * 0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",3,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n * 0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",3,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n * 0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",3,"def is-prime \( (n) \) :
Returns True if \( n \) is prime, False otherwise.
IIU11
if \( n<=1 \) :
return False
for \( i \) in range \( \left(2, \operatorname{int}\left(n^{* *} 0.5\right)+1\right) \) :
if \( n \% i==0 \) :
retum False
return True
def \( \operatorname{main}() \) :
IIIII
The main function.
1....
\( n=\operatorname{int} \) (input (""Enter a number: "")
if is-prime \( (n) \) :
print \( (n \), ""is a prime number."")
else:
print ( \( n \), ""is not a prime number."")
if \( \ldots \) name _. \( =="" \) main .. ""
\( \operatorname{main}() \)",279,"def is_prime(n):
    # Returns True if n is prime, False otherwise.
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    # The main function.
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",30,"def is_prime(n):
    # Returns True if n is prime, False otherwise.
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    # The main function.
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",30,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0
"# Reverse String
def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


if __name__ == ""__main__"":
    main()
",0,"#Reverse String
def mam ():
str = input (""Input a string: "")
ro_str=
for i m str:
||||
if_name
r_str=i+r_stra
primt (r_stro)
mam ()
_maim_"":",78,"# Reverse String
def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


main()
if __name__ == ""__main__"":
    main()
",7,"# Reverse String
def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


main()
",31,"# Reverse String
def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


if __name__ == ""__main__"":
    main()
",0,"# Reverse
string
def main ():
str = input ( ""Input a string: "")
ro-str=
for i instr:
r_str=itn_str
print (n_str)
if_ name - "" - __main_
main ()",63,"# Reverse string
def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


if __name__ == ""__main__"":
    main()
",1,"# Reverse string
def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


if __name__ == ""__main__"":
    main()
",1,"# Reverse string
def main():
    str = input(""Input a string: "")
    rev_str = """"
    for i in str:
        rev_str = i + rev_str
    print(rev_str)


if __name__ == ""__main__"":
    main()
",9,"#Reverse String
def man ():
str = input (""Input a string: "")
ro _str= """"
for i'm str:
r_ str = i+ n_ str
print (no_stro)
if_name _= = ""_main_"":
main ()",55,"# Reverse String
def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


if __name__ == ""__main__"":
    main()
",0,"# Reverse String
def main():
    str = input(""Input a string: "")
    rev_str = """"
    for i in str:
        rev_str = i + rev_str
    print(rev_str)


if __name__ == ""__main__"":
    main()
",8,"# Reverse String
def main():
    str = input(""Input a string: "")
    rev_str = """"
    for i in str:
        rev_str = i + rev_str
    print(rev_str)


if __name__ == ""__main__"":
    main()
",8,"\# Reverse string
def \( \operatorname{mam}() \) :
stro = input (""Input a string: "")
rostro \( ="" 11 \)
for i instr:
\[
r_{-} s t r=i+r_{-} s t r
\]
print (r_stro)
\[
\begin{array}{l}
\text { if_name- }=="" \text {-main_: } \\
\operatorname{mam} \text { () }
\end{array}
\]",157,"# Reverse string
def mam():
    stro = input(""Input a string: "")
    r_stro = """"
    for i in stro:
        r_stro = i + r_stro
    print(r_stro)


if __name__ == ""__main__"":
    mam()
",11,"# Reverse string
def mam():
    stro = input(""Input a string: "")
    r_stro = """"
    for i in stro:
        r_stro = i + r_stro
    print(r_stro)


if __name__ == ""__main__"":
    mam()
",11,"# Reverse string
def rev_str():
    str_ = input(""Input a string: "")
    rev_str = """"
    for i in str_:
        rev_str = i + rev_str
    print(rev_str)


if __name__ == ""__main__"":
    rev_str()
",25
"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    list = sentence.split()
    l_word = """"
    for word in list:

        if len(word) > len(l_word):
            l_word = word
    print(l_word)


if __name__ == ""__main__"":
    main()
",0,"# Write a Python program to find the longest word in a given text
def maint):
sentence = imput (""Input a sentence: "")
list = sentence.split()
Lword =
for world im List:
if len (word) >len (1-word):
1_ word = word
primt (1- word)
if_name_ == ""_mam_"":
main ()",78,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    lst = sentence.split()
    l_word = """"
    for word in lst:
        if len(word) > len(l_word):
            l_word = word
    print(l_word)


if __name__ == ""__main__"":
    main()
",3,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    lst = sentence.split()
    l_word = """"
    for word in lst:
        if len(word) > len(l_word):
            l_word = word
    print(l_word)


if __name__ == ""__main__"":
    main()
",3,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    word_list = sentence.split()
    longest_word = """"
    for word in word_list:
        if len(word) > len(longest_word):
            longest_word = word
    print(longest_word)


if __name__ == ""__main__"":
    main()
",35,"# Write a Python program to find the longest word in a given text
def main() :
sentence = input (""Input a sentence: "")
list = sentence.split1)
Iword = if 11
for word in List:
if len (word)> len (1 word):
1_ word = word
print(1- word)
if_name- == ""_main-"":
main ()",73,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    List = sentence.split()
    l_word = """"
    for word in List:
        if len(word) > len(l_word):
            l_word = word
    print(l_word)


if __name__ == ""__main__"":
    main()
",3,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    list = sentence.split()
    l_word = """"
    for word in list:
        if len(word) > len(l_word):
            l_word = word
    print(l_word)


if __name__ == ""__main__"":
    main()
",1,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    words_list = sentence.split()
    longest_word = """"
    for word in words_list:
        if len(word) > len(longest_word):
            longest_word = word
    print(longest_word)


if __name__ == ""__main__"":
    main()
",37,"# Write a Python program to find the longest word i'm a given text
def main ():
sentence = input (""Input a sentence: "")
list = sentence. split ( )
Lword = """"1
for word in List:
if len (word) > 1en (1-word):
1-word = word
print (1-word)
if_name = ""_main_"" :
main ()",77,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    list = sentence.split()
    Lword = """"
    for word in list:
        if len(word) > len(Lword):
            Lword = word
    print(Lword)


if __name__ == ""__main__"":
    main()
",9,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    list_words = sentence.split()
    l_word = """"
    for word in list_words:
        if len(word) > len(l_word):
            l_word = word
    print(l_word)


if __name__ == ""__main__"":
    main()
",13,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    words_list = sentence.split()
    longest_word = """"
    for word in words_list:
        if len(word) > len(longest_word):
            longest_word = word
    print(longest_word)


if __name__ == ""__main__"":
    main()
",37,"\# Write a Python program to find the longest word a \( m \) a given text def main \( ( \) ):
sentence = imput (""Input a sentence: "")
list = sentence.split ()
lword = "" ""
for word im list:
if len (word) >len (1-word):
\[
\text { 1_word }=\text { word }
\]
primt (1-word)
if name_ \( == \) ""-main_"".
\( \operatorname{main}() \)",116,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    list = sentence.split()
    lword = "" ""
    for word in list:
        if len(word) > len(lword):
            lword = word
    print(lword)


if __name__ == ""__main__"":
    main()
",6,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    list = sentence.split()
    lword = "" ""
    for word in list:
        if len(word) > len(lword):
            lword = word
    print(lword)


if __name__ == ""__main__"":
    main()
",6,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    word_list = sentence.split()
    lword = """"
    for word in word_list:
        if len(word) > len(lword):
            lword = word
    print(lword)


if __name__ == ""__main__"":
    main()
",15
"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest common_divisor(a,b):
smaller_number=a if azb else b
common_divisor= []
for i in range (1, smaller_number +1):
if a %i == 0 and b% i ==0:
common_divisor.append()
return common_divisor [-1]",52,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def
greatest_common_divisorca,b):
smaller_number. = a if a4b else 10
common-divisor= []
for i in range (1, smaller_number +1) :
if a %i ==0 and b%i==0:
common_divisor . append(i)
return common_divisor [-1]",60,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor (a,b) :
smaller_ number = a if a <b else 10
common_divisor = []
for i in range (1, smaller_number +1):
if 9 % i == 0 and 6% i == 0:
common_divisor. append (i)
return common_divisor [-1]",52,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor \( (a, b) \) :
smaller_number \( =a \) if \( a<b \) else \( b \) common_divisor \( =[] \)
for \( i \) in range \( (1 \), smaller number +1\( ) \) : if \( a \% i==0 \) and \( b \% i==0 \) : common_divisor. a ppend (i) return common_divisor \( [-1] \)",94,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0
"def main():
    """"""
    The program should determine whether the given year is a leap year
    (divisible by 4, divisible by 100 but also by 400).
    """"""

    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below(in number form)."")
    Year = int(input(""Year : ""))
    print("" "")

    if (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" "" + ""is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" "" + ""is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("" "")
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")

        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()

        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break

        elif ask != ""Yes"" or ask != ""yes"" or ask != ""No"" or ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",0,"def main ():
The
should determine whether the given year is a leap year
(divisible by 4, divisible by loo but also by 400).
program
print (""This program will help you identify if a given year is a leap
or not."")
year
if
print ("" "")
()
identify_a_leap_year
ask_for_a_new_year_to_ identify ()
def identify_a_leap-year ():
print (""Please input
Year = int (imput ("" Year: ""))
print("" "")
else :
it (Year % 4 = = 0) or (Year %/ 100 ==0) or (Year % 400 ==0);
+ str (Year) +
+ "" is a leap year."")
V
print (""The Year
""+"" is not a leap year."")
print (""the Year
def ask_for_a_new_year_to_
white True:
-_name__
main ()
a year below (ill humber
if ask = =
+ str (Year).
-+
identify ():
print (')
ask - input (""Do you want to identify
print ("" "")
""__main__
form). "")
""Yes"" or ask
ask = = ""yes"" :
identify_a_ leap year ()
""
elif ask = = ""No"" or ask == ""no
a new year? Yes/No: "")
print (""Thank you. See you again!"")
break
elif ask != ""Yes
or ask != ""yes"" of ark! = ""No"" or ask != ""no"":
print (""Wrong keyword. Please type the exact keyword."")",486,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    if (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        ask = input(""Do you want to identify a new year? Yes/No: "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" or ask != ""yes"" or ask != ""No"" or ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",102,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    if (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        ask = input(""Do you want to identify a new year? Yes/No: "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" or ask != ""yes"" or ask != ""No"" or ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",102,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    if (Year % 4 == 0 and Year % 100 != 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        ask = input(""Do you want to identify a new year? Yes/No: "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        else:
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",167,"def main ():
The program should determine whether the given year is a leap year
(divisible by 4, divisible by 100 but also by 400).
print (""This program will help you identify if a given year is a leap
year or not."")
print ( a)
identify- a - leap_ year ()
ask_for_a- new- year- to identify()
def identify- a - leap - year () :
print ("" Please input a year below (in number form)."")
Year = int (input (""Year: ""))
print ( .)
if (Year %4==0) or (Year % 100 = = 0) or (Year % 400 = = 0) :
print (""The Year ""+ str (Year) + v t is a leap year."")
else
print (""the Year str(Year) + "" + "" is not a leap year."")
def ask_for a-new. year to- identify ():
white True:
prilit ( 1)
ask = input (""Do you want to identify a new year? Yes/No: "")
print ( "" "")
if ask == ""Yes"" or ask == ""yes"":
identify_a_leap-yaar
elif ask = = ""No"" or ask == ""no"" :
print (""Thank you. See you again!')
break
elif ask != ""Yes or ask != ""yes"" a task!=""No"" or ask != ""no"":
print (""Wrong keyword. Please type the exact keyword. )
if name == ""__ main "":
main ()",296,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    if (Year % 4 == 0) and (Year % 100 != 0 or Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" and ask != ""yes"" and ask != ""No"" and ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",98,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    if (Year % 4 == 0) and ((Year % 100 != 0) or (Year % 400 == 0)):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" and ask != ""yes"" and ask != ""No"" and ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",98,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    if (Year % 4 == 0 and Year % 100 != 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask.lower() == ""yes"":
            identify_a_leap_year()
        elif ask.lower() == ""no"":
            print(""Thank you. See you again!"")
            break
        else:
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",175,"def main () :
The program should determine whether the given year is a leap year
( divisible by 4, divisible by 100 but also by 400).
print ( "" This program will help you identify if a given year is a leap
year or not . "")
print ("" "")
identify_a_leap year ( )
ask _ for _ a _ new _year _ to _identify ( )
def identify _ a _ leap year ( ) :
print ( "" Please input a year below ( in number form ) . "")
Year = int (input (""Year:
print ("" "")
if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;
print (""The Year + str(Year) + "" ""+ ""is a leap year."")
else :
print ( "" The Year "" + str ( Year ) + "" "" + "" is not a leap year . "" )
def ask-for-a-new year_ to _ identify ( ) :
white True :
print ("" "")
ask - input ( "" Do you want to identify a new year ? Yes / No : "" )
print ("" "")
if ask == ""Yes "" or ask == ""yes"":
identify_ a_ leap -year ( )
elif ask == ""NO"" or ask = ""no"":
print ( "" Thank you . See you again ! "" )
break
elif ask != ""Yes or ask != ""yes"" a ask! = ""No"" or ask != ""no"".
print ( "" Wrong keyword . Please type the exact keyword . "")
if
__ name_ == "" __ main __ "":
main ()",312,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("" "")
    if (Year % 4 == 0) and (Year % 100 != 0 or Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("" "")
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" and ask != ""yes"" and ask != ""No"" and ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",49,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("" "")
    if (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("" "")
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" and ask != ""yes"" and ask != ""No"" and ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",43,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    print("""")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("""")
    if (Year % 4 == 0 and Year % 100 != 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("""")
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("""")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        else:
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",103,"def \( \operatorname{main}() \) :
""The program should determine whether the given year is a leap year (divisible by 4, divisible by 100 but also by 400).
"" r""
print (""This program will help you identify if a given year is a leap year or not."")
privit ("" "")
identify - a - leap_year ()
ask_for_a new_year_to_identify ()
def identify - a l eap - year () :
print (""Please input a year below (in number form)."")
Year = int (input (""Year: ""))
print ("" "")
if \( ( \) Year \( \% 4=0) \) ) or \( ( \) Year \( \% 100=0) \) ) or \( ( \) Year \( \% 400=0) \) :
print (""The Year "" \( +\operatorname{str}( \) Year) + "" "" ""is a leap year."")
else:
\[
\text { print (""The Year ""+str (Year) }+ \text { "" "" "" is not a leap year."") }
\]
def ask_-fir_a_new - year_to_identify ():
white True:
print (' 1 )
ask = input (""Do you want to identify a new year? Yes/No:"") print ("" "")
if ask = = ""Yes "" or ask = = ""yes"":
identify - a - leap- year ()
elif ask \( == \) ""No"" or ask \( == \) ""no"" :
print (""Thank you. See you again!"")
break
elif ask ! = ""Yes or ask ! = ""yes"" a ask! = ""No"" or ask ! = ""no"":
print (""Wrong keyword. Please type the exact keyword."")
if .. name \( \ldots=="" \) main \( _{2}{ }^{\prime} \) :
main ()",401,"
def main():
    ""The program should determine whether the given year is a leap year
    (divisible by 4, divisible by 100 but also by 400).
    ""
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()

def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("" "")
    if (Year % 4 == 0) and ((Year % 100 != 0) or (Year % 400 == 0)):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year ""+str(Year) + "" is not a leap year."")

def ask_for_a_new_year_to_identify():
    while True:
        print(' ')
        ask = input(""Do you want to identify a new year? Yes/No:"")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" and ask != ""yes"" and ask != ""No"" and ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")

if __name__ == ""__main__"":
    main()
",50,"def main():
    """"""
    The program should determine whether the given year is a leap year
    (divisible by 4, divisible by 100 but also by 400).
    """"""
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("" "")
    if (Year % 4 == 0) and ((Year % 100 != 0) or (Year % 400 == 0)):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("" "")
        ask = input(""Do you want to identify a new year? Yes/No:"")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        else:
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",83,"def main():
    """"""
    The program should determine whether the given year is a leap year
    (divisible by 4, divisible by 100 but also by 400).
    """"""
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("" "")
    if (Year % 4 == 0 and Year % 100 != 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("" "")
        ask = input(""Do you want to identify a new year? Yes/No:"")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        else:
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",83
"sum = 0
number = input()
for i in number:
    sum += int(i)
Print(sum)
",0,"Sun =
S
number
imput ()
for i in number:
Sun + =
int(i)
Print (surm)
N",20,"Sum = 0
number = input()
for i in number:
    Sum += int(i)
print(Sum)
",4,"sum = 0
number = input()
for i in number:
    sum += int(i)
print(sum)
",1,"sum = 0
number = input()
for i in number:
    sum += int(i)
print(sum)
",1,"sun 2 = $
number N Emput ()
for i in number:
sun + 11 int(i)
print (sum )",20,"sum_2 = 0
number = input()
for i in number:
    sum_2 += int(i)
print(sum_2)
",7,"sum = 0
number = input()
for i in number:
    sum += int(i)
print(sum)
",1,"sum_2 = 0
number = input()
for i in number:
    sum_2 += int(i)
print(sum_2)
",7,"Sun = D
number = input ()
for i in number :
Sun + = int (i)
Print (Sum)",16,"Sum = 0
number = input()
for i in number:
    Sum += int(i)
print(Sum)
",4,"Sum = 0
number = input()
for i in number:
    Sum += int(i)
print(Sum)
",4,"Sum = 0
number = input()
for i in number:
    Sum += int(i)
print(Sum)
",4,"\[
\operatorname{sun}=\varnothing
\]
number = imput ()
for: in number:
\[
\text { sun }+=\operatorname{int}(i)
\]
print (sum)",69,"sum = 0
number = input()
for i in number:
    sum += int(i)
print(sum)
",1,"sum = 0
number = input()
for i in number:
    sum += int(i)
print(sum)
",1,"sum = 0
number = input()
for i in number:
    sum += int(i)
print(sum)
",1
"def factorial(n):
    if n <= 1:
        return 1
    else:
        return factorial(n - 1) * n


print(factorial(int(input())))
",0,"def factoria 1 (n):
if n <= 1 :
Return 1
else:
Return factorial (n-1) *
Prist (fractional (int (amput())))
h",49,"def factorial(n):
    if n <= 1:
        return 1
    else:
        return n * factorial(n - 1)
",37,"def factorial(n):
    if n <= 1:
        return 1
    else:
        return n * factorial(n - 1)
",37,"def factorial(n):
    if n <= 1:
        return 1
    else:
        return n * factorial(n - 1)
",37,"def factoric / (n):
if h L=1 :
Return 1
else :
Return factorial (n-1) A h
Print (factorial (int (input() ))) )",49,"def factorial(n):
    if n == 1:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(int(input())))
",9,"def factorial(n):
    if n == 1:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(int(input())))
",9,"def factorial(n):
    if n == 1:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(int(input())))
",9,"def factorial (n):
if n <= 1 ;
Return 1
else :
Return factorial (n-1) * h
Print (factorial (int (input ()))",42,"def factorial(n):
    if n <= 1:
        return 1
    else:
        return factorial(n - 1) * n


print(factorial(int(input())))
",0,"def factorial(n):
    if n <= 1:
        return 1
    else:
        return factorial(n - 1) * n


print(factorial(int(input())))
",0,"def factorial(n):
    if n <= 1:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(int(input())))
",8,"def factorial (n):
if \( n<1 \) :
Retunn 1
else:
Return factorial \( (n-1) * n \)
Print \( ( \) factarial \( (\operatorname{int}(\operatorname{imput}()))) \)",89,"def factorial(n):
    if n < 1:
        return 1
    else:
        return factorial((n - 1) * n)


print(factorial(int(input())))
",3,"def factorial(n):
    if n < 1:
        return 1
    else:
        return factorial(n - 1) * n


print(factorial(int(input())))
",1,"def factorial(n):
    if n < 1:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(int(input())))
",9
"year = int(input)

if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",0,"Year = int (impot
if yeur 1/4 = = $ and year 1/144 != 0 on Year 1.400 ==&=
Print (true)
else:
print (False)",35,"Year = int(input())
if Year % 4 == 0 and Year % 100 != 0 or Year % 400 == 0:
    print(True)
else:
    print(False)
",6,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"year 2 int (input)
if I and year 1,144 1=0 on Year% 400==0:
Print (TRUE)
else :
print (False)",43,"year = int(input())
if year % 144 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",22,"year = int(input())
if year % 144 == 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",23,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"Year = ent (input)
if year / n == 4 and year 0/ 100 /=/ or year / 400 == 0 ;
Print (true)
else :
Print (False )",30,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"\[
\text { year }=\operatorname{int}(\text { impot })
\]
if Yearn \( \% \mu==\phi \) and year \( \% 1 \phi \phi !=\varnothing \) on Year \( \% 400==\phi \) :
Pine (true)
else:
print (False)",108,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2
"Word = input()

Word = "" "".join([i for i in word[::-1]])

Print(Word)
",0,"Word = imput()
word = """", join (I i for i in word [::
Print (word)",19,"Word = input()
word = """".join(i for i in Word[::-1])
print(word)
",9,"word = input()
word = """".join(i for i in word)
print(word)
",15,"word = input()
word = """".join(i for i in word)
print(word)
",15,"word = imput()
ward = "" "" "" "" join (I i from i in word[-:-]]]
Print (word)",22,"word = input()
word = "" "".join([i for i in word[::-1]])
print(word)
",6,"word = input()
word = "" "".join([i for i in word[::-1]])
print(word)
",6,"word = input()
word = "" "".join([i for i in word[::-1]])
print(word)
",6,"Word = input ()
Word = """". join ([ "" for i in word [-]
Print (Word)",16,"word = input()
word = """".join([i for i in word])
print(word)
",13,"word = input()
word = """".join([i for i in word])
print(word)
",13,"word = input()
word = """".join([i for i in word[::-1]])
print(word)
",7,"\( \begin{array}{l}\text { Wond }=\operatorname{imput}() \\ \text { wand }="" \text { ""join }([i \text { for } i \text { in word }[\because-1]]) \\ \text { Print (wond) } \\\end{array} \)",134,"word = input()
wand = """".join([i for i in word][::-1])
print(wand)
",13,"word = input()
wand = """".join([i for i in word[:-1]])
print(wand)
",12,"word = input()
wand = """".join([i for i in word[:-1]])
print(wand)
",12
"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]

list3 = [i for i in list1 if i in list2]

print(list3)
",0,"list 1 = [1, 2, 3, 4]
bist 2 = [3, 4, 5, 6]
in lista]
bist 3 = [i for i in list 1 if i in
Print (list 3)",27,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list 1 = $ (1,2,3,4)
list2=[3,4,5,6]
=
list 3= [i for i in list 1 if i in listz]
print(list3)",20,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]

list3 = [i for i in list1 if i in list2]
print(list3)
",1,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]

list3 = [i for i in list1 if i in list2]
print(list3)
",1,"list 1 = [ 1, 2, 3, 4]
bist 2 = [ 3,4,5,6]
list 3 = Ji par i in list 1 if i in listz]
Print (list 3)",20,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"\( \begin{array}{l}\text { list } 1=[1,2,3,4] \\ \text { bist } 2=[3,4,5,6] \\ \text { fist } 3=[i \text { for } i \text { in list } 1 \text { if } i \text { in list }] \\ \operatorname{Pint}(\operatorname{list} 3)\end{array} \)",160,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2
"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]

even = [i for i in list1 if i % 2 == 0]

print(even)
",0,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [ è for i in lists if */2==4]
Print (even)",15,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = (123456789)
even = [i for i in list1 if i%2==0]
Print (even)",27,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list 1 = [1, 2, 3, 4, 5, 6, 7, 8,9]
even = [è for i in list 1 if i|2=]
Print (even)",16,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"\( \begin{array}{l}\text { list } 1=[1,2,3,4,5,6,7,8,9] \\ \text { even }=[i \text { for } i \text { in list } 1 \text { if } i \% 2==] \\ \text { Print (even) }\end{array} \)",116,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2
"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main ():
year
= int (input())
if (year % 4 == 0 and year % 100 != 0):
print (""True"")
elif (year % 100 == 0 and year % 400 ==0):
print (""True"")
if
else:
print (""False"")
name__
main ()
!!
>>
_main__'",78,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main ():
year = int (input())
if (year% 4==0 and year % 100 != 0):
print (""True"")
elif (year % 100 ==0 and year % 400 == 0):
print (""True"")
else:
print (""False"")
if -- name "" -- __main__"":
main()",68,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main ():
year = int (input ()
if ( year % 4 == 0 and year % 100 ! = 0):
print (""True"")
elif (year % 100 == 0 and year % 400=0):
print (""True"")
else:
print (""False"")
if
__ name __== "" __ main_"".
main ()",71,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main ():
\[
\text { year }=\operatorname{int}(\operatorname{input}())
\]
if (year \% \( 4==0 \) and year \( \% 100 !=0 \) ):
print (""True"")
elif (year \( \% 100==0 \) and year \( \% 400==0 \) ):
print (""True"")
else:
print (""False"")
if __name__ = = ""_main_."":
\( \operatorname{main}() \)",133,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0
"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0,"from
def
def
karel. stanford kavel import
main ():
build_column ()
step- up ()
build column()
step-up ()
build- column ()
def
step-up()
build- column()
build
column ():
turn-left()
build- beeper ()
build- beeper ()
build_ beeper ()
build-beeper ()
put - beeper ()
go - back()
turn - left ()
det build - beeper ():
put- beeper ()
move ()
go-back ():
turn around ()
step-up ()
def turn around ():
turn - left()
turn
left()
def step-up():
move ()
move ()
move ()
move ()
if - name
main ()
==
main
*",225,"from karel.stanford import karel


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def step_up():
    build_column()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",35,"from karel.stanford.karel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def step_up():
    build_column()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",26,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def step_up():
    move()
    move()
    move()
    move()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",102,"from karel. . stanford kavel import
def main () :
build - column ( )
step - up ()
build - column()
step - up()
build. column ()
step - up()
build - column (
def
build - column ()
turn - left ()
build- beeper ( )
build beeper ()
build - beeper ()
build. - beeper ()
put - beeper ()
go - back ()
turn - left ()
def
build - beeper ():
put - - beeper ( )
move ()
det
go - - back() :
turn around ()
-
step - up ()
def turn - around ()
turn - left ()
turn - left ()
def step - up' () :
move ()
move ()
move ()
move ()
if 1 name
1 main :
main ()",252,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()


def step_up():
    move()
    move()
    move()
    move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",81,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()


def step_up():
    move()
    move()
    move()
    move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",81,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()


def step_up():
    move()
    move()
    move()
    move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",81,"from karel. stanford kavel import *
def main ():
build-column ( )
step -up ( )
build- column ()
Step -up ()
build- column ( )
Step -up ()
build - column ()
def
build - column ( ) :
turn - left ( )
build - beeper ()
build - beeper ( )
build - beeper ( )
build - beeper ( )
put - beeper ( )
go - back ()
turn- left ( )
def
build - beeper ( ) :
put - beeper ()
move ()
det
go - back ():
turn- around ( )
step -up ()
dex
turn- around () :
turn - left ()
turn - left ()
dex
step-up ():
move ()
move ( )
move ( )
move ( )
-
if - name _ == - main _:
main ( )",251,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0,"from karel. Stanfordkavel import * def main ():
build_column ()
step - up ()
build - column ()
Step - up ()
build_column ()
Step - up ()
build - column()
def build - column ():
turn - left ()
build - beeper ()
build - beeper ()
build - beeper ()
buitd - beeper ()
put - beeper ()
go - back ()
turn - left ()
det build-beeper ():
put - beeper ()
move ()
det go-back ():
turn - around ()
step - up ()
dex turn - around () :
turn - left ()
turn - left()
def step-up ():
move ()
move ()
move ()
move ()
if _ name _ \( == \) 'main _ :
main ()",233,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0,"from karel.Stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",1,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0
"def main():
    input_string = input('Input string: ')
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print ret

if __name__ == '__main__':
    main()",0,"def main ():
if
input_ string = input ('Input string; ')
11 11
ret =
for ch in input-string
ret
print ret
71
= ret + ch. uppert)
name__ =
main ()
main
20 07203",78,"def main():
    input_string = input(""Input string: "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",8,"def main():
    input_string = input(""Input string: "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",8,"def main():
    input_string = input(""Input string: "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",8,"def main () :
input - string = input(' Input string ')
ret = 11 11
for ch in input - stiting
ret = ret + ch. upperl )
print ret
1
1
if
name
main
-
-
main
()",66,"def main():
    input_string = input(""Input string "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9,"def main():
    input_string = input(""Input string "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9,"def main():
    input_string = input(""Input string "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9,"def main () ;
input_ string = input ( Input string:')
ret = "" ""
for ch in input string
ref = ret + ch.upper()
print ref
if __ name __ =
1
1
- -
main
--
main ( )",57,"def main():
    input_string = input(""Input string:"")
    ret = "" ""
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",10,"def main():
    input_string = input(""Input string:"")
    ret = "" ""
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",10,"def main():
    input_string = input(""Input string:"")
    ret = "" ""
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",10,"def main ():
\[
\begin{array}{l}
\text { input_string = input ('Input string! ') } \\
\text { ret }="" 11
\end{array}
\]
for ch in input.string
\[
\text { ret }=\text { ret }+ \text { ch. upperd) }
\]
print ret
if name \( \operatorname{main}( \) )",122,"def main():
    input_string = input(""Input string! "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9,"def main():
    input_string = input(""Input string! "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9,"def main():
    input_string = input(""Input string! "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9
"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",0,"O
O
O
from Kare!. Stamford Karel impert
def main ():
mere to beeper ()
pick beeper ()
turn-around ()
return to_start()
def muere to beepet():
while front_is_clear ():
Move
turn_right()
more()
turu-left()
More()
det turn around ():
turn left ()
turn left ()",106,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from Karel. stanfordKarel import
def main ():
move to beeper ()
pick_beeper()
turu_around()
Return to-start()
def more to beeper() :
while front-is-clear ():
move
turn_right()
more(
turn-left()
more()
det turu around ();
turn_ left ()
turu left ()",93,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from Karel. StanfordKarel import
def main ():
move_to_beeper ()
pick-beeper ()
turn-around()
return_to_start ()
def more_to_ beeper () :
While front-is-clear ();
move
turn_Right ()
move ()
turn-left ()
move ()
def turu_around ():
tura_left ()
turn left ()",92,"from Karel.StanfordKarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",5,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from Karel. stanfordKarel import
def main ():
move to beeper ()
pick-beeper ()
turu_around ()
ceturn to_start()
def more to beeper ():
while frout_is_clear (1):
move
turn_right ()
more ()
turu-left()
morre()
def turu_around ():
turu left ()
turu left ()",96,"from Karel.stanfordKarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",4,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2
"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from kanel.stanfordkarel import
def main ():
while front_is_ clear():
bill tower ()
def fill_tower ():
-
while front_is_ clear ():
put-beeper ()
move()
put_beeper()
column_return ()
def column_return ():
if
def turn around ():
while front_is_blocked ():
turn-around()
while front_is_ clear():
move ()
next-tower()
-
def next tower ():
if right_is_dean ():
turn_right()
move()
turn_right()
for i in range (2):
turn_left()
—
else:
turn around ()
while front_is_dear():
def turn_right():
-
move()
-
name
main ()
for i in range (3):
turn_left()
_main_':",323,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    if front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
        for i in range(2):
            turn_left()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",89,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    if front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
        for i in range(2):
            turn_left()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",89,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
        for i in range(2):
            turn_left()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",85,"from karel. stanfordkard import
def main ()
while front. is clear () :
fill_tower()
def fill tower () :
while front - is - clean ():
put - beeper ()
move ()
put_beeper()
column_return() -
def columm_return(): -
while front_is_blocked() :
turn-around()
while front_is_clear()
move()
next_tower()
def turn around()
for i in range (2) :
turn-left()
def next tower() :
if right is-clean - ( ) :
turn -right()
move ()
turn_right()
else :
turn around()
while front_is_dear():
move()
def turn - right ():
for i in range (3) :
turn_left(c)
if - name == I main I :
main ()",238,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
    while front_is_clear():
        move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",8,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
    while front_is_clear():
        move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",8,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from kanel stanfordkard import *
det main () :
while front_is_clear ():
bill_tower ( )
det fill-tower ():
while front-is-clean ():
put-beeper ()
move ()
put_beeper ()
column_return ()
def column_return ():
while front_ is_blocked ():
turn-around ()
while front_is_clear () :
move ( )
next_tower ()
det turn-around ():
for i in range (2) :
turn-left ( )
det next_tower ():
if right_is_clean ():
turn-right ( )
move()
turn-right ()
else :
turn-around ()
while front-is-clear ():
move( )
def turn-right ():
for i in range (3):
turn_left ()
if
- name _
== '_ main
1
..
main ()",243,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        build_tower()


def build_tower():
    while front_is_clear():
        put_beeper()
        move()
        put_beeper()
        column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
    while front_is_clear():
        move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",22,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        build_tower()


def build_tower():
    while front_is_clear():
        put_beeper()
        move()
        put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
    while front_is_clear():
        move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",18,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        build_tower()
        next_tower()


def build_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",27,"from karel.stanfordkarel import *
def main ():
while front_is_dear () :
fill_tower ()
def fill_tower ():
while front_is_dear ():
put-beeper ()
move ()
put_beeper ()
column_return ()
def colurn-return () :
while front_is_blocked ( ):
turn-around ()
while front_is_clear () :
move ()
next_tower ()
def turn_around () :
for \( i \) in range (2):
turn-left ()
def next_tower ( ) :
if right_is_dear ( ):
turn_right ()
move ()
turn_right ()
else:
turn_around( )
while front_is_dear ():
move ()
def turn_right () :
for \( i \) in range (3):
turn_left ()
if _ name \( ==1 \) _ main _ '
main ()",245,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",0
"def filter_string_a(string):
      string.sort()
      filtered_string_list = [ ]
      for str in string:
             if str.startswith(""a""):
                    filtered_string_list.append(str)
       return filtered_string_list
input_string = [""apple"", ""banana"", ""avacado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)",0,"der fitters string - a (string);
sont ()
string.
filtered_string_list = [3
toru
1
in
string:
stru. start with (""a"");
stru
filtreried_rodring-lirt: append
returen filtered_string-lit
(stru)
imput_string = [""apple"", ""bunana"", ""avacad""
""cheveny"", ""apriest""""]
output = filtern-string- a (imput_string)
print (output)",131,"def filter_string_a(string):
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",48,"def filter_string_a(string):
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",48,"def filter_string_a(string):
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",48,"def - a (string):
string. sort ()
filtered -string-list = -[I
for stru in string :
if stru startswith (""a""):
append (str))
return
input_ string z [ apple"" ""bunana"", ""avacado)
""chevry"", ""apricot""]
output fifter z string a (input-ntuing)
print (output)",151,"def a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""chevy"", ""apricot""]
output = a(input_string)
print(output)
",60,"def filter_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""chevry"", ""apricot""]
output = filter_a(input_string)
print(output)
",45,"def filter_string_a(string_list):
    string_list.sort()
    filtered_string_list = []
    for stru in string_list:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",42,"det filter-string-a (string) :
string. sort ()
filtered- string-list = []
foru stre in strung :
if stru. startswith (""a""):
filtered-string-lint: append
( stru)
returen filtered-string- list
input_string = \""apple"", ""bunana"", ""avacado
""cheving "" ""apricot""]
Output = filter-string-a (input_string)
print (output)",104,"def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""chewing"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",34,"def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""chewing"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",34,"def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""chewing"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",34,"def filteru-string-a (ntring):
string. sont ()
filtered-string_list \( =[] \)
for stre in atring:
if stru. Ptark with (""an):
fiterced-atring-lint. append (stru)
return filtered-rtring-lirst
imput_rting \( z \) ""apple"", ""bunana"", ""avacado"" ""cherry"" ""apricot"" pring (output)",146,"def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
print(input_string)
",62,"def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
print(input_string)
",62,"def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",30
"def main():
  while front_is_clear():
      move()
  if front_is_blocked():
      turn_around()
  move()
  turn_left()
  move()
  pick_beeper()
  turn_left()
  turn_left()
  while front_is_clear():
      move()
  if front_is_blocked():
      turn_around()
  move()
  turn_around()

    
def turn_around():
    for i in range(3)
        turn_left ()",0,"def main:
While front_is_clear();
move()
if front_is_blocked ().
turn-around ()
move ()
turn_left()
move ()
pick_beeper ()
turn - left().
turn_left()
while front is clear ():
Move ()
if front_is_ blocked ():
turn around ().
move()
turn
around ()
def turn around ():
turn- lieft
Left
for i in range (3)
()",117,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    turn_left()
    for i in range(3):
        turn_left()
",87,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    turn_left()
    turn_left()


for i in range(3):
    pass
",114,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    for i in range(2):
        turn_left()
",72,"def main :
While front is clearc):
move
if front _is_blocked ():
turn_around ()
move ( )
turn_left ()
move ()
pick- beeper()
turn - left )
turn - left()
while front is clear ( ):
move ( )
if front is - blocked ()
turn- around ()
movel )
turn around ()
def turn-around ():
for i in range (3)
life ( )",120,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    for i in range(3):
        lift()
",77,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    for i in range(3):
        lift()
",77,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    for i in range(3):
        turn_left()
",71,"def main :
While front-is-clear():
move ( )
if front_is_blocked ().
turn-around ()
move ()
turn_left ( )
move ()
pick-beeper ()
turn- left ()
turn-left ()
while front_is_clear ()!
move ( )
if front_is _ blocked ( ).
turn - around ( )
move ()
turn around ()
def turn-around ():
for i in range (3)
left ()",112,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    for i in range(3):
        left()
",76,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    for i in range(3):
        left()
",76,"def main():
    while front_is_clear():
        move()
        if front_is_blocked():
            turn_around()
            move()
            turn_left()
            move()
            pick_beeper()
            turn_left()
            turn_left()
    while front_is_clear():
        move()
        if front_is_blocked():
            turn_around()
            move()
            turn_around()


def turn_around():
    for i in range(2):
        turn_left()
",120,"def main:
While front_is_clearc):
move ()
if front-is-blocked ():
tuin-around()
move ()
turn-left ()
move ()
pick-beeperc)
tuin-left()
tuin-left()
while front_is clear ():
move ()
if front-is-blocked ():
turn-around ()
move()
turn around ()
def turn-around ():
for in range (3)",114,"
def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_left()
    move()
    pick_beeper()
    turn_left()
    turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_around()

def turn_around():
    for i in range(3):
",59,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_left()
    move()
    pick_beeper()
    turn_left()
    turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_around()


def turn_around():
    for i in range(3):
        pass
",49,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_left()
    move()
    pick_beeper()
    turn_left()
    turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_around()


def turn_around():
    for _ in range(2):
        turn_left()
",41
"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return False
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",0,"-def is_leap-year (year);
if year % 4= = 0!
is yeare °6 100 = = 0:
1 year 1.400.
if
return. Trive
0:
ebbe:
return false
else:
else:
return false
return false
def main ():
yeare = int Cinput (""Enter a year: ""))
is_ leap - is_ leap year (year)
print (is-leap)
if name_
maino
==
11
main"":",185,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is - leap-year (year):
if year % 4 == O:
if year % 100 = O:
if year % 400 = = O:
return True
else:
return False
else:
return False
else:
return False
def main ():
year = int (input (""Enter a year: ""))
is- leap = is_ 1 eap-year (year)
print (is_ leap)
if 1 name = -"" main
"":
if
main()",153,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return False
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",0,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return False
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",0,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is-leap year (year):
if years % 4 == 0'
if year % 100= = 0:
year % 400 = = 0:
return True
else:
return False
else:
return False
else:
return False
def main ().
year = int (input (""Enter a year: "")
is- leap= is-leap- year (years)
print (is-leap)
if
name_ = ""_main_"":
main()",154,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is-leap-year (year):
if yeare \( \% 4==0 \) :
if year \( \% 100=0 \) :
if year \( \% 400==0 \) :
return. True
else:
return False
else:
retur false
else:
ruturn False
def \( \operatorname{main}() \) :
yearc = int (input (""Enter a year: ""))
is teap = is leap-year (year)
print (is_leap)
if \( \operatorname{mame}_{-}=="" \) main "":
main()",202,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4
"def main():
    print("" problem - 5 "")
    print(""-----------------"")
    numb = int(input(""write an  number: ""))
    mak_list = [int(x) for x in str(numb)]

    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the number's digit: "", add_numb)


if __name__ == ""__main__"":
    main()
",0,"def main ():
print (""problem - 5
---"")
print (""---
numb = int (input (write an integer number:
mak_list = [int (x) for x in sts (numb)]
add-numb = 0
fon is in mak_list:
-5 "")
add_numb + = i
print (""Sum of the numbers:
digit
if_name__
main()
=
u
main__""
11
')
add_numb)",126,"def main():
    print(""problem - 5"")
    print(""---"")
    numb = int(input(""write an integer number:""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the numbers:"", add_numb)


if __name__ == ""__main__"":
    main()
",33,"def main():
    print(""problem - 5"")
    print(""---"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",31,"def main():
    print(""problem - 5"")
    print(""---"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",31,"def main() :
print ("" ""problem -5 "")
"")
numb = int (input (write an integer number: ')
print (""
mak list = [ int (x) for x in str (numb)]
add-numb = 0
for is in mak_list :
add-numb + = i
print (""sum of the number's: "", add-numb)
digit
if name = = ""_ main__""
main()",116,"def main():
    print(""problem -5"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",50,"def main():
    print(""problem -5"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""sum of the number's: "", add_numb)


if __name__ == ""__main__"":
    main()
",49,"def main():
    print(""problem -5"")
    numb = int(input(""Write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",50,"def main () :
print (""problem - 5 "")
print (""-
rumb = int (input ('write an integer number:
mak_list = [int (x) for x in str (numb)]
add-numb = 0
for is in mak-list :
add-numb +=i
print (""Sum of the number's:
"", add_numb)
digit
if_ name __ = =
-- main __:
main()",109,"def main():
    print(""problem - 5"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the number's: "", add_numb)


if __name__ == ""__main__"":
    main()
",47,"def main():
    print(""problem - 5"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the number's: "", add_numb)


if __name__ == ""__main__"":
    main()
",47,"def main():
    print(""problem - 5"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the number's digits: "", add_numb)


if __name__ == ""__main__"":
    main()
",42,"def main ():
print (""problem - 5 "")
print (""............"")
numb = int (input ('write an integer number: ')
mak_list \( =[ \) int \( (x) \) for \( x \) in rtr (numb) \( ] \)
add-numb \( =0 \)
fon is in mak-list:
add_numb \( +=i \)
print (""Sum of the numbers: "", \( a d d \)-numb)
If _ name _ \( == \) ""- main_.""
main()",142,"def main():
    print(""problem - 5 "")
    print(""............"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",33,"def main():
    print(""problem - 5 "")
    print(""............"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",33,"def main():
    print(""problem - 5"")
    print(""............"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",34
"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",0.2,"int (input (""Enter a number: "")
num =
Ans =)
while num > 1:
Ans * = num
num - =|
1
return Ans",29,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int input C ""Enter a number: 11)
Ans = )
while num > / :
Ans * = num
mm - = /
return Ans",23,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",0,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",0,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int (input (""Enter a number: ""
Ans =1
while num > 1 :
Ans * = num
num -= 1
return Ans",16,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int (input (""Enter a number: "")
\[
\text { Ans = } 1
\]
while num \( >1 \) :
Ans \( *= \) num
mum - \( =1 \)
retirn Ans",45,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",0,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",0,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",0
"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
    turn_right()
    move()
    turn_left()
    move()


# This function return to Karel's starting point.
def go_back():
    for i in range(2):
        turn_left()
    for i in range(3):
        move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left


if __name__ == ""__main__"":
    main()
",0.2,"from Karel. stanfordkarel import *
#This
program
a beeper and
def main ():
if
Karel pick
up
back into her house,
#Move to the beeper.
makes
go
move beeper ()
#Pick the beeper up.
beeper ()
pick
#Return to Karel's starting point.
go-back ()
#This function moves Karel to the beeper.
def move-beeper ():
for i in
(2):
range
move()
turn right()
move()
turn left()
move()
# This function return to Kard's starting
def go-back();
for ?. in range
turn-left()
for i
name
main ()
move()
turn_right()
move (f
turn-right()
def turn_right()
for i in range (3) =
turn-
left
rang
e (3);
==
main____'",257,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_to_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_to_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# This function returns to Karel's starting point.
def go_back():
    for i in range(2):
        turn_left()
        for i in range(2):
            move()
            turn_right()
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",59,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_to_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_to_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# This function returns to Karel's starting point.
def go_back():
    for i in range(2):
        turn_left()
        for i in range(3):
            move()
        turn_right()
        move()
        turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",45,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_to_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_to_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# This function returns to Karel's starting point.
def go_back():
    for i in range(2):
        turn_left()
        move()
        turn_right()
        move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",65,"from Karel. stanfor dkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main () :
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick - - beeper
# Return to Karel's starting point.
go back ( )
# This function moves Karel to the beeper.
def move - -beeper ( ) :
for i in range (2) :
move ()
torn right ()
move ( )
turn left( )
movel )
# this function return to Karel's starting poin
def go-back() ; for i. in range (2) :
turn- left ()
for i in rang e (3) :
move()
turn-right
()
turn move() - right ()
def turn right ():
for i in range (3)
turn - left
if
name
main
main ()",195,"from karel.stanfordkarel import *

# This program makes Karel pick up
# a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# this function return to Karel's starting point
def go_back():
    for i in range(2):
        turn_left()
    for i in range(3):
        move()
        turn_right()
        move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",43,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# this function return to Karel's starting point
def go_back():
    for i in range(2):
        turn_left()
    for i in range(3):
        move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",20,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_to_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_to_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# this function return to Karel's starting point
def go_back():
    for i in range(2):
        turn_left()
    for i in range(3):
        move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",26,"from Karel. stanfordkarel import *
# This program makes Kavel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick- beeper ()
# Return to Karel's starting point.
go - back ()
# This function moves karel to the beeper.
def move-beeper ():
for i in range (2):
move ()
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back ();
For ?. in range (2):
turn-left ()
for i in range (3):
move()
turn right ()
move (),
turn-right ()
def turn-right () ?
for i in range (3):
turn-left
if -- name == ' -- main_';
main ()",177,"from karel.stanfordkarel import *

# This program makes Karel pick up
# a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# this function return to Karel's starting point
def go_back():
    for i in range(2):
        turn_left()
    for i in range(3):
        move()
        turn_right()
        move()
        turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",35,"from karel.stanfordkarel import *

# This program makes Karel pick up
# a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# this function return to Karel's starting point
def go_back():
    for _ in range(2):
        turn_left()
        for i in range(3):
            move()
        turn_right()
        move()
        turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",44,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_to_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_to_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# This function returns to Karel's starting point.
def go_back():
    for i in range(2):
        turn_left()
        for i in range(3):
            move()
        turn_right()
        move()
        turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",45,"from Karel.stanfordkarel import * \#This program makes Karel pick up a beeper and go back into her house. def main ():
\#Move to the beeper. move_beeper () \# Pick the beeper up. pick - beeper () \# Return to Karel's starting point. go-back ()
\#This function moves Karel to the beeper. def move-beeper ():
for \( i \) in range (2):
move ()
turn right ()
move ()
turn leftc)
movec)
\# this function refurn to Karel's starting poin def go-back () ;
for i, in range (2):
for \( i \) in range \( (3) \) :
move ()
\[
\text { move ( } \text { tor }^{2} \mathrm{righ}(\mathrm{C})
\]
def turn-right () ?
for \( i \) in range (3):
turn-left
\[
\text { if } \operatorname{mame}_{\operatorname{man}()}==1 \ldots \text { main } \ldots
\]
\( m \operatorname{ain}() \)",306,"from Karel.stanfordkarel import *

# This program makes Karel pick up
# a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
    turn_right()
    move()
    turn_left()
    move()


# this function return to Karel's starting point
def go_back():
    for i in range(2):
        for i in range(3):
            move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",47,"from Karel.stanfordkarel import *

# This program makes Karel pick up
# a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
    turn_right()
    move()
    turn_left()
    move()


# this function return to Karel's starting point
def go_back():
    for i in range(2):
        for i in range(3):
            move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",47,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_to_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_to_beeper():
    for i in range(2):
        move()
    turn_right()
    move()
    turn_left()
    move()


# This function returns to Karel's starting point.
def go_back():
    for i in range(2):
        for i in range(3):
            move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",49
"def main():
    # input
    my_word = input(""Enter the original word: "")

    # function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is"" + "" "" + '""' + reversed_word + '""')


# Helper function
def reverse(word):
    # reversed_word
    new_word = """"
    # char by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word


if __name__ == ""__main__"":
    main()
",0.2,"def main ()
#imput
my _ word = imput(""Entlo- The original wood: 7)
#Function calling
reversed word = reverse (my-word)
Print ('The
reversed wood is 1+`
#Helper FunctTION
def
Lif
reverse (woord):
#reversed -won-d
mew-won-d=""/
☆ ster by chan-
for chan- im word:
new-woo-d
return
return new_wond
mame
main()
A/
+revered_word +
=char + new-wood",210,"def main():
    # input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is "" + reversed_word)


# Helper FUNCTION
def reverse(word):
    # reversed word
    new_word = """"
    # step by char
    for char in word:
        new_word = char + new_word
    return new_word


# name
main()
",71,"def main():
    # input
    my_word = input(""Enter the original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is "" + reversed_word)


# Helper Function
def reverse(word):
    # reversed word
    new_word = """"
    # step by char
    for char in word:
        new_word = char + new_word
    return new_word


main()
",69,"def main():
    # input
    my_word = input(""Enter the original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is "" + reversed_word)


# Helper Function
def reverse(word):
    # reversed word
    new_word = """"
    # step by char
    for char in word:
        new_word = char + new_word
    return new_word


main()
",69,"def main () :
# imput
my wond = inpuTC ""Enter THe original wond:
7)
#
Function calling
reversed_word = reverse (my - -word )
print C' the reversed Wood is + , + "" , + reversd-wordt 1/2)
# Helpen Function
def reverse (wond) :
# revenued -wond
new -wohd - = "" ""
# stert by chan-
for chan- in word :
new-word = Char + new-word
# retun-m
retuntm new_wond
if
name == main :
mainc)",150,"def main():
    # input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)


# Helper Function
def reverse(word):
    # reversed-word
    new_word = """"
    # start by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word


if __name__ == ""__main__"":
    main()
",25,"def main():
    # input
    my_word = input(""Enter the original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "", reversed_word)


# Helper Function
def reverse(word):
    # reversed-word
    new_word = """"
    # start by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word


if __name__ == ""__main__"":
    main()
",26,"def main():
    # input
    my_word = input(""Enter The original word: "")

    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "", reversed_word)


# Helper Function
def reverse(word):
    # reversed_word
    new_word = """"
    # start by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word


if __name__ == ""__main__"":
    main()
",25,"def main ( ) :
Limput
my _ word = input( Enten- The original word : 7
#Function calling
reversed- word = reverse (my-word )
Print ( the reversed word is (+) ""+""""+reversed-wordt""}
# Helpen- Function
def sevense
be (word) :
# reversed - word
mew-word = """"
A chen by chan-
For- chan- in word:
new-word = Char + new-word
# return
return new_word
name-
main 1 :
main ()",149,"def main():
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)


# Helper Function
def reverse(word):
    # reversed - word
    new_word = """"
    # A char by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word


if __name__ == ""__main__"":
    main()
",38,"def main():
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)


# Helper Function
def reverse(word):
    # reversed - word
    new_word = """"
    # A char by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word


if __name__ == ""__main__"":
    main()
",38,"def main():
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)


# Helper Function
def reverse(word):
    # reversed - word
    new_word = """"
    # A char by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word


if __name__ == ""__main__"":
    main()
",38,"defmaim ():
\&imput
\( m y \)-wond = impuT (""EnTen- THe onigimal wond: "")
Function calling
\# Helpen-Fumction
\[
\begin{array}{l}
\text { def nevense (won-d): } \\
\text { * revensed -won-d } \\
\text { mew-won-d = ""1 } \\
\text { X stent by chan- } \\
\text { for chan- im vond: } \\
\text { mew-won-d = chan }+ \text { mew-wond } \\
\text { * } r \text {-etun-m } \\
\text { nietuntm new-won-d } \\
\end{array}
\]",298,"def main():
    my_word = input(""Enter the original word: "")
    # Function calling
    # Helper Function
    def reverse(word):
        reversed_word = """"
        for char in word:
            reversed_word = char + reversed_word
        return reversed_word
",224,"def main():
    my_word = input(""Enter the original word: "")
    # Function calling
    # Helper Function
    def reverse(word):
        reversed_word = """"
        for char in word:
            reversed_word = char + reversed_word
        return reversed_word
",224,"def main():
    my_word = input(""Enter the original word: "")
    # Function calling
    reverse(my_word)


# Helper Function
def reverse(word):
    reversed_word = """"
    for char in word:
        reversed_word = char + reversed_word
    return reversed_word
",199
"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial for "" + str(input_nmb) + "" is "" + str(result))
",0.2,"impur-number =
int(impur (""Enter number'))
val = inpur-number
result isput_number
while (val > 1):
Val - 1
result ☆ val
+
Print ('factorial for 't shy (input-node]
+ srr (result))
val
[₁
-result",80,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val -= 1
    result *= val

print(""factorial for "" + str(input_number) + "" is "" + str(result))
val = result
",34,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val -= 1
    result *= val
print(""factorial for "" + str(input_number) + "" is "" + str(result))
",20,"input_number = int(input(""Enter number: ""))
val = input_number
result = input_number
while val > 1:
    val -= 1
    result *= val

print(""Factorial for "" + str(input_number) + "" is "" + str(result))
",24,"impur-number =
inr(inpur ('Enter number')
val = inpur-number
result input-number
while (val > 1) :
[
val =
Val - 1
result = result it val
Print ('factorial fir't shr(imput-nula)
Srr (result))",59,"import_number = int(input(""Enter number""))
val = import_number
result = import_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial for"", str(import_number))
str(result)
",30,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial for"", str(input_number), str(result))
",16,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial for"", str(input_number), ""is"", str(result))
",12,"inpur_number =
int(impur (""Enter number""
Val = inpur-number
result = input-number
While (val>1):
val =
val -1
result = result & val
print ('factorial f& + sur(input-node)
+ spr (result))",50,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial of "" + str(input_number) + "" is "" + str(result))
",5,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial of "" + str(input_number) + "" is "" + str(result))
",5,"input_number = int(input(""Enter number: ""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial of "" + str(input_number) + "" is "" + str(result))
",7,\( \begin{array}{l}\text { inpur-number = } \\ \text { inr(inpur('Entar number')) } \\ \text { val }=\text { impur-number } \\ \text { resalt - roppur-number } \\ \text { while (val }>1 \text { ): } \\ {\left[\begin{array}{c}\text { val }= \\ \text { result }=\text { result }-1 \\ \text { val }\end{array}\right.} \\ \text { pront ('factobial for' + shr(impat-nob) } \\ +\operatorname{srr}(\text { result })) \\\end{array} \),273,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = result = result - 1
print(""factorial for"" + str(input_number) + str(result))
",28,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial for "" + str(input_number) + "" is "" + str(result))
",3,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val -= 1
    result *= val
print(""factorial for "" + str(input_number) + "" is "" + str(result))
",20
"def main():
    num = input(""input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",0.2,"def main ():
num = input (""imput :"")
sum
=
O
for nin num =
sum t
print (sum)
=
int (n)",49,"def main():
    num = input(""input :"")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",2,"def main():
    num = input(""input :"")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",2,"def main():
    num = input(""Input :"")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",3,"def main () :
num = input (""Input: "")
sum = 0
for n in num i
sum + = int (n)
print (sum)",33,"def main():
    num = input(""Input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main():
    num = input(""Input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main():
    num = input(""Input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main () :
num = input (""Input : "")
sum = 0
for n in num :
sum + = int (n)
print (sum)",34,"def main():
    num = input(""Input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main():
    num = input(""Input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main():
    num = input(""Input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def \( \operatorname{main}(C) \) :
\[
\begin{array}{l}
\text { num }=\text { input (""input: "") } \\
\text { sum }=0
\end{array}
\]
for \( n \) in num:
\[
\operatorname{sum} t=\operatorname{int}(n)
\]
print (sum)",132,"def main(C):
    num = input(""input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main(C):
    num = input(""input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main(C):
    num = input(""input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1
"def main():
    num = input(""enter the number you want to add"")
    sum = 0
    for i in str(num):
        sum = sum + int(i)
    print(""sum of the value you entered is"", sum)
",0.2,"def main (s.
()!
61508x08 09
0818 TU O sloj toč
num= Impot (""enter the number you want to add)
поше
Inpri
som = 0 101
zgnivoe nuovesimixam
=0
(AD) tizoged to stopilitie nod ovoseido gnieod
aliotab ort eromeH ab10001 100 ot ti of no blert ezabelą - moosoo ucy to noilomitnoo ei tohol zid
for i in str(num): com
35100 suzel
8181882405
Sum=somt int (i)
edmult inucA
telti tuossA
""mis
Print (""sum of the value you entered is, son)
HILOM
00.000,82
log
alpä yliutoM
noitq Inomseudaid 12915ml
ASOS SS VOM
noitosilofigo inayo?
LF1",375,".python
def main():
    num = input(""enter the number you want to add"")
    sum = 0
    for i in str(num):
        sum = sum + int(i)
    print(""sum of the value you entered is"", sum)
",8,".python
def main():
    num = input(""enter the number you want to add: "")
    sum = 0
    for i in str(num):
        sum = sum + int(i)
    print(""sum of the value you entered is"", sum)
",10,"def main():
    num = input(""Enter the number you want to add: "")
    sum = 0
    for i in str(num):
        sum += int(i)
    print(""Sum of the value you entered is: "", sum)


main()
",22,"SINOE
808
09
def main(s)
num= Imput (""enter the number you want to odd"")
UOV
Sum = 0
estimixom
(I)
tizoqeC
to
stooilities
@dno8
covocaiC
o
UOV
Andri
alinteb
310
enelt
ab10007
no
blort
mov
to
for i in str(mum);ass YDM
hedmuff
Sum-Sumt int (i)
reltiT
00.000,E8
Print (""sum of the Value you entered is, blan sum)
ASOS SS VDM
virutoM
noitosilation
;hoita
LA",227,"def main():
    num = input(""enter the number you want to add"")
    Sum = 0
    for i in str(num):
        Sum = Sum + int(i)
    print(""sum of the values you entered is"", Sum)
    return
",16,"def main():
    num = input(""enter the number you want to add"")
    Sum = 0
    for i in str(num):
        Sum = Sum + int(i)
    print(""sum of the Value you entered is"", Sum)
    return
",16,"def main():
    num = input(""Enter the number you want to add: "")
    Sum = 0
    for i in str(num):
        Sum = Sum + int(i)
    print(""Sum of the values you entered is: "", Sum)
    return


main()
",31,"def main () .
08168 TU
11
num = input (""enter the number you want to add )
Som=0
zpnivo
1ovoseidl o prieoorla
hotel
heH
ab
ot ti of no blerl gabelq
for è in str (num) :
Vi inucoDA
Sum = Sum+ int (i)
raltil touo >A
Print (""sum of the value you entered in, som)
00.000
.1
noitosil
noitgo Inemoanu
LFT",154,"def main():
    num = input(""enter the number you want to add: "")
    Sum = 0
    for i in str(num):
        Sum = Sum + int(i)
    print(""sum of the values you entered is"", Sum)
",7,"def main():
    num = input(""Enter the number you want to add: "")
    Sum = 0
    for i in str(num):
        Sum = Sum + int(i)
    print(""Sum of the value you entered is"", Sum)
",8,"def main():
    num = input(""Enter the number you want to add: "")
    Sum = 0
    for i in str(num):
        Sum = Sum + int(i)
    print(""Sum of the digits of the number you entered is:"", Sum)
",27,"def main () :
num = Imput (""enter the number youcust to add"")
\[
\text { sum }=0
\]
for i in Mtr(num):
\[
\text { sum }=\operatorname{sum}+\operatorname{int}(i)
\]
Print (""sum or the valee yor entered is"", sum)",79,"def main():
    num = input(""enter the number you want to add"")
    sum = 0
    for i in str(num):
        sum = sum + int(i)
    print(""sum of the values you entered is"", sum)
",1,"def main():
    num = input(""enter the number you want to add"")
    sum = 0
    for i in str(num):
        sum = sum + int(i)
    print(""sum of the values you entered is"", sum)
",1,"def main():
    num = input(""Enter the number you want to add: "")
    sum = 0
    for i in str(num):
        sum = sum + int(i)
    print(""Sum of the values you entered is"", sum)
",5
"user_input = input(""Write your string here: "")
upper = user_input.upper()
print(upper)
",0.2,"input = imput ( ""write your string
user_ input. upper (1
user_
upper = user_ input
print (upper)
here: "")",50,"input = input(""write your string: "")
user_input = input.upper()
print(user_input)
",29,"user_input = input(""write your string here: "")
user_upper = user_input.upper()
print(user_upper)
",11,"user_input = input(""write your string here: "")
upper = user_input.upper()
print(upper)
",1,"user_input = input(""write your string here:
1)
upper = user_input. upper(1
print (upper)",7,"user_input = input(""write your string here:"")
upper = user_input.upper()
print(upper)
",2,"user_input = input(""write your string here: "")
upper = user_input.upper()
print(upper)
",1,"user_input = input(""write your string here: "")
upper = user_input.upper()
print(upper)
",1,"user-input = input(""write your string here:
11
Upper = user_input. upper()
print (upper)",9,"user_input = input(""write your string here: "")
Upper = user_input.upper()
print(Upper)
",3,"user_input = input(""write your string here: "")
Upper = user_input.upper()
print(Upper)
",3,"user_input = input(""write your string here: "")
Upper = user_input.upper()
print(Upper)
",3,"user-input = imput (""write your string here: "") upper \( = \) user input upper ( ) print (upper)",18,"user_input = input(""write your string here: "")
upper = user_input.upper()
print(upper)
",1,"user_input = input(""write your string here: "")
upper = user_input.upper()
print(upper)
",1,"user_input = input(""write your string here: "")
upper = user_input.upper()
print(upper)
",1
"from karel.stanfordkarel import *

""""""
Karel should fill the whole world with beepers.
""""""


def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",0.2,"*
from Karel, starfordkarel import
han
kanel should fill the world with beepers.
1100
def main ():
#decomposition using a
function
#each associated
while left_ is_clear():
fill_one_row()
return_to_row_start()
activity
паме
for
move_up()
#rewrite code after white loop to overcome
# fencepost bug
one-how ()
fill_",121,"from karel.stanfordkarel import *

# Karel should fill the world with beepers.
def main():
    # Decomposition using a function
    # Each associated
    while left_is_clear():
        fill_one_row()
        return_to_row_start()

    # Rewrite code after while loop to overcome
    # fencepost bug
    move_up()
    fill_one_row()
",68,"from karel.stanfordkarel import *

# Karel should fill the world with beepers.
def main():
    # Decomposition using a function
    # Each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # Rewrite code after while loop to overcome fencepost bug
    fill_one_row()
",34,"from karel.stanfordkarel import *

# Karel should fill the world with beepers.
def main():
    # Decomposition using a function
    # Each associated
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # Rewrite code after while loop to overcome fencepost bug
    fill_one_row()


def fill_one_row():
    pass


def return_to_row_start():
    pass


def move_up():
    pass
",138,"from karel. stanfordkarel import
will
karel should fill the world with beepers.
1110
def main() :
# decomposition using a function name for
# each associated activity
while left_is-clean
retur_to_row- start()
fill_one-row()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill - one - -row()",105,"from karel.stanfordkarel import *

# karel should fill the world with beepers.


def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clean:
        return_to_row_start()
        fill_one_row()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",48,"from karel.stanfordkarel import *

# karel should fill the world with beepers.
def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clean:
        return_to_row_start()
        fill_one_row()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",50,"from karel.stanfordkarel import *

# Karel should fill the world with beepers.
def main():
    # Decomposition using a function name for
    # each associated activity
    while left_is_clear():
        return_to_row_start()
        fill_one_row()
        move_up()
    # Rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",48,"from Karel. stanfordkarel import *
hun
Karel should fill the world with keepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()",79,"from karel.stanfordkarel import *

# Karel should fill the world with beepers.
def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",16,".python
from karel.stanfordkarel import *

# Karel should fill the world with beepers.
def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",24,"from karel.stanfordkarel import *

# Karel should fill the world with beepers.
def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",16,"from karel.stayfordkarel inport
IIII""
karel should fill the world with beepers.
""u u
\( \operatorname{def} \operatorname{main}() \) :
\# decomposition using a function rave for \# each associated activity while left-is_clear ():
fill-ore-row()
retur _to _ row_start \( ( \) )
nove_up ()
\# rewirite code after white loop to overcone \# fencepost bug
fill_one-row()",118,"from karel.stanfordkarel import *

""""""
karel should fill the world with beepers.
""""""


def main():
    # decomposition using a function rave for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after white loop to overcome
    # fencepost bug
    fill_one_row()
",10,"from karel.stanfordkarel import *

""""""
karel should fill the world with beepers.
""""""


def main():
    # decomposition using a function for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",12,"from karel.stanfordkarel import *

""""""
karel should fill the world with beepers.
""""""


def main():
    # decomposition using a function for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",12
"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0.2,"if
from karel.stanfordkarel import*
def main ()
move()
move()
turn_right()
move()
turn_left()
move()
-
pick-beeper()
return-home()
def return home()
turn-around()
move()
turn_right()
move ()
turn_left()
movel)
move()
turn_around ()
def turn_right()
for i in range (3):
turn-left()
def turn around ()
for i in range (2):
turn_left()
name.
main()
^_main_",144,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stamfordkaral import
def main()
move()
move()
turn-right(
move()
turn-left()
move()
pick. beeper()
return-home()
def return_home()
t#urn_around()
move()
turn_right(?
move ()
turn- left()
movel)
move()
turn_around()
def turn-right()
for i in range (3):
turn- left()
def turn. around ()
for i in range (2):
turn-left()
if name - main' :
mainl",146,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",11,"from karel.stamfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",1,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel. stanfordkarel import*
det main ()
move()
move()
turn-right ()
move()
turn-left()
move()
pick-beeper()
return-home()
def return_home()
turn-around()
move()
turn-right ()
move ()
turn-left ()
move()
move()
turn-around()
det turn-right()
for i in range (3):
turn-left ()
def turn- around()
for i in range (2):
turn-left ()
if
name
== '_main ' :
main()",144,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel. stanfordkarel import *
def main ()
move ()
move()
turn-right ()
move ()
turn-leff()
move ()
pick-beeper ()
return-home()
def return_home()
trurn_around()
move ()
turn_right()
move ()
turn_left ()
movel)
move ()
turn_around ()
def turn-right ()
for \( i \) in range (3):
turn-left ()
def turn around()
for \( i \) in range (2):
turn-left \( ( \) )
if \( \operatorname{mame}_{-\operatorname{main}()}== \) __main', :",193,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",11,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0
"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]

    input_string = input(""Enter the string: "")
    input_string = input_string.lower()

    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1

    print(vowel_count)


if __name__ == ""__main__"":
    main()
",0.2,"def main ():
rauel caunl=0
vawels = ['a', 'e', 'i', '0', 'u']
""input-string = ""input (""Enter the string:"")
impret string = ""impret_string= lawer ()
for chaor in `imput string:
for vauvel in vamels:
if char = = vowel:
vauvel_cament + = 1
point (vowel count)
`__main_
y__name__ =
main ()
INN
':",148,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",4,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",4,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",4,"dy main ():
vawel_count==0
vawels ['a' 'e' ii, 'o', 'u' ]
input- string= input (""Enter the striegn""."")
input string. lower()
for char in input string:
for vawel 'en vawels:
if char== vowel:
valuel-calest += 1
point (newel count)
if name main__':
main()",146,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string: "")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",3,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string: "")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",3,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string: "")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",3,"de main () :
vowel-count=0
vowels= ['à','e', 'i', 'o','u']
input_string = input (""Enter the string:"")
input string = input_string . lower ()
for char in input string:
for vowel in vowels :
if char == vawel:
vowel-count +=1
print (nouvel count)
if _name_ = = '_main _- ':
main ()",115,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",4,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",4,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",4,"de main ():
vouel caunt \( =0 \)
input_string = input (""Enter the string:"")
input_string = inpet_string. lawer()
for choor in input string:
for vauel 'en vauch:
if char = = vouel:
valuel-caunt \( +=1 \)
print (veuel caunt)
\[
\begin{array}{l}
\text { if _-name__ }==\text { '_ main_- } \\
\operatorname{main}() \\
\end{array}
\]",210,"def main():
    vowel_count = 0
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in ""aeiou"":
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",50,"def main():
    vowel_count = 0
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in ""aeiou"":
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",50,"def main():
    vowel_count = 0
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in ""aeiou"":
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",50
"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])
",0.2,"def main ():
string = str (input ('Enter string: '))
for i in range
print (string[i])
((len(string)-1),-1,-1):
لك
TO
AYS",60,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2,"our
priud
- "") abuse u! ! way
(5, : bureys capul, ) produc) eys = burays
:
()unow top",104,"
for proud in ""I abuse you in every way"":
    (s, : bureys_capul, ) = proud
    eys = bureys

    now_top()

return top
",103,"
for proud in ""I abuse you! ! way"":
    (s, : bureys_capul, ) = proud
    eys = bureys

    now_top()

return
",103,"I'm sorry, but the provided OCR result of the handwritten Python code is too distorted and doesn't provide enough context to correct it. Could you please provide a clearer version or describe what the code is supposed to do?",181,"det
main ():
string = str (input ('Enter string: '))
for i in range ((len (string)-1), - 1 ,- 1).
print (string [i])",34,"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])
",0,"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])
",0,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2,"def \( \operatorname{main}( \) ):
\[
\text { string }=\operatorname{str}(\text { input ('Enter string: IJ) }
\]
for \( i \) in range \( (( \) len(string \( )-1),-1,-1) \) : print (string \( [i] \) )",102,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2
"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []


# It check every element in list(sequence) --
for i in seq:
    # It decides whether an element from sequence is even ---
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list(seq_even)

print(seq_even)
",0.2,"seq - [1, 2, 3, 4, 5, 6, 7, 8, 9]
seg - even = []
#It checks every element in dist (sequence)--
for i in seq:
#it decides whether an element from sequence is even ---
if i % 2 == 0:
seq-even. append(i) #appends even i in empty list (seq-even)
print (seq-even)",40,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in seq (sequence)--
for i in seq:
    # it decides whether an element from sequence is even ---
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list (seq_even)
print(seq_even)
",11,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in seq (sequence)--
for i in seq:
    # it decides whether an element from sequence is even ---
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list (seq_even)
print(seq_even)
",11,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in seq (sequence)--
for i in seq:
    # it decides whether an element from sequence is even ---
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list (seq_even)
print(seq_even)
",11,"seq = [1, 2, 3, 4, 5 , 6, 7, 8, ]
seg even = [ ]
# It checks every element in list (sequence)
for i in seq:
# it decides whether an element from sequence is even
if i % 2 == O:
seq-even. append (i) # appends even i in empty list (seq-even)
print (seq-even)",44,"seq = [
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
]
seq_even = []
# It checks every element in list (sequence)
for i in seq:
    # it decides whether an element from sequence is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list (seq_even)
print(seq_even)
",49,"seq = [
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
]
seq_even = []
# It checks every element in list (sequence)
for i in seq:
    # it decides whether an element from sequence is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list (seq_even)
print(seq_even)
",49,"seq = [1, 2, 3, 4, 5, 6, 7, 8]
seq_even = []
# It checks every element in list (sequence)
for i in seq:
    # it decides whether an element from sequence is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list (seq_even)
print(seq_even)
",17,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9]
Seg-even=[]
# It checks every element in list (sequence) - --
for i in seg:
# it decides whether an element from sequence is even --.
if i % 2 = = 0:
seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)",46,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in list (sequence) - --
for i in seq:
    # it decides whether an element from sequence is even --.
    if i % 2 == 0:
        seq_even.append(i)  # appends even ; in empty list (seq_even)
print(seq_even)
",11,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in list (sequence) - --
for i in seq:
    # it decides whether an element from sequence is even --.
    if i % 2 == 0:
        seq_even.append(i)  # appends even ; in empty list (seq_even)
print(seq_even)
",11,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in list (sequence)
for i in seq:
    # it decides whether an element from sequence is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even numbers in empty list (seq_even)
print(seq_even)
",21,"\[
\begin{array}{l}
\text { seq }=[1,2,3,4,5,6,7,8,9] \\
\text { seq-even }=[]
\end{array}
\]
\# It checks every element in dist(sequence.).for \( i \) in seq:
\# it decides whether an clement from sequence is even -.. if \( i \% 2==0 \) :
seq-even. append ( \( i \) ) \# appends even \( i \) in empty list (seq-even) print (seq-even)",127,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
for i in seq:
    if i % 2 == 0:
        seq_even.append(i)
print(seq_even)
",153,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []

for i in seq:
    if i % 2 == 0:
        seq_even.append(i)
print(seq_even)
",152,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []

# It checks every element in seq
for i in seq:
    # it decides whether an element from seq is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list seq_even

print(seq_even)
",28
"from graphics import Canvas

CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01

def main:
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    

    while TRUE

        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        
        if mouse_x >= 0 and mouse_x <= CANVAS_WIDTH and mouse_y >=0 and mouse_y <= CANVAS_HEIGHT",0.2,"from
FROM GRAPHICS IMPORT CANVAS
CANVAS_WIDTH = 300
CANVAS-HEIGHT = 300
CIRCLE_SIZE =
DELAY = 0,01
= 20
DEF MAIN:
CANVAS = CANVAS ( CANVAS WIDTH, CANVAS HEIGHT
WHILE TRUE
MOVSE_X = CANVAS. GET_MOUSE_x()
MOUSE-Y = CANVAS. GET MOUSE_Y()
TE
1
IF MOUSE X >= 0 AND MOUSE X E CANVAS_WIDTH
AND MOUSELY TO AND MOUSE_YE CANVAS. HEIGH",203,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x <= canvas_width
            and mouse_y >= 0
            and mouse_y <= canvas_height
        ):
            pass
",170,"from graphics import Canvas

CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01


def main():
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    while True:
        MOUSE_X = canvas.get_mouse_x()
        MOUSE_Y = canvas.get_mouse_y()
        if (
            MOUSE_X >= 0
            and MOUSE_X <= CANVAS_WIDTH
            and MOUSE_Y >= 0
            and MOUSE_Y <= CANVAS_HEIGHT
        ):
            pass
",122,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x <= canvas_width
            and mouse_y >= 0
            and mouse_y <= canvas_height
        ):
            pass
",170,"FROM GRAPHICS IMPORT CANVAS
CANVAS_WIDTH 11 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0,01
DEF MAIN :
CANVAS = CANVAS(CANVAS WIDTH, CANVAS HEC 641)
WHILE TRUE
MOVSE -X = CANVAS. 6ET MOUSE x()
MOV. SE- - Y = CANVAS. GET MOUSE ( ) )
If MOUSE_ x > = U AND MOUSE x t CANUAS_WIDTH
AND NOUSE. -Y >=0 AND MOUSE_YE CANUVAS.HEIGH",199,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x <= canvas_width
            and mouse_y >= 0
            and mouse_y <= canvas_height
        ):
            pass
",170,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x <= canvas_width
            and mouse_y >= 0
            and mouse_y <= canvas_height
        ):
            pass
",170,"from graphics import Canvas

CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01


def main():
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    while True:
        MOUSE_X = canvas.get_mouse_x()
        MOUSE_Y = canvas.get_mouse_y()
        if (
            MOUSE_X >= 0
            and MOUSE_X <= CANVAS_WIDTH
            and MOUSE_Y >= 0
            and MOUSE_Y <= CANVAS_HEIGHT
        ):
            pass
",122,"FROM GRAPHICS IMPORT CANVAS
CANVAS_WIDTH = 300
CANVAS_ HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0,01
DEF MAIN :
CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH)
WHILE TRUE
MOUSE_ X = CANVAS . GET_MOUSE _ X ()
MOUSE- Y = CANVAS . GET MOUSE_ Y ( )
IF MOUSE XT =U AND MOUSE X E CANVAS_WIDTH
AND MOUSELY SEO AND MOUSE-TE CANVAS HEIGH",205,"from graphics import Canvas

CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01


def main():
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    while True:
        MOUSE_X = canvas.get_mouse_x()
        MOUSE_Y = canvas.get_mouse_y()
        if (
            MOUSE_X >= 0
            and MOUSE_X <= CANVAS_WIDTH
            and MOUSE_Y >= 0
            and MOUSE_Y <= CANVAS_HEIGHT
        ):
            pass
",122,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x <= canvas_width
            and mouse_y >= 0
            and mouse_y <= canvas_height
        ):
            pass
",170,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x <= canvas_width
            and mouse_y >= 0
            and mouse_y <= canvas_height
        ):
            pass  # Add your code here
",192,"FRIM GRAPHICS I MPORT CANVAS
\[
\begin{array}{l}
\text { CANVAS_WIDTH }=300 \\
\text { CANVAS_HEl6HT }=300 \\
\text { CIRCLE_SIZE }=20 \\
\text { DELAY = } 0,01
\end{array}
\]
DEF MAIN :
canvas = Canvas ( canvar_ wi DFH, canvas Hec b HT)
WHILE TRUE
\[
\begin{array}{l}
\text { MOVSE-X = CONVAS. GET_MOUSE_X() } \\
\text { MOVSE-Y = CANVAS. GET MOUSE_Y () }
\end{array}
\]
If MOUSE_X \( X=0 \) AND MOUSE_X \( E \) CANUNS_WIOT4 AND NOUSE_Y \( T=0 \) AND MOUSE_YE CH, USS. HEIG",321,"
FROM GRAPHICS IMPORT CANVAS
CANVAS_WIDTH = 300 
CANVAS_HEIGHT = 300 
CIRCLE_SIZE = 20 
DELAY = 0.01

def MAIN():
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    WHILE TRUE:
        MOUSE_X = CANVAS.GET_MOUSE_X() 
        MOUSE_Y = CANVAS.GET_MOUSE_Y() 
        if MOUSE_X >= 0 and MOUSE_X <= CANVAS_WIDTH and MOUSE_Y >= 0 and MOUSE_Y <= CANVAS_HEIGHT:
            pass
",141,"from graphics import Canvas

CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01


def main():
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    while True:
        MOUSE_X = canvas.get_mouse_x()
        MOUSE_Y = canvas.get_mouse_y()
        if (
            MOUSE_X >= 0
            and MOUSE_X <= CANVAS_WIDTH
            and MOUSE_Y >= 0
            and MOUSE_Y <= CANVAS_HEIGHT
        ):
            pass
",122,"from graphics import Canvas

CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01


def main():
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    while True:
        MOUSE_X = canvas.get_mouse_x()
        MOUSE_Y = canvas.get_mouse_y()
        if (
            MOUSE_X >= 0
            and MOUSE_X <= CANVAS_WIDTH
            and MOUSE_Y >= 0
            and MOUSE_Y <= CANVAS_HEIGHT
        ):
            pass
",122
"# 1 karel Problem - karel Home

from karel.stanfordkarel import *

# This program defines a main function which should make Karel
# move to the beeper, pick it up and return home.
def main():
    get_out()
    pick_food()
    get_back_home()


# pre : karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",0.2,"#1 Karel Problem - Karel home
from Kard Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it and return home.
up
def main ():
GRE_ONE ()
pick-food ()
get back home u
#pre: Karel facing eask, at the corner of starting position.
# posk: Karel facing east, outside the home, at the position of beeper
def get out ():
turn_right()
Move (
turn_left()
Move ()
Move ()
move()
# post
· Karel facing west, at
def pick-food ():
pick beeper ()
turn around ()
#post: Karel facing east, at the corner of starting position
def get back home ():
move ()
Move ()
move()
turn_right()
move ()
turn right (1
def turn right ():
for i in range (3)
turn_left()
def turn around ():
turn_left()
zurn_left()
the position of beeper
if_name__ == '__main_ ' :
main ()",229,"# 1 Karel Problem - Karel home
from Stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it and return home.


def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position.
# post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",23,"# 1 Karel Problem - Karel home
from stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it and return home.


def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position.
# post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",22,"# Karel Problem - Karel home
from stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it and return home.


def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position.
# post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",24,"# 1 karel Problem - Karel home
from Karel stanfordkarel import
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main ():
get-one(?
pick_food ()
get_back home ()
# pre : Karel facing east, at Line corner of starting position
# post ! karel facing east, outside the home, at the position of beeper
def get out ()
turn_ right
move ()
turn left ()
move ()
move
move
# post Karel facing west at the position of beeper
10°M
def pick-food () :
beeper ()
turn_ around()
# post: Karel facing east, at the corner of starting position
def get- back home () :
move ()
move
move ()
turn_right ( )
move ()
turn
right ()
def turn right ( )
for i in range (3) :
turn_left
def turn_ around () :
turn_ left ()
turn_ left ()
if name- == '-main-':
main ()",202,"# 1 karel Problem - Karel home
from stanfordkarel import Karel

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre : Karel facing east, at Line corner of starting position
# post : karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west at the position of beeper


def pick_food():
    beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",31,"# 1 karel Problem - Karel home
from stanfordkarel import Karel

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre : Karel facing east, at Line corner of starting position
# post : Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west at the position of beeper


def pick_food():
    beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",32,"# Karel Problem - Karel home
from stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre : Karel facing east, at Line corner of starting position
# post : Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",23,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import*
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre: Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ()
move ()
turn_ left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn-around ( )
# post: Karel facing east, at the corner of starting position
def get_back_home () :
move ()
Move ()
move ()
turn right ()
move ( )
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == - main -:
main ()",179,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",9,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",9,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",9,"\#1 karel Problem-karel home from karel. Stanfordkarel impork *
\# This program defines a main function which should make karel \# move to the beeper, pick it up and return home
def \( \operatorname{main}() \) :
get_oute \( ( \) )
pick-food ()
get_back_home \( U \)
\# pre: Karel facing eask, at the corner of stomeng position
\# posk: Karel facing east, oukside the home, at the position of beeper
def get_out () :
turn_right ()
move?
turn_left ()
move ()
move ()
move ()
\# post : Karel facing west, at the position of beeper
def pick-food () :
pick_beeper ()
turn_around ()
\# post: karel fring east, at the corner of stonting position def get_back_home ():
move ()
move ()
move ()
turn_right ()
move ()
turn right ( )
def turn right () :
for \( i \) in range (3) :
turn_left ()
def turn around ():
turn_left ()
turn_kft()
if _ name_ \( == \) - main - '
main ()",223,"# 1 karel Problem-karel home
from karel.stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position
# post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post : Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",11,"# 1 karel Problem-karel home
from karel.stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position
# post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post : Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",11,"# karel Problem-karel home
from karel.stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position
# post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post : Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",14
"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0.2,"def factorial (n):
if n == 0:
return 1
else:
return n* factorial (n-1)
print (factorial (5))",34,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n)
if n==
O:
return 1
else :
return n
factorial (n-1) -
print (factorial(5))",39,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial (n) :
if n=0 :
return 1
else:
return 1 * factorial (n-1)
print (factorial (5)",39,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial \( (n) \) :
if \( n==0 \) :
return 1
else:
return \( n \) * factorial \( (n-1) \)
print (factorial \( (5)) \)",56,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0
"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    list = []

    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                list.append(elem)
    print(list)
",0.2,"det main 1:
List 1 2 (1,2,3,4]
List 2 = (3,4,5,67
List = []
for elem 1 in list 1 1
for elem2 în list 2:
it olem2 = = elem 2:
elem = elem 2
(N46)
print (list)
list-append (etem)
Livor",118,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    list = []
    for elem1 in list1:
        for elem2 in list2:
            if elem2 == elem1:
                elem = elem2
                list.append(elem)
    print(list)
    return list
",20,"def main():
    list_1 = [1, 2, 3, 4]
    list_2 = [3, 4, 5, 6]
    list_ = []
    for elem_1 in list_1:
        for elem_2 in list_2:
            if elem_2 == elem_1:
                elem = elem_2
                list_.append(elem)
    print(list_)
    return list_
",33,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6, 7]
    list3 = []
    for elem1 in list1:
        for elem2 in list2:
            if elem2 == elem1:
                list3.append(elem2)
    print(list3)
    return list3
",52,"det main O
list 1 2 (1,2,3,4)
list 2 2 (3,4,5,67
List = 17
for elem1 in list 1 :
for elem2 in list2:
it elem1 == elem2:
elem = elem7
list-append (eum)
print (list)",103,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 67]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)


main()
",14,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 67]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)


main()
",14,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)


main()
",13,"det main () :
list 1 2 [1, 2,3,4]
list 2 =
(3,4,5,6)
List = []
for elem1 in list 1?
for eleme in list2:
it elem1 = = elem2?
elem = elem 2
list- append (elem)
print (ist)",101,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem2
                List.append(elem)
    print(List)

    return
",17,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem2
                List.append(elem)
    print(List)


main()
",14,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                List.append(elem2)
    print(List)


main()
",43,"det \( \operatorname{man}(1) \) :
\[
\begin{array}{l}
\text { list } 1=[1,2,3,4] \\
\text { list } 2=[3,4,5,6] \\
\text { List }=[7] \text { in list } 11 \\
\text { for elem } 1
\end{array}
\]
for elem2 in list2:
it \( \operatorname{elem} 2= \) elem2:
elem = elem 2
list-append (eum)
print (ist)",192,"def man(num):
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = [7]
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem2
                List.append(elem)
    print(List)
",10,"def man(num):
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = [7]
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem2
                List.append(elem)
    print(List)
",10,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = [7]
    for elem in list1:
        for elem2 in list2:
            if elem == elem2:
                List.append(elem)
    print(List)
",36
"String = input()
print(String[::-1])
",0.2,"String = input ()
print (String[::-1])",3,"String = input()
print(String[::-1])
",0,"String = input()
print(String[::-1])
",0,"string = input()
print(string[::-1])
",2,"String = input c)
print (String [:
-
-1])",8,"String = input()
print(String[:-1])
",1,"String = input()
print(String[:-1])
",1,"String = input()
print(String[:-1])
",1,"String = input c)
print (String [ ::- 1])",7,"String = input()
print(String[::-1])
",0,"String = input()
print(String[::-1])
",0,"String = input()
print(String[::-1])
",0,\( \begin{array}{l}\text { String }=\text { input } C) \\ \text { print }(\text { String }[::-1])\end{array} \),77,"String = input()
print(String[::-1])
",0,"String = input()
print(String[::-1])
",0,"String = input()
print(String[::-1])
",0
"from karel.stanfordkarel import *


def main():
    turn_left()
    tower_N()
    tower_S()
    move_4x()
    turn_left()
    tower_N()
    tower_S()


def tower_S():
    turn_3x()
    tower()
    turn_left()


def tower_N():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0.2,"from Karel. Stanford Rund emport
def main ():
turn-
laft
Tower_N()
tower_S()
Move 4x()
Fern-
-left()
tower_N()
-S()
tower
del
de tower -S():
Furn-3x()
tower ()
turn_left()
del tower _N():
Town ()
turn _ 3x()
move 4x()
def tower (13
for i in
range
(5):
if front_is_clear():
Put-baper (1
movel)
else:
def. Jurn - 3×(1:
turn_left()
leftis
turn-
Turn_left()
()
pest-beeper ()
- Move_4x();
move()
move()
movell
move()
name --
__main__."":
main ()
K",267,"from karel.stanford import *


def main():
    turn_left()
    tower_N()
    tower_S()
    move_4x()
    turn_left()
    tower_N()
    tower_S()


def tower_S():
    turn_3x()
    tower()
    turn_left()


def tower_N():
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper(1)
            move()
        else:
            turn_3x()
            turn_left()
            put_beeper()
            move_4x()
            move()
            move()
            move()
            move()


if __name__ == ""__main__"":
    main()
",107,"from karel.stanford import *


def main():
    turn_left()
    tower_N()
    tower_S()
    move_4x()
    turn_left()
    tower_N()
    tower_S()
    tower()


def tower_S():
    turn_3x()
    tower()
    turn_left()


def tower_N():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            turn_3x()
            turn_left()
            put_beeper()
            move_4x()
            move()
            move()
            move()
            move()


if __name__ == ""__main__"":
    main()
",106,"from karel.stanford import *


def main():
    turn_left()
    tower_N()
    tower_S()
    move_4x()
    turn_left()
    tower_N()
    tower_S()
    tower()


def tower_S():
    turn_3x()
    tower()
    turn_left()


def tower_N():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()


def turn_3x():
    for i in range(3):
        turn_left()


def move_4x():
    for i in range(4):
        move()


if __name__ == ""__main__"":
    main()
",103,"from Karel. Stanford Kand import
K
de/ main()
turn-left
tower-NC
tower- sc)
move-4x ( )
turn-lette
tower N()
tower - sc )
de/ tower - s():
turn - 3x()
tower ()
turn - lefter
def tower - NC):
town ()
turn. - 3x()
move 4r ()
def tower ():
for i in range (5) :
if front - clear():
Put-baper (
movel
else:
put. buper()
def turn- 3x(1:
turn- left(1
turn - left
Turn - left ()
del move _4x():
move!!
more!!
movel
move
=='--
if
name
main !)",285,"from Karel.Stanford import K


def main():
    turn_left()
    tower_NC()
    tower_sc()
    move_4x()
    turn_left()
    tower_N()
    tower_sc()


def tower_sc():
    turn_3x()
    tower()
    turn_left()


def tower_NC():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_clear():
            put_beeper()
            move()
        else:
            put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",19,"from Karel.Stanford import K


def main():
    turn_left()
    tower_NC()
    tower_sc()
    move_4x()
    turn_left()
    tower_N()
    tower_sc()


def tower_sc():
    turn_3x()
    tower()
    turn_left()


def tower_NC():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_clear():
            put_beeper()
            move()
        else:
            put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",19,"from karel.stanfordkarel import *


def main():
    turn_left()
    tower_NC()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()


def tower_SC():
    turn_3x()
    tower()
    turn_left()


def tower_NC():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",5,"from Karel. Stanford Kad import ""
def main () :
turn - left 11
tower_N()
tower- SC)
move- 4x ( )
turn-left ( )
tower- N()
tower - SC )
del tower - s():
turn - 3x ()
Tower ()
Turn- left ( )
del tower- NC) .
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ):
Put-boper ()
move ()
else:
Put- beeper ()
def.turn- 3x (1:
Turn- left ()
turn - left ()
burn- left ()
def . mere_ 4x();
move ()
move ()
morell
move ()
if -- name __ = = -- main __
main ()",277,"
from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()
    del tower_s():
    turn_3x()
    Tower()
    turn_left()
    del tower_NC():
    Tower()
    turn_3x()
    move_4x()
    del tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()

if __name__ == ""__main__"":
    main()
",26,"
from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()
    del tower_s()
    turn_3x()
    Tower()
    turn_left()
    del tower_NC()
    Tower()
    turn_3x()
    move_4x()
    del tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()

if __name__ == ""__main__"":
    main()
",28,"from karel.stanfordkarel import *


def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()
    del tower_s()
    turn_3x()
    Tower()
    turn_left()
    del tower_NC()
    Tower()
    turn_3x()
    move_4x()
    del tower()
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",24,"from Karel. Stanfordkad import *
def max \( (1): \)
\[
\begin{array}{l}
\text { furn - let (1) } \\
\text { fown-N() } \\
\text { tower-S() } \\
\text { move-4x () } \\
\text { furm-lyt ( ) } \\
\text { tower-N( ) } \\
\text { tower-S() } \\
\end{array}
\]
def tower-s() :
\[
\begin{array}{l}
\text { furn - } 3 \times() \\
\text { Tower (1) } \\
\text { turn - laff() }
\end{array}
\]
def tower - N ( ):
town ()
\( \operatorname{tin} \) - \( 3 \times() \)
move_ \( 4 \times() \)
def tower (1):
for \( i \) in rang \( (5) \) :
if front-is-clear () :
move ()
else:
put_buper ()
def. fum \( -3 \times(1) \) :
\[
\begin{array}{l}
\text { turn - blff (1) } \\
\text { turn - bff (1) } \\
\text { turn - beft (1) }
\end{array}
\]
def mere_4r(1):
morel)
\[
\begin{array}{c}
\text { if name - }==^{\prime} \text {. main ... } \\
\text { main () }
\end{array}
\]
main 1)",556,"
from Karel.Stanfordkad import *
def max(1):
    turn_left(1)
    turn_down()
    tower_S()
    move_4x()
    turn_right()
    tower_N()
    tower_S()

def tower_S():
    turn_3_times()
    Tower(1)
    turn_left()

def tower_N():
    turn()
    turn_3_times()
    move_4_times()

def tower(1):
    for i in range(5):
        if front_is_clear():
            move()
        else:
            put_beeper()

def turn_3_times(1):
    turn_left(1)
    turn_off(1)
    turn_left(1)

def move_4x(1):
    move()

if __name__ == '__main__':
    main()
",129,"from Karel.Stanfordkad import *


def max_1():
    furn_left(1)
    fown_N()
    tower_S()
    move_4x()
    furn_lyt()
    tower_N()
    tower_S()


def tower_s():
    furn_3_times()
    Tower(1)
    turn_left()


def tower_N():
    town()
    tin_3_times()
    move_4_times()


def tower_1():
    for i in range(5):
        if front_is_clear():
            move()
        else:
            put_bumper()


def turn_3_times_1():
    turn_left(1)
    turn_right(1)
    turn_left(1)


def move_4r_1():
    move()


if __name__ == ""__main__"":
    main()
",121,"from karel.stanfordkarel import *


def main():
    for i in range(1):
        turn_left()
        move()
        tower_s()
        move_4x()
        turn_left()
        tower_n()
        tower_s()


def tower_s():
    for _ in range(3):
        tower(1)
        turn_left()


def tower_n():
    turn()
    for _ in range(3):
        move()
    move_4x()


def tower(i):
    for _ in range(5):
        if front_is_clear():
            move()
        else:
            put_beeper()


def turn_left(times=1):
    for _ in range(times):
        turn_left()


def move_4x():
    for _ in range(4):
        move()


if __name__ == ""__main__"":
    main()
",199
"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",0.2,"def main ():
string = str (input ( 'Enter string :'))
for i in range ((len (string)-1),-1,-1):
print (string[i])
if __name__ == '___main__':
main()",41,"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",0,"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",0,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",2,"def main ():
string = str (input( 'Enter string '))
for i in range ((len(string) - 1),-1,-1) :
print (string[i])
if -name '__main_':
main()",44,"def main():
    string = str(input(""Enter string ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",1,"def main():
    string = str(input(""Enter string ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",1,"def main():
    string = str(input(""Enter string ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",1,"det main ( ):
String = str (input (""Enter string: '))
for i in range ((len (string) -1) ,- 1 ,- 1):
print (string [i])
if __ name _== '_main-':
main ()",50,"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",0,"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",0,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",2,"det main ():
string \( = \) str (input ( Enter string: '))
for \( i \) in range ((len (string) -1\( ),-1,-1) \) : print (string \( [i] \) )
if name_ \( == \) '_-_main_-1:
\( \operatorname{main}() \)",81,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",2
"def main():

    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",0.2,"if
def main():
nur - int (input (""Enter a umby: ""))
print (f"" { num } is { ""prime if is_preme (nom)
else 'not prime' 3"")
Lef is__ pame(n):
<=
return false
elif n <= 3.
Feton True
elf 0 ² 2 = = 6
0² / 3 = = 0;
retow False
for i iN, Range (5, int(n"" 0.5) +1,6)
if 1% 1 = = 0¹ 0² 0% (i + 2) = = 6:
retor False
netum Thve
пале
maiN ()
--
main",190,"def main():
    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",1,"def main():
    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",1,"def main():
    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True


if __name__ == ""__main__"":
    main()
",44,"def main():
num = a NMBU: ""))
is {'prime' if ip_proundnorm)
else'not prime'3"")
def is prone(s)
if n<=1
return False
olig n <=3:
retun True
effn82==0 OR n% 3==0:
retor False
for i iN Range (5, int(c (0.5)+1,6)
if n%i==0 OR n% (i+2) == 6
return False
refund True
if
nane
1' main Ir's
main ()",198,"def main():
    num = int(input(""Enter a number: ""))
    print(""prime"" if is_prime(num) else ""not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",17,"def main():
    num = int(input(""Enter a number: ""))
    print(""prime"" if is_prime(num) else ""not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",17,"def main():
    num = int(input(""Enter a number: ""))
    print(""prime"" if is_prime(num) else ""not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True


if __name__ == ""__main__"":
    main()
",60,"def main():
num = int (input( ""Enter a NM bu :
print (f""Enums is S'prime if is_ prime (nom)
else not primé 3"">
def is_ prime(1):
if n <= 12
return false
elif > <= 3:
Cetun True
elf n/ 2 = = x OR 1% 3=6 ;
return False
for i in Range (5, int(1 +0.5) + 1,6
if 1% i = = x or 1% (1+2) =0 :
return False
return True
if
= =
- - main
main ()",165,"def main():
    num = int(input(""Enter a num:""))
    if is_prime(num):
        print(f""Num is prime"")
    else:
        print(""Not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",58,"def main():
    num = int(input(""Enter a num: ""))
    if is_prime(num):
        print(f""Num is prime"")
    else:
        print(""Num is not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",64,"def main():
    num = int(input(""Enter a number: ""))
    if is_prime(num):
        print(f""Number {num} is prime"")
    else:
        print(f""Number {num} is not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True


if __name__ == ""__main__"":
    main()
",115,"\( \operatorname{deg} \operatorname{main}(): \)
num =int( (iuput(""Entu a NMkn: "")) prutt(f""\{num\} is \{'prime' if is prome(num) else not prime 3 "")
def is prme \( (n) \) :
if \( n<=1 \)
reture alse
\( \operatorname{elif} \cap<=3 \) :
seton True
elf \( n \% 2==\varnothing \) or \( \cap \% 3==\varnothing \) :
re tow Jalse
for i in Ravge \( \left(5\right. \) int \( \left.\left(n^{* *} 0,5\right)+1,6\right) \) if \( n \% i==\varnothing \) or \( n \%(i+2)==\varnothing \) : retur false
nefom thoe",318,"def main():
    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif (n % 2 == 0) or (n % 3 == 0):
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if (n % i == 0) or (n % (i + 2) == 0):
            return False
    return True
",49,"def main():
    num = int(input(""Enter a Number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True
",42,"def main():
    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True


main()
",68
"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0.2,"from Karel. Stamfordkarel import
def main ():
turn-left():
while frent_is_ alpar (fi
tunn-right()
fill-row ()
return _to_home ll
Jump_row()
turn_right()
fill-row ()
vetwook to home ()
while frent-is. Elear();
meve (s
Sef fill_row();
while frent_is_ clearl]
put - beeper ()
move ()
put-beeper ()",149,"from Karel.Stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
        put_beeper()
",18,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
        put_beeper()
",16,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
        put_beeper()
",16,"from Karel. stam fordmarel impert
def main():
turn-left():
while frent- is alpar():
turn-rights
fill-row()
return to home(s)
junprowl
turn-right
fillstow()
return te 3-home()
while front is. Elear(1:
meve()
def fill. rew() :
while front. is. clearl)
put - beeper()
move()
put-seeper()",150,"from Karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
        put_beeper()
",17,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
        put_beeper()
",16,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",12,"from karel . stamfordkarel. import *
def mais ():
turn-left ():
while frent_ is_ alpar ();
turn-right ()
fill-row ( )
return_to_ home()
jumprow ()
turn-right ()
fill-row ()
returnkte -home ()
while front- is Elcar();
meve ()
Sef fill -row() ;
while front- is clear()
put - beeper ()
move ()
put-beeper ()",147,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()

    def fill_row():
        while front_is_clear():
            put_beeper()
            move()
        put_beeper()
",32,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()

    def fill_row():
        while front_is_clear():
            put_beeper()
            move()
        put_beeper()
",32,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",12,"fremkarel. stamfordkared impert*
def \( \operatorname{main}() \) :
turn-left ():
while frent - is _ clpar ():
tumn-right 1)
fill-row()
retwn-te-home()
junprow()
turn - right ()
fillarow ()
ve turnkte - home ()
while front-is. Elear ( \( ) \) :
meve()
def fill-rew():
while front - is - clearl)
put - beeper ()
move ()
put-beeper ()",177,"
from karel.stanfordkarel import *
def main():
		turn_left()
		while front_is_clear():
			turn_right()
			fill_row()
			return_to_home()
			jump_row()
		turn_right()
		fill_row()
		return_to_home()
		while front_is_clear():
			move()
	def fill_row():
		while front_is_clear():
			put_beeper()
			move()
		put_beeper()
",93,"
from karel.stanfordkarel import *
def main():
		turn_left()
		while front_is_clear():
			turn_right()
			fill_row()
			return_to_home()
			jump_row()
		turn_right()
		fill_row()
		return_to_home()
		while front_is_clear():
			move()
	def fill_row():
		while front_is_clear():
			put_beeper()
			move()
		put_beeper()
",93,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0
"from stanfordkarel import *

""""""
Karel should fill the whole world with beepers.
""""""


def main():
    """"""
    You should write your code to make Karel do its task in
    this function. Make sure to delete the 'pass' line before
    starting to write your own code. You should also delete this
    comment and replace it with a better, more descriptive one.
    """"""
    while not left_is_blocked():
        put_beeper_Line()
        reset_Position()
    put_beeper_Line()


def put_beeper_Line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",0.2,"from stanfordKarel import *
11 11 11
Kard should
beepers.
|| || ||
def
main ():
11 [1 (1
You should write
Karel do its
comment
better
fill
11 [11
/
the whole world with
Make
виче
before starting to
code. You should also
to
task in this
function.
delete the pass line
write your
owen
delete this
with
and replace it
more descriptive one.
move ()
put_ beeper ()
your
put_ beeper _line ()
our code to malce
While not left_it_ blocked ():
put - beeper_Line()
resit_ Position ()
dif put_beeper_Line():
put_beeper ()
front_is_clear
while
():",376,"
Code goes here
",563,"from stanfordKarel import *

# Karel should fill the whole world with beepers.
# Make sure to plan your code before starting to write. You should also delete the pass line and replace it with your own more descriptive one.


def main():
    # Karel do its task in this function.
    # delete this comment and replace it with your own more descriptive one.
    move()
    put_beeper()
    put_beeper_line()
    # Test your code to make sure it works as expected.
    while not left_is_blocked():
        put_beeper_line()
        reset_position()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
",322,"from stanfordkarel import *


def main():
    # Make Karel fill the whole world with beepers.
    # Before starting to code, write your task in this function.
    # Delete the pass line and replace it with your own more descriptive one.
    move()
    put_beeper()
    put_beeper_line()
    while not left_is_blocked():
        put_beeper_line()
        reset_position()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
",247,"from stanford hard import
Kard should fill the whole world with
beepers
11 11 11
daf main () :
11
11
11
you should write your code to male
karel do its task in this function.
Make sure to delite the pass line
code. You should also delete
before starting to write your this own
comment and replace it with a
better more descriptive one
11 11
while not left- is blocked C):
put- buper-line()
resit_Position c)
put- buper - Line c)
def put beeper-line() -
put beeper c)
while front is clear C) :
move ()
put- - beeper c)",208,"# Code goes here
",563,"from stanfordkarel import *


def main():
    """"""
    You should write your code to make
    Karel do its task in this function.
    Make sure to delete the pass line
    code. You should also delete
    before starting to write your own
    comment and replace it with a
    better more descriptive one
    """"""
    while not left_is_blocked():
        put_beeper_line()
        reset_position()
        put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",145,"from stanfordkarel import *

# Karel should fill the whole world with beepers
def main():
    # You should write your code to make Karel do its task in this function.
    # Make sure to delete the pass line code. You should also delete this comment and replace it with a better, more descriptive one.
    while not left_is_blocked():
        put_beeper_line()
        reset_position()
        put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",88,"from stanfordkarel import *
Kard should fill the whole world with
keepers.
11 11 11
daf main () :
11 11 11
You should write your code to males
Karel do its task in this function.
Make sure to delete the 'pass line
before starting to write your own
code. You should also delete this
comment and replace it with a
better more descriptive one.
11 11 11
While not left-is - blocked ():
put -beeper -Line()
reset_Position ()
put-buper _line ()
de put_leeper-Line ():
put -beeper ()
While front-is- clear ():
move ( )
put -beeper ()",141,"from stanfordkarel import *

# Karel should fill the whole world with beepers.


def main():
    # You should write your code to make Karel do its task in this function.
    # Make sure to delete the 'pass' line before starting to write your own code.
    # You should also delete this comment and replace it with a better, more descriptive one.

    while not left_is_blocked():
        put_beeper_line()
        reset_position()
        put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",54,"from stanfordkarel import *

# Karel should fill the whole world with beepers.


def main():
    # You should write your code to make Karel do its task in this function.
    # Make sure to delete the 'pass' line before starting to write your own
    # code. You should also delete this comment and replace it with a
    # better more descriptive one.

    while not left_is_blocked():
        put_beeper_line()
        reset_position()
        put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",61,"from stanfordkarel import *

# Karel should fill the whole world with beepers.
def main():
    # You should write your code to make Karel do its task in this function.
    # Make sure to delete the 'pass' line before starting to write your own code.
    # You should also delete this comment and replace it with a better, more descriptive one.
    while not left_is_blocked():
        put_beeper_line()
        reset_position()
        put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",57,"Grom stanfordkarel import *
111111
Karel should fill the whole world with bepers.
111111
def \( \operatorname{main}() \) :
""11 11
You should write your code to male karel do its task in this function. Make sure to delete the 'pass'1 line bfore slarting to rurite your owen code. You should also delete thir comment and replace it with a better, more descriptive one. 111111

While not left_ir_blockd ():
put_beper_Lin ()
resit_position ()
put_buper_line C)
dy put_buper-Line \( ( \) ):
put_beper ()
while front_is-clear C):
move ()
put_beper ()",155,"from stanfordkarel import *


def main():
    """"""
    Karel should fill the whole world with beepers.
    You should write your code to make Karel do its task in this function.
    Make sure to delete the 'pass' line before starting to rewrite your own code.
    You should also delete this comment and replace it with a better, more descriptive one.
    """"""
    while not left_is_blocked():
        put_beeper_line()
        reset_position()
    put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",73,"from stanfordkarel import *


def main():
    """"""
    Karel should fill the whole world with beepers.
    You should write your code to make karel do its task in this function.
    Make sure to delete the 'pass' line before starting to rewrite your own code.
    You should also delete this comment and replace it with a better, more descriptive one.
    """"""
    while not left_is_blocked():
        put_beeper_line()
        reset_position()
    put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",74,"from stanfordkarel import *

# Karel should fill the whole world with beepers.


def main():
    """"""
    You should write your code to make Karel do its task in this function.
    Make sure to delete the 'pass' line before starting to write your own
    code. You should also delete this comment and replace it with a
    better, more descriptive one.
    """"""
    while not left_is_blocked():
        put_beeper_line()
        reset_position()
    put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",36
"#karel needs to move to the bottom of the next arch to commence 
#building the next column.
#precondition: karel is facing east
#post condition: karel is still facing east at the next column site.
        
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()""
                
def turn_around():
    turn_left()
    turn_left()
        
if __name__ == '__main__':
    main()",0.2,"#Karel needs to move to the bottom of the next arch to comm
#ence building the next column.
# Precondition: Karel is facing east
#post_condition : Karel is facing east at the next column site.
def move_to_ next_arch_botton ():
if front is clear ():
for i in range (4):
move ()
def turn around () =
turn_left()
turn_left (D
if name
Main ()
main",119,"# Karel needs to move to the bottom of the next arch to commence
# building the next column.
# Precondition: Karel is facing east
# post_condition : Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",54,"# Karel needs to move to the bottom of the next arch to commence
# building the next column.
# Precondition: Karel is facing east
# post_condition : Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",54,"# Karel needs to move to the bottom of the next arch to commence
# building the next column.
# Precondition: Karel is facing east
# Post_condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",54,"#karel needs to more to the bottom of the next arch to comm
#ence building the next column.
#
Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move to next arch botto ():
if front is clear ():
for i in range (4)
move ()
def turn around ():
turn left()
turn_left(3)
if name 1 i main , :
main ()",117,"# Karel needs to move to the bottom of the next arch to commence
# building the next column.
#
# Precondition: Karel is facing east
# Post-condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",56,"# Karel needs to move to the bottom of the next arch to commence
# building the next column.
#
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",55,"# Karel needs to move to the bottom of the next arch to commence
# building the next column.
#
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.


def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",54,"#karel needs to move to the bottom of the next noch to com
Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_botton ();
if front is clear ():
for i in range (4) :
move ()
def turn around ():
turn_left ( )
turn left ()
if __ name.
main
main ()",120,"# Karel needs to move to the bottom of the next notch to come
# Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",61,"# Karel needs to move to the bottom of the next notch to come
# Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",61,"# Karel needs to move to the bottom of the next arch to come
# Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",58,"Hikarel needs to move to the bottom of the next arech to comm. Hence building the next column.
\# Precondition: karel is facing east
\#post-condition: kavel is facing east at the next column site. def move_to_next_arch_botton():
if frontis-clear () :
for \( i \) in range (4):
move ()
def turnarounl () :",159,"
# Karel needs to move to the bottom of the next arch to comm.
# Hence building the next column.
# Precondition: karel is facing east
# post-condition: karel is facing east at the next column site.
def move_to_next_arch_bottom():
	if front_is_clear():
		for i in range(4):
			move()
def turnaround():
",150,"
# Karel needs to move to the bottom of the next arch to comm.
# Hence building the next column.
# Precondition: karel is facing east
# post-condition: karel is facing east at the next column site.
def move_to_next_arch_bottom():
	if front_is_clear():
		for i in range(4):
			move()
def turnaround():
",150,"# Karel needs to move to the bottom of the next arch to comm.
# Hence building the next column.
# Precondition: karel is facing east
# post-condition: karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turnaround():
    pass
",118
"def find_lrgst_smallst(number):
    if not numbers:
        return none
    smallest = largest = number[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example Usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_lrgst_smallst(numbers)
print(result)
",0.2,"HEART
def- find Ligst_smallet (number);
if not numbers:
return none
-Smallest= largest = number [0]
for num in numbers:
if num < smallest:
= num
пит
smallest
if nam > Largest :
Largest.
fieturin smallest, Largest
= num
#Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
Tresult
find_ligst __ smallst (numbens)
print (result)
উদ্ভাস-উন্মেষ শিক্ষা পরিবার",143,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find-Ligst_smallst - (number):
if not numbers:
return none
-Smallest. = largest = number [0]
for num in numbers:
if num < smallest:
smallest = num
if nam > largest:
Largest = num
return smallest, Largest
Example usage:
numbers = [1, 2, 3, 4,5,6,7,8,9]
result = find_ligst_smalist (numbers)
print (result)",91,"
def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest

Example usage:
numbers = [1, 2, 3, 4,5,6,7,8,9]
result = find_largest_smallest(numbers)
print(result)
",19,"
def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest

Example usage:
numbers = [1, 2, 3, 4,5,6,7,8,9]
result = find_largest_smallest(numbers)
print(result)
",19,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find_Ligst_smallst (number):
00
if not numbers:
Return none
Smallest=largest = number [0]
-
for num in numbers:
lif
num < smallest:
smallest = num
if
nam > Largest :
Largest = num
tieturin smallest, Largest
# Example usage:
numbers = [1,2,3, 4,5,6,7,8,9]
Hresult = find_ligst_smallst(numbers)
print (result)
उदास-उदास मिका शंतिबाज़",117,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find_rigst_smallst (number):
if not numbers:
return none
- Smallest = largest = number [0]
for num in numbers:
if num < smallest:
\[
\text { smallest }=\text { num }
\]
if nam > Largest:
\[
\text { Largest }=\text { num }
\]
fietutin smallest, Largest
* Example usage.
\[
\begin{array}{l}
\text { rumbers }=[1,2,3,4,5,6,7,8,9] \\
\text { result }=\text { find_lrgst_smallst (numbers) }
\end{array}
\]
print (result)",170,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage.
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",11,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage.
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",11,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage.
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",11
"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The Sum of the Digits is: "", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0

    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",0.2,"def main():
user number
input (""Enter the number: "")
result = Sum_of_digits (user_number)
print (""The Sum of the digits is"", result)
def Sum_of_digits (user_ number):
W 18
number_str = Str (user_number)
digit_sum = 0
for digit in number str:
#zero
return digit sum
if_name_
main()
digit_sum += int(digit)
_main_"":",112,"def main():
    user_number = input(""Enter the number: "")
    result = Sum_of_digits(user_number)
    print(""The Sum of the digits is"", result)


def Sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",6,"def main():
    user_number = input(""Enter the number: "")
    result = Sum_of_digits(user_number)
    print(""The Sum of the digits is"", result)


def Sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",6,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The Sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",4,"def main():
user_number = input (""Enter the number: "")
result = Sum_of-digits (user_number)
print (""The Sum of the digits is"", result)
def Sum- of_digits (user_ number):
1#
number_str = Str (user- number)
digit_sum = 0 # zero
for digit in number-str:
digit_sum + int(digit)
return digit_sum
if name_ == ""__main_"":
main()",71,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",5,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The Sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",4,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The Sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",4,"def main():
user_number = input (""Enter the number:
"")
result = sum_of_digits (user_number )
print (""The sum of the digits is "", result)
def Sum_of_digits (user_number):
number_str = Str (user_number)
digit_sum=0 # zero
for digit in number-str:
digit_sum + = int (digit)
return digit sum
if _name _== ""_main_"":
main()",71,"def main():
    user_number = input(""Enter the number:\n"")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is "", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",6,"def main():
    user_number = input(""Enter the number:\n"")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is "", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",6,"def main():
    user_number = input(""Enter the number:\n"")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is "", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",6,"def main():
user_number = input (""Enter the number: "")
result = sum_of digits (user_number)
print (""The sum of the digits is"", result)
def sum_of_digits (user_number):
number_st \( r=\operatorname{str} \) (user_number)
digit_sum \( =\varnothing \quad \# \) zero
for digit in numberstr:
\[
\text { digit_sum } t=\operatorname{int} \text { (digit) }
\]
veturn digit_sum
if name_ \( =="" \) main_ \( "" \) :
main()",147,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",5,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",5,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",5
"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0.2,"def is-prime (n):
DON
if
Returns True if n is prime, False otherwise.
|(α ||
if n <
n < = 1:
return False
for i in range (2, int(n** 0.5) +1);
if n % i = = 0;
def main():
return True
[((11
The main function.
Int
return False
14
n = int ( input (""Enter a number: "")
if is-prime (n):
print (n
else:
""is a
main()
print (n. ""is not a prime number."")
name__ ==
prime number."")
11
main.
--
})",207,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"dof is -prime (n):
110V
Returns True if n is prime, False otherwise.
11011
if n <= 1:
return False
for i in range (2 , int(n**0.5 ) +1): :
if n % i == 0 :
return False
return True
def main():
The main function.
n= int (input ( ""Enter a number: "")
if is-prime (n):
print ( n , ""is a prime number."")
else :
print( n, ""is not a prime number. "")
if
name
11
main
"",
""
;
main()",152,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"def is-prime (n):
1104
Returns True if n is prime, False otherwise
11011
if n <= 1:
return False
for i in range (2, int(n*0.5)+1):
if n % i == 0.
return False
return True
def main () :
11 /11
The main function.
/11.11
n = int ( input (""Enter a number: "")
if is- prime (n):
print (n, "" is a prime number."")
else :
print( n, ""is not a prime number. "")
it
- - name __ == __ main -- :
main ( )",147,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n * 0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",3,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n * 0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",3,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n * 0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",3,"def is-prime \( (n) \) :
Returns True if \( n \) is prime, False otherwise.
IIU11
if \( n<=1 \) :
return False
for \( i \) in range \( \left(2, \operatorname{int}\left(n^{* *} 0.5\right)+1\right) \) :
if \( n \% i==0 \) :
retum False
return True
def \( \operatorname{main}() \) :
IIIII
The main function.
1....
\( n=\operatorname{int} \) (input (""Enter a number: "")
if is-prime \( (n) \) :
print \( (n \), ""is a prime number."")
else:
print ( \( n \), ""is not a prime number."")
if \( \ldots \) name _. \( =="" \) main .. ""
\( \operatorname{main}() \)",279,"def is_prime(n):
    # Returns True if n is prime, False otherwise.
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    # The main function.
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",30,"def is_prime(n):
    # Returns True if n is prime, False otherwise.
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    # The main function.
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",30,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0
"# Reverse String
def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


if __name__ == ""__main__"":
    main()
",0.2,"#Reverse String
def mam ():
str = input (""Input a string: "")
ro_str=
for i m str:
||||
if_name
r_str=i+r_stra
primt (r_stro)
mam ()
_maim_"":",78,"# Reverse String
def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


main()
",31,"# Reverse String
def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


main()
if __name__ == ""__main__"":
    main()
",7,"# Reverse String
def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


if __name__ == ""__main__"":
    main()
",0,"# Reverse
string
def main ():
str = input ( ""Input a string: "")
ro-str=
for i instr:
r_str=itn_str
print (n_str)
if_ name - "" - __main_
main ()",63,"# Reverse string
def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


if __name__ == ""__main__"":
    main()
",1,"# Reverse string
def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


if __name__ == ""__main__"":
    main()
",1,"# Reverse string
def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


if __name__ == ""__main__"":
    main()
",1,"#Reverse String
def man ():
str = input (""Input a string: "")
ro _str= """"
for i'm str:
r_ str = i+ n_ str
print (no_stro)
if_name _= = ""_main_"":
main ()",55,"# Reverse String
def main():
    str = input(""Input a string: "")
    rev_str = """"
    for i in str:
        rev_str = i + rev_str
    print(rev_str)


if __name__ == ""__main__"":
    main()
",8,"# Reverse String
def main():
    str = input(""Input a string: "")
    rev_str = """"
    for i in str:
        rev_str = i + rev_str
    print(rev_str)


if __name__ == ""__main__"":
    main()
",8,"# Reverse String
def main():
    str = input(""Input a string: "")
    rev_str = """"
    for i in str:
        rev_str = i + rev_str
    print(rev_str)


if __name__ == ""__main__"":
    main()
",8,"\# Reverse string
def \( \operatorname{mam}() \) :
stro = input (""Input a string: "")
rostro \( ="" 11 \)
for i instr:
\[
r_{-} s t r=i+r_{-} s t r
\]
print (r_stro)
\[
\begin{array}{l}
\text { if_name- }=="" \text {-main_: } \\
\operatorname{mam} \text { () }
\end{array}
\]",157,"# Reverse string
def mam():
    stro = input(""Input a string: "")
    r_stro = """"
    for i in stro:
        r_stro = i + r_stro
    print(r_stro)


if __name__ == ""__main__"":
    mam()
",11,"# Reverse string
def mam():
    stro = input(""Input a string: "")
    r_stro = """"
    for i in stro:
        r_stro = i + r_stro
    print(r_stro)


if __name__ == ""__main__"":
    mam()
",11,"# Reverse string
def mam():
    str_ = input(""Input a string: "")
    r_str = """"
    for i in str_:
        r_str = i + r_str
    print(r_str)


if __name__ == ""__main__"":
    mam()
",7
"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    list = sentence.split()
    l_word = """"
    for word in list:

        if len(word) > len(l_word):
            l_word = word
    print(l_word)


if __name__ == ""__main__"":
    main()
",0.2,"# Write a Python program to find the longest word in a given text
def maint):
sentence = imput (""Input a sentence: "")
list = sentence.split()
Lword =
for world im List:
if len (word) >len (1-word):
1_ word = word
primt (1- word)
if_name_ == ""_mam_"":
main ()",78,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    lst = sentence.split()
    l_word = """"
    for word in lst:
        if len(word) > len(l_word):
            l_word = word
    print(l_word)


if __name__ == ""__main__"":
    main()
",3,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    lst = sentence.split()
    l_word = """"
    for word in lst:
        if len(word) > len(l_word):
            l_word = word
    print(l_word)


if __name__ == ""__main__"":
    main()
",3,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    words_list = sentence.split()
    longest_word = """"
    for word in words_list:
        if len(word) > len(longest_word):
            longest_word = word
    print(longest_word)


if __name__ == ""__main__"":
    main()
",37,"# Write a Python program to find the longest word in a given text
def main() :
sentence = input (""Input a sentence: "")
list = sentence.split1)
Iword = if 11
for word in List:
if len (word) ) len (1 word):
1_ word = word
print(1- word)
if_name- == ""_main-"":
main ()",73,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    List = sentence.split()
    l_word = """"
    for word in List:
        if len(word) > len(l_word):
            l_word = word
    print(l_word)


if __name__ == ""__main__"":
    main()
",3,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    list = sentence.split()
    l_word = """"
    for word in list:
        if len(word) > len(l_word):
            l_word = word
    print(l_word)


if __name__ == ""__main__"":
    main()
",1,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    words = sentence.split()
    longest_word = """"
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    print(longest_word)


if __name__ == ""__main__"":
    main()
",35,"# Write a Python program to find the longest word i'm a given text
def main ():
sentence = input (""Input a sentence: "")
list = sentence. split ( )
Lword = """"1
for word in List:
if len (word) > 1en (1-word):
1-word = word
print (1-word)
if_name = ""_main_"" :
main ()",77,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    list = sentence.split()
    Lword = """"
    for word in list:
        if len(word) > len(Lword):
            Lword = word
    print(Lword)


if __name__ == ""__main__"":
    main()
",9,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    List = sentence.split()
    Lword = """"
    for word in List:
        if len(word) > len(Lword):
            Lword = word
    print(Lword)


if __name__ == ""__main__"":
    main()
",11,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    words_list = sentence.split()
    longest_word = """"
    for word in words_list:
        if len(word) > len(longest_word):
            longest_word = word
    print(longest_word)


if __name__ == ""__main__"":
    main()
",37,"\# Write a Python program to find the longest word a \( m \) a given text def main \( ( \) ):
sentence = imput (""Input a sentence: "")
list = sentence.split ()
lword = "" ""
for word im list:
if len (word) >len (1-word):
\[
\text { 1_word }=\text { word }
\]
primt (1-word)
if name_ \( == \) ""-main_"".
\( \operatorname{main}() \)",116,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    list = sentence.split()
    lword = "" ""
    for word in list:
        if len(word) > len(lword):
            lword = word
    print(lword)


if __name__ == ""__main__"":
    main()
",6,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    list = sentence.split()
    lword = "" ""
    for word in list:
        if len(word) > len(lword):
            lword = word
    print(lword)


if __name__ == ""__main__"":
    main()
",6,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    word_list = sentence.split()
    lword = """"
    for word in word_list:
        if len(word) > len(lword):
            lword = word
    print(lword)


if __name__ == ""__main__"":
    main()
",15
"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0.2,"def greatest common_divisor(a,b):
smaller_number=a if azb else b
common_divisor= []
for i in range (1, smaller_number +1):
if a %i == 0 and b% i ==0:
common_divisor.append()
return common_divisor [-1]",52,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def
greatest_common_divisorca,b):
smaller_number. = a if a4b else 10
common-divisor= []
for i in range (1, smaller_number +1) :
if a %i ==0 and b%i==0:
common_divisor . append(i)
return common_divisor [-1]",60,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor (a,b) :
smaller_ number = a if a <b else 10
common_divisor = []
for i in range (1, smaller_number +1):
if 9 % i == 0 and 6% i == 0:
common_divisor. append (i)
return common_divisor [-1]",52,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor \( (a, b) \) :
smaller_number \( =a \) if \( a<b \) else \( b \) common_divisor \( =[] \)
for \( i \) in range \( (1 \), smaller number +1\( ) \) : if \( a \% i==0 \) and \( b \% i==0 \) : common_divisor. a ppend (i) return common_divisor \( [-1] \)",94,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0
"def main():
    """"""
    The program should determine whether the given year is a leap year
    (divisible by 4, divisible by 100 but also by 400).
    """"""

    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below(in number form)."")
    Year = int(input(""Year : ""))
    print("" "")

    if (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" "" + ""is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" "" + ""is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("" "")
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")

        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()

        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break

        elif ask != ""Yes"" or ask != ""yes"" or ask != ""No"" or ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",0.2,"def main ():
The
should determine whether the given year is a leap year
(divisible by 4, divisible by loo but also by 400).
program
print (""This program will help you identify if a given year is a leap
or not."")
year
if
print ("" "")
()
identify_a_leap_year
ask_for_a_new_year_to_ identify ()
def identify_a_leap-year ():
print (""Please input
Year = int (imput ("" Year: ""))
print("" "")
else :
it (Year % 4 = = 0) or (Year %/ 100 ==0) or (Year % 400 ==0);
+ str (Year) +
+ "" is a leap year."")
V
print (""The Year
""+"" is not a leap year."")
print (""the Year
def ask_for_a_new_year_to_
white True:
-_name__
main ()
a year below (ill humber
if ask = =
+ str (Year).
-+
identify ():
print (')
ask - input (""Do you want to identify
print ("" "")
""__main__
form). "")
""Yes"" or ask
ask = = ""yes"" :
identify_a_ leap year ()
""
elif ask = = ""No"" or ask == ""no
a new year? Yes/No: "")
print (""Thank you. See you again!"")
break
elif ask != ""Yes
or ask != ""yes"" of ark! = ""No"" or ask != ""no"":
print (""Wrong keyword. Please type the exact keyword."")",486,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    if (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        ask = input(""Do you want to identify a new year? Yes/No: "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" or ask != ""yes"" or ask != ""No"" or ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",102,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    if (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        ask = input(""Do you want to identify a new year? Yes/No: "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" or ask != ""yes"" or ask != ""No"" or ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",102,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("" "")
    if (Year % 4 == 0 and Year % 100 != 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("" "")
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" or ask != ""yes"" or ask != ""No"" or ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",40,"def main ():
The program should determine whether the given year is a leap year
(divisible by 4, divisible by 100 but also by 400).
print (""This program will help you identify if a given year is a leap
year or not."")
print ( a)
identify- a - leap_ year ()
ask_for_a- new- year- to identify()
def identify- a - leap - year () :
print ("" Please input a year below (in number form)."")
Year = int (input (""Year: ""))
print ( .)
if (Year %4==0) or (Year % 100 = = 0) or (Year % 400 = = 0) :
print (""The Year ""+ str (Year) + v t is a leap year."")
else
print (""the Year str(Year) + "" + "" is not a leap year."")
def ask_for a-new. year to- identify ():
white True:
prilit ( 1)
ask = input (""Do you want to identify a new year? Yes/No: "")
print ( "" "")
if ask == ""Yes"" or ask == ""yes"":
identify_a_leap-yaar
elif ask = = ""No"" or ask == ""no"" :
print (""Thank you. See you again!')
break
elif ask != ""Yes or ask != ""yes"" a task!=""No"" or ask != ""no"":
print (""Wrong keyword. Please type the exact keyword. )
if name == ""__ main "":
main ()",296,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    if (Year % 4 == 0) and (Year % 100 != 0 or Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" and ask != ""yes"" and ask != ""No"" and ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",98,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    if (Year % 4 == 0) and ((Year % 100 != 0) or (Year % 400 == 0)):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" and ask != ""yes"" and ask != ""No"" and ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",98,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    if (Year % 4 == 0 and Year % 100 != 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        else:
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",148,"def main () :
The program should determine whether the given year is a leap year
( divisible by 4, divisible by 100 but also by 400).
print ( "" This program will help you identify if a given year is a leap
year or not . "")
print ("" "")
identify_a_leap year ( )
ask _ for _ a _ new _year _ to _identify ( )
def identify _ a _ leap year ( ) :
print ( "" Please input a year below ( in number form ) . "")
Year = int (input (""Year:
print ("" "")
if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;
print (""The Year + str(Year) + "" ""+ ""is a leap year."")
else :
print ( "" The Year "" + str ( Year ) + "" "" + "" is not a leap year . "" )
def ask-for-a-new year_ to _ identify ( ) :
white True :
print ("" "")
ask - input ( "" Do you want to identify a new year ? Yes / No : "" )
print ("" "")
if ask == ""Yes "" or ask == ""yes"":
identify_ a_ leap -year ( )
elif ask == ""NO"" or ask = ""no"":
print ( "" Thank you . See you again ! "" )
break
elif ask != ""Yes or ask != ""yes"" a ask! = ""No"" or ask != ""no"".
print ( "" Wrong keyword . Please type the exact keyword . "")
if
__ name_ == "" __ main __ "":
main ()",312,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("" "")
    if (Year % 4 == 0) and (Year % 100 != 0 or Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("" "")
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" and ask != ""yes"" and ask != ""No"" and ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",49,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("" "")
    if (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("" "")
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" and ask != ""yes"" and ask != ""No"" and ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",43,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    print("""")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("""")
    if (Year % 4 == 0 and Year % 100 != 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("""")
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("""")
        if ask.lower() == ""yes"":
            identify_a_leap_year()
        elif ask.lower() == ""no"":
            print(""Thank you. See you again!"")
            break
        else:
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",130,"def \( \operatorname{main}() \) :
""The program should determine whether the given year is a leap year (divisible by 4, divisible by 100 but also by 400).
"" r""
print (""This program will help you identify if a given year is a leap year or not."")
privit ("" "")
identify - a - leap_year ()
ask_for_a new_year_to_identify ()
def identify - a l eap - year () :
print (""Please input a year below (in number form)."")
Year = int (input (""Year: ""))
print ("" "")
if \( ( \) Year \( \% 4=0) \) ) or \( ( \) Year \( \% 100=0) \) ) or \( ( \) Year \( \% 400=0) \) :
print (""The Year "" \( +\operatorname{str}( \) Year) + "" "" ""is a leap year."")
else:
\[
\text { print (""The Year ""+str (Year) }+ \text { "" "" "" is not a leap year."") }
\]
def ask_-fir_a_new - year_to_identify ():
white True:
print (' 1 )
ask = input (""Do you want to identify a new year? Yes/No:"") print ("" "")
if ask = = ""Yes "" or ask = = ""yes"":
identify - a - leap- year ()
elif ask \( == \) ""No"" or ask \( == \) ""no"" :
print (""Thank you. See you again!"")
break
elif ask ! = ""Yes or ask ! = ""yes"" a ask! = ""No"" or ask ! = ""no"":
print (""Wrong keyword. Please type the exact keyword."")
if .. name \( \ldots=="" \) main \( _{2}{ }^{\prime} \) :
main ()",401,"
def main():
    ""The program should determine whether the given year is a leap year
    (divisible by 4, divisible by 100 but also by 400).
    ""
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()

def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("" "")
    if (Year % 4 == 0) and ((Year % 100 != 0) or (Year % 400 == 0)):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")

def ask_for_a_new_year_to_identify():
    while True:
        print(' ')
        ask = input(""Do you want to identify a new year? Yes/No:"")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" and ask != ""yes"" and ask != ""No"" and ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")

if __name__ == ""__main__"":
    main()
",48,"def main():
    """"""
    The program should determine whether the given year is a leap year
    (divisible by 4, divisible by 100 but also by 400).
    """"""
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("" "")
    if (Year % 4 == 0) and (Year % 100 != 0 or Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("" "")
        ask = input(""Do you want to identify a new year? Yes/No:"")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        else:
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",83,"def main():
    """"""
    The program should determine whether the given year is a leap year
    (divisible by 4, divisible by 100 but also by 400).
    """"""
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("" "")
    if (Year % 4 == 0 and Year % 100 != 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("" "")
        ask = input(""Do you want to identify a new year? Yes/No:"")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        else:
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",83
"sum = 0
number = input()
for i in number:
    sum += int(i)
Print(sum)
",0.2,"Sun =
S
number
imput ()
for i in number:
Sun + =
int(i)
Print (surm)
N",20,"Sum = 0
number = input()
for i in number:
    Sum += int(i)
print(Sum)
",4,"sum = 0
number = input()
for i in number:
    sum += int(i)
print(sum)
",1,"sum = 0
number = input()
for i in number:
    sum += int(i)
print(sum)
",1,"sun 2 = $
number N Emput ()
for i in number:
sun + 11 int(i)
print (sum )",20,"sum = 0
number = input()
for i in number:
    sum += int(i)
print(sum)
",1,"sum = 0
number = input()
for i in number:
    sum += int(i)
print(sum)
",1,"sum_2 = 0
number = input()
for i in number:
    sum_2 += int(i)
print(sum_2)
",7,"Sun = D
number = input ()
for i in number :
Sun + = int (i)
Print (Sum)",16,"Sum = 0
number = input()
for i in number:
    Sum += int(i)
print(Sum)
",4,"Sum = 0
number = input()
for i in number:
    Sum += int(i)
print(Sum)
",4,"Sum = 0
number = input()
for i in number:
    Sum += int(i)
print(Sum)
",4,"\[
\operatorname{sun}=\varnothing
\]
number = imput ()
for: in number:
\[
\text { sun }+=\operatorname{int}(i)
\]
print (sum)",69,"sum = 0
number = input()
for i in number:
    sum += int(i)
print(sum)
",1,"sum = 0
number = input()
for i in number:
    sum += int(i)
print(sum)
",1,"sum = 0
number = input()
for i in number:
    sum += int(i)
print(sum)
",1
"def factorial(n):
    if n <= 1:
        return 1
    else:
        return factorial(n - 1) * n


print(factorial(int(input())))
",0.2,"def factoria 1 (n):
if n <= 1 :
Return 1
else:
Return factorial (n-1) *
Prist (fractional (int (amput())))
h",49,"def factorial(n):
    if n <= 1:
        return 1
    else:
        return n * factorial(n - 1)
",37,"def factorial(n):
    if n <= 1:
        return 1
    else:
        return n * factorial(n - 1)
",37,"def factorial(n):
    if n <= 1:
        return 1
    else:
        return n * factorial(n - 1)
",37,"def factoric / (n):
if h L=1 :
Return 1
else :
Return factorial (n-1) A h
Print (factorial (int (input() ))) )",49,"def factorial(n):
    if n == 1:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(int(input())))
",9,"def factorial(n):
    if n == 1:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(int(input())))
",9,"def factorial(n):
    if n == 1:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(int(input())))
",9,"def factorial (n):
if n <= 1 ;
Return 1
else :
Return factorial (n-1) * h
Print (factorial (int (input ()))",42,"def factorial(n):
    if n <= 1:
        return 1
    else:
        return factorial(n - 1) * n


print(factorial(int(input())))
",0,"def factorial(n):
    if n <= 1:
        return 1
    else:
        return factorial(n - 1) * n


print(factorial(int(input())))
",0,"def factorial(n):
    if n <= 1:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(int(input())))
",8,"def factorial (n):
if \( n<1 \) :
Retunn 1
else:
Return factorial \( (n-1) * n \)
Print \( ( \) factarial \( (\operatorname{int}(\operatorname{imput}()))) \)",89,"def factorial(n):
    if n < 1:
        return 1
    else:
        return factorial((n - 1) * n)


print(factorial(int(input())))
",3,"def factorial(n):
    if n < 1:
        return 1
    else:
        return factorial(n - 1) * n


print(factorial(int(input())))
",1,"def factorial(n):
    if n < 1:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(int(input())))
",9
"year = int(input)

if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",0.2,"Year = int (impot
if yeur 1/4 = = $ and year 1/144 != 0 on Year 1.400 ==&=
Print (true)
else:
print (False)",35,"Year = int(input())
if Year % 4 == 0 and Year % 100 != 0 or Year % 400 == 0:
    print(True)
else:
    print(False)
",6,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"year 2 int (input)
if I and year 1,144 1=0 on Year% 400==0:
Print (TRUE)
else :
print (False)",43,"year = int(input())
if year % 144 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",22,"year = int(input())
if year % 144 == 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",23,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"Year = ent (input)
if year / n == 4 and year 0/ 100 /=/ or year / 400 == 0 ;
Print (true)
else :
Print (False )",30,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"\[
\text { year }=\operatorname{int}(\text { impot })
\]
if Yearn \( \% \mu==\phi \) and year \( \% 1 \phi \phi !=\varnothing \) on Year \( \% 400==\phi \) :
Pine (true)
else:
print (False)",108,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2
"Word = input()

Word = "" "".join([i for i in word[::-1]])

Print(Word)
",0.2,"Word = imput()
word = """", join (I i for i in word [::
Print (word)",19,"Word = input()
word = """".join(i for i in Word[::-1])
print(word)
",9,"word = input()
word = """".join(i for i in word)
print(word)
",15,"word = input()
word = """".join(i for i in word)
print(word)
",15,"word = imput()
ward = "" "" "" "" join (I i from i in word[-:-]]]
Print (word)",22,"word = input()
word = "" "".join([i for i in word[::-1]])
print(word)
",6,"word = input()
word = "" "".join([i for i in word[::-1]])
print(word)
",6,"word = input()
word = "" "".join([i for i in word[::-1]])
print(word)
",6,"Word = input ()
Word = """". join ([ "" for i in word [-]
Print (Word)",16,"word = input()
word = """".join([i for i in word[::-1]])
print(word)
",7,"word = input()
word = """".join([i for i in word])
print(word)
",13,"word = input()
word = """".join([i for i in word[::-1]])
print(word)
",7,"\( \begin{array}{l}\text { Wond }=\operatorname{imput}() \\ \text { wand }="" \text { ""join }([i \text { for } i \text { in word }[\because-1]]) \\ \text { Print (wond) } \\\end{array} \)",134,"word = input()
wand = """".join([i for i in word][::-1])
print(wand)
",13,"word = input()
wand = """".join([i for i in word[:-1]])
print(wand)
",12,"word = input()
wand = """".join([i for i in word[:-1]])
print(wand)
",12
"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]

list3 = [i for i in list1 if i in list2]

print(list3)
",0.2,"list 1 = [1, 2, 3, 4]
bist 2 = [3, 4, 5, 6]
in lista]
bist 3 = [i for i in list 1 if i in
Print (list 3)",27,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list 1 = $ (1,2,3,4)
list2=[3,4,5,6]
=
list 3= [i for i in list 1 if i in listz]
print(list3)",20,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]

list3 = [i for i in list1 if i in list2]
print(list3)
",1,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]

list3 = [i for i in list1 if i in list2]
print(list3)
",1,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]

list3 = [i for i in list1 if i in list2]
print(list3)
",1,"list 1 = [ 1, 2, 3, 4]
bist 2 = [ 3,4,5,6]
list 3 = Ji par i in list 1 if i in listz]
Print (list 3)",20,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"\( \begin{array}{l}\text { list } 1=[1,2,3,4] \\ \text { bist } 2=[3,4,5,6] \\ \text { fist } 3=[i \text { for } i \text { in list } 1 \text { if } i \text { in list }] \\ \operatorname{Pint}(\operatorname{list} 3)\end{array} \)",160,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2
"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]

even = [i for i in list1 if i % 2 == 0]

print(even)
",0.2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [ è for i in lists if */2==4]
Print (even)",15,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = (123456789)
even = [i for i in list1 if i%2==0]
Print (even)",27,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list 1 = [1, 2, 3, 4, 5, 6, 7, 8,9]
even = [è for i in list 1 if i|2=]
Print (even)",16,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"\( \begin{array}{l}\text { list } 1=[1,2,3,4,5,6,7,8,9] \\ \text { even }=[i \text { for } i \text { in list } 1 \text { if } i \% 2==] \\ \text { Print (even) }\end{array} \)",116,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list_1 if i % 2 == 0]
print(even)
",4
"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0.2,"def main ():
year
= int (input())
if (year % 4 == 0 and year % 100 != 0):
print (""True"")
elif (year % 100 == 0 and year % 400 ==0):
print (""True"")
if
else:
print (""False"")
name__
main ()
!!
>>
_main__'",78,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main ():
year = int (input())
if (year% 4==0 and year % 100 != 0):
print (""True"")
elif (year % 100 ==0 and year % 400 == 0):
print (""True"")
else:
print (""False"")
if -- name "" -- __main__"":
main()",68,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main ():
year = int (input ()
if ( year % 4 == 0 and year % 100 ! = 0):
print (""True"")
elif (year % 100 == 0 and year % 400=0):
print (""True"")
else:
print (""False"")
if
__ name __== "" __ main_"".
main ()",71,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",51,"def main ():
\[
\text { year }=\operatorname{int}(\operatorname{input}())
\]
if (year \% \( 4==0 \) and year \( \% 100 !=0 \) ):
print (""True"")
elif (year \( \% 100==0 \) and year \( \% 400==0 \) ):
print (""True"")
else:
print (""False"")
if __name__ = = ""_main_."":
\( \operatorname{main}() \)",133,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if (year % 4 == 0) and (year % 100 != 0):
        print(""True"")
    elif (year % 100 == 0) and (year % 400 == 0):
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",8,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0
"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0.2,"from
def
def
karel. stanford kavel import
main ():
build_column ()
step- up ()
build column()
step-up ()
build- column ()
def
step-up()
build- column()
build
column ():
turn-left()
build- beeper ()
build- beeper ()
build_ beeper ()
build-beeper ()
put - beeper ()
go - back()
turn - left ()
det build - beeper ():
put- beeper ()
move ()
go-back ():
turn around ()
step-up ()
def turn around ():
turn - left()
turn
left()
def step-up():
move ()
move ()
move ()
move ()
if - name
main ()
==
main
*",225,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def step_up():
    move()
    move()
    move()
    move()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",102,"from karel.stanford.karel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def step_up():
    move()
    move()
    move()
    move()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",103,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def step_up():
    move()
    move()
    move()
    move()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",102,"from karel. . stanford kavel import
def main () :
build - column ( )
step - up ()
build - column()
step - up()
build. column ()
step - up()
build - column (
def
build - column ()
turn - left ()
build- beeper ( )
build beeper ()
build - beeper ()
build. - beeper ()
put - beeper ()
go - back ()
turn - left ()
def
build - beeper ():
put - - beeper ( )
move ()
det
go - - back() :
turn around ()
-
step - up ()
def turn - around ()
turn - left ()
turn - left ()
def step - up' () :
move ()
move ()
move ()
move ()
if 1 name
1 main :
main ()",252,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()


def step_up():
    move()
    move()
    move()
    move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",81,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()


def step_up():
    move()
    move()
    move()
    move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",81,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0,"from karel. stanford kavel import *
def main ():
build-column ( )
step -up ( )
build- column ()
Step -up ()
build- column ( )
Step -up ()
build - column ()
def
build - column ( ) :
turn - left ( )
build - beeper ()
build - beeper ( )
build - beeper ( )
build - beeper ( )
put - beeper ( )
go - back ()
turn- left ( )
def
build - beeper ( ) :
put - beeper ()
move ()
det
go - back ():
turn- around ( )
step -up ()
dex
turn- around () :
turn - left ()
turn - left ()
dex
step-up ():
move ()
move ( )
move ( )
move ( )
-
if - name _ == - main _:
main ( )",251,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0,"from karel. Stanfordkavel import * def main ():
build_column ()
step - up ()
build - column ()
Step - up ()
build_column ()
Step - up ()
build - column()
def build - column ():
turn - left ()
build - beeper ()
build - beeper ()
build - beeper ()
buitd - beeper ()
put - beeper ()
go - back ()
turn - left ()
det build-beeper ():
put - beeper ()
move ()
det go-back ():
turn - around ()
step - up ()
dex turn - around () :
turn - left ()
turn - left()
def step-up ():
move ()
move ()
move ()
move ()
if _ name _ \( == \) 'main _ :
main ()",233,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0,"from karel.Stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",1,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0
"def main():
    input_string = input('Input string: ')
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print ret

if __name__ == '__main__':
    main()",0.2,"def main ():
if
input_ string = input ('Input string; ')
11 11
ret =
for ch in input-string
ret
print ret
71
= ret + ch. uppert)
name__ =
main ()
main
20 07203",78,"def main():
    input_string = input(""Input string: "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",8,"def main():
    input_string = input(""Input string: "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",8,"def main():
    input_string = input(""Input string: "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",8,"def main () :
input - string = input(' Input string ')
ret = 11 11
for ch in input - stiting
ret = ret + ch. upperl )
print ret
1
1
if
name
main
-
-
main
()",66,"def main():
    input_string = input(""Input string "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9,"def main():
    input_string = input(""Input string "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9,"def main():
    input_string = input(""Input string "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9,"def main () ;
input_ string = input ( Input string:')
ret = "" ""
for ch in input string
ref = ret + ch.upper()
print ref
if __ name __ =
1
1
- -
main
--
main ( )",57,"def main():
    input_string = input(""Input string:"")
    ret = "" ""
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",10,"def main():
    input_string = input(""Input string:"")
    ret = "" ""
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",10,"def main():
    input_string = input(""Input string:"")
    ret = "" ""
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",10,"def main ():
\[
\begin{array}{l}
\text { input_string = input ('Input string! ') } \\
\text { ret }="" 11
\end{array}
\]
for ch in input.string
\[
\text { ret }=\text { ret }+ \text { ch. upperd) }
\]
print ret
if name \( \operatorname{main}( \) )",122,"def main():
    input_string = input(""Input string! "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9,"def main():
    input_string = input(""Input string! "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9,"def main():
    input_string = input(""Input string! "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9
"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",0.2,"O
O
O
from Kare!. Stamford Karel impert
def main ():
mere to beeper ()
pick beeper ()
turn-around ()
return to_start()
def muere to beepet():
while front_is_clear ():
Move
turn_right()
more()
turu-left()
More()
det turn around ():
turn left ()
turn left ()",106,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
        turn_right()
        move()
        turn_left()
        move()


def turn_around():
    turn_left()
    turn_left()
",18,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from Karel. stanfordKarel import
def main ():
move to beeper ()
pick_beeper()
turu_around()
Return to-start()
def more to beeper() :
while front-is-clear ():
move
turn_right()
more(
turn-left()
more()
det turu around ();
turn_ left ()
turu left ()",93,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from Karel. StanfordKarel import
def main ():
move_to_beeper ()
pick-beeper ()
turn-around()
return_to_start ()
def more_to_ beeper () :
While front-is-clear ();
move
turn_Right ()
move ()
turn-left ()
move ()
def turu_around ():
tura_left ()
turn left ()",92,"from Karel.StanfordKarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",5,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from Karel. stanfordKarel import
def main ():
move to beeper ()
pick-beeper ()
turu_around ()
ceturn to_start()
def more to beeper ():
while frout_is_clear (1):
move
turn_right ()
more ()
turu-left()
morre()
def turu_around ():
turu left ()
turu left ()",96,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2
"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",0.2,"from kanel.stanfordkarel import
def main ():
while front_is_ clear():
bill tower ()
def fill_tower ():
-
while front_is_ clear ():
put-beeper ()
move()
put_beeper()
column_return ()
def column_return ():
if
def turn around ():
while front_is_blocked ():
turn-around()
while front_is_ clear():
move ()
next-tower()
-
def next tower ():
if right_is_dean ():
turn_right()
move()
turn_right()
for i in range (2):
turn_left()
—
else:
turn around ()
while front_is_dear():
def turn_right():
-
move()
-
name
main ()
for i in range (3):
turn_left()
_main_':",323,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    if front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
        for i in range(2):
            turn_left()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",89,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    turn_around()
    while front_is_clear():
        move()
    next_tower()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
        for i in range(2):
            turn_left()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",183,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
        for i in range(2):
            turn_left()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",85,"from karel. stanfordkard import
def main ()
while front. is clear () :
fill_tower()
def fill tower () :
while front - is - clean ():
put - beeper ()
move ()
put_beeper()
column_return() -
def columm_return(): -
while front_is_blocked() :
turn-around()
while front_is_clear()
move()
next_tower()
def turn around()
for i in range (2) :
turn-left()
def next tower() :
if right is-clean - ( ) :
turn -right()
move ()
turn_right()
else :
turn around()
while front_is_dear():
move()
def turn - right ():
for i in range (3) :
turn_left(c)
if - name == I main I :
main ()",238,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
    while front_is_clear():
        move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",8,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from kanel stanfordkard import *
det main () :
while front_is_clear ():
bill_tower ( )
det fill-tower ():
while front-is-clean ():
put-beeper ()
move ()
put_beeper ()
column_return ()
def column_return ():
while front_ is_blocked ():
turn-around ()
while front_is_clear () :
move ( )
next_tower ()
det turn-around ():
for i in range (2) :
turn-left ( )
det next_tower ():
if right_is_clean ():
turn-right ( )
move()
turn-right ()
else :
turn-around ()
while front-is-clear ():
move( )
def turn-right ():
for i in range (3):
turn_left ()
if
- name _
== '_ main
1
..
main ()",243,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        build_tower()


def build_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",6,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        build_tower()


def build_tower():
    while front_is_clear():
        put_beeper()
        move()
        put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
    while front_is_clear():
        move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",18,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        build_tower()
        next_tower()


def build_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_around():
    for i in range(2):
        turn_left()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",172,"from karel.stanfordkarel import *
def main ():
while front_is_dear () :
fill_tower ()
def fill_tower ():
while front_is_dear ():
put-beeper ()
move ()
put_beeper ()
column_return ()
def colurn-return () :
while front_is_blocked ( ):
turn-around ()
while front_is_clear () :
move ()
next_tower ()
def turn_around () :
for \( i \) in range (2):
turn-left ()
def next_tower ( ) :
if right_is_dear ( ):
turn_right ()
move ()
turn_right ()
else:
turn_around( )
while front_is_dear ():
move ()
def turn_right () :
for \( i \) in range (3):
turn_left ()
if _ name \( ==1 \) _ main _ '
main ()",245,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",0
"def filter_string_a(string):
      string.sort()
      filtered_string_list = [ ]
      for str in string:
             if str.startswith(""a""):
                    filtered_string_list.append(str)
       return filtered_string_list
input_string = [""apple"", ""banana"", ""avacado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)",0.2,"der fitters string - a (string);
sont ()
string.
filtered_string_list = [3
toru
1
in
string:
stru. start with (""a"");
stru
filtreried_rodring-lirt: append
returen filtered_string-lit
(stru)
imput_string = [""apple"", ""bunana"", ""avacad""
""cheveny"", ""apriest""""]
output = filtern-string- a (imput_string)
print (output)",131,"def filter_string_a(string):
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",48,"def filter_string_a(string):
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",48,"def filter_string_a(string_list):
    filtered_string_list = []
    for stru in string_list:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",49,"def - a (string):
string. sort ()
filtered -string-list = -[I
for stru in string :
if stru startswith (""a""):
append (str))
return
input_ string z [ apple"" ""bunana"", ""avacado)
""chevry"", ""apricot""]
output fifter z string a (input-ntuing)
print (output)",151,"def a_string(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""chevy"", ""apricot""]
output = a_string(input_string)
print(output)
",48,"def a_string(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""chevry"", ""apricot""]
output = a_string(input_string)
print(output)
",47,"def filter_string_a(string_list):
    string_list.sort()
    filtered_string_list = []
    for stru in string_list:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",42,"det filter-string-a (string) :
string. sort ()
filtered- string-list = []
foru stre in strung :
if stru. startswith (""a""):
filtered-string-lint: append
( stru)
returen filtered-string- list
input_string = \""apple"", ""bunana"", ""avacado
""cheving "" ""apricot""]
Output = filter-string-a (input_string)
print (output)",104,"def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""chewing"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",34,"def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""chewing"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",34,"def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""chewing"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",34,"def filteru-string-a (ntring):
string. sont ()
filtered-string_list \( =[] \)
for stre in atring:
if stru. Ptark with (""an):
fiterced-atring-lint. append (stru)
return filtered-rtring-lirst
imput_rting \( z \) ""apple"", ""bunana"", ""avacado"" ""cherry"" ""apricot"" pring (output)",146,"def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
print(input_string)
",62,"def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
print(input_string)
",62,"def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",30
"def main():
  while front_is_clear():
      move()
  if front_is_blocked():
      turn_around()
  move()
  turn_left()
  move()
  pick_beeper()
  turn_left()
  turn_left()
  while front_is_clear():
      move()
  if front_is_blocked():
      turn_around()
  move()
  turn_around()

    
def turn_around():
    for i in range(3)
        turn_left ()",0.2,"def main:
While front_is_clear();
move()
if front_is_blocked ().
turn-around ()
move ()
turn_left()
move ()
pick_beeper ()
turn - left().
turn_left()
while front is clear ():
Move ()
if front_is_ blocked ():
turn around ().
move()
turn
around ()
def turn around ():
turn- lieft
Left
for i in range (3)
()",117,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    turn_left()
    for i in range(3):
        turn_left()
",87,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    turn_left()
    turn_left()
    for i in range(3):
        pass
",113,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    for i in range(3):
        turn_left()
",71,"def main :
While front is clearc):
move
if front _is_blocked ():
turn_around ()
move ( )
turn_left ()
move ()
pick- beeper()
turn - left )
turn - left()
while front is clear ( ):
move ( )
if front is - blocked ()
turn- around ()
movel )
turn around ()
def turn-around ():
for i in range (3)
life ( )",120,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    for i in range(3):
        lift()
",77,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    for i in range(3):
        lift()
",77,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    for i in range(3):
        turn_left()
",71,"def main :
While front-is-clear():
move ( )
if front_is_blocked ().
turn-around ()
move ()
turn_left ( )
move ()
pick-beeper ()
turn- left ()
turn-left ()
while front_is_clear ()!
move ( )
if front_is _ blocked ( ).
turn - around ( )
move ()
turn around ()
def turn-around ():
for i in range (3)
left ()",112,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    for i in range(3):
        left()
",76,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    for i in range(3):
        left()
",76,"def main():
    while front_is_clear():
        move()
        if front_is_blocked():
            turn_around()
            move()
            turn_left()
            move()
            pick_beeper()
            turn_left()
            turn_left()
    while front_is_clear():
        move()
        if front_is_blocked():
            turn_around()
            move()
            turn_around()


def turn_around():
    for i in range(3):
        turn_left()
",119,"def main:
While front_is_clearc):
move ()
if front-is-blocked ():
tuin-around()
move ()
turn-left ()
move ()
pick-beeperc)
tuin-left()
tuin-left()
while front_is clear ():
move ()
if front-is-blocked ():
turn-around ()
move()
turn around ()
def turn-around ():
for in range (3)",114,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_left()
    move()
    pick_beeper()
    turn_left()
    turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_around()


def turn_around():
    for i in range(3):
        pass
",49,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_left()
    move()
    pick_beeper()
    turn_left()
    turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_around()


def turn_around():
    for _ in range(3):
        pass
",50,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_left()
    move()
    pick_beeper()
    turn_left()
    turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_around()


def turn_around():
    for _ in range(2):
        turn_left()
",41
"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return False
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",0.2,"-def is_leap-year (year);
if year % 4= = 0!
is yeare °6 100 = = 0:
1 year 1.400.
if
return. Trive
0:
ebbe:
return false
else:
else:
return false
return false
def main ():
yeare = int Cinput (""Enter a year: ""))
is_ leap - is_ leap year (year)
print (is-leap)
if name_
maino
==
11
main"":",185,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is - leap-year (year):
if year % 4 == O:
if year % 100 = O:
if year % 400 = = O:
return True
else:
return False
else:
return False
else:
return False
def main ():
year = int (input (""Enter a year: ""))
is- leap = is_ 1 eap-year (year)
print (is_ leap)
if 1 name = -"" main
"":
if
main()",153,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return False
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",0,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return False
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",0,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is-leap year (year):
if years % 4 == 0'
if year % 100= = 0:
year % 400 = = 0:
return True
else:
return False
else:
return False
else:
return False
def main ().
year = int (input (""Enter a year: "")
is- leap= is-leap- year (years)
print (is-leap)
if
name_ = ""_main_"":
main()",154,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is-leap-year (year):
if yeare \( \% 4==0 \) :
if year \( \% 100=0 \) :
if year \( \% 400==0 \) :
return. True
else:
return False
else:
retur false
else:
ruturn False
def \( \operatorname{main}() \) :
yearc = int (input (""Enter a year: ""))
is teap = is leap-year (year)
print (is_leap)
if \( \operatorname{mame}_{-}=="" \) main "":
main()",202,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4
"def main():
    print("" problem - 5 "")
    print(""-----------------"")
    numb = int(input(""write an  number: ""))
    mak_list = [int(x) for x in str(numb)]

    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the number's digit: "", add_numb)


if __name__ == ""__main__"":
    main()
",0.2,"def main ():
print (""problem - 5
---"")
print (""---
numb = int (input (write an integer number:
mak_list = [int (x) for x in sts (numb)]
add-numb = 0
fon is in mak_list:
-5 "")
add_numb + = i
print (""Sum of the numbers:
digit
if_name__
main()
=
u
main__""
11
')
add_numb)",126,"def main():
    print(""problem - 5"")
    print(""---"")
    num = int(input(""write an integer number:""))
    mak_list = [int(x) for x in str(num)]
    add_num = 0
    for i in mak_list:
        add_num += i
    print(""Sum of the numbers:"", add_num)


if __name__ == ""__main__"":
    main()
",38,"def main():
    print(""problem - 5 ---"")
    print(""---"")
    numb = int(input(""write an integer number:""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the numbers:"", add_numb)


if __name__ == ""__main__"":
    main()
",35,"def main():
    print(""problem - 5"")
    print(""---"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",31,"def main() :
print ("" ""problem -5 "")
"")
numb = int (input (write an integer number: ')
print (""
mak list = [ int (x) for x in str (numb)]
add-numb = 0
for is in mak_list :
add-numb + = i
print (""sum of the number's: "", add-numb)
digit
if name = = ""_ main__""
main()",116,"def main():
    print(""problem -5"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",50,"def main():
    print(""problem -5"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",50,"def main():
    print(""problem -5"")
    numb = int(input(""Write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",50,"def main () :
print (""problem - 5 "")
print (""-
rumb = int (input ('write an integer number:
mak_list = [int (x) for x in str (numb)]
add-numb = 0
for is in mak-list :
add-numb +=i
print (""Sum of the number's:
"", add_numb)
digit
if_ name __ = =
-- main __:
main()",109,"def main():
    print(""problem - 5"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the number's digits: "", add_numb)


if __name__ == ""__main__"":
    main()
",42,"def main():
    print(""problem - 5"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the number's: "", add_numb)


if __name__ == ""__main__"":
    main()
",47,"def main():
    print(""problem - 5"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",48,"def main ():
print (""problem - 5 "")
print (""............"")
numb = int (input ('write an integer number: ')
mak_list \( =[ \) int \( (x) \) for \( x \) in rtr (numb) \( ] \)
add-numb \( =0 \)
fon is in mak-list:
add_numb \( +=i \)
print (""Sum of the numbers: "", \( a d d \)-numb)
If _ name _ \( == \) ""- main_.""
main()",142,"def main():
    print(""problem - 5 "")
    print(""............"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",33,"def main():
    print(""problem - 5 "")
    print(""............"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",33,"def main():
    print(""problem - 5"")
    print(""............"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",34
"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",0.4,"int (input (""Enter a number: "")
num =
Ans =)
while num > 1:
Ans * = num
num - =|
1
return Ans",29,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int input C ""Enter a number: 11)
Ans = )
while num > / :
Ans * = num
mm - = /
return Ans",23,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",0,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",0,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int (input (""Enter a number: ""
Ans =1
while num > 1 :
Ans * = num
num -= 1
return Ans",16,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int (input (""Enter a number: "")
\[
\text { Ans = } 1
\]
while num \( >1 \) :
Ans \( *= \) num
mum - \( =1 \)
retirn Ans",45,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",0,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",0,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",0
"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
    turn_right()
    move()
    turn_left()
    move()


# This function return to Karel's starting point.
def go_back():
    for i in range(2):
        turn_left()
    for i in range(3):
        move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left


if __name__ == ""__main__"":
    main()
",0.4,"from Karel. stanfordkarel import *
#This
program
a beeper and
def main ():
if
Karel pick
up
back into her house,
#Move to the beeper.
makes
go
move beeper ()
#Pick the beeper up.
beeper ()
pick
#Return to Karel's starting point.
go-back ()
#This function moves Karel to the beeper.
def move-beeper ():
for i in
(2):
range
move()
turn right()
move()
turn left()
move()
# This function return to Kard's starting
def go-back();
for ?. in range
turn-left()
for i
name
main ()
move()
turn_right()
move (f
turn-right()
def turn_right()
for i in range (3) =
turn-
left
rang
e (3);
==
main____'",257,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_to_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_to_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# This function returns to Karel's starting point.
def go_back():
    for i in range(2):
        turn_left()
        for i in range(2):
            move()
            turn_right()
            move()
            turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",58,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_to_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_to_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# This function returns to Karel's starting point.
def go_back():
    for i in range(2):
        turn_left()
        for i in range(3):
            move()
            turn_right()
            move()
            turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",57,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house
def main():
    # Move to the beeper.
    move_to_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_to_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# This function return to Karel's starting point.
def go_back():
    for _ in range(2):
        turn_left()
    for i in range(2):
        move()
        turn_right()
        move()
        turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",39,"from Karel. stanfor dkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main () :
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick - - beeper
# Return to Karel's starting point.
go back ( )
# This function moves Karel to the beeper.
def move - -beeper ( ) :
for i in range (2) :
move ()
torn right ()
move ( )
turn left( )
movel )
# this function return to Karel's starting poin
def go-back() ; for i. in range (2) :
turn- left ()
for i in rang e (3) :
move()
turn-right
()
turn move() - right ()
def turn right ():
for i in range (3)
turn - left
if
name
main
main ()",195,"from karel.stanfordkarel import *

# This program makes Karel pick up
# a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# This function returns to Karel's starting point
def go_back():
    for i in range(2):
        turn_left()
    for i in range(3):
        move()
        turn_right()
        move()
        turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",34,"from karel.stanfordkarel import *

# This program makes Karel pick up
# a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# this function return to Karel's starting point
def go_back():
    for i in range(2):
        turn_left()
    for i in range(3):
        move()
        turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",46,"from karel.stanfordkarel import *

# This program makes Karel pick up
# a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_to_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_to_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# this function return to Karel's starting point
def go_back():
    for i in range(2):
        turn_left()
    for i in range(3):
        move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",28,"from Karel. stanfordkarel import *
# This program makes Kavel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick- beeper ()
# Return to Karel's starting point.
go - back ()
# This function moves karel to the beeper.
def move-beeper ():
for i in range (2):
move ()
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back ();
For ?. in range (2):
turn-left ()
for i in range (3):
move()
turn right ()
move (),
turn-right ()
def turn-right () ?
for i in range (3):
turn-left
if -- name == ' -- main_';
main ()",177,"from karel.stanfordkarel import *

# This program makes Karel pick up
# a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# this function return to Karel's starting point
def go_back():
    for i in range(2):
        turn_left()
    for i in range(3):
        move()
        turn_right()
        move()
        turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",35,"from karel.stanfordkarel import *

# This program makes Karel pick up
# a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# this function returns to Karel's starting point
def go_back():
    for _ in range(2):
        turn_left()
        for i in range(3):
            move()
        turn_right()
        move()
        turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",45,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.


def main():
    # Move to the beeper.
    move_to_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves karel to the beeper.
def move_to_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# this function return to Karel's starting point
def go_back():
    for _ in range(2):
        turn_left()
        for i in range(3):
            move()
        turn_right()
        move()
        turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",50,"from Karel.stanfordkarel import * \#This program makes Karel pick up a beeper and go back into her house. def main ():
\#Move to the beeper. move_beeper () \# Pick the beeper up. pick - beeper () \# Return to Karel's starting point. go-back ()
\#This function moves Karel to the beeper. def move-beeper ():
for \( i \) in range (2):
move ()
turn right ()
move ()
turn leftc)
movec)
\# this function refurn to Karel's starting poin def go-back () ;
for i, in range (2):
for \( i \) in range \( (3) \) :
move ()
\[
\text { move ( } \text { tor }^{2} \mathrm{righ}(\mathrm{C})
\]
def turn-right () ?
for \( i \) in range (3):
turn-left
\[
\text { if } \operatorname{mame}_{\operatorname{man}()}==1 \ldots \text { main } \ldots
\]
\( m \operatorname{ain}() \)",306,"from Karel.stanfordkarel import *

# This program makes Karel pick up
# a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
    turn_right()
    move()
    turn_left()
    move()


# this function return to Karel's starting point
def go_back():
    for i in range(2):
        for i in range(3):
            move()
        turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",47,"from Karel.stanfordkarel import *

# This program makes Karel pick up
# a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
    turn_right()
    move()
    turn_left()
    move()


# this function return to Karel's starting point
def go_back():
    for i in range(2):
        for i in range(3):
            move()
        move()
        turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",44,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_to_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_to_beeper():
    for i in range(2):
        move()
    turn_right()
    move()
    turn_left()
    move()


# This function returns to Karel's starting point.
def go_back():
    for i in range(2):
        for i in range(3):
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",66
"def main():
    # input
    my_word = input(""Enter the original word: "")

    # function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is"" + "" "" + '""' + reversed_word + '""')


# Helper function
def reverse(word):
    # reversed_word
    new_word = """"
    # char by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word


if __name__ == ""__main__"":
    main()
",0.4,"def main ()
#imput
my _ word = imput(""Entlo- The original wood: 7)
#Function calling
reversed word = reverse (my-word)
Print ('The
reversed wood is 1+`
#Helper FunctTION
def
Lif
reverse (woord):
#reversed -won-d
mew-won-d=""/
☆ ster by chan-
for chan- im word:
new-woo-d
return
return new_wond
mame
main()
A/
+revered_word +
=char + new-wood",210,"def main():
    # input
    my_word = input(""Enter the original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is "" + reversed_word)


# Helper FUNCTION
def reverse(word):
    # reversed_word
    new_word = """"
    # step by char
    for char in word:
        new_word = char + new_word
    return new_word


if __name__ == ""__main__"":
    main()
",44,"def main():
    # input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is "" + reversed_word)


# Helper Function
def reverse(word):
    # reversed word
    new_word = """"
    # step by char
    for char in word:
        new_word = char + new_word
    return new_word


main()
",70,"def main():
    # input
    my_word = input(""Enter the original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is "" + reversed_word)


# Helper Function
def reverse(word):
    # reversed word
    new_word = """"
    # step by char
    for char in word:
        new_word = char + new_word
    return new_word


main()
",69,"def main () :
# imput
my wond = inpuTC ""Enter THe original wond:
7)
#
Function calling
reversed_word = reverse (my - -word )
print C' the reversed Wood is + , + "" , + reversd-wordt 1/2)
# Helpen Function
def reverse (wond) :
# revenued -wond
new -wohd - = "" ""
# stert by chan-
for chan- in word :
new-word = Char + new-word
# retun-m
retuntm new_wond
if
name == main :
mainc)",150,"def main():
    # input
    my_word = input(""Enter the original word: "")

    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "", reversed_word)


# Helper Function
def reverse(word):
    # reversed-word
    new_word = """"
    # start by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word


if __name__ == ""__main__"":
    main()
",25,"def main():
    # input
    my_word = input(""Enter the original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)


# Helper Function
def reverse(word):
    # reversed_word
    new_word = """"
    # start by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word


if __name__ == ""__main__"":
    main()
",23,"def main():
    # input
    my_word = input(""Enter the original word: "")

    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "", reversed_word)


# Helper Function
def reverse(word):
    # reversed-word
    new_word = """"
    # start by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word


if __name__ == ""__main__"":
    main()
",25,"def main ( ) :
Limput
my _ word = input( Enten- The original word : 7
#Function calling
reversed- word = reverse (my-word )
Print ( the reversed word is (+) ""+""""+reversed-wordt""}
# Helpen- Function
def sevense
be (word) :
# reversed - word
mew-word = """"
A chen by chan-
For- chan- in word:
new-word = Char + new-word
# return
return new_word
name-
main 1 :
main ()",149,"def main():
    my_word = input(""Enter the original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)


# Helper Function
def reverse(word):
    # reversed word
    new_word = """"
    # char by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word


if __name__ == ""__main__"":
    main()
",33,"def main():
    my_word = input(""Enter the original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)


# Helper Function
def reverse(word):
    # reversed word
    new_word = """"
    # char by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word


if __name__ == ""__main__"":
    main()
",33,"def main():
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)


# Helper Function
def reverse(word):
    # reversed - word
    new_word = """"
    # A char by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word


if __name__ == ""__main__"":
    main()
",38,"defmaim ():
\&imput
\( m y \)-wond = impuT (""EnTen- THe onigimal wond: "")
Function calling
\# Helpen-Fumction
\[
\begin{array}{l}
\text { def nevense (won-d): } \\
\text { * revensed -won-d } \\
\text { mew-won-d = ""1 } \\
\text { X stent by chan- } \\
\text { for chan- im vond: } \\
\text { mew-won-d = chan }+ \text { mew-wond } \\
\text { * } r \text {-etun-m } \\
\text { nietuntm new-won-d } \\
\end{array}
\]",298,"def main():
    my_word = input(""Enter the original word: "")
    # Function calling
    # Helper function
    def reverse(word):
        reversed_word = """"
        for char in word:
            reversed_word = char + reversed_word
        return reversed_word
",223,"def main():
    my_word = input(""Enter the original word: "")
    # Function calling
    # Helper Function


def reverse(word):
    reversed_word = """"
    for char in word:
        reversed_word = char + reversed_word
    return reversed_word
",220,"def main():
    my_word = input(""Enter the original word: "")
    reverse(my_word)


# Helper Function
def reverse(word):
    reversed_word = """"
    for char in word:
        reversed_word = char + reversed_word
    return reversed_word
",221
"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial for "" + str(input_nmb) + "" is "" + str(result))
",0.4,"impur-number =
int(impur (""Enter number'))
val = inpur-number
result isput_number
while (val > 1):
Val - 1
result ☆ val
+
Print ('factorial for 't shy (input-node]
+ srr (result))
val
[₁
-result",80,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val -= 1
    result *= val

print(""factorial for "" + str(input_number) + "" is "" + str(result))
val
result
",32,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val -= 1
    result *= val

print(""factorial for "" + str(input_number) + "" is "" + str(result))
",21,"input_number = int(input(""Enter number: ""))
val = input_number
result = input_number
while val > 1:
    val -= 1
    result *= val

print(""Factorial for "" + str(input_number) + "" is "" + str(result))
",24,"impur-number =
inr(inpur ('Enter number')
val = inpur-number
result input-number
while (val > 1) :
[
val =
Val - 1
result = result it val
Print ('factorial fir't shr(imput-nula)
Srr (result))",59,"import_number = int(input(""Enter number""))
val = import_number
result = import_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial for"", str(import_number))
print(str(result))
",29,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial for"", str(input_number), str(result))
",16,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial for"", str(input_number), ""is"", str(result))
",12,"inpur_number =
int(impur (""Enter number""
Val = inpur-number
result = input-number
While (val>1):
val =
val -1
result = result & val
print ('factorial f& + sur(input-node)
+ spr (result))",50,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial of "" + str(input_number) + "" is "" + str(result))
",5,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial of "" + str(input_number) + "" is "" + str(result))
",5,"input_number = int(input(""Enter number: ""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial of "" + str(input_number) + "" is "" + str(result))
",7,\( \begin{array}{l}\text { inpur-number = } \\ \text { inr(inpur('Entar number')) } \\ \text { val }=\text { impur-number } \\ \text { resalt - roppur-number } \\ \text { while (val }>1 \text { ): } \\ {\left[\begin{array}{c}\text { val }= \\ \text { result }=\text { result }-1 \\ \text { val }\end{array}\right.} \\ \text { pront ('factobial for' + shr(impat-nob) } \\ +\operatorname{srr}(\text { result })) \\\end{array} \),273,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial for "" + str(input_number) + "" is "" + str(result))
",3,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = result = result - 1
print(""factorial for"" + str(input_number) + str(result))
",28,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val -= 1
    result *= val
print(""factorial for "" + str(input_number) + "" is "" + str(result))
",20
"def main():
    num = input(""input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",0.4,"def main ():
num = input (""imput :"")
sum
=
O
for nin num =
sum t
print (sum)
=
int (n)",49,"def main():
    num = input(""input :"")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",2,"def main():
    num = input(""input :"")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",2,"def main():
    num = input(""Input :"")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",3,"def main () :
num = input (""Input: "")
sum = 0
for n in num i
sum + = int (n)
print (sum)",33,"def main():
    num = input(""Input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main():
    num = input(""Input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main():
    num = input(""Input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main () :
num = input (""Input : "")
sum = 0
for n in num :
sum + = int (n)
print (sum)",34,"def main():
    num = input(""Input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main():
    num = input(""Input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main():
    num = input(""Input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def \( \operatorname{main}(C) \) :
\[
\begin{array}{l}
\text { num }=\text { input (""input: "") } \\
\text { sum }=0
\end{array}
\]
for \( n \) in num:
\[
\operatorname{sum} t=\operatorname{int}(n)
\]
print (sum)",132,"def main(C):
    num = input(""input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main(C):
    num = input(""input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main(C):
    num = input(""input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1
"def main():
    num = input(""enter the number you want to add"")
    sum = 0
    for i in str(num):
        sum = sum + int(i)
    print(""sum of the value you entered is"", sum)
",0.4,"def main (s.
()!
61508x08 09
0818 TU O sloj toč
num= Impot (""enter the number you want to add)
поше
Inpri
som = 0 101
zgnivoe nuovesimixam
=0
(AD) tizoged to stopilitie nod ovoseido gnieod
aliotab ort eromeH ab10001 100 ot ti of no blert ezabelą - moosoo ucy to noilomitnoo ei tohol zid
for i in str(num): com
35100 suzel
8181882405
Sum=somt int (i)
edmult inucA
telti tuossA
""mis
Print (""sum of the value you entered is, son)
HILOM
00.000,82
log
alpä yliutoM
noitq Inomseudaid 12915ml
ASOS SS VOM
noitosilofigo inayo?
LF1",375,"def main():
    num = input(""enter the number you want to add"")
    sum = 0
    for i in str(num):
        sum = sum + int(i)
    print(""sum of the value you entered is"", sum)
",0,"def main():
    num = input(""enter the number you want to add"")
    sum = 0
    for i in str(num):
        sum = sum + int(i)
    print(""sum of the value you entered is"", sum)
",0,".python
def main():
    num = input(""Enter the number you want to add: "")
    sum = 0
    for i in str(num):
        sum += int(i)
    print(""Sum of the values you entered is: "", sum)
main()
",29,"SINOE
808
09
def main(s)
num= Imput (""enter the number you want to odd"")
UOV
Sum = 0
estimixom
(I)
tizoqeC
to
stooilities
@dno8
covocaiC
o
UOV
Andri
alinteb
310
enelt
ab10007
no
blort
mov
to
for i in str(mum);ass YDM
hedmuff
Sum-Sumt int (i)
reltiT
00.000,E8
Print (""sum of the Value you entered is, blan sum)
ASOS SS VDM
virutoM
noitosilation
;hoita
LA",227,".python
def main():
    num = input(""Enter the number you want to add: "")
    Sum = 0
    for i in str(num):
        Sum = Sum + int(i)
    print(""Sum of the value you entered is: "", Sum)
    return Sum
",33,"def main():
    num = input(""enter the number you want to add"")
    Sum = 0
    for i in str(num):
        Sum = Sum + int(i)
    print(""sum of the Value you entered is"", Sum)
    return
",16,"def main():
    num = input(""Enter the number you want to add: "")
    Sum = 0
    for i in str(num):
        Sum = Sum + int(i)
    print(""Sum of the values you entered is: "", Sum)
    return


main()
",31,"def main () .
08168 TU
11
num = input (""enter the number you want to add )
Som=0
zpnivo
1ovoseidl o prieoorla
hotel
heH
ab
ot ti of no blerl gabelq
for è in str (num) :
Vi inucoDA
Sum = Sum+ int (i)
raltil touo >A
Print (""sum of the value you entered in, som)
00.000
.1
noitosil
noitgo Inemoanu
LFT",154,"def main():
    num = input(""Enter the number you want to add: "")
    Sum = 0
    for i in str(num):
        Sum = Sum + int(i)
    print(""Sum of the value you entered is"", Sum)
",8,"def main():
    num = input(""Enter the number you want to add: "")
    Sum = 0
    for i in str(num):
        Sum = Sum + int(i)
    print(""Sum of the value you entered is"", Sum)


main()
",17,"def main():
    num = input(""Enter the number you want to add: "")
    Sum = 0
    for i in str(num):
        Sum = Sum + int(i)
    print(""Sum of the values you entered is:"", Sum)
",10,"def main () :
num = Imput (""enter the number youcust to add"")
\[
\text { sum }=0
\]
for i in Mtr(num):
\[
\text { sum }=\operatorname{sum}+\operatorname{int}(i)
\]
Print (""sum or the valee yor entered is"", sum)",79,"def main():
    num = input(""enter the number you want to add"")
    sum = 0
    for i in str(num):
        sum = sum + int(i)
    print(""sum of the values you entered is"", sum)
",1,"def main():
    num = input(""enter the number you want to add"")
    sum = 0
    for i in str(num):
        sum = sum + int(i)
    print(""sum of the values you entered is"", sum)
",1,"def main():
    num = input(""Enter the number you want to add: "")
    total_sum = 0
    for i in str(num):
        total_sum += int(i)
    print(""Sum of the values you entered is"", total_sum)
",24
"user_input = input(""Write your string here: "")
upper = user_input.upper()
print(upper)
",0.4,"input = imput ( ""write your string
user_ input. upper (1
user_
upper = user_ input
print (upper)
here: "")",50,"input = input(""write your string"")
user_input = input.upper()
print(user_input)
",31,"user_input = input(""write your string here: "")
user_upper = user_input.upper()
print(user_upper)
",11,"user_input = input(""write your string here: "")
upper = user_input.upper()
print(upper)
",1,"user_input = input(""write your string here:
1)
upper = user_input. upper(1
print (upper)",7,"user_input = input(""write your string here:"")
upper = user_input.upper()
print(upper)
",2,"user_input = input(""write your string here: "")
upper = user_input.upper()
print(upper)
",1,"user_input = input(""write your string here: "")
upper = user_input.upper()
print(upper)
",1,"user-input = input(""write your string here:
11
Upper = user_input. upper()
print (upper)",9,"user_input = input(""write your string here: "")
Upper = user_input.upper()
print(Upper)
",3,":
user_input = input(""write your string here: "")
Upper = user_input.upper()
print(Upper)
",5,"user_input = input(""write your string here: "")
upper = user_input.upper()
print(upper)
",1,"user-input = imput (""write your string here: "") upper \( = \) user input upper ( ) print (upper)",18,"user_input = input(""write your string here: "")
upper = user_input.upper()
print(upper)
",1,"user_input = input(""write your string here: "")
upper = user_input.upper()
print(upper)
",1,"user_input = input(""Write your string here: "")
upper = user_input.upper()
print(upper)
",0
"from karel.stanfordkarel import *

""""""
Karel should fill the whole world with beepers.
""""""


def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",0.4,"*
from Karel, starfordkarel import
han
kanel should fill the world with beepers.
1100
def main ():
#decomposition using a
function
#each associated
while left_ is_clear():
fill_one_row()
return_to_row_start()
activity
паме
for
move_up()
#rewrite code after white loop to overcome
# fencepost bug
one-how ()
fill_",121,"
from karel.stanfordkarel import *

# Karel should fill the world with beepers.
def main():
    # decomposition using a function
    # each associated
    while left_is_clear():
        fill_one_row()
        return_to_row_start()

    # activity
    # name
    for move_up():
        # rewrite code after while loop to overcome
        # fencepost bug
        one_row()
        fill_row()
",95,"from karel.stanfordkarel import *

# Karel should fill the world with beepers.
def main():
    # Decomposition using a function
    # Each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # Rewrite code after while loop to overcome fencepost bug
    fill_one_row()
",34,"from karel.stanfordkarel import *

# Karel should fill the world with beepers.
def main():
    # Decomposition using a function
    # Each associated
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # Rewrite code after while loop to overcome fencepost bug
    fill_one_row()


def fill_one_row():
    pass


def return_to_row_start():
    pass


def move_up():
    pass
",138,"from karel. stanfordkarel import
will
karel should fill the world with beepers.
1110
def main() :
# decomposition using a function name for
# each associated activity
while left_is-clean
retur_to_row- start()
fill_one-row()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill - one - -row()",105,"from karel.stanfordkarel import *

# karel should fill the world with beepers.


def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clean:
        return_to_row_start()
        fill_one_row()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",48,"from karel.stanfordkarel import *

# karel should fill the world with beepers.
def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clean():
        return_to_row_start()
        fill_one_row()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",48,"from karel.stanfordkarel import *

# karel should fill the world with beepers.
def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        return_to_row_start()
        fill_one_row()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",47,"from Karel. stanfordkarel import *
hun
Karel should fill the world with keepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()",79,"from karel.stanfordkarel import *

# Karel should fill the world with beepers.
def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",16,"from karel.stanfordkarel import *

# Karel should fill the world with beepers.
def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",16,"from karel.stanfordkarel import *

# Karel should fill the world with beepers.
def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",16,"from karel.stayfordkarel inport
IIII""
karel should fill the world with beepers.
""u u
\( \operatorname{def} \operatorname{main}() \) :
\# decomposition using a function rave for \# each associated activity while left-is_clear ():
fill-ore-row()
retur _to _ row_start \( ( \) )
nove_up ()
\# rewirite code after white loop to overcone \# fencepost bug
fill_one-row()",118,"from karel.stanfordkarel import *

""""""
karel should fill the world with beepers.
""""""


def main():
    # decomposition using a function for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",12,"from karel.stanfordkarel import *

""""""
karel should fill the world with beepers.
""""""


def main():
    # decomposition using a function rave for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",9,"from karel.stanfordkarel import *

""""""
karel should fill the world with beepers.
""""""


def main():
    # decomposition using a function for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",12
"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0.4,"if
from karel.stanfordkarel import*
def main ()
move()
move()
turn_right()
move()
turn_left()
move()
-
pick-beeper()
return-home()
def return home()
turn-around()
move()
turn_right()
move ()
turn_left()
movel)
move()
turn_around ()
def turn_right()
for i in range (3):
turn-left()
def turn around ()
for i in range (2):
turn_left()
name.
main()
^_main_",144,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",11,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",11,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stamfordkaral import
def main()
move()
move()
turn-right(
move()
turn-left()
move()
pick. beeper()
return-home()
def return_home()
t#urn_around()
move()
turn_right(?
move ()
turn- left()
movel)
move()
turn_around()
def turn-right()
for i in range (3):
turn- left()
def turn. around ()
for i in range (2):
turn-left()
if name - main' :
mainl",146,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel. stanfordkarel import*
det main ()
move()
move()
turn-right ()
move()
turn-left()
move()
pick-beeper()
return-home()
def return_home()
turn-around()
move()
turn-right ()
move ()
turn-left ()
move()
move()
turn-around()
det turn-right()
for i in range (3):
turn-left ()
def turn- around()
for i in range (2):
turn-left ()
if
name
== '_main ' :
main()",144,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel. stanfordkarel import *
def main ()
move ()
move()
turn-right ()
move ()
turn-leff()
move ()
pick-beeper ()
return-home()
def return_home()
trurn_around()
move ()
turn_right()
move ()
turn_left ()
movel)
move ()
turn_around ()
def turn-right ()
for \( i \) in range (3):
turn-left ()
def turn around()
for \( i \) in range (2):
turn-left \( ( \) )
if \( \operatorname{mame}_{-\operatorname{main}()}== \) __main', :",193,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0
"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]

    input_string = input(""Enter the string: "")
    input_string = input_string.lower()

    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1

    print(vowel_count)


if __name__ == ""__main__"":
    main()
",0.4,"def main ():
rauel caunl=0
vawels = ['a', 'e', 'i', '0', 'u']
""input-string = ""input (""Enter the string:"")
impret string = ""impret_string= lawer ()
for chaor in `imput string:
for vauvel in vamels:
if char = = vowel:
vauvel_cament + = 1
point (vowel count)
`__main_
y__name__ =
main ()
INN
':",148,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",4,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",4,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",4,"dy main ():
vawel_count==0
vawels ['a' 'e' ii, 'o', 'u' ]
input- string= input (""Enter the striegn""."")
input string. lower()
for char in input string:
for vawel 'en vawels:
if char== vowel:
valuel-calest += 1
point (newel count)
if name main__':
main()",146,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string: "")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",3,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string: "")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",3,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string: "")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",3,"de main () :
vowel-count=0
vowels= ['à','e', 'i', 'o','u']
input_string = input (""Enter the string:"")
input string = input_string . lower ()
for char in input string:
for vowel in vowels :
if char == vawel:
vowel-count +=1
print (nouvel count)
if _name_ = = '_main _- ':
main ()",115,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",4,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",4,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",4,"de main ():
vouel caunt \( =0 \)
input_string = input (""Enter the string:"")
input_string = inpet_string. lawer()
for choor in input string:
for vauel 'en vauch:
if char = = vouel:
valuel-caunt \( +=1 \)
print (veuel caunt)
\[
\begin{array}{l}
\text { if _-name__ }==\text { '_ main_- } \\
\operatorname{main}() \\
\end{array}
\]",210,"def main():
    vowel_count = 0
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in ""aeiou"":
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",50,"def main():
    vowel_count = 0
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in ""aeiou"":
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",50,"def main():
    vowel_count = 0
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in ""aeiou"":
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",50
"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])
",0.4,"def main ():
string = str (input ('Enter string: '))
for i in range
print (string[i])
((len(string)-1),-1,-1):
لك
TO
AYS",60,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2,"our
priud
- "") abuse u! ! way
(5, : bureys capul, ) produc) eys = burays
:
()unow top",104,"
for proud in ""I amuse you! ! way"":
    (s, : bureys_caput, ) = proud
    eys = bureys

    def unow_top():
        return eys
",103,"def our_prod(*args, **kwargs):
    product = 1
    for arg in args:
        product *= arg
    for key in kwargs:
        product *= kwargs[key]
    return product
",123,"I'm sorry, but the provided OCR result of the handwritten Python code is too distorted and lacks context. Please provide a clearer version so I can assist you better.",130,"det
main ():
string = str (input ('Enter string: '))
for i in range ((len (string)-1), - 1 ,- 1).
print (string [i])",34,"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])
",0,"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])
",0,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2,"def \( \operatorname{main}( \) ):
\[
\text { string }=\operatorname{str}(\text { input ('Enter string: IJ) }
\]
for \( i \) in range \( (( \) len(string \( )-1),-1,-1) \) : print (string \( [i] \) )",102,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2
"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []


# It check every element in list(sequence) --
for i in seq:
    # It decides whether an element from sequence is even ---
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list(seq_even)

print(seq_even)
",0.4,"seq - [1, 2, 3, 4, 5, 6, 7, 8, 9]
seg - even = []
#It checks every element in dist (sequence)--
for i in seq:
#it decides whether an element from sequence is even ---
if i % 2 == 0:
seq-even. append(i) #appends even i in empty list (seq-even)
print (seq-even)",40,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = []
# It checks every element in seq (sequence)--
for i in seq:
    # it decides whether an element from sequence is even ---
    if i % 2 == 0:
        even.append(i)  # appends even i in empty list (even)
print(even)
",27,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in seq (sequence)--
for i in seq:
    # it decides whether an element from sequence is even ---
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list (seq_even)
print(seq_even)
",11,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in seq (sequence)--
for i in seq:
    # it decides whether an element from sequence is even ---
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list (seq_even)
print(seq_even)
",11,"seq = [1, 2, 3, 4, 5 , 6, 7, 8, ]
seg even = [ ]
# It checks every element in list (sequence)
for i in seq:
# it decides whether an element from sequence is even
if i % 2 == O:
seq-even. append (i) # appends even i in empty list (seq-even)
print (seq-even)",44,"seq = [
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
]
seq_even = []
# It checks every element in list (sequence)
for i in seq:
    # it decides whether an element from sequence is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list (seq_even)
print(seq_even)
",49,"seq = [
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
]
seq_even = []
# It checks every element in list (sequence)
for i in seq:
    # it decides whether an element from sequence is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list (seq_even)
print(seq_even)
",49,"seq = [1, 2, 3, 4, 5, 6, 7, 8]
seq_even = []
# It checks every element in list (sequence)
for i in seq:
    # it decides whether an element from sequence is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list (seq_even)
print(seq_even)
",17,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9]
Seg-even=[]
# It checks every element in list (sequence) - --
for i in seg:
# it decides whether an element from sequence is even --.
if i % 2 = = 0:
seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)",46,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in list (sequence) - --
for i in seq:
    # it decides whether an element from sequence is even --.
    if i % 2 == 0:
        seq_even.append(i)  # appends even ; in empty list (seq_even)
print(seq_even)
",11,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in list (sequence) - --
for i in seq:
    # it decides whether an element from sequence is even --.
    if i % 2 == 0:
        seq_even.append(i)  # appends even ; in empty list (seq_even)
print(seq_even)
",11,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in list (sequence)
for i in seq:
    # it decides whether an element from sequence is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even numbers in empty list (seq_even)
print(seq_even)
",21,"\[
\begin{array}{l}
\text { seq }=[1,2,3,4,5,6,7,8,9] \\
\text { seq-even }=[]
\end{array}
\]
\# It checks every element in dist(sequence.).for \( i \) in seq:
\# it decides whether an clement from sequence is even -.. if \( i \% 2==0 \) :
seq-even. append ( \( i \) ) \# appends even \( i \) in empty list (seq-even) print (seq-even)",127,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in list sequence.
for i in seq:
    # it decides whether an element from sequence is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list seq_even
print(seq_even)
",16,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
for i in seq:
    if i % 2 == 0:
        seq_even.append(i)
print(seq_even)
",153,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []

# It checks every element in seq
for i in seq:
    # it decides whether an element from seq is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list seq_even

print(seq_even)
",28
"from graphics import Canvas

CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01

def main:
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    

    while TRUE

        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        
        if mouse_x >= 0 and mouse_x <= CANVAS_WIDTH and mouse_y >=0 and mouse_y <= CANVAS_HEIGHT",0.4,"from
FROM GRAPHICS IMPORT CANVAS
CANVAS_WIDTH = 300
CANVAS-HEIGHT = 300
CIRCLE_SIZE =
DELAY = 0,01
= 20
DEF MAIN:
CANVAS = CANVAS ( CANVAS WIDTH, CANVAS HEIGHT
WHILE TRUE
MOVSE_X = CANVAS. GET_MOUSE_x()
MOUSE-Y = CANVAS. GET MOUSE_Y()
TE
1
IF MOUSE X >= 0 AND MOUSE X E CANVAS_WIDTH
AND MOUSELY TO AND MOUSE_YE CANVAS. HEIGH",203,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x <= canvas_width
            and mouse_y >= 0
            and mouse_y <= canvas_height
        ):
            pass
",170,"from graphics import Canvas

CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01


def main():
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x <= CANVAS_WIDTH
            and mouse_y >= 0
            and mouse_y <= CANVAS_HEIGHT
        ):
            pass
",86,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x <= canvas_width
            and mouse_y >= 0
            and mouse_y <= canvas_height
        ):
            pass  # Add your code here
",192,"FROM GRAPHICS IMPORT CANVAS
CANVAS_WIDTH 11 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0,01
DEF MAIN :
CANVAS = CANVAS(CANVAS WIDTH, CANVAS HEC 641)
WHILE TRUE
MOVSE -X = CANVAS. 6ET MOUSE x()
MOV. SE- - Y = CANVAS. GET MOUSE ( ) )
If MOUSE_ x > = U AND MOUSE x t CANUAS_WIDTH
AND NOUSE. -Y >=0 AND MOUSE_YE CANUVAS.HEIGH",199,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x <= canvas_width
            and mouse_y >= 0
            and mouse_y <= canvas_height
        ):
            pass
",170,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x <= canvas_width
            and mouse_y >= 0
            and mouse_y <= canvas_height
        ):
            pass
",170,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x <= canvas_width
            and mouse_y >= 0
            and mouse_y <= canvas_height
        ):
            pass
",170,"FROM GRAPHICS IMPORT CANVAS
CANVAS_WIDTH = 300
CANVAS_ HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0,01
DEF MAIN :
CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH)
WHILE TRUE
MOUSE_ X = CANVAS . GET_MOUSE _ X ()
MOUSE- Y = CANVAS . GET MOUSE_ Y ( )
IF MOUSE XT =U AND MOUSE X E CANVAS_WIDTH
AND MOUSELY SEO AND MOUSE-TE CANVAS HEIGH",205,"from graphics import Canvas

CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01


def main():
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    while True:
        MOUSE_X = canvas.get_mouse_x()
        MOUSE_Y = canvas.get_mouse_y()
        if (
            MOUSE_X >= 0
            and MOUSE_X <= CANVAS_WIDTH
            and MOUSE_Y >= 0
            and MOUSE_Y <= CANVAS_HEIGHT
        ):
            continue
",126,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x <= canvas_width
            and mouse_y >= 0
            and mouse_y <= canvas_height
        ):
            pass
",170,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if 0 <= mouse_x <= canvas_width and 0 <= mouse_y <= canvas_height:
            pass  # Add your code here
",153,"FRIM GRAPHICS I MPORT CANVAS
\[
\begin{array}{l}
\text { CANVAS_WIDTH }=300 \\
\text { CANVAS_HEl6HT }=300 \\
\text { CIRCLE_SIZE }=20 \\
\text { DELAY = } 0,01
\end{array}
\]
DEF MAIN :
canvas = Canvas ( canvar_ wi DFH, canvas Hec b HT)
WHILE TRUE
\[
\begin{array}{l}
\text { MOVSE-X = CONVAS. GET_MOUSE_X() } \\
\text { MOVSE-Y = CANVAS. GET MOUSE_Y () }
\end{array}
\]
If MOUSE_X \( X=0 \) AND MOUSE_X \( E \) CANUNS_WIOT4 AND NOUSE_Y \( T=0 \) AND MOUSE_YE CH, USS. HEIG",321,"
FROM GRAPHICS IMPORT CANVAS
CANVAS_WIDTH = 300 
CANVAS_HEIGHT = 300 
CIRCLE_SIZE = 20 
DELAY = 0.01

def MAIN():
	canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
	WHILE TRUE:
		MOUSE_X = CANVAS.GET_MOUSE_X()
		MOUSE_Y = CANVAS.GET_MOUSE_Y()
		if MOUSE_X >= 0 AND MOUSE_X <= CANVAS_WIDTH AND MOUSE_Y >= 0 AND MOUSE_Y <= CANVAS_HEIGHT:
",165,"from graphics import Canvas

CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01


def main():
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    while True:
        MOUSE_X = canvas.get_mouse_x()
        MOUSE_Y = canvas.get_mouse_y()
        if (
            MOUSE_X >= 0
            and MOUSE_X <= CANVAS_WIDTH
            and MOUSE_Y >= 0
            and MOUSE_Y <= CANVAS_HEIGHT
        ):
            pass
",122,"from graphics import Canvas

CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01


def main():
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    while True:
        MOUSE_X = canvas.get_mouse_x()
        MOUSE_Y = canvas.get_mouse_y()
        if (
            MOUSE_X >= 0
            and MOUSE_X <= CANVAS_WIDTH
            and MOUSE_Y >= 0
            and MOUSE_Y <= CANVAS_HEIGHT
        ):
            pass
",122
"# 1 karel Problem - karel Home

from karel.stanfordkarel import *

# This program defines a main function which should make Karel
# move to the beeper, pick it up and return home.
def main():
    get_out()
    pick_food()
    get_back_home()


# pre : karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",0.4,"#1 Karel Problem - Karel home
from Kard Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it and return home.
up
def main ():
GRE_ONE ()
pick-food ()
get back home u
#pre: Karel facing eask, at the corner of starting position.
# posk: Karel facing east, outside the home, at the position of beeper
def get out ():
turn_right()
Move (
turn_left()
Move ()
Move ()
move()
# post
· Karel facing west, at
def pick-food ():
pick beeper ()
turn around ()
#post: Karel facing east, at the corner of starting position
def get back home ():
move ()
Move ()
move()
turn_right()
move ()
turn right (1
def turn right ():
for i in range (3)
turn_left()
def turn around ():
turn_left()
zurn_left()
the position of beeper
if_name__ == '__main_ ' :
main ()",229,"# 1 Karel Problem - Karel home
from Stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it and return home.


def main():
    get_one()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position.
# post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",25,"# 1 Karel Problem - Karel home
from Stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it and return home.


def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position.
# post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",23,"# Karel Problem - Karel home
from stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it and return home.


def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position.
# post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


# the position of beeper
if __name__ == ""__main__"":
    main()
",48,"# 1 karel Problem - Karel home
from Karel stanfordkarel import
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main ():
get-one(?
pick_food ()
get_back home ()
# pre : Karel facing east, at Line corner of starting position
# post ! karel facing east, outside the home, at the position of beeper
def get out ()
turn_ right
move ()
turn left ()
move ()
move
move
# post Karel facing west at the position of beeper
10°M
def pick-food () :
beeper ()
turn_ around()
# post: Karel facing east, at the corner of starting position
def get- back home () :
move ()
move
move ()
turn_right ( )
move ()
turn
right ()
def turn right ( )
for i in range (3) :
turn_left
def turn_ around () :
turn_ left ()
turn_ left ()
if name- == '-main-':
main ()",202,"# 1 karel Problem - Karel home
from stanfordkarel import Karel

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre : Karel facing east, at Line corner of starting position
# post : karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west at the position of beeper


def pick_food():
    beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position


def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",33,"# 1 karel Problem - Karel home
from stanfordkarel import Karel

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre : Karel facing east, at Line corner of starting position
# post : karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west at the position of beeper


def pick_food():
    beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",31,"# Karel Problem - Karel home
from stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre : Karel facing east, at Line corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()


# post: Karel facing west at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",32,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import*
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre: Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ()
move ()
turn_ left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn-around ( )
# post: Karel facing east, at the corner of starting position
def get_back_home () :
move ()
Move ()
move ()
turn right ()
move ( )
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == - main -:
main ()",179,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",9,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",9,"# Karel Problem - Karel home
from karel.stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",12,"\#1 karel Problem-karel home from karel. Stanfordkarel impork *
\# This program defines a main function which should make karel \# move to the beeper, pick it up and return home
def \( \operatorname{main}() \) :
get_oute \( ( \) )
pick-food ()
get_back_home \( U \)
\# pre: Karel facing eask, at the corner of stomeng position
\# posk: Karel facing east, oukside the home, at the position of beeper
def get_out () :
turn_right ()
move?
turn_left ()
move ()
move ()
move ()
\# post : Karel facing west, at the position of beeper
def pick-food () :
pick_beeper ()
turn_around ()
\# post: karel fring east, at the corner of stonting position def get_back_home ():
move ()
move ()
move ()
turn_right ()
move ()
turn right ( )
def turn right () :
for \( i \) in range (3) :
turn_left ()
def turn around ():
turn_left ()
turn_kft()
if _ name_ \( == \) - main - '
main ()",223,"# 1 karel Problem-karel home
from karel.stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position
# post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post : Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",11,"# 1 karel Problem-karel home
from karel.stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position
# post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post : Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",11,"# karel Problem-karel home
from karel.stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position
# post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post : Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",13
"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0.4,"def factorial (n):
if n == 0:
return 1
else:
return n* factorial (n-1)
print (factorial (5))",34,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n)
if n==
O:
return 1
else :
return n
factorial (n-1) -
print (factorial(5))",39,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial (n) :
if n=0 :
return 1
else:
return 1 * factorial (n-1)
print (factorial (5)",39,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial \( (n) \) :
if \( n==0 \) :
return 1
else:
return \( n \) * factorial \( (n-1) \)
print (factorial \( (5)) \)",56,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0
"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    list = []

    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                list.append(elem)
    print(list)
",0.4,"det main 1:
List 1 2 (1,2,3,4]
List 2 = (3,4,5,67
List = []
for elem 1 in list 1 1
for elem2 în list 2:
it olem2 = = elem 2:
elem = elem 2
(N46)
print (list)
list-append (etem)
Livor",118,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    list = []
    for elem1 in list1:
        for elem2 in list2:
            if elem2 == elem1:
                elem = elem2
                list.append(elem)
    print(list)
    return list
",20,"def main():
    list_1 = [1, 2, 3, 4]
    list_2 = [3, 4, 5, 6]
    list_ = []
    for elem_1 in list_1:
        for elem_2 in list_2:
            if elem_2 == elem_1:
                elem = elem_2
                list_.append(elem)
    print(list_)
    return list_
",33,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    list3 = []
    for elem1 in list1:
        for elem2 in list2:
            if elem2 == elem1:
                list3.append(elem2)
    print(list3)
    return list3
",49,"det main O
list 1 2 (1,2,3,4)
list 2 2 (3,4,5,67
List = 17
for elem1 in list 1 :
for elem2 in list2:
it elem1 == elem2:
elem = elem7
list-append (eum)
print (list)",103,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 67]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)


main()
",14,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6, 7]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)


main()
",16,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                List.append(elem1)
    print(List)


main()
",43,"det main () :
list 1 2 [1, 2,3,4]
list 2 =
(3,4,5,6)
List = []
for elem1 in list 1?
for eleme in list2:
it elem1 = = elem2?
elem = elem 2
list- append (elem)
print (ist)",101,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem2
                List.append(elem)
    print(List)

    return
",17,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem2
                List.append(elem)
    print(List)


main()
",14,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                List.append(elem2)
    print(List)


main()
",43,"det \( \operatorname{man}(1) \) :
\[
\begin{array}{l}
\text { list } 1=[1,2,3,4] \\
\text { list } 2=[3,4,5,6] \\
\text { List }=[7] \text { in list } 11 \\
\text { for elem } 1
\end{array}
\]
for elem2 in list2:
it \( \operatorname{elem} 2= \) elem2:
elem = elem 2
list-append (eum)
print (ist)",192,"def man(num):
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = [7]
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem2
                List.append(elem)
    print(List)
",10,"def man(num):
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = [7]
    for elem in list1:
        for elem2 in list2:
            if elem == elem2:
                elem = elem2
                List.append(elem)
    print(List)
",12,"def man():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem in list1:
        for elem2 in list2:
            if elem == elem2:
                List.append(elem)
    print(List)


man()
",44
"String = input()
print(String[::-1])
",0.4,"String = input ()
print (String[::-1])",3,"String = input()
print(String[::-1])
",0,"String = input()
print(String[::-1])
",0,"string = input()
print(string[::-1])
",2,"String = input c)
print (String [:
-
-1])",8,"String = input()
print(String[::-1])
",0,"String = input()
print(String[:-1])
",1,"String = input()
print(String[:-1])
",1,"String = input c)
print (String [ ::- 1])",7,"String = input()
print(String[::-1])
",0,"String = input()
print(String[::-1])
",0,"String = input()
print(String[::-1])
",0,\( \begin{array}{l}\text { String }=\text { input } C) \\ \text { print }(\text { String }[::-1])\end{array} \),77,"String = input()
print(String[::-1])
",0,"String = input()
print(String[::-1])
",0,"String = input()
print(String[::-1])
",0
"from karel.stanfordkarel import *


def main():
    turn_left()
    tower_N()
    tower_S()
    move_4x()
    turn_left()
    tower_N()
    tower_S()


def tower_S():
    turn_3x()
    tower()
    turn_left()


def tower_N():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0.4,"from Karel. Stanford Rund emport
def main ():
turn-
laft
Tower_N()
tower_S()
Move 4x()
Fern-
-left()
tower_N()
-S()
tower
del
de tower -S():
Furn-3x()
tower ()
turn_left()
del tower _N():
Town ()
turn _ 3x()
move 4x()
def tower (13
for i in
range
(5):
if front_is_clear():
Put-baper (1
movel)
else:
def. Jurn - 3×(1:
turn_left()
leftis
turn-
Turn_left()
()
pest-beeper ()
- Move_4x();
move()
move()
movell
move()
name --
__main__."":
main ()
K",267,"from karel.stanford import *


def main():
    turn_left()
    tower_N()
    tower_S()
    move_4x()
    turn_left()
    tower_N()
    tower_S()
    tower()


def tower_S():
    turn_3x()
    tower()
    turn_left()


def tower_N():
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper(1)
            move()
        else:
            turn_3x()
            turn_left()
            put_beeper()
            move_4x()
            move()
            move()
            move()
            move()


if __name__ == ""__main__"":
    main()
",119,"from karel.stanford import *


def main():
    turn_left()
    tower_N()
    tower_S()
    move_4x()
    turn_left()
    tower_N()
    tower_S()
    tower()


def tower_S():
    turn_3x()
    tower()
    turn_left()


def tower_N():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper(1)
            move()
        else:
            turn_3x()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def put_beeper():
    move_4x()
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",46,"from karel.stanford import *


def main():
    turn_left()
    tower_N()
    tower_S()
    move_4x()
    turn_left()
    tower_N()
    tower_S()
    tower()


def tower_S():
    turn_3x()
    tower()
    turn_left()


def tower_N():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",56,"from Karel. Stanford Kand import
K
de/ main()
turn-left
tower-NC
tower- sc)
move-4x ( )
turn-lette
tower N()
tower - sc )
de/ tower - s():
turn - 3x()
tower ()
turn - lefter
def tower - NC):
town ()
turn. - 3x()
move 4r ()
def tower ():
for i in range (5) :
if front - clear():
Put-baper (
movel
else:
put. buper()
def turn- 3x(1:
turn- left(1
turn - left
Turn - left ()
del move _4x():
move!!
more!!
movel
move
=='--
if
name
main !)",285,"from Karel.Stanford import K


def main():
    turn_left()
    tower_NC()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()


def tower_SC():
    turn_3x()
    tower()
    turn_left()


def tower_NC():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_clear():
            put_beeper()
            move()
        else:
            put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",16,"from karel.stanfordkarel import *


def main():
    turn_left()
    tower_NC()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()


def tower_SC():
    turn_3x()
    tower()
    turn_left()


def tower_NC():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",5,"from karel.stanfordkarel import *


def main():
    turn_left()
    tower_NC()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()


def tower_SC():
    turn_3x()
    tower()
    turn_left()


def tower_NC():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",5,"from Karel. Stanford Kad import ""
def main () :
turn - left 11
tower_N()
tower- SC)
move- 4x ( )
turn-left ( )
tower- N()
tower - SC )
del tower - s():
turn - 3x ()
Tower ()
Turn- left ( )
del tower- NC) .
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ):
Put-boper ()
move ()
else:
Put- beeper ()
def.turn- 3x (1:
Turn- left ()
turn - left ()
burn- left ()
def . mere_ 4x();
move ()
move ()
morell
move ()
if -- name __ = = -- main __
main ()",277,"
from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()
    del tower_s():
    turn_3x()
    Tower()
    Turn_left()
    del tower_NC()
    Tower()
    turn_3x()
    move_4x()
    del tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()

if __name__ == ""__main__"":
    main()
",28,"from karel.stanfordkarel import *


def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()
    del tower_s()
    turn_3x()
    Tower()
    turn_left()
    del tower_NC()
    Tower()
    turn_3x()
    move_4x()
    del tower()
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",24,"from karel.stanfordkarel import *


def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()
    turn_3x()
    tower()
    turn_left()
    tower_NC()
    tower()
    turn_3x()
    move_4x()
    tower()
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",31,"from Karel. Stanfordkad import *
def max \( (1): \)
\[
\begin{array}{l}
\text { furn - let (1) } \\
\text { fown-N() } \\
\text { tower-S() } \\
\text { move-4x () } \\
\text { furm-lyt ( ) } \\
\text { tower-N( ) } \\
\text { tower-S() } \\
\end{array}
\]
def tower-s() :
\[
\begin{array}{l}
\text { furn - } 3 \times() \\
\text { Tower (1) } \\
\text { turn - laff() }
\end{array}
\]
def tower - N ( ):
town ()
\( \operatorname{tin} \) - \( 3 \times() \)
move_ \( 4 \times() \)
def tower (1):
for \( i \) in rang \( (5) \) :
if front-is-clear () :
move ()
else:
put_buper ()
def. fum \( -3 \times(1) \) :
\[
\begin{array}{l}
\text { turn - blff (1) } \\
\text { turn - bff (1) } \\
\text { turn - beft (1) }
\end{array}
\]
def mere_4r(1):
morel)
\[
\begin{array}{c}
\text { if name - }==^{\prime} \text {. main ... } \\
\text { main () }
\end{array}
\]
main 1)",556,"from Karel.Stanfordkad import *


def max_1():
    turn_left()
    turn_right()
    tower_S()
    move_4x()
    turn_left()
    tower_N()
    tower_S()


def tower_S():
    turn_left(3)
    Tower_1()
    turn_left()


def tower_N():
    turn()
    turn(3)
    move_(4)


def tower_1():
    for i in range(5):
        if front_is_clear():
            move()
        else:
            put_bumper()


def turn_3():
    turn_left()
    turn_right()
    turn_left()


def move_4r():
    move()


if __name__ == ""__main__"":
    main()
",102,"from Karel.Stanfordkad import *


def max(l):
    turn_left(l)
    move_N()
    tower_S()
    move_4x()
    turn_right()
    tower_N()
    tower_S()


def tower_S():
    turn_3_times()
    Tower(1)
    turn_left()


def tower_N():
    town()
    turn_3_times()
    move_4_times()


def tower(l):
    for i in range(5):
        if front_is_clear():
            move()
        else:
            put_beeper()


def turn_3_times(l):
    turn_left(l)
    turn_left(l)
    turn_left(l)


def move_4x(l):
    move(l)


if __name__ == ""__main__"":
    main()
",108,"from karel.stanfordkarel import *


def max():
    turn_left()
    move()
    tower_S()
    move_4x()
    turn_left()
    tower_N()
    tower_S()


def tower_S():
    for _ in range(3):
        tower(1)
        turn_left()


def tower_N():
    turn()
    for _ in range(3):
        move()
    move_4x()


def tower(n):
    for i in range(5):
        if front_is_clear():
            move()
        else:
            put_beeper()


def turn_left(n):
    for _ in range(n):
        turn_left()
        turn_off()
        turn_left()


def move_4x(n):
    for _ in range(n):
        move()


if __name__ == ""__main__"":
    main()
",153
"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",0.4,"def main ():
string = str (input ( 'Enter string :'))
for i in range ((len (string)-1),-1,-1):
print (string[i])
if __name__ == '___main__':
main()",41,"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",0,"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",0,"def main():
    string = str(input(""Enter string :""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",4,"def main ():
string = str (input( 'Enter string '))
for i in range ((len(string) - 1),-1,-1) :
print (string[i])
if -name '__main_':
main()",44,"def main():
    string = str(input(""Enter string ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",1,"def main():
    string = str(input(""Enter string ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",1,"def main():
    string = str(input(""Enter string ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",1,"det main ( ):
String = str (input (""Enter string: '))
for i in range ((len (string) -1) ,- 1 ,- 1):
print (string [i])
if __ name _== '_main-':
main ()",50,"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",0,"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",0,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",2,"det main ():
string \( = \) str (input ( Enter string: '))
for \( i \) in range ((len (string) -1\( ),-1,-1) \) : print (string \( [i] \) )
if name_ \( == \) '_-_main_-1:
\( \operatorname{main}() \)",81,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",2
"def main():

    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",0.4,"if
def main():
nur - int (input (""Enter a umby: ""))
print (f"" { num } is { ""prime if is_preme (nom)
else 'not prime' 3"")
Lef is__ pame(n):
<=
return false
elif n <= 3.
Feton True
elf 0 ² 2 = = 6
0² / 3 = = 0;
retow False
for i iN, Range (5, int(n"" 0.5) +1,6)
if 1% 1 = = 0¹ 0² 0% (i + 2) = = 6:
retor False
netum Thve
пале
maiN ()
--
main",190,"def main():
    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",1,"def main():
    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",1,"def main():
    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",1,"def main():
num = a NMBU: ""))
is {'prime' if ip_proundnorm)
else'not prime'3"")
def is prone(s)
if n<=1
return False
olig n <=3:
retun True
effn82==0 OR n% 3==0:
retor False
for i iN Range (5, int(c (0.5)+1,6)
if n%i==0 OR n% (i+2) == 6
return False
refund True
if
nane
1' main Ir's
main ()",198,"def main():
    num = int(input(""Enter a number: ""))
    print(""prime"" if is_prime(num) else ""not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",17,"def main():
    num = int(input(""Enter a number: ""))
    print(""prime"" if is_prime(num) else ""not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",17,"def main():
    num = int(input(""Enter a number: ""))
    print(""prime"" if is_prime(num) else ""not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True


if __name__ == ""__main__"":
    main()
",60,"def main():
num = int (input( ""Enter a NM bu :
print (f""Enums is S'prime if is_ prime (nom)
else not primé 3"">
def is_ prime(1):
if n <= 12
return false
elif > <= 3:
Cetun True
elf n/ 2 = = x OR 1% 3=6 ;
return False
for i in Range (5, int(1 +0.5) + 1,6
if 1% i = = x or 1% (1+2) =0 :
return False
return True
if
= =
- - main
main ()",165,"def main():
    num = int(input(""Enter a num: ""))
    if is_prime(num):
        print(f""Num is prime"")
    else:
        print(""Num is not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",64,"def main():
    num = int(input(""Enter a num: ""))
    if is_prime(num):
        print(f""Num is prime"")
    else:
        print(""Num is not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True


if __name__ == ""__main__"":
    main()
",107,"def main():
    num = int(input(""Enter a num: ""))
    if is_prime(num):
        print(f""{num} is prime"")
    else:
        print(f""{num} is not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True


if __name__ == ""__main__"":
    main()
",105,"\( \operatorname{deg} \operatorname{main}(): \)
num =int( (iuput(""Entu a NMkn: "")) prutt(f""\{num\} is \{'prime' if is prome(num) else not prime 3 "")
def is prme \( (n) \) :
if \( n<=1 \)
reture alse
\( \operatorname{elif} \cap<=3 \) :
seton True
elf \( n \% 2==\varnothing \) or \( \cap \% 3==\varnothing \) :
re tow Jalse
for i in Ravge \( \left(5\right. \) int \( \left.\left(n^{* *} 0,5\right)+1,6\right) \) if \( n \% i==\varnothing \) or \( n \%(i+2)==\varnothing \) : retur false
nefom thoe",318,"def main():
    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif (n % 2 == 0) or (n % 3 == 0):
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if (n % i == 0) or (n % (i + 2) == 0):
            return False
    return True
",49,"def main():
    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif (n % 2 == 0) or (n % 3 == 0):
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if (n % i == 0) or (n % (i + 2) == 0):
            return False
    return True
",49,"def main():
    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


main()
",32
"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0.4,"from Karel. Stamfordkarel import
def main ():
turn-left():
while frent_is_ alpar (fi
tunn-right()
fill-row ()
return _to_home ll
Jump_row()
turn_right()
fill-row ()
vetwook to home ()
while frent-is. Elear();
meve (s
Sef fill_row();
while frent_is_ clearl]
put - beeper ()
move ()
put-beeper ()",149,"from Karel.Stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",14,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",12,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",12,"from Karel. stam fordmarel impert
def main():
turn-left():
while frent- is alpar():
turn-rights
fill-row()
return to home(s)
junprowl
turn-right
fillstow()
return te 3-home()
while front is. Elear(1:
meve()
def fill. rew() :
while front. is. clearl)
put - beeper()
move()
put-seeper()",150,"from Karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",13,"from Karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
        put_beeper()
",17,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",12,"from karel . stamfordkarel. import *
def mais ():
turn-left ():
while frent_ is_ alpar ();
turn-right ()
fill-row ( )
return_to_ home()
jumprow ()
turn-right ()
fill-row ()
returnkte -home ()
while front- is Elcar();
meve ()
Sef fill -row() ;
while front- is clear()
put - beeper ()
move ()
put-beeper ()",147,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()

    def fill_row():
        while front_is_clear():
            put_beeper()
            move()
        put_beeper()
",32,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()

    def fill_row():
        while front_is_clear():
            put_beeper()
            move()
        put_beeper()
",32,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
        while front_is_clear():
            move()

    def fill_row():
        while front_is_clear():
            put_beeper()
            move()
            put_beeper()
",44,"fremkarel. stamfordkared impert*
def \( \operatorname{main}() \) :
turn-left ():
while frent - is _ clpar ():
tumn-right 1)
fill-row()
retwn-te-home()
junprow()
turn - right ()
fillarow ()
ve turnkte - home ()
while front-is. Elear ( \( ) \) :
meve()
def fill-rew():
while front - is - clearl)
put - beeper ()
move ()
put-beeper ()",177,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0
"from stanfordkarel import *

""""""
Karel should fill the whole world with beepers.
""""""


def main():
    """"""
    You should write your code to make Karel do its task in
    this function. Make sure to delete the 'pass' line before
    starting to write your own code. You should also delete this
    comment and replace it with a better, more descriptive one.
    """"""
    while not left_is_blocked():
        put_beeper_Line()
        reset_Position()
    put_beeper_Line()


def put_beeper_Line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",0.4,"from stanfordKarel import *
11 11 11
Kard should
beepers.
|| || ||
def
main ():
11 [1 (1
You should write
Karel do its
comment
better
fill
11 [11
/
the whole world with
Make
виче
before starting to
code. You should also
to
task in this
function.
delete the pass line
write your
owen
delete this
with
and replace it
more descriptive one.
move ()
put_ beeper ()
your
put_ beeper _line ()
our code to malce
While not left_it_ blocked ():
put - beeper_Line()
resit_ Position ()
dif put_beeper_Line():
put_beeper ()
front_is_clear
while
():",376,"
Code goes here
",563,"from stanfordkarel import *

# Karel should fill the whole world with beepers.


def main():
    # You should write your own code. You should also delete the pass line and replace it with a more descriptive one.
    move()
    put_beeper()
    put_beeper_line()
    while not left_is_blocked():
        put_beeper_line()
        reset_position()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
",221,"from stanfordKarel import *

# Karel should fill the whole world with beepers.
def main():
    # Make sure to write your own code. You should also delete the pass line and replace it with your more descriptive one.
    move()
    put_beeper()
    put_beeper_line()
    while not left_is_blocked():
        put_beeper_line()
        reset_position()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",207,"from stanford hard import
Kard should fill the whole world with
beepers
11 11 11
daf main () :
11
11
11
you should write your code to male
karel do its task in this function.
Make sure to delite the pass line
code. You should also delete
before starting to write your this own
comment and replace it with a
better more descriptive one
11 11
while not left- is blocked C):
put- buper-line()
resit_Position c)
put- buper - Line c)
def put beeper-line() -
put beeper c)
while front is clear C) :
move ()
put- - beeper c)",208,"from stanfordkarel import *

# Karel should fill the whole world with beepers


def main():
    # You should write your code to make Karel do its task in this function.
    # Make sure to delete the pass line code. You should also delete
    # this comment and replace it with a better, more descriptive one.
    while not left_is_blocked():
        put_beeper_line()
        reset_position()
        put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",92,"from stanfordkarel import *


def main():
    # you should write your code to make karel do its task in this function.
    # Make sure to delete the pass line code. You should also delete
    # this comment and replace it with a better, more descriptive one.

    while not left_is_blocked():
        put_beeper_line()
        reset_position()
        put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",141,"from stanfordkarel import *

# Karel should fill the whole world with beepers
# You should write your code to make Karel do its task in this function.
# Make sure to delete the pass line code.
# You should also delete this comment and replace it with a better, more descriptive one.


def main():
    while not left_is_blocked():
        put_beeper_line()
        reset_position()
        put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",106,"from stanfordkarel import *
Kard should fill the whole world with
keepers.
11 11 11
daf main () :
11 11 11
You should write your code to males
Karel do its task in this function.
Make sure to delete the 'pass line
before starting to write your own
code. You should also delete this
comment and replace it with a
better more descriptive one.
11 11 11
While not left-is - blocked ():
put -beeper -Line()
reset_Position ()
put-buper _line ()
de put_leeper-Line ():
put -beeper ()
While front-is- clear ():
move ( )
put -beeper ()",141,"from stanfordkarel import *

# Karel should fill the whole world with beepers.


def main():
    # You should write your code to make Karel do its task in this function.
    # Make sure to delete the 'pass' line before starting to write your own code.
    # You should also delete this comment and replace it with a better, more descriptive one.

    while not left_is_blocked():
        put_beeper_line()
        reset_position()
        put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",54,"from stanfordkarel import *

# Karel should fill the whole world with beepers.


def main():
    # You should write your code to make Karel do its task in this function.
    # Make sure to delete the 'pass' line before starting to write your own code.
    # You should also delete this comment and replace it with a better, more descriptive one.

    while not left_is_blocked():
        put_beeper_line()
        reset_position()
        put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",54,"from stanfordkarel import *

# Karel should fill the whole world with beepers.
def main():
    # You should write your code to make Karel do its task in this function.
    # Make sure to delete the 'pass' line before starting to write your own code.
    # You should also delete this comment and replace it with a better, more descriptive one.
    while not left_is_blocked():
        put_beeper_line()
        reset_position()
        put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",57,"Grom stanfordkarel import *
111111
Karel should fill the whole world with bepers.
111111
def \( \operatorname{main}() \) :
""11 11
You should write your code to male karel do its task in this function. Make sure to delete the 'pass'1 line bfore slarting to rurite your owen code. You should also delete thir comment and replace it with a better, more descriptive one. 111111

While not left_ir_blockd ():
put_beper_Lin ()
resit_position ()
put_buper_line C)
dy put_buper-Line \( ( \) ):
put_beper ()
while front_is-clear C):
move ()
put_beper ()",155,"from stanfordkarel import *


def main():
    """"""
    You should write your code to make
    karel do its task in this function.
    Make sure to delete the 'pass' line
    before starting to rewrite your own
    code. You should also delete this
    comment and replace it with a
    better, more descriptive one.
    """"""
    while not left_is_blocked():
        put_beeper_line()
        reset_position()
    put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",92,"from stanfordkarel import *


def main():
    """"""
    Karel should fill the whole world with beepers.
    You should write your code to make karel do its task in this function.
    Make sure to delete the 'pass' line before starting to rewrite your own code.
    You should also delete this comment and replace it with a better, more descriptive one.
    """"""
    while not left_is_blocked():
        put_beeper_line()
        reset_position()
    put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",74,"from stanfordkarel import *

# Karel should fill the whole world with beepers.


def main():
    """"""
    You should write your code to make Karel do its task in this function.
    Make sure to delete the 'pass' line before starting to write your own
    code. You should also delete this comment and replace it with a
    better, more descriptive one.
    """"""
    while not left_is_blocked():
        put_beeper_line()
        reset_position()
    put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",36
"#karel needs to move to the bottom of the next arch to commence 
#building the next column.
#precondition: karel is facing east
#post condition: karel is still facing east at the next column site.
        
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()""
                
def turn_around():
    turn_left()
    turn_left()
        
if __name__ == '__main__':
    main()",0.4,"#Karel needs to move to the bottom of the next arch to comm
#ence building the next column.
# Precondition: Karel is facing east
#post_condition : Karel is facing east at the next column site.
def move_to_ next_arch_botton ():
if front is clear ():
for i in range (4):
move ()
def turn around () =
turn_left()
turn_left (D
if name
Main ()
main",119,"# Karel needs to move to the bottom of the next arch to commence
# building the next column.
# Precondition: Karel is facing east
# Post_condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",54,"# Karel needs to move to the bottom of the next arch to commence
# building the next column.
# Precondition: Karel is facing east
# Post_condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",54,"# Karel needs to move to the bottom of the next arch to commence building the next column.
# Precondition: Karel is facing east
# Post_condition : Karel is facing east at the next column site.


def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",54,"#karel needs to more to the bottom of the next arch to comm
#ence building the next column.
#
Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move to next arch botto ():
if front is clear ():
for i in range (4)
move ()
def turn around ():
turn left()
turn_left(3)
if name 1 i main , :
main ()",117,"# karel needs to move to the bottom of the next arch to commence
# building the next column.
#
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",54,"# Karel needs to move to the bottom of the next arch to commence
# building the next column.
#
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",55,"# Karel needs to move to the bottom of the next arch to commence
# building the next column.
#
# Precondition: Karel is facing east
# Post-condition: Karel is facing east at the next column site.


def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",55,"#karel needs to move to the bottom of the next noch to com
Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_botton ();
if front is clear ():
for i in range (4) :
move ()
def turn around ():
turn_left ( )
turn left ()
if __ name.
main
main ()",120,"# Karel needs to move to the bottom of the next arch to come
# Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",58,"# Karel needs to move to the bottom of the next notch to come
# Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",61,"# Karel needs to move to the bottom of the next notch to come
# Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",61,"Hikarel needs to move to the bottom of the next arech to comm. Hence building the next column.
\# Precondition: karel is facing east
\#post-condition: kavel is facing east at the next column site. def move_to_next_arch_botton():
if frontis-clear () :
for \( i \) in range (4):
move ()
def turnarounl () :",159,"
# Karel needs to move to the bottom of the next arch to comm.
# Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
	if front_is_clear():
		for i in range(4):
			move()
def turnaround():
",152,"
# Karel needs to move to the bottom of the next arch to comm.
# Hence building the next column.
# Precondition: karel is facing east
# post-condition: karel is facing east at the next column site.
def move_to_next_arch_bottom():
	if front_is_clear():
		for i in range(4):
			move()
def turnaround():
",150,"# Karel needs to move to the bottom of the next arch to comm.
# Hence building the next column.
# Precondition: karel is facing east
# post-condition: karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turnaround():
    pass
",118
"def find_lrgst_smallst(number):
    if not numbers:
        return none
    smallest = largest = number[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example Usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_lrgst_smallst(numbers)
print(result)
",0.4,"HEART
def- find Ligst_smallet (number);
if not numbers:
return none
-Smallest= largest = number [0]
for num in numbers:
if num < smallest:
= num
пит
smallest
if nam > Largest :
Largest.
fieturin smallest, Largest
= num
#Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
Tresult
find_ligst __ smallst (numbens)
print (result)
উদ্ভাস-উন্মেষ শিক্ষা পরিবার",143,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find-Ligst_smallst - (number):
if not numbers:
return none
-Smallest. = largest = number [0]
for num in numbers:
if num < smallest:
smallest = num
if nam > largest:
Largest = num
return smallest, Largest
Example usage:
numbers = [1, 2, 3, 4,5,6,7,8,9]
result = find_ligst_smalist (numbers)
print (result)",91,"
def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest

Example usage:
numbers = [1, 2, 3, 4,5,6,7,8,9]
result = find_largest_smallest(numbers)
print(result)
",19,"
def find_smallest_largest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest

Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_smallest_largest(numbers)
print(result)
",28,"
def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest

Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",14,"def find_Ligst_smallst (number):
00
if not numbers:
Return none
Smallest=largest = number [0]
-
for num in numbers:
lif
num < smallest:
smallest = num
if
nam > Largest :
Largest = num
tieturin smallest, Largest
# Example usage:
numbers = [1,2,3, 4,5,6,7,8,9]
Hresult = find_ligst_smallst(numbers)
print (result)
उदास-उदास मिका शंतिबाज़",117,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find_rigst_smallst (number):
if not numbers:
return none
- Smallest = largest = number [0]
for num in numbers:
if num < smallest:
\[
\text { smallest }=\text { num }
\]
if nam > Largest:
\[
\text { Largest }=\text { num }
\]
fietutin smallest, Largest
* Example usage.
\[
\begin{array}{l}
\text { rumbers }=[1,2,3,4,5,6,7,8,9] \\
\text { result }=\text { find_lrgst_smallst (numbers) }
\end{array}
\]
print (result)",170,"def find_lrgst_smallst(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage.
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_lrgst_smallst(numbers)
print(result)
",5,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage.
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",11,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage.
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",11
"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The Sum of the Digits is: "", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0

    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",0.4,"def main():
user number
input (""Enter the number: "")
result = Sum_of_digits (user_number)
print (""The Sum of the digits is"", result)
def Sum_of_digits (user_ number):
W 18
number_str = Str (user_number)
digit_sum = 0
for digit in number str:
#zero
return digit sum
if_name_
main()
digit_sum += int(digit)
_main_"":",112,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The Sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",4,"def main():
    user_number = input(""Enter the number: "")
    result = Sum_of_digits(user_number)
    print(""The Sum of the digits is"", result)


def Sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",6,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The Sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",4,"def main():
user_number = input (""Enter the number: "")
result = Sum_of-digits (user_number)
print (""The Sum of the digits is"", result)
def Sum- of_digits (user_ number):
1#
number_str = Str (user- number)
digit_sum = 0 # zero
for digit in number-str:
digit_sum + int(digit)
return digit_sum
if name_ == ""__main_"":
main()",71,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",5,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",5,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The Sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",4,"def main():
user_number = input (""Enter the number:
"")
result = sum_of_digits (user_number )
print (""The sum of the digits is "", result)
def Sum_of_digits (user_number):
number_str = Str (user_number)
digit_sum=0 # zero
for digit in number-str:
digit_sum + = int (digit)
return digit sum
if _name _== ""_main_"":
main()",71,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is "", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0  # zero
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",11,"def main():
    user_number = input(""Enter the number:\n"")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is "", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",6,"def main():
    user_number = input(""Enter the number:\n"")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is "", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",6,"def main():
user_number = input (""Enter the number: "")
result = sum_of digits (user_number)
print (""The sum of the digits is"", result)
def sum_of_digits (user_number):
number_st \( r=\operatorname{str} \) (user_number)
digit_sum \( =\varnothing \quad \# \) zero
for digit in numberstr:
\[
\text { digit_sum } t=\operatorname{int} \text { (digit) }
\]
veturn digit_sum
if name_ \( =="" \) main_ \( "" \) :
main()",147,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",5,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",5,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",5
"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0.4,"def is-prime (n):
DON
if
Returns True if n is prime, False otherwise.
|(α ||
if n <
n < = 1:
return False
for i in range (2, int(n** 0.5) +1);
if n % i = = 0;
def main():
return True
[((11
The main function.
Int
return False
14
n = int ( input (""Enter a number: "")
if is-prime (n):
print (n
else:
""is a
main()
print (n. ""is not a prime number."")
name__ ==
prime number."")
11
main.
--
})",207,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"dof is -prime (n):
110V
Returns True if n is prime, False otherwise.
11011
if n <= 1:
return False
for i in range (2 , int(n**0.5 ) +1): :
if n % i == 0 :
return False
return True
def main():
The main function.
n= int (input ( ""Enter a number: "")
if is-prime (n):
print ( n , ""is a prime number."")
else :
print( n, ""is not a prime number. "")
if
name
11
main
"",
""
;
main()",152,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number. "")


if __name__ == ""__main__"":
    main()
",1,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"def is-prime (n):
1104
Returns True if n is prime, False otherwise
11011
if n <= 1:
return False
for i in range (2, int(n*0.5)+1):
if n % i == 0.
return False
return True
def main () :
11 /11
The main function.
/11.11
n = int ( input (""Enter a number: "")
if is- prime (n):
print (n, "" is a prime number."")
else :
print( n, ""is not a prime number. "")
it
- - name __ == __ main -- :
main ( )",147,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n * 0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",3,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n * 0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",3,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n * 0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",3,"def is-prime \( (n) \) :
Returns True if \( n \) is prime, False otherwise.
IIU11
if \( n<=1 \) :
return False
for \( i \) in range \( \left(2, \operatorname{int}\left(n^{* *} 0.5\right)+1\right) \) :
if \( n \% i==0 \) :
retum False
return True
def \( \operatorname{main}() \) :
IIIII
The main function.
1....
\( n=\operatorname{int} \) (input (""Enter a number: "")
if is-prime \( (n) \) :
print \( (n \), ""is a prime number."")
else:
print ( \( n \), ""is not a prime number."")
if \( \ldots \) name _. \( =="" \) main .. ""
\( \operatorname{main}() \)",279,"def is_prime(n):
    # Returns True if n is prime, False otherwise.
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    # The main function.
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",30,"def is_prime(n):
    # Returns True if n is prime, False otherwise.
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    # The main function.
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",30,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0
"# Reverse String
def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


if __name__ == ""__main__"":
    main()
",0.4,"#Reverse String
def mam ():
str = input (""Input a string: "")
ro_str=
for i m str:
||||
if_name
r_str=i+r_stra
primt (r_stro)
mam ()
_maim_"":",78,"# Reverse String
def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


main()
",31,"# Reverse String
def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


main()
if __name__ == ""__main__"":
    main()
",7,"# Reverse String
def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


if __name__ == ""__main__"":
    main()
",0,"# Reverse
string
def main ():
str = input ( ""Input a string: "")
ro-str=
for i instr:
r_str=itn_str
print (n_str)
if_ name - "" - __main_
main ()",63,"# Reverse string
def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


if __name__ == ""__main__"":
    main()
",1,"# Reverse string
def main():
    str = input(""Input a string: "")
    rev_str = """"
    for i in str:
        rev_str = i + rev_str
    print(rev_str)


if __name__ == ""__main__"":
    main()
",9,"# Reverse string
def main():
    str = input(""Input a string: "")
    rev_str = """"
    for i in str:
        rev_str = i + rev_str
    print(rev_str)


if __name__ == ""__main__"":
    main()
",9,"#Reverse String
def man ():
str = input (""Input a string: "")
ro _str= """"
for i'm str:
r_ str = i+ n_ str
print (no_stro)
if_name _= = ""_main_"":
main ()",55,"# Reverse String
def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


if __name__ == ""__main__"":
    main()
",0,"# Reverse String
def main():
    str = input(""Input a string: "")
    rev_str = """"
    for i in str:
        rev_str = i + rev_str
    print(rev_str)


if __name__ == ""__main__"":
    main()
",8,"# Reverse String
def main():
    str = input(""Input a string: "")
    rev_str = """"
    for i in str:
        rev_str = i + rev_str
    print(rev_str)


if __name__ == ""__main__"":
    main()
",8,"\# Reverse string
def \( \operatorname{mam}() \) :
stro = input (""Input a string: "")
rostro \( ="" 11 \)
for i instr:
\[
r_{-} s t r=i+r_{-} s t r
\]
print (r_stro)
\[
\begin{array}{l}
\text { if_name- }=="" \text {-main_: } \\
\operatorname{mam} \text { () }
\end{array}
\]",157,"# Reverse string
def mam():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


if __name__ == ""__main__"":
    mam()
",5,"# Reverse string
def mam():
    stro = input(""Input a string: "")
    r_stro = """"
    for i in stro:
        r_stro = i + r_stro
    print(r_stro)


if __name__ == ""__main__"":
    mam()
",11,"# Reverse string
def rev():
    stro = input(""Input a string: "")
    r_stro = """"
    for i in stro:
        r_stro = i + r_stro
    print(r_stro)


if __name__ == ""__main__"":
    rev()
",15
"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    list = sentence.split()
    l_word = """"
    for word in list:

        if len(word) > len(l_word):
            l_word = word
    print(l_word)


if __name__ == ""__main__"":
    main()
",0.4,"# Write a Python program to find the longest word in a given text
def maint):
sentence = imput (""Input a sentence: "")
list = sentence.split()
Lword =
for world im List:
if len (word) >len (1-word):
1_ word = word
primt (1- word)
if_name_ == ""_mam_"":
main ()",78,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    lst = sentence.split()
    l_word = """"
    for word in lst:
        if len(word) > len(l_word):
            l_word = word
    print(l_word)


if __name__ == ""__main__"":
    main()
",3,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    lst = sentence.split()
    l_word = """"
    for word in lst:
        if len(word) > len(l_word):
            l_word = word
    print(l_word)


if __name__ == ""__main__"":
    main()
",3,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    word_list = sentence.split()
    longest_word = """"
    for word in word_list:
        if len(word) > len(longest_word):
            longest_word = word
    print(longest_word)


if __name__ == ""__main__"":
    main()
",35,"# Write a Python program to find the longest word in a given text
def main() :
sentence = input (""Input a sentence: "")
list = sentence.split1)
Iword = if 11
for word in List:
if len (word) ) len (1 word):
1_ word = word
print(1- word)
if_name- == ""_main-"":
main ()",73,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    list = sentence.split()
    l_word = """"
    for word in list:
        if len(word) > len(l_word):
            l_word = word
    print(l_word)


if __name__ == ""__main__"":
    main()
",1,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    list = sentence.split()
    l_word = """"
    for word in list:
        if len(word) > len(l_word):
            l_word = word
    print(l_word)


if __name__ == ""__main__"":
    main()
",1,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    word_list = sentence.split()
    longest_word = """"
    for word in word_list:
        if len(word) > len(longest_word):
            longest_word = word
    print(longest_word)


if __name__ == ""__main__"":
    main()
",35,"# Write a Python program to find the longest word i'm a given text
def main ():
sentence = input (""Input a sentence: "")
list = sentence. split ( )
Lword = """"1
for word in List:
if len (word) > 1en (1-word):
1-word = word
print (1-word)
if_name = ""_main_"" :
main ()",77,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    list = sentence.split()
    Lword = """"
    for word in list:
        if len(word) > len(Lword):
            Lword = word
    print(Lword)


if __name__ == ""__main__"":
    main()
",9,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    words_list = sentence.split()
    l_word = """"
    for word in words_list:
        if len(word) > len(l_word):
            l_word = word
    print(l_word)


if __name__ == ""__main__"":
    main()
",13,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    words_list = sentence.split()
    longest_word = """"
    for word in words_list:
        if len(word) > len(longest_word):
            longest_word = word
    print(longest_word)


if __name__ == ""__main__"":
    main()
",37,"\# Write a Python program to find the longest word a \( m \) a given text def main \( ( \) ):
sentence = imput (""Input a sentence: "")
list = sentence.split ()
lword = "" ""
for word im list:
if len (word) >len (1-word):
\[
\text { 1_word }=\text { word }
\]
primt (1-word)
if name_ \( == \) ""-main_"".
\( \operatorname{main}() \)",116,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    list = sentence.split()
    lword = "" ""
    for word in list:
        if len(word) > len(lword):
            lword = word
    print(lword)


if __name__ == ""__main__"":
    main()
",6,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    list = sentence.split()
    lword = "" ""
    for word in list:
        if len(word) > len(lword):
            lword = word
    print(lword)


if __name__ == ""__main__"":
    main()
",6,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    word_list = sentence.split()
    lword = """"
    for word in word_list:
        if len(word) > len(lword):
            lword = word
    print(lword)


if __name__ == ""__main__"":
    main()
",15
"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0.4,"def greatest common_divisor(a,b):
smaller_number=a if azb else b
common_divisor= []
for i in range (1, smaller_number +1):
if a %i == 0 and b% i ==0:
common_divisor.append()
return common_divisor [-1]",52,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def
greatest_common_divisorca,b):
smaller_number. = a if a4b else 10
common-divisor= []
for i in range (1, smaller_number +1) :
if a %i ==0 and b%i==0:
common_divisor . append(i)
return common_divisor [-1]",60,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor (a,b) :
smaller_ number = a if a <b else 10
common_divisor = []
for i in range (1, smaller_number +1):
if 9 % i == 0 and 6% i == 0:
common_divisor. append (i)
return common_divisor [-1]",52,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor \( (a, b) \) :
smaller_number \( =a \) if \( a<b \) else \( b \) common_divisor \( =[] \)
for \( i \) in range \( (1 \), smaller number +1\( ) \) : if \( a \% i==0 \) and \( b \% i==0 \) : common_divisor. a ppend (i) return common_divisor \( [-1] \)",94,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0
"def main():
    """"""
    The program should determine whether the given year is a leap year
    (divisible by 4, divisible by 100 but also by 400).
    """"""

    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below(in number form)."")
    Year = int(input(""Year : ""))
    print("" "")

    if (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" "" + ""is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" "" + ""is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("" "")
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")

        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()

        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break

        elif ask != ""Yes"" or ask != ""yes"" or ask != ""No"" or ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",0.4,"def main ():
The
should determine whether the given year is a leap year
(divisible by 4, divisible by loo but also by 400).
program
print (""This program will help you identify if a given year is a leap
or not."")
year
if
print ("" "")
()
identify_a_leap_year
ask_for_a_new_year_to_ identify ()
def identify_a_leap-year ():
print (""Please input
Year = int (imput ("" Year: ""))
print("" "")
else :
it (Year % 4 = = 0) or (Year %/ 100 ==0) or (Year % 400 ==0);
+ str (Year) +
+ "" is a leap year."")
V
print (""The Year
""+"" is not a leap year."")
print (""the Year
def ask_for_a_new_year_to_
white True:
-_name__
main ()
a year below (ill humber
if ask = =
+ str (Year).
-+
identify ():
print (')
ask - input (""Do you want to identify
print ("" "")
""__main__
form). "")
""Yes"" or ask
ask = = ""yes"" :
identify_a_ leap year ()
""
elif ask = = ""No"" or ask == ""no
a new year? Yes/No: "")
print (""Thank you. See you again!"")
break
elif ask != ""Yes
or ask != ""yes"" of ark! = ""No"" or ask != ""no"":
print (""Wrong keyword. Please type the exact keyword."")",486,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form). "")
    Year = int(input("" Year: ""))
    print("" "")
    if (Year % 4 == 0) and (Year % 100 != 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" and ask != ""yes"" and ask != ""No"" and ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",68,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form). "")
    Year = int(input(""Year: ""))
    if (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        ask = input(""Do you want to identify a new year? Yes/No: "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" or ask != ""yes"" or ask != ""No"" or ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",103,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap or not."")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    if (Year % 4 == 0 and Year % 100 != 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        ask = input(""Do you want to identify a new year? Yes/No: "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" or ask != ""yes"" or ask != ""No"" or ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",113,"def main ():
The program should determine whether the given year is a leap year
(divisible by 4, divisible by 100 but also by 400).
print (""This program will help you identify if a given year is a leap
year or not."")
print ( a)
identify- a - leap_ year ()
ask_for_a- new- year- to identify()
def identify- a - leap - year () :
print ("" Please input a year below (in number form)."")
Year = int (input (""Year: ""))
print ( .)
if (Year %4==0) or (Year % 100 = = 0) or (Year % 400 = = 0) :
print (""The Year ""+ str (Year) + v t is a leap year."")
else
print (""the Year str(Year) + "" + "" is not a leap year."")
def ask_for a-new. year to- identify ():
white True:
prilit ( 1)
ask = input (""Do you want to identify a new year? Yes/No: "")
print ( "" "")
if ask == ""Yes"" or ask == ""yes"":
identify_a_leap-yaar
elif ask = = ""No"" or ask == ""no"" :
print (""Thank you. See you again!')
break
elif ask != ""Yes or ask != ""yes"" a task!=""No"" or ask != ""no"":
print (""Wrong keyword. Please type the exact keyword. )
if name == ""__ main "":
main ()",296,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    if (Year % 4 == 0 and Year % 100 != 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" and ask != ""yes"" and ask != ""No"" and ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",98,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    if (Year % 4 == 0) and ((Year % 100 != 0) or (Year % 400 == 0)):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        else:
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",148,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    if (Year % 4 == 0 and Year % 100 != 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        ask = input(""Do you want to identify a new year? Yes/No: "")
        if ask.lower() == ""yes"":
            identify_a_leap_year()
        elif ask.lower() == ""no"":
            print(""Thank you. See you again!"")
            break
        else:
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",194,"def main () :
The program should determine whether the given year is a leap year
( divisible by 4, divisible by 100 but also by 400).
print ( "" This program will help you identify if a given year is a leap
year or not . "")
print ("" "")
identify_a_leap year ( )
ask _ for _ a _ new _year _ to _identify ( )
def identify _ a _ leap year ( ) :
print ( "" Please input a year below ( in number form ) . "")
Year = int (input (""Year:
print ("" "")
if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;
print (""The Year + str(Year) + "" ""+ ""is a leap year."")
else :
print ( "" The Year "" + str ( Year ) + "" "" + "" is not a leap year . "" )
def ask-for-a-new year_ to _ identify ( ) :
white True :
print ("" "")
ask - input ( "" Do you want to identify a new year ? Yes / No : "" )
print ("" "")
if ask == ""Yes "" or ask == ""yes"":
identify_ a_ leap -year ( )
elif ask == ""NO"" or ask = ""no"":
print ( "" Thank you . See you again ! "" )
break
elif ask != ""Yes or ask != ""yes"" a ask! = ""No"" or ask != ""no"".
print ( "" Wrong keyword . Please type the exact keyword . "")
if
__ name_ == "" __ main __ "":
main ()",312,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("" "")
    if (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("" "")
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" or ask != ""yes"" or ask != ""No"" or ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",34,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("" "")
    if (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" "" + ""is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" "" + ""is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("" "")
        ask = input(""Do you want to identify a new year? Yes / No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" and ask != ""yes"" and ask != ""No"" and ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",35,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("" "")
    if (Year % 4 == 0 and Year % 100 != 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("" "")
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        else:
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",99,"def \( \operatorname{main}() \) :
""The program should determine whether the given year is a leap year (divisible by 4, divisible by 100 but also by 400).
"" r""
print (""This program will help you identify if a given year is a leap year or not."")
privit ("" "")
identify - a - leap_year ()
ask_for_a new_year_to_identify ()
def identify - a l eap - year () :
print (""Please input a year below (in number form)."")
Year = int (input (""Year: ""))
print ("" "")
if \( ( \) Year \( \% 4=0) \) ) or \( ( \) Year \( \% 100=0) \) ) or \( ( \) Year \( \% 400=0) \) :
print (""The Year "" \( +\operatorname{str}( \) Year) + "" "" ""is a leap year."")
else:
\[
\text { print (""The Year ""+str (Year) }+ \text { "" "" "" is not a leap year."") }
\]
def ask_-fir_a_new - year_to_identify ():
white True:
print (' 1 )
ask = input (""Do you want to identify a new year? Yes/No:"") print ("" "")
if ask = = ""Yes "" or ask = = ""yes"":
identify - a - leap- year ()
elif ask \( == \) ""No"" or ask \( == \) ""no"" :
print (""Thank you. See you again!"")
break
elif ask ! = ""Yes or ask ! = ""yes"" a ask! = ""No"" or ask ! = ""no"":
print (""Wrong keyword. Please type the exact keyword."")
if .. name \( \ldots=="" \) main \( _{2}{ }^{\prime} \) :
main ()",401,"
def main():
    ""The program should determine whether the given year is a leap year
    (divisible by 4, divisible by 100 but also by 400).
    ""
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()

def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("" "")
    if Year % 4 == 0 and (Year % 100 != 0 or Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year ""+str(Year) + "" is not a leap year."")

def ask_for_a_new_year_to_identify():
    while True:
        print(' ')
        ask = input(""Do you want to identify a new year? Yes/No:"")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" and ask != ""yes"" and ask != ""No"" and ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")

if __name__==""__main__"":
    main()
",54,"def main():
    """"""
    The program should determine whether the given year is a leap year
    (divisible by 4, divisible by 100 but also by 400).
    """"""
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("" "")
    if (Year % 4 == 0) and ((Year % 100 != 0) or (Year % 400 == 0)):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("" "")
        ask = input(""Do you want to identify a new year? Yes/No:"")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" and ask != ""yes"" and ask != ""No"" and ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",33,"def main():
    """"""
    The program should determine whether the given year is a leap year
    (divisible by 4, divisible by 100 but also by 400).
    """"""
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("" "")
    if (Year % 4 == 0 and Year % 100 != 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("" "")
        ask = input(""Do you want to identify a new year? Yes/No:"")
        print("" "")
        if ask.lower() == ""yes"":
            identify_a_leap_year()
        elif ask.lower() == ""no"":
            print(""Thank you. See you again!"")
            break
        else:
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",110
"sum = 0
number = input()
for i in number:
    sum += int(i)
Print(sum)
",0.4,"Sun =
S
number
imput ()
for i in number:
Sun + =
int(i)
Print (surm)
N",20,"Sum = 0
number = input()
for i in number:
    Sum += int(i)
print(Sum)
",4,"sum = 0
number = input()
for i in number:
    sum += int(i)
print(sum)
",1,"sum = 0
number = input()
for i in number:
    sum += int(i)
print(sum)
",1,"sun 2 = $
number N Emput ()
for i in number:
sun + 11 int(i)
print (sum )",20,"sum_2 = 0
number = input()
for i in number:
    sum_2 += int(i)
print(sum_2)
",7,"sum = 0
number = input()
for i in number:
    sum += int(i)
print(sum)
",1,"sum_2 = 0
number = input()
for i in number:
    sum_2 += int(i)
print(sum_2)
",7,"Sun = D
number = input ()
for i in number :
Sun + = int (i)
Print (Sum)",16,"Sum = 0
number = input()
for i in number:
    Sum += int(i)
print(Sum)
",4,"Sum = 0
number = input()
for i in number:
    Sum += int(i)
print(Sum)
",4,"Sum = 0
number = input()
for i in number:
    Sum += int(i)
print(Sum)
",4,"\[
\operatorname{sun}=\varnothing
\]
number = imput ()
for: in number:
\[
\text { sun }+=\operatorname{int}(i)
\]
print (sum)",69,"sum = 0
number = input()
for i in number:
    sum += int(i)
print(sum)
",1,"sum = 0
number = input()
for i in number:
    sum += int(i)
print(sum)
",1,"sum = 0
number = input()
for i in number:
    sum += int(i)
print(sum)
",1
"def factorial(n):
    if n <= 1:
        return 1
    else:
        return factorial(n - 1) * n


print(factorial(int(input())))
",0.4,"def factoria 1 (n):
if n <= 1 :
Return 1
else:
Return factorial (n-1) *
Prist (fractional (int (amput())))
h",49,"def factorial(n):
    if n <= 1:
        return 1
    else:
        return factorial(n - 1) * n
",33,"def factorial(n):
    if n <= 1:
        return 1
    else:
        return n * factorial(n - 1)
",37,"def factorial(n):
    if n <= 1:
        return 1
    else:
        return n * factorial(n - 1)
",37,"def factoric / (n):
if h L=1 :
Return 1
else :
Return factorial (n-1) A h
Print (factorial (int (input() ))) )",49,"def factorial(n):
    if n == 1:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(int(input())))
",9,"def factorial(n):
    if n == 1:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(int(input())))
",9,"def factorial(n):
    if n == 1:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(int(input())))
",9,"def factorial (n):
if n <= 1 ;
Return 1
else :
Return factorial (n-1) * h
Print (factorial (int (input ()))",42,"def factorial(n):
    if n <= 1:
        return 1
    else:
        return factorial(n - 1) * n


print(factorial(int(input())))
",0,"def factorial(n):
    if n <= 1:
        return 1
    else:
        return factorial(n - 1) * n


print(factorial(int(input())))
",0,"def factorial(n):
    if n <= 1:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(int(input())))
",8,"def factorial (n):
if \( n<1 \) :
Retunn 1
else:
Return factorial \( (n-1) * n \)
Print \( ( \) factarial \( (\operatorname{int}(\operatorname{imput}()))) \)",89,"def factorial(n):
    if n < 1:
        return 1
    else:
        return factorial((n - 1) * n)


print(factorial(int(input())))
",3,"def factorial(n):
    if n < 1:
        return 1
    else:
        return factorial(n - 1) * n


print(factorial(int(input())))
",1,"def factorial(n):
    if n < 1:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(int(input())))
",9
"year = int(input)

if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",0.4,"Year = int (impot
if yeur 1/4 = = $ and year 1/144 != 0 on Year 1.400 ==&=
Print (true)
else:
print (False)",35,"Year = int(input())
if Year % 4 == 0 and Year % 100 != 0 or Year % 400 == 0:
    print(True)
else:
    print(False)
",6,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"year 2 int (input)
if I and year 1,144 1=0 on Year% 400==0:
Print (TRUE)
else :
print (False)",43,"year = int(input())
if year % 144 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",22,"year = int(input())
if year % 144 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",22,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"Year = ent (input)
if year / n == 4 and year 0/ 100 /=/ or year / 400 == 0 ;
Print (true)
else :
Print (False )",30,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"\[
\text { year }=\operatorname{int}(\text { impot })
\]
if Yearn \( \% \mu==\phi \) and year \( \% 1 \phi \phi !=\varnothing \) on Year \( \% 400==\phi \) :
Pine (true)
else:
print (False)",108,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2
"Word = input()

Word = "" "".join([i for i in word[::-1]])

Print(Word)
",0.4,"Word = imput()
word = """", join (I i for i in word [::
Print (word)",19,"Word = input()
word = """".join(i for i in Word[::-1])
print(word)
",9,"word = input()
word = """".join(i for i in word)
print(word)
",15,"word = input()
word = """".join(i for i in word)
print(word)
",15,"word = imput()
ward = "" "" "" "" join (I i from i in word[-:-]]]
Print (word)",22,"word = input()
word = "" "".join([i for i in word[::-1]])
print(word)
",6,"word = input()
word = "" "".join([i for i in word])
print(word)
",12,"word = input()
word = "" "".join([i for i in word])
print(word)
",12,"Word = input ()
Word = """". join ([ "" for i in word [-]
Print (Word)",16,"word = input()
word = """".join([i for i in word])
print(word)
",13,"word = input()
word = """".join([i for i in word])
print(word)
",13,"word = input()
word = """".join([i for i in word[::-1]])
print(word)
",7,"\( \begin{array}{l}\text { Wond }=\operatorname{imput}() \\ \text { wand }="" \text { ""join }([i \text { for } i \text { in word }[\because-1]]) \\ \text { Print (wond) } \\\end{array} \)",134,"word = input()
wand = """".join([i for i in word][::-1])
print(wand)
",13,"word = input()
wand = """".join([i for i in word[:-1]])
print(wand)
",12,"word = input()
wand = """".join([i for i in word[::-1]])
print(wand)
",11
"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]

list3 = [i for i in list1 if i in list2]

print(list3)
",0.4,"list 1 = [1, 2, 3, 4]
bist 2 = [3, 4, 5, 6]
in lista]
bist 3 = [i for i in list 1 if i in
Print (list 3)",27,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list 1 = $ (1,2,3,4)
list2=[3,4,5,6]
=
list 3= [i for i in list 1 if i in listz]
print(list3)",20,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]

list3 = [i for i in list1 if i in list2]
print(list3)
",1,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]

list3 = [i for i in list1 if i in list2]
print(list3)
",1,"list 1 = [ 1, 2, 3, 4]
bist 2 = [ 3,4,5,6]
list 3 = Ji par i in list 1 if i in listz]
Print (list 3)",20,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"\( \begin{array}{l}\text { list } 1=[1,2,3,4] \\ \text { bist } 2=[3,4,5,6] \\ \text { fist } 3=[i \text { for } i \text { in list } 1 \text { if } i \text { in list }] \\ \operatorname{Pint}(\operatorname{list} 3)\end{array} \)",160,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2
"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]

even = [i for i in list1 if i % 2 == 0]

print(even)
",0.4,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [ è for i in lists if */2==4]
Print (even)",15,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = (123456789)
even = [i for i in list1 if i%2==0]
Print (even)",27,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list 1 = [1, 2, 3, 4, 5, 6, 7, 8,9]
even = [è for i in list 1 if i|2=]
Print (even)",16,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"\( \begin{array}{l}\text { list } 1=[1,2,3,4,5,6,7,8,9] \\ \text { even }=[i \text { for } i \text { in list } 1 \text { if } i \% 2==] \\ \text { Print (even) }\end{array} \)",116,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list_1 if i % 2 == 0]
print(even)
",4
"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0.4,"def main ():
year
= int (input())
if (year % 4 == 0 and year % 100 != 0):
print (""True"")
elif (year % 100 == 0 and year % 400 ==0):
print (""True"")
if
else:
print (""False"")
name__
main ()
!!
>>
_main__'",78,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main ():
year = int (input())
if (year% 4==0 and year % 100 != 0):
print (""True"")
elif (year % 100 ==0 and year % 400 == 0):
print (""True"")
else:
print (""False"")
if -- name "" -- __main__"":
main()",68,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main ():
year = int (input ()
if ( year % 4 == 0 and year % 100 ! = 0):
print (""True"")
elif (year % 100 == 0 and year % 400=0):
print (""True"")
else:
print (""False"")
if
__ name __== "" __ main_"".
main ()",71,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if (year % 4 == 0 and year % 100 != 0) or (year % 100 == 0 and year % 400 == 0):
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",32,"def main ():
\[
\text { year }=\operatorname{int}(\operatorname{input}())
\]
if (year \% \( 4==0 \) and year \( \% 100 !=0 \) ):
print (""True"")
elif (year \( \% 100==0 \) and year \( \% 400==0 \) ):
print (""True"")
else:
print (""False"")
if __name__ = = ""_main_."":
\( \operatorname{main}() \)",133,"def main():
    year = int(input())
    if (year % 4 == 0) and (year % 100 != 0):
        print(""True"")
    elif (year % 100 == 0) and (year % 400 == 0):
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",8,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0
"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0.4,"from
def
def
karel. stanford kavel import
main ():
build_column ()
step- up ()
build column()
step-up ()
build- column ()
def
step-up()
build- column()
build
column ():
turn-left()
build- beeper ()
build- beeper ()
build_ beeper ()
build-beeper ()
put - beeper ()
go - back()
turn - left ()
det build - beeper ():
put- beeper ()
move ()
go-back ():
turn around ()
step-up ()
def turn around ():
turn - left()
turn
left()
def step-up():
move ()
move ()
move ()
move ()
if - name
main ()
==
main
*",225,"from karel.stanford.karel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",1,"from karel.stanford.karel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",1,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def step_up():
    move()
    move()
    move()
    move()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",122,"from karel. . stanford kavel import
def main () :
build - column ( )
step - up ()
build - column()
step - up()
build. column ()
step - up()
build - column (
def
build - column ()
turn - left ()
build- beeper ( )
build beeper ()
build - beeper ()
build. - beeper ()
put - beeper ()
go - back ()
turn - left ()
def
build - beeper ():
put - - beeper ( )
move ()
det
go - - back() :
turn around ()
-
step - up ()
def turn - around ()
turn - left ()
turn - left ()
def step - up' () :
move ()
move ()
move ()
move ()
if 1 name
1 main :
main ()",252,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()


def step_up():
    move()
    move()
    move()
    move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",81,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()


def step_up():
    move()
    move()
    move()
    move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",81,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0,"from karel. stanford kavel import *
def main ():
build-column ( )
step -up ( )
build- column ()
Step -up ()
build- column ( )
Step -up ()
build - column ()
def
build - column ( ) :
turn - left ( )
build - beeper ()
build - beeper ( )
build - beeper ( )
build - beeper ( )
put - beeper ( )
go - back ()
turn- left ( )
def
build - beeper ( ) :
put - beeper ()
move ()
det
go - back ():
turn- around ( )
step -up ()
dex
turn- around () :
turn - left ()
turn - left ()
dex
step-up ():
move ()
move ( )
move ( )
move ( )
-
if - name _ == - main _:
main ( )",251,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0,"from karel. Stanfordkavel import * def main ():
build_column ()
step - up ()
build - column ()
Step - up ()
build_column ()
Step - up ()
build - column()
def build - column ():
turn - left ()
build - beeper ()
build - beeper ()
build - beeper ()
buitd - beeper ()
put - beeper ()
go - back ()
turn - left ()
det build-beeper ():
put - beeper ()
move ()
det go-back ():
turn - around ()
step - up ()
dex turn - around () :
turn - left ()
turn - left()
def step-up ():
move ()
move ()
move ()
move ()
if _ name _ \( == \) 'main _ :
main ()",233,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0
"def main():
    input_string = input('Input string: ')
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print ret

if __name__ == '__main__':
    main()",0.4,"def main ():
if
input_ string = input ('Input string; ')
11 11
ret =
for ch in input-string
ret
print ret
71
= ret + ch. uppert)
name__ =
main ()
main
20 07203",78,"def main():
    input_string = input(""Input string: "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",8,"def main():
    input_string = input(""Input string: "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",8,"def main():
    input_string = input(""Input string: "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",8,"def main () :
input - string = input(' Input string ')
ret = 11 11
for ch in input - stiting
ret = ret + ch. upperl )
print ret
1
1
if
name
main
-
-
main
()",66,"def main():
    input_string = input(""Input string "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9,"def main():
    input_string = input(""Input string "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9,"def main():
    input_string = input(""Input string "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9,"def main () ;
input_ string = input ( Input string:')
ret = "" ""
for ch in input string
ref = ret + ch.upper()
print ref
if __ name __ =
1
1
- -
main
--
main ( )",57,"def main():
    input_string = input(""Input string:"")
    ret = "" ""
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",10,"def main():
    input_string = input(""Input string:"")
    ret = "" ""
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",10,"def main():
    input_string = input(""Input string:"")
    ret = "" ""
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",10,"def main ():
\[
\begin{array}{l}
\text { input_string = input ('Input string! ') } \\
\text { ret }="" 11
\end{array}
\]
for ch in input.string
\[
\text { ret }=\text { ret }+ \text { ch. upperd) }
\]
print ret
if name \( \operatorname{main}( \) )",122,"def main():
    input_string = input(""Input string! "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9,"def main():
    input_string = input(""Input string! "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9,"def main():
    input_string = input(""Input string! "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9
"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",0.4,"O
O
O
from Kare!. Stamford Karel impert
def main ():
mere to beeper ()
pick beeper ()
turn-around ()
return to_start()
def muere to beepet():
while front_is_clear ():
Move
turn_right()
more()
turu-left()
More()
det turn around ():
turn left ()
turn left ()",106,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
        turn_right()
        move()
        turn_left()
        move()


def turn_around():
    turn_left()
    turn_left()
",18,"from Karel. stanfordKarel import
def main ():
move to beeper ()
pick_beeper()
turu_around()
Return to-start()
def more to beeper() :
while front-is-clear ():
move
turn_right()
more(
turn-left()
more()
det turu around ();
turn_ left ()
turu left ()",93,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from Karel. StanfordKarel import
def main ():
move_to_beeper ()
pick-beeper ()
turn-around()
return_to_start ()
def more_to_ beeper () :
While front-is-clear ();
move
turn_Right ()
move ()
turn-left ()
move ()
def turu_around ():
tura_left ()
turn left ()",92,"from Karel.StanfordKarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",5,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from Karel. stanfordKarel import
def main ():
move to beeper ()
pick-beeper ()
turu_around ()
ceturn to_start()
def more to beeper ():
while frout_is_clear (1):
move
turn_right ()
more ()
turu-left()
morre()
def turu_around ():
turu left ()
turu left ()",96,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2
"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",0.4,"from kanel.stanfordkarel import
def main ():
while front_is_ clear():
bill tower ()
def fill_tower ():
-
while front_is_ clear ():
put-beeper ()
move()
put_beeper()
column_return ()
def column_return ():
if
def turn around ():
while front_is_blocked ():
turn-around()
while front_is_ clear():
move ()
next-tower()
-
def next tower ():
if right_is_dean ():
turn_right()
move()
turn_right()
for i in range (2):
turn_left()
—
else:
turn around ()
while front_is_dear():
def turn_right():
-
move()
-
name
main ()
for i in range (3):
turn_left()
_main_':",323,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    if front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
        for i in range(2):
            turn_left()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",89,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    if front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
        for i in range(2):
            turn_left()
    else:
        turn_around()
    while front_is_clear():
        move()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",160,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
        for i in range(2):
            turn_left()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",85,"from karel. stanfordkard import
def main ()
while front. is clear () :
fill_tower()
def fill tower () :
while front - is - clean ():
put - beeper ()
move ()
put_beeper()
column_return() -
def columm_return(): -
while front_is_blocked() :
turn-around()
while front_is_clear()
move()
next_tower()
def turn around()
for i in range (2) :
turn-left()
def next tower() :
if right is-clean - ( ) :
turn -right()
move ()
turn_right()
else :
turn around()
while front_is_dear():
move()
def turn - right ():
for i in range (3) :
turn_left(c)
if - name == I main I :
main ()",238,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
    while front_is_clear():
        move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",8,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
    while front_is_clear():
        move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",8,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from kanel stanfordkard import *
det main () :
while front_is_clear ():
bill_tower ( )
det fill-tower ():
while front-is-clean ():
put-beeper ()
move ()
put_beeper ()
column_return ()
def column_return ():
while front_ is_blocked ():
turn-around ()
while front_is_clear () :
move ( )
next_tower ()
det turn-around ():
for i in range (2) :
turn-left ( )
det next_tower ():
if right_is_clean ():
turn-right ( )
move()
turn-right ()
else :
turn-around ()
while front-is-clear ():
move( )
def turn-right ():
for i in range (3):
turn_left ()
if
- name _
== '_ main
1
..
main ()",243,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        build_tower()


def build_tower():
    while front_is_clear():
        put_beeper()
        move()
        put_beeper()
        column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
    while front_is_clear():
        move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",22,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        build_tower()


def build_tower():
    while front_is_clear():
        put_beeper()
        move()
        put_beeper()
        column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
    while front_is_clear():
        move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",22,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()
        next_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_around():
    for i in range(2):
        turn_left()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",166,"from karel.stanfordkarel import *
def main ():
while front_is_dear () :
fill_tower ()
def fill_tower ():
while front_is_dear ():
put-beeper ()
move ()
put_beeper ()
column_return ()
def colurn-return () :
while front_is_blocked ( ):
turn-around ()
while front_is_clear () :
move ()
next_tower ()
def turn_around () :
for \( i \) in range (2):
turn-left ()
def next_tower ( ) :
if right_is_dear ( ):
turn_right ()
move ()
turn_right ()
else:
turn_around( )
while front_is_dear ():
move ()
def turn_right () :
for \( i \) in range (3):
turn_left ()
if _ name \( ==1 \) _ main _ '
main ()",245,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",0
"def filter_string_a(string):
      string.sort()
      filtered_string_list = [ ]
      for str in string:
             if str.startswith(""a""):
                    filtered_string_list.append(str)
       return filtered_string_list
input_string = [""apple"", ""banana"", ""avacado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)",0.4,"der fitters string - a (string);
sont ()
string.
filtered_string_list = [3
toru
1
in
string:
stru. start with (""a"");
stru
filtreried_rodring-lirt: append
returen filtered_string-lit
(stru)
imput_string = [""apple"", ""bunana"", ""avacad""
""cheveny"", ""apriest""""]
output = filtern-string- a (imput_string)
print (output)",131,"def filter_string_a(string):
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",48,"def filter_string_a(string):
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",48,"def filter_string_a(string):
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",48,"def - a (string):
string. sort ()
filtered -string-list = -[I
for stru in string :
if stru startswith (""a""):
append (str))
return
input_ string z [ apple"" ""bunana"", ""avacado)
""chevry"", ""apricot""]
output fifter z string a (input-ntuing)
print (output)",151,"def a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""chevy"", ""apricot""]
output = a(input_string)
print(output)
",60,"
def a_string(string):
    string.sort()
    filtered_string_list = [
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list

input_string = [""apple"", ""banana"", ""avocado"", ""chevry"", ""apricot""]
output = a_string(input_string)
print(output)
",48,"def filter_string_a(string_list):
    string_list.sort()
    filtered_string_list = []
    for stru in string_list:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",42,"det filter-string-a (string) :
string. sort ()
filtered- string-list = []
foru stre in strung :
if stru. startswith (""a""):
filtered-string-lint: append
( stru)
returen filtered-string- list
input_string = \""apple"", ""bunana"", ""avacado
""cheving "" ""apricot""]
Output = filter-string-a (input_string)
print (output)",104,"def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""chewing"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",34,"def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""chewing"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",34,":
def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list

input_string = [""apple"", ""banana"", ""avocado"", ""chewing"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",35,"def filteru-string-a (ntring):
string. sont ()
filtered-string_list \( =[] \)
for stre in atring:
if stru. Ptark with (""an):
fiterced-atring-lint. append (stru)
return filtered-rtring-lirst
imput_rting \( z \) ""apple"", ""bunana"", ""avacado"" ""cherry"" ""apricot"" pring (output)",146,"def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
print(input_string)
",62,"def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",30,"def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",30
"def main():
  while front_is_clear():
      move()
  if front_is_blocked():
      turn_around()
  move()
  turn_left()
  move()
  pick_beeper()
  turn_left()
  turn_left()
  while front_is_clear():
      move()
  if front_is_blocked():
      turn_around()
  move()
  turn_around()

    
def turn_around():
    for i in range(3)
        turn_left ()",0.4,"def main:
While front_is_clear();
move()
if front_is_blocked ().
turn-around ()
move ()
turn_left()
move ()
pick_beeper ()
turn - left().
turn_left()
while front is clear ():
Move ()
if front_is_ blocked ():
turn around ().
move()
turn
around ()
def turn around ():
turn- lieft
Left
for i in range (3)
()",117,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    turn_left()
    for i in range(3):
        turn_left()
",87,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    turn_left()
    turn_left()


for i in range(3):
    pass
",114,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    for i in range(3):
        turn_left()
",71,"def main :
While front is clearc):
move
if front _is_blocked ():
turn_around ()
move ( )
turn_left ()
move ()
pick- beeper()
turn - left )
turn - left()
while front is clear ( ):
move ( )
if front is - blocked ()
turn- around ()
movel )
turn around ()
def turn-around ():
for i in range (3)
life ( )",120,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    for i in range(3):
        lift()
",77,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    for i in range(3):
        lift()
",77,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    for i in range(3):
        turn_left()
",71,"def main :
While front-is-clear():
move ( )
if front_is_blocked ().
turn-around ()
move ()
turn_left ( )
move ()
pick-beeper ()
turn- left ()
turn-left ()
while front_is_clear ()!
move ( )
if front_is _ blocked ( ).
turn - around ( )
move ()
turn around ()
def turn-around ():
for i in range (3)
left ()",112,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    for i in range(3):
        left()
",76,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    for i in range(3):
        left()
",76,"def main():
    while front_is_clear():
        move()
        if front_is_blocked():
            turn_around()
            move()
            turn_left()
            move()
            pick_beeper()
            turn_left()
            turn_left()
    while front_is_clear():
        move()
        if front_is_blocked():
            turn_around()
            move()
            turn_around()


def turn_around():
    for i in range(2):
        turn_left()
",120,"def main:
While front_is_clearc):
move ()
if front-is-blocked ():
tuin-around()
move ()
turn-left ()
move ()
pick-beeperc)
tuin-left()
tuin-left()
while front_is clear ():
move ()
if front-is-blocked ():
turn-around ()
move()
turn around ()
def turn-around ():
for in range (3)",114,"
def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_left()
    move()
    pick_beeper()
    turn_left()
    turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_around()

def turn_around():
    for i in range(3):
",59,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_left()
    move()
    pick_beeper()
    turn_left()
    turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_around()


def turn_around():
    for _ in range(3):
        pass
",50,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_left()
    move()
    pick_beeper()
    turn_left()
    turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_around()


def turn_around():
    for _ in range(2):
        turn_left()
",41
"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return False
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",0.4,"-def is_leap-year (year);
if year % 4= = 0!
is yeare °6 100 = = 0:
1 year 1.400.
if
return. Trive
0:
ebbe:
return false
else:
else:
return false
return false
def main ():
yeare = int Cinput (""Enter a year: ""))
is_ leap - is_ leap year (year)
print (is-leap)
if name_
maino
==
11
main"":",185,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is - leap-year (year):
if year % 4 == O:
if year % 100 = O:
if year % 400 = = O:
return True
else:
return False
else:
return False
else:
return False
def main ():
year = int (input (""Enter a year: ""))
is- leap = is_ 1 eap-year (year)
print (is_ leap)
if 1 name = -"" main
"":
if
main()",153,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return False
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",0,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return False
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",0,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is-leap year (year):
if years % 4 == 0'
if year % 100= = 0:
year % 400 = = 0:
return True
else:
return False
else:
return False
else:
return False
def main ().
year = int (input (""Enter a year: "")
is- leap= is-leap- year (years)
print (is-leap)
if
name_ = ""_main_"":
main()",154,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is-leap-year (year):
if yeare \( \% 4==0 \) :
if year \( \% 100=0 \) :
if year \( \% 400==0 \) :
return. True
else:
return False
else:
retur false
else:
ruturn False
def \( \operatorname{main}() \) :
yearc = int (input (""Enter a year: ""))
is teap = is leap-year (year)
print (is_leap)
if \( \operatorname{mame}_{-}=="" \) main "":
main()",202,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4
"def main():
    print("" problem - 5 "")
    print(""-----------------"")
    numb = int(input(""write an  number: ""))
    mak_list = [int(x) for x in str(numb)]

    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the number's digit: "", add_numb)


if __name__ == ""__main__"":
    main()
",0.4,"def main ():
print (""problem - 5
---"")
print (""---
numb = int (input (write an integer number:
mak_list = [int (x) for x in sts (numb)]
add-numb = 0
fon is in mak_list:
-5 "")
add_numb + = i
print (""Sum of the numbers:
digit
if_name__
main()
=
u
main__""
11
')
add_numb)",126,"def main():
    print(""problem - 5 ---"")
    num = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(num)]
    add_num = 0
    for i in mak_list:
        add_num += i
    print(""Sum of the numbers: "", add_num)


if __name__ == ""__main__"":
    main()
",49,"def main():
    print(""problem - 5"")
    print(""---"")
    num = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(num)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",33,"def main():
    print(""problem - 5"")
    print(""---"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",31,"def main() :
print ("" ""problem -5 "")
"")
numb = int (input (write an integer number: ')
print (""
mak list = [ int (x) for x in str (numb)]
add-numb = 0
for is in mak_list :
add-numb + = i
print (""sum of the number's: "", add-numb)
digit
if name = = ""_ main__""
main()",116,"def main():
    print(""problem -5"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",50,"def main():
    print(""problem -5"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""sum of the number's: "", add_numb)


if __name__ == ""__main__"":
    main()
",49,"def main():
    print(""problem -5"")
    numb = int(input(""Write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",50,"def main () :
print (""problem - 5 "")
print (""-
rumb = int (input ('write an integer number:
mak_list = [int (x) for x in str (numb)]
add-numb = 0
for is in mak-list :
add-numb +=i
print (""Sum of the number's:
"", add_numb)
digit
if_ name __ = =
-- main __:
main()",109,"def main():
    print(""problem - 5"")
    numb = int(input(""write an integer number:""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the number's digits: "", add_numb)


if __name__ == ""__main__"":
    main()
",43,"def main():
    print(""problem - 5"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the number's: "", add_numb)


if __name__ == ""__main__"":
    main()
",47,"def main():
    print(""problem - 5"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the number's digits: "", add_numb)


if __name__ == ""__main__"":
    main()
",42,"def main ():
print (""problem - 5 "")
print (""............"")
numb = int (input ('write an integer number: ')
mak_list \( =[ \) int \( (x) \) for \( x \) in rtr (numb) \( ] \)
add-numb \( =0 \)
fon is in mak-list:
add_numb \( +=i \)
print (""Sum of the numbers: "", \( a d d \)-numb)
If _ name _ \( == \) ""- main_.""
main()",142,"def main():
    print(""problem - 5 "")
    print(""............"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",33,"def main():
    print(""problem - 5 "")
    print(""............"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",33,"def main():
    print(""problem - 5"")
    print(""............"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",34
"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",0.6,"int (input (""Enter a number: "")
num =
Ans =)
while num > 1:
Ans * = num
num - =|
1
return Ans",29,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",0,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int input C ""Enter a number: 11)
Ans = )
while num > / :
Ans * = num
mm - = /
return Ans",23,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",0,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",0,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int (input (""Enter a number: ""
Ans =1
while num > 1 :
Ans * = num
num -= 1
return Ans",16,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int (input (""Enter a number: "")
\[
\text { Ans = } 1
\]
while num \( >1 \) :
Ans \( *= \) num
mum - \( =1 \)
retirn Ans",45,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",0,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",0,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",0
"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
    turn_right()
    move()
    turn_left()
    move()


# This function return to Karel's starting point.
def go_back():
    for i in range(2):
        turn_left()
    for i in range(3):
        move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left


if __name__ == ""__main__"":
    main()
",0.6,"from Karel. stanfordkarel import *
#This
program
a beeper and
def main ():
if
Karel pick
up
back into her house,
#Move to the beeper.
makes
go
move beeper ()
#Pick the beeper up.
beeper ()
pick
#Return to Karel's starting point.
go-back ()
#This function moves Karel to the beeper.
def move-beeper ():
for i in
(2):
range
move()
turn right()
move()
turn left()
move()
# This function return to Kard's starting
def go-back();
for ?. in range
turn-left()
for i
name
main ()
move()
turn_right()
move (f
turn-right()
def turn_right()
for i in range (3) =
turn-
left
rang
e (3);
==
main____'",257,"from karel.stanfordkarel import *

# This program makes a beeper and
def main():
    if Karel.pick_up_beeper():
        # Move to the beeper.
        go_to_beeper()
        # Pick the beeper up.
        pick_beeper()
        # Return to Karel's starting point.
        go_back()


# This function moves Karel to the beeper.
def go_to_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# This function return to Karel's starting
def go_back():
    for i in range(2):
        turn_left()
        for i in range(2):
            move()
            turn_right()
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",140,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house
def main():
    # Move to the beeper
    move_to_beeper()
    # Pick the beeper up
    pick_beeper()
    # Return to Karel's starting point
    go_back()


# This function moves Karel to the beeper
def move_to_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# This function return to Karel's starting point
def go_back():
    for i in range(3):
        turn_left()
        move()
        turn_right()
        move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",71,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()

    # Pick the beeper up.
    pick_beeper()

    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# This function return to Karel's starting point.
def go_back():
    for i in range(2):
        turn_left()
        for i in range(2):
            move()
            turn_right()
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",54,"from Karel. stanfor dkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main () :
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick - - beeper
# Return to Karel's starting point.
go back ( )
# This function moves Karel to the beeper.
def move - -beeper ( ) :
for i in range (2) :
move ()
torn right ()
move ( )
turn left( )
movel )
# this function return to Karel's starting poin
def go-back() ; for i. in range (2) :
turn- left ()
for i in rang e (3) :
move()
turn-right
()
turn move() - right ()
def turn right ():
for i in range (3)
turn - left
if
name
main
main ()",195,"from karel.stanfordkarel import *

# This program makes Karel pick up
# a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# this function returns to Karel's starting point
def go_back():
    for i in range(2):
        turn_left()
    for i in range(3):
        move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",23,"from karel.stanfordkarel import *

# This program makes Karel pick up
# a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# this function return to Karel's starting point
def go_back():
    for i in range(2):
        turn_left()
    for i in range(3):
        move()
        turn_right()
        move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",43,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_to_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_to_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# this function return to Karel's starting point
def go_back():
    for i in range(2):
        turn_left()
    for i in range(3):
        move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",26,"from Karel. stanfordkarel import *
# This program makes Kavel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick- beeper ()
# Return to Karel's starting point.
go - back ()
# This function moves karel to the beeper.
def move-beeper ():
for i in range (2):
move ()
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back ();
For ?. in range (2):
turn-left ()
for i in range (3):
move()
turn right ()
move (),
turn-right ()
def turn-right () ?
for i in range (3):
turn-left
if -- name == ' -- main_';
main ()",177,"from karel.stanfordkarel import *

# This program makes Karel pick up
# a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# this function return to Karel's starting point
def go_back():
    for i in range(2):
        turn_left()
        for i in range(3):
            move()
        turn_right()
        move()
        turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",43,"from karel.stanfordkarel import *

# This program makes Karel pick up
# a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# this function return to Karel's starting point
def go_back():
    for i in range(2):
        turn_left()
        for i in range(3):
            move()
        turn_right()
        move()
        turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",43,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_to_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves karel to the beeper.
def move_to_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# this function return to Karel's starting point
def go_back():
    for i in range(2):
        turn_left()
    for i in range(3):
        move()
        turn_right()
        move()
        turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",39,"from Karel.stanfordkarel import * \#This program makes Karel pick up a beeper and go back into her house. def main ():
\#Move to the beeper. move_beeper () \# Pick the beeper up. pick - beeper () \# Return to Karel's starting point. go-back ()
\#This function moves Karel to the beeper. def move-beeper ():
for \( i \) in range (2):
move ()
turn right ()
move ()
turn leftc)
movec)
\# this function refurn to Karel's starting poin def go-back () ;
for i, in range (2):
for \( i \) in range \( (3) \) :
move ()
\[
\text { move ( } \text { tor }^{2} \mathrm{righ}(\mathrm{C})
\]
def turn-right () ?
for \( i \) in range (3):
turn-left
\[
\text { if } \operatorname{mame}_{\operatorname{man}()}==1 \ldots \text { main } \ldots
\]
\( m \operatorname{ain}() \)",306,"from Karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
    turn_right()
    move()
    turn_left()
    move()


# This function returns to Karel's starting point
def go_back():
    for i in range(2):
        for i in range(3):
            move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",45,"from Karel.stanfordkarel import *

# This program makes Karel pick up
# a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
    turn_right()
    move()
    turn_left()
    move()


# this function return to Karel's starting point
def go_back():
    for i in range(2):
        for i in range(3):
            move()

    def turn_right():
        for i in range(3):
            turn_left()


if __name__ == ""__main__"":
    main()
",71,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_to_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_to_beeper():
    for i in range(2):
        move()
    turn_right()
    move()
    turn_left()
    move()


# This function returns to Karel's starting point
def go_back():
    for i in range(2):
        for i in range(3):
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",67
"def main():
    # input
    my_word = input(""Enter the original word: "")

    # function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is"" + "" "" + '""' + reversed_word + '""')


# Helper function
def reverse(word):
    # reversed_word
    new_word = """"
    # char by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word


if __name__ == ""__main__"":
    main()
",0.6,"def main ()
#imput
my _ word = imput(""Entlo- The original wood: 7)
#Function calling
reversed word = reverse (my-word)
Print ('The
reversed wood is 1+`
#Helper FunctTION
def
Lif
reverse (woord):
#reversed -won-d
mew-won-d=""/
☆ ster by chan-
for chan- im word:
new-woo-d
return
return new_wond
mame
main()
A/
+revered_word +
=char + new-wood",210,"def main():
    # input
    my_word = input(""Enter- The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)


# Helper Function
def reverse(word):
    # reversed_word
    new_word = """"
    # iter by char
    for char in word:
        new_word = char + new_word
    return new_word


# name
main()
",63,"def main():
    # input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is "" + reversed_word)


# Helper Function
def reverse(word):
    # reversed word
    new_word = """"
    # step by char
    for char in word:
        new_word = char + new_word
    return new_word


main()
",70,"def main():
    # input
    my_word = input(""Enter the original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is "" + reversed_word)


# Helper Function
def reverse(word):
    # reversed word
    new_word = """"
    # step by char
    for char in word:
        new_word = char + new_word
    return new_word


main()
",69,"def main () :
# imput
my wond = inpuTC ""Enter THe original wond:
7)
#
Function calling
reversed_word = reverse (my - -word )
print C' the reversed Wood is + , + "" , + reversd-wordt 1/2)
# Helpen Function
def reverse (wond) :
# revenued -wond
new -wohd - = "" ""
# stert by chan-
for chan- in word :
new-word = Char + new-word
# retun-m
retuntm new_wond
if
name == main :
mainc)",150,"def main():
    # input
    my_word = input(""Enter the original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is "" + reversed_word)


# Helper Function
def reverse(word):
    # reversed-word
    new_word = """"
    # start by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word


if __name__ == ""__main__"":
    main()
",24,"def main():
    # input
    my_word = input(""Enter The original word: "")

    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "", reversed_word)


# Helper Function
def reverse(word):
    # reversed-word
    new_word = """"
    # start by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word


if __name__ == ""__main__"":
    main()
",26,"def main():
    # input
    my_word = input(""Enter the original word: "")

    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "", reversed_word)


# Helper Function
def reverse(word):
    # reversed_word
    new_word = """"

    # start by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word


if __name__ == ""__main__"":
    main()
",25,"def main ( ) :
Limput
my _ word = input( Enten- The original word : 7
#Function calling
reversed- word = reverse (my-word )
Print ( the reversed word is (+) ""+""""+reversed-wordt""}
# Helpen- Function
def sevense
be (word) :
# reversed - word
mew-word = """"
A chen by chan-
For- chan- in word:
new-word = Char + new-word
# return
return new_word
name-
main 1 :
main ()",149,"def main():
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)


# Helper Function
def reverse(word):
    # reversed - word
    new_word = """"
    # char by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word


if __name__ == ""__main__"":
    main()
",36,"def main():
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)


# Helper Function
def reverse(word):
    # reversed - word
    new_word = """"
    # A char by char
    for char in word:
        new_word = char + new_word
    return new_word


if __name__ == ""__main__"":
    main()
",51,"def main():
    my_word = input(""Enter the original word: "")
    # Function calling
    def reverse(word):
        new_word = """"
        # char by char
        for char in word:
            new_word = char + new_word
        return new_word

    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)


if __name__ == ""__main__"":
    main()
",202,"defmaim ():
\&imput
\( m y \)-wond = impuT (""EnTen- THe onigimal wond: "")
Function calling
\# Helpen-Fumction
\[
\begin{array}{l}
\text { def nevense (won-d): } \\
\text { * revensed -won-d } \\
\text { mew-won-d = ""1 } \\
\text { X stent by chan- } \\
\text { for chan- im vond: } \\
\text { mew-won-d = chan }+ \text { mew-wond } \\
\text { * } r \text {-etun-m } \\
\text { nietuntm new-won-d } \\
\end{array}
\]",298,"def main():
    my_word = input(""Enter the original word: "")
    # Function calling
    # Helper Function
    def reverse(word):
        reversed_word = """"
        for char in word:
            reversed_word = char + reversed_word
        return reversed_word
",224,"def main():
    my_word = input(""Enter the original word: "")
    # Function calling
    # Helper Function


def reverse(word):
    reversed_word = """"
    for char in word:
        reversed_word = char + reversed_word
    return reversed_word
",220,"def main():
    my_word = input(""Enter the original word: "")
    # Function calling
    reverse(my_word)


# Helper Function
def reverse(word):
    reversed_word = """"
    for char in word:
        reversed_word = char + reversed_word
    return reversed_word
",199
"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial for "" + str(input_nmb) + "" is "" + str(result))
",0.6,"impur-number =
int(impur (""Enter number'))
val = inpur-number
result isput_number
while (val > 1):
Val - 1
result ☆ val
+
Print ('factorial for 't shy (input-node]
+ srr (result))
val
[₁
-result",80,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val -= 1
    result *= val

print(""factorial for "" + str(input_number) + "" is "" + str(result))
",21,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val -= 1
    result *= val

print(""factorial for "" + str(input_number) + "" is "" + str(result))
",21,"input_number = int(input(""Enter number: ""))
val = input_number
result = input_number
while val > 1:
    val -= 1
    result *= val
print(""factorial for "" + str(input_number) + "" is "" + str(result))
",22,"impur-number =
inr(inpur ('Enter number')
val = inpur-number
result input-number
while (val > 1) :
[
val =
Val - 1
result = result it val
Print ('factorial fir't shr(imput-nula)
Srr (result))",59,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial for"", str(input_number), str(result))
",16,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial for"", str(input_number), str(result))
",16,"input_number = int(input(""Enter number: ""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""Factorial for"", str(input_number), ""is"", str(result))
",15,"inpur_number =
int(impur (""Enter number""
Val = inpur-number
result = input-number
While (val>1):
val =
val -1
result = result & val
print ('factorial f& + sur(input-node)
+ spr (result))",50,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial of "" + str(input_number) + "" is "" + str(result))
",5,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial of "" + str(input_number) + "" is "" + str(result))
",5,"input_number = int(input(""Enter number: ""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial of "" + str(input_number) + "" is "" + str(result))
",7,\( \begin{array}{l}\text { inpur-number = } \\ \text { inr(inpur('Entar number')) } \\ \text { val }=\text { impur-number } \\ \text { resalt - roppur-number } \\ \text { while (val }>1 \text { ): } \\ {\left[\begin{array}{c}\text { val }= \\ \text { result }=\text { result }-1 \\ \text { val }\end{array}\right.} \\ \text { pront ('factobial for' + shr(impat-nob) } \\ +\operatorname{srr}(\text { result })) \\\end{array} \),273,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = result = result - 1
print(""factorial for"" + str(input_number) + str(result))
",28,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial for "" + str(input_number) + "" is "" + str(result))
",3,":
input_number = int(input('Enter number')) 
val = input_number  
result = input_number  
while (val > 1): 
    val = val - 1  
    result = result * val  
print ('factorial for ' + str(input_number) + ' is ' + str(result))
",24
"def main():
    num = input(""input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",0.6,"def main ():
num = input (""imput :"")
sum
=
O
for nin num =
sum t
print (sum)
=
int (n)",49,"def main():
    num = input(""input :"")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
    return sum
",17,"def main():
    num = input(""input :"")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",2,"def main():
    num = input(""Input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main () :
num = input (""Input: "")
sum = 0
for n in num i
sum + = int (n)
print (sum)",33,"def main():
    num = input(""Input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main():
    num = input(""Input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main():
    num = input(""Input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main () :
num = input (""Input : "")
sum = 0
for n in num :
sum + = int (n)
print (sum)",34,"def main():
    num = input(""Input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main():
    num = input(""Input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main():
    num = input(""Input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def \( \operatorname{main}(C) \) :
\[
\begin{array}{l}
\text { num }=\text { input (""input: "") } \\
\text { sum }=0
\end{array}
\]
for \( n \) in num:
\[
\operatorname{sum} t=\operatorname{int}(n)
\]
print (sum)",132,"def main(C):
    num = input(""input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main(C):
    num = input(""input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main(C):
    num = input(""input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1
"def main():
    num = input(""enter the number you want to add"")
    sum = 0
    for i in str(num):
        sum = sum + int(i)
    print(""sum of the value you entered is"", sum)
",0.6,"def main (s.
()!
61508x08 09
0818 TU O sloj toč
num= Impot (""enter the number you want to add)
поше
Inpri
som = 0 101
zgnivoe nuovesimixam
=0
(AD) tizoged to stopilitie nod ovoseido gnieod
aliotab ort eromeH ab10001 100 ot ti of no blert ezabelą - moosoo ucy to noilomitnoo ei tohol zid
for i in str(num): com
35100 suzel
8181882405
Sum=somt int (i)
edmult inucA
telti tuossA
""mis
Print (""sum of the value you entered is, son)
HILOM
00.000,82
log
alpä yliutoM
noitq Inomseudaid 12915ml
ASOS SS VOM
noitosilofigo inayo?
LF1",375,"def main():
    num = input(""enter the number you want to add"")
    sum = 0
    for i in str(num):
        sum = sum + int(i)
    print(""sum of the value you entered is"", sum)
",0,":
def main():
    num= input(""enter the number you want to add"")
    sum = 0
    for i in str(num):
        sum = sum + int(i)
    print(""sum of the value you entered is"", sum)
",3,"def main():
    num = input(""Enter the number you want to add: "")
    sum = 0
    for i in str(num):
        sum += int(i)
    print(""Sum of the value you entered is: "", sum)


main()
",22,"SINOE
808
09
def main(s)
num= Imput (""enter the number you want to odd"")
UOV
Sum = 0
estimixom
(I)
tizoqeC
to
stooilities
@dno8
covocaiC
o
UOV
Andri
alinteb
310
enelt
ab10007
no
blort
mov
to
for i in str(mum);ass YDM
hedmuff
Sum-Sumt int (i)
reltiT
00.000,E8
Print (""sum of the Value you entered is, blan sum)
ASOS SS VDM
virutoM
noitosilation
;hoita
LA",227,".python
def main():
    num = input(""Enter the number you want to add"")
    Sum = 0
    for i in str(num):
        Sum = Sum + int(i)
    print(""Sum of the values you entered is"", Sum)

main()
",23,"def main():
    num = input(""enter the number you want to add"")
    Sum = 0
    for i in str(num):
        Sum = Sum + int(i)
    print(""sum of the Value you entered is"", Sum)
    return
",16,"def main():
    num = input(""Enter the number you want to add: "")
    sum = 0
    for i in str(num):
        sum += int(i)
    print(""Sum of the values you entered is: "", sum)


main()
",23,"def main () .
08168 TU
11
num = input (""enter the number you want to add )
Som=0
zpnivo
1ovoseidl o prieoorla
hotel
heH
ab
ot ti of no blerl gabelq
for è in str (num) :
Vi inucoDA
Sum = Sum+ int (i)
raltil touo >A
Print (""sum of the value you entered in, som)
00.000
.1
noitosil
noitgo Inemoanu
LFT",154,"def main():
    num = input(""Enter the number you want to add: "")
    Sum = 0
    for i in str(num):
        Sum = Sum + int(i)
    print(""Sum of the values you entered is"", Sum)
",9,"def main():
    num = input(""Enter the number you want to add: "")
    Sum = 0
    for i in str(num):
        Sum = Sum + int(i)
    print(""Sum of the value you entered is: "", Sum)
    return
",21,"def main():
    num = input(""Enter the number you want to add: "")
    Sum = 0
    for i in str(num):
        Sum = Sum + int(i)
    print(""Sum of the values you entered is:"", Sum)
",10,"def main () :
num = Imput (""enter the number youcust to add"")
\[
\text { sum }=0
\]
for i in Mtr(num):
\[
\text { sum }=\operatorname{sum}+\operatorname{int}(i)
\]
Print (""sum or the valee yor entered is"", sum)",79,"def main():
    num = Input(""enter the number you want to add"")
    sum = 0
    for i in str(num):
        sum = sum + int(i)
    print(""sum of the value you entered is"", sum)
",1,"def main():
    num = input(""enter the number you want to add"")
    sum = 0
    for i in str(num):
        sum = sum + int(i)
    print(""sum of the values you entered is"", sum)
",1,"def main():
    num = input(""Enter the number you want to add: "")
    sum = 0
    for i in str(num):
        sum = sum + int(i)
    print(""The sum of the values you entered is: "", sum)
",10
"user_input = input(""Write your string here: "")
upper = user_input.upper()
print(upper)
",0.6,"input = imput ( ""write your string
user_ input. upper (1
user_
upper = user_ input
print (upper)
here: "")",50,"user_input = input(""write your string here: "")
user_upper = user_input.upper()
print(user_upper)
",11,"user_input = input(""write your string here: "")
user_upper = user_input.upper()
print(user_upper)
",11,"user_input = input(""Write your string here: "")
upper = user_input.upper()
print(upper)
",0,"user_input = input(""write your string here:
1)
upper = user_input. upper(1
print (upper)",7,"user_input = input(""write your string here:"")
upper = user_input.upper()
print(upper)
",2,"user_input = input(""write your string here: "")
upper = user_input.upper()
print(upper)
",1,"user_input = input(""write your string here: "")
upper = user_input.upper()
print(upper)
",1,"user-input = input(""write your string here:
11
Upper = user_input. upper()
print (upper)",9,"user_input = input(""write your string here: "")
Upper = user_input.upper()
print(Upper)
",3,"user_input = input(""write your string here: "")
Upper = user_input.upper()
print(Upper)
",3,"user_input = input(""write your string here: "")
Upper = user_input.upper()
print(Upper)
",3,"user-input = imput (""write your string here: "") upper \( = \) user input upper ( ) print (upper)",18,"user_input = input(""write your string here: "")
upper = user_input.upper()
print(upper)
",1,"user_input = input(""write your string here: "")
upper = user_input.upper()
print(upper)
",1,"user_input = input(""write your string here: "")
upper = user_input.upper()
print(upper)
",1
"from karel.stanfordkarel import *

""""""
Karel should fill the whole world with beepers.
""""""


def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",0.6,"*
from Karel, starfordkarel import
han
kanel should fill the world with beepers.
1100
def main ():
#decomposition using a
function
#each associated
while left_ is_clear():
fill_one_row()
return_to_row_start()
activity
паме
for
move_up()
#rewrite code after white loop to overcome
# fencepost bug
one-how ()
fill_",121,".python
from karel.stanfordkarel import *

# Karel should fill the world with beepers.
def main():
    # Decomposition using a function
    # Each associated
    while left_is_clear():
        fill_one_row()
        return_to_row_start()

    # Activity name
    for move_up in range(100):
        # Rewrite code after while loop to overcome
        # Fencepost bug
        one_row()
        fill_row()
",112,"
from karel.stanfordkarel import *

# Karel should fill the world with beepers.
# 1100

def main():
    # Decomposition using a function
    # Each associated
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
    # Activity name
    for move_up():
        # Rewrite code after while loop to overcome
        # Fencepost bug
        one_row()
        fill_row()
",92,"from karel.stanfordkarel import *

# Karel should fill the world with beepers.
def main():
    # Decomposition using a function
    # Each associated
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # Rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()


# Assuming the functions fill_one_row(), return_to_row_start(), and move_up() are defined somewhere else in your program.
",161,"from karel. stanfordkarel import
will
karel should fill the world with beepers.
1110
def main() :
# decomposition using a function name for
# each associated activity
while left_is-clean
retur_to_row- start()
fill_one-row()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill - one - -row()",105,"from karel.stanfordkarel import *

# karel should fill the world with beepers.
def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clean:
        return_to_row_start()
        fill_one_row()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",50,"from karel.stanfordkarel import *

# Karel should fill the world with beepers.
def main():
    # Decomposition using a function name for
    # each associated activity
    while left_is_clear():
        return_to_row_start()
        fill_one_row()
        move_up()
    # Rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",48,"from karel.stanfordkarel import *

# Karel should fill the world with beepers.
def main():
    # Decomposition using a function name for each associated activity
    while left_is_clear():
        return_to_row_start()
        fill_one_row()
        move_up()
    # Rewrite code after while loop to overcome fencepost bug
    fill_one_row()
",60,"from Karel. stanfordkarel import *
hun
Karel should fill the world with keepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()",79,"from karel.stanfordkarel import *

# Karel should fill the world with beepers.


def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",14,".python
from karel.stanfordkarel import *

# Karel should fill the world with beepers.
def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",24,"from karel.stanfordkarel import *

# Karel should fill the world with beepers.
def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",16,"from karel.stayfordkarel inport
IIII""
karel should fill the world with beepers.
""u u
\( \operatorname{def} \operatorname{main}() \) :
\# decomposition using a function rave for \# each associated activity while left-is_clear ():
fill-ore-row()
retur _to _ row_start \( ( \) )
nove_up ()
\# rewirite code after white loop to overcone \# fencepost bug
fill_one-row()",118,"from karel.stanfordkarel import *

""""""
karel should fill the world with beepers.
""""""


def main():
    # decomposition using a function rave for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after white loop to overcome
    # fencepost bug
    fill_one_row()
",10,"from karel.stanfordkarel import *

""""""
karel should fill the world with beepers.
""""""


def main():
    # decomposition using a function rave for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after white loop to overcome
    # fencepost bug
    fill_one_row()
",10,"from karel.stanfordkarel import *

""""""
karel should fill the world with beepers.
""""""


def main():
    # decomposition using a function rave for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",9
"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0.6,"if
from karel.stanfordkarel import*
def main ()
move()
move()
turn_right()
move()
turn_left()
move()
-
pick-beeper()
return-home()
def return home()
turn-around()
move()
turn_right()
move ()
turn_left()
movel)
move()
turn_around ()
def turn_right()
for i in range (3):
turn-left()
def turn around ()
for i in range (2):
turn_left()
name.
main()
^_main_",144,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stamfordkaral import
def main()
move()
move()
turn-right(
move()
turn-left()
move()
pick. beeper()
return-home()
def return_home()
t#urn_around()
move()
turn_right(?
move ()
turn- left()
movel)
move()
turn_around()
def turn-right()
for i in range (3):
turn- left()
def turn. around ()
for i in range (2):
turn-left()
if name - main' :
mainl",146,"from karel.stamfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",12,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stamfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",1,"from karel. stanfordkarel import*
det main ()
move()
move()
turn-right ()
move()
turn-left()
move()
pick-beeper()
return-home()
def return_home()
turn-around()
move()
turn-right ()
move ()
turn-left ()
move()
move()
turn-around()
det turn-right()
for i in range (3):
turn-left ()
def turn- around()
for i in range (2):
turn-left ()
if
name
== '_main ' :
main()",144,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel. stanfordkarel import *
def main ()
move ()
move()
turn-right ()
move ()
turn-leff()
move ()
pick-beeper ()
return-home()
def return_home()
trurn_around()
move ()
turn_right()
move ()
turn_left ()
movel)
move ()
turn_around ()
def turn-right ()
for \( i \) in range (3):
turn-left ()
def turn around()
for \( i \) in range (2):
turn-left \( ( \) )
if \( \operatorname{mame}_{-\operatorname{main}()}== \) __main', :",193,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0
"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]

    input_string = input(""Enter the string: "")
    input_string = input_string.lower()

    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1

    print(vowel_count)


if __name__ == ""__main__"":
    main()
",0.6,"def main ():
rauel caunl=0
vawels = ['a', 'e', 'i', '0', 'u']
""input-string = ""input (""Enter the string:"")
impret string = ""impret_string= lawer ()
for chaor in `imput string:
for vauvel in vamels:
if char = = vowel:
vauvel_cament + = 1
point (vowel count)
`__main_
y__name__ =
main ()
INN
':",148,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",4,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",4,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",4,"dy main ():
vawel_count==0
vawels ['a' 'e' ii, 'o', 'u' ]
input- string= input (""Enter the striegn""."")
input string. lower()
for char in input string:
for vawel 'en vawels:
if char== vowel:
valuel-calest += 1
point (newel count)
if name main__':
main()",146,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string: "")
    input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",18,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string: "")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",3,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string: "")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",3,"de main () :
vowel-count=0
vowels= ['à','e', 'i', 'o','u']
input_string = input (""Enter the string:"")
input string = input_string . lower ()
for char in input string:
for vowel in vowels :
if char == vawel:
vowel-count +=1
print (nouvel count)
if _name_ = = '_main _- ':
main ()",115,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",4,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",4,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",4,"de main ():
vouel caunt \( =0 \)
input_string = input (""Enter the string:"")
input_string = inpet_string. lawer()
for choor in input string:
for vauel 'en vauch:
if char = = vouel:
valuel-caunt \( +=1 \)
print (veuel caunt)
\[
\begin{array}{l}
\text { if _-name__ }==\text { '_ main_- } \\
\operatorname{main}() \\
\end{array}
\]",210,"def main():
    vowel_count = 0
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in ""aeiou"":
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",50,"def main():
    vowel_count = 0
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in ""aeiou"":
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",50,"def main():
    vowel_count = 0
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in ""aeiou"":
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",50
"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])
",0.6,"def main ():
string = str (input ('Enter string: '))
for i in range
print (string[i])
((len(string)-1),-1,-1):
لك
TO
AYS",60,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
    return
",13,"our
priud
- "") abuse u! ! way
(5, : bureys capul, ) produc) eys = burays
:
()unow top",104,"
for proud in ""I abuse you! ! way"":
    (s, : bureys_capul, ) = proud
    eys = bureys

unow_top()

return code
",105,"
for proud in ""I abuse you! ! way"":
    (s, : bureys, capul, ) = proud
    eyes = bureys

    know_top()

return
",105,"I'm sorry, but the provided code is too unclear and fragmented to be corrected. Please provide a clearer version or describe the functionality you want to achieve so I can help you better.",153,"det
main ():
string = str (input ('Enter string: '))
for i in range ((len (string)-1), - 1 ,- 1).
print (string [i])",34,"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])
",0,"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])
",0,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2,"def \( \operatorname{main}( \) ):
\[
\text { string }=\operatorname{str}(\text { input ('Enter string: IJ) }
\]
for \( i \) in range \( (( \) len(string \( )-1),-1,-1) \) : print (string \( [i] \) )",102,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2
"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []


# It check every element in list(sequence) --
for i in seq:
    # It decides whether an element from sequence is even ---
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list(seq_even)

print(seq_even)
",0.6,"seq - [1, 2, 3, 4, 5, 6, 7, 8, 9]
seg - even = []
#It checks every element in dist (sequence)--
for i in seq:
#it decides whether an element from sequence is even ---
if i % 2 == 0:
seq-even. append(i) #appends even i in empty list (seq-even)
print (seq-even)",40,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = []
# It checks every element in seq (sequence)--
for i in seq:
    # it decides whether an element from sequence is even ---
    if i % 2 == 0:
        even.append(i)  # appends even i in empty list (even)
print(even)
",27,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in seq (sequence)--
for i in seq:
    # it decides whether an element from sequence is even ---
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list (seq_even)
print(seq_even)
",11,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in seq (sequence)
for i in seq:
    # it decides whether an element from sequence is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list (seq_even)
print(seq_even)
",17,"seq = [1, 2, 3, 4, 5 , 6, 7, 8, ]
seg even = [ ]
# It checks every element in list (sequence)
for i in seq:
# it decides whether an element from sequence is even
if i % 2 == O:
seq-even. append (i) # appends even i in empty list (seq-even)
print (seq-even)",44,"seq = [
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
]
seq_even = []
# It checks every element in list (sequence)
for i in seq:
    # it decides whether an element from sequence is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list (seq_even)
print(seq_even)
",49,"seq = [
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
]
seq_even = []
# It checks every element in list (sequence)
for i in seq:
    # it decides whether an element from sequence is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list (seq_even)
print(seq_even)
",49,"seq = [1, 2, 3, 4, 5, 6, 7, 8]
seq_even = []
# It checks every element in list (sequence)
for i in seq:
    # it decides whether an element from sequence is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list (seq_even)
print(seq_even)
",17,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9]
Seg-even=[]
# It checks every element in list (sequence) - --
for i in seg:
# it decides whether an element from sequence is even --.
if i % 2 = = 0:
seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)",46,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in list (sequence) - --
for i in seq:
    # it decides whether an element from sequence is even --.
    if i % 2 == 0:
        seq_even.append(i)  # appends even ; in empty list (seq_even)
print(seq_even)
",11,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in list (sequence)
for i in seq:
    # it decides whether an element from sequence is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even ; in empty list (seq_even)
print(seq_even)
",15,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in list (sequence)
for i in seq:
    # it decides whether an element from sequence is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even number in empty list (seq_even)
print(seq_even)
",20,"\[
\begin{array}{l}
\text { seq }=[1,2,3,4,5,6,7,8,9] \\
\text { seq-even }=[]
\end{array}
\]
\# It checks every element in dist(sequence.).for \( i \) in seq:
\# it decides whether an clement from sequence is even -.. if \( i \% 2==0 \) :
seq-even. append ( \( i \) ) \# appends even \( i \) in empty list (seq-even) print (seq-even)",127,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in list (sequence).
for i in seq:
    # it decides whether an element from sequence is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list (seq_even)
print(seq_even)
",14,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in sequence.
for i in seq:
    # it decides whether an element from sequence is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list seq_even
print(seq_even)
",20,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []

for i in seq:
    if i % 2 == 0:
        seq_even.append(i)

print(seq_even)
",151
"from graphics import Canvas

CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01

def main:
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    

    while TRUE

        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        
        if mouse_x >= 0 and mouse_x <= CANVAS_WIDTH and mouse_y >=0 and mouse_y <= CANVAS_HEIGHT",0.6,"from
FROM GRAPHICS IMPORT CANVAS
CANVAS_WIDTH = 300
CANVAS-HEIGHT = 300
CIRCLE_SIZE =
DELAY = 0,01
= 20
DEF MAIN:
CANVAS = CANVAS ( CANVAS WIDTH, CANVAS HEIGHT
WHILE TRUE
MOVSE_X = CANVAS. GET_MOUSE_x()
MOUSE-Y = CANVAS. GET MOUSE_Y()
TE
1
IF MOUSE X >= 0 AND MOUSE X E CANVAS_WIDTH
AND MOUSELY TO AND MOUSE_YE CANVAS. HEIGH",203,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x <= canvas_width
            and mouse_y >= 0
            and mouse_y <= canvas_height
        ):
            pass
",170,"from graphics import Canvas

CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01


def main():
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    while True:
        MOUSE_X = canvas.get_mouse_x()
        MOUSE_Y = canvas.get_mouse_y()
        if (
            MOUSE_X >= 0
            and MOUSE_X <= CANVAS_WIDTH
            and MOUSE_Y >= 0
            and MOUSE_Y <= CANVAS_HEIGHT
        ):
            pass
",122,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if 0 <= mouse_x <= canvas_width and 0 <= mouse_y <= canvas_height:
            pass
",142,"FROM GRAPHICS IMPORT CANVAS
CANVAS_WIDTH 11 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0,01
DEF MAIN :
CANVAS = CANVAS(CANVAS WIDTH, CANVAS HEC 641)
WHILE TRUE
MOVSE -X = CANVAS. 6ET MOUSE x()
MOV. SE- - Y = CANVAS. GET MOUSE ( ) )
If MOUSE_ x > = U AND MOUSE x t CANUAS_WIDTH
AND NOUSE. -Y >=0 AND MOUSE_YE CANUVAS.HEIGH",199,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x <= canvas_width
            and mouse_y >= 0
            and mouse_y <= canvas_height
        ):
            continue
",174,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x <= canvas_width
            and mouse_y >= 0
            and mouse_y <= canvas_height
        ):
            pass
",170,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x <= canvas_width
            and mouse_y >= 0
            and mouse_y <= canvas_height
        ):
            pass  # add your code here


main()
",201,"FROM GRAPHICS IMPORT CANVAS
CANVAS_WIDTH = 300
CANVAS_ HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0,01
DEF MAIN :
CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH)
WHILE TRUE
MOUSE_ X = CANVAS . GET_MOUSE _ X ()
MOUSE- Y = CANVAS . GET MOUSE_ Y ( )
IF MOUSE XT =U AND MOUSE X E CANVAS_WIDTH
AND MOUSELY SEO AND MOUSE-TE CANVAS HEIGH",205,"from graphics import Canvas

CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01


def main():
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    while True:
        MOUSE_X = canvas.get_mouse_x()
        MOUSE_Y = canvas.get_mouse_y()
        if (
            MOUSE_X >= 0
            and MOUSE_X <= CANVAS_WIDTH
            and MOUSE_Y >= 0
            and MOUSE_Y <= CANVAS_HEIGHT
        ):
            pass
",122,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x <= canvas_width
            and mouse_y >= 0
            and mouse_y <= canvas_height
        ):
            pass
",170,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x <= canvas_width
            and mouse_y >= 0
            and mouse_y <= canvas_height
        ):
            continue
",174,"FRIM GRAPHICS I MPORT CANVAS
\[
\begin{array}{l}
\text { CANVAS_WIDTH }=300 \\
\text { CANVAS_HEl6HT }=300 \\
\text { CIRCLE_SIZE }=20 \\
\text { DELAY = } 0,01
\end{array}
\]
DEF MAIN :
canvas = Canvas ( canvar_ wi DFH, canvas Hec b HT)
WHILE TRUE
\[
\begin{array}{l}
\text { MOVSE-X = CONVAS. GET_MOUSE_X() } \\
\text { MOVSE-Y = CANVAS. GET MOUSE_Y () }
\end{array}
\]
If MOUSE_X \( X=0 \) AND MOUSE_X \( E \) CANUNS_WIOT4 AND NOUSE_Y \( T=0 \) AND MOUSE_YE CH, USS. HEIG",321,"
FROM GRAPHICS IMPORT CANVAS
CANVAS_WIDTH = 300 
CANVAS_HEIGHT = 300 
CIRCLE_SIZE = 20 
DELAY = 0.01

def main():
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    while True:
        MOUSE_X = CANVAS.GET_MOUSE_X() 
        MOUSE_Y = CANVAS.GET_MOUSE_Y()
        if MOUSE_X >= 0 and MOUSE_X <= CANVAS_WIDTH and MOUSE_Y >= 0 and MOUSE_Y <= CANVAS_HEIGHT:
            pass
",136,"from graphics import Canvas

CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01


def main():
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)

    while True:
        MOUSE_X = canvas.get_mouse_x()
        MOUSE_Y = canvas.get_mouse_y()

        if (
            MOUSE_X >= 0
            and MOUSE_X <= CANVAS_WIDTH
            and MOUSE_Y >= 0
            and MOUSE_Y <= CANVAS_HEIGHT
        ):
            pass
",122,"from graphics import Canvas

CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01


def main():
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    while True:
        MOUSE_X = canvas.get_mouse_x()
        MOUSE_Y = canvas.get_mouse_y()
        if (
            MOUSE_X >= 0
            and MOUSE_X <= CANVAS_WIDTH
            and MOUSE_Y >= 0
            and MOUSE_Y <= CANVAS_HEIGHT
        ):
            pass
",122
"# 1 karel Problem - karel Home

from karel.stanfordkarel import *

# This program defines a main function which should make Karel
# move to the beeper, pick it up and return home.
def main():
    get_out()
    pick_food()
    get_back_home()


# pre : karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",0.6,"#1 Karel Problem - Karel home
from Kard Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it and return home.
up
def main ():
GRE_ONE ()
pick-food ()
get back home u
#pre: Karel facing eask, at the corner of starting position.
# posk: Karel facing east, outside the home, at the position of beeper
def get out ():
turn_right()
Move (
turn_left()
Move ()
Move ()
move()
# post
· Karel facing west, at
def pick-food ():
pick beeper ()
turn around ()
#post: Karel facing east, at the corner of starting position
def get back home ():
move ()
Move ()
move()
turn_right()
move ()
turn right (1
def turn right ():
for i in range (3)
turn_left()
def turn around ():
turn_left()
zurn_left()
the position of beeper
if_name__ == '__main_ ' :
main ()",229,"# 1 Karel Problem - Karel home
from Stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it and return home.


def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position.
# post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",23,"# Karel Problem - Karel home
from stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it and return home.


def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position.
# post: Karel facing west, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",96,"# 1 Karel Problem - Karel home
from stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it and return home.


def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position.
# post: Karel facing west, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",94,"# 1 karel Problem - Karel home
from Karel stanfordkarel import
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main ():
get-one(?
pick_food ()
get_back home ()
# pre : Karel facing east, at Line corner of starting position
# post ! karel facing east, outside the home, at the position of beeper
def get out ()
turn_ right
move ()
turn left ()
move ()
move
move
# post Karel facing west at the position of beeper
10°M
def pick-food () :
beeper ()
turn_ around()
# post: Karel facing east, at the corner of starting position
def get- back home () :
move ()
move
move ()
turn_right ( )
move ()
turn
right ()
def turn right ( )
for i in range (3) :
turn_left
def turn_ around () :
turn_ left ()
turn_ left ()
if name- == '-main-':
main ()",202,"# 1 karel Problem - Karel home
from stanfordkarel import Karel

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre : Karel facing east, at Line corner of starting position
# post : karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west at the position of beeper


def pick_food():
    beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",31,"# 1 karel Problem - Karel home
from stanfordkarel import Karel

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre : Karel facing east, at Line corner of starting position
# post : karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west at the position of beeper


def pick_food():
    beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",31,"# Karel Problem - Karel home
from stanfordkarel import Karel

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre : Karel facing east, at Line corner of starting position
# post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",27,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import*
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre: Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ()
move ()
turn_ left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn-around ( )
# post: Karel facing east, at the corner of starting position
def get_back_home () :
move ()
Move ()
move ()
turn right ()
move ( )
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == - main -:
main ()",179,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",9,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",9,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",9,"\#1 karel Problem-karel home from karel. Stanfordkarel impork *
\# This program defines a main function which should make karel \# move to the beeper, pick it up and return home
def \( \operatorname{main}() \) :
get_oute \( ( \) )
pick-food ()
get_back_home \( U \)
\# pre: Karel facing eask, at the corner of stomeng position
\# posk: Karel facing east, oukside the home, at the position of beeper
def get_out () :
turn_right ()
move?
turn_left ()
move ()
move ()
move ()
\# post : Karel facing west, at the position of beeper
def pick-food () :
pick_beeper ()
turn_around ()
\# post: karel fring east, at the corner of stonting position def get_back_home ():
move ()
move ()
move ()
turn_right ()
move ()
turn right ( )
def turn right () :
for \( i \) in range (3) :
turn_left ()
def turn around ():
turn_left ()
turn_kft()
if _ name_ \( == \) - main - '
main ()",223,"# 1 karel Problem-karel home
from karel.stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position
# post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post : Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",11,"# 1 karel Problem-karel home
from karel.stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position
# post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post : Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",11,"# Karel Problem - Karel home
from karel.stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position
# post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",12
"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0.6,"def factorial (n):
if n == 0:
return 1
else:
return n* factorial (n-1)
print (factorial (5))",34,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n)
if n==
O:
return 1
else :
return n
factorial (n-1) -
print (factorial(5))",39,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial (n) :
if n=0 :
return 1
else:
return 1 * factorial (n-1)
print (factorial (5)",39,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial \( (n) \) :
if \( n==0 \) :
return 1
else:
return \( n \) * factorial \( (n-1) \)
print (factorial \( (5)) \)",56,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0
"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    list = []

    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                list.append(elem)
    print(list)
",0.6,"det main 1:
List 1 2 (1,2,3,4]
List 2 = (3,4,5,67
List = []
for elem 1 in list 1 1
for elem2 în list 2:
it olem2 = = elem 2:
elem = elem 2
(N46)
print (list)
list-append (etem)
Livor",118,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    list = []
    for elem1 in list1:
        for elem2 in list2:
            if elem2 == elem1:
                elem = elem2
                print(list)
                list.append(elem)
    return list
",40,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    list3 = []
    for elem1 in list1:
        for elem2 in list2:
            if elem2 == elem1:
                elem = elem2
                print(list3)
                list3.append(elem)
    return list3
",43,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6, 7]
    list3 = []

    for elem1 in list1:
        for elem2 in list2:
            if elem2 == elem1:
                list3.append(elem2)

    print(list3)
    return list3
",52,"det main O
list 1 2 (1,2,3,4)
list 2 2 (3,4,5,67
List = 17
for elem1 in list 1 :
for elem2 in list2:
it elem1 == elem2:
elem = elem7
list-append (eum)
print (list)",103,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)

    return
",16,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6, 7]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)


main()
",16,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6, 7]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)


main()
",16,"det main () :
list 1 2 [1, 2,3,4]
list 2 =
(3,4,5,6)
List = []
for elem1 in list 1?
for eleme in list2:
it elem1 = = elem2?
elem = elem 2
list- append (elem)
print (ist)",101,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem2
                List.append(elem)
    print(List)

    return
",17,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem2
                List.append(elem)
    print(List)
",5,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                List.append(elem2)
    print(List)


main()
",43,"det \( \operatorname{man}(1) \) :
\[
\begin{array}{l}
\text { list } 1=[1,2,3,4] \\
\text { list } 2=[3,4,5,6] \\
\text { List }=[7] \text { in list } 11 \\
\text { for elem } 1
\end{array}
\]
for elem2 in list2:
it \( \operatorname{elem} 2= \) elem2:
elem = elem 2
list-append (eum)
print (ist)",192,":
def man(num):
    list1 = [1,2,3,4]
    list2 = [3,4,5,6]
    List = []
    for elem in list1:
        for elem2 in list2:
            if elem == elem2:
                elem = elem2
                List.append(elem)
    print(List)

",20,"def man():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = [7]
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem2
                List.append(elem)
    print(List)
",7,"def fun_man():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    list = [7]
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                list.append(elem2)
    print(list)
",37
"String = input()
print(String[::-1])
",0.6,"String = input ()
print (String[::-1])",3,"string = input()
print(string[::-1])
",2,"String = input()
print(String[::-1])
",0,"String = input()
print(String[::-1])
",0,"String = input c)
print (String [:
-
-1])",8,"String = input()
print(String[:-1])
",1,"String = input()
print(String[:-1])
",1,"String = input()
print(String[:-1])
",1,"String = input c)
print (String [ ::- 1])",7,"String = input()
print(String[::-1])
",0,"String = input()
print(String[::-1])
",0,"String = input()
print(String[::-1])
",0,\( \begin{array}{l}\text { String }=\text { input } C) \\ \text { print }(\text { String }[::-1])\end{array} \),77,"String = input()
print(String[::-1])
",0,"String = input()
print(String[::-1])
",0,":
string = input()
print(string[::-1])
",4
"from karel.stanfordkarel import *


def main():
    turn_left()
    tower_N()
    tower_S()
    move_4x()
    turn_left()
    tower_N()
    tower_S()


def tower_S():
    turn_3x()
    tower()
    turn_left()


def tower_N():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0.6,"from Karel. Stanford Rund emport
def main ():
turn-
laft
Tower_N()
tower_S()
Move 4x()
Fern-
-left()
tower_N()
-S()
tower
del
de tower -S():
Furn-3x()
tower ()
turn_left()
del tower _N():
Town ()
turn _ 3x()
move 4x()
def tower (13
for i in
range
(5):
if front_is_clear():
Put-baper (1
movel)
else:
def. Jurn - 3×(1:
turn_left()
leftis
turn-
Turn_left()
()
pest-beeper ()
- Move_4x();
move()
move()
movell
move()
name --
__main__."":
main ()
K",267,"from karel.stanford import *


def main():
    turn_left()
    tower_N()
    tower_S()
    move_4x()
    turn_left()
    tower_N()
    tower_S()


def tower_S():
    turn_3x()
    tower()
    turn_left()


def tower_N():
    turn()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper(1)
            move()
        else:
            pass


def turn_3x():
    turn_left()
    turn_left()
    turn_left()
    put_beeper()
    move_4x()
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",41,"from karel.stanford import *


def main():
    turn_left()
    tower_N()
    tower_S()
    move_4x()
    turn_left()
    tower_N()
    tower_S()
    tower()


def tower_S():
    turn_3x()
    tower()
    turn_left()


def tower_N():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper(1)
            move()
        else:
            turn_3x()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def put_beeper():
    pass


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",56,"from karel.stanford import *


def main():
    turn_left()
    tower_N()
    tower_S()
    move_4x()
    turn_left()
    tower_N()
    tower_S()
    tower()


def tower_S():
    turn_3x()
    tower()
    turn_left()


def tower_N():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",56,"from Karel. Stanford Kand import
K
de/ main()
turn-left
tower-NC
tower- sc)
move-4x ( )
turn-lette
tower N()
tower - sc )
de/ tower - s():
turn - 3x()
tower ()
turn - lefter
def tower - NC):
town ()
turn. - 3x()
move 4r ()
def tower ():
for i in range (5) :
if front - clear():
Put-baper (
movel
else:
put. buper()
def turn- 3x(1:
turn- left(1
turn - left
Turn - left ()
del move _4x():
move!!
more!!
movel
move
=='--
if
name
main !)",285,"from Karel.Stanford import Karel


def main():
    turn_left()
    tower_NC()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()


def tower_SC():
    turn_3x()
    tower()
    turn_left()


def tower_NC():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_clear():
            put_beeper()
            move()
        else:
            put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",20,"from karel.stanfordkarel import *


def main():
    turn_left()
    tower_NC()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()


def tower_SC():
    turn_3x()
    tower()
    turn_left()


def tower_NC():
    tower()
    turn_3x()
    move_4r()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",6,"from karel.stanfordkarel import *


def main():
    turn_left()
    tower_NC()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()


def tower_SC():
    turn_3x()
    tower()
    turn_left()


def tower_NC():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",5,"from Karel. Stanford Kad import ""
def main () :
turn - left 11
tower_N()
tower- SC)
move- 4x ( )
turn-left ( )
tower- N()
tower - SC )
del tower - s():
turn - 3x ()
Tower ()
Turn- left ( )
del tower- NC) .
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ):
Put-boper ()
move ()
else:
Put- beeper ()
def.turn- 3x (1:
Turn- left ()
turn - left ()
burn- left ()
def . mere_ 4x();
move ()
move ()
morell
move ()
if -- name __ = = -- main __
main ()",277,"from karel.stanfordkarel import *


def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()
    del tower_s()
    turn_3x()
    Tower()
    turn_left()
    del tower_NC()
    Tower()
    turn_3x()
    move_4x()
    del tower()


for i in range(5):
    if front_is_clear():
        put_beeper()
        move()
    else:
        put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",48,"
from karel.stanfordkarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()
    del tower_s()
    turn_3x()
    Tower()
    turn_left()
    del tower_NC()
    Tower()
    turn_3x()
    move_4x()
    del tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()
    
def move_4x():
    move()
    move()
    move()
    move()

if __name__ == ""__main__"":
    main()
",31,"from stanfordkarel import *


def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()
    turn_3x()
    Tower()
    turn_left()
    tower_NC()
    Tower()
    turn_3x()
    move_4x()
    tower()
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",39,"from Karel. Stanfordkad import *
def max \( (1): \)
\[
\begin{array}{l}
\text { furn - let (1) } \\
\text { fown-N() } \\
\text { tower-S() } \\
\text { move-4x () } \\
\text { furm-lyt ( ) } \\
\text { tower-N( ) } \\
\text { tower-S() } \\
\end{array}
\]
def tower-s() :
\[
\begin{array}{l}
\text { furn - } 3 \times() \\
\text { Tower (1) } \\
\text { turn - laff() }
\end{array}
\]
def tower - N ( ):
town ()
\( \operatorname{tin} \) - \( 3 \times() \)
move_ \( 4 \times() \)
def tower (1):
for \( i \) in rang \( (5) \) :
if front-is-clear () :
move ()
else:
put_buper ()
def. fum \( -3 \times(1) \) :
\[
\begin{array}{l}
\text { turn - blff (1) } \\
\text { turn - bff (1) } \\
\text { turn - beft (1) }
\end{array}
\]
def mere_4r(1):
morel)
\[
\begin{array}{c}
\text { if name - }==^{\prime} \text {. main ... } \\
\text { main () }
\end{array}
\]
main 1)",556,"
from Karel.Stanfordkarel import *
def max():
    turn_left()
    move()
    tower_S()
    move_4x()
    turn_right()
    tower_N()
    tower_S()
def tower_S():
    turn_left()
    for _ in range(3):
        tower(1)
        turn_left()
def tower_N():
    turn()
    for _ in range(3):
        move_4x()
def tower(1):
    for i in range(5):
        if front_is_clear():
            move()
        else:
            put_beeper()
def turn_3_times():
    turn_left()
    turn_left()
    turn_left()
def move_4x():
    move()

if __name__ == ""__main__"":
    main()
",150,"
from Karel.Stanfordkad import *
def max(1):
    turn_left(1)
    turn_down()
    tower_s()
    move_4x()
    turn_right()
    tower_n()
    tower_s()

def tower_s():
    turn_3_times()
    tower(1)
    turn_left()

def tower_n():
    turn()
    turn_3_times()
    move_4_times()

def tower(1):
    for i in range(5):
        if front_is_clear():
            move()
        else:
            put_bumper()

def turn_3_times(1):
    turn_left(1)
    turn_off(1)
    turn_left(1)

def move_4x(1):
    move(1)
    
if __name__ == ""__main__"":
    main()
",129,"from karel.stanfordkarel import *


def main():
    turn_left()
    move()
    tower_S()
    move_4x()
    turn_left()
    tower_N()
    tower_S()


def tower_S():
    for _ in range(3):
        tower_1()
        turn_left()


def tower_N():
    turn()
    for _ in range(3):
        move()


def move_4x():
    for _ in range(4):
        move()


def tower_1():
    for i in range(5):
        if front_is_clear():
            move()
        else:
            put_beeper()


def turn_left(times=1):
    for _ in range(times):
        turn_left()
        turn_left()
        turn_left()


def main():
    if __name__ == ""__main__"":
        main()
",201
"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",0.6,"def main ():
string = str (input ( 'Enter string :'))
for i in range ((len (string)-1),-1,-1):
print (string[i])
if __name__ == '___main__':
main()",41,"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",0,"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",0,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",2,"def main ():
string = str (input( 'Enter string '))
for i in range ((len(string) - 1),-1,-1) :
print (string[i])
if -name '__main_':
main()",44,"def main():
    string = str(input(""Enter string ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",1,"def main():
    string = str(input(""Enter string ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",1,"def main():
    string = str(input(""Enter string ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",1,"det main ( ):
String = str (input (""Enter string: '))
for i in range ((len (string) -1) ,- 1 ,- 1):
print (string [i])
if __ name _== '_main-':
main ()",50,"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",0,"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",0,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",2,"det main ():
string \( = \) str (input ( Enter string: '))
for \( i \) in range ((len (string) -1\( ),-1,-1) \) : print (string \( [i] \) )
if name_ \( == \) '_-_main_-1:
\( \operatorname{main}() \)",81,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",2
"def main():

    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",0.6,"if
def main():
nur - int (input (""Enter a umby: ""))
print (f"" { num } is { ""prime if is_preme (nom)
else 'not prime' 3"")
Lef is__ pame(n):
<=
return false
elif n <= 3.
Feton True
elf 0 ² 2 = = 6
0² / 3 = = 0;
retow False
for i iN, Range (5, int(n"" 0.5) +1,6)
if 1% 1 = = 0¹ 0² 0% (i + 2) = = 6:
retor False
netum Thve
пале
maiN ()
--
main",190,"def main():
    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",1,"def main():
    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",1,"def main():
    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True


if __name__ == ""__main__"":
    main()
",44,"def main():
num = a NMBU: ""))
is {'prime' if ip_proundnorm)
else'not prime'3"")
def is prone(s)
if n<=1
return False
olig n <=3:
retun True
effn82==0 OR n% 3==0:
retor False
for i iN Range (5, int(c (0.5)+1,6)
if n%i==0 OR n% (i+2) == 6
return False
refund True
if
nane
1' main Ir's
main ()",198,"def main():
    num = int(input(""Enter a number: ""))
    print(""prime"" if is_prime(num) else ""not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",17,"def main():
    num = int(input(""Enter a number: ""))
    print(""prime"" if is_prime(num) else ""not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",17,"def main():
    num = int(input(""Enter a number: ""))
    print(""prime"" if is_prime(num) else ""not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True


if __name__ == ""__main__"":
    main()
",60,"def main():
num = int (input( ""Enter a NM bu :
print (f""Enums is S'prime if is_ prime (nom)
else not primé 3"">
def is_ prime(1):
if n <= 12
return false
elif > <= 3:
Cetun True
elf n/ 2 = = x OR 1% 3=6 ;
return False
for i in Range (5, int(1 +0.5) + 1,6
if 1% i = = x or 1% (1+2) =0 :
return False
return True
if
= =
- - main
main ()",165,"def main():
    num = int(input(""Enter a num:""))
    if is_prime(num):
        print(f""Num is prime"")
    else:
        print(""Not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",58,"def main():
    num = int(input(""Enter a num: ""))
    if is_prime(num):
        print(f""Num is prime"")
    else:
        print(""Num is not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True


if __name__ == ""__main__"":
    main()
",107,"def main():
    num = int(input(""Enter a number: ""))
    if is_prime(num):
        print(f""Number is prime"")
    else:
        print(""Number is not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True


if __name__ == ""__main__"":
    main()
",108,"\( \operatorname{deg} \operatorname{main}(): \)
num =int( (iuput(""Entu a NMkn: "")) prutt(f""\{num\} is \{'prime' if is prome(num) else not prime 3 "")
def is prme \( (n) \) :
if \( n<=1 \)
reture alse
\( \operatorname{elif} \cap<=3 \) :
seton True
elf \( n \% 2==\varnothing \) or \( \cap \% 3==\varnothing \) :
re tow Jalse
for i in Ravge \( \left(5\right. \) int \( \left.\left(n^{* *} 0,5\right)+1,6\right) \) if \( n \% i==\varnothing \) or \( n \%(i+2)==\varnothing \) : retur false
nefom thoe",318,"def main():
    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif (n % 2 == 0) or (n % 3 == 0):
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if (n % i == 0) or (n % (i + 2) == 0):
            return False
    return True
",49,"def main():
    num = int(input(""Enter a Number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True
",42,"def main():
    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True
",73
"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0.6,"from Karel. Stamfordkarel import
def main ():
turn-left():
while frent_is_ alpar (fi
tunn-right()
fill-row ()
return _to_home ll
Jump_row()
turn_right()
fill-row ()
vetwook to home ()
while frent-is. Elear();
meve (s
Sef fill_row();
while frent_is_ clearl]
put - beeper ()
move ()
put-beeper ()",149,"from Karel.Stamfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
        put_beeper()
",19,"from Karel.Stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
        put_beeper()
",18,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",12,"from Karel. stam fordmarel impert
def main():
turn-left():
while frent- is alpar():
turn-rights
fill-row()
return to home(s)
junprowl
turn-right
fillstow()
return te 3-home()
while front is. Elear(1:
meve()
def fill. rew() :
while front. is. clearl)
put - beeper()
move()
put-seeper()",150,"from Karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",13,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",12,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_to_next_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",20,"from karel . stamfordkarel. import *
def mais ():
turn-left ():
while frent_ is_ alpar ();
turn-right ()
fill-row ( )
return_to_ home()
jumprow ()
turn-right ()
fill-row ()
returnkte -home ()
while front- is Elcar();
meve ()
Sef fill -row() ;
while front- is clear()
put - beeper ()
move ()
put-beeper ()",147,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()

    def fill_row():
        while front_is_clear():
            put_beeper()
            move()
            put_beeper()
",36,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
        while front_is_clear():
            move()
        fill_row()
        while front_is_clear():
            put_beeper()
            move()
            put_beeper()
",48,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",12,"fremkarel. stamfordkared impert*
def \( \operatorname{main}() \) :
turn-left ():
while frent - is _ clpar ():
tumn-right 1)
fill-row()
retwn-te-home()
junprow()
turn - right ()
fillarow ()
ve turnkte - home ()
while front-is. Elear ( \( ) \) :
meve()
def fill-rew():
while front - is - clearl)
put - beeper ()
move ()
put-beeper ()",177,"
from karel.stanfordkarel import *
def main():
		turn_left()
		while front_is_clear():
			turn_right()
			fill_row()
			return_to_home()
			jump_row()
		turn_right()
		fill_row()
		return_to_home()
		while front_is_clear():
			move()
	def fill_row():
		while front_is_clear():
			put_beeper()
			move()
		put_beeper()
",93,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0
"from stanfordkarel import *

""""""
Karel should fill the whole world with beepers.
""""""


def main():
    """"""
    You should write your code to make Karel do its task in
    this function. Make sure to delete the 'pass' line before
    starting to write your own code. You should also delete this
    comment and replace it with a better, more descriptive one.
    """"""
    while not left_is_blocked():
        put_beeper_Line()
        reset_Position()
    put_beeper_Line()


def put_beeper_Line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",0.6,"from stanfordKarel import *
11 11 11
Kard should
beepers.
|| || ||
def
main ():
11 [1 (1
You should write
Karel do its
comment
better
fill
11 [11
/
the whole world with
Make
виче
before starting to
code. You should also
to
task in this
function.
delete the pass line
write your
owen
delete this
with
and replace it
more descriptive one.
move ()
put_ beeper ()
your
put_ beeper _line ()
our code to malce
While not left_it_ blocked ():
put - beeper_Line()
resit_ Position ()
dif put_beeper_Line():
put_beeper ()
front_is_clear
while
():",376,"from stanfordKarel import *

# Karel should fill the whole world with beepers.
# Make sure to visualize your task before starting to code. You should also delete the pass line.


def main():
    # You should write your own function.
    move()
    put_beeper()
    put_beeper_line()
    while not left_is_blocked():
        put_beeper_line()
        reset_position()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
",245,"from stanfordKarel import *

# Karel should fill the whole world with beepers.
def main():
    # You should write your own code. Delete this comment and replace it with a more descriptive one.
    move()
    put_beeper()
    put_beeper_line()
    # Make sure our code to make the task in this function.
    while not left_is_blocked():
        put_beeper_line()
        reset_position()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
",239,"from stanfordKarel import *

# Karel should fill the whole world with beepers.
def main():
    # Make sure to write a comment before starting to code.
    # You should also write your own task in this function.
    # Delete the pass line and replace it with a more descriptive one.
    move()
    put_beeper()
    put_beeper_line()

    while not left_is_blocked():
        put_beeper_line()
        reset_position()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
",249,"from stanford hard import
Kard should fill the whole world with
beepers
11 11 11
daf main () :
11
11
11
you should write your code to male
karel do its task in this function.
Make sure to delite the pass line
code. You should also delete
before starting to write your this own
comment and replace it with a
better more descriptive one
11 11
while not left- is blocked C):
put- buper-line()
resit_Position c)
put- buper - Line c)
def put beeper-line() -
put beeper c)
while front is clear C) :
move ()
put- - beeper c)",208,"# Code goes here
",563,"from stanfordkarel import *

# Karel should fill the whole world with beepers


def main():
    # you should write your code to make
    # karel do its task in this function.
    # Make sure to delete the pass line
    # code. You should also delete
    # before starting to write your own
    # comment and replace it with a
    # better more descriptive one
    while not left_is_blocked():
        put_beeper_line()
        reset_position()
        put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",124,"from stanfordkarel import *

# Karel should fill the whole world with beepers


def main():
    """"""
    You should write your code to make Karel do its task in this function.
    Make sure to delete the pass line code. You should also delete this comment
    and replace it with a better more descriptive one.
    """"""

    while not left_is_blocked():
        put_beeper_line()
        reset_position()
        put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",75,"from stanfordkarel import *
Kard should fill the whole world with
keepers.
11 11 11
daf main () :
11 11 11
You should write your code to males
Karel do its task in this function.
Make sure to delete the 'pass line
before starting to write your own
code. You should also delete this
comment and replace it with a
better more descriptive one.
11 11 11
While not left-is - blocked ():
put -beeper -Line()
reset_Position ()
put-buper _line ()
de put_leeper-Line ():
put -beeper ()
While front-is- clear ():
move ( )
put -beeper ()",141,"from stanfordkarel import *

# Karel should fill the whole world with beepers.


def main():
    # You should write your code to make Karel do its task in this function.
    # Make sure to delete the 'pass' line before starting to write your own
    # code. You should also delete this comment and replace it with a
    # better, more descriptive one.

    while not left_is_blocked():
        put_beeper_line()
        reset_position()
        put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",60,"from stanfordkarel import *

# Karel should fill the whole world with beepers.
def main():
    # You should write your code to make Karel do its task in this function.
    # Make sure to delete the 'pass' line before starting to write your own code.
    # You should also delete this comment and replace it with a better, more descriptive one.
    while not left_is_blocked():
        put_beeper_line()
        reset_position()
        put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",57,"from stanfordkarel import *

# Karel should fill the whole world with beepers.


def main():
    # You should write your code to make Karel do its task in this function.
    # Make sure to delete the 'pass' line before starting to write your own
    # code. This function makes Karel fill the world with beepers.

    while not left_is_blocked():
        put_beeper_line()
        reset_position()
        put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",114,"Grom stanfordkarel import *
111111
Karel should fill the whole world with bepers.
111111
def \( \operatorname{main}() \) :
""11 11
You should write your code to male karel do its task in this function. Make sure to delete the 'pass'1 line bfore slarting to rurite your owen code. You should also delete thir comment and replace it with a better, more descriptive one. 111111

While not left_ir_blockd ():
put_beper_Lin ()
resit_position ()
put_buper_line C)
dy put_buper-Line \( ( \) ):
put_beper ()
while front_is-clear C):
move ()
put_beper ()",155,"from stanfordkarel import *


def main():
    """"""
    Karel should fill the whole world with beepers.
    You should write your code to make Karel do its task in this function.
    Make sure to delete the 'pass' line before starting to rewrite your own code.
    You should also delete this comment and replace it with a better, more descriptive one.
    """"""
    while not left_is_blocked():
        put_beeper_line()
        reset_position()
    put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",73,"from stanfordkarel import *


def main():
    """"""
    Karel should fill the whole world with beepers.
    You should write your code to make Karel do its task in this function.
    Make sure to delete the 'pass' line before starting to rewrite your own code.
    You should also delete this comment and replace it with a better, more descriptive one.
    """"""
    while not left_is_blocked():
        put_beeper_line()
        reset_position()
    put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",73,"from stanfordkarel import *


def main():
    """"""
    Karel should fill the whole world with beepers.
    You should write your code to make Karel do its task in this function.
    Make sure to delete the 'pass' line before starting to write your own code.
    You should also delete this comment and replace it with a better, more descriptive one.
    """"""
    while not left_is_blocked():
        put_beeper_line()
        reset_position()
    put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",71
"#karel needs to move to the bottom of the next arch to commence 
#building the next column.
#precondition: karel is facing east
#post condition: karel is still facing east at the next column site.
        
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()""
                
def turn_around():
    turn_left()
    turn_left()
        
if __name__ == '__main__':
    main()",0.6,"#Karel needs to move to the bottom of the next arch to comm
#ence building the next column.
# Precondition: Karel is facing east
#post_condition : Karel is facing east at the next column site.
def move_to_ next_arch_botton ():
if front is clear ():
for i in range (4):
move ()
def turn around () =
turn_left()
turn_left (D
if name
Main ()
main",119,"# Karel needs to move to the bottom of the next arch to commence
# building the next column.
# Precondition: Karel is facing east
# Post_condition : Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",55,"# Karel needs to move to the bottom of the next arch to commence
# building the next column.
# Precondition: Karel is facing east
# post_condition : Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",54,"# Karel needs to move to the bottom of the next arch to commence
# building the next column.
# Precondition: Karel is facing east
# post_condition : Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",54,"#karel needs to more to the bottom of the next arch to comm
#ence building the next column.
#
Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move to next arch botto ():
if front is clear ():
for i in range (4)
move ()
def turn around ():
turn left()
turn_left(3)
if name 1 i main , :
main ()",117,"# Karel needs to move to the bottom of the next arch to commence
# building the next column.
#
# Precondition: Karel is facing east
# Post-condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",56,"# Karel needs to move to the bottom of the next arch to commence
# building the next column.
#
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",55,"# Karel needs to move to the bottom of the next arch to commence
# building the next column.
#
# Precondition: Karel is facing east
# Post-condition: Karel is facing east at the next column site.


def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",55,"#karel needs to move to the bottom of the next noch to com
Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_botton ();
if front is clear ():
for i in range (4) :
move ()
def turn around ():
turn_left ( )
turn left ()
if __ name.
main
main ()",120,"# Karel needs to move to the bottom of the next notch to come
# Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_notch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",64,"# Karel needs to move to the bottom of the next notch to come
# Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",61,"# Karel needs to move to the bottom of the next arch to come
# Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    move_to_next_arch_bottom()
",80,"Hikarel needs to move to the bottom of the next arech to comm. Hence building the next column.
\# Precondition: karel is facing east
\#post-condition: kavel is facing east at the next column site. def move_to_next_arch_botton():
if frontis-clear () :
for \( i \) in range (4):
move ()
def turnarounl () :",159,"
# Karel needs to move to the bottom of the next arch to comm.
# Hence building the next column.
# Precondition: Karel is facing east
# Post-condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
	if front_is_clear():
		for i in range(4):
			move()
def turnaround():
",153,"
# Karel needs to move to the bottom of the next arch to comm.
# Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
	if front_is_clear():
		for i in range(4):
			move()
def turnaround():
",152,"# Karel needs to move to the bottom of the next arch to comm.
# Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.


def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turnaround():
    pass
",119
"def find_lrgst_smallst(number):
    if not numbers:
        return none
    smallest = largest = number[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example Usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_lrgst_smallst(numbers)
print(result)
",0.6,"HEART
def- find Ligst_smallet (number);
if not numbers:
return none
-Smallest= largest = number [0]
for num in numbers:
if num < smallest:
= num
пит
smallest
if nam > Largest :
Largest.
fieturin smallest, Largest
= num
#Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
Tresult
find_ligst __ smallst (numbens)
print (result)
উদ্ভাস-উন্মেষ শিক্ষা পরিবার",143,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find-Ligst_smallst - (number):
if not numbers:
return none
-Smallest. = largest = number [0]
for num in numbers:
if num < smallest:
smallest = num
if nam > largest:
Largest = num
return smallest, Largest
Example usage:
numbers = [1, 2, 3, 4,5,6,7,8,9]
result = find_ligst_smalist (numbers)
print (result)",91,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"
def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest

Example usage:
numbers = [1, 2, 3, 4,5,6,7,8,9]
result = find_largest_smallest(numbers)
print(result)
",19,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",26,"def find_Ligst_smallst (number):
00
if not numbers:
Return none
Smallest=largest = number [0]
-
for num in numbers:
lif
num < smallest:
smallest = num
if
nam > Largest :
Largest = num
tieturin smallest, Largest
# Example usage:
numbers = [1,2,3, 4,5,6,7,8,9]
Hresult = find_ligst_smallst(numbers)
print (result)
उदास-उदास मिका शंतिबाज़",117,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]

    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",11,"def find_rigst_smallst (number):
if not numbers:
return none
- Smallest = largest = number [0]
for num in numbers:
if num < smallest:
\[
\text { smallest }=\text { num }
\]
if nam > Largest:
\[
\text { Largest }=\text { num }
\]
fietutin smallest, Largest
* Example usage.
\[
\begin{array}{l}
\text { rumbers }=[1,2,3,4,5,6,7,8,9] \\
\text { result }=\text { find_lrgst_smallst (numbers) }
\end{array}
\]
print (result)",170,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage.
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",11,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage.
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",11,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage.
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",11
"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The Sum of the Digits is: "", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0

    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",0.6,"def main():
user number
input (""Enter the number: "")
result = Sum_of_digits (user_number)
print (""The Sum of the digits is"", result)
def Sum_of_digits (user_ number):
W 18
number_str = Str (user_number)
digit_sum = 0
for digit in number str:
#zero
return digit sum
if_name_
main()
digit_sum += int(digit)
_main_"":",112,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",5,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The Sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",4,"def main():
    user_number = input(""Enter the number: "")
    result = Sum_of_digits(user_number)
    print(""The Sum of the digits is"", result)


def Sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",6,"def main():
user_number = input (""Enter the number: "")
result = Sum_of-digits (user_number)
print (""The Sum of the digits is"", result)
def Sum- of_digits (user_ number):
1#
number_str = Str (user- number)
digit_sum = 0 # zero
for digit in number-str:
digit_sum + int(digit)
return digit_sum
if name_ == ""__main_"":
main()",71,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",5,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The Sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0  # zero
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",11,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The Sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",4,"def main():
user_number = input (""Enter the number:
"")
result = sum_of_digits (user_number )
print (""The sum of the digits is "", result)
def Sum_of_digits (user_number):
number_str = Str (user_number)
digit_sum=0 # zero
for digit in number-str:
digit_sum + = int (digit)
return digit sum
if _name _== ""_main_"":
main()",71,"def main():
    user_number = input(""Enter the number:\n"")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is "", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",6,"def main():
    user_number = input(""Enter the number:\n"")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is "", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0  # zero
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",13,"def main():
    user_number = input(""Enter the number:\n"")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is "", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",6,"def main():
user_number = input (""Enter the number: "")
result = sum_of digits (user_number)
print (""The sum of the digits is"", result)
def sum_of_digits (user_number):
number_st \( r=\operatorname{str} \) (user_number)
digit_sum \( =\varnothing \quad \# \) zero
for digit in numberstr:
\[
\text { digit_sum } t=\operatorname{int} \text { (digit) }
\]
veturn digit_sum
if name_ \( =="" \) main_ \( "" \) :
main()",147,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",5,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",5,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",5
"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0.6,"def is-prime (n):
DON
if
Returns True if n is prime, False otherwise.
|(α ||
if n <
n < = 1:
return False
for i in range (2, int(n** 0.5) +1);
if n % i = = 0;
def main():
return True
[((11
The main function.
Int
return False
14
n = int ( input (""Enter a number: "")
if is-prime (n):
print (n
else:
""is a
main()
print (n. ""is not a prime number."")
name__ ==
prime number."")
11
main.
--
})",207,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"dof is -prime (n):
110V
Returns True if n is prime, False otherwise.
11011
if n <= 1:
return False
for i in range (2 , int(n**0.5 ) +1): :
if n % i == 0 :
return False
return True
def main():
The main function.
n= int (input ( ""Enter a number: "")
if is-prime (n):
print ( n , ""is a prime number."")
else :
print( n, ""is not a prime number. "")
if
name
11
main
"",
""
;
main()",152,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"def is-prime (n):
1104
Returns True if n is prime, False otherwise
11011
if n <= 1:
return False
for i in range (2, int(n*0.5)+1):
if n % i == 0.
return False
return True
def main () :
11 /11
The main function.
/11.11
n = int ( input (""Enter a number: "")
if is- prime (n):
print (n, "" is a prime number."")
else :
print( n, ""is not a prime number. "")
it
- - name __ == __ main -- :
main ( )",147,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n * 0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",3,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n * 0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",3,"def is_prime(n):
    """"""
    Returns True if n is a prime, False otherwise
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n * 0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",5,"def is-prime \( (n) \) :
Returns True if \( n \) is prime, False otherwise.
IIU11
if \( n<=1 \) :
return False
for \( i \) in range \( \left(2, \operatorname{int}\left(n^{* *} 0.5\right)+1\right) \) :
if \( n \% i==0 \) :
retum False
return True
def \( \operatorname{main}() \) :
IIIII
The main function.
1....
\( n=\operatorname{int} \) (input (""Enter a number: "")
if is-prime \( (n) \) :
print \( (n \), ""is a prime number."")
else:
print ( \( n \), ""is not a prime number."")
if \( \ldots \) name _. \( =="" \) main .. ""
\( \operatorname{main}() \)",279,"def is_prime(n):
    # Returns True if n is prime, False otherwise.
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    # The main function.
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",30,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0
"# Reverse String
def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


if __name__ == ""__main__"":
    main()
",0.6,"#Reverse String
def mam ():
str = input (""Input a string: "")
ro_str=
for i m str:
||||
if_name
r_str=i+r_stra
primt (r_stro)
mam ()
_maim_"":",78,"# Reverse String
def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


if __name__ == ""__main__"":
    main()
",0,"# Reverse String
def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


main()
",31,"# Reverse String
def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


if __name__ == ""__main__"":
    main()
",0,"# Reverse
string
def main ():
str = input ( ""Input a string: "")
ro-str=
for i instr:
r_str=itn_str
print (n_str)
if_ name - "" - __main_
main ()",63,"# Reverse String
def main():
    str = input(""Input a string: "")
    rev_str = """"
    for i in str:
        rev_str = i + rev_str
    print(rev_str)


if __name__ == ""__main__"":
    main()
",8,"# Reverse string
def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


if __name__ == ""__main__"":
    main()
",1,"# Reverse string
def main():
    str = input(""Input a string: "")
    rev_str = """"
    for i in str:
        rev_str = i + rev_str
    print(rev_str)


if __name__ == ""__main__"":
    main()
",9,"#Reverse String
def man ():
str = input (""Input a string: "")
ro _str= """"
for i'm str:
r_ str = i+ n_ str
print (no_stro)
if_name _= = ""_main_"":
main ()",55,"# Reverse String
def main():
    str = input(""Input a string: "")
    rev_str = """"
    for i in str:
        rev_str = i + rev_str
    print(rev_str)


if __name__ == ""__main__"":
    main()
",8,"# Reverse String
def main():
    str = input(""Input a string: "")
    rev_str = """"
    for i in str:
        rev_str = i + rev_str
    print(rev_str)


if __name__ == ""__main__"":
    main()
",8,"# Reverse String
def main():
    str = input(""Input a string: "")
    rev_str = """"
    for i in str:
        rev_str = i + rev_str
    print(rev_str)


if __name__ == ""__main__"":
    main()
",8,"\# Reverse string
def \( \operatorname{mam}() \) :
stro = input (""Input a string: "")
rostro \( ="" 11 \)
for i instr:
\[
r_{-} s t r=i+r_{-} s t r
\]
print (r_stro)
\[
\begin{array}{l}
\text { if_name- }=="" \text {-main_: } \\
\operatorname{mam} \text { () }
\end{array}
\]",157,"# Reverse string
def mam():
    stro = input(""Input a string: "")
    r_stro = """"
    for i in stro:
        r_stro = i + r_stro
    print(r_stro)


if __name__ == ""__main__"":
    mam()
",11,"# Reverse string
def rev_str():
    str = input(""Input a string: "")
    rev_str = """"
    for i in str:
        rev_str = i + rev_str
    print(rev_str)


if __name__ == ""__main__"":
    rev_str()
",23,":
# Reverse string
def mam():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)

if __name__==""__main__"":
    mam()
",10
"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    list = sentence.split()
    l_word = """"
    for word in list:

        if len(word) > len(l_word):
            l_word = word
    print(l_word)


if __name__ == ""__main__"":
    main()
",0.6,"# Write a Python program to find the longest word in a given text
def maint):
sentence = imput (""Input a sentence: "")
list = sentence.split()
Lword =
for world im List:
if len (word) >len (1-word):
1_ word = word
primt (1- word)
if_name_ == ""_mam_"":
main ()",78,"
# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    lst = sentence.split()
    l_word =
    for word in lst:
        if len(word) > len(l_word):
            l_word = word
    print(l_word)
if __name__ == ""__main__"":
    main()
",9,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    List = sentence.split()
    l_word = """"
    for word in List:
        if len(word) > len(l_word):
            l_word = word
    print(l_word)


if __name__ == ""__main__"":
    main()
",3,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    words_list = sentence.split()
    long_word = """"
    for word in words_list:
        if len(word) > len(long_word):
            long_word = word
    print(long_word)


if __name__ == ""__main__"":
    main()
",25,"# Write a Python program to find the longest word in a given text
def main() :
sentence = input (""Input a sentence: "")
list = sentence.split1)
Iword = if 11
for word in List:
if len (word)> len (1 word):
1_ word = word
print(1- word)
if_name- == ""_main-"":
main ()",73,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    list_ = sentence.split()
    l_word = """"
    for word in list_:
        if len(word) > len(l_word):
            l_word = word
    print(l_word)


if __name__ == ""__main__"":
    main()
",3,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    list_words = sentence.split()
    l_word = """"
    for word in list_words:
        if len(word) > len(l_word):
            l_word = word
    print(l_word)


if __name__ == ""__main__"":
    main()
",13,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    word_list = sentence.split()
    l_word = """"
    for word in word_list:
        if len(word) > len(l_word):
            l_word = word
    print(l_word)


if __name__ == ""__main__"":
    main()
",11,"# Write a Python program to find the longest word i'm a given text
def main ():
sentence = input (""Input a sentence: "")
list = sentence. split ( )
Lword = """"1
for word in List:
if len (word) > 1en (1-word):
1-word = word
print (1-word)
if_name = ""_main_"" :
main ()",77,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    lst = sentence.split()
    l_word = """"
    for word in lst:
        if len(word) > len(l_word):
            l_word = word
    print(l_word)


if __name__ == ""__main__"":
    main()
",3,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    lst = sentence.split()
    Lword = """"
    for word in lst:
        if len(word) > len(Lword):
            Lword = word
    print(Lword)


if __name__ == ""__main__"":
    main()
",11,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    words_list = sentence.split()
    longest_word = """"
    for word in words_list:
        if len(word) > len(longest_word):
            longest_word = word
    print(longest_word)


if __name__ == ""__main__"":
    main()
",37,"\# Write a Python program to find the longest word a \( m \) a given text def main \( ( \) ):
sentence = imput (""Input a sentence: "")
list = sentence.split ()
lword = "" ""
for word im list:
if len (word) >len (1-word):
\[
\text { 1_word }=\text { word }
\]
primt (1-word)
if name_ \( == \) ""-main_"".
\( \operatorname{main}() \)",116,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    list = sentence.split()
    lword = "" ""
    for word in list:
        if len(word) > len(lword):
            lword = word
    print(lword)


if __name__ == ""__main__"":
    main()
",6,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    lst = sentence.split()
    lword = "" ""
    for word in lst:
        if len(word) > len(lword):
            lword = word
    print(lword)


if __name__ == ""__main__"":
    main()
",8,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    words = sentence.split()
    lword = """"
    for word in words:
        if len(word) > len(lword):
            lword = word
    print(lword)


if __name__ == ""__main__"":
    main()
",15
"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0.6,"def greatest common_divisor(a,b):
smaller_number=a if azb else b
common_divisor= []
for i in range (1, smaller_number +1):
if a %i == 0 and b% i ==0:
common_divisor.append()
return common_divisor [-1]",52,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def
greatest_common_divisorca,b):
smaller_number. = a if a4b else 10
common-divisor= []
for i in range (1, smaller_number +1) :
if a %i ==0 and b%i==0:
common_divisor . append(i)
return common_divisor [-1]",60,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor (a,b) :
smaller_ number = a if a <b else 10
common_divisor = []
for i in range (1, smaller_number +1):
if 9 % i == 0 and 6% i == 0:
common_divisor. append (i)
return common_divisor [-1]",52,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor \( (a, b) \) :
smaller_number \( =a \) if \( a<b \) else \( b \) common_divisor \( =[] \)
for \( i \) in range \( (1 \), smaller number +1\( ) \) : if \( a \% i==0 \) and \( b \% i==0 \) : common_divisor. a ppend (i) return common_divisor \( [-1] \)",94,"def greatest_common_divisor((a, b)):
    smaller_number = a if (a < b) else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if (a % i == 0) and (b % i == 0):
            common_divisor.append(i)
    return common_divisor[-1]
",8,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,":
def greatest_common_divisor(a, b):
	smaller_number = a if a < b else b
	common_divisor = []
	for i in range(1, smaller_number + 1):
		if a % i == 0 and b % i == 0:
			common_divisor.append(i)
	return common_divisor[-1]
",38
"def main():
    """"""
    The program should determine whether the given year is a leap year
    (divisible by 4, divisible by 100 but also by 400).
    """"""

    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below(in number form)."")
    Year = int(input(""Year : ""))
    print("" "")

    if (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" "" + ""is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" "" + ""is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("" "")
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")

        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()

        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break

        elif ask != ""Yes"" or ask != ""yes"" or ask != ""No"" or ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",0.6,"def main ():
The
should determine whether the given year is a leap year
(divisible by 4, divisible by loo but also by 400).
program
print (""This program will help you identify if a given year is a leap
or not."")
year
if
print ("" "")
()
identify_a_leap_year
ask_for_a_new_year_to_ identify ()
def identify_a_leap-year ():
print (""Please input
Year = int (imput ("" Year: ""))
print("" "")
else :
it (Year % 4 = = 0) or (Year %/ 100 ==0) or (Year % 400 ==0);
+ str (Year) +
+ "" is a leap year."")
V
print (""The Year
""+"" is not a leap year."")
print (""the Year
def ask_for_a_new_year_to_
white True:
-_name__
main ()
a year below (ill humber
if ask = =
+ str (Year).
-+
identify ():
print (')
ask - input (""Do you want to identify
print ("" "")
""__main__
form). "")
""Yes"" or ask
ask = = ""yes"" :
identify_a_ leap year ()
""
elif ask = = ""No"" or ask == ""no
a new year? Yes/No: "")
print (""Thank you. See you again!"")
break
elif ask != ""Yes
or ask != ""yes"" of ark! = ""No"" or ask != ""no"":
print (""Wrong keyword. Please type the exact keyword."")",486,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("" "")
    if (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" or ask != ""yes"" or ask != ""No"" or ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",68,"def main():
    print(""This program will help you identify if a given year is a leap or not."")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    if (Year % 4 == 0) or (Year % 100 == 0) and (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        ask = input(""Do you want to identify a new year? Yes/No: "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" or ask != ""yes"" or ask != ""No"" or ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",236,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap or not."")
    ask_for_a_new_year_to_identify()


def identify_a_leap_year(year):
    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
        print(""The Year "" + str(year) + "" is a leap year."")
    else:
        print(""The Year "" + str(year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print(""Please input a year below (in number form)."")
        year = int(input(""Year: ""))
        identify_a_leap_year(year)
        ask = input(""Do you want to identify a new year? Yes/No: "")
        if ask == ""Yes"" or ask == ""yes"":
            continue
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        else:
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",397,"def main ():
The program should determine whether the given year is a leap year
(divisible by 4, divisible by 100 but also by 400).
print (""This program will help you identify if a given year is a leap
year or not."")
print ( a)
identify- a - leap_ year ()
ask_for_a- new- year- to identify()
def identify- a - leap - year () :
print ("" Please input a year below (in number form)."")
Year = int (input (""Year: ""))
print ( .)
if (Year %4==0) or (Year % 100 = = 0) or (Year % 400 = = 0) :
print (""The Year ""+ str (Year) + v t is a leap year."")
else
print (""the Year str(Year) + "" + "" is not a leap year."")
def ask_for a-new. year to- identify ():
white True:
prilit ( 1)
ask = input (""Do you want to identify a new year? Yes/No: "")
print ( "" "")
if ask == ""Yes"" or ask == ""yes"":
identify_a_leap-yaar
elif ask = = ""No"" or ask == ""no"" :
print (""Thank you. See you again!')
break
elif ask != ""Yes or ask != ""yes"" a task!=""No"" or ask != ""no"":
print (""Wrong keyword. Please type the exact keyword. )
if name == ""__ main "":
main ()",296,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    if (Year % 4 == 0) and (Year % 100 != 0 or Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" or ask != ""yes"" or ask != ""No"" or ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",89,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    if (Year % 4 == 0) and (Year % 100 != 0 or Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        else:
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",148,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    if (Year % 4 == 0 and Year % 100 != 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask.lower() == ""yes"":
            identify_a_leap_year()
        elif ask.lower() == ""no"":
            print(""Thank you. See you again!"")
            break
        else:
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",175,"def main () :
The program should determine whether the given year is a leap year
( divisible by 4, divisible by 100 but also by 400).
print ( "" This program will help you identify if a given year is a leap
year or not . "")
print ("" "")
identify_a_leap year ( )
ask _ for _ a _ new _year _ to _identify ( )
def identify _ a _ leap year ( ) :
print ( "" Please input a year below ( in number form ) . "")
Year = int (input (""Year:
print ("" "")
if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;
print (""The Year + str(Year) + "" ""+ ""is a leap year."")
else :
print ( "" The Year "" + str ( Year ) + "" "" + "" is not a leap year . "" )
def ask-for-a-new year_ to _ identify ( ) :
white True :
print ("" "")
ask - input ( "" Do you want to identify a new year ? Yes / No : "" )
print ("" "")
if ask == ""Yes "" or ask == ""yes"":
identify_ a_ leap -year ( )
elif ask == ""NO"" or ask = ""no"":
print ( "" Thank you . See you again ! "" )
break
elif ask != ""Yes or ask != ""yes"" a ask! = ""No"" or ask != ""no"".
print ( "" Wrong keyword . Please type the exact keyword . "")
if
__ name_ == "" __ main __ "":
main ()",312,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("" "")
    if (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" "" + ""is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" "" + ""is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("" "")
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" and ask != ""yes"" and ask != ""No"" and ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",33,"def main():
    # The program should determine whether the given year is a leap year
    # ( divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    print("""")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("""")
    if (Year % 4 == 0) and (Year % 100 != 0 or Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("""")
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("""")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        else:
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",104,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("" "")
    if (Year % 4 == 0 and Year % 100 != 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("" "")
        ask = input(""Do you want to identify a new year? Yes / No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        else:
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",101,"def \( \operatorname{main}() \) :
""The program should determine whether the given year is a leap year (divisible by 4, divisible by 100 but also by 400).
"" r""
print (""This program will help you identify if a given year is a leap year or not."")
privit ("" "")
identify - a - leap_year ()
ask_for_a new_year_to_identify ()
def identify - a l eap - year () :
print (""Please input a year below (in number form)."")
Year = int (input (""Year: ""))
print ("" "")
if \( ( \) Year \( \% 4=0) \) ) or \( ( \) Year \( \% 100=0) \) ) or \( ( \) Year \( \% 400=0) \) :
print (""The Year "" \( +\operatorname{str}( \) Year) + "" "" ""is a leap year."")
else:
\[
\text { print (""The Year ""+str (Year) }+ \text { "" "" "" is not a leap year."") }
\]
def ask_-fir_a_new - year_to_identify ():
white True:
print (' 1 )
ask = input (""Do you want to identify a new year? Yes/No:"") print ("" "")
if ask = = ""Yes "" or ask = = ""yes"":
identify - a - leap- year ()
elif ask \( == \) ""No"" or ask \( == \) ""no"" :
print (""Thank you. See you again!"")
break
elif ask ! = ""Yes or ask ! = ""yes"" a ask! = ""No"" or ask ! = ""no"":
print (""Wrong keyword. Please type the exact keyword."")
if .. name \( \ldots=="" \) main \( _{2}{ }^{\prime} \) :
main ()",401,"def main():
    """"""
    The program should determine whether the given year is a leap year
    (divisible by 4, divisible by 100 but also by 400).
    """"""
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("" "")
    if (Year % 4 == 0) and ((Year % 100 != 0) or (Year % 400 == 0)):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("" "")
        ask = input(""Do you want to identify a new year? Yes/No:"")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        else:
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",83,"def main():
    """"""
    The program should determine whether the given year is a leap year
    (divisible by 4, divisible by 100 but also by 400).
    """"""
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("" "")
    if Year % 4 == 0 and (Year % 100 != 0 or Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("" "")
        ask = input(""Do you want to identify a new year? Yes/No:"")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" and ask != ""yes"" and ask != ""No"" and ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",35,"def main():
    """"""
    The program should determine whether the given year is a leap year
    (divisible by 4, divisible by 100 but also by 400).
    """"""
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("" "")
    if (Year % 4 == 0 and Year % 100 != 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("" "")
        ask = input(""Do you want to identify a new year? Yes/No:"")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        else:
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",83
"sum = 0
number = input()
for i in number:
    sum += int(i)
Print(sum)
",0.6,"Sun =
S
number
imput ()
for i in number:
Sun + =
int(i)
Print (surm)
N",20,"Sum = 0
number = input()
for i in number:
    Sum += int(i)
print(Sum)
",4,":
sum = 0
number = input()
for i in number:
    sum += int(i)
print(sum)
",3,"sum = 0
number = input()
for i in number:
    sum += int(i)
print(sum)
",1,"sun 2 = $
number N Emput ()
for i in number:
sun + 11 int(i)
print (sum )",20,"sum_2 = 0
number = input()
for i in number:
    sum_2 += int(i)
print(sum_2)
",7,"sum = 0
number = input()
for i in number:
    sum += int(i)
print(sum)
",1,"sum_2 = 0
number = input()
for i in number:
    sum_2 += int(i)
print(sum_2)
",7,"Sun = D
number = input ()
for i in number :
Sun + = int (i)
Print (Sum)",16,"Sum = 0
number = input()
for i in number:
    Sum += int(i)
print(Sum)
",4,"Sun = 0
number = input()
for i in number:
    Sun += int(i)
print(Sun)
",7,"Sum = 0
number = input()
for i in number:
    Sum += int(i)
print(Sum)
",4,"\[
\operatorname{sun}=\varnothing
\]
number = imput ()
for: in number:
\[
\text { sun }+=\operatorname{int}(i)
\]
print (sum)",69,"sum = 0
number = input()
for i in number:
    sum += int(i)
print(sum)
",1,"sum = 0
number = input()
for i in number:
    sum += int(i)
print(sum)
",1,"sum = 0
number = input()
for i in number:
    sum += int(i)
print(sum)
",1
"def factorial(n):
    if n <= 1:
        return 1
    else:
        return factorial(n - 1) * n


print(factorial(int(input())))
",0.6,"def factoria 1 (n):
if n <= 1 :
Return 1
else:
Return factorial (n-1) *
Prist (fractional (int (amput())))
h",49,"def factorial(n):
    if n <= 1:
        return 1
    else:
        return factorial(n - 1) * n
",33,"def factorial(n):
    if n <= 1:
        return 1
    else:
        return n * factorial(n - 1)
",37,"def factorial(n):
    if n <= 1:
        return 1
    else:
        return n * factorial(n - 1)
",37,"def factoric / (n):
if h L=1 :
Return 1
else :
Return factorial (n-1) A h
Print (factorial (int (input() ))) )",49,"def factorial(n):
    if n == 1:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(int(input())))
",9,"def factorial(n):
    if n == 1:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(int(input())))
",9,"def factorial(n):
    if n == 1:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(int(input())))
",9,"def factorial (n):
if n <= 1 ;
Return 1
else :
Return factorial (n-1) * h
Print (factorial (int (input ()))",42,"def factorial(n):
    if n <= 1:
        return 1
    else:
        return factorial(n - 1) * n


print(factorial(int(input())))
",0,"def factorial(n):
    if n <= 1:
        return 1
    else:
        return factorial(n - 1) * n


print(factorial(int(input())))
",0,"def factorial(n):
    if n <= 1:
        return 1
    else:
        return factorial(n - 1) * n


print(factorial(int(input())))
",0,"def factorial (n):
if \( n<1 \) :
Retunn 1
else:
Return factorial \( (n-1) * n \)
Print \( ( \) factarial \( (\operatorname{int}(\operatorname{imput}()))) \)",89,"def factorial(n):
    if n < 1:
        return 1
    else:
        return factorial((n - 1) * n)


print(factorial(int(input())))
",3,"def factorial(n):
    if n < 1:
        return 1
    else:
        return factorial(n - 1) * n


print(factorial(int(input())))
",1,"def factorial(n):
    if n < 1:
        return 1
    else:
        return factorial(n - 1) * n


print(factorial(int(input())))
",1
"year = int(input)

if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",0.6,"Year = int (impot
if yeur 1/4 = = $ and year 1/144 != 0 on Year 1.400 ==&=
Print (true)
else:
print (False)",35,"Year = int(input())
if Year % 4 == 0 and Year % 100 != 0 or Year % 400 == 0:
    print(True)
else:
    print(False)
",6,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"year 2 int (input)
if I and year 1,144 1=0 on Year% 400==0:
Print (TRUE)
else :
print (False)",43,"year = int(input())
if year % 144 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",22,"year = int(input())
if year % 144 == 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",23,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"Year = ent (input)
if year / n == 4 and year 0/ 100 /=/ or year / 400 == 0 ;
Print (true)
else :
Print (False )",30,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"\[
\text { year }=\operatorname{int}(\text { impot })
\]
if Yearn \( \% \mu==\phi \) and year \( \% 1 \phi \phi !=\varnothing \) on Year \( \% 400==\phi \) :
Pine (true)
else:
print (False)",108,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2
"Word = input()

Word = "" "".join([i for i in word[::-1]])

Print(Word)
",0.6,"Word = imput()
word = """", join (I i for i in word [::
Print (word)",19,"Word = input()
word = """".join(i for i in Word[::-1])
print(word)
",9,"word = input()
word = """".join(i for i in word)
print(word)
",15,"word = input()
word = """".join(i for i in word)
print(word)
",15,"word = imput()
ward = "" "" "" "" join (I i from i in word[-:-]]]
Print (word)",22,"word = input()
word = "" "".join([i for i in word[::-1]])
print(word)
",6,"word = input()
word = "" "".join([i for i in word[::-1]])
print(word)
",6,"word = input()
word = "" "".join([i for i in word])
print(word)
",12,"Word = input ()
Word = """". join ([ "" for i in word [-]
Print (Word)",16,"word = input()
word = """".join([i for i in word])
print(word)
",13,"word = input()
word = """".join(["""" for i in word])
print(word)
",15,"word = input()
word = """".join([i for i in word[::-1]])
print(word)
",7,"\( \begin{array}{l}\text { Wond }=\operatorname{imput}() \\ \text { wand }="" \text { ""join }([i \text { for } i \text { in word }[\because-1]]) \\ \text { Print (wond) } \\\end{array} \)",134,"word = input()
wand = """".join([i for i in word[:-1]])
print(wand)
",12,"word = input()
wand = """".join([i for i in word[:-1]])
print(wand)
",12,"word = input()
wand = """".join([i for i in word[:-1]])
print(wand)
",12
"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]

list3 = [i for i in list1 if i in list2]

print(list3)
",0.6,"list 1 = [1, 2, 3, 4]
bist 2 = [3, 4, 5, 6]
in lista]
bist 3 = [i for i in list 1 if i in
Print (list 3)",27,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list 1 = $ (1,2,3,4)
list2=[3,4,5,6]
=
list 3= [i for i in list 1 if i in listz]
print(list3)",20,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]

list3 = [i for i in list1 if i in list2]
print(list3)
",1,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]

list3 = [i for i in list1 if i in list2]
print(list3)
",1,"list 1 = [ 1, 2, 3, 4]
bist 2 = [ 3,4,5,6]
list 3 = Ji par i in list 1 if i in listz]
Print (list 3)",20,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"\( \begin{array}{l}\text { list } 1=[1,2,3,4] \\ \text { bist } 2=[3,4,5,6] \\ \text { fist } 3=[i \text { for } i \text { in list } 1 \text { if } i \text { in list }] \\ \operatorname{Pint}(\operatorname{list} 3)\end{array} \)",160,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list_1 = [1, 2, 3, 4]
list_2 = [3, 4, 5, 6]
list_3 = [i for i in list_1 if i in list_2]
print(list_3)
",8
"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]

even = [i for i in list1 if i % 2 == 0]

print(even)
",0.6,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [ è for i in lists if */2==4]
Print (even)",15,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = (123456789)
even = [i for i in list1 if i%2==0]
Print (even)",27,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list 1 = [1, 2, 3, 4, 5, 6, 7, 8,9]
even = [è for i in list 1 if i|2=]
Print (even)",16,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"\( \begin{array}{l}\text { list } 1=[1,2,3,4,5,6,7,8,9] \\ \text { even }=[i \text { for } i \text { in list } 1 \text { if } i \% 2==] \\ \text { Print (even) }\end{array} \)",116,"list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list_1 if i % 2 == 0]
print(even)
",4,"list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list_1 if i % 2 == 0]
print(even)
",4,"list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list_1 if i % 2 == 0]
print(even)
",4
"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0.6,"def main ():
year
= int (input())
if (year % 4 == 0 and year % 100 != 0):
print (""True"")
elif (year % 100 == 0 and year % 400 ==0):
print (""True"")
if
else:
print (""False"")
name__
main ()
!!
>>
_main__'",78,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main ():
year = int (input())
if (year% 4==0 and year % 100 != 0):
print (""True"")
elif (year % 100 ==0 and year % 400 == 0):
print (""True"")
else:
print (""False"")
if -- name "" -- __main__"":
main()",68,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main ():
year = int (input ()
if ( year % 4 == 0 and year % 100 ! = 0):
print (""True"")
elif (year % 100 == 0 and year % 400=0):
print (""True"")
else:
print (""False"")
if
__ name __== "" __ main_"".
main ()",71,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if (year % 4 == 0 and year % 100 != 0) or (year % 100 == 0 and year % 400 == 0):
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",32,"def main ():
\[
\text { year }=\operatorname{int}(\operatorname{input}())
\]
if (year \% \( 4==0 \) and year \( \% 100 !=0 \) ):
print (""True"")
elif (year \( \% 100==0 \) and year \( \% 400==0 \) ):
print (""True"")
else:
print (""False"")
if __name__ = = ""_main_."":
\( \operatorname{main}() \)",133,"def main():
    year = int(input())
    if (year % 4 == 0) and (year % 100 != 0):
        print(""True"")
    elif (year % 100 == 0) and (year % 400 == 0):
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",8,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0
"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0.6,"from
def
def
karel. stanford kavel import
main ():
build_column ()
step- up ()
build column()
step-up ()
build- column ()
def
step-up()
build- column()
build
column ():
turn-left()
build- beeper ()
build- beeper ()
build_ beeper ()
build-beeper ()
put - beeper ()
go - back()
turn - left ()
det build - beeper ():
put- beeper ()
move ()
go-back ():
turn around ()
step-up ()
def turn around ():
turn - left()
turn
left()
def step-up():
move ()
move ()
move ()
move ()
if - name
main ()
==
main
*",225,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def step_up():
    move()
    move()
    move()
    move()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",102,"from karel.stanford.karel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def step_up():
    build_column()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",26,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def step_up():
    move()
    move()
    move()
    move()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",102,"from karel. . stanford kavel import
def main () :
build - column ( )
step - up ()
build - column()
step - up()
build. column ()
step - up()
build - column (
def
build - column ()
turn - left ()
build- beeper ( )
build beeper ()
build - beeper ()
build. - beeper ()
put - beeper ()
go - back ()
turn - left ()
def
build - beeper ():
put - - beeper ( )
move ()
det
go - - back() :
turn around ()
-
step - up ()
def turn - around ()
turn - left ()
turn - left ()
def step - up' () :
move ()
move ()
move ()
move ()
if 1 name
1 main :
main ()",252,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()


def step_up():
    move()
    move()
    move()
    move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",81,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()


def step_up():
    move()
    move()
    move()
    move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",81,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    move()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",7,"from karel. stanford kavel import *
def main ():
build-column ( )
step -up ( )
build- column ()
Step -up ()
build- column ( )
Step -up ()
build - column ()
def
build - column ( ) :
turn - left ( )
build - beeper ()
build - beeper ( )
build - beeper ( )
build - beeper ( )
put - beeper ( )
go - back ()
turn- left ( )
def
build - beeper ( ) :
put - beeper ()
move ()
det
go - back ():
turn- around ( )
step -up ()
dex
turn- around () :
turn - left ()
turn - left ()
dex
step-up ():
move ()
move ( )
move ( )
move ( )
-
if - name _ == - main _:
main ( )",251,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0,"from karel. Stanfordkavel import * def main ():
build_column ()
step - up ()
build - column ()
Step - up ()
build_column ()
Step - up ()
build - column()
def build - column ():
turn - left ()
build - beeper ()
build - beeper ()
build - beeper ()
buitd - beeper ()
put - beeper ()
go - back ()
turn - left ()
det build-beeper ():
put - beeper ()
move ()
det go-back ():
turn - around ()
step - up ()
dex turn - around () :
turn - left ()
turn - left()
def step-up ():
move ()
move ()
move ()
move ()
if _ name _ \( == \) 'main _ :
main ()",233,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0,"from karel.Stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",1,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0
"def main():
    input_string = input('Input string: ')
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print ret

if __name__ == '__main__':
    main()",0.6,"def main ():
if
input_ string = input ('Input string; ')
11 11
ret =
for ch in input-string
ret
print ret
71
= ret + ch. uppert)
name__ =
main ()
main
20 07203",78,"def main():
    input_string = input(""Input string: "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",8,"def main():
    input_string = input(""Input string: "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",8,"def main():
    input_string = input(""Input string: "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",8,"def main () :
input - string = input(' Input string ')
ret = 11 11
for ch in input - stiting
ret = ret + ch. upperl )
print ret
1
1
if
name
main
-
-
main
()",66,"def main():
    input_string = input(""Input string "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9,"def main():
    input_string = input(""Input string "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9,"def main():
    input_string = input(""Input string "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9,"def main () ;
input_ string = input ( Input string:')
ret = "" ""
for ch in input string
ref = ret + ch.upper()
print ref
if __ name __ =
1
1
- -
main
--
main ( )",57,"def main():
    input_string = input(""Input string:"")
    ret = "" ""
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",10,"def main():
    input_string = input(""Input string:"")
    ret = "" ""
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",10,"def main():
    input_string = input(""Input string:"")
    ret = "" ""
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",10,"def main ():
\[
\begin{array}{l}
\text { input_string = input ('Input string! ') } \\
\text { ret }="" 11
\end{array}
\]
for ch in input.string
\[
\text { ret }=\text { ret }+ \text { ch. upperd) }
\]
print ret
if name \( \operatorname{main}( \) )",122,"def main():
    input_string = input(""Input string! "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9,"def main():
    input_string = input(""Input string! "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9,"def main():
    input_string = input(""Input string! "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9
"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",0.6,"O
O
O
from Kare!. Stamford Karel impert
def main ():
mere to beeper ()
pick beeper ()
turn-around ()
return to_start()
def muere to beepet():
while front_is_clear ():
Move
turn_right()
more()
turu-left()
More()
det turn around ():
turn left ()
turn left ()",106,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from Karel. stanfordKarel import
def main ():
move to beeper ()
pick_beeper()
turu_around()
Return to-start()
def more to beeper() :
while front-is-clear ():
move
turn_right()
more(
turn-left()
more()
det turu around ();
turn_ left ()
turu left ()",93,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()


def more():
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()


def return_to_start():
    while front_is_clear():
        move()
    turn_left()
",93,"from Karel. StanfordKarel import
def main ():
move_to_beeper ()
pick-beeper ()
turn-around()
return_to_start ()
def more_to_ beeper () :
While front-is-clear ();
move
turn_Right ()
move ()
turn-left ()
move ()
def turu_around ():
tura_left ()
turn left ()",92,"from Karel.StanfordKarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",5,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from Karel. stanfordKarel import
def main ():
move to beeper ()
pick-beeper ()
turu_around ()
ceturn to_start()
def more to beeper ():
while frout_is_clear (1):
move
turn_right ()
more ()
turu-left()
morre()
def turu_around ():
turu left ()
turu left ()",96,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2
"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",0.6,"from kanel.stanfordkarel import
def main ():
while front_is_ clear():
bill tower ()
def fill_tower ():
-
while front_is_ clear ():
put-beeper ()
move()
put_beeper()
column_return ()
def column_return ():
if
def turn around ():
while front_is_blocked ():
turn-around()
while front_is_ clear():
move ()
next-tower()
-
def next tower ():
if right_is_dean ():
turn_right()
move()
turn_right()
for i in range (2):
turn_left()
—
else:
turn around ()
while front_is_dear():
def turn_right():
-
move()
-
name
main ()
for i in range (3):
turn_left()
_main_':",323,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
        for i in range(2):
            turn_left()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",85,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    turn_around()
    while front_is_clear():
        move()
    next_tower()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
        for i in range(2):
            turn_left()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_around():
    for i in range(2):
        turn_left()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",183,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
        put_beeper()
    column_return()


def column_return():
    turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
        for i in range(2):
            turn_left()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",89,"from karel. stanfordkard import
def main ()
while front. is clear () :
fill_tower()
def fill tower () :
while front - is - clean ():
put - beeper ()
move ()
put_beeper()
column_return() -
def columm_return(): -
while front_is_blocked() :
turn-around()
while front_is_clear()
move()
next_tower()
def turn around()
for i in range (2) :
turn-left()
def next tower() :
if right is-clean - ( ) :
turn -right()
move ()
turn_right()
else :
turn around()
while front_is_dear():
move()
def turn - right ():
for i in range (3) :
turn_left(c)
if - name == I main I :
main ()",238,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
    while front_is_clear():
        move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",8,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from kanel stanfordkard import *
det main () :
while front_is_clear ():
bill_tower ( )
det fill-tower ():
while front-is-clean ():
put-beeper ()
move ()
put_beeper ()
column_return ()
def column_return ():
while front_ is_blocked ():
turn-around ()
while front_is_clear () :
move ( )
next_tower ()
det turn-around ():
for i in range (2) :
turn-left ( )
det next_tower ():
if right_is_clean ():
turn-right ( )
move()
turn-right ()
else :
turn-around ()
while front-is-clear ():
move( )
def turn-right ():
for i in range (3):
turn_left ()
if
- name _
== '_ main
1
..
main ()",243,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
        put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
    while front_is_clear():
        move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",12,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        build_tower()


def build_tower():
    while front_is_clear():
        put_beeper()
        move()
        put_beeper()
        column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
    while front_is_clear():
        move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",22,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()
        next_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",21,"from karel.stanfordkarel import *
def main ():
while front_is_dear () :
fill_tower ()
def fill_tower ():
while front_is_dear ():
put-beeper ()
move ()
put_beeper ()
column_return ()
def colurn-return () :
while front_is_blocked ( ):
turn-around ()
while front_is_clear () :
move ()
next_tower ()
def turn_around () :
for \( i \) in range (2):
turn-left ()
def next_tower ( ) :
if right_is_dear ( ):
turn_right ()
move ()
turn_right ()
else:
turn_around( )
while front_is_dear ():
move ()
def turn_right () :
for \( i \) in range (3):
turn_left ()
if _ name \( ==1 \) _ main _ '
main ()",245,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",0
"def filter_string_a(string):
      string.sort()
      filtered_string_list = [ ]
      for str in string:
             if str.startswith(""a""):
                    filtered_string_list.append(str)
       return filtered_string_list
input_string = [""apple"", ""banana"", ""avacado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)",0.6,"der fitters string - a (string);
sont ()
string.
filtered_string_list = [3
toru
1
in
string:
stru. start with (""a"");
stru
filtreried_rodring-lirt: append
returen filtered_string-lit
(stru)
imput_string = [""apple"", ""bunana"", ""avacad""
""cheveny"", ""apriest""""]
output = filtern-string- a (imput_string)
print (output)",131,"def filter_string_a(string):
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",48,"def filter_string_a(string):
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",48,"def filter_string_a(string_list):
    filtered_string_list = []
    for stru in string_list:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",49,"def - a (string):
string. sort ()
filtered -string-list = -[I
for stru in string :
if stru startswith (""a""):
append (str))
return
input_ string z [ apple"" ""bunana"", ""avacado)
""chevry"", ""apricot""]
output fifter z string a (input-ntuing)
print (output)",151,"def filter_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""chevy"", ""apricot""]
output = filter_a(input_string)
print(output)
",46,"def a_string(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
output = a_string(input_string)
print(output)
",46,"def filter_a(string_list):
    string_list.sort()
    filtered_string_list = []
    for stru in string_list:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
output_filter = filter_a(input_string)
print(output_filter)
",63,"det filter-string-a (string) :
string. sort ()
filtered- string-list = []
foru stre in strung :
if stru. startswith (""a""):
filtered-string-lint: append
( stru)
returen filtered-string- list
input_string = \""apple"", ""bunana"", ""avacado
""cheving "" ""apricot""]
Output = filter-string-a (input_string)
print (output)",104,"def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",30,"def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""chewing"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",34,"def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""chewing"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",34,"def filteru-string-a (ntring):
string. sont ()
filtered-string_list \( =[] \)
for stre in atring:
if stru. Ptark with (""an):
fiterced-atring-lint. append (stru)
return filtered-rtring-lirst
imput_rting \( z \) ""apple"", ""bunana"", ""avacado"" ""cherry"" ""apricot"" pring (output)",146,"def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
print(output)
",69,"def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
print(filter_string_a(input_string))
",51,"def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",30
"def main():
  while front_is_clear():
      move()
  if front_is_blocked():
      turn_around()
  move()
  turn_left()
  move()
  pick_beeper()
  turn_left()
  turn_left()
  while front_is_clear():
      move()
  if front_is_blocked():
      turn_around()
  move()
  turn_around()

    
def turn_around():
    for i in range(3)
        turn_left ()",0.6,"def main:
While front_is_clear();
move()
if front_is_blocked ().
turn-around ()
move ()
turn_left()
move ()
pick_beeper ()
turn - left().
turn_left()
while front is clear ():
Move ()
if front_is_ blocked ():
turn around ().
move()
turn
around ()
def turn around ():
turn- lieft
Left
for i in range (3)
()",117,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    turn_left()
    for i in range(3):
        left()
",92,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    turn_left()
    turn_left()
    for i in range(3):
        pass
",113,"def main():
    while front_is_clear():
        move()
        if front_is_blocked():
            turn_around()
            move()
            turn_left()
            move()
            pick_beeper()
            turn_left()
            turn_left()
    while front_is_clear():
        move()
        if front_is_blocked():
            turn_around()
            move()
            turn_around()


def turn_around():
    turn_left()
    turn_left()


for i in range(3):
    pass
",162,"def main :
While front is clearc):
move
if front _is_blocked ():
turn_around ()
move ( )
turn_left ()
move ()
pick- beeper()
turn - left )
turn - left()
while front is clear ( ):
move ( )
if front is - blocked ()
turn- around ()
movel )
turn around ()
def turn-around ():
for i in range (3)
life ( )",120,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    for i in range(3):
        lift()
",77,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    for i in range(3):
        lift()
",77,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    for i in range(3):
        turn_left()


main()
",79,"def main :
While front-is-clear():
move ( )
if front_is_blocked ().
turn-around ()
move ()
turn_left ( )
move ()
pick-beeper ()
turn- left ()
turn-left ()
while front_is_clear ()!
move ( )
if front_is _ blocked ( ).
turn - around ( )
move ()
turn around ()
def turn-around ():
for i in range (3)
left ()",112,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    for i in range(3):
        left()
",76,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    for i in range(3):
        left()
",76,"def main():
    while front_is_clear():
        move()
        if front_is_blocked():
            turn_around()
            move()
            turn_left()
            move()
            pick_beeper()
            turn_left()
            turn_left()
            while front_is_clear():
                move()
                if front_is_blocked():
                    turn_around()
                    move()
                    turn_around()


def turn_around():
    for i in range(2):
        turn_left()
",168,"def main:
While front_is_clearc):
move ()
if front-is-blocked ():
tuin-around()
move ()
turn-left ()
move ()
pick-beeperc)
tuin-left()
tuin-left()
while front_is clear ():
move ()
if front-is-blocked ():
turn-around ()
move()
turn around ()
def turn-around ():
for in range (3)",114,"
def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_left()
    move()
    pick_beeper()
    turn_left()
    turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_around()

def turn_around():
    for i in range(3):
",59,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_left()
    move()
    pick_beeper()
    turn_left()
    turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_around()


def turn_around():
    for i in range(2):
        turn_left()
",40,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_left()
    move()
    pick_beeper()
    turn_left()
    turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_around()


def turn_around():
    for _ in range(2):
        turn_left()
",41
"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return False
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",0.6,"-def is_leap-year (year);
if year % 4= = 0!
is yeare °6 100 = = 0:
1 year 1.400.
if
return. Trive
0:
ebbe:
return false
else:
else:
return false
return false
def main ():
yeare = int Cinput (""Enter a year: ""))
is_ leap - is_ leap year (year)
print (is-leap)
if name_
maino
==
11
main"":",185,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",9,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is - leap-year (year):
if year % 4 == O:
if year % 100 = O:
if year % 400 = = O:
return True
else:
return False
else:
return False
else:
return False
def main ():
year = int (input (""Enter a year: ""))
is- leap = is_ 1 eap-year (year)
print (is_ leap)
if 1 name = -"" main
"":
if
main()",153,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return False
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",0,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return False
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",0,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is-leap year (year):
if years % 4 == 0'
if year % 100= = 0:
year % 400 = = 0:
return True
else:
return False
else:
return False
else:
return False
def main ().
year = int (input (""Enter a year: "")
is- leap= is-leap- year (years)
print (is-leap)
if
name_ = ""_main_"":
main()",154,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is-leap-year (year):
if yeare \( \% 4==0 \) :
if year \( \% 100=0 \) :
if year \( \% 400==0 \) :
return. True
else:
return False
else:
retur false
else:
ruturn False
def \( \operatorname{main}() \) :
yearc = int (input (""Enter a year: ""))
is teap = is leap-year (year)
print (is_leap)
if \( \operatorname{mame}_{-}=="" \) main "":
main()",202,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return False
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",0,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4
"def main():
    print("" problem - 5 "")
    print(""-----------------"")
    numb = int(input(""write an  number: ""))
    mak_list = [int(x) for x in str(numb)]

    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the number's digit: "", add_numb)


if __name__ == ""__main__"":
    main()
",0.6,"def main ():
print (""problem - 5
---"")
print (""---
numb = int (input (write an integer number:
mak_list = [int (x) for x in sts (numb)]
add-numb = 0
fon is in mak_list:
-5 "")
add_numb + = i
print (""Sum of the numbers:
digit
if_name__
main()
=
u
main__""
11
')
add_numb)",126,"def main():
    print(""Problem - 5 ---"")
    numb = int(input(""Write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",46,"def main():
    print(""problem - 5 ---"")
    num = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(num)]
    add_num = 0
    for i in mak_list:
        add_num += i
    print(""Sum of the numbers: "", add_num)


if __name__ == ""__main__"":
    main()
",49,"def main():
    print(""problem - 5"")
    print(""---"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",31,"def main() :
print ("" ""problem -5 "")
"")
numb = int (input (write an integer number: ')
print (""
mak list = [ int (x) for x in str (numb)]
add-numb = 0
for is in mak_list :
add-numb + = i
print (""sum of the number's: "", add-numb)
digit
if name = = ""_ main__""
main()",116,"def main():
    print(""problem -5 "")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",49,"def main():
    print(""problem -5 "")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""sum of the number's: "", add_numb)


if __name__ == ""__main__"":
    main()
",48,"def main():
    print(""problem -5"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""sum of the number's: "", add_numb)


if __name__ == ""__main__"":
    main()
",49,"def main () :
print (""problem - 5 "")
print (""-
rumb = int (input ('write an integer number:
mak_list = [int (x) for x in str (numb)]
add-numb = 0
for is in mak-list :
add-numb +=i
print (""Sum of the number's:
"", add_numb)
digit
if_ name __ = =
-- main __:
main()",109,"def main():
    print(""Problem - 5"")
    numb = int(input(""Write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",50,"def main():
    print(""problem - 5"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the number's digits: "", add_numb)


if __name__ == ""__main__"":
    main()
",42,"def main():
    print(""Problem - 5"")
    numb = int(input(""Write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",50,"def main ():
print (""problem - 5 "")
print (""............"")
numb = int (input ('write an integer number: ')
mak_list \( =[ \) int \( (x) \) for \( x \) in rtr (numb) \( ] \)
add-numb \( =0 \)
fon is in mak-list:
add_numb \( +=i \)
print (""Sum of the numbers: "", \( a d d \)-numb)
If _ name _ \( == \) ""- main_.""
main()",142,"def main():
    print(""problem - 5 "")
    print(""............"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",33,"def main():
    print(""problem - 5 "")
    print(""............"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",33,"def main():
    print(""problem - 5 "")
    print(""............"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",33
"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",0.8,"int (input (""Enter a number: "")
num =
Ans =)
while num > 1:
Ans * = num
num - =|
1
return Ans",29,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int input C ""Enter a number: 11)
Ans = )
while num > / :
Ans * = num
mm - = /
return Ans",23,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",0,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",0,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int (input (""Enter a number: ""
Ans =1
while num > 1 :
Ans * = num
num -= 1
return Ans",16,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int (input (""Enter a number: "")
\[
\text { Ans = } 1
\]
while num \( >1 \) :
Ans \( *= \) num
mum - \( =1 \)
retirn Ans",45,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",0,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",0,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",0
"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
    turn_right()
    move()
    turn_left()
    move()


# This function return to Karel's starting point.
def go_back():
    for i in range(2):
        turn_left()
    for i in range(3):
        move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left


if __name__ == ""__main__"":
    main()
",0.8,"from Karel. stanfordkarel import *
#This
program
a beeper and
def main ():
if
Karel pick
up
back into her house,
#Move to the beeper.
makes
go
move beeper ()
#Pick the beeper up.
beeper ()
pick
#Return to Karel's starting point.
go-back ()
#This function moves Karel to the beeper.
def move-beeper ():
for i in
(2):
range
move()
turn right()
move()
turn left()
move()
# This function return to Kard's starting
def go-back();
for ?. in range
turn-left()
for i
name
main ()
move()
turn_right()
move (f
turn-right()
def turn_right()
for i in range (3) =
turn-
left
rang
e (3);
==
main____'",257,"from karel.stanfordkarel import *

# This program makes a beeper and
def main():
    # Move to the beeper.
    move_to_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_to_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# This function return to Karel's starting
def go_back():
    for i in range(2):
        turn_left()
        move()
        turn_right()
        move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",109,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_to_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_to_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# This function returns to Karel's starting point.
def go_back():
    for i in range(2):
        turn_left()
        for i in range(2):
            move()
            turn_right()
            move()
            turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",58,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_to_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_to_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# This function returns Karel to her starting point.
def go_back():
    for i in range(2):
        turn_left()
        for i in range(2):
            move()
        turn_right()
        move()
        turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",55,"from Karel. stanfor dkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main () :
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick - - beeper
# Return to Karel's starting point.
go back ( )
# This function moves Karel to the beeper.
def move - -beeper ( ) :
for i in range (2) :
move ()
torn right ()
move ( )
turn left( )
movel )
# this function return to Karel's starting poin
def go-back() ; for i. in range (2) :
turn- left ()
for i in rang e (3) :
move()
turn-right
()
turn move() - right ()
def turn right ():
for i in range (3)
turn - left
if
name
main
main ()",195,"from karel.stanfordkarel import *

# This program makes Karel pick up
# a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# this function return to Karel's starting point
def go_back():
    for i in range(2):
        turn_left()
    for i in range(3):
        move()
        turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",46,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.


def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# This function returns Karel to her starting point.
def go_back():
    for i in range(2):
        turn_left()
    for i in range(3):
        move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",30,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_to_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_to_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# this function return to Karel's starting point
def go_back():
    for i in range(2):
        turn_left()
        for i in range(3):
            move()
        turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",54,"from Karel. stanfordkarel import *
# This program makes Kavel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick- beeper ()
# Return to Karel's starting point.
go - back ()
# This function moves karel to the beeper.
def move-beeper ():
for i in range (2):
move ()
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back ();
For ?. in range (2):
turn-left ()
for i in range (3):
move()
turn right ()
move (),
turn-right ()
def turn-right () ?
for i in range (3):
turn-left
if -- name == ' -- main_';
main ()",177,"from karel.stanfordkarel import *

# This program makes Karel pick up
# a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()
    # This function moves karel to the beeper.


def move_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()
    # this function return to Karel's starting point


def go_back():
    for i in range(2):
        turn_left()
        for i in range(3):
            move()
        turn_right()
        move()
        turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",54,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# this function returns to Karel's starting point
def go_back():
    for i in range(2):
        turn_left()
    for i in range(3):
        move()
        turn_right()
        move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",30,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# This function returns to Karel's starting point.
def go_back():
    for _ in range(2):
        turn_left()
        for i in range(3):
            move()
        turn_right()
        move()
        turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",40,"from Karel.stanfordkarel import * \#This program makes Karel pick up a beeper and go back into her house. def main ():
\#Move to the beeper. move_beeper () \# Pick the beeper up. pick - beeper () \# Return to Karel's starting point. go-back ()
\#This function moves Karel to the beeper. def move-beeper ():
for \( i \) in range (2):
move ()
turn right ()
move ()
turn leftc)
movec)
\# this function refurn to Karel's starting poin def go-back () ;
for i, in range (2):
for \( i \) in range \( (3) \) :
move ()
\[
\text { move ( } \text { tor }^{2} \mathrm{righ}(\mathrm{C})
\]
def turn-right () ?
for \( i \) in range (3):
turn-left
\[
\text { if } \operatorname{mame}_{\operatorname{man}()}==1 \ldots \text { main } \ldots
\]
\( m \operatorname{ain}() \)",306,"from karel.stanfordkarel import *

# This program makes Karel pick up
# a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
    turn_right()
    move()
    turn_left()
    move()


# This function returns to Karel's starting point
def go_back():
    for i in range(2):
        for i in range(3):
            move()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",39,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
    turn_right()
    move()
    turn_left()
    move()


# This function returns to Karel's starting point
def go_back():
    for i in range(2):
        for i in range(3):
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",61,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_to_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_to_beeper():
    for i in range(2):
        move()
    turn_right()
    move()
    turn_left()
    move()


# this function return to Karel's starting point
def go_back():
    for i in range(2):
        for i in range(3):
            move()
        turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",50
"def main():
    # input
    my_word = input(""Enter the original word: "")

    # function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is"" + "" "" + '""' + reversed_word + '""')


# Helper function
def reverse(word):
    # reversed_word
    new_word = """"
    # char by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word


if __name__ == ""__main__"":
    main()
",0.8,"def main ()
#imput
my _ word = imput(""Entlo- The original wood: 7)
#Function calling
reversed word = reverse (my-word)
Print ('The
reversed wood is 1+`
#Helper FunctTION
def
Lif
reverse (woord):
#reversed -won-d
mew-won-d=""/
☆ ster by chan-
for chan- im word:
new-woo-d
return
return new_wond
mame
main()
A/
+revered_word +
=char + new-wood",210,"def main():
    # input
    my_word = input(""Enter the original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is "" + reversed_word)


# Helper Function
def reverse(word):
    # reversed_word
    new_word = """"
    # iter by char
    for char in word:
        new_word = char + new_word

    return new_word


# name
main()
",60,"def main():
    # input
    my_word = input(""Enter the original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is "" + reversed_word)


# Helper Function
def reverse(word):
    # reversed_word
    new_word = """"
    # step by char
    for char in word:
        new_word = char + new_word
    return new_word


main()
",68,"def main():
    # input
    my_word = input(""Enter the original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is "" + reversed_word)


# Helper Function
def reverse(word):
    # reversed word
    new_word = """"
    # iterate by character
    for char in word:
        new_word = char + new_word
    return new_word


# main function call
main()
",72,"def main () :
# imput
my wond = inpuTC ""Enter THe original wond:
7)
#
Function calling
reversed_word = reverse (my - -word )
print C' the reversed Wood is + , + "" , + reversd-wordt 1/2)
# Helpen Function
def reverse (wond) :
# revenued -wond
new -wohd - = "" ""
# stert by chan-
for chan- in word :
new-word = Char + new-word
# retun-m
retuntm new_wond
if
name == main :
mainc)",150,"def main():
    # input
    my_word = input(""Enter The original word: "")

    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is "" + reversed_word)


# Helper Function
def reverse(word):
    # reversed-word
    new_word = """"

    # start by char
    for char in word:
        new_word = char + new_word

    # return
    return new_word


if __name__ == ""__main__"":
    main()
",26,":
def main():
    # input
    my_word = input(""Enter The original word: "")

    # Function calling
    reversed_word = reverse(my_word)
    print('The reversed word is: ', reversed_word)

# Helper Function
def reverse(word):
    # reversed_word
    new_word = """"
    # start by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word

if __name__ == ""__main__"":
    main()
",30,"def main():
    # input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is "", reversed_word)


# Helper Function
def reverse(word):
    # reversed_word
    new_word = """"
    # start by char
    for char in word:
        new_word = char + new_word
    # return new_word
    return new_word


if __name__ == ""__main__"":
    main()
",35,"def main ( ) :
Limput
my _ word = input( Enten- The original word : 7
#Function calling
reversed- word = reverse (my-word )
Print ( the reversed word is (+) ""+""""+reversed-wordt""}
# Helpen- Function
def sevense
be (word) :
# reversed - word
mew-word = """"
A chen by chan-
For- chan- in word:
new-word = Char + new-word
# return
return new_word
name-
main 1 :
main ()",149,"def main():
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)


# Helper Function
def reverse(word):
    # reversed word
    new_word = """"
    # char by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word


if __name__ == ""__main__"":
    main()
",34,"def main():
    # Input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)


# Helper Function
def reverse(word):
    # reversed word
    new_word = """"
    # A char by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word


if __name__ == ""__main__"":
    main()
",25,"def main():
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)


# Helper Function
def reverse(word):
    # reversed - word
    new_word = """"
    # A char by char-
    for char in word:
        new_word = char + new_word
    # return
    return new_word


if __name__ == ""__main__"":
    main()
",39,"defmaim ():
\&imput
\( m y \)-wond = impuT (""EnTen- THe onigimal wond: "")
Function calling
\# Helpen-Fumction
\[
\begin{array}{l}
\text { def nevense (won-d): } \\
\text { * revensed -won-d } \\
\text { mew-won-d = ""1 } \\
\text { X stent by chan- } \\
\text { for chan- im vond: } \\
\text { mew-won-d = chan }+ \text { mew-wond } \\
\text { * } r \text {-etun-m } \\
\text { nietuntm new-won-d } \\
\end{array}
\]",298,"def main():
    my_word = input(""Enter the original word: "")
    # Function calling
    # Helper Function
    def reverse(word):
        reversed_word = """"
        for char in word:
            reversed_word = char + reversed_word
        return reversed_word
",224,"def main():
    my_word = input(""Enter the original word: "")
    # Function calling
    # Helper Function
    def reverse(word):
        reversed_word = """"
        for char in word:
            reversed_word = char + reversed_word
        return reversed_word
",224,"def main():
    my_word = input(""Enter the original word: "")
    reversed_word = reverse(my_word)
    print(reversed_word)


# Helper Function
def reverse(word):
    reversed_word = """"
    for char in word:
        reversed_word = char + reversed_word
    return reversed_word
",180
"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial for "" + str(input_nmb) + "" is "" + str(result))
",0.8,"impur-number =
int(impur (""Enter number'))
val = inpur-number
result isput_number
while (val > 1):
Val - 1
result ☆ val
+
Print ('factorial for 't shy (input-node]
+ srr (result))
val
[₁
-result",80,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val -= 1
    result *= val

print(""factorial for "" + str(input_number) + "" is "" + str(result))
",21,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val -= 1
    result *= val

print(""factorial for "" + str(input_number) + "" is "" + str(result))
val = result

return val
",46,"input_number = int(input(""Enter number: ""))
val = input_number
result = input_number
while val > 1:
    val -= 1
    result *= val

print(""Factorial for "" + str(input_number) + "" is "" + str(result))
",24,"impur-number =
inr(inpur ('Enter number')
val = inpur-number
result input-number
while (val > 1) :
[
val =
Val - 1
result = result it val
Print ('factorial fir't shr(imput-nula)
Srr (result))",59,"
import_number = 
int(input('Enter number'))
val = import_number
result = import_number
while (val > 1) :
    val =
    val - 1
    result = result * val
print ('factorial for', str(import_number))
str (result)

",45,":
input_number = int(input('Enter number'))
val = input_number
result = input_number
while (val > 1):
    val = val - 1
    result = result * val
print ('factorial for ' + str(input_number) + ' is ' + str(result))
",14,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial for"", str(input_number), ""is"", str(result))
",12,"inpur_number =
int(impur (""Enter number""
Val = inpur-number
result = input-number
While (val>1):
val =
val -1
result = result & val
print ('factorial f& + sur(input-node)
+ spr (result))",50,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result & val
print(""factorial f&"" + str(input_number) + str(result))
",15,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial of "" + str(input_number) + "" is "" + str(result))
",5,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial of "" + str(input_number) + "" is "" + str(result))
",5,\( \begin{array}{l}\text { inpur-number = } \\ \text { inr(inpur('Entar number')) } \\ \text { val }=\text { impur-number } \\ \text { resalt - roppur-number } \\ \text { while (val }>1 \text { ): } \\ {\left[\begin{array}{c}\text { val }= \\ \text { result }=\text { result }-1 \\ \text { val }\end{array}\right.} \\ \text { pront ('factobial for' + shr(impat-nob) } \\ +\operatorname{srr}(\text { result })) \\\end{array} \),273,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial for "" + str(input_number) + "" is "" + str(result))
",3,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial for "" + str(input_number) + "" is "" + str(result))
",3,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val -= 1
    result *= val
print(""factorial for "" + str(input_number) + "" is "" + str(result))
",20
"def main():
    num = input(""input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",0.8,"def main ():
num = input (""imput :"")
sum
=
O
for nin num =
sum t
print (sum)
=
int (n)",49,"def main():
    num = input(""input :"")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",2,"def main():
    num = input(""input :"")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",2,"def main():
    num = input(""Input :"")
    summ = 0
    for n in num:
        summ += int(n)
    print(summ)
",6,"def main () :
num = input (""Input: "")
sum = 0
for n in num i
sum + = int (n)
print (sum)",33,"def main():
    num = input(""Input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main():
    num = input(""Input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main():
    num = input(""Input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main () :
num = input (""Input : "")
sum = 0
for n in num :
sum + = int (n)
print (sum)",34,"def main():
    num = input(""Input : "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",2,"def main():
    num = input(""Input : "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",2,"def main():
    num = input(""Input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def \( \operatorname{main}(C) \) :
\[
\begin{array}{l}
\text { num }=\text { input (""input: "") } \\
\text { sum }=0
\end{array}
\]
for \( n \) in num:
\[
\operatorname{sum} t=\operatorname{int}(n)
\]
print (sum)",132,"def main(C):
    num = input(""input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main(C):
    num = input(""input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main(C):
    num = input(""input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1
"def main():
    num = input(""enter the number you want to add"")
    sum = 0
    for i in str(num):
        sum = sum + int(i)
    print(""sum of the value you entered is"", sum)
",0.8,"def main (s.
()!
61508x08 09
0818 TU O sloj toč
num= Impot (""enter the number you want to add)
поше
Inpri
som = 0 101
zgnivoe nuovesimixam
=0
(AD) tizoged to stopilitie nod ovoseido gnieod
aliotab ort eromeH ab10001 100 ot ti of no blert ezabelą - moosoo ucy to noilomitnoo ei tohol zid
for i in str(num): com
35100 suzel
8181882405
Sum=somt int (i)
edmult inucA
telti tuossA
""mis
Print (""sum of the value you entered is, son)
HILOM
00.000,82
log
alpä yliutoM
noitq Inomseudaid 12915ml
ASOS SS VOM
noitosilofigo inayo?
LF1",375,".python
def main():
    num= input(""enter the number you want to add: "")
    sum = 0
    for i in str(num):
        sum = sum + int(i)
    print(""Sum of the values you entered is: "", sum)
",15,"def main():
    num = input(""enter the number you want to add"")
    Sum = 0
    for i in str(num):
        Sum += int(i)
    print(""sum of the value you entered is"", Sum)
",10,"def main():
    num = input(""Enter the number you want to add: "")
    sum = 0
    for i in str(num):
        sum = sum + int(i)
    print(""Sum of the value you entered is:"", sum)


main()
",14,"SINOE
808
09
def main(s)
num= Imput (""enter the number you want to odd"")
UOV
Sum = 0
estimixom
(I)
tizoqeC
to
stooilities
@dno8
covocaiC
o
UOV
Andri
alinteb
310
enelt
ab10007
no
blort
mov
to
for i in str(mum);ass YDM
hedmuff
Sum-Sumt int (i)
reltiT
00.000,E8
Print (""sum of the Value you entered is, blan sum)
ASOS SS VDM
virutoM
noitosilation
;hoita
LA",227,"/python
def main():
    num = input(""Enter the number you want to add"")
    Sum = 0
    for i in str(num):
        Sum = Sum + int(i)
    print (""Sum of the value you entered is, "", Sum)
    return
",28,"def main():
    num = input(""Enter the number you want to add: "")
    Sum = 0
    for i in str(num):
        Sum = Sum + int(i)
    print(""Sum of the value you entered is: "", Sum)
    return
",21,":
def main():
    num = input(""enter the number you want to add: "")
    Sum = 0
    for i in str(num):
        Sum = Sum + int(i)
    print(""sum of the value you entered is "", Sum)
    return Sum

main()
",32,"def main () .
08168 TU
11
num = input (""enter the number you want to add )
Som=0
zpnivo
1ovoseidl o prieoorla
hotel
heH
ab
ot ti of no blerl gabelq
for è in str (num) :
Vi inucoDA
Sum = Sum+ int (i)
raltil touo >A
Print (""sum of the value you entered in, som)
00.000
.1
noitosil
noitgo Inemoanu
LFT",154,"def main():
    num = input(""enter the number you want to add: "")
    Sum = 0
    for i in str(num):
        Sum = Sum + int(i)
    print(""Sum of the value you entered is"", Sum)
    return
",18,"def main():
    num = input(""Enter the number you want to add: "")
    Sum = 0
    for i in str(num):
        Sum = Sum + int(i)
    print(""Sum of the values you entered is"", Sum)
",9,"def main():
    num = input(""Enter the number you want to add: "")
    sum = 0
    for i in str(num):
        sum = sum + int(i)
    print(""Sum of the digits you entered is:"", sum)
",11,"def main () :
num = Imput (""enter the number youcust to add"")
\[
\text { sum }=0
\]
for i in Mtr(num):
\[
\text { sum }=\operatorname{sum}+\operatorname{int}(i)
\]
Print (""sum or the valee yor entered is"", sum)",79,"def main():
    num = input(""enter the number you want to add"")
    sum = 0
    for i in str(num):
        sum = sum + int(i)
    print(""sum of the values you entered is"", sum)
",1,"def main():
    num = input(""enter the number you want to add"")
    sum = 0
    for i in str(num):
        sum = sum + int(i)
    print(""sum of the value you entered is"", sum)
",0,"def main():
    num = input(""Enter the number you wish to add: "")
    sum_val = 0
    for i in str(num):
        sum_val = sum_val + int(i)
    print(""Sum of the value you entered is"", sum_val)
",23
"user_input = input(""Write your string here: "")
upper = user_input.upper()
print(upper)
",0.8,"input = imput ( ""write your string
user_ input. upper (1
user_
upper = user_ input
print (upper)
here: "")",50,"input = input(""write your string"")
user_input = input.upper()
upper = user_input
print(upper)
",39,"user_input = input(""write your string here: "")
user_input = user_input.upper()
print(user_input)
",17,"user_input = input(""Write your string here: "")
upper = user_input.upper()
print(upper)
",0,"user_input = input(""write your string here:
1)
upper = user_input. upper(1
print (upper)",7,"user_input = input(""write your string here:"")
upper = user_input.upper()
print(upper)
",2,"# Fixed Code
user_input = input(""write your string here: "")
upper = user_input.upper()
print(upper)
",14,"user_input = input(""write your string here: "")
upper = user_input.upper()
print(upper)
",1,"user-input = input(""write your string here:
11
Upper = user_input. upper()
print (upper)",9,"user_input = input(""write your string here:"")
Upper = user_input.upper()
print(Upper)
",4,"user_input = input(""write your string here: "")
Upper = user_input.upper()
print(Upper)
",3,"user_input = input(""write your string here: "")
Upper = user_input.upper()
print(Upper)
",3,"user-input = imput (""write your string here: "") upper \( = \) user input upper ( ) print (upper)",18,"user_input = input(""write your string here: "")
upper = user_input.upper()
print(upper)
",1,"user_input = input(""write your string here: "")
upper = user_input.upper()
print(upper)
",1,"user_input = input(""write your string here: "")
upper = user_input.upper()
print(upper)
",1
"from karel.stanfordkarel import *

""""""
Karel should fill the whole world with beepers.
""""""


def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",0.8,"*
from Karel, starfordkarel import
han
kanel should fill the world with beepers.
1100
def main ():
#decomposition using a
function
#each associated
while left_ is_clear():
fill_one_row()
return_to_row_start()
activity
паме
for
move_up()
#rewrite code after white loop to overcome
# fencepost bug
one-how ()
fill_",121,"from karel.stanfordkarel import *

# karel should fill the world with beepers.
def main():
    # decomposition using a function
    # each associated
    while left_is_clear():
        fill_one_row()
        return_to_row_start()

    # activity name
    for move_up in range(1100):
        # rewrite code after while loop to overcome
        # fencepost bug
        one_row()
        fill_row()
",102,"from karel.stanfordkarel import *

# karel should fill the world with beepers.
def main():
    # decomposition using a function
    # each associated
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()


def fill_one_row():
    pass


def return_to_row_start():
    pass


def move_up():
    pass
",130,"from stanfordkarel import Karel


class Karel(Karel):
    def fill_the_world_with_beepers(self):
        self.move_to_wall()

    def move_to_wall(self):
        while self.left_is_clear():
            self.fill_one_row()
            self.return_to_row_start()
            self.move_up()

    def fill_one_row(self):
        # Fill a row with beepers
        pass

    def return_to_row_start(self):
        # Return to the start of the row
        pass

    def move_up(self):
        # Move up to the next row
        pass
",337,"from karel. stanfordkarel import
will
karel should fill the world with beepers.
1110
def main() :
# decomposition using a function name for
# each associated activity
while left_is-clean
retur_to_row- start()
fill_one-row()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill - one - -row()",105,"from karel.stanfordkarel import *

# karel should fill the world with beepers.
def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clean:
        return_to_row_start()
        fill_one_row()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",50,"from karel.stanfordkarel import *

# karel should fill the world with beepers.
def main():
    # decomposition using a function named for
    # each associated activity
    while left_is_clear():
        return_to_row_start()
        fill_one_row()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",48,"from karel.stanfordkarel import *

# karel should fill the world with beepers.
def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        return_to_row_start()
        fill_one_row()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",47,"from Karel. stanfordkarel import *
hun
Karel should fill the world with keepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()",79,".python
from karel.stanfordkarel import *

# Karel should fill the world with beepers.

def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",23,"from karel.stanfordkarel import *

# Karel should fill the world with beepers.


def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",14,"from karel.stanfordkarel import *

# Karel should fill the world with beepers.
def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",16,"from karel.stayfordkarel inport
IIII""
karel should fill the world with beepers.
""u u
\( \operatorname{def} \operatorname{main}() \) :
\# decomposition using a function rave for \# each associated activity while left-is_clear ():
fill-ore-row()
retur _to _ row_start \( ( \) )
nove_up ()
\# rewirite code after white loop to overcone \# fencepost bug
fill_one-row()",118,"from karel.stanfordkarel import *

""""""
karel should fill the world with beepers.
""""""


def main():
    # decomposition using a function for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",12,"from karel.stanfordkarel import *

""""""
karel should fill the world with beepers.
""""""


def main():
    # decomposition using a function rave for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after white loop to overcome
    # fencepost bug
    fill_one_row()
",10,"from karel.stanfordkarel import *

""""""
karel should fill the world with beepers.
""""""


def main():
    # decomposition using a function for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",12
"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0.8,"if
from karel.stanfordkarel import*
def main ()
move()
move()
turn_right()
move()
turn_left()
move()
-
pick-beeper()
return-home()
def return home()
turn-around()
move()
turn_right()
move ()
turn_left()
movel)
move()
turn_around ()
def turn_right()
for i in range (3):
turn-left()
def turn around ()
for i in range (2):
turn_left()
name.
main()
^_main_",144,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stamfordkaral import
def main()
move()
move()
turn-right(
move()
turn-left()
move()
pick. beeper()
return-home()
def return_home()
t#urn_around()
move()
turn_right(?
move ()
turn- left()
movel)
move()
turn_around()
def turn-right()
for i in range (3):
turn- left()
def turn. around ()
for i in range (2):
turn-left()
if name - main' :
mainl",146,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",11,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",11,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel. stanfordkarel import*
det main ()
move()
move()
turn-right ()
move()
turn-left()
move()
pick-beeper()
return-home()
def return_home()
turn-around()
move()
turn-right ()
move ()
turn-left ()
move()
move()
turn-around()
det turn-right()
for i in range (3):
turn-left ()
def turn- around()
for i in range (2):
turn-left ()
if
name
== '_main ' :
main()",144,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel. stanfordkarel import *
def main ()
move ()
move()
turn-right ()
move ()
turn-leff()
move ()
pick-beeper ()
return-home()
def return_home()
trurn_around()
move ()
turn_right()
move ()
turn_left ()
movel)
move ()
turn_around ()
def turn-right ()
for \( i \) in range (3):
turn-left ()
def turn around()
for \( i \) in range (2):
turn-left \( ( \) )
if \( \operatorname{mame}_{-\operatorname{main}()}== \) __main', :",193,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0
"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]

    input_string = input(""Enter the string: "")
    input_string = input_string.lower()

    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1

    print(vowel_count)


if __name__ == ""__main__"":
    main()
",0.8,"def main ():
rauel caunl=0
vawels = ['a', 'e', 'i', '0', 'u']
""input-string = ""input (""Enter the string:"")
impret string = ""impret_string= lawer ()
for chaor in `imput string:
for vauvel in vamels:
if char = = vowel:
vauvel_cament + = 1
point (vowel count)
`__main_
y__name__ =
main ()
INN
':",148,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",4,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",4,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",4,"dy main ():
vawel_count==0
vawels ['a' 'e' ii, 'o', 'u' ]
input- string= input (""Enter the striegn""."")
input string. lower()
for char in input string:
for vawel 'en vawels:
if char== vowel:
valuel-calest += 1
point (newel count)
if name main__':
main()",146,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string: "")
    input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",18,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string: "")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",3,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string: "")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",3,"de main () :
vowel-count=0
vowels= ['à','e', 'i', 'o','u']
input_string = input (""Enter the string:"")
input string = input_string . lower ()
for char in input string:
for vowel in vowels :
if char == vawel:
vowel-count +=1
print (nouvel count)
if _name_ = = '_main _- ':
main ()",115,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",4,":
def main():
    vowel_count=0
    vowels= ['a','e', 'i', 'o','u']
    input_string = input (""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count +=1
    print(vowel_count)
if __name__ == '__main__':
    main()
",27,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",4,"de main ():
vouel caunt \( =0 \)
input_string = input (""Enter the string:"")
input_string = inpet_string. lawer()
for choor in input string:
for vauel 'en vauch:
if char = = vouel:
valuel-caunt \( +=1 \)
print (veuel caunt)
\[
\begin{array}{l}
\text { if _-name__ }==\text { '_ main_- } \\
\operatorname{main}() \\
\end{array}
\]",210,"def main():
    vowel_count = 0
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in ""aeiou"":
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",50,"def main():
    vowel_count = 0
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in ""aeiou"":
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",50,"def main():
    vowel_count = 0
    vowels = ""aeiou""
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",22
"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])
",0.8,"def main ():
string = str (input ('Enter string: '))
for i in range
print (string[i])
((len(string)-1),-1,-1):
لك
TO
AYS",60,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2,"our
priud
- "") abuse u! ! way
(5, : bureys capul, ) produc) eys = burays
:
()unow top",104,"
for proud in ""I abuse you in a good way"":
  (s, bureys_capul) = proud, eyes = bureys
  :
  unknown_top

return code
",106,"def our_product(values, key):
    product_keys = values
    return key in product_keys
",98,The provided code is not clear enough to be corrected. It's highly unrecognizable and doesn't follow any known Python syntax or structure. Please provide a clearer version of the Python code for it to be corrected.,172,"det
main ():
string = str (input ('Enter string: '))
for i in range ((len (string)-1), - 1 ,- 1).
print (string [i])",34,"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])
",0,"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])
",0,"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


main()
",9,"def \( \operatorname{main}( \) ):
\[
\text { string }=\operatorname{str}(\text { input ('Enter string: IJ) }
\]
for \( i \) in range \( (( \) len(string \( )-1),-1,-1) \) : print (string \( [i] \) )",102,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2
"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []


# It check every element in list(sequence) --
for i in seq:
    # It decides whether an element from sequence is even ---
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list(seq_even)

print(seq_even)
",0.8,"seq - [1, 2, 3, 4, 5, 6, 7, 8, 9]
seg - even = []
#It checks every element in dist (sequence)--
for i in seq:
#it decides whether an element from sequence is even ---
if i % 2 == 0:
seq-even. append(i) #appends even i in empty list (seq-even)
print (seq-even)",40,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in seq (sequence)--
for i in seq:
    # it decides whether an element from sequence is even ---
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list (seq_even)
print(seq_even)
",11,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in seq (sequence)--
for i in seq:
    # it decides whether an element from sequence is even ---
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list (seq_even)
print(seq_even)
",11,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in seq (sequence)
for i in seq:
    # It decides whether an element from sequence is even
    if i % 2 == 0:
        seq_even.append(i)  # Appends even i in empty list (seq_even)
print(seq_even)
",17,"seq = [1, 2, 3, 4, 5 , 6, 7, 8, ]
seg even = [ ]
# It checks every element in list (sequence)
for i in seq:
# it decides whether an element from sequence is even
if i % 2 == O:
seq-even. append (i) # appends even i in empty list (seq-even)
print (seq-even)",44,"seq = [
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
]
seq_even = []
# It checks every element in list (sequence)
for i in seq:
    # it decides whether an element from sequence is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list (seq_even)
print(seq_even)
",49,"seq = [1, 2, 3, 4, 5, 6, 7, 8]
seq_even = []
# It checks every element in list (sequence)
for i in seq:
    # it decides whether an element from sequence is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list (seq_even)
print(seq_even)
",17,"seq = [1, 2, 3, 4, 5, 6, 7, 8]
seq_even = []
# It checks every element in list (sequence)
for i in seq:
    # it decides whether an element from sequence is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list (seq_even)
print(seq_even)
",17,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9]
Seg-even=[]
# It checks every element in list (sequence) - --
for i in seg:
# it decides whether an element from sequence is even --.
if i % 2 = = 0:
seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)",46,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in list (sequence)
for i in seq:
    # it decides whether an element from sequence is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even ; in empty list (seq-even)
print(seq_even)
",16,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in list (sequence) - --
for i in seq:
    # it decides whether an element from sequence is even --.
    if i % 2 == 0:
        seq_even.append(i)  # appends even ; in empty list (seq-even)
print(seq_even)
",12,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in list (sequence)
for i in seq:
    # it decides whether an element from sequence is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even in empty list (seq_even)
print(seq_even)
",16,"\[
\begin{array}{l}
\text { seq }=[1,2,3,4,5,6,7,8,9] \\
\text { seq-even }=[]
\end{array}
\]
\# It checks every element in dist(sequence.).for \( i \) in seq:
\# it decides whether an clement from sequence is even -.. if \( i \% 2==0 \) :
seq-even. append ( \( i \) ) \# appends even \( i \) in empty list (seq-even) print (seq-even)",127,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
for i in seq:
    if i % 2 == 0:
        seq_even.append(i)
print(seq_even)
",153,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []

for i in seq:
    if i % 2 == 0:
        seq_even.append(i)

print(seq_even)
",151,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in the sequence.
for i in seq:
    # it decides whether an element from sequence is even.
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list seq_even
print(seq_even)
",20
"from graphics import Canvas

CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01

def main:
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    

    while TRUE

        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        
        if mouse_x >= 0 and mouse_x <= CANVAS_WIDTH and mouse_y >=0 and mouse_y <= CANVAS_HEIGHT",0.8,"from
FROM GRAPHICS IMPORT CANVAS
CANVAS_WIDTH = 300
CANVAS-HEIGHT = 300
CIRCLE_SIZE =
DELAY = 0,01
= 20
DEF MAIN:
CANVAS = CANVAS ( CANVAS WIDTH, CANVAS HEIGHT
WHILE TRUE
MOVSE_X = CANVAS. GET_MOUSE_x()
MOUSE-Y = CANVAS. GET MOUSE_Y()
TE
1
IF MOUSE X >= 0 AND MOUSE X E CANVAS_WIDTH
AND MOUSELY TO AND MOUSE_YE CANVAS. HEIGH",203,"from graphics import Canvas

CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01


def main():
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x <= CANVAS_WIDTH
            and mouse_y >= 0
            and mouse_y <= CANVAS_HEIGHT
        ):
            pass
",86,"from graphics import Canvas

CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01


def main():
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    while True:
        MOUSE_X = canvas.get_mouse_x()
        MOUSE_Y = canvas.get_mouse_y()
        if (
            MOUSE_X >= 0
            and MOUSE_X <= CANVAS_WIDTH
            and MOUSE_Y >= 0
            and MOUSE_Y <= CANVAS_HEIGHT
        ):
            pass
",122,"from graphics import Canvas

CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01


def main():
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    while True:
        MOUSE_X = canvas.get_mouse_x()
        MOUSE_Y = canvas.get_mouse_y()
        if (
            MOUSE_X >= 0
            and MOUSE_X <= CANVAS_WIDTH
            and MOUSE_Y >= 0
            and MOUSE_Y <= CANVAS_HEIGHT
        ):
            pass
",122,"FROM GRAPHICS IMPORT CANVAS
CANVAS_WIDTH 11 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0,01
DEF MAIN :
CANVAS = CANVAS(CANVAS WIDTH, CANVAS HEC 641)
WHILE TRUE
MOVSE -X = CANVAS. 6ET MOUSE x()
MOV. SE- - Y = CANVAS. GET MOUSE ( ) )
If MOUSE_ x > = U AND MOUSE x t CANUAS_WIDTH
AND NOUSE. -Y >=0 AND MOUSE_YE CANUVAS.HEIGH",199,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x < canvas_width
            and mouse_y >= 0
            and mouse_y < canvas_height
        ):
            pass
",172,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x <= canvas_width
            and mouse_y >= 0
            and mouse_y <= canvas_height
        ):
            continue
",174,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x <= canvas_width
            and mouse_y >= 0
            and mouse_y <= canvas_height
        ):
            pass
",170,"FROM GRAPHICS IMPORT CANVAS
CANVAS_WIDTH = 300
CANVAS_ HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0,01
DEF MAIN :
CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH)
WHILE TRUE
MOUSE_ X = CANVAS . GET_MOUSE _ X ()
MOUSE- Y = CANVAS . GET MOUSE_ Y ( )
IF MOUSE XT =U AND MOUSE X E CANVAS_WIDTH
AND MOUSELY SEO AND MOUSE-TE CANVAS HEIGH",205,"from graphics import Canvas

CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01


def main():
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    while True:
        MOUSE_X = canvas.get_mouse_x()
        MOUSE_Y = canvas.get_mouse_y()
        if (
            MOUSE_X >= 0
            and MOUSE_X <= CANVAS_WIDTH
            and MOUSE_Y >= 0
            and MOUSE_Y <= CANVAS_HEIGHT
        ):
            continue
",126,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x <= canvas_width
            and mouse_y >= 0
            and mouse_y <= canvas_height
        ):
            pass
",170,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if 0 <= mouse_x <= canvas_width and 0 <= mouse_y <= canvas_height:
            pass  # Add required action here
",157,"FRIM GRAPHICS I MPORT CANVAS
\[
\begin{array}{l}
\text { CANVAS_WIDTH }=300 \\
\text { CANVAS_HEl6HT }=300 \\
\text { CIRCLE_SIZE }=20 \\
\text { DELAY = } 0,01
\end{array}
\]
DEF MAIN :
canvas = Canvas ( canvar_ wi DFH, canvas Hec b HT)
WHILE TRUE
\[
\begin{array}{l}
\text { MOVSE-X = CONVAS. GET_MOUSE_X() } \\
\text { MOVSE-Y = CANVAS. GET MOUSE_Y () }
\end{array}
\]
If MOUSE_X \( X=0 \) AND MOUSE_X \( E \) CANUNS_WIOT4 AND NOUSE_Y \( T=0 \) AND MOUSE_YE CH, USS. HEIG",321,"
FROM GRAPHICS IMPORT CANVAS
CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01

def MAIN():
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    WHILE TRUE:
        MOUSE_X = CANVAS.GET_MOUSE_X()
        MOUSE_Y = CANVAS.GET_MOUSE_Y()
        if MOUSE_X >= 0 and MOUSE_X <= CANVAS_WIDTH and MOUSE_Y >= 0 and MOUSE_Y <= CANVAS_HEIGHT:
            pass
",138,"from graphics import Canvas

CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01


def main():
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    while True:
        MOUSE_X = canvas.get_mouse_x()
        MOUSE_Y = canvas.get_mouse_y()
        if (
            MOUSE_X >= 0
            and MOUSE_X <= CANVAS_WIDTH
            and MOUSE_Y >= 0
            and MOUSE_Y <= CANVAS_HEIGHT
        ):
            pass
",122,"from graphics import Canvas

CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01


def main():
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()

        if (
            mouse_x >= 0
            and mouse_x <= CANVAS_WIDTH
            and mouse_y >= 0
            and mouse_y <= CANVAS_HEIGHT
        ):
            pass
        else:
            return
",120
"# 1 karel Problem - karel Home

from karel.stanfordkarel import *

# This program defines a main function which should make Karel
# move to the beeper, pick it up and return home.
def main():
    get_out()
    pick_food()
    get_back_home()


# pre : karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",0.8,"#1 Karel Problem - Karel home
from Kard Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it and return home.
up
def main ():
GRE_ONE ()
pick-food ()
get back home u
#pre: Karel facing eask, at the corner of starting position.
# posk: Karel facing east, outside the home, at the position of beeper
def get out ():
turn_right()
Move (
turn_left()
Move ()
Move ()
move()
# post
· Karel facing west, at
def pick-food ():
pick beeper ()
turn around ()
#post: Karel facing east, at the corner of starting position
def get back home ():
move ()
Move ()
move()
turn_right()
move ()
turn right (1
def turn right ():
for i in range (3)
turn_left()
def turn around ():
turn_left()
zurn_left()
the position of beeper
if_name__ == '__main_ ' :
main ()",229,"# 1 Karel Problem - Karel home
from stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it and return home.


def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position.
# post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# Karel facing west, at
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


# the position of beeper
if __name__ == ""__main__"":
    main()
",76,"# Karel Problem - Karel home
from Stanfordkarel import *

# This program defines a main function which should make Karel
# move to the beeper, pick it and return home.


def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position.
# post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",24,"# Karel Problem - Karel home
from karel.stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it and return home.


def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position.
# post: Karel facing west, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


# Karel at the position of beeper
if __name__ == ""__main__"":
    main()
",77,"# 1 karel Problem - Karel home
from Karel stanfordkarel import
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main ():
get-one(?
pick_food ()
get_back home ()
# pre : Karel facing east, at Line corner of starting position
# post ! karel facing east, outside the home, at the position of beeper
def get out ()
turn_ right
move ()
turn left ()
move ()
move
move
# post Karel facing west at the position of beeper
10°M
def pick-food () :
beeper ()
turn_ around()
# post: Karel facing east, at the corner of starting position
def get- back home () :
move ()
move
move ()
turn_right ( )
move ()
turn
right ()
def turn right ( )
for i in range (3) :
turn_left
def turn_ around () :
turn_ left ()
turn_ left ()
if name- == '-main-':
main ()",202,"# 1 karel Problem - Karel home
from stanfordkarel import Karel

# This program defines a main function which should make Karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre : Karel facing east, at Line corner of starting position
# post : Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west at the position of beeper


def pick_food():
    beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position


def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",33,"# 1. Karel Problem - Karel home
from stanfordkarel import Karel

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre : Karel facing east, at Line corner of starting position
# post : Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west at the position of beeper


def pick_food():
    beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",34,"# Karel Problem - Karel home
from stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre : Karel facing east, at Line corner of starting position
# post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",22,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import*
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre: Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ()
move ()
turn_ left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn-around ( )
# post: Karel facing east, at the corner of starting position
def get_back_home () :
move ()
Move ()
move ()
turn right ()
move ( )
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == - main -:
main ()",179,"# 1 karel Problem - Karel home
from Karel.Stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position
# post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",12,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",9,"# Karel Problem - Karel home
from karel.stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",12,"\#1 karel Problem-karel home from karel. Stanfordkarel impork *
\# This program defines a main function which should make karel \# move to the beeper, pick it up and return home
def \( \operatorname{main}() \) :
get_oute \( ( \) )
pick-food ()
get_back_home \( U \)
\# pre: Karel facing eask, at the corner of stomeng position
\# posk: Karel facing east, oukside the home, at the position of beeper
def get_out () :
turn_right ()
move?
turn_left ()
move ()
move ()
move ()
\# post : Karel facing west, at the position of beeper
def pick-food () :
pick_beeper ()
turn_around ()
\# post: karel fring east, at the corner of stonting position def get_back_home ():
move ()
move ()
move ()
turn_right ()
move ()
turn right ( )
def turn right () :
for \( i \) in range (3) :
turn_left ()
def turn around ():
turn_left ()
turn_kft()
if _ name_ \( == \) - main - '
main ()",223,"# 1 karel Problem-karel home
from karel.stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position
# post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post : Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",11,"# 1 karel Problem-karel home
from karel.stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position
# post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post : Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",11,"# karel Problem - karel home
from karel.stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position
# post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post : Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",11
"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0.8,"def factorial (n):
if n == 0:
return 1
else:
return n* factorial (n-1)
print (factorial (5))",34,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n)
if n==
O:
return 1
else :
return n
factorial (n-1) -
print (factorial(5))",39,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial (n) :
if n=0 :
return 1
else:
return 1 * factorial (n-1)
print (factorial (5)",39,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial \( (n) \) :
if \( n==0 \) :
return 1
else:
return \( n \) * factorial \( (n-1) \)
print (factorial \( (5)) \)",56,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0
"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    list = []

    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                list.append(elem)
    print(list)
",0.8,"det main 1:
List 1 2 (1,2,3,4]
List 2 = (3,4,5,67
List = []
for elem 1 in list 1 1
for elem2 în list 2:
it olem2 = = elem 2:
elem = elem 2
(N46)
print (list)
list-append (etem)
Livor",118,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 67]
    list3 = []
    for elem1 in list1:
        for elem2 in list2:
            if elem2 == elem1:
                elem = elem2
                list3.append(elem)
    print(list3)


main()
",17,"def main():
    list_1 = [1, 2, 3, 4]
    list_2 = [3, 4, 5, 67]
    list = []
    for elem1 in list_1:
        for elem2 in list_2:
            if elem2 == elem1:
                elem = elem2
                print(list)
                list.append(elem)
    return list
",45,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    list3 = []

    for elem1 in list1:
        for elem2 in list2:
            if elem2 == elem1:
                elem = elem2
                list3.append(elem)
    print(list3)
    return list3
",23,"det main O
list 1 2 (1,2,3,4)
list 2 2 (3,4,5,67
List = 17
for elem1 in list 1 :
for elem2 in list2:
it elem1 == elem2:
elem = elem7
list-append (eum)
print (list)",103,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 67]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)


main()
",14,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)


main()
",13,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6, 7]
    list3 = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                list3.append(elem1)
    print(list3)


main()
",46,"det main () :
list 1 2 [1, 2,3,4]
list 2 =
(3,4,5,6)
List = []
for elem1 in list 1?
for eleme in list2:
it elem1 = = elem2?
elem = elem 2
list- append (elem)
print (ist)",101,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem2
                List.append(elem)
    print(List)


main()
",14,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem2
                List.append(elem)
    print(List)

    return
",17,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    result_list = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                result_list.append(elem2)
    print(result_list)


main()
",52,"det \( \operatorname{man}(1) \) :
\[
\begin{array}{l}
\text { list } 1=[1,2,3,4] \\
\text { list } 2=[3,4,5,6] \\
\text { List }=[7] \text { in list } 11 \\
\text { for elem } 1
\end{array}
\]
for elem2 in list2:
it \( \operatorname{elem} 2= \) elem2:
elem = elem 2
list-append (eum)
print (ist)",192,"def man(num):
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = [7]
    for elem in List:
        for elem2 in list2:
            if elem == elem2:
                elem = elem2
                List.append(elem)
    print(List)
",14,"def man(num):
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = [7]
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem2
                List.append(elem)
    print(List)
",10,"def man(x):
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    list3 = []
    for elem in list1:
        for elem2 in list2:
            if elem == elem2:
                list3.append(elem)
    print(list3)
",37
"String = input()
print(String[::-1])
",0.8,"String = input ()
print (String[::-1])",3,"String = input()
print(String[::-1])
",0,"string = input()
print(string[::-1])
",2,"String = input()
print(String[::-1])
",0,"String = input c)
print (String [:
-
-1])",8,"String = input()
print(String[::-1])
",0,"String = input()
print(String[:-1])
",1,"string = input()
print(string[:-1])
",3,"String = input c)
print (String [ ::- 1])",7,"String = input()
print(String[::-1])
",0,"String = input()
print(String[::-1])
",0,"String = input()
print(String[::-1])
",0,\( \begin{array}{l}\text { String }=\text { input } C) \\ \text { print }(\text { String }[::-1])\end{array} \),77,"string = input()
print(string[::-1])
",2,"String = input()
print(String[::-1])
",0,"string = input()
print(string[::-1])
",2
"from karel.stanfordkarel import *


def main():
    turn_left()
    tower_N()
    tower_S()
    move_4x()
    turn_left()
    tower_N()
    tower_S()


def tower_S():
    turn_3x()
    tower()
    turn_left()


def tower_N():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0.8,"from Karel. Stanford Rund emport
def main ():
turn-
laft
Tower_N()
tower_S()
Move 4x()
Fern-
-left()
tower_N()
-S()
tower
del
de tower -S():
Furn-3x()
tower ()
turn_left()
del tower _N():
Town ()
turn _ 3x()
move 4x()
def tower (13
for i in
range
(5):
if front_is_clear():
Put-baper (1
movel)
else:
def. Jurn - 3×(1:
turn_left()
leftis
turn-
Turn_left()
()
pest-beeper ()
- Move_4x();
move()
move()
movell
move()
name --
__main__."":
main ()
K",267,"from karel.stanford import *


def main():
    turn_left()
    tower_N()
    tower_S()
    move_4x()
    turn_left()
    tower_N()
    tower_S()


def tower_S():
    turn_3x()
    tower()
    turn_left()


def tower_N():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper(1)
            move()
        else:
            turn_3x()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()
    put_beeper()
    move_4x()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",46,"from karel.stanford import *


def main():
    turn_left()
    tower_N()
    tower_S()
    move_4x()
    turn_left()
    tower_N()
    tower_S()


def tower_S():
    turn_3x()
    tower()
    turn_left()


def tower_N():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",44,"from karel.stanford import *


def main():
    turn_left()
    tower_N()
    tower_S()
    move_4x()
    turn_left()
    tower_N()
    tower_S()
    tower()


def tower_S():
    turn_3x()
    tower()
    turn_left()


def tower_N():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper(1)
            move()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",57,"from Karel. Stanford Kand import
K
de/ main()
turn-left
tower-NC
tower- sc)
move-4x ( )
turn-lette
tower N()
tower - sc )
de/ tower - s():
turn - 3x()
tower ()
turn - lefter
def tower - NC):
town ()
turn. - 3x()
move 4r ()
def tower ():
for i in range (5) :
if front - clear():
Put-baper (
movel
else:
put. buper()
def turn- 3x(1:
turn- left(1
turn - left
Turn - left ()
del move _4x():
move!!
more!!
movel
move
=='--
if
name
main !)",285,"from Karel.Stanford import K


def main():
    turn_left()
    tower_NC()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()


def tower_SC():
    turn_3x()
    tower()
    turn_left()


def tower_NC():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",13,"from karel.stanfordkarel import *


def main():
    turn_left()
    tower_N()
    tower_S()
    move_4x()
    turn_left()
    tower_N()
    tower_S()


def tower_S():
    turn_3x()
    tower()
    turn_left()


def tower_N():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    turn_left()
    tower_NC()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()


def tower_SC():
    turn_3x()
    tower()
    turn_left()


def tower_NC():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",5,"from Karel. Stanford Kad import ""
def main () :
turn - left 11
tower_N()
tower- SC)
move- 4x ( )
turn-left ( )
tower- N()
tower - SC )
del tower - s():
turn - 3x ()
Tower ()
Turn- left ( )
del tower- NC) .
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ):
Put-boper ()
move ()
else:
Put- beeper ()
def.turn- 3x (1:
Turn- left ()
turn - left ()
burn- left ()
def . mere_ 4x();
move ()
move ()
morell
move ()
if -- name __ = = -- main __
main ()",277,"from Karel.Stanford import Kad


def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()
    del tower_s()
    turn_3x()
    Tower()
    turn_left()
    del tower_NC()
    Tower()
    turn_3x()
    move_4x()
    del tower()
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

    def turn_3x():
        turn_left()
        turn_left()
        turn_left()

    def move_4x():
        move()
        move()
        move()
        move()

    if __name__ == ""__main__"":
        main()
",78,"from Karel.Stanford import Kad


def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()
    del tower_s()
    turn_3x()
    Tower()
    turn_left()
    del tower_NC()
    Tower()
    turn_3x()
    move_4x()
    del tower()
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",34,"from karel.stanfordkarel import *


def main():
    turn_left()
    tower_n()
    tower_s()
    move_4x()
    turn_left()
    tower_n()
    tower_s()
    tower()
    turn_left()
    tower()
    move_4x()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",66,"from Karel. Stanfordkad import *
def max \( (1): \)
\[
\begin{array}{l}
\text { furn - let (1) } \\
\text { fown-N() } \\
\text { tower-S() } \\
\text { move-4x () } \\
\text { furm-lyt ( ) } \\
\text { tower-N( ) } \\
\text { tower-S() } \\
\end{array}
\]
def tower-s() :
\[
\begin{array}{l}
\text { furn - } 3 \times() \\
\text { Tower (1) } \\
\text { turn - laff() }
\end{array}
\]
def tower - N ( ):
town ()
\( \operatorname{tin} \) - \( 3 \times() \)
move_ \( 4 \times() \)
def tower (1):
for \( i \) in rang \( (5) \) :
if front-is-clear () :
move ()
else:
put_buper ()
def. fum \( -3 \times(1) \) :
\[
\begin{array}{l}
\text { turn - blff (1) } \\
\text { turn - bff (1) } \\
\text { turn - beft (1) }
\end{array}
\]
def mere_4r(1):
morel)
\[
\begin{array}{c}
\text { if name - }==^{\prime} \text {. main ... } \\
\text { main () }
\end{array}
\]
main 1)",556,"from Karel.Stanfordkad import *


def max(num):
    turn_left(num)
    move_N()
    tower_S()
    move_4x()
    turn_left()
    tower_N()
    tower_S()


def tower_S():
    for _ in range(3):
        tower(num)
        turn_left()


def tower_N():
    move()
    turn_3_times()
    move_4_times()


def tower(num):
    for i in range(5):
        if front_is_clear():
            move()
        else:
            put_bumper()


def turn(num):
    turn_left(num)
    turn_right(num)
    turn_left(num)


def move_4r(num):
    move(num)


if __name__ == ""__main__"":
    main()
",135,"from karel.stanfordkarel import *


def max(l):
    turn_left(l)
    move_N()
    tower_S()
    move_4x()
    turn_left()
    tower_N()
    tower_S()


def tower_S():
    for _ in range(3):
        tower(1)
    turn_left()


def tower_N():
    turn()
    for _ in range(3):
        move_4x()


def tower(l):
    for i in range(5):
        if front_is_clear():
            move()
        else:
            put_beeper()


def turn_left(l):
    for _ in range(3):
        turn_left()


def move_4x(l):
    move()


if __name__ == ""__main__"":
    main()
",138,"from Karel.Stanfordkad import *


def max_1():
    turn_left()
    move()
    tower_S()
    move_4x()
    turn_right()
    tower_N()
    tower_S()


def tower_S():
    for _ in range(3):
        tower_1()
    turn_left()


def tower_N():
    turn()
    for _ in range(3):
        move_4x()


def tower_1():
    for i in range(5):
        if front_is_clear():
            move()
        else:
            put_beeper()


def turn_3_times():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()


if __name__ == ""__main__"":
    max_1()
",128
"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",0.8,"def main ():
string = str (input ( 'Enter string :'))
for i in range ((len (string)-1),-1,-1):
print (string[i])
if __name__ == '___main__':
main()",41,"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",0,"def main():
    string = str(input(""Enter string :""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",2,"def main ():
string = str (input( 'Enter string '))
for i in range ((len(string) - 1),-1,-1) :
print (string[i])
if -name '__main_':
main()",44,"def main():
    string = str(input(""Enter string ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",1,"def main():
    string = str(input(""Enter string ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",1,"def main():
    string = str(input(""Enter string ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",1,"det main ( ):
String = str (input (""Enter string: '))
for i in range ((len (string) -1) ,- 1 ,- 1):
print (string [i])
if __ name _== '_main-':
main ()",50,"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",0,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",0,"det main ():
string \( = \) str (input ( Enter string: '))
for \( i \) in range ((len (string) -1\( ),-1,-1) \) : print (string \( [i] \) )
if name_ \( == \) '_-_main_-1:
\( \operatorname{main}() \)",81,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",2
"def main():

    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",0.8,"if
def main():
nur - int (input (""Enter a umby: ""))
print (f"" { num } is { ""prime if is_preme (nom)
else 'not prime' 3"")
Lef is__ pame(n):
<=
return false
elif n <= 3.
Feton True
elf 0 ² 2 = = 6
0² / 3 = = 0;
retow False
for i iN, Range (5, int(n"" 0.5) +1,6)
if 1% 1 = = 0¹ 0² 0% (i + 2) = = 6:
retor False
netum Thve
пале
maiN ()
--
main",190,"def main():
    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",1,"def main():
    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",1,"def main():
    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True


if __name__ == ""__main__"":
    main()
",44,"def main():
num = a NMBU: ""))
is {'prime' if ip_proundnorm)
else'not prime'3"")
def is prone(s)
if n<=1
return False
olig n <=3:
retun True
effn82==0 OR n% 3==0:
retor False
for i iN Range (5, int(c (0.5)+1,6)
if n%i==0 OR n% (i+2) == 6
return False
refund True
if
nane
1' main Ir's
main ()",198,"def main():
    num = int(input(""Enter a number: ""))
    print(""prime"" if is_prime(num) else ""not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",17,"def main():
    num = int(input(""Enter a number: ""))
    print(""prime"" if is_prime(num) else ""not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",17,"def main():
    num = int(input(""Enter a number: ""))
    print(""prime"" if is_prime(num) else ""not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True


if __name__ == ""__main__"":
    main()
",60,"def main():
num = int (input( ""Enter a NM bu :
print (f""Enums is S'prime if is_ prime (nom)
else not primé 3"">
def is_ prime(1):
if n <= 12
return false
elif > <= 3:
Cetun True
elf n/ 2 = = x OR 1% 3=6 ;
return False
for i in Range (5, int(1 +0.5) + 1,6
if 1% i = = x or 1% (1+2) =0 :
return False
return True
if
= =
- - main
main ()",165,"def main():
    num = int(input(""Enter a num: ""))
    if is_prime(num):
        print(f""Num is prime"")
    else:
        print(""Num is not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",64,"def main():
    num = int(input(""Enter a num: ""))
    if is_prime(num):
        print(f""Num is prime"")
    else:
        print(""Num is not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",64,"def main():
    num = int(input(""Enter a num: ""))
    if is_prime(num):
        print(f""Num is prime"")
    else:
        print(""Num is not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True


if __name__ == ""__main__"":
    main()
",107,"\( \operatorname{deg} \operatorname{main}(): \)
num =int( (iuput(""Entu a NMkn: "")) prutt(f""\{num\} is \{'prime' if is prome(num) else not prime 3 "")
def is prme \( (n) \) :
if \( n<=1 \)
reture alse
\( \operatorname{elif} \cap<=3 \) :
seton True
elf \( n \% 2==\varnothing \) or \( \cap \% 3==\varnothing \) :
re tow Jalse
for i in Ravge \( \left(5\right. \) int \( \left.\left(n^{* *} 0,5\right)+1,6\right) \) if \( n \% i==\varnothing \) or \( n \%(i+2)==\varnothing \) : retur false
nefom thoe",318,"def main():
    num = int(input(""Enter a Number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif (n % 2 == 0) or (n % 3 == 0):
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if (n % i == 0) or (n % (i + 2) == 0):
            return False
    return True
",50,"def main():
    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif (n % 2 == 0) or (n % 3 == 0):
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if (n % i == 0) or (n % (i + 2) == 0):
            return False
    return True
",49,"def main():
    num = int(input(""Enter a Number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


main()
",33
"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0.8,"from Karel. Stamfordkarel import
def main ():
turn-left():
while frent_is_ alpar (fi
tunn-right()
fill-row ()
return _to_home ll
Jump_row()
turn_right()
fill-row ()
vetwook to home ()
while frent-is. Elear();
meve (s
Sef fill_row();
while frent_is_ clearl]
put - beeper ()
move ()
put-beeper ()",149,"from Karel.Stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",14,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
        put_beeper()
",16,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",12,"from Karel. stam fordmarel impert
def main():
turn-left():
while frent- is alpar():
turn-rights
fill-row()
return to home(s)
junprowl
turn-right
fillstow()
return te 3-home()
while front is. Elear(1:
meve()
def fill. rew() :
while front. is. clearl)
put - beeper()
move()
put-seeper()",150,"from Karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
        put_beeper()
",17,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
        put_beeper()
",16,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
        put_beeper()
",16,"from karel . stamfordkarel. import *
def mais ():
turn-left ():
while frent_ is_ alpar ();
turn-right ()
fill-row ( )
return_to_ home()
jumprow ()
turn-right ()
fill-row ()
returnkte -home ()
while front- is Elcar();
meve ()
Sef fill -row() ;
while front- is clear()
put - beeper ()
move ()
put-beeper ()",147,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jumprow()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()

    def fill_row():
        while front_is_clear():
            put_beeper()
            move()
        put_beeper()
",33,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()

    def fill_row():
        while front_is_clear():
            put_beeper()
            move()
        put_beeper()
",32,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
        while front_is_clear():
            move()
            fill_row()
            while front_is_clear():
                put_beeper()
                move()
                put_beeper()
",68,"fremkarel. stamfordkared impert*
def \( \operatorname{main}() \) :
turn-left ():
while frent - is _ clpar ():
tumn-right 1)
fill-row()
retwn-te-home()
junprow()
turn - right ()
fillarow ()
ve turnkte - home ()
while front-is. Elear ( \( ) \) :
meve()
def fill-rew():
while front - is - clearl)
put - beeper ()
move ()
put-beeper ()",177,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()

    def fill_row():
        while front_is_clear():
            put_beeper()
            move()
        put_beeper()
",20,"
from karel.stanfordkarel import *
def main():
		turn_left()
		while front_is_clear():
			turn_right()
			fill_row()
			return_to_home()
			jump_row()
		turn_right()
		fill_row()
		return_to_home()
		while front_is_clear():
			move()
	def fill_row():
		while front_is_clear():
			put_beeper()
			move()
		put_beeper()
",93,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0
"from stanfordkarel import *

""""""
Karel should fill the whole world with beepers.
""""""


def main():
    """"""
    You should write your code to make Karel do its task in
    this function. Make sure to delete the 'pass' line before
    starting to write your own code. You should also delete this
    comment and replace it with a better, more descriptive one.
    """"""
    while not left_is_blocked():
        put_beeper_Line()
        reset_Position()
    put_beeper_Line()


def put_beeper_Line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",0.8,"from stanfordKarel import *
11 11 11
Kard should
beepers.
|| || ||
def
main ():
11 [1 (1
You should write
Karel do its
comment
better
fill
11 [11
/
the whole world with
Make
виче
before starting to
code. You should also
to
task in this
function.
delete the pass line
write your
owen
delete this
with
and replace it
more descriptive one.
move ()
put_ beeper ()
your
put_ beeper _line ()
our code to malce
While not left_it_ blocked ():
put - beeper_Line()
resit_ Position ()
dif put_beeper_Line():
put_beeper ()
front_is_clear
while
():",376,"from stanfordKarel import *

# Karel should fill the whole world with beepers.
def main():
    # Before starting to write your code, delete the pass line and replace it with a more descriptive one.
    move()
    put_beeper()
    put_beeper_line()
    # Make sure your code to make Karel do its task in this function.
    while not left_is_blocked():
        put_beeper_line()
        reset_position()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
",248,"from stanfordKarel import *

# Karel should fill the whole world with beepers.
# Make sure to plan before starting to code. You should also write your
# own task in this function.


def main():
    # delete the pass line and replace it with your more descriptive one.
    move()
    put_beeper()
    put_beeper_line()

    while not left_is_blocked():
        put_beeper_line()
        reset_position()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
",243,"from stanfordKarel import *

# Karel should fill the whole world with beepers.
def main():
    # Make sure to write your task in this function.
    # delete the pass line and replace it with your own code.
    move()
    put_beeper()
    put_beeper_line()
    while not left_is_blocked():
        put_beeper_line()
        reset_position()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",192,"from stanford hard import
Kard should fill the whole world with
beepers
11 11 11
daf main () :
11
11
11
you should write your code to male
karel do its task in this function.
Make sure to delite the pass line
code. You should also delete
before starting to write your this own
comment and replace it with a
better more descriptive one
11 11
while not left- is blocked C):
put- buper-line()
resit_Position c)
put- buper - Line c)
def put beeper-line() -
put beeper c)
while front is clear C) :
move ()
put- - beeper c)",208,"# Code goes here
",563,"from stanfordkarel import *


def main():
    """"""
    You should write your code to make Karel do its task in this function.
    Make sure to delete the pass line code. You should also delete this own comment
    and replace it with a better, more descriptive one.
    """"""
    while not left_is_blocked():
        put_beeper_line()
        reset_position()
        put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",121,"from stanfordkarel import *


def main():
    """"""
    You should write your code here.
    Karel should fill the whole world with beepers.
    Make sure to delete the pass line code.
    Replace this comment with a more descriptive one.
    """"""
    while not left_is_blocked():
        put_beeper_line()
        reset_position()
        put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",195,"from stanfordkarel import *
Kard should fill the whole world with
keepers.
11 11 11
daf main () :
11 11 11
You should write your code to males
Karel do its task in this function.
Make sure to delete the 'pass line
before starting to write your own
code. You should also delete this
comment and replace it with a
better more descriptive one.
11 11 11
While not left-is - blocked ():
put -beeper -Line()
reset_Position ()
put-buper _line ()
de put_leeper-Line ():
put -beeper ()
While front-is- clear ():
move ( )
put -beeper ()",141,"from stanfordkarel import *

# Karel should fill the whole world with beepers.


def main():
    # You should write your code to make Karel do its task in this function.
    # Make sure to delete the 'pass' line before starting to write your own code.

    while not left_is_blocked():
        put_beeper_line()
        reset_position()
        put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",136,"from stanfordkarel import *

# Karel should fill the whole world with beepers.


def main():
    # You should write your code to make Karel do its task in this function.
    # Make sure to delete the 'pass' line before starting to write your own
    # code. You should also delete this comment and replace it with a
    # better, more descriptive one.
    while not left_is_blocked():
        put_beeper_line()
        reset_position()
        put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",61,"from stanfordkarel import *

# Karel should fill the whole world with beepers.
def main():
    # Write your code to make Karel do its task in this function.
    while not left_is_blocked():
        put_beeper_line()
        reset_position()
        put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",221,"Grom stanfordkarel import *
111111
Karel should fill the whole world with bepers.
111111
def \( \operatorname{main}() \) :
""11 11
You should write your code to male karel do its task in this function. Make sure to delete the 'pass'1 line bfore slarting to rurite your owen code. You should also delete thir comment and replace it with a better, more descriptive one. 111111

While not left_ir_blockd ():
put_beper_Lin ()
resit_position ()
put_buper_line C)
dy put_buper-Line \( ( \) ):
put_beper ()
while front_is-clear C):
move ()
put_beper ()",155,"from stanfordkarel import *


def main():
    """"""
    Karel should fill the whole world with beepers.
    You should write your code to make
    Karel do its task in this function.
    Make sure to delete the 'pass' line
    before starting to rewrite your own
    code. You should also delete this
    comment and replace it with a
    better, more descriptive one.
    """"""
    while not left_is_blocked():
        put_beeper_line()
        reset_position()
    put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",81,"from stanfordkarel import *

""""""
Karel should fill the whole world with
beepers.
""""""


def main():
    """"""
    You should write your code to make
    karel do its task in this function.
    Make sure to delete the 'pass' line
    before starting to rewrite your own
    code. You should also delete this
    comment and replace it with a
    better, more descriptive one.
    """"""

    while not left_is_blocked():
        put_beeper_line()
        reset_position()
    put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",37,"from stanfordkarel import *

""""""
Karel should fill the whole world with beepers.
""""""


def main():
    """"""
    You should write your code to make karel do its task in this function.
    Make sure to delete the 'pass' line before starting to write your own
    code. You should also delete this comment and replace it with a
    better, more descriptive one.
    """"""
    while not left_is_blocked():
        put_beeper_line()
        reset_position()
    put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",29
"#karel needs to move to the bottom of the next arch to commence 
#building the next column.
#precondition: karel is facing east
#post condition: karel is still facing east at the next column site.
        
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()""
                
def turn_around():
    turn_left()
    turn_left()
        
if __name__ == '__main__':
    main()",0.8,"#Karel needs to move to the bottom of the next arch to comm
#ence building the next column.
# Precondition: Karel is facing east
#post_condition : Karel is facing east at the next column site.
def move_to_ next_arch_botton ():
if front is clear ():
for i in range (4):
move ()
def turn around () =
turn_left()
turn_left (D
if name
Main ()
main",119,"# Karel needs to move to the bottom of the next arch to commence
# building the next column.
# Precondition: Karel is facing east
# post_condition : Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",54,"# Karel needs to move to the bottom of the next arch to commence
# building the next column.
# Precondition: Karel is facing east
# Post_condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",54,"# Karel needs to move to the bottom of the next arch to commence
# building the next column.
# Precondition: Karel is facing east
# Post_condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",54,"#karel needs to more to the bottom of the next arch to comm
#ence building the next column.
#
Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move to next arch botto ():
if front is clear ():
for i in range (4)
move ()
def turn around ():
turn left()
turn_left(3)
if name 1 i main , :
main ()",117,"# Karel needs to move to the bottom of the next arch to commence
# building the next column.
#
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.


def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",54,"# Karel needs to move to the bottom of the next arch to commence
# building the next column.
#
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",55,"# Karel needs to move to the bottom of the next arch to commence
# building the next column.
#
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.


def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


def main():
    move_to_next_arch_bottom()
    turn_around()


if __name__ == ""__main__"":
    main()
",102,"#karel needs to move to the bottom of the next noch to com
Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_botton ();
if front is clear ():
for i in range (4) :
move ()
def turn around ():
turn_left ( )
turn left ()
if __ name.
main
main ()",120,"# Karel needs to move to the bottom of the next notch to come
# Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",61,"# karel needs to move to the bottom of the next arch to come
# Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",57,"# Karel needs to move to the bottom of the next arch to come
# Hence building the next column.
# Precondition: Karel is facing east
# Post-condition: Karel is facing east at the next column site.


def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",58,"Hikarel needs to move to the bottom of the next arech to comm. Hence building the next column.
\# Precondition: karel is facing east
\#post-condition: kavel is facing east at the next column site. def move_to_next_arch_botton():
if frontis-clear () :
for \( i \) in range (4):
move ()
def turnarounl () :",159,"# Karel needs to move to the bottom of the next arch to comm.
# Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turnaround():
    pass
",120,"
# Karel needs to move to the bottom of the next arch to comm.
# Hence building the next column.
# Precondition: karel is facing east
# post-condition: karel is facing east at the next column site.
def move_to_next_arch_bottom():
	if front_is_clear():
		for i in range(4):
			move()
def turnaround():
",150,"# Karel needs to move to the bottom of the next arch to comm.
# Hence building the next column.
# Precondition: karel is facing east
# post-condition: karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turnaround():
    pass
",118
"def find_lrgst_smallst(number):
    if not numbers:
        return none
    smallest = largest = number[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example Usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_lrgst_smallst(numbers)
print(result)
",0.8,"HEART
def- find Ligst_smallet (number);
if not numbers:
return none
-Smallest= largest = number [0]
for num in numbers:
if num < smallest:
= num
пит
smallest
if nam > Largest :
Largest.
fieturin smallest, Largest
= num
#Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
Tresult
find_ligst __ smallst (numbens)
print (result)
উদ্ভাস-উন্মেষ শিক্ষা পরিবার",143,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find-Ligst_smallst - (number):
if not numbers:
return none
-Smallest. = largest = number [0]
for num in numbers:
if num < smallest:
smallest = num
if nam > largest:
Largest = num
return smallest, Largest
Example usage:
numbers = [1, 2, 3, 4,5,6,7,8,9]
result = find_ligst_smalist (numbers)
print (result)",91,"
def find_list_smallest_largest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest

Example usage:
numbers = [1, 2, 3, 4,5,6,7,8,9]
result = find_list_smallest_largest(numbers)
print(result)
",35,"
def find_smallest_largest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest

Example usage:
numbers = [1, 2, 3, 4,5,6,7,8,9]
result = find_smallest_largest(numbers)
print(result)
",33,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find_Ligst_smallst (number):
00
if not numbers:
Return none
Smallest=largest = number [0]
-
for num in numbers:
lif
num < smallest:
smallest = num
if
nam > Largest :
Largest = num
tieturin smallest, Largest
# Example usage:
numbers = [1,2,3, 4,5,6,7,8,9]
Hresult = find_ligst_smallst(numbers)
print (result)
उदास-उदास मिका शंतिबाज़",117,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find_rigst_smallst (number):
if not numbers:
return none
- Smallest = largest = number [0]
for num in numbers:
if num < smallest:
\[
\text { smallest }=\text { num }
\]
if nam > Largest:
\[
\text { Largest }=\text { num }
\]
fietutin smallest, Largest
* Example usage.
\[
\begin{array}{l}
\text { rumbers }=[1,2,3,4,5,6,7,8,9] \\
\text { result }=\text { find_lrgst_smallst (numbers) }
\end{array}
\]
print (result)",170,"def find_lrgst_smallst(numbers):
    if not numbers:
        return None
    Smallest = Largest = numbers[0]
    for num in numbers:
        if num < Smallest:
            Smallest = num
        if num > Largest:
            Largest = num
    return Smallest, Largest


# Example usage
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_lrgst_smallst(numbers)
print(result)
",13,"def find_right_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage.
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_right_smallest(numbers)
print(result)
",13,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage.
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",11
"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The Sum of the Digits is: "", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0

    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",0.8,"def main():
user number
input (""Enter the number: "")
result = Sum_of_digits (user_number)
print (""The Sum of the digits is"", result)
def Sum_of_digits (user_ number):
W 18
number_str = Str (user_number)
digit_sum = 0
for digit in number str:
#zero
return digit sum
if_name_
main()
digit_sum += int(digit)
_main_"":",112,"def main():
    user_number = input(""Enter the number: "")
    result = Sum_of_digits(user_number)
    print(""The Sum of the digits is"", result)


def Sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",6,"def main():
    user_number = input(""Enter the number: "")
    result = Sum_of_digits(user_number)
    print(""The Sum of the digits is"", result)


def Sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",6,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The Sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",4,"def main():
user_number = input (""Enter the number: "")
result = Sum_of-digits (user_number)
print (""The Sum of the digits is"", result)
def Sum- of_digits (user_ number):
1#
number_str = Str (user- number)
digit_sum = 0 # zero
for digit in number-str:
digit_sum + int(digit)
return digit_sum
if name_ == ""__main_"":
main()",71,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",5,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The Sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",4,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The Sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",4,"def main():
user_number = input (""Enter the number:
"")
result = sum_of_digits (user_number )
print (""The sum of the digits is "", result)
def Sum_of_digits (user_number):
number_str = Str (user_number)
digit_sum=0 # zero
for digit in number-str:
digit_sum + = int (digit)
return digit sum
if _name _== ""_main_"":
main()",71,"def main():
    user_number = input(""Enter the number:\n"")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is "", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",6,"def main():
    user_number = input(""Enter the number:\n"")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is "", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",6,"def main():
    user_number = input(""Enter the number:\n"")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is "", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",6,"def main():
user_number = input (""Enter the number: "")
result = sum_of digits (user_number)
print (""The sum of the digits is"", result)
def sum_of_digits (user_number):
number_st \( r=\operatorname{str} \) (user_number)
digit_sum \( =\varnothing \quad \# \) zero
for digit in numberstr:
\[
\text { digit_sum } t=\operatorname{int} \text { (digit) }
\]
veturn digit_sum
if name_ \( =="" \) main_ \( "" \) :
main()",147,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",5,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",5,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",5
"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0.8,"def is-prime (n):
DON
if
Returns True if n is prime, False otherwise.
|(α ||
if n <
n < = 1:
return False
for i in range (2, int(n** 0.5) +1);
if n % i = = 0;
def main():
return True
[((11
The main function.
Int
return False
14
n = int ( input (""Enter a number: "")
if is-prime (n):
print (n
else:
""is a
main()
print (n. ""is not a prime number."")
name__ ==
prime number."")
11
main.
--
})",207,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"dof is -prime (n):
110V
Returns True if n is prime, False otherwise.
11011
if n <= 1:
return False
for i in range (2 , int(n**0.5 ) +1): :
if n % i == 0 :
return False
return True
def main():
The main function.
n= int (input ( ""Enter a number: "")
if is-prime (n):
print ( n , ""is a prime number."")
else :
print( n, ""is not a prime number. "")
if
name
11
main
"",
""
;
main()",152,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"def is-prime (n):
1104
Returns True if n is prime, False otherwise
11011
if n <= 1:
return False
for i in range (2, int(n*0.5)+1):
if n % i == 0.
return False
return True
def main () :
11 /11
The main function.
/11.11
n = int ( input (""Enter a number: "")
if is- prime (n):
print (n, "" is a prime number."")
else :
print( n, ""is not a prime number. "")
it
- - name __ == __ main -- :
main ( )",147,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n * 0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",3,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n * 0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",3,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n * 0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",3,"def is-prime \( (n) \) :
Returns True if \( n \) is prime, False otherwise.
IIU11
if \( n<=1 \) :
return False
for \( i \) in range \( \left(2, \operatorname{int}\left(n^{* *} 0.5\right)+1\right) \) :
if \( n \% i==0 \) :
retum False
return True
def \( \operatorname{main}() \) :
IIIII
The main function.
1....
\( n=\operatorname{int} \) (input (""Enter a number: "")
if is-prime \( (n) \) :
print \( (n \), ""is a prime number."")
else:
print ( \( n \), ""is not a prime number."")
if \( \ldots \) name _. \( =="" \) main .. ""
\( \operatorname{main}() \)",279,"def is_prime(n):
    # Returns True if n is prime, False otherwise.
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    # The main function.
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",30,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"def is_prime(n):
    """"""
    Returns True if n is a prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",2
"# Reverse String
def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


if __name__ == ""__main__"":
    main()
",0.8,"#Reverse String
def mam ():
str = input (""Input a string: "")
ro_str=
for i m str:
||||
if_name
r_str=i+r_stra
primt (r_stro)
mam ()
_maim_"":",78,"
# Reverse String
def main():
    str = input (""Input a string: "")
    r_str = ''
    for i in str:
        r_str = i + r_str
    print (r_str)
main()
if __name__ == ""__main__"":
",22,"# Reverse String
def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


main()
",31,"# Reverse String
def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


if __name__ == ""__main__"":
    main()
",0,"# Reverse
string
def main ():
str = input ( ""Input a string: "")
ro-str=
for i instr:
r_str=itn_str
print (n_str)
if_ name - "" - __main_
main ()",63,"# Reverse
def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


if __name__ == ""__main__"":
    main()
",7,"# Reverse string
def main():
    str = input(""Input a string: "")
    rev_str = """"
    for i in str:
        rev_str = i + rev_str
    print(rev_str)


if __name__ == ""__main__"":
    main()
",9,"# Reverse string
def main():
    n_str = input(""Input a string: "")
    r_str = """"
    for i in n_str:
        r_str = i + r_str
    print(r_str)


if __name__ == ""__main__"":
    main()
",5,"#Reverse String
def man ():
str = input (""Input a string: "")
ro _str= """"
for i'm str:
r_ str = i+ n_ str
print (no_stro)
if_name _= = ""_main_"":
main ()",55,"# Reverse String
def main():
    str = input(""Input a string: "")
    rev_str = """"
    for i in str:
        rev_str = i + rev_str
    print(rev_str)


if __name__ == ""__main__"":
    main()
",8,"# Reverse String
def main():
    str = input(""Input a string: "")
    rev_str = """"
    for i in str:
        rev_str = i + rev_str
    print(rev_str)


if __name__ == ""__main__"":
    main()
",8,"# Reverse String
def main():
    str_input = input(""Input a string: "")
    rev_str = """"
    for i in str_input:
        rev_str = i + rev_str
    print(rev_str)


if __name__ == ""__main__"":
    main()
",20,"\# Reverse string
def \( \operatorname{mam}() \) :
stro = input (""Input a string: "")
rostro \( ="" 11 \)
for i instr:
\[
r_{-} s t r=i+r_{-} s t r
\]
print (r_stro)
\[
\begin{array}{l}
\text { if_name- }=="" \text {-main_: } \\
\operatorname{mam} \text { () }
\end{array}
\]",157,"# Reverse string
def mam():
    stro = input(""Input a string: "")
    r_stro = """"
    for i in stro:
        r_stro = i + r_stro
    print(r_stro)


if __name__ == ""__main__"":
    mam()
",11,"# Reverse string
def mam():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


if __name__ == ""__main__"":
    mam()
",5,"# Reverse string
def rev_str():
    stro = input(""Input a string: "")
    r_stro = """"
    for i in stro:
        r_stro = i + r_stro
    print(r_stro)


if __name__ == ""__main__"":
    rev_str()
",21
"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    list = sentence.split()
    l_word = """"
    for word in list:

        if len(word) > len(l_word):
            l_word = word
    print(l_word)


if __name__ == ""__main__"":
    main()
",0.8,"# Write a Python program to find the longest word in a given text
def maint):
sentence = imput (""Input a sentence: "")
list = sentence.split()
Lword =
for world im List:
if len (word) >len (1-word):
1_ word = word
primt (1- word)
if_name_ == ""_mam_"":
main ()",78,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    lst = sentence.split()
    l_word = """"
    for word in lst:
        if len(word) > len(l_word):
            l_word = word
    print(l_word)


if __name__ == ""__main__"":
    main()
",3,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    list = sentence.split()
    l_word = """"
    for word in list:
        if len(word) > len(l_word):
            l_word = word
    print(l_word)


if __name__ == ""__main__"":
    main()
",1,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    words_list = sentence.split()
    longest_word = """"
    for word in words_list:
        if len(word) > len(longest_word):
            longest_word = word
    print(longest_word)


if __name__ == ""__main__"":
    main()
",37,"# Write a Python program to find the longest word in a given text
def main() :
sentence = input (""Input a sentence: "")
list = sentence.split1)
Iword = if 11
for word in List:
if len (word) ) len (1 word):
1_ word = word
print(1- word)
if_name- == ""_main-"":
main ()",73,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    words_list = sentence.split()
    l_word = """"
    for word in words_list:
        if len(word) > len(l_word):
            l_word = word
    print(l_word)


if __name__ == ""__main__"":
    main()
",13,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    words_list = sentence.split()
    longest_word = """"
    for word in words_list:
        if len(word) > len(longest_word):
            longest_word = word
    print(longest_word)


if __name__ == ""__main__"":
    main()
",37,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    words_list = sentence.split()
    longest_word = """"
    for word in words_list:
        if len(word) > len(longest_word):
            longest_word = word
    print(longest_word)


if __name__ == ""__main__"":
    main()
",37,"# Write a Python program to find the longest word i'm a given text
def main ():
sentence = input (""Input a sentence: "")
list = sentence. split ( )
Lword = """"1
for word in List:
if len (word) > 1en (1-word):
1-word = word
print (1-word)
if_name = ""_main_"" :
main ()",77,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    word_list = sentence.split()
    l_word = """"
    for word in word_list:
        if len(word) > len(l_word):
            l_word = word
    print(l_word)


if __name__ == ""__main__"":
    main()
",11,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    List = sentence.split()
    L_word = """"
    for word in List:
        if len(word) > len(L_word):
            L_word = word
    print(L_word)


if __name__ == ""__main__"":
    main()
",7,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    words_list = sentence.split()
    longest_word = """"
    for word in words_list:
        if len(word) > len(longest_word):
            longest_word = word
    print(longest_word)


if __name__ == ""__main__"":
    main()
",37,"\# Write a Python program to find the longest word a \( m \) a given text def main \( ( \) ):
sentence = imput (""Input a sentence: "")
list = sentence.split ()
lword = "" ""
for word im list:
if len (word) >len (1-word):
\[
\text { 1_word }=\text { word }
\]
primt (1-word)
if name_ \( == \) ""-main_"".
\( \operatorname{main}() \)",116,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    list = sentence.split()
    l_word = "" ""
    for word in list:
        if len(word) > len(l_word):
            l_word = word
    print(l_word)


if __name__ == ""__main__"":
    main()
",2,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    list = sentence.split()
    lword = """"
    for word in list:
        if len(word) > len(lword):
            lword = word
    print(lword)


if __name__ == ""__main__"":
    main()
",5,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    word_list = sentence.split()
    longest_word = """"
    for word in word_list:
        if len(word) > len(longest_word):
            longest_word = word
    print(longest_word)


if __name__ == ""__main__"":
    main()
",35
"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0.8,"def greatest common_divisor(a,b):
smaller_number=a if azb else b
common_divisor= []
for i in range (1, smaller_number +1):
if a %i == 0 and b% i ==0:
common_divisor.append()
return common_divisor [-1]",52,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def
greatest_common_divisorca,b):
smaller_number. = a if a4b else 10
common-divisor= []
for i in range (1, smaller_number +1) :
if a %i ==0 and b%i==0:
common_divisor . append(i)
return common_divisor [-1]",60,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor (a,b) :
smaller_ number = a if a <b else 10
common_divisor = []
for i in range (1, smaller_number +1):
if 9 % i == 0 and 6% i == 0:
common_divisor. append (i)
return common_divisor [-1]",52,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor \( (a, b) \) :
smaller_number \( =a \) if \( a<b \) else \( b \) common_divisor \( =[] \)
for \( i \) in range \( (1 \), smaller number +1\( ) \) : if \( a \% i==0 \) and \( b \% i==0 \) : common_divisor. a ppend (i) return common_divisor \( [-1] \)",94,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0
"def main():
    """"""
    The program should determine whether the given year is a leap year
    (divisible by 4, divisible by 100 but also by 400).
    """"""

    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below(in number form)."")
    Year = int(input(""Year : ""))
    print("" "")

    if (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" "" + ""is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" "" + ""is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("" "")
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")

        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()

        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break

        elif ask != ""Yes"" or ask != ""yes"" or ask != ""No"" or ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",0.8,"def main ():
The
should determine whether the given year is a leap year
(divisible by 4, divisible by loo but also by 400).
program
print (""This program will help you identify if a given year is a leap
or not."")
year
if
print ("" "")
()
identify_a_leap_year
ask_for_a_new_year_to_ identify ()
def identify_a_leap-year ():
print (""Please input
Year = int (imput ("" Year: ""))
print("" "")
else :
it (Year % 4 = = 0) or (Year %/ 100 ==0) or (Year % 400 ==0);
+ str (Year) +
+ "" is a leap year."")
V
print (""The Year
""+"" is not a leap year."")
print (""the Year
def ask_for_a_new_year_to_
white True:
-_name__
main ()
a year below (ill humber
if ask = =
+ str (Year).
-+
identify ():
print (')
ask - input (""Do you want to identify
print ("" "")
""__main__
form). "")
""Yes"" or ask
ask = = ""yes"" :
identify_a_ leap year ()
""
elif ask = = ""No"" or ask == ""no
a new year? Yes/No: "")
print (""Thank you. See you again!"")
break
elif ask != ""Yes
or ask != ""yes"" of ark! = ""No"" or ask != ""no"":
print (""Wrong keyword. Please type the exact keyword."")",486,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("" "")
    if (Year % 4 == 0) or (Year % 100 == 0) and (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" or ask != ""yes"" or ask != ""No"" or ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",56,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input("" Year: ""))
    print("" "")
    if (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" or ask != ""yes"" or ask != ""No"" or ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",59,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form). "")
    Year = int(input(""Year: ""))
    print("" "")
    if (Year % 4 == 0) and (Year % 100 != 0 or Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" or ask != ""yes"" or ask != ""No"" or ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",75,"def main ():
The program should determine whether the given year is a leap year
(divisible by 4, divisible by 100 but also by 400).
print (""This program will help you identify if a given year is a leap
year or not."")
print ( a)
identify- a - leap_ year ()
ask_for_a- new- year- to identify()
def identify- a - leap - year () :
print ("" Please input a year below (in number form)."")
Year = int (input (""Year: ""))
print ( .)
if (Year %4==0) or (Year % 100 = = 0) or (Year % 400 = = 0) :
print (""The Year ""+ str (Year) + v t is a leap year."")
else
print (""the Year str(Year) + "" + "" is not a leap year."")
def ask_for a-new. year to- identify ():
white True:
prilit ( 1)
ask = input (""Do you want to identify a new year? Yes/No: "")
print ( "" "")
if ask == ""Yes"" or ask == ""yes"":
identify_a_leap-yaar
elif ask = = ""No"" or ask == ""no"" :
print (""Thank you. See you again!')
break
elif ask != ""Yes or ask != ""yes"" a task!=""No"" or ask != ""no"":
print (""Wrong keyword. Please type the exact keyword. )
if name == ""__ main "":
main ()",296,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    if (Year % 4 == 0) and ((Year % 100 != 0) or (Year % 400 == 0)):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" and ask != ""yes"" and ask != ""No"" and ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",98,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    if (Year % 4 == 0) and (Year % 100 != 0 or Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" and ask != ""yes"" and ask != ""No"" and ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",98,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    if (Year % 4 == 0 and Year % 100 != 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        ask = input(""Do you want to identify a new year? Yes/No: "")
        if ask.lower() == ""yes"":
            identify_a_leap_year()
        elif ask.lower() == ""no"":
            print(""Thank you. See you again!"")
            break
        else:
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",194,"def main () :
The program should determine whether the given year is a leap year
( divisible by 4, divisible by 100 but also by 400).
print ( "" This program will help you identify if a given year is a leap
year or not . "")
print ("" "")
identify_a_leap year ( )
ask _ for _ a _ new _year _ to _identify ( )
def identify _ a _ leap year ( ) :
print ( "" Please input a year below ( in number form ) . "")
Year = int (input (""Year:
print ("" "")
if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;
print (""The Year + str(Year) + "" ""+ ""is a leap year."")
else :
print ( "" The Year "" + str ( Year ) + "" "" + "" is not a leap year . "" )
def ask-for-a-new year_ to _ identify ( ) :
white True :
print ("" "")
ask - input ( "" Do you want to identify a new year ? Yes / No : "" )
print ("" "")
if ask == ""Yes "" or ask == ""yes"":
identify_ a_ leap -year ( )
elif ask == ""NO"" or ask = ""no"":
print ( "" Thank you . See you again ! "" )
break
elif ask != ""Yes or ask != ""yes"" a ask! = ""No"" or ask != ""no"".
print ( "" Wrong keyword . Please type the exact keyword . "")
if
__ name_ == "" __ main __ "":
main ()",312,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("" "")
    if (Year % 4 == 0) and (Year % 100 != 0 or Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("" "")
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        else:
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",99,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("" "")
    if (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" "" + ""is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" "" + ""is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("" "")
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" and ask != ""yes"" and ask != ""No"" and ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",33,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    year = int(input(""Year: ""))
    print("" "")
    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
        print(""The Year "" + str(year) + "" is a leap year."")
    else:
        print(""The Year "" + str(year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("" "")
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask.lower() == ""yes"":
            identify_a_leap_year()
        elif ask.lower() == ""no"":
            print(""Thank you. See you again!"")
            break
        else:
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",132,"def \( \operatorname{main}() \) :
""The program should determine whether the given year is a leap year (divisible by 4, divisible by 100 but also by 400).
"" r""
print (""This program will help you identify if a given year is a leap year or not."")
privit ("" "")
identify - a - leap_year ()
ask_for_a new_year_to_identify ()
def identify - a l eap - year () :
print (""Please input a year below (in number form)."")
Year = int (input (""Year: ""))
print ("" "")
if \( ( \) Year \( \% 4=0) \) ) or \( ( \) Year \( \% 100=0) \) ) or \( ( \) Year \( \% 400=0) \) :
print (""The Year "" \( +\operatorname{str}( \) Year) + "" "" ""is a leap year."")
else:
\[
\text { print (""The Year ""+str (Year) }+ \text { "" "" "" is not a leap year."") }
\]
def ask_-fir_a_new - year_to_identify ():
white True:
print (' 1 )
ask = input (""Do you want to identify a new year? Yes/No:"") print ("" "")
if ask = = ""Yes "" or ask = = ""yes"":
identify - a - leap- year ()
elif ask \( == \) ""No"" or ask \( == \) ""no"" :
print (""Thank you. See you again!"")
break
elif ask ! = ""Yes or ask ! = ""yes"" a ask! = ""No"" or ask ! = ""no"":
print (""Wrong keyword. Please type the exact keyword."")
if .. name \( \ldots=="" \) main \( _{2}{ }^{\prime} \) :
main ()",401,"def main():
    """"""
    The program should determine whether the given year is a leap year
    (divisible by 4, divisible by 100 but also by 400).
    """"""
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("" "")
    if ((Year % 4 == 0) and (Year % 100 != 0)) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("" "")
        ask = input(""Do you want to identify a new year? Yes/No:"")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" and ask != ""yes"" and ask != ""No"" and ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",33,"def main():
    """"""
    The program should determine whether the given year is a leap year
    (divisible by 4, divisible by 100 but also by 400).
    """"""
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("" "")
    if (Year % 4 == 0 and Year % 100 != 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("" "")
        ask = input(""Do you want to identify a new year? Yes/No:"")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" and ask != ""yes"" and ask != ""No"" and ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",33,"def main():
    """"""
    The program should determine whether the given year is a leap year
    (divisible by 4, divisible by 100 but also by 400).
    """"""
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("" "")
    if Year % 4 == 0 and (Year % 100 != 0 or Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("" "")
        ask = input(""Do you want to identify a new year? Yes/No:"")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        else:
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",85
"sum = 0
number = input()
for i in number:
    sum += int(i)
Print(sum)
",0.8,"Sun =
S
number
imput ()
for i in number:
Sun + =
int(i)
Print (surm)
N",20,"Sum = 0
number = input()
for i in number:
    Sum += int(i)
print(Sum)
",4,"sum = 0
number = input()
for i in number:
    sum += int(i)
print(sum)
",1,"sum = 0
number = input()
for i in number:
    sum += int(i)
print(sum)
",1,"sun 2 = $
number N Emput ()
for i in number:
sun + 11 int(i)
print (sum )",20,"sum = 0
number = input()
for i in number:
    sum += int(i)
print(sum)
",1,"sum_2 = 0
number = input()
for i in number:
    sum_2 += int(i)
print(sum_2)
",7,"sum = 0
number = input()
for i in number:
    sum += int(i)
print(sum)
",1,"Sun = D
number = input ()
for i in number :
Sun + = int (i)
Print (Sum)",16,"Sum = 0
number = input()
for i in number:
    Sum += int(i)
print(Sum)
",4,"Sum = 0
number = input()
for i in number:
    Sum += int(i)
print(Sum)
",4,"Sum = 0
number = input()
for i in number:
    Sum += int(i)
print(Sum)
",4,"\[
\operatorname{sun}=\varnothing
\]
number = imput ()
for: in number:
\[
\text { sun }+=\operatorname{int}(i)
\]
print (sum)",69,"sun = 0
number = input()
for i in number:
    sun += int(i)
print(sun)
",4,"sun = 0
number = input()
for i in number:
    sun += int(i)
print(sun)
",4,"sum = 0
number = input()
for i in number:
    sum += int(i)
print(sum)
",1
"def factorial(n):
    if n <= 1:
        return 1
    else:
        return factorial(n - 1) * n


print(factorial(int(input())))
",0.8,"def factoria 1 (n):
if n <= 1 :
Return 1
else:
Return factorial (n-1) *
Prist (fractional (int (amput())))
h",49,"def factorial(n):
    if n <= 1:
        return 1
    else:
        return n * factorial(n - 1)
",37,"def factorial(n):
    if n <= 1:
        return 1
    else:
        return n * factorial(n - 1)
",37,"def factorial(n):
    if n <= 1:
        return 1
    else:
        return n * factorial(n - 1)
",37,"def factoric / (n):
if h L=1 :
Return 1
else :
Return factorial (n-1) A h
Print (factorial (int (input() ))) )",49,"def factorial(n):
    if n == 1:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(int(input())))
",9,"def factorial(n):
    if n == 1:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(int(input())))
",9,"def factorial(n):
    if n == 1:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(int(input())))
",9,"def factorial (n):
if n <= 1 ;
Return 1
else :
Return factorial (n-1) * h
Print (factorial (int (input ()))",42,"def factorial(n):
    if n <= 1:
        return 1
    else:
        return factorial(n - 1) * n


print(factorial(int(input())))
",0,"def factorial(n):
    if n <= 1:
        return 1
    else:
        return factorial(n - 1) * n


print(factorial(int(input())))
",0,"def factorial(n):
    if n <= 1:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(int(input())))
",8,"def factorial (n):
if \( n<1 \) :
Retunn 1
else:
Return factorial \( (n-1) * n \)
Print \( ( \) factarial \( (\operatorname{int}(\operatorname{imput}()))) \)",89,"def factorial(n):
    if n < 1:
        return 1
    else:
        return factorial((n - 1) * n)


print(factorial(int(input())))
",3,"def factorial(n):
    if n < 1:
        return 1
    else:
        return factorial(n - 1) * n


print(factorial(int(input())))
",1,"def factorial(n):
    if n < 1:
        return 1
    else:
        return factorial(n - 1) * n


print(factorial(int(input())))
",1
"year = int(input)

if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",0.8,"Year = int (impot
if yeur 1/4 = = $ and year 1/144 != 0 on Year 1.400 ==&=
Print (true)
else:
print (False)",35,"Year = int(input())
if Year % 4 == 0 and Year % 100 != 0 or Year % 400 == 0:
    print(True)
else:
    print(False)
",6,"Year = int(input())
if Year % 4 == 0 and Year % 100 != 0 or Year % 400 == 0:
    print(True)
else:
    print(False)
",6,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"year 2 int (input)
if I and year 1,144 1=0 on Year% 400==0:
Print (TRUE)
else :
print (False)",43,"year = int(input())
if year % 144 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",22,"year = int(input())
if year % 144 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",22,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"Year = ent (input)
if year / n == 4 and year 0/ 100 /=/ or year / 400 == 0 ;
Print (true)
else :
Print (False )",30,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"\[
\text { year }=\operatorname{int}(\text { impot })
\]
if Yearn \( \% \mu==\phi \) and year \( \% 1 \phi \phi !=\varnothing \) on Year \( \% 400==\phi \) :
Pine (true)
else:
print (False)",108,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2
"Word = input()

Word = "" "".join([i for i in word[::-1]])

Print(Word)
",0.8,"Word = imput()
word = """", join (I i for i in word [::
Print (word)",19,"Word = input()
word = """".join(i for i in Word[::-1])
print(word)
",9,"word = input()
word = """".join(i for i in word)
print(word)
",15,"word = input()
word = """".join(i for i in word)
print(word)
",15,"word = imput()
ward = "" "" "" "" join (I i from i in word[-:-]]]
Print (word)",22,"word = input()
word = "" "".join([i for i in word])
print(word)
",12,"word = input()
word = "" "".join([i for i in word])
print(word)
",12,"word = input()
word = "" "".join([i for i in word])
print(word)
",12,"Word = input ()
Word = """". join ([ "" for i in word [-]
Print (Word)",16,"word = input()
word = """".join([i for i in word])
print(word)
",13,"word = input()
word = """".join([i for i in word])
print(word)
",13,"word = input()
word = """".join([i for i in word[::-1]])
print(word)
",7,"\( \begin{array}{l}\text { Wond }=\operatorname{imput}() \\ \text { wand }="" \text { ""join }([i \text { for } i \text { in word }[\because-1]]) \\ \text { Print (wond) } \\\end{array} \)",134,"word = input()
wand = """".join([i for i in word][::-1])
print(wand)
",13,"word = input()
wand = """".join([i for i in word[:-1]])
print(wand)
",12,"word = input()
wand = """".join([i for i in word[:-1]])
print(wand)
",12
"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]

list3 = [i for i in list1 if i in list2]

print(list3)
",0.8,"list 1 = [1, 2, 3, 4]
bist 2 = [3, 4, 5, 6]
in lista]
bist 3 = [i for i in list 1 if i in
Print (list 3)",27,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list 1 = $ (1,2,3,4)
list2=[3,4,5,6]
=
list 3= [i for i in list 1 if i in listz]
print(list3)",20,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]

list3 = [i for i in list1 if i in list2]
print(list3)
",1,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]

list3 = [i for i in list1 if i in list2]
print(list3)
",1,"list 1 = [ 1, 2, 3, 4]
bist 2 = [ 3,4,5,6]
list 3 = Ji par i in list 1 if i in listz]
Print (list 3)",20,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"\( \begin{array}{l}\text { list } 1=[1,2,3,4] \\ \text { bist } 2=[3,4,5,6] \\ \text { fist } 3=[i \text { for } i \text { in list } 1 \text { if } i \text { in list }] \\ \operatorname{Pint}(\operatorname{list} 3)\end{array} \)",160,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2
"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]

even = [i for i in list1 if i % 2 == 0]

print(even)
",0.8,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [ è for i in lists if */2==4]
Print (even)",15,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = (123456789)
even = [i for i in list1 if i%2==0]
Print (even)",27,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [123456789]
even = [i for i in list1 if i % 2 == 0]
print(even)
",18,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list 1 = [1, 2, 3, 4, 5, 6, 7, 8,9]
even = [è for i in list 1 if i|2=]
Print (even)",16,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"\( \begin{array}{l}\text { list } 1=[1,2,3,4,5,6,7,8,9] \\ \text { even }=[i \text { for } i \text { in list } 1 \text { if } i \% 2==] \\ \text { Print (even) }\end{array} \)",116,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2
"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0.8,"def main ():
year
= int (input())
if (year % 4 == 0 and year % 100 != 0):
print (""True"")
elif (year % 100 == 0 and year % 400 ==0):
print (""True"")
if
else:
print (""False"")
name__
main ()
!!
>>
_main__'",78,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main ():
year = int (input())
if (year% 4==0 and year % 100 != 0):
print (""True"")
elif (year % 100 ==0 and year % 400 == 0):
print (""True"")
else:
print (""False"")
if -- name "" -- __main__"":
main()",68,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main ():
year = int (input ()
if ( year % 4 == 0 and year % 100 ! = 0):
print (""True"")
elif (year % 100 == 0 and year % 400=0):
print (""True"")
else:
print (""False"")
if
__ name __== "" __ main_"".
main ()",71,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main ():
\[
\text { year }=\operatorname{int}(\operatorname{input}())
\]
if (year \% \( 4==0 \) and year \( \% 100 !=0 \) ):
print (""True"")
elif (year \( \% 100==0 \) and year \( \% 400==0 \) ):
print (""True"")
else:
print (""False"")
if __name__ = = ""_main_."":
\( \operatorname{main}() \)",133,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0
"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0.8,"from
def
def
karel. stanford kavel import
main ():
build_column ()
step- up ()
build column()
step-up ()
build- column ()
def
step-up()
build- column()
build
column ():
turn-left()
build- beeper ()
build- beeper ()
build_ beeper ()
build-beeper ()
put - beeper ()
go - back()
turn - left ()
det build - beeper ():
put- beeper ()
move ()
go-back ():
turn around ()
step-up ()
def turn around ():
turn - left()
turn
left()
def step-up():
move ()
move ()
move ()
move ()
if - name
main ()
==
main
*",225,"from karel.stanford.karel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def step_up():
    move()
    move()
    move()
    move()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",103,"from karel.stanford.karel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def step_up():
    build_column()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",36,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def step_up():
    move()
    move()
    move()
    move()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",121,"from karel. . stanford kavel import
def main () :
build - column ( )
step - up ()
build - column()
step - up()
build. column ()
step - up()
build - column (
def
build - column ()
turn - left ()
build- beeper ( )
build beeper ()
build - beeper ()
build. - beeper ()
put - beeper ()
go - back ()
turn - left ()
def
build - beeper ():
put - - beeper ( )
move ()
det
go - - back() :
turn around ()
-
step - up ()
def turn - around ()
turn - left ()
turn - left ()
def step - up' () :
move ()
move ()
move ()
move ()
if 1 name
1 main :
main ()",252,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()


def step_up():
    move()
    move()
    move()
    move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",81,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()


def step_up():
    move()
    move()
    move()
    move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",81,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()


def step_up():
    move()
    move()
    move()
    move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",81,"from karel. stanford kavel import *
def main ():
build-column ( )
step -up ( )
build- column ()
Step -up ()
build- column ( )
Step -up ()
build - column ()
def
build - column ( ) :
turn - left ( )
build - beeper ()
build - beeper ( )
build - beeper ( )
build - beeper ( )
put - beeper ( )
go - back ()
turn- left ( )
def
build - beeper ( ) :
put - beeper ()
move ()
det
go - back ():
turn- around ( )
step -up ()
dex
turn- around () :
turn - left ()
turn - left ()
dex
step-up ():
move ()
move ( )
move ( )
move ( )
-
if - name _ == - main _:
main ( )",251,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0,"from karel. Stanfordkavel import * def main ():
build_column ()
step - up ()
build - column ()
Step - up ()
build_column ()
Step - up ()
build - column()
def build - column ():
turn - left ()
build - beeper ()
build - beeper ()
build - beeper ()
buitd - beeper ()
put - beeper ()
go - back ()
turn - left ()
det build-beeper ():
put - beeper ()
move ()
det go-back ():
turn - around ()
step - up ()
dex turn - around () :
turn - left ()
turn - left()
def step-up ():
move ()
move ()
move ()
move ()
if _ name _ \( == \) 'main _ :
main ()",233,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0,"from karel.Stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",1,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0
"def main():
    input_string = input('Input string: ')
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print ret

if __name__ == '__main__':
    main()",0.8,"def main ():
if
input_ string = input ('Input string; ')
11 11
ret =
for ch in input-string
ret
print ret
71
= ret + ch. uppert)
name__ =
main ()
main
20 07203",78,"def main():
    input_string = input(""Input string: "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",8,"def main():
    input_string = input(""Input string: "")

    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()

    print(ret)


if __name__ == ""__main__"":
    main()
",10,"def main():
    input_string = input(""Input string: "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",8,"def main () :
input - string = input(' Input string ')
ret = 11 11
for ch in input - stiting
ret = ret + ch. upperl )
print ret
1
1
if
name
main
-
-
main
()",66,"def main():
    input_string = input(""Input string "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9,"def main():
    input_string = input(""Input string "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9,"def main():
    input_string = input(""Input string "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9,"def main () ;
input_ string = input ( Input string:')
ret = "" ""
for ch in input string
ref = ret + ch.upper()
print ref
if __ name __ =
1
1
- -
main
--
main ( )",57,"def main():
    input_string = input(""Input string:"")
    ret = "" ""
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",10,"def main():
    input_string = input(""Input string:"")
    ret = "" ""
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",10,"def main():
    input_string = input(""Input string:"")
    ret = "" ""
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",10,"def main ():
\[
\begin{array}{l}
\text { input_string = input ('Input string! ') } \\
\text { ret }="" 11
\end{array}
\]
for ch in input.string
\[
\text { ret }=\text { ret }+ \text { ch. upperd) }
\]
print ret
if name \( \operatorname{main}( \) )",122,"def main():
    input_string = input(""Input string! "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9,"def main():
    input_string = input(""Input string! "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9,"def main():
    input_string = input(""Input string! "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9
"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",0.8,"O
O
O
from Kare!. Stamford Karel impert
def main ():
mere to beeper ()
pick beeper ()
turn-around ()
return to_start()
def muere to beepet():
while front_is_clear ():
Move
turn_right()
more()
turu-left()
More()
det turn around ():
turn left ()
turn left ()",106,"from karel.stanford import karel


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",12,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
        turn_right()
        move()
        turn_left()
        move()


def turn_around():
    turn_left()
    turn_left()
",18,"from Karel. stanfordKarel import
def main ():
move to beeper ()
pick_beeper()
turu_around()
Return to-start()
def more to beeper() :
while front-is-clear ():
move
turn_right()
more(
turn-left()
more()
det turu around ();
turn_ left ()
turu left ()",93,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from Karel.stanfordKarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",4,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from Karel. StanfordKarel import
def main ():
move_to_beeper ()
pick-beeper ()
turn-around()
return_to_start ()
def more_to_ beeper () :
While front-is-clear ();
move
turn_Right ()
move ()
turn-left ()
move ()
def turu_around ():
tura_left ()
turn left ()",92,"from Karel.StanfordKarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",5,"from Karel.StanfordKarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
        turn_right()
        move()
        turn_left()
        move()


def turn_around():
    turn_left()
    turn_left()
",21,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
        turn_right()
        move()
        turn_left()
        move()


def turn_around():
    turn_left()
    turn_left()
",18,"from Karel. stanfordKarel import
def main ():
move to beeper ()
pick-beeper ()
turu_around ()
ceturn to_start()
def more to beeper ():
while frout_is_clear (1):
move
turn_right ()
more ()
turu-left()
morre()
def turu_around ():
turu left ()
turu left ()",96,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2
"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",0.8,"from kanel.stanfordkarel import
def main ():
while front_is_ clear():
bill tower ()
def fill_tower ():
-
while front_is_ clear ():
put-beeper ()
move()
put_beeper()
column_return ()
def column_return ():
if
def turn around ():
while front_is_blocked ():
turn-around()
while front_is_ clear():
move ()
next-tower()
-
def next tower ():
if right_is_dean ():
turn_right()
move()
turn_right()
for i in range (2):
turn_left()
—
else:
turn around ()
while front_is_dear():
def turn_right():
-
move()
-
name
main ()
for i in range (3):
turn_left()
_main_':",323,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    if front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
        for i in range(2):
            turn_left()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",153,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
        for i in range(2):
            turn_left()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",85,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
        put_beeper()
        column_return()


def column_return():
    if front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
        next_tower()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
        for i in range(2):
            turn_left()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",165,"from karel. stanfordkard import
def main ()
while front. is clear () :
fill_tower()
def fill tower () :
while front - is - clean ():
put - beeper ()
move ()
put_beeper()
column_return() -
def columm_return(): -
while front_is_blocked() :
turn-around()
while front_is_clear()
move()
next_tower()
def turn around()
for i in range (2) :
turn-left()
def next tower() :
if right is-clean - ( ) :
turn -right()
move ()
turn_right()
else :
turn around()
while front_is_dear():
move()
def turn - right ():
for i in range (3) :
turn_left(c)
if - name == I main I :
main ()",238,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
        put_beeper()
        column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
        next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
    while front_is_clear():
        move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",20,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from kanel stanfordkard import *
det main () :
while front_is_clear ():
bill_tower ( )
det fill-tower ():
while front-is-clean ():
put-beeper ()
move ()
put_beeper ()
column_return ()
def column_return ():
while front_ is_blocked ():
turn-around ()
while front_is_clear () :
move ( )
next_tower ()
det turn-around ():
for i in range (2) :
turn-left ( )
det next_tower ():
if right_is_clean ():
turn-right ( )
move()
turn-right ()
else :
turn-around ()
while front-is-clear ():
move( )
def turn-right ():
for i in range (3):
turn_left ()
if
- name _
== '_ main
1
..
main ()",243,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        build_tower()


def build_tower():
    while front_is_clear():
        put_beeper()
        move()
        put_beeper()
        column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
    while front_is_clear():
        move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",22,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        build_tower()


def build_tower():
    while front_is_clear():
        put_beeper()
        move()
        put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
    while front_is_clear():
        move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",18,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()
        next_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
    while front_is_clear():
        move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",29,"from karel.stanfordkarel import *
def main ():
while front_is_dear () :
fill_tower ()
def fill_tower ():
while front_is_dear ():
put-beeper ()
move ()
put_beeper ()
column_return ()
def colurn-return () :
while front_is_blocked ( ):
turn-around ()
while front_is_clear () :
move ()
next_tower ()
def turn_around () :
for \( i \) in range (2):
turn-left ()
def next_tower ( ) :
if right_is_dear ( ):
turn_right ()
move ()
turn_right ()
else:
turn_around( )
while front_is_dear ():
move ()
def turn_right () :
for \( i \) in range (3):
turn_left ()
if _ name \( ==1 \) _ main _ '
main ()",245,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",0
"def filter_string_a(string):
      string.sort()
      filtered_string_list = [ ]
      for str in string:
             if str.startswith(""a""):
                    filtered_string_list.append(str)
       return filtered_string_list
input_string = [""apple"", ""banana"", ""avacado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)",0.8,"der fitters string - a (string);
sont ()
string.
filtered_string_list = [3
toru
1
in
string:
stru. start with (""a"");
stru
filtreried_rodring-lirt: append
returen filtered_string-lit
(stru)
imput_string = [""apple"", ""bunana"", ""avacad""
""cheveny"", ""apriest""""]
output = filtern-string- a (imput_string)
print (output)",131,"def filter_string_a(string_list):
    filtered_string_list = []
    for stru in string_list:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",49,"def filter_string_a(string):
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",48,"def filter_string_a(string_list):
    filtered_string_list = []
    for str in string_list:
        if str.startswith(""a""):
            filtered_string_list.append(str)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",46,"def - a (string):
string. sort ()
filtered -string-list = -[I
for stru in string :
if stru startswith (""a""):
append (str))
return
input_ string z [ apple"" ""bunana"", ""avacado)
""chevry"", ""apricot""]
output fifter z string a (input-ntuing)
print (output)",151,"def filter_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""chevy"", ""apricot""]
output = filter_a(input_string)
print(output)
",46,"def a(string):
    string.sort()
    filtered_string_list = [stru for stru in string if stru.startswith(""a"")]
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""chevry"", ""apricot""]
output = a(input_string)
print(output)
",118,"def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""chevry"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",31,"det filter-string-a (string) :
string. sort ()
filtered- string-list = []
foru stre in strung :
if stru. startswith (""a""):
filtered-string-lint: append
( stru)
returen filtered-string- list
input_string = \""apple"", ""bunana"", ""avacado
""cheving "" ""apricot""]
Output = filter-string-a (input_string)
print (output)",104,"def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""chewing"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",34,"def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""chewing"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",34,"def filter_string_a(strings):
    strings.sort()
    filtered_string_list = []
    for string in strings:
        if string.startswith(""a""):
            filtered_string_list.append(string)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",38,"def filteru-string-a (ntring):
string. sont ()
filtered-string_list \( =[] \)
for stre in atring:
if stru. Ptark with (""an):
fiterced-atring-lint. append (stru)
return filtered-rtring-lirst
imput_rting \( z \) ""apple"", ""bunana"", ""avacado"" ""cherry"" ""apricot"" pring (output)",146,"def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",30,"def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
print(input_string)
",62,"def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for s in string:
        if s.startswith(""a""):
            filtered_string_list.append(s)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",33
"def main():
  while front_is_clear():
      move()
  if front_is_blocked():
      turn_around()
  move()
  turn_left()
  move()
  pick_beeper()
  turn_left()
  turn_left()
  while front_is_clear():
      move()
  if front_is_blocked():
      turn_around()
  move()
  turn_around()

    
def turn_around():
    for i in range(3)
        turn_left ()",0.8,"def main:
While front_is_clear();
move()
if front_is_blocked ().
turn-around ()
move ()
turn_left()
move ()
pick_beeper ()
turn - left().
turn_left()
while front is clear ():
Move ()
if front_is_ blocked ():
turn around ().
move()
turn
around ()
def turn around ():
turn- lieft
Left
for i in range (3)
()",117,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_left()
    move()
    pick_beeper()
    turn_left()
    turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_around()


def turn_around():
    turn_left()
    for i in range(3):
        turn_left()
",55,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    turn_left()
    for i in range(3):
        turn_left()
",87,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    turn_left()
    turn_left()
    for i in range(3):
        pass
",113,"def main :
While front is clearc):
move
if front _is_blocked ():
turn_around ()
move ( )
turn_left ()
move ()
pick- beeper()
turn - left )
turn - left()
while front is clear ( ):
move ( )
if front is - blocked ()
turn- around ()
movel )
turn around ()
def turn-around ():
for i in range (3)
life ( )",120,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    for i in range(3):
        lift()
",77,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
        while front_is_clear():
            move()
        if front_is_blocked():
            turn_around()
            move()
            turn_around()


def turn_around():
    for i in range(3):
        lift()
",101,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    for i in range(3):
        lift()  # replacing 'life' with 'lift'
",101,"def main :
While front-is-clear():
move ( )
if front_is_blocked ().
turn-around ()
move ()
turn_left ( )
move ()
pick-beeper ()
turn- left ()
turn-left ()
while front_is_clear ()!
move ( )
if front_is _ blocked ( ).
turn - around ( )
move ()
turn around ()
def turn-around ():
for i in range (3)
left ()",112,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    for i in range(3):
        left()
",76,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    for i in range(3):
        left()
",76,"def main():
    while front_is_clear():
        move()
        if front_is_blocked():
            turn_around()
            move()
            turn_left()
            move()
            pick_beeper()
            turn_left()
            turn_left()
    while front_is_clear():
        move()
        if front_is_blocked():
            turn_around()
            move()
            turn_around()


def turn_around():
    for i in range(2):
        turn_left()
",120,"def main:
While front_is_clearc):
move ()
if front-is-blocked ():
tuin-around()
move ()
turn-left ()
move ()
pick-beeperc)
tuin-left()
tuin-left()
while front_is clear ():
move ()
if front-is-blocked ():
turn-around ()
move()
turn around ()
def turn-around ():
for in range (3)",114,"
def main():
	While front_is_clear():
		move()
	if front_is_blocked():
		turn_around()
	move()
	turn_left()
	move()
	pick_beeper()
	turn_left()
	turn_left()
	while front_is_clear():
		move()
	if front_is_blocked():
		turn_around()
	move()
	turn_around()

def turn_around():
	for i in range(3)
",79,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_left()
    move()
    pick_beeper()
    turn_left()
    turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_around()


def turn_around():
    for i in range(3):
        pass
",49,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_left()
    move()
    pick_beeper()
    turn_left()
    turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_around()


def turn_around():
    for _ in range(2):
        turn_left()
",41
"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return False
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",0.8,"-def is_leap-year (year);
if year % 4= = 0!
is yeare °6 100 = = 0:
1 year 1.400.
if
return. Trive
0:
ebbe:
return false
else:
else:
return false
return false
def main ():
yeare = int Cinput (""Enter a year: ""))
is_ leap - is_ leap year (year)
print (is-leap)
if name_
maino
==
11
main"":",185,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is - leap-year (year):
if year % 4 == O:
if year % 100 = O:
if year % 400 = = O:
return True
else:
return False
else:
return False
else:
return False
def main ():
year = int (input (""Enter a year: ""))
is- leap = is_ 1 eap-year (year)
print (is_ leap)
if 1 name = -"" main
"":
if
main()",153,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return False
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",0,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return False
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",0,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is-leap year (year):
if years % 4 == 0'
if year % 100= = 0:
year % 400 = = 0:
return True
else:
return False
else:
return False
else:
return False
def main ().
year = int (input (""Enter a year: "")
is- leap= is-leap- year (years)
print (is-leap)
if
name_ = ""_main_"":
main()",154,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is-leap-year (year):
if yeare \( \% 4==0 \) :
if year \( \% 100=0 \) :
if year \( \% 400==0 \) :
return. True
else:
return False
else:
retur false
else:
ruturn False
def \( \operatorname{main}() \) :
yearc = int (input (""Enter a year: ""))
is teap = is leap-year (year)
print (is_leap)
if \( \operatorname{mame}_{-}=="" \) main "":
main()",202,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return False
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",0,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4
"def main():
    print("" problem - 5 "")
    print(""-----------------"")
    numb = int(input(""write an  number: ""))
    mak_list = [int(x) for x in str(numb)]

    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the number's digit: "", add_numb)


if __name__ == ""__main__"":
    main()
",0.8,"def main ():
print (""problem - 5
---"")
print (""---
numb = int (input (write an integer number:
mak_list = [int (x) for x in sts (numb)]
add-numb = 0
fon is in mak_list:
-5 "")
add_numb + = i
print (""Sum of the numbers:
digit
if_name__
main()
=
u
main__""
11
')
add_numb)",126,"def main():
    print(""problem - 5"")
    print(""---"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",31,"def main():
    print(""Problem - 5 ---"")
    numb = int(input(""Write an integer number:""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the numbers:"", add_numb)


if __name__ == ""__main__"":
    main()
",48,"def main():
    print(""problem - 5"")
    print(""---"")
    number = int(input(""Write an integer number: ""))
    make_list = [int(x) for x in str(number)]
    add_number = 0
    for i in make_list:
        add_number += i
    print(""Sum of the numbers:"", add_number)


if __name__ == ""__main__"":
    main()
",45,"def main() :
print ("" ""problem -5 "")
"")
numb = int (input (write an integer number: ')
print (""
mak list = [ int (x) for x in str (numb)]
add-numb = 0
for is in mak_list :
add-numb + = i
print (""sum of the number's: "", add-numb)
digit
if name = = ""_ main__""
main()",116,"def main():
    print(""problem -5 "")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",49,"def main():
    print(""problem -5"")
    numb = int(input(""Write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the numbers:"", add_numb)


if __name__ == ""__main__"":
    main()
",51,"def main():
    print(""problem -5"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",50,"def main () :
print (""problem - 5 "")
print (""-
rumb = int (input ('write an integer number:
mak_list = [int (x) for x in str (numb)]
add-numb = 0
for is in mak-list :
add-numb +=i
print (""Sum of the number's:
"", add_numb)
digit
if_ name __ = =
-- main __:
main()",109,"def main():
    print(""problem - 5 "")
    numb = int(input(""write an integer number:""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the number's digits: "", add_numb)


if __name__ == ""__main__"":
    main()
",42,"def main():
    print(""problem - 5 "")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the number's: "", add_numb)


if __name__ == ""__main__"":
    main()
",46,"def main():
    print(""problem - 5"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",48,"def main ():
print (""problem - 5 "")
print (""............"")
numb = int (input ('write an integer number: ')
mak_list \( =[ \) int \( (x) \) for \( x \) in rtr (numb) \( ] \)
add-numb \( =0 \)
fon is in mak-list:
add_numb \( +=i \)
print (""Sum of the numbers: "", \( a d d \)-numb)
If _ name _ \( == \) ""- main_.""
main()",142,"def main():
    print(""problem - 5 "")
    print(""............"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",33,"def main():
    print(""problem - 5 "")
    print(""............"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",33,"def main():
    print(""problem - 5 "")
    print(""............"")
    num = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(num)]
    add_num = 0
    for i in mak_list:
        add_num += i
    print(""Sum of the numbers: "", add_num)


if __name__ == ""__main__"":
    main()
",38
"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",1,"int (input (""Enter a number: "")
num =
Ans =)
while num > 1:
Ans * = num
num - =|
1
return Ans",29,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int input C ""Enter a number: 11)
Ans = )
while num > / :
Ans * = num
mm - = /
return Ans",23,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",0,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",0,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int (input (""Enter a number: ""
Ans =1
while num > 1 :
Ans * = num
num -= 1
return Ans",16,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
print(Ans)
",8,"num = int (input (""Enter a number: "")
\[
\text { Ans = } 1
\]
while num \( >1 \) :
Ans \( *= \) num
mum - \( =1 \)
retirn Ans",45,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",0,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",0,"num = int(input(""Enter a number: ""))
Ans = 1
while num > 1:
    Ans *= num
    num -= 1
return Ans
",0
"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
    turn_right()
    move()
    turn_left()
    move()


# This function return to Karel's starting point.
def go_back():
    for i in range(2):
        turn_left()
    for i in range(3):
        move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left


if __name__ == ""__main__"":
    main()
",1,"from Karel. stanfordkarel import *
#This
program
a beeper and
def main ():
if
Karel pick
up
back into her house,
#Move to the beeper.
makes
go
move beeper ()
#Pick the beeper up.
beeper ()
pick
#Return to Karel's starting point.
go-back ()
#This function moves Karel to the beeper.
def move-beeper ():
for i in
(2):
range
move()
turn right()
move()
turn left()
move()
# This function return to Kard's starting
def go-back();
for ?. in range
turn-left()
for i
name
main ()
move()
turn_right()
move (f
turn-right()
def turn_right()
for i in range (3) =
turn-
left
rang
e (3);
==
main____'",257,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    go_to_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def go_to_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# This function return to Karel's starting point.
def go_back():
    for i in range(2):
        turn_left()
        move()
        turn_right()
        move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",66,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.


def main():
    # Move to the beeper.
    move_to_beeper()
    # Pick up the beeper.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_to_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# This function returns to Karel's starting point.
def go_back():
    for i in range(2):
        turn_left()
        for i in range(2):
            move()
            turn_right()
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",67,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.


def main():
    move_to_beeper()
    pick_beeper()
    go_back()


# This function moves Karel to the beeper.
def move_to_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# This function returns to Karel's starting point.
def go_back():
    for _ in range(4):
        turn_left()
    for i in range(2):
        move()
        turn_right()
        move()
        turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",130,"from Karel. stanfor dkarel import *
# This program makes Karel pick up
a beeper and go back into her house.
def main () :
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick - - beeper
# Return to Karel's starting point.
go back ( )
# This function moves Karel to the beeper.
def move - -beeper ( ) :
for i in range (2) :
move ()
torn right ()
move ( )
turn left( )
movel )
# this function return to Karel's starting poin
def go-back() ; for i. in range (2) :
turn- left ()
for i in rang e (3) :
move()
turn-right
()
turn move() - right ()
def turn right ():
for i in range (3)
turn - left
if
name
main
main ()",195,"from karel.stanfordkarel import *

# This program makes Karel pick up
# a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# This function return to Karel's starting point
def go_back():
    for i in range(2):
        turn_left()
    for i in range(3):
        move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",21,"from karel.stanfordkarel import *

# This program makes Karel pick up
# a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# this function returns to Karel's starting point
def go_back():
    for i in range(2):
        turn_left()
    for i in range(3):
        move()
        turn_right()
        move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",44,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_to_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_to_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# This function returns to Karel's starting point.
def go_back():
    for i in range(2):
        turn_left()
    for i in range(3):
        move()
    turn_right()
    move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",42,"from Karel. stanfordkarel import *
# This program makes Kavel pick up
a beeper and go back into her house.
def main ():
# Move to the beeper.
move_ beeper ()
# Pick the beeper up.
pick- beeper ()
# Return to Karel's starting point.
go - back ()
# This function moves karel to the beeper.
def move-beeper ():
for i in range (2):
move ()
turn right ()
move ()
turn left ()
move()
# this function return to Karel's starting poin
def 90-back ();
For ?. in range (2):
turn-left ()
for i in range (3):
move()
turn right ()
move (),
turn-right ()
def turn-right () ?
for i in range (3):
turn-left
if -- name == ' -- main_';
main ()",177,"from karel.stanfordkarel import *

# This program makes Karel pick up
# a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# this function return to Karel's starting point
def go_back():
    for i in range(2):
        turn_left()
    for i in range(3):
        move()
        turn_right()
        move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",31,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# This function return to Karel's starting point
def go_back():
    for _ in range(2):
        turn_left()
        for i in range(3):
            move()
            turn_right()
            move()
            turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",52,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into his house.
def main():
    # Move to the beeper.
    move_to_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves karel to the beeper.
def move_to_beeper():
    for i in range(2):
        move()
        turn_right()
        move()
        turn_left()
        move()


# This function return to Karel's starting point
def go_back():
    for _ in range(2):
        turn_left()
        for i in range(3):
            move()
        turn_right()
        move()
        turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",49,"from Karel.stanfordkarel import * \#This program makes Karel pick up a beeper and go back into her house. def main ():
\#Move to the beeper. move_beeper () \# Pick the beeper up. pick - beeper () \# Return to Karel's starting point. go-back ()
\#This function moves Karel to the beeper. def move-beeper ():
for \( i \) in range (2):
move ()
turn right ()
move ()
turn leftc)
movec)
\# this function refurn to Karel's starting poin def go-back () ;
for i, in range (2):
for \( i \) in range \( (3) \) :
move ()
\[
\text { move ( } \text { tor }^{2} \mathrm{righ}(\mathrm{C})
\]
def turn-right () ?
for \( i \) in range (3):
turn-left
\[
\text { if } \operatorname{mame}_{\operatorname{man}()}==1 \ldots \text { main } \ldots
\]
\( m \operatorname{ain}() \)",306,"from Karel.stanfordkarel import *

# This program makes Karel pick up
# a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
    turn_right()
    move()
    turn_left()
    move()


# this function returns Karel to her starting point
def go_back():
    for i in range(2):
        for i in range(3):
            move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",57,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.


def main():
    # Move to the beeper.
    move_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_beeper():
    for i in range(2):
        move()
    turn_right()
    move()
    turn_left()
    move()


# this function return to Karel's starting point
def go_back():
    for i in range(2):
        for i in range(3):
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",63,"from karel.stanfordkarel import *

# This program makes Karel pick up a beeper and go back into her house.
def main():
    # Move to the beeper.
    move_to_beeper()
    # Pick the beeper up.
    pick_beeper()
    # Return to Karel's starting point.
    go_back()


# This function moves Karel to the beeper.
def move_to_beeper():
    for i in range(2):
        move()
    turn_right()
    move()
    turn_left()
    move()


# This function returns to Karel's starting point.
def go_back():
    for i in range(2):
        for i in range(3):
            move()


# This function is needed to turn right since Karel can only turn left natively.
def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",89
"def main():
    # input
    my_word = input(""Enter the original word: "")

    # function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is"" + "" "" + '""' + reversed_word + '""')


# Helper function
def reverse(word):
    # reversed_word
    new_word = """"
    # char by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word


if __name__ == ""__main__"":
    main()
",1,"def main ()
#imput
my _ word = imput(""Entlo- The original wood: 7)
#Function calling
reversed word = reverse (my-word)
Print ('The
reversed wood is 1+`
#Helper FunctTION
def
Lif
reverse (woord):
#reversed -won-d
mew-won-d=""/
☆ ster by chan-
for chan- im word:
new-woo-d
return
return new_wond
mame
main()
A/
+revered_word +
=char + new-wood",210,"def main():
    # input
    my_word = input(""Enter the original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)


# Helper Function
def reverse(word):
    # reversed word
    new_word = """"
    # character by character
    for char in word:
        new_word = char + new_word
    return new_word


main()
",75,"def main():
    # input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is "" + reversed_word)


# Helper Function
def reverse(word):
    # reversed_word
    new_word = """"
    # iter by char
    for char in word:
        new_word = char + new_word
    return new_word


if __name__ == ""__main__"":
    main()
",37,"def main():
    my_word = input(""Enter The original word: "")
    reversed_word = reverse(my_word)
    print(""The reversed word is "" + reversed_word)


def reverse(word):
    new_word = """"
    for char in word:
        new_word = char + new_word
    return new_word


main()
",155,"def main () :
# imput
my wond = inpuTC ""Enter THe original wond:
7)
#
Function calling
reversed_word = reverse (my - -word )
print C' the reversed Wood is + , + "" , + reversd-wordt 1/2)
# Helpen Function
def reverse (wond) :
# revenued -wond
new -wohd - = "" ""
# stert by chan-
for chan- in word :
new-word = Char + new-word
# retun-m
retuntm new_wond
if
name == main :
mainc)",150,"def main():
    # input
    my_word = input(""Enter The original word: "")

    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "", +reversed_word)


# Helper Function
def reverse(word):
    # reversed word
    new_word = """"

    # start by char
    for char in word:
        new_word = char + new_word

    # return
    return new_word


if __name__ == ""__main__"":
    main()
",27,"def main():
    # input
    my_word = input(""Enter The original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "", reversed_word)


# Helper Function
def reverse(word):
    # reversed_word
    new_word = """"
    # start by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word


if __name__ == ""__main__"":
    main()
",26,"def main():
    # input
    my_word = input(""Enter the original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)


# Helper Function
def reverse(word):
    # reversed-word
    new_word = """"
    # start by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word


if __name__ == ""__main__"":
    main()
",24,"def main ( ) :
Limput
my _ word = input( Enten- The original word : 7
#Function calling
reversed- word = reverse (my-word )
Print ( the reversed word is (+) ""+""""+reversed-wordt""}
# Helpen- Function
def sevense
be (word) :
# reversed - word
mew-word = """"
A chen by chan-
For- chan- in word:
new-word = Char + new-word
# return
return new_word
name-
main 1 :
main ()",149,"def main():
    my_word = input(""Enter The original word: "")
    # Function calling
    def reverse(word):
        new_word = """"
        # reversed - word
        for char in word:
            new_word = char + new_word
        return new_word

    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)


if __name__ == ""__main__"":
    main()
",195,"def main():
    my_word = input(""Enter the original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)


# Helper Function
def reverse(word):
    # reversed - word
    new_word = """"
    # A char by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word


if __name__ == ""__main__"":
    main()
",37,"def main():
    my_word = input(""Enter the original word: "")
    # Function calling
    reversed_word = reverse(my_word)
    print(""The reversed word is: "" + reversed_word)


# Helper Function
def reverse(word):
    # reversed - word
    new_word = """"
    # A char by char
    for char in word:
        new_word = char + new_word
    # return
    return new_word


if __name__ == ""__main__"":
    main()
",37,"defmaim ():
\&imput
\( m y \)-wond = impuT (""EnTen- THe onigimal wond: "")
Function calling
\# Helpen-Fumction
\[
\begin{array}{l}
\text { def nevense (won-d): } \\
\text { * revensed -won-d } \\
\text { mew-won-d = ""1 } \\
\text { X stent by chan- } \\
\text { for chan- im vond: } \\
\text { mew-won-d = chan }+ \text { mew-wond } \\
\text { * } r \text {-etun-m } \\
\text { nietuntm new-won-d } \\
\end{array}
\]",298,"def main():
    input_word = input(""Enter the original word: "")


# Helper Function
def reverse(word):
    reversed_word = """"
    for char in word:
        reversed_word = char + reversed_word
    return reversed_word
",239,"def main():
    input_word = input(""Enter the original word: "")
    # Function calling
    # Helper Function
    def reverse(word):
        reversed_word = """"
        for char in word:
            reversed_word = char + reversed_word
        return reversed_word
",221,"def main():
    my_word = input(""Enter the original word: "")
    nevense(my_word)  # Function calling


# Helper Function
def nevense(word):
    reversed_word = """"
    for char in word:
        reversed_word = char + reversed_word
    return reversed_word
",218
"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial for "" + str(input_nmb) + "" is "" + str(result))
",1,"impur-number =
int(impur (""Enter number'))
val = inpur-number
result isput_number
while (val > 1):
Val - 1
result ☆ val
+
Print ('factorial for 't shy (input-node]
+ srr (result))
val
[₁
-result",80,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val -= 1
    result *= val

print(""factorial for "" + str(input_number) + str(result))
val = 1
result
",42,":
input_number = int(input(""Enter number""))
val = input_number
result = input_number
while (val > 1):
    val -= 1
    result *= val

print('factorial for ' + str(input_number) + ' is ' + str(result))
val
result
",40,"input_number = int(input(""Enter number: ""))
val = input_number
result = input_number
while val > 1:
    val -= 1
    result *= val

print(""Factorial for "" + str(input_number) + "" is "" + str(result))
",24,"impur-number =
inr(inpur ('Enter number')
val = inpur-number
result input-number
while (val > 1) :
[
val =
Val - 1
result = result it val
Print ('factorial fir't shr(imput-nula)
Srr (result))",59,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial for"", str(input_number), str(result))
",16,"import_number = int(input(""Enter number""))
val = import_number
result = import_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial for"", str(import_number), str(result))
",28,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial for"", str(input_number), ""is"", str(result))
",12,"inpur_number =
int(impur (""Enter number""
Val = inpur-number
result = input-number
While (val>1):
val =
val -1
result = result & val
print ('factorial f& + sur(input-node)
+ spr (result))",50,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial of "" + str(input_number) + "" is "" + str(result))
",5,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial of "" + str(input_number) + ""is "" + str(result))
",6,"input_number = int(input(""Enter number: ""))
val = input_number
result = input_number
while val > 1:
    val -= 1
    result = result * val
print(""factorial of "" + str(input_number) + "" is "" + str(result))
",14,\( \begin{array}{l}\text { inpur-number = } \\ \text { inr(inpur('Entar number')) } \\ \text { val }=\text { impur-number } \\ \text { resalt - roppur-number } \\ \text { while (val }>1 \text { ): } \\ {\left[\begin{array}{c}\text { val }= \\ \text { result }=\text { result }-1 \\ \text { val }\end{array}\right.} \\ \text { pront ('factobial for' + shr(impat-nob) } \\ +\operatorname{srr}(\text { result })) \\\end{array} \),273,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial for "" + str(input_number) + "" is "" + str(result))
",3,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val -= 1
    result *= val
print(""factorial for "" + str(input_number) + "" is "" + str(result))
",20,"input_number = int(input(""Enter number""))
val = input_number
result = input_number
while val > 1:
    val = val - 1
    result = result * val
print(""factorial for "" + str(input_number) + "" is "" + str(result))
",3
"def main():
    num = input(""input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main ():
num = input (""imput :"")
sum
=
O
for nin num =
sum t
print (sum)
=
int (n)",49,"def main():
    num = input(""input :"")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)

    return
",14,"def main():
    num = input(""Input :"")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",3,"def main():
    num = input(""input:"")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main () :
num = input (""Input: "")
sum = 0
for n in num i
sum + = int (n)
print (sum)",33,"def main():
    num = input(""Input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main():
    num = input(""Input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main():
    num = input(""Input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main () :
num = input (""Input : "")
sum = 0
for n in num :
sum + = int (n)
print (sum)",34,"def main():
    num = input(""Input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main():
    num = input(""Input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main():
    num = input(""Input : "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",2,"def \( \operatorname{main}(C) \) :
\[
\begin{array}{l}
\text { num }=\text { input (""input: "") } \\
\text { sum }=0
\end{array}
\]
for \( n \) in num:
\[
\operatorname{sum} t=\operatorname{int}(n)
\]
print (sum)",132,"def main(C):
    num = input(""input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main(C):
    num = input(""input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1,"def main(C):
    num = input(""input: "")
    sum = 0
    for n in num:
        sum += int(n)
    print(sum)
",1
"def main():
    num = input(""enter the number you want to add"")
    sum = 0
    for i in str(num):
        sum = sum + int(i)
    print(""sum of the value you entered is"", sum)
",1,"def main (s.
()!
61508x08 09
0818 TU O sloj toč
num= Impot (""enter the number you want to add)
поше
Inpri
som = 0 101
zgnivoe nuovesimixam
=0
(AD) tizoged to stopilitie nod ovoseido gnieod
aliotab ort eromeH ab10001 100 ot ti of no blert ezabelą - moosoo ucy to noilomitnoo ei tohol zid
for i in str(num): com
35100 suzel
8181882405
Sum=somt int (i)
edmult inucA
telti tuossA
""mis
Print (""sum of the value you entered is, son)
HILOM
00.000,82
log
alpä yliutoM
noitq Inomseudaid 12915ml
ASOS SS VOM
noitosilofigo inayo?
LF1",375,".python
def main():
    num = input(""enter the number you want to add: "")
    sum = 0

    for i in str(num):
        sum += int(i)

    print(""sum of the value you entered is"", sum)
",19,"def main():
    num = input(""enter the number you want to add"")
    sum = 0
    for i in str(num):
        sum += int(i)
    print(""sum of the value you entered is"", sum)
",7,"def main():
    num = input(""Enter the number you want to add: "")
    sum = 0
    for i in str(num):
        sum += int(i)
    print(""Sum of the value you entered is: "", sum)
",13,"SINOE
808
09
def main(s)
num= Imput (""enter the number you want to odd"")
UOV
Sum = 0
estimixom
(I)
tizoqeC
to
stooilities
@dno8
covocaiC
o
UOV
Andri
alinteb
310
enelt
ab10007
no
blort
mov
to
for i in str(mum);ass YDM
hedmuff
Sum-Sumt int (i)
reltiT
00.000,E8
Print (""sum of the Value you entered is, blan sum)
ASOS SS VDM
virutoM
noitosilation
;hoita
LA",227,".python
def main():
    num = input(""Enter the number you want to add: "")
    Sum = 0
    for i in str(num):
        Sum = Sum + int(i)
    print(""Sum of the values you entered is: "", Sum)

main()
",27,"def main():
    num = input(""Enter the number you want to add"")
    Sum = 0
    for i in str(num):
        Sum = Sum + int(i)
    print(""Sum of the value you entered is "", Sum)


main()
",16,"def main():
    num = input(""Enter the number you want to add: "")
    Sum = 0
    for i in str(num):
        Sum += int(i)
    print(""Sum of the digits you entered is: "", Sum)


main()
",31,"def main () .
08168 TU
11
num = input (""enter the number you want to add )
Som=0
zpnivo
1ovoseidl o prieoorla
hotel
heH
ab
ot ti of no blerl gabelq
for è in str (num) :
Vi inucoDA
Sum = Sum+ int (i)
raltil touo >A
Print (""sum of the value you entered in, som)
00.000
.1
noitosil
noitgo Inemoanu
LFT",154,"def main():
    num = input(""Enter the number you want to add: "")
    Sum = 0
    for i in str(num):
        Sum = Sum + int(i)
    print(""Sum of the values you entered is"", Sum)


main()
",18,"def main():
    num = input(""enter the number you want to add "")
    Sum = 0
    for i in str(num):
        Sum = Sum + int(i)
    print(""sum of the values you entered is "", Sum)
",7,"def main():
    num = input(""Enter the number you want to add: "")
    Sum = 0

    for i in str(num):
        Sum = Sum + int(i)

    print(""Sum of the values you entered is: "", Sum)


main()
",22,"def main () :
num = Imput (""enter the number youcust to add"")
\[
\text { sum }=0
\]
for i in Mtr(num):
\[
\text { sum }=\operatorname{sum}+\operatorname{int}(i)
\]
Print (""sum or the valee yor entered is"", sum)",79,"def main():
    num = input(""enter the number you want to add"")
    sum = 0
    for i in str(num):
        sum = sum + int(i)
    print(""Sum of the values you entered is"", sum)
",2,"def main():
    num = input(""enter the number you want to add"")
    sum = 0
    for i in str(num):
        sum = sum + int(i)
    print(""sum of the value you entered is"", sum)
",0,"def main():
    num = input(""enter the number you want to add"")
    sum = 0
    for i in str(num):
        sum += int(i)
    print(""sum of the value you entered is"", sum)
",7
"user_input = input(""Write your string here: "")
upper = user_input.upper()
print(upper)
",1,"input = imput ( ""write your string
user_ input. upper (1
user_
upper = user_ input
print (upper)
here: "")",50,"input_ = input(""write your string here: "")
user_upper = input_.upper()
print(user_upper)
",23,"user_input = input(""write your string: "")
user_input = user_input.upper()
print(user_input)
",22,"""
user_input = input(""write your string here: "")
user_upper = user_input.upper()
print(user_upper)
",13,"user_input = input(""write your string here:
1)
upper = user_input. upper(1
print (upper)",7,"user_input = input(""write your string here: "")
upper = user_input.upper()
print(upper)
",1,"user_input = input(""write your string here: "")
upper = user_input.upper()
print(upper)
",1,"user_input = input(""write your string here: "")
upper = user_input.upper()
print(upper)
",1,"user-input = input(""write your string here:
11
Upper = user_input. upper()
print (upper)",9,"user_input = input(""write your string here: "")
upper = user_input.upper()
print(upper)
",1,":
user_input = input(""Write your string here: "")
upper = user_input.upper()
print(upper)
",2,"user_input = input(""write your string here: "")
upper = user_input.upper()
print(upper)
",1,"user-input = imput (""write your string here: "") upper \( = \) user input upper ( ) print (upper)",18,"user_input = input(""write your string here: "")
upper = user_input.upper()
print(upper)
",1,"user_input = input(""write your string here: "")
upper = user_input.upper()
print(upper)
",1,"user_input = input(""write your string here: "")
upper = user_input.upper()
print(upper)
",1
"from karel.stanfordkarel import *

""""""
Karel should fill the whole world with beepers.
""""""


def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",1,"*
from Karel, starfordkarel import
han
kanel should fill the world with beepers.
1100
def main ():
#decomposition using a
function
#each associated
while left_ is_clear():
fill_one_row()
return_to_row_start()
activity
паме
for
move_up()
#rewrite code after white loop to overcome
# fencepost bug
one-how ()
fill_",121,"from karel.stanfordkarel import *

# Karel should fill the world with beepers.


def main():
    # decomposition using a function
    # each associated
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome fencepost bug
    fill_one_row()


def fill_one_row():
    pass


def return_to_row_start():
    pass


def move_up():
    pass
",133,".python
from karel.stanfordkarel import *

# Karel should fill the world with beepers.
def main():
    # Decomposition using a function
    # Each associated
    while left_is_clear():
        fill_one_row()
        return_to_row_start()

    # Activity name
    for move_up():
        # Rewrite code after while loop to overcome
        # Fencepost bug
        one_row()
        fill_one_row()
",98,"
from karel.stanfordkarel import *

def main():
    # decomposition using a function
    # each associated
    while front_is_clear():
        fill_one_row()
        return_to_row_start()

    move_up()
    # rewrite code after while loop to overcome fencepost bug
    fill_one_row()

def fill_one_row():
    # your function implementation

def return_to_row_start():
    # your function implementation

def move_up():
    # your function implementation

if __name__ == ""__main__"":
    main()
",297,"from karel. stanfordkarel import
will
karel should fill the world with beepers.
1110
def main() :
# decomposition using a function name for
# each associated activity
while left_is-clean
retur_to_row- start()
fill_one-row()
move_up()
# rewrite code after while loop to overcome
# fencepost bug
fill - one - -row()",105,"from karel.stanfordkarel import *

# karel should fill the world with beepers.
def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear:
        return_to_row_start()
        fill_one_row()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",49,"from karel.stanfordkarel import *

# karel should fill the world with beepers.


def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        return_to_row_start()
        fill_one_row()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",45,"from karel.stanfordkarel import *

# Karel should fill the world with beepers.
def main():
    # decomposition using a function name for each associated activity
    while left_is_clear():
        return_to_row_start()
        fill_one_row()
        move_up()
    # rewrite code after while loop to overcome fencepost bug
    fill_one_row()
",58,"from Karel. stanfordkarel import *
hun
Karel should fill the world with keepers.
1100
def main () :
# decomposition using a function name for
# each associated activity
while left-is-clear ():
fill_one-row()
return_to_row-start ()
Nove-up()
# rewrite code after while loop to overcome
# fencepost bug
fill-one-row()",79,"from karel.stanfordkarel import *

# Karel should fill the world with beepers.


def main():
    # Decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # Rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",16,"from karel.stanfordkarel import *

# Karel should fill the world with beepers.
def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",16,"from karel.stanfordkarel import *

# Karel should fill the world with beepers.


def main():
    # decomposition using a function name for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",14,"from karel.stayfordkarel inport
IIII""
karel should fill the world with beepers.
""u u
\( \operatorname{def} \operatorname{main}() \) :
\# decomposition using a function rave for \# each associated activity while left-is_clear ():
fill-ore-row()
retur _to _ row_start \( ( \) )
nove_up ()
\# rewirite code after white loop to overcone \# fencepost bug
fill_one-row()",118,"from karel.stanfordkarel import *

""""""
karel should fill the world with beepers.
""""""


def main():
    # decomposition using a function rave for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after while loop to overcome
    # fencepost bug
    fill_one_row()
",9,"from karel.stanfordkarel import *

""""""
karel should fill the world with beepers.
""""""


def main():
    # decomposition using a function wave for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite code after white loop to overcome
    # fencepost bug
    fill_one_row()
",10,"from karel.stanfordkarel import *

""""""
Karel should fill the world with beepers.
""""""


def main():
    # decomposing using a function for
    # each associated activity
    while left_is_clear():
        fill_one_row()
        return_to_row_start()
        move_up()
    # rewrite the code after while loop to overcome
    # fencepost bug
    fill_one_row()
",19
"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",1,"if
from karel.stanfordkarel import*
def main ()
move()
move()
turn_right()
move()
turn_left()
move()
-
pick-beeper()
return-home()
def return home()
turn-around()
move()
turn_right()
move ()
turn_left()
movel)
move()
turn_around ()
def turn_right()
for i in range (3):
turn-left()
def turn around ()
for i in range (2):
turn_left()
name.
main()
^_main_",144,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",11,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stamfordkaral import
def main()
move()
move()
turn-right(
move()
turn-left()
move()
pick. beeper()
return-home()
def return_home()
t#urn_around()
move()
turn_right(?
move ()
turn- left()
movel)
move()
turn_around()
def turn-right()
for i in range (3):
turn- left()
def turn. around ()
for i in range (2):
turn-left()
if name - main' :
mainl",146,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stamfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",1,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel. stanfordkarel import*
det main ()
move()
move()
turn-right ()
move()
turn-left()
move()
pick-beeper()
return-home()
def return_home()
turn-around()
move()
turn-right ()
move ()
turn-left ()
move()
move()
turn-around()
det turn-right()
for i in range (3):
turn-left ()
def turn- around()
for i in range (2):
turn-left ()
if
name
== '_main ' :
main()",144,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel. stanfordkarel import *
def main ()
move ()
move()
turn-right ()
move ()
turn-leff()
move ()
pick-beeper ()
return-home()
def return_home()
trurn_around()
move ()
turn_right()
move ()
turn_left ()
movel)
move ()
turn_around ()
def turn-right ()
for \( i \) in range (3):
turn-left ()
def turn around()
for \( i \) in range (2):
turn-left \( ( \) )
if \( \operatorname{mame}_{-\operatorname{main}()}== \) __main', :",193,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    move()
    move()
    turn_right()
    move()
    turn_left()
    move()
    pick_beeper()
    return_home()


def return_home():
    turn_around()
    move()
    turn_right()
    move()
    turn_left()
    move()
    move()
    turn_around()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    for i in range(2):
        turn_left()


if __name__ == ""__main__"":
    main()
",0
"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]

    input_string = input(""Enter the string: "")
    input_string = input_string.lower()

    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1

    print(vowel_count)


if __name__ == ""__main__"":
    main()
",1,"def main ():
rauel caunl=0
vawels = ['a', 'e', 'i', '0', 'u']
""input-string = ""input (""Enter the string:"")
impret string = ""impret_string= lawer ()
for chaor in `imput string:
for vauvel in vamels:
if char = = vowel:
vauvel_cament + = 1
point (vowel count)
`__main_
y__name__ =
main ()
INN
':",148,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",4,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",4,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",4,"dy main ():
vawel_count==0
vawels ['a' 'e' ii, 'o', 'u' ]
input- string= input (""Enter the striegn""."")
input string. lower()
for char in input string:
for vawel 'en vawels:
if char== vowel:
valuel-calest += 1
point (newel count)
if name main__':
main()",146,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string:"")
    input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",19,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string: "")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",3,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string: "")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",3,"de main () :
vowel-count=0
vowels= ['à','e', 'i', 'o','u']
input_string = input (""Enter the string:"")
input string = input_string . lower ()
for char in input string:
for vowel in vowels :
if char == vawel:
vowel-count +=1
print (nouvel count)
if _name_ = = '_main _- ':
main ()",115,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",4,":
def main():
    vowel_count = 0
    vowels = ['a', 'e', 'i', 'o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)

if __name__ == '__main__':
    main()
",19,"def main():
    vowel_count = 0
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",4,"de main ():
vouel caunt \( =0 \)
input_string = input (""Enter the string:"")
input_string = inpet_string. lawer()
for choor in input string:
for vauel 'en vauch:
if char = = vouel:
valuel-caunt \( +=1 \)
print (veuel caunt)
\[
\begin{array}{l}
\text { if _-name__ }==\text { '_ main_- } \\
\operatorname{main}() \\
\end{array}
\]",210,"
def main():
	vowel_count = 0
	input_string = input(""Enter the string:"")
	input_string = input_string.lower():
		for char in input_string:
			for vowel in vowel:
				if char == vowel:
					vowel_count += 1
		print(vowel_count)
if __name__ == '__main__': 
	main()
",109,"def main():
    vowel_count = 0
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in ""aeiou"":
            if char == vowel:
                vowel_count += 1
    print(vowel_count)


if __name__ == ""__main__"":
    main()
",50,":
def main():
    vowel_count = 0
    vowels = ['a', 'e', 'i', 'o', 'u']
    input_string = input(""Enter the string:"")
    input_string = input_string.lower()
    for char in input_string:
        for vowel in vowels:
            if char == vowel:
                vowel_count +=1
    print(vowel_count)

if __name__==""__main__"":
    main()
",20
"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])
",1,"def main ():
string = str (input ('Enter string: '))
for i in range
print (string[i])
((len(string)-1),-1,-1):
لك
TO
AYS",60,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
    return
",13,"our
priud
- "") abuse u! ! way
(5, : bureys capul, ) produc) eys = burays
:
()unow top",104,"
our
print
- "") about u! ! way
(5, : bureys camel, ) produce) eys = bureys
:
()now top

return code
",102,"def our_prod(*args: ""values tuple"") -> ""product of the values"":
    product = 1
    for arg in args:
        product *= arg
    return product
",112,"def product(keys, values):
    return {key: value for key, value in zip(keys, values)}


keys = [""A"", ""B"", ""C""]
values = [1, 2, 3]

print(""Our proud product:"", product(keys, values))
",144,"det
main ():
string = str (input ('Enter string: '))
for i in range ((len (string)-1), - 1 ,- 1).
print (string [i])",34,"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])
",0,"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


main()
",9,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])


main()
",11,"def \( \operatorname{main}( \) ):
\[
\text { string }=\operatorname{str}(\text { input ('Enter string: IJ) }
\]
for \( i \) in range \( (( \) len(string \( )-1),-1,-1) \) : print (string \( [i] \) )",102,",exportsentry.AI->
def main():
    string = str(input('Enter string: '))
    for i in range(len(string)-1, -1, -1):
        print(string[i])
",25,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])
",2
"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []


# It check every element in list(sequence) --
for i in seq:
    # It decides whether an element from sequence is even ---
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list(seq_even)

print(seq_even)
",1,"seq - [1, 2, 3, 4, 5, 6, 7, 8, 9]
seg - even = []
#It checks every element in dist (sequence)--
for i in seq:
#it decides whether an element from sequence is even ---
if i % 2 == 0:
seq-even. append(i) #appends even i in empty list (seq-even)
print (seq-even)",40,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in seq (sequence)--
for i in seq:
    # it decides whether an element from sequence is even ---
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list (seq_even)
print(seq_even)
",11,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in seq (sequence)--
for i in seq:
    # it decides whether an element from sequence is even ---
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list (seq_even)
print(seq_even)
",11,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# it checks every element in seq (sequence)
for i in seq:
    # it decides whether an element from sequence is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list (seq_even)
print(seq_even)
",18,"seq = [1, 2, 3, 4, 5 , 6, 7, 8, ]
seg even = [ ]
# It checks every element in list (sequence)
for i in seq:
# it decides whether an element from sequence is even
if i % 2 == O:
seq-even. append (i) # appends even i in empty list (seq-even)
print (seq-even)",44,"seq = [
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
]
seq_even = []

for i in seq:
    if i % 2 == 0:
        seq_even.append(i)

print(seq_even)
",166,"seq = [
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
]
seq_even = []
# It checks every element in list (sequence)
for i in seq:
    # it decides whether an element from sequence is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list (seq_even)
print(seq_even)
",49,"seq = [1, 2, 3, 4, 5, 6, 7, 8]
seq_even = []
# It checks every element in list (sequence)
for i in seq:
    # it decides whether an element from sequence is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list (seq_even)
print(seq_even)
",17,"seq = [ 1, 2, 3, 4, 5, 6, 7, 8,9]
Seg-even=[]
# It checks every element in list (sequence) - --
for i in seg:
# it decides whether an element from sequence is even --.
if i % 2 = = 0:
seg-even. append (i) # appends even ; in empty list (seq-even)
print (seg-even)",46,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []

# It checks every element in list (sequence)
for i in seq:
    # it decides whether an element from sequence is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even numbers in empty list (seq_even)
print(seq_even)
",20,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in list (sequence).
for i in seq:
    # It decides whether an element from sequence is even.
    if i % 2 == 0:
        seq_even.append(i)  # appends even in empty list (seq-even)
print(seq_even)
",16,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
# It checks every element in the list (seq)
for i in seq:
    # it decides whether an element from seq is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even elements to the list (seq_even)
print(seq_even)
",40,"\[
\begin{array}{l}
\text { seq }=[1,2,3,4,5,6,7,8,9] \\
\text { seq-even }=[]
\end{array}
\]
\# It checks every element in dist(sequence.).for \( i \) in seq:
\# it decides whether an clement from sequence is even -.. if \( i \% 2==0 \) :
seq-even. append ( \( i \) ) \# appends even \( i \) in empty list (seq-even) print (seq-even)",127,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []
for i in seq:
    if i % 2 == 0:
        seq_even.append(i)
print(seq_even)
",153,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []

# It checks every element in seq.
for i in seq:
    # it decides whether an element from seq is even.
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list (seq_even)
print(seq_even)
",28,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]
seq_even = []

# It checks every element in seq
for i in seq:
    # it decides whether an element from seq is even
    if i % 2 == 0:
        seq_even.append(i)  # appends even i in empty list (seq_even)
print(seq_even)
",28
"from graphics import Canvas

CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01

def main:
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    

    while TRUE

        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        
        if mouse_x >= 0 and mouse_x <= CANVAS_WIDTH and mouse_y >=0 and mouse_y <= CANVAS_HEIGHT",1,"from
FROM GRAPHICS IMPORT CANVAS
CANVAS_WIDTH = 300
CANVAS-HEIGHT = 300
CIRCLE_SIZE =
DELAY = 0,01
= 20
DEF MAIN:
CANVAS = CANVAS ( CANVAS WIDTH, CANVAS HEIGHT
WHILE TRUE
MOVSE_X = CANVAS. GET_MOUSE_x()
MOUSE-Y = CANVAS. GET MOUSE_Y()
TE
1
IF MOUSE X >= 0 AND MOUSE X E CANVAS_WIDTH
AND MOUSELY TO AND MOUSE_YE CANVAS. HEIGH",203,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()

        if (
            mouse_x >= 0
            and mouse_x <= canvas_width
            and mouse_y >= 0
            and mouse_y <= canvas_height
        ):
            continue
",175,"from graphics import Canvas

CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01


def main():
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x <= CANVAS_WIDTH
            and mouse_y >= 0
            and mouse_y <= CANVAS_HEIGHT
        ):
            continue
",90,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x <= canvas_width
            and mouse_y >= 0
            and mouse_y <= canvas_height
        ):
            pass
",170,"FROM GRAPHICS IMPORT CANVAS
CANVAS_WIDTH 11 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0,01
DEF MAIN :
CANVAS = CANVAS(CANVAS WIDTH, CANVAS HEC 641)
WHILE TRUE
MOVSE -X = CANVAS. 6ET MOUSE x()
MOV. SE- - Y = CANVAS. GET MOUSE ( ) )
If MOUSE_ x > = U AND MOUSE x t CANUAS_WIDTH
AND NOUSE. -Y >=0 AND MOUSE_YE CANUVAS.HEIGH",199,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x < canvas_width
            and mouse_y >= 0
            and mouse_y < canvas_height
        ):
            pass
",172,"from graphics import Canvas

CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01


def main():
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    while True:
        MOUSE_X = canvas.getMouseX()
        MOUSE_Y = canvas.getMouseY()
        if (
            MOUSE_X >= 0
            and MOUSE_X <= CANVAS_WIDTH
            and MOUSE_Y >= 0
            and MOUSE_Y <= CANVAS_HEIGHT
        ):
            pass
",130,"from graphics import Canvas

CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01


def main():
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    while True:
        MOUSE_X = canvas.get_mouse_x()
        MOUSE_Y = canvas.get_mouse_y()
        if (
            MOUSE_X >= 0
            and MOUSE_X <= CANVAS_WIDTH
            and MOUSE_Y >= 0
            and MOUSE_Y <= CANVAS_HEIGHT
        ):
            pass  # Please replace this line with an appropriate code


main()
",184,"FROM GRAPHICS IMPORT CANVAS
CANVAS_WIDTH = 300
CANVAS_ HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0,01
DEF MAIN :
CANVAS = CANVAS ( CANVAS_ WIDTH, CANVAS HEL GH)
WHILE TRUE
MOUSE_ X = CANVAS . GET_MOUSE _ X ()
MOUSE- Y = CANVAS . GET MOUSE_ Y ( )
IF MOUSE XT =U AND MOUSE X E CANVAS_WIDTH
AND MOUSELY SEO AND MOUSE-TE CANVAS HEIGH",205,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x <= canvas_width
            and mouse_y >= 0
            and mouse_y <= canvas_height
        ):
            continue
",174,"from graphics import Canvas

canvas_width = 300
canvas_height = 300
circle_size = 20
delay = 0.01


def main():
    canvas = Canvas(canvas_width, canvas_height)
    while True:
        mouse_x = canvas.get_mouse_x()
        mouse_y = canvas.get_mouse_y()
        if (
            mouse_x >= 0
            and mouse_x <= canvas_width
            and mouse_y >= 0
            and mouse_y <= canvas_height
        ):
            pass
",170,"from graphics import Canvas

CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01


def main():
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    while True:
        MOUSE_X = canvas.get_mouse_x()
        MOUSE_Y = canvas.get_mouse_y()
        if (
            MOUSE_X >= 0
            and MOUSE_X <= CANVAS_WIDTH
            and MOUSE_Y >= 0
            and MOUSE_Y <= CANVAS_HEIGHT
        ):
            continue
",126,"FRIM GRAPHICS I MPORT CANVAS
\[
\begin{array}{l}
\text { CANVAS_WIDTH }=300 \\
\text { CANVAS_HEl6HT }=300 \\
\text { CIRCLE_SIZE }=20 \\
\text { DELAY = } 0,01
\end{array}
\]
DEF MAIN :
canvas = Canvas ( canvar_ wi DFH, canvas Hec b HT)
WHILE TRUE
\[
\begin{array}{l}
\text { MOVSE-X = CONVAS. GET_MOUSE_X() } \\
\text { MOVSE-Y = CANVAS. GET MOUSE_Y () }
\end{array}
\]
If MOUSE_X \( X=0 \) AND MOUSE_X \( E \) CANUNS_WIOT4 AND NOUSE_Y \( T=0 \) AND MOUSE_YE CH, USS. HEIG",321,"
FROM GRAPHICS IMPORT CANVAS
CANVAS_WIDTH = 300 
CANVAS_HEIGHT = 300 
CIRCLE_SIZE = 20 
DELAY = 0.01

def MAIN():
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    WHILE TRUE:
        MOUSE_X = CANVAS.GET_MOUSE_X()
        MOUSE_Y = CANVAS.GET_MOUSE_Y()
        if MOUSE_X >= 0 and MOUSE_X <= CANVAS_WIDTH and MOUSE_Y >= 0 and MOUSE_Y <= CANVAS_HEIGHT:
",124,"from graphics import Canvas

CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01


def main():
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    while True:
        MOUSE_X = canvas.GET_MOUSE_X()
        MOUSE_Y = canvas.GET_MOUSE_Y()
        if (
            MOUSE_X <= 0
            and MOUSE_X >= CANVAS_WIDTH
            and MOUSE_Y <= 0
            and MOUSE_Y >= CANVAS_HEIGHT
        ):
            continue
",148,"from graphics import Canvas

CANVAS_WIDTH = 300
CANVAS_HEIGHT = 300
CIRCLE_SIZE = 20
DELAY = 0.01


def main():
    canvas = Canvas(CANVAS_WIDTH, CANVAS_HEIGHT)
    while True:
        MOUSE_X = canvas.get_mouse_x()
        MOUSE_Y = canvas.get_mouse_y()
        if 0 <= MOUSE_X <= CANVAS_WIDTH and 0 <= MOUSE_Y <= CANVAS_HEIGHT:
            pass  # Continue your code here
",108
"# 1 karel Problem - karel Home

from karel.stanfordkarel import *

# This program defines a main function which should make Karel
# move to the beeper, pick it up and return home.
def main():
    get_out()
    pick_food()
    get_back_home()


# pre : karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",1,"#1 Karel Problem - Karel home
from Kard Stanfordkarel import *
# This program defines a main function which should make karel
# move to the beeper, pick it and return home.
up
def main ():
GRE_ONE ()
pick-food ()
get back home u
#pre: Karel facing eask, at the corner of starting position.
# posk: Karel facing east, outside the home, at the position of beeper
def get out ():
turn_right()
Move (
turn_left()
Move ()
Move ()
move()
# post
· Karel facing west, at
def pick-food ():
pick beeper ()
turn around ()
#post: Karel facing east, at the corner of starting position
def get back home ():
move ()
Move ()
move()
turn_right()
move ()
turn right (1
def turn right ():
for i in range (3)
turn_left()
def turn around ():
turn_left()
zurn_left()
the position of beeper
if_name__ == '__main_ ' :
main ()",229,"# 1 Karel Problem - Karel home
from StanfordKarel import *

# This program defines a main function which should make Karel
# move to the beeper, pick it and return home.


def main():
    GET_ONE()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position.
# post: Karel facing east, outside the home, at the position of beeper.
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west, at
def pick_food():
    pick_beeper()
    turn_around()
    # post: Karel facing east, at the corner of starting position.


def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()
    # the position of beeper


if __name__ == ""__main__"":
    main()
",89,"# 1 Karel Problem - Karel home
from Stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it and return home.


def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position.
# post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west, at


def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position


def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


# the position of beeper

if __name__ == ""__main__"":
    main()
",74,"# Karel Problem - Karel home
from stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home.


def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of the starting position.
# post: Karel facing west, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


# Karel is at the position of beeper
if __name__ == ""__main__"":
    main()
",87,"# 1 karel Problem - Karel home
from Karel stanfordkarel import
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main ():
get-one(?
pick_food ()
get_back home ()
# pre : Karel facing east, at Line corner of starting position
# post ! karel facing east, outside the home, at the position of beeper
def get out ()
turn_ right
move ()
turn left ()
move ()
move
move
# post Karel facing west at the position of beeper
10°M
def pick-food () :
beeper ()
turn_ around()
# post: Karel facing east, at the corner of starting position
def get- back home () :
move ()
move
move ()
turn_right ( )
move ()
turn
right ()
def turn right ( )
for i in range (3) :
turn_left
def turn_ around () :
turn_ left ()
turn_ left ()
if name- == '-main-':
main ()",202,"# 1 karel Problem - Karel home
from stanfordkarel import Karel

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre : Karel facing east, at Line corner of starting position
# post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west at the position of beeper


def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position


def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",28,"# 1 karel Problem - Karel home
from stanfordkarel import Karel

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre : Karel facing east, at Line corner of starting position
# post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post Karel facing west at the position of beeper


def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",27,"# 1 karel Problem - Karel home
from stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre : Karel facing east, at Line corner of starting position
# post : Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",20,"# 1 karel Problem - Karel home
from Karel. Stanfordkarel import*
# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main () :
get_Out ()
pick_food ()
get back_ home ()
# pre: Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out () :
turn_right ()
move ()
turn_ left ()
move ()
move ()
move ()
# post: Karel facing west, at the position of beeper
def pick-food ():
pick_beeper ()
turn-around ( )
# post: Karel facing east, at the corner of starting position
def get_back_home () :
move ()
Move ()
move ()
turn right ()
move ( )
turn right ()
def turn right () ;
for i in range (3) :
turn-left ()
def
turn-around () :
turn_left ()
turn_kft ()
if_ name_ == - main -:
main ()",179,"# 1 karel Problem - Karel home
from Karel.Stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",11,"# 1 Karel Problem - Karel home
from karel.stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",10,"# 1 karel Problem - Karel home
from karel.stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home


def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position
# post: karel facing east, outside the home, at the position of beeper


def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post: Karel facing west, at the position of beeper


def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position


def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",16,"\#1 karel Problem-karel home from karel. Stanfordkarel impork *
\# This program defines a main function which should make karel \# move to the beeper, pick it up and return home
def \( \operatorname{main}() \) :
get_oute \( ( \) )
pick-food ()
get_back_home \( U \)
\# pre: Karel facing eask, at the corner of stomeng position
\# posk: Karel facing east, oukside the home, at the position of beeper
def get_out () :
turn_right ()
move?
turn_left ()
move ()
move ()
move ()
\# post : Karel facing west, at the position of beeper
def pick-food () :
pick_beeper ()
turn_around ()
\# post: karel fring east, at the corner of stonting position def get_back_home ():
move ()
move ()
move ()
turn_right ()
move ()
turn right ( )
def turn right () :
for \( i \) in range (3) :
turn_left ()
def turn around ():
turn_left ()
turn_kft()
if _ name_ \( == \) - main - '
main ()",223,"# 1 karel Problem-karel home
from karel.stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position
# post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post : Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",12,"# karel Problem-karel home
from karel.stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# pre: Karel facing east, at the corner of starting position
# post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# post : Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# post: karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",13,"# Karel Problem - Karel home
from karel.stanfordkarel import *

# This program defines a main function which should make karel
# move to the beeper, pick it up and return home
def main():
    get_out()
    pick_food()
    get_back_home()


# Pre: Karel facing east, at the corner of starting position
# Post: Karel facing east, outside the home, at the position of beeper
def get_out():
    turn_right()
    move()
    turn_left()
    move()
    move()
    move()


# Post: Karel facing west, at the position of beeper
def pick_food():
    pick_beeper()
    turn_around()


# Post: Karel facing east, at the corner of starting position
def get_back_home():
    move()
    move()
    move()
    turn_right()
    move()
    turn_right()


def turn_right():
    for i in range(3):
        turn_left()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",17
"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",1,"def factorial (n):
if n == 0:
return 1
else:
return n* factorial (n-1)
print (factorial (5))",34,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n)
if n==
O:
return 1
else :
return n
factorial (n-1) -
print (factorial(5))",39,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial (n) :
if n=0 :
return 1
else:
return 1 * factorial (n-1)
print (factorial (5)",39,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial \( (n) \) :
if \( n==0 \) :
return 1
else:
return \( n \) * factorial \( (n-1) \)
print (factorial \( (5)) \)",56,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))
",0
"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    list = []

    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                list.append(elem)
    print(list)
",1,"det main 1:
List 1 2 (1,2,3,4]
List 2 = (3,4,5,67
List = []
for elem 1 in list 1 1
for elem2 în list 2:
it olem2 = = elem 2:
elem = elem 2
(N46)
print (list)
list-append (etem)
Livor",118,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 67]
    list3 = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                list3.append(elem1)
    print(list3)


main()
",44,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6, 7]
    list_ = []
    for elem1 in list1:
        for elem2 in list2:
            if elem2 == elem1:
                elem = elem2
                print(list_)
                list_.append(elem)
    return list_
",46,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6, 7]
    newList = []
    for elem1 in list1:
        for elem2 in list2:
            if elem2 == elem1:
                newList.append(elem2)
    print(newList)
    return newList
",57,"det main O
list 1 2 (1,2,3,4)
list 2 2 (3,4,5,67
List = 17
for elem1 in list 1 :
for elem2 in list2:
it elem1 == elem2:
elem = elem7
list-append (eum)
print (list)",103,":
def main():
    list_1 = (1,2,3,4)
    list_2 = (3,4,5,67)
    List = []
    for elem1 in list_1:
        for elem2 in list_2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)

",22,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 67]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)


main()
",14,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 67]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem1
                List.append(elem)
    print(List)


main()
",14,"det main () :
list 1 2 [1, 2,3,4]
list 2 =
(3,4,5,6)
List = []
for elem1 in list 1?
for eleme in list2:
it elem1 = = elem2?
elem = elem 2
list- append (elem)
print (ist)",101,"_plus


def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                List.append(elem2)
    print(List)

    return
",54,":
def main():
    list1 = [1, 2,3,4]
    list2 = [3,4,5,6]
    List = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem2
                List.append (elem)
    print (List)

    return
",26,"def main():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    lst = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                lst.append(elem2)
    print(lst)
    return None
",48,"det \( \operatorname{man}(1) \) :
\[
\begin{array}{l}
\text { list } 1=[1,2,3,4] \\
\text { list } 2=[3,4,5,6] \\
\text { List }=[7] \text { in list } 11 \\
\text { for elem } 1
\end{array}
\]
for elem2 in list2:
it \( \operatorname{elem} 2= \) elem2:
elem = elem 2
list-append (eum)
print (ist)",192,"def man():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = [7]
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem2
                List.append(elem)
    print(List)
",7,"def man(num):
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = [7]
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                elem = elem2
                List.append(elem)
    print(List)
",10,"def func():
    list1 = [1, 2, 3, 4]
    list2 = [3, 4, 5, 6]
    List = []

    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                List.append(elem2)
    print(List)


func()
",46
"String = input()
print(String[::-1])
",1,"String = input ()
print (String[::-1])",3,"String = input()
print(String[::-1])
",0,"String = input()
print(String[::-1])
",0,"string = input()
print(string[::-1])
",2,"String = input c)
print (String [:
-
-1])",8,"String = input()
print(String[:-1])
",1,"String = input()
print(String[:-1])
",1,"String = input()
print(String[:-1])
",1,"String = input c)
print (String [ ::- 1])",7,"String = input()
print(String[::-1])
",0,"String = input()
print(String[::-1])
",0,"String = input()
print(String[::-1])
",0,\( \begin{array}{l}\text { String }=\text { input } C) \\ \text { print }(\text { String }[::-1])\end{array} \),77,"string = input()
print(string[::-1])
",2,"String = input()
print(String[::-1])
",0,"String = input()
print(String[::-1])
",0
"from karel.stanfordkarel import *


def main():
    turn_left()
    tower_N()
    tower_S()
    move_4x()
    turn_left()
    tower_N()
    tower_S()


def tower_S():
    turn_3x()
    tower()
    turn_left()


def tower_N():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",1,"from Karel. Stanford Rund emport
def main ():
turn-
laft
Tower_N()
tower_S()
Move 4x()
Fern-
-left()
tower_N()
-S()
tower
del
de tower -S():
Furn-3x()
tower ()
turn_left()
del tower _N():
Town ()
turn _ 3x()
move 4x()
def tower (13
for i in
range
(5):
if front_is_clear():
Put-baper (1
movel)
else:
def. Jurn - 3×(1:
turn_left()
leftis
turn-
Turn_left()
()
pest-beeper ()
- Move_4x();
move()
move()
movell
move()
name --
__main__."":
main ()
K",267,"from karel.stanford import *


def main():
    turn_left()
    tower_N()
    tower_S()
    move_4x()
    turn_left()
    tower_N()
    tower_S()


def tower_S():
    turn_3x()
    tower()
    turn_left()


def tower_N():
    turn()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper(1)
            move()
        else:
            pass


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def put_beeper():
    move_4x()
    move()
    move()
    move()
    move()


if name == ""__main__"":
    main()

return
",52,"from karel.stanford import *


def main():
    turn_left()
    tower_N()
    tower_S()
    move_4x()
    turn_left()
    tower_N()
    tower_S()


def tower_S():
    turn_3x()
    tower()
    turn_left()


def tower_N():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            turn_3x()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def put_beeper():
    put_beeper()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",51,"from karel.stanford import *


def main():
    turn_left()
    tower_N()
    tower_S()
    move_4x()
    turn_left()
    tower_N()
    tower_S()


def tower_S():
    turn_3x()
    tower()
    turn_left()


def tower_N():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",44,"from Karel. Stanford Kand import
K
de/ main()
turn-left
tower-NC
tower- sc)
move-4x ( )
turn-lette
tower N()
tower - sc )
de/ tower - s():
turn - 3x()
tower ()
turn - lefter
def tower - NC):
town ()
turn. - 3x()
move 4r ()
def tower ():
for i in range (5) :
if front - clear():
Put-baper (
movel
else:
put. buper()
def turn- 3x(1:
turn- left(1
turn - left
Turn - left ()
del move _4x():
move!!
more!!
movel
move
=='--
if
name
main !)",285,"from Karel.StanfordKarel import K


def main():
    turn_left()
    tower_NC()
    tower_sc()
    move_4x()
    turn_left()
    tower_N()
    tower_sc()


def tower_sc():
    turn_3x()
    tower()
    turn_left()


def tower_NC():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_clear():
            put_beeper()
            move()
        else:
            put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",15,"from karel.stanford import Karel


def main():
    turn_left()
    tower_NC()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()


def tower_SC():
    turn_3x()
    tower()
    turn_left()


def tower_NC():
    tower()
    turn_3x()
    move_4r()


def tower():
    for i in range(5):
        if front_clear():
            put_beeper()
            move()
        else:
            put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",19,"from karel.stanfordkarel import *


def main():
    turn_left()
    tower_NC()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()


def tower_SC():
    turn_3x()
    tower()
    turn_left()


def tower_NC():
    tower()
    turn_3x()
    move_4x()


def tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",5,"from Karel. Stanford Kad import ""
def main () :
turn - left 11
tower_N()
tower- SC)
move- 4x ( )
turn-left ( )
tower- N()
tower - SC )
del tower - s():
turn - 3x ()
Tower ()
Turn- left ( )
del tower- NC) .
Tower ()
turn- 3x()
move- 4x ()
del tower ():
for i in range (5) :
il front-is- clear ( ):
Put-boper ()
move ()
else:
Put- beeper ()
def.turn- 3x (1:
Turn- left ()
turn - left ()
burn- left ()
def . mere_ 4x();
move ()
move ()
morell
move ()
if -- name __ = = -- main __
main ()",277,"from karel.stanfordkarel import *


def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()
    del tower_s()
    turn_3x()
    Tower()
    turn_left()
    del tower_NC()
    Tower()
    turn_3x()
    move_4x()
    del tower()


for i in range(5):
    if front_is_clear():
        put_beeper()
        move()
    else:
        put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",48,"
from Karel.StanfordKarel import *

def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()
    del tower_s()
    turn_3x()
    Tower()
    turn_left()
    del tower_NC()
    Tower()
    turn_3x()
    move_4x()
    del tower():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()

def turn_3x():
    turn_left()
    turn_left()
    turn_left()

def move_4x():
    move()
    move()
    move()
    move()

if __name__ == ""__main__"":
    main()
",31,"from karel.stanfordkarel import *


def main():
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    turn_left()
    tower_N()
    tower_SC()
    move_4x()
    tower_NC()
    turn_left()
    tower_NC()
    move_4x()


def tower_N():
    for i in range(5):
        if front_is_clear():
            put_beeper()
            move()
        else:
            put_beeper()


def turn_3x():
    turn_left()
    turn_left()
    turn_left()


def move_4x():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",58,"from Karel. Stanfordkad import *
def max \( (1): \)
\[
\begin{array}{l}
\text { furn - let (1) } \\
\text { fown-N() } \\
\text { tower-S() } \\
\text { move-4x () } \\
\text { furm-lyt ( ) } \\
\text { tower-N( ) } \\
\text { tower-S() } \\
\end{array}
\]
def tower-s() :
\[
\begin{array}{l}
\text { furn - } 3 \times() \\
\text { Tower (1) } \\
\text { turn - laff() }
\end{array}
\]
def tower - N ( ):
town ()
\( \operatorname{tin} \) - \( 3 \times() \)
move_ \( 4 \times() \)
def tower (1):
for \( i \) in rang \( (5) \) :
if front-is-clear () :
move ()
else:
put_buper ()
def. fum \( -3 \times(1) \) :
\[
\begin{array}{l}
\text { turn - blff (1) } \\
\text { turn - bff (1) } \\
\text { turn - beft (1) }
\end{array}
\]
def mere_4r(1):
morel)
\[
\begin{array}{c}
\text { if name - }==^{\prime} \text {. main ... } \\
\text { main () }
\end{array}
\]
main 1)",556,"
from Karel.Stanfordkarel import *

def max (1):
    turn_left(1)
    turn_down()
    turn_up()
    move_4x() 
    turn_right()
    turn_up()
    turn_down()

def tower_s():
    for i in range(3):
        tower(1)
        turn_left()

def tower_N ():
    town()
    turn_down (3 times ())
    move_4_times()

def tower (1):
    for i in range(5):
        if front_is_clear():
            move()
        else:
            put_beeper()

def turn_left (3 times (1)):
    turn_left(1) 
    turn_right(1)
    turn_left(1)

def move_4x(1):
    move(1)

if __name__ == ""__main__"":
    main(1)
",179,"from Karel.Stanfordkad import *


def max_1():
    turn_left()
    move_4x()
    turn_right()
    tower_N()
    tower_S()


def tower_S():
    turn_3_times()
    Tower_1()
    turn_left()


def tower_N():
    move()
    turn_3_times()
    move_4_times()


def Tower_1():
    for i in range(5):
        if front_is_clear():
            move()
        else:
            put_bumper()


def turn_3_times():
    turn_left()
    turn_right()
    turn_left()


def move_4x():
    move()


if __name__ == ""__main__"":
    main()
",137,"from karel.stanfordkarel import *


def max(i):
    turn_left(i)
    move_N()
    move_S()
    move_4x()
    turn_right()
    move_N()
    move_S()


def tower_S():
    for i in range(3):
        Tower(1)
    turn_left()


def tower_N():
    move()
    turn_4_times()
    move_4_times()


def tower(i):
    for i in range(5):
        if front_is_clear():
            move()
        else:
            put_beeper()


def turn_left(i):
    for j in range(i):  # assuming the -3 implies iterate 3 times
        turn_left()
        turn_left()
        turn_left()


def move_4x(i):
    for j in range(i):
        move()


if __name__ == ""__main__"":
    main()
",183
"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",1,"def main ():
string = str (input ( 'Enter string :'))
for i in range ((len (string)-1),-1,-1):
print (string[i])
if __name__ == '___main__':
main()",41,"def main():
    string = str(input(""Enter string :""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",2,"def main():
    string = str(input(""Enter string :""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",2,"def main ():
string = str (input( 'Enter string '))
for i in range ((len(string) - 1),-1,-1) :
print (string[i])
if -name '__main_':
main()",44,"def main():
    string = str(input(""Enter string ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",1,"def main():
    string = str(input(""Enter string ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",1,"def main():
    string = str(input(""Enter string ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",1,"det main ( ):
String = str (input (""Enter string: '))
for i in range ((len (string) -1) ,- 1 ,- 1):
print (string [i])
if __ name _== '_main-':
main ()",50,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",0,"def main():
    string = str(input(""Enter string: ""))
    for i in range((len(string) - 1), -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",0,"det main ():
string \( = \) str (input ( Enter string: '))
for \( i \) in range ((len (string) -1\( ),-1,-1) \) : print (string \( [i] \) )
if name_ \( == \) '_-_main_-1:
\( \operatorname{main}() \)",81,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",2,"def main():
    string = str(input(""Enter string: ""))
    for i in range(len(string) - 1, -1, -1):
        print(string[i])


if __name__ == ""__main__"":
    main()
",2
"def main():

    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",1,"if
def main():
nur - int (input (""Enter a umby: ""))
print (f"" { num } is { ""prime if is_preme (nom)
else 'not prime' 3"")
Lef is__ pame(n):
<=
return false
elif n <= 3.
Feton True
elf 0 ² 2 = = 6
0² / 3 = = 0;
retow False
for i iN, Range (5, int(n"" 0.5) +1,6)
if 1% 1 = = 0¹ 0² 0% (i + 2) = = 6:
retor False
netum Thve
пале
maiN ()
--
main",190,"def main():
    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",1,"def main():
    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True


main()
",68,"def main():
    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True


if __name__ == ""__main__"":
    main()
",44,"def main():
num = a NMBU: ""))
is {'prime' if ip_proundnorm)
else'not prime'3"")
def is prone(s)
if n<=1
return False
olig n <=3:
retun True
effn82==0 OR n% 3==0:
retor False
for i iN Range (5, int(c (0.5)+1,6)
if n%i==0 OR n% (i+2) == 6
return False
refund True
if
nane
1' main Ir's
main ()",198,"def main():
    num = int(input(""Enter a number: ""))
    print(""prime"" if is_prime(num) else ""not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",17,"def main():
    num = int(input(""Enter a number: ""))
    print(""prime"" if is_prime(num) else ""not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",17,"def main():
    num = int(input(""Enter a number: ""))
    print(""prime"" if is_prime(num) else ""not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True


if __name__ == ""__main__"":
    main()
",60,"def main():
num = int (input( ""Enter a NM bu :
print (f""Enums is S'prime if is_ prime (nom)
else not primé 3"">
def is_ prime(1):
if n <= 12
return false
elif > <= 3:
Cetun True
elf n/ 2 = = x OR 1% 3=6 ;
return False
for i in Range (5, int(1 +0.5) + 1,6
if 1% i = = x or 1% (1+2) =0 :
return False
return True
if
= =
- - main
main ()",165,"def main():
    num = int(input(""Enter a num: ""))
    if is_prime(num):
        print(f""num is prime"")
    else:
        print(""num not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",61,"def main():
    num = int(input(""Enter a number: ""))
    if is_prime(num):
        print(f""Number is prime"")
    else:
        print(""Number is not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True


if __name__ == ""__main__"":
    main()
",108,"def main():
    num = int(input(""Enter a number: ""))
    if is_prime(num):
        print(f""{num} is prime"")
    else:
        print(f""{num} is not prime"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


if __name__ == ""__main__"":
    main()
",59,"\( \operatorname{deg} \operatorname{main}(): \)
num =int( (iuput(""Entu a NMkn: "")) prutt(f""\{num\} is \{'prime' if is prome(num) else not prime 3 "")
def is prme \( (n) \) :
if \( n<=1 \)
reture alse
\( \operatorname{elif} \cap<=3 \) :
seton True
elf \( n \% 2==\varnothing \) or \( \cap \% 3==\varnothing \) :
re tow Jalse
for i in Ravge \( \left(5\right. \) int \( \left.\left(n^{* *} 0,5\right)+1,6\right) \) if \( n \% i==\varnothing \) or \( n \%(i+2)==\varnothing \) : retur false
nefom thoe",318,"def main():
    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'} "")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True
",42,"def main():
    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'}"")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif (n % 2 == 0) or (n % 3 == 0):
        return False
    for i in range(5, int(n**0.5) + 1, 6):
        if (n % i == 0) or (n % (i + 2) == 0):
            return False
    return True
",49,"def main():
    num = int(input(""Enter a number: ""))
    print(f""{num} is {'prime' if is_prime(num) else 'not prime'} "")


def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True


main()
",69
"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",1,"from Karel. Stamfordkarel import
def main ():
turn-left():
while frent_is_ alpar (fi
tunn-right()
fill-row ()
return _to_home ll
Jump_row()
turn_right()
fill-row ()
vetwook to home ()
while frent-is. Elear();
meve (s
Sef fill_row();
while frent_is_ clearl]
put - beeper ()
move ()
put-beeper ()",149,"from Karel.Stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",14,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        move_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",16,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",12,"from Karel. stam fordmarel impert
def main():
turn-left():
while frent- is alpar():
turn-rights
fill-row()
return to home(s)
junprowl
turn-right
fillstow()
return te 3-home()
while front is. Elear(1:
meve()
def fill. rew() :
while front. is. clearl)
put - beeper()
move()
put-seeper()",150,":
from karel.stanfordkarel import *
def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()

def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",17,":
from Karel.stanfordkarel import *
def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()
def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",19,"from karel.stanford.karel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_to_next_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",21,"from karel . stamfordkarel. import *
def mais ():
turn-left ():
while frent_ is_ alpar ();
turn-right ()
fill-row ( )
return_to_ home()
jumprow ()
turn-right ()
fill-row ()
returnkte -home ()
while front- is Elcar();
meve ()
Sef fill -row() ;
while front- is clear()
put - beeper ()
move ()
put-beeper ()",147,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()

    def fill_row():
        while front_is_clear():
            put_beeper()
            move()
        put_beeper()
",32,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()

    def fill_row():
        while front_is_clear():
            put_beeper()
            move()
        put_beeper()
",32,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",12,"fremkarel. stamfordkared impert*
def \( \operatorname{main}() \) :
turn-left ():
while frent - is _ clpar ():
tumn-right 1)
fill-row()
retwn-te-home()
junprow()
turn - right ()
fillarow ()
ve turnkte - home ()
while front-is. Elear ( \( ) \) :
meve()
def fill-rew():
while front - is - clearl)
put - beeper ()
move ()
put-beeper ()",177,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
        turn_right()
        fill_row()
        return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",12,"
from karel.stanfordkarel import *
def main():
		turn_left()
		while front_is_clear():
			turn_right()
			fill_row()
			return_to_home()
			jump_row()
		turn_right()
		fill_row()
		return_to_home()
		while front_is_clear():
			move()
	def fill_row():
		while front_is_clear():
			put_beeper()
			move()
		put_beeper()
",93,"from karel.stanfordkarel import *


def main():
    turn_left()
    while front_is_clear():
        turn_right()
        fill_row()
        return_to_home()
        jump_row()
    turn_right()
    fill_row()
    return_to_home()
    while front_is_clear():
        move()


def fill_row():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
",0
"from stanfordkarel import *

""""""
Karel should fill the whole world with beepers.
""""""


def main():
    """"""
    You should write your code to make Karel do its task in
    this function. Make sure to delete the 'pass' line before
    starting to write your own code. You should also delete this
    comment and replace it with a better, more descriptive one.
    """"""
    while not left_is_blocked():
        put_beeper_Line()
        reset_Position()
    put_beeper_Line()


def put_beeper_Line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",1,"from stanfordKarel import *
11 11 11
Kard should
beepers.
|| || ||
def
main ():
11 [1 (1
You should write
Karel do its
comment
better
fill
11 [11
/
the whole world with
Make
виче
before starting to
code. You should also
to
task in this
function.
delete the pass line
write your
owen
delete this
with
and replace it
more descriptive one.
move ()
put_ beeper ()
your
put_ beeper _line ()
our code to malce
While not left_it_ blocked ():
put - beeper_Line()
resit_ Position ()
dif put_beeper_Line():
put_beeper ()
front_is_clear
while
():",376,"# Code goes here
",563,"from stanfordKarel import *

# Karel should beepers.
def main():
    # You should write Karel do its comment better fill
    # the whole world with Make виче before starting to code.
    # You should also write your own task in this function.
    # Delete the pass line and replace it with your more descriptive one.

    move()
    put_beeper()
    put_beeper_line()
    # Your code to make While not left_is_blocked()

    put_beeper_line()
    reset_position()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        pass
    # return code in the following format
",312,"from stanfordKarel import *

# Karel should fill the whole world with beepers


def main():
    """"""
    Make sure you write your own comment describing the task in this function before starting to code.
    You should also delete the pass line and replace it with your own more descriptive one.
    """"""
    move()
    put_beeper()
    put_beeper_line()

    while not left_is_blocked():
        put_beeper_line()
        reset_position()


def put_beeper_line():
    put_beeper()

    while front_is_clear():
        move()
        put_beeper()


# More code goes here if necessary
",238,"from stanford hard import
Kard should fill the whole world with
beepers
11 11 11
daf main () :
11
11
11
you should write your code to male
karel do its task in this function.
Make sure to delite the pass line
code. You should also delete
before starting to write your this own
comment and replace it with a
better more descriptive one
11 11
while not left- is blocked C):
put- buper-line()
resit_Position c)
put- buper - Line c)
def put beeper-line() -
put beeper c)
while front is clear C) :
move ()
put- - beeper c)",208,"from stanfordkarel import *

# Karel should fill the whole world with beepers


def main():
    # you should write your code to make karel do its task in this function.
    # Make sure to delete the pass line before starting to write your own code.
    # You should also delete this comment and replace it with a better more descriptive one

    while not left_is_blocked():
        put_beeper_line()
        reset_position()
        put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",61,"from stanfordkarel import *


def main():
    while not left_is_blocked():
        put_beeper_line()
        reset_position()
        put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",332,"from stanfordkarel import *


def main():
    """"""
    You should write your code to make
    Karel do its task in this function.
    Make sure to delete the pass line
    code. You should also delete
    this comment and replace it with a
    better, more descriptive one.
    """"""

    while not left_is_blocked():
        put_beeper_line()
        reset_position()
        put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",126,"from stanfordkarel import *
Kard should fill the whole world with
keepers.
11 11 11
daf main () :
11 11 11
You should write your code to males
Karel do its task in this function.
Make sure to delete the 'pass line
before starting to write your own
code. You should also delete this
comment and replace it with a
better more descriptive one.
11 11 11
While not left-is - blocked ():
put -beeper -Line()
reset_Position ()
put-buper _line ()
de put_leeper-Line ():
put -beeper ()
While front-is- clear ():
move ( )
put -beeper ()",141,"from stanfordkarel import *


def main():
    while not left_is_blocked():
        put_beeper_line()
        reset_position()
        put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",332,"from stanfordkarel import *

# Karel should fill the whole world with beepers.
def main():
    # You should write your code to make Karel do its task in this function.
    # Make sure to delete the 'pass' line before starting to write your own
    # code. You should replace this comment with a better and more descriptive one.

    while not left_is_blocked():
        put_beeper_line()
        reset_position()
        put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",84,"from stanfordkarel import *

# Karel should fill the whole world with beepers.
def main():
    # Make Karel do its task in this function.
    # Delete the 'pass' line before starting to write your own code.
    # Delete this comment and replace it with a better more descriptive one.

    while not left_is_blocked():
        put_beeper_line()
        reset_position()
        put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",103,"Grom stanfordkarel import *
111111
Karel should fill the whole world with bepers.
111111
def \( \operatorname{main}() \) :
""11 11
You should write your code to male karel do its task in this function. Make sure to delete the 'pass'1 line bfore slarting to rurite your owen code. You should also delete thir comment and replace it with a better, more descriptive one. 111111

While not left_ir_blockd ():
put_beper_Lin ()
resit_position ()
put_buper_line C)
dy put_buper-Line \( ( \) ):
put_beper ()
while front_is-clear C):
move ()
put_beper ()",155,"from stanfordkarel import *


def main():
    """"""
    You should write your code to make
    Karel do its task in this function.
    Make sure to delete the 'pass' line
    before starting to rewrite your own
    code. You should also delete this
    comment and replace it with a
    better, more descriptive one.
    """"""
    while not left_is_blocked():
        put_beper_line()
        reset_position()
    put_beeper_line()


def put_beper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",93,"from stanfordkarel import *


def main():
    while not left_is_blocked():
        put_beeper_line()
        reset_position()
    put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",328,"from stanfordkarel import *

""""""
Karel should fill the whole world with beepers.
""""""


def main():
    """"""
    You should write your code to make Karel do its task in this function.
    Make sure to delete the 'pass' line before starting to write your own code.
    You should also delete this comment and replace it with a better, more descriptive one.
    """"""
    while not left_is_blocked():
        put_beeper_line()
        reset_position()
    put_beeper_line()


def put_beeper_line():
    put_beeper()
    while front_is_clear():
        move()
        put_beeper()
",24
"#karel needs to move to the bottom of the next arch to commence 
#building the next column.
#precondition: karel is facing east
#post condition: karel is still facing east at the next column site.
        
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()""
                
def turn_around():
    turn_left()
    turn_left()
        
if __name__ == '__main__':
    main()",1,"#Karel needs to move to the bottom of the next arch to comm
#ence building the next column.
# Precondition: Karel is facing east
#post_condition : Karel is facing east at the next column site.
def move_to_ next_arch_botton ():
if front is clear ():
for i in range (4):
move ()
def turn around () =
turn_left()
turn_left (D
if name
Main ()
main",119,"# Karel needs to move to the bottom of the next arch to commence
# building the next column.
# Precondition: Karel is facing east
# Post_condition : Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",55,"# Karel needs to move to the bottom of the next arch to commence
# building the next column.
# Precondition: Karel is facing east
# Post_condition: Karel is facing east at the next column site.


def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",53,"# Karel needs to move to the bottom of the next arch to commence building the next column.
# Precondition: Karel is facing east
# post_condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if condition:  # Replace with your condition
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    move_to_next_arch_bottom()
    turn_around()
",128,"#karel needs to more to the bottom of the next arch to comm
#ence building the next column.
#
Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move to next arch botto ():
if front is clear ():
for i in range (4)
move ()
def turn around ():
turn left()
turn_left(3)
if name 1 i main , :
main ()",117,"# Karel needs to move to the bottom of the next arch to commence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",53,":
# Karel needs to move to the bottom of the next arch to commence 
# building the next column.
#
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()
def turn_around():
    turn_left()
    turn_left()
if __name__ == ""__main__"":
    main()
",58,"-eslint
# Karel needs to move to the bottom of the next arch to commence
# building the next column.

# Precondition: Karel is facing east
# Post-condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    move_to_next_arch_bottom()
",85,"#karel needs to move to the bottom of the next noch to com
Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_botton ();
if front is clear ():
for i in range (4) :
move ()
def turn around ():
turn_left ( )
turn left ()
if __ name.
main
main ()",120,"# Karel needs to move to the bottom of the next arch to come
# Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",58,"# Karel needs to move to the bottom of the next arch to continue
# Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",63,"# Karel needs to move to the bottom of the next arch to come
# Hence building the next column.
# Precondition: Karel is facing east
# post-condition: Karel is facing east at the next column site.
def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",58,"Hikarel needs to move to the bottom of the next arech to comm. Hence building the next column.
\# Precondition: karel is facing east
\#post-condition: kavel is facing east at the next column site. def move_to_next_arch_botton():
if frontis-clear () :
for \( i \) in range (4):
move ()
def turnarounl () :",159,"
# Karel needs to move to the bottom of the next arch to comm.
# Hence building the next column.
# Precondition: karel is facing east
# post-condition: karel is facing east at the next column site.

def move_to_next_arch_bottom():
    if front_is_clear() :
        for i in range(4):
            move ()
def turnaround() :
",126,"
# Karel needs to move to the bottom of the next arch to comm.
# Hence building the next column.
# Precondition: karel is facing east
# post-condition: karel is facing east at the next column site.
def move_to_next_arch_bottom():
	if front_is_clear():
		for i in range(4):
			move()
def turnaround():
",150,"# Karel needs to move to the bottom of the next arch to commence. Hence, building the next column.
# Precondition: Karel is facing east
# Post-condition: Karel is facing east at the next column site.


def move_to_next_arch_bottom():
    if front_is_clear():
        for i in range(4):
            move()


def turnaround():
    pass
",121
"def find_lrgst_smallst(number):
    if not numbers:
        return none
    smallest = largest = number[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example Usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_lrgst_smallst(numbers)
print(result)
",1,"HEART
def- find Ligst_smallet (number);
if not numbers:
return none
-Smallest= largest = number [0]
for num in numbers:
if num < smallest:
= num
пит
smallest
if nam > Largest :
Largest.
fieturin smallest, Largest
= num
#Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
Tresult
find_ligst __ smallst (numbens)
print (result)
উদ্ভাস-উন্মেষ শিক্ষা পরিবার",143,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find-Ligst_smallst - (number):
if not numbers:
return none
-Smallest. = largest = number [0]
for num in numbers:
if num < smallest:
smallest = num
if nam > largest:
Largest = num
return smallest, Largest
Example usage:
numbers = [1, 2, 3, 4,5,6,7,8,9]
result = find_ligst_smalist (numbers)
print (result)",91,"
def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest

Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",14,"def find_smallest_largest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_smallest_largest(numbers)
print(result)
",24,"
def find_smallest_largest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest

Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_smallest_largest(numbers)
print(result)
",28,"def find_Ligst_smallst (number):
00
if not numbers:
Return none
Smallest=largest = number [0]
-
for num in numbers:
lif
num < smallest:
smallest = num
if
nam > Largest :
Largest = num
tieturin smallest, Largest
# Example usage:
numbers = [1,2,3, 4,5,6,7,8,9]
Hresult = find_ligst_smallst(numbers)
print (result)
उदास-उदास मिका शंतिबाज़",117,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",10,"def find_largest_smallest(numbers):
    # Check if numbers list is empty
    if not numbers:
        return None
    # Initialize the variables
    smallest = largest = numbers[0]
    # Loop through the list
    for num in numbers:
        # Find smallest number
        if num < smallest:
            smallest = num
        # Find largest number
        if num > largest:
            largest = num
    # Return smallest and largest number
    return smallest, largest


# Example usage:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
# Calling function
result = find_largest_smallest(numbers)
print(result)
",227,"def find_rigst_smallst (number):
if not numbers:
return none
- Smallest = largest = number [0]
for num in numbers:
if num < smallest:
\[
\text { smallest }=\text { num }
\]
if nam > Largest:
\[
\text { Largest }=\text { num }
\]
fietutin smallest, Largest
* Example usage.
\[
\begin{array}{l}
\text { rumbers }=[1,2,3,4,5,6,7,8,9] \\
\text { result }=\text { find_lrgst_smallst (numbers) }
\end{array}
\]
print (result)",170,"def find_right_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest
",115,"def find_rigst_smallst(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_rigst_smallst(numbers)
print(result)
",9,"def find_largest_smallest(numbers):
    if not numbers:
        return None
    smallest = largest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
        if num > largest:
            largest = num
    return smallest, largest


# Example usage
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = find_largest_smallest(numbers)
print(result)
",11
"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The Sum of the Digits is: "", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0

    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",1,"def main():
user number
input (""Enter the number: "")
result = Sum_of_digits (user_number)
print (""The Sum of the digits is"", result)
def Sum_of_digits (user_ number):
W 18
number_str = Str (user_number)
digit_sum = 0
for digit in number str:
#zero
return digit sum
if_name_
main()
digit_sum += int(digit)
_main_"":",112,"def main():
    user_number = input(""Enter the number: "")
    result = Sum_of_digits(user_number)
    print(""The Sum of the digits is"", result)


def Sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",6,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The Sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",4,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The Sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",4,"def main():
user_number = input (""Enter the number: "")
result = Sum_of-digits (user_number)
print (""The Sum of the digits is"", result)
def Sum- of_digits (user_ number):
1#
number_str = Str (user- number)
digit_sum = 0 # zero
for digit in number-str:
digit_sum + int(digit)
return digit_sum
if name_ == ""__main_"":
main()",71,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",5,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The Sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",4,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The Sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",4,"def main():
user_number = input (""Enter the number:
"")
result = sum_of_digits (user_number )
print (""The sum of the digits is "", result)
def Sum_of_digits (user_number):
number_str = Str (user_number)
digit_sum=0 # zero
for digit in number-str:
digit_sum + = int (digit)
return digit sum
if _name _== ""_main_"":
main()",71,"def main():
    user_number = input(""Enter the number:\n"")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is "", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0  # zero
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",13,"def main():
    user_number = input(""Enter the number:\n"")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is "", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0  # zero
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",13,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is "", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",4,"def main():
user_number = input (""Enter the number: "")
result = sum_of digits (user_number)
print (""The sum of the digits is"", result)
def sum_of_digits (user_number):
number_st \( r=\operatorname{str} \) (user_number)
digit_sum \( =\varnothing \quad \# \) zero
for digit in numberstr:
\[
\text { digit_sum } t=\operatorname{int} \text { (digit) }
\]
veturn digit_sum
if name_ \( =="" \) main_ \( "" \) :
main()",147,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",5,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",5,"def main():
    user_number = input(""Enter the number: "")
    result = sum_of_digits(user_number)
    print(""The sum of the digits is"", result)


def sum_of_digits(user_number):
    number_str = str(user_number)
    digit_sum = 0
    for digit in number_str:
        digit_sum += int(digit)
    return digit_sum


if __name__ == ""__main__"":
    main()
",5
"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",1,"def is-prime (n):
DON
if
Returns True if n is prime, False otherwise.
|(α ||
if n <
n < = 1:
return False
for i in range (2, int(n** 0.5) +1);
if n % i = = 0;
def main():
return True
[((11
The main function.
Int
return False
14
n = int ( input (""Enter a number: "")
if is-prime (n):
print (n
else:
""is a
main()
print (n. ""is not a prime number."")
name__ ==
prime number."")
11
main.
--
})",207,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, "" is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",1,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False

    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False

    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",2,"dof is -prime (n):
110V
Returns True if n is prime, False otherwise.
11011
if n <= 1:
return False
for i in range (2 , int(n**0.5 ) +1): :
if n % i == 0 :
return False
return True
def main():
The main function.
n= int (input ( ""Enter a number: "")
if is-prime (n):
print ( n , ""is a prime number."")
else :
print( n, ""is not a prime number. "")
if
name
11
main
"",
""
;
main()",152,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0,"def is-prime (n):
1104
Returns True if n is prime, False otherwise
11011
if n <= 1:
return False
for i in range (2, int(n*0.5)+1):
if n % i == 0.
return False
return True
def main () :
11 /11
The main function.
/11.11
n = int ( input (""Enter a number: "")
if is- prime (n):
print (n, "" is a prime number."")
else :
print( n, ""is not a prime number. "")
it
- - name __ == __ main -- :
main ( )",147,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n * 0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",3,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n * 0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",3,"def is_prime(n):
    """"""
    Returns True if n is a prime, False otherwise
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n * 0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",5,"def is-prime \( (n) \) :
Returns True if \( n \) is prime, False otherwise.
IIU11
if \( n<=1 \) :
return False
for \( i \) in range \( \left(2, \operatorname{int}\left(n^{* *} 0.5\right)+1\right) \) :
if \( n \% i==0 \) :
retum False
return True
def \( \operatorname{main}() \) :
IIIII
The main function.
1....
\( n=\operatorname{int} \) (input (""Enter a number: "")
if is-prime \( (n) \) :
print \( (n \), ""is a prime number."")
else:
print ( \( n \), ""is not a prime number."")
if \( \ldots \) name _. \( =="" \) main .. ""
\( \operatorname{main}() \)",279,"
def is_prime(n):
    Returns True if n is prime, False otherwise.

    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

def main():
    The main function.
    
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")

if __name__ == ""__main__"":
    main()
",31,"def is_prime(n):
    # Returns True if n is prime, False otherwise.
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    # The main function.
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",30,"def is_prime(n):
    """"""
    Returns True if n is prime, False otherwise.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def main():
    """"""
    The main function.
    """"""
    n = int(input(""Enter a number: ""))
    if is_prime(n):
        print(n, ""is a prime number."")
    else:
        print(n, ""is not a prime number."")


if __name__ == ""__main__"":
    main()
",0
"# Reverse String
def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


if __name__ == ""__main__"":
    main()
",1,"#Reverse String
def mam ():
str = input (""Input a string: "")
ro_str=
for i m str:
||||
if_name
r_str=i+r_stra
primt (r_stro)
mam ()
_maim_"":",78,"# Reverse String
def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


main()
",31,"# Reverse String
def main():
    str_ = input(""Input a string: "")
    r_str = """"
    for i in str_:
        r_str = i + r_str
    print(r_str)


if __name__ == ""__main__"":
    main()
",2,"# Reverse String
def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


if __name__ == ""__main__"":
    main()
",0,"# Reverse
string
def main ():
str = input ( ""Input a string: "")
ro-str=
for i instr:
r_str=itn_str
print (n_str)
if_ name - "" - __main_
main ()",63,"# Reverse String
def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


if __name__ == ""__main__"":
    main()
",0,"def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


if __name__ == ""__main__"":
    main()
",17,"# Reverse string
def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


if __name__ == ""__main__"":
    main()
",1,"#Reverse String
def man ():
str = input (""Input a string: "")
ro _str= """"
for i'm str:
r_ str = i+ n_ str
print (no_stro)
if_name _= = ""_main_"":
main ()",55,"# Reverse String
def main():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


if __name__ == ""__main__"":
    main()
",0,"# Reverse String
def main():
    str = input(""Input a string: "")
    rev_str = """"
    for i in str:
        rev_str = i + rev_str
    print(rev_str)


if __name__ == ""__main__"":
    main()
",8,"# Reverse String
def main():
    str = input(""Input a string: "")
    rev_str = """"
    for i in str:
        rev_str = i + rev_str
    print(rev_str)


if __name__ == ""__main__"":
    main()
",8,"\# Reverse string
def \( \operatorname{mam}() \) :
stro = input (""Input a string: "")
rostro \( ="" 11 \)
for i instr:
\[
r_{-} s t r=i+r_{-} s t r
\]
print (r_stro)
\[
\begin{array}{l}
\text { if_name- }=="" \text {-main_: } \\
\operatorname{mam} \text { () }
\end{array}
\]",157,"# Reverse string
def man():
    stro = input(""Input a string: "")
    r_stro = """"
    for i in stro:
        r_stro = i + r_stro
    print(r_stro)


if __name__ == ""__main__"":
    man()
",9,"# Reverse string
def mam():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


if __name__ == ""__main__"":
    mam()
",5,"# Reverse string
def rev():
    str = input(""Input a string: "")
    r_str = """"
    for i in str:
        r_str = i + r_str
    print(r_str)


if __name__ == ""__main__"":
    rev()
",9
"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    list = sentence.split()
    l_word = """"
    for word in list:

        if len(word) > len(l_word):
            l_word = word
    print(l_word)


if __name__ == ""__main__"":
    main()
",1,"# Write a Python program to find the longest word in a given text
def maint):
sentence = imput (""Input a sentence: "")
list = sentence.split()
Lword =
for world im List:
if len (word) >len (1-word):
1_ word = word
primt (1- word)
if_name_ == ""_mam_"":
main ()",78,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    lst = sentence.split()
    l_word = """"
    for word in lst:
        if len(word) > len(l_word):
            l_word = word
    print(l_word)


if __name__ == ""__main__"":
    main()
",3,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    list = sentence.split()
    l_word = """"
    for word in list:
        if len(word) > len(l_word):
            l_word = word
    print(l_word)


if __name__ == ""__main__"":
    main()
",1,":]
# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    word_list = sentence.split()
    long_word = """"
    for word in word_list:
        if len (word) > len (long_word):
            long_word = word
    print (long_word)

if __name__ == ""__main__"":
    main()
",30,"# Write a Python program to find the longest word in a given text
def main() :
sentence = input (""Input a sentence: "")
list = sentence.split1)
Iword = if 11
for word in List:
if len (word) ) len (1 word):
1_ word = word
print(1- word)
if_name- == ""_main-"":
main ()",73,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    list_words = sentence.split()
    l_word = list_words[0]
    for word in list_words:
        if len(word) > len(l_word):
            l_word = word
    print(l_word)


if __name__ == ""__main__"":
    main()
",26,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    List = sentence.split()
    l_word = """"
    for word in List:
        if len(word) > len(l_word):
            l_word = word
    print(l_word)


if __name__ == ""__main__"":
    main()
",3,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    words_list = sentence.split()
    longest_word = """"
    for word in words_list:
        if len(word) > len(longest_word):
            longest_word = word
    print(longest_word)


if __name__ == ""__main__"":
    main()
",37,"# Write a Python program to find the longest word i'm a given text
def main ():
sentence = input (""Input a sentence: "")
list = sentence. split ( )
Lword = """"1
for word in List:
if len (word) > 1en (1-word):
1-word = word
print (1-word)
if_name = ""_main_"" :
main ()",77,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    list = sentence.split()
    Lword = """"
    for word in list:
        if len(word) > len(Lword):
            Lword = word
    print(Lword)


if __name__ == ""__main__"":
    main()
",9,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    lst = sentence.split()
    l_word = """"
    for word in lst:
        if len(word) > len(l_word):
            l_word = word
    print(l_word)


if __name__ == ""__main__"":
    main()
",3,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    words = sentence.split()
    longest_word = """"
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    print(longest_word)


if __name__ == ""__main__"":
    main()
",35,"\# Write a Python program to find the longest word a \( m \) a given text def main \( ( \) ):
sentence = imput (""Input a sentence: "")
list = sentence.split ()
lword = "" ""
for word im list:
if len (word) >len (1-word):
\[
\text { 1_word }=\text { word }
\]
primt (1-word)
if name_ \( == \) ""-main_"".
\( \operatorname{main}() \)",116,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    list = sentence.split()
    lword = "" ""
    for word in list:
        if len(word) > len(lword):
            lword = word
    print(lword)


if __name__ == ""__main__"":
    main()
",6,"# Write a Python program to find the longest word in a given text
def main():
    sentence = input(""Input a sentence: "")
    list = sentence.split()
    lword = """"
    for word in list:
        if len(word) > len(lword):
            lword = word
    print(lword)


if __name__ == ""__main__"":
    main()
",5,"def main():
    sentence = input(""Input a sentence: "")
    words_list = sentence.split()
    lword = """"
    for word in words_list:
        if len(word) > len(lword):
            lword = word
    print(lword)


if __name__ == ""__main__"":
    main()
",83
"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",1,"def greatest common_divisor(a,b):
smaller_number=a if azb else b
common_divisor= []
for i in range (1, smaller_number +1):
if a %i == 0 and b% i ==0:
common_divisor.append()
return common_divisor [-1]",52,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def
greatest_common_divisorca,b):
smaller_number. = a if a4b else 10
common-divisor= []
for i in range (1, smaller_number +1) :
if a %i ==0 and b%i==0:
common_divisor . append(i)
return common_divisor [-1]",60,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor (a,b) :
smaller_ number = a if a <b else 10
common_divisor = []
for i in range (1, smaller_number +1):
if 9 % i == 0 and 6% i == 0:
common_divisor. append (i)
return common_divisor [-1]",52,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor \( (a, b) \) :
smaller_number \( =a \) if \( a<b \) else \( b \) common_divisor \( =[] \)
for \( i \) in range \( (1 \), smaller number +1\( ) \) : if \( a \% i==0 \) and \( b \% i==0 \) : common_divisor. a ppend (i) return common_divisor \( [-1] \)",94,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0,"def greatest_common_divisor(a, b):
    smaller_number = a if a < b else b
    common_divisor = []
    for i in range(1, smaller_number + 1):
        if a % i == 0 and b % i == 0:
            common_divisor.append(i)
    return common_divisor[-1]
",0
"def main():
    """"""
    The program should determine whether the given year is a leap year
    (divisible by 4, divisible by 100 but also by 400).
    """"""

    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below(in number form)."")
    Year = int(input(""Year : ""))
    print("" "")

    if (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" "" + ""is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" "" + ""is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("" "")
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")

        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()

        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break

        elif ask != ""Yes"" or ask != ""yes"" or ask != ""No"" or ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",1,"def main ():
The
should determine whether the given year is a leap year
(divisible by 4, divisible by loo but also by 400).
program
print (""This program will help you identify if a given year is a leap
or not."")
year
if
print ("" "")
()
identify_a_leap_year
ask_for_a_new_year_to_ identify ()
def identify_a_leap-year ():
print (""Please input
Year = int (imput ("" Year: ""))
print("" "")
else :
it (Year % 4 = = 0) or (Year %/ 100 ==0) or (Year % 400 ==0);
+ str (Year) +
+ "" is a leap year."")
V
print (""The Year
""+"" is not a leap year."")
print (""the Year
def ask_for_a_new_year_to_
white True:
-_name__
main ()
a year below (ill humber
if ask = =
+ str (Year).
-+
identify ():
print (')
ask - input (""Do you want to identify
print ("" "")
""__main__
form). "")
""Yes"" or ask
ask = = ""yes"" :
identify_a_ leap year ()
""
elif ask = = ""No"" or ask == ""no
a new year? Yes/No: "")
print (""Thank you. See you again!"")
break
elif ask != ""Yes
or ask != ""yes"" of ark! = ""No"" or ask != ""no"":
print (""Wrong keyword. Please type the exact keyword."")",486,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form). "")
    Year = int(input(""Year: ""))
    print("" "")
    if (Year % 4 == 0) or (Year % 100 == 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" or ask != ""yes"" or ask != ""No"" or ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",54,"def main():
    print(""This program will help you identify if a given year is a leap or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("" "")
    if (Year % 4 == 0) or (Year % 100 != 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" and ask != ""yes"" and ask != ""No"" and ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",194,"def main():
    # This program should determine whether the given year is a leap year.
    # A leap year is divisible by 4, divisible by 100 but also by 400.
    print(""This program will help you identify if a given year is a leap year or not."")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    # Please input a year below (in number form)
    year = int(input(""Year: ""))
    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
        print(""The Year "" + str(year) + "" is a leap year."")
    else:
        print(""The Year "" + str(year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        ask = input(""Do you want to identify a new year? Yes/No: "").lower()
        if ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""no"":
            print(""Thank you. See you again!"")
            break
        else:
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",230,"def main ():
The program should determine whether the given year is a leap year
(divisible by 4, divisible by 100 but also by 400).
print (""This program will help you identify if a given year is a leap
year or not."")
print ( a)
identify- a - leap_ year ()
ask_for_a- new- year- to identify()
def identify- a - leap - year () :
print ("" Please input a year below (in number form)."")
Year = int (input (""Year: ""))
print ( .)
if (Year %4==0) or (Year % 100 = = 0) or (Year % 400 = = 0) :
print (""The Year ""+ str (Year) + v t is a leap year."")
else
print (""the Year str(Year) + "" + "" is not a leap year."")
def ask_for a-new. year to- identify ():
white True:
prilit ( 1)
ask = input (""Do you want to identify a new year? Yes/No: "")
print ( "" "")
if ask == ""Yes"" or ask == ""yes"":
identify_a_leap-yaar
elif ask = = ""No"" or ask == ""no"" :
print (""Thank you. See you again!')
break
elif ask != ""Yes or ask != ""yes"" a task!=""No"" or ask != ""no"":
print (""Wrong keyword. Please type the exact keyword. )
if name == ""__ main "":
main ()",296,"def main():
    print(""This program will help you identify if a given year is a leap year or not."")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    if (Year % 4 == 0 and Year % 100 != 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" and ask != ""yes"" and ask != ""No"" and ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",224,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    if (Year % 4 == 0) and (Year % 100 != 0 or Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" and ask != ""yes"" and ask != ""No"" and ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",98,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    if (Year % 4 == 0 and Year % 100 != 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" and ask != ""yes"" and ask != ""No"" and ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",98,"def main () :
The program should determine whether the given year is a leap year
( divisible by 4, divisible by 100 but also by 400).
print ( "" This program will help you identify if a given year is a leap
year or not . "")
print ("" "")
identify_a_leap year ( )
ask _ for _ a _ new _year _ to _identify ( )
def identify _ a _ leap year ( ) :
print ( "" Please input a year below ( in number form ) . "")
Year = int (input (""Year:
print ("" "")
if (Year % 4 == 0) or (Year % 100 == 0) or (year % 400 == 0) ;
print (""The Year + str(Year) + "" ""+ ""is a leap year."")
else :
print ( "" The Year "" + str ( Year ) + "" "" + "" is not a leap year . "" )
def ask-for-a-new year_ to _ identify ( ) :
white True :
print ("" "")
ask - input ( "" Do you want to identify a new year ? Yes / No : "" )
print ("" "")
if ask == ""Yes "" or ask == ""yes"":
identify_ a_ leap -year ( )
elif ask == ""NO"" or ask = ""no"":
print ( "" Thank you . See you again ! "" )
break
elif ask != ""Yes or ask != ""yes"" a ask! = ""No"" or ask != ""no"".
print ( "" Wrong keyword . Please type the exact keyword . "")
if
__ name_ == "" __ main __ "":
main ()",312,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    print("""")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year:""))
    print("""")
    if (Year % 4 == 0) and ((Year % 100 != 0) or (Year % 400 == 0)):
        print(""The Year "" + str(Year) + "" "" + ""is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" "" + ""is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("""")
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("""")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" and ask != ""yes"" and ask != ""No"" and ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",44,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("" "")
    if (Year % 4 == 0) or (Year % 100 == 0) and (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("" "")
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" and ask != ""yes"" and ask != ""No"" and ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",46,"def main():
    # The program should determine whether the given year is a leap year
    # (divisible by 4, divisible by 100 but also by 400).
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("" "")
    if (Year % 4 == 0 and Year % 100 != 0) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print("" "")
        ask = input(""Do you want to identify a new year? Yes/No: "")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" or ask != ""yes"" or ask != ""No"" or ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",40,"def \( \operatorname{main}() \) :
""The program should determine whether the given year is a leap year (divisible by 4, divisible by 100 but also by 400).
"" r""
print (""This program will help you identify if a given year is a leap year or not."")
privit ("" "")
identify - a - leap_year ()
ask_for_a new_year_to_identify ()
def identify - a l eap - year () :
print (""Please input a year below (in number form)."")
Year = int (input (""Year: ""))
print ("" "")
if \( ( \) Year \( \% 4=0) \) ) or \( ( \) Year \( \% 100=0) \) ) or \( ( \) Year \( \% 400=0) \) :
print (""The Year "" \( +\operatorname{str}( \) Year) + "" "" ""is a leap year."")
else:
\[
\text { print (""The Year ""+str (Year) }+ \text { "" "" "" is not a leap year."") }
\]
def ask_-fir_a_new - year_to_identify ():
white True:
print (' 1 )
ask = input (""Do you want to identify a new year? Yes/No:"") print ("" "")
if ask = = ""Yes "" or ask = = ""yes"":
identify - a - leap- year ()
elif ask \( == \) ""No"" or ask \( == \) ""no"" :
print (""Thank you. See you again!"")
break
elif ask ! = ""Yes or ask ! = ""yes"" a ask! = ""No"" or ask ! = ""no"":
print (""Wrong keyword. Please type the exact keyword."")
if .. name \( \ldots=="" \) main \( _{2}{ }^{\prime} \) :
main ()",401,"def main():
    """"""
    The program should determine whether the given year is a leap year
    (divisible by 4, divisible by 100 but also by 400).
    """"""
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()


def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    Year = int(input(""Year: ""))
    print("" "")
    if ((Year % 4 == 0) and (Year % 100 != 0)) or (Year % 400 == 0):
        print(""The Year "" + str(Year) + "" is a leap year."")
    else:
        print(""The Year "" + str(Year) + "" is not a leap year."")


def ask_for_a_new_year_to_identify():
    while True:
        print()
        ask = input(""Do you want to identify a new year? Yes/No:"")
        print("" "")
        if ask == ""Yes"" or ask == ""yes"":
            identify_a_leap_year()
        elif ask == ""No"" or ask == ""no"":
            print(""Thank you. See you again!"")
            break
        elif ask != ""Yes"" and ask != ""yes"" and ask != ""No"" and ask != ""no"":
            print(""Wrong keyword. Please type the exact keyword."")


if __name__ == ""__main__"":
    main()
",36,"
def main():
	""The program should determine whether the given year is a leap year
	(divisible by 4, divisible by 100 but also by 400).
	""
	print(""This program will help you identify if a given year is a leap year or not."")
	print("" "")
	identify_a_leap_year()
	ask_for_a_new_year_to_identify()

def identify_a_leap_year():
	print(""Please input a year below (in number form)."")
	Year = int(input(""Year: ""))
	print("" "")
	if (Year % 4 == 0 and Year % 100 != 0) or (Year % 400 == 0):
		print(""The Year "" + str(Year) + "" is a leap year."")
	else:
		print(""The Year ""+str(Year) + "" is not a leap year."")

def ask_for_a_new_year_to_identify():
	while True:
		print(' ')
		ask = input(""Do you want to identify a new year? Yes/No:"")
		print("" "")
		if ask == ""Yes"" or ask == ""yes"":
			identify_a_leap_year()
		elif ask == ""No"" or ask == ""no"":
			print(""Thank you. See you again!"")
			break
		elif ask != ""Yes"" and ask != ""yes"" and ask != ""No"" and ask != ""no"":
			print(""Wrong keyword. Please type the exact keyword."")

if __name__ == ""__main__"":
	main()
",218,"
def main():
    ""The program should determine whether the given year is a leap year
    (divisible by 4, divisible by 100 but also by 400).""
    print(""This program will help you identify if a given year is a leap year or not."")
    print("" "")
    identify_a_leap_year()
    ask_for_a_new_year_to_identify()

def identify_a_leap_year():
    print(""Please input a year below (in number form)."")
    year = int(input(""Year: ""))
    print("" "")
    if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):
        print(""The Year "" + str(year) + "" is a leap year."")
    else:
        print(""The Year "" + str(year) + "" is not a leap year."")

def ask_for_a_new_year_to_identify():
    while True:
        print('')
        ask = input(""Do you want to identify a new year? Yes/No:"")
        print("" "")
        if ask.lower() == ""yes"":
            identify_a_leap_year()
        elif ask.lower() == ""no"":
            print(""Thank you. See you again!"")
            break
        else:
            print (""Wrong keyword. Please type the exact keyword."")

if __name__ == ""__main__"":
    main()
",140
"sum = 0
number = input()
for i in number:
    sum += int(i)
Print(sum)
",1,"Sun =
S
number
imput ()
for i in number:
Sun + =
int(i)
Print (surm)
N",20,":
Sum = 0
number = input()
for i in number:
    Sum += int(i)
print(Sum)
",6,":
sum = 0
number = input()
for i in number:
    sum += int(i)
print (sum)
",4,"sum = 0
number = input()
for i in number:
    sum += int(i)
print(sum)
",1,"sun 2 = $
number N Emput ()
for i in number:
sun + 11 int(i)
print (sum )",20,"sum_2 = 0
number = input()
for i in number:
    sum_2 += int(i)
print(sum_2)
",7,"sum_ = 0
number = input()
for i in number:
    sum_ += int(i)
print(sum_)
",4,":
sum_ = 0
number = input()
for i in number:
    sum_ += int(i)
print(sum_)
",6,"Sun = D
number = input ()
for i in number :
Sun + = int (i)
Print (Sum)",16,"Sum = 0
number = input()
for i in number:
    Sum += int(i)
print(Sum)
",4,"Sum = 0
number = input()
for i in number:
    Sum += int(i)
print(Sum)
",4,"Sum = 0
number = input()
for i in number:
    Sum += int(i)
print(Sum)
",4,"\[
\operatorname{sun}=\varnothing
\]
number = imput ()
for: in number:
\[
\text { sun }+=\operatorname{int}(i)
\]
print (sum)",69,"sum = 0
number = input()
for i in number:
    sum += int(i)
print(sum)
",1,"sum = 0
number = input()
for i in number:
    sum += int(i)
print(sum)
",1,"sum = 0
number = input()
for i in number:
    sum += int(i)
print(sum)
",1
"def factorial(n):
    if n <= 1:
        return 1
    else:
        return factorial(n - 1) * n


print(factorial(int(input())))
",1,"def factoria 1 (n):
if n <= 1 :
Return 1
else:
Return factorial (n-1) *
Prist (fractional (int (amput())))
h",49,"def factorial(n):
    if n <= 1:
        return 1
    else:
        return n * factorial(n - 1)
",37,".Bold text
def factorial(n):
    if n <= 1:
        return 1
    else:
        return n * factorial(n-1)
",48,"def factorial(n):
    if n <= 1:
        return 1
    else:
        return n * factorial(n - 1)
",37,"def factoric / (n):
if h L=1 :
Return 1
else :
Return factorial (n-1) A h
Print (factorial (int (input() ))) )",49,"def factorial(n):
    if n == 1:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(int(input())))
",9,"def factorial(n):
    if n == 1:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(int(input())))
",9,"def factorial(n):
    if n == 1:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(int(input())))
",9,"def factorial (n):
if n <= 1 ;
Return 1
else :
Return factorial (n-1) * h
Print (factorial (int (input ()))",42,"def factorial(n):
    if n <= 1:
        return 1
    else:
        return factorial(n - 1) * n


print(factorial(int(input())))
",0,"def factorial(n):
    if n <= 1:
        return 1
    else:
        return factorial(n - 1) * n


print(factorial(int(input())))
",0,"def factorial(n):
    if n <= 1:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(int(input())))
",8,"def factorial (n):
if \( n<1 \) :
Retunn 1
else:
Return factorial \( (n-1) * n \)
Print \( ( \) factarial \( (\operatorname{int}(\operatorname{imput}()))) \)",89,"def factorial(n):
    if n < 1:
        return 1
    else:
        return factorial((n - 1) * n)


print(factorial(int(input())))
",3,"def factorial(n):
    if n < 1:
        return 1
    else:
        return factorial((n - 1)) * n


print(factorial(int(input())))
",3,"def factorial(n):
    if n < 1:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(int(input())))
",9
"year = int(input)

if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",1,"Year = int (impot
if yeur 1/4 = = $ and year 1/144 != 0 on Year 1.400 ==&=
Print (true)
else:
print (False)",35,"Year = int(input())
if Year % 4 == 0 and Year % 100 != 0 or Year % 400 == 0:
    print(True)
else:
    print(False)
",6,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"year 2 int (input)
if I and year 1,144 1=0 on Year% 400==0:
Print (TRUE)
else :
print (False)",43,"year = int(input())
if year % 144 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",22,"year = int(input())
if year % 144 == 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",23,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"Year = ent (input)
if year / n == 4 and year 0/ 100 /=/ or year / 400 == 0 ;
Print (true)
else :
Print (False )",30,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"\[
\text { year }=\operatorname{int}(\text { impot })
\]
if Yearn \( \% \mu==\phi \) and year \( \% 1 \phi \phi !=\varnothing \) on Year \( \% 400==\phi \) :
Pine (true)
else:
print (False)",108,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(True)
else:
    print(False)
",2,"year = int(input())
if (year % 4 == 0) and (year % 100 != 0) or (year % 400 == 0):
    print(True)
else:
    print(False)
",8
"Word = input()

Word = "" "".join([i for i in word[::-1]])

Print(Word)
",1,"Word = imput()
word = """", join (I i for i in word [::
Print (word)",19,"word = input()
word = """".join(i for i in word[::-1])
print(word)
",9,":
word = input()
word = """".join(i for i in word)
print(word)
",17,"word = input()
word = """".join(i for i in word[::-1])
print(word)
",9,"word = imput()
ward = "" "" "" "" join (I i from i in word[-:-]]]
Print (word)",22,"word = input()
word = "" "".join([i for i in word])
print(word)
",12,"word = input()
word = "" "".join([i for i in word[::-1]])
print(word)
",6,"word = input()
word = "" "".join([i for i in word[::-1]])
print(word)
",6,"Word = input ()
Word = """". join ([ "" for i in word [-]
Print (Word)",16,"word = input()
word = """".join([i for i in word[::-1]])
print(word)
",7,"word = input()
word = """".join([i for i in word])
print(word)
",13,"word = input()
word = """".join([i for i in word[::-1]])
print(word)
",7,"\( \begin{array}{l}\text { Wond }=\operatorname{imput}() \\ \text { wand }="" \text { ""join }([i \text { for } i \text { in word }[\because-1]]) \\ \text { Print (wond) } \\\end{array} \)",134,"word = input()
wand = """".join([i for i in word[:-1]])
print(wand)
",12,"word = input()
wand = """".join([i for i in word][::-1])
print(wand)
",13,"word = input()
wand = """".join([i for i in word[::-1]])
print(wand)
",11
"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]

list3 = [i for i in list1 if i in list2]

print(list3)
",1,"list 1 = [1, 2, 3, 4]
bist 2 = [3, 4, 5, 6]
in lista]
bist 3 = [i for i in list 1 if i in
Print (list 3)",27,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list_1 = [1, 2, 3, 4]
list_2 = [3, 4, 5, 6]
list_3 = [i for i in list_1 if i in list_2]
print(list_3)
",8,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list 1 = $ (1,2,3,4)
list2=[3,4,5,6]
=
list 3= [i for i in list 1 if i in listz]
print(list3)",20,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list_1 = [1, 2, 3, 4]
list_2 = [3, 4, 5, 6]

list_3 = [i for i in list_1 if i in list_2]
print(list_3)
",7,"list 1 = [ 1, 2, 3, 4]
bist 2 = [ 3,4,5,6]
list 3 = Ji par i in list 1 if i in listz]
Print (list 3)",20,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"\( \begin{array}{l}\text { list } 1=[1,2,3,4] \\ \text { bist } 2=[3,4,5,6] \\ \text { fist } 3=[i \text { for } i \text { in list } 1 \text { if } i \text { in list }] \\ \operatorname{Pint}(\operatorname{list} 3)\end{array} \)",160,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [i for i in list1 if i in list2]
print(list3)
",2
"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]

even = [i for i in list1 if i % 2 == 0]

print(even)
",1,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [ è for i in lists if */2==4]
Print (even)",15,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = (123456789)
even = [i for i in list1 if i%2==0]
Print (even)",27,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list 1 = [1, 2, 3, 4, 5, 6, 7, 8,9]
even = [è for i in list 1 if i|2=]
Print (even)",16,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list1 if i % 2 == 0]
print(even)
",2,"\( \begin{array}{l}\text { list } 1=[1,2,3,4,5,6,7,8,9] \\ \text { even }=[i \text { for } i \text { in list } 1 \text { if } i \% 2==] \\ \text { Print (even) }\end{array} \)",116,"list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list_1 if i % 2 == 0]
print(even)
",4,"list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even = [i for i in list_1 if i % 2 == 0]
print(even)
",4,":
list1 = [1,2,3,4,5,6,7,8,9]  
even = [i for i in list1 if i % 2 == 0]  
print(even)
",14
"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",1,"def main ():
year
= int (input())
if (year % 4 == 0 and year % 100 != 0):
print (""True"")
elif (year % 100 == 0 and year % 400 ==0):
print (""True"")
if
else:
print (""False"")
name__
main ()
!!
>>
_main__'",78,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if (year % 4 == 0 and year % 100 != 0) or (year % 100 == 0 and year % 400 == 0):
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",32,"def main ():
year = int (input())
if (year% 4==0 and year % 100 != 0):
print (""True"")
elif (year % 100 ==0 and year % 400 == 0):
print (""True"")
else:
print (""False"")
if -- name "" -- __main__"":
main()",68,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main ():
year = int (input ()
if ( year % 4 == 0 and year % 100 ! = 0):
print (""True"")
elif (year % 100 == 0 and year % 400=0):
print (""True"")
else:
print (""False"")
if
__ name __== "" __ main_"".
main ()",71,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",51,"def main ():
\[
\text { year }=\operatorname{int}(\operatorname{input}())
\]
if (year \% \( 4==0 \) and year \( \% 100 !=0 \) ):
print (""True"")
elif (year \( \% 100==0 \) and year \( \% 400==0 \) ):
print (""True"")
else:
print (""False"")
if __name__ = = ""_main_."":
\( \operatorname{main}() \)",133,"def main():
    year = int(input())
    if (year % 4 == 0) and (year % 100 != 0):
        print(""True"")
    elif (year % 100 == 0) and (year % 400 == 0):
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",8,"def main():
    year = int(input())
    if year % 4 == 0 and year % 100 != 0:
        print(""True"")
    elif year % 100 == 0 and year % 400 == 0:
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",0,"def main():
    year = int(input())
    if (year % 4 == 0) and (year % 100 != 0):
        print(""True"")
    elif (year % 100 == 0) and (year % 400 == 0):
        print(""True"")
    else:
        print(""False"")


if __name__ == ""__main__"":
    main()
",8
"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",1,"from
def
def
karel. stanford kavel import
main ():
build_column ()
step- up ()
build column()
step-up ()
build- column ()
def
step-up()
build- column()
build
column ():
turn-left()
build- beeper ()
build- beeper ()
build_ beeper ()
build-beeper ()
put - beeper ()
go - back()
turn - left ()
det build - beeper ():
put- beeper ()
move ()
go-back ():
turn around ()
step-up ()
def turn around ():
turn - left()
turn
left()
def step-up():
move ()
move ()
move ()
move ()
if - name
main ()
==
main
*",225,"from karel.stanford import karel


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",10,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def step_up():
    for _ in range(4):
        move()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",115,"from karel.stanford.karel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def step_up():
    move()
    move()
    move()
    move()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",103,"from karel. . stanford kavel import
def main () :
build - column ( )
step - up ()
build - column()
step - up()
build. column ()
step - up()
build - column (
def
build - column ()
turn - left ()
build- beeper ( )
build beeper ()
build - beeper ()
build. - beeper ()
put - beeper ()
go - back ()
turn - left ()
def
build - beeper ():
put - - beeper ( )
move ()
det
go - - back() :
turn around ()
-
step - up ()
def turn - around ()
turn - left ()
turn - left ()
def step - up' () :
move ()
move ()
move ()
move ()
if 1 name
1 main :
main ()",252,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()


def step_up():
    move()
    move()
    move()
    move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",81,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()


def step_up():
    move()
    move()
    move()
    move()


def turn_around():
    turn_left()
    turn_left()


if __name__ == ""__main__"":
    main()
",81,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0,"from karel. stanford kavel import *
def main ():
build-column ( )
step -up ( )
build- column ()
Step -up ()
build- column ( )
Step -up ()
build - column ()
def
build - column ( ) :
turn - left ( )
build - beeper ()
build - beeper ( )
build - beeper ( )
build - beeper ( )
put - beeper ( )
go - back ()
turn- left ( )
def
build - beeper ( ) :
put - beeper ()
move ()
det
go - back ():
turn- around ( )
step -up ()
dex
turn- around () :
turn - left ()
turn - left ()
dex
step-up ():
move ()
move ( )
move ( )
move ( )
-
if - name _ == - main _:
main ( )",251,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0,"from karel. Stanfordkavel import * def main ():
build_column ()
step - up ()
build - column ()
Step - up ()
build_column ()
Step - up ()
build - column()
def build - column ():
turn - left ()
build - beeper ()
build - beeper ()
build - beeper ()
buitd - beeper ()
put - beeper ()
go - back ()
turn - left ()
det build-beeper ():
put - beeper ()
move ()
det go-back ():
turn - around ()
step - up ()
dex turn - around () :
turn - left ()
turn - left()
def step-up ():
move ()
move ()
move ()
move ()
if _ name _ \( == \) 'main _ :
main ()",233,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0,"from karel.Stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",1,"from karel.stanfordkarel import *


def main():
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()
    step_up()
    build_column()


def build_column():
    turn_left()
    build_beeper()
    build_beeper()
    build_beeper()
    build_beeper()
    put_beeper()
    go_back()
    turn_left()


def build_beeper():
    put_beeper()
    move()


def go_back():
    turn_around()
    step_up()


def turn_around():
    turn_left()
    turn_left()


def step_up():
    move()
    move()
    move()
    move()


if __name__ == ""__main__"":
    main()
",0
"def main():
    input_string = input('Input string: ')
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print ret

if __name__ == '__main__':
    main()",1,"def main ():
if
input_ string = input ('Input string; ')
11 11
ret =
for ch in input-string
ret
print ret
71
= ret + ch. uppert)
name__ =
main ()
main
20 07203",78,"def main():
    input_string = input(""Input string: "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",8,"def main():
    input_string = input(""Input string: "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",8,"def main():
    input_string = input(""Input string: "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",8,"def main () :
input - string = input(' Input string ')
ret = 11 11
for ch in input - stiting
ret = ret + ch. upperl )
print ret
1
1
if
name
main
-
-
main
()",66,"def main():
    input_string = input(""Input string "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9,"def main():
    input_string = input(""Input string "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9,"def main():
    input_string = input(""Input string "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9,"def main () ;
input_ string = input ( Input string:')
ret = "" ""
for ch in input string
ref = ret + ch.upper()
print ref
if __ name __ =
1
1
- -
main
--
main ( )",57,"def main():
    input_string = input(""Input string:"")
    ret = "" ""
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",10,"def main():
    input_string = input(""Input string:"")
    ret = "" ""
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",10,"def main():
    input_string = input(""Input string:"")
    ret = "" ""
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",10,"def main ():
\[
\begin{array}{l}
\text { input_string = input ('Input string! ') } \\
\text { ret }="" 11
\end{array}
\]
for ch in input.string
\[
\text { ret }=\text { ret }+ \text { ch. upperd) }
\]
print ret
if name \( \operatorname{main}( \) )",122,"def main():
    input_string = input(""Input string! "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9,"def main():
    input_string = input(""Input string! "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9,"def main():
    input_string = input(""Input string! "")
    ret = """"
    for ch in input_string:
        ret = ret + ch.upper()
    print(ret)


if __name__ == ""__main__"":
    main()
",9
"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",1,"O
O
O
from Kare!. Stamford Karel impert
def main ():
mere to beeper ()
pick beeper ()
turn-around ()
return to_start()
def muere to beepet():
while front_is_clear ():
Move
turn_right()
more()
turu-left()
More()
det turn around ():
turn left ()
turn left ()",106,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",3,":
from karel.stanford_karel import *

def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return to_start()

def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()

def turn_around():
    turn_left()
    turn_left()
",9,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
        turn_right()
        move()
        turn_left()
        move()


def turn_around():
    turn_left()
    turn_left()
",18,"from Karel. stanfordKarel import
def main ():
move to beeper ()
pick_beeper()
turu_around()
Return to-start()
def more to beeper() :
while front-is-clear ():
move
turn_right()
more(
turn-left()
more()
det turu around ();
turn_ left ()
turu left ()",93,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()


def turn_around():
    turn_left()
    turn_left()
",29,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()


def turn_right():
    turn_left()
    turn_left()
    turn_left()


def turn_around():
    turn_left()
    turn_left()


def return_to_start():
    # actions for returning to start to be defined here
    pass
",128,"from Karel. StanfordKarel import
def main ():
move_to_beeper ()
pick-beeper ()
turn-around()
return_to_start ()
def more_to_ beeper () :
While front-is-clear ();
move
turn_Right ()
move ()
turn-left ()
move ()
def turu_around ():
tura_left ()
turn left ()",92,"from Karel.StanfordKarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",3,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from Karel. stanfordKarel import
def main ():
move to beeper ()
pick-beeper ()
turu_around ()
ceturn to_start()
def more to beeper ():
while frout_is_clear (1):
move
turn_right ()
more ()
turu-left()
morre()
def turu_around ():
turu left ()
turu left ()",96,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move()
    turn_left()
    move()


def turn_around():
    turn_left()
    turn_left()
",2,"from karel.stanfordkarel import *


def main():
    move_to_beeper()
    pick_beeper()
    turn_around()
    return_to_start()


def move_to_beeper():
    while front_is_clear():
        move()
    turn_right()
    move_to_beeper()
    turn_left()
    move_to_beeper()


def turn_around():
    turn_left()
    turn_left()
",22
"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",1,"from kanel.stanfordkarel import
def main ():
while front_is_ clear():
bill tower ()
def fill_tower ():
-
while front_is_ clear ():
put-beeper ()
move()
put_beeper()
column_return ()
def column_return ():
if
def turn around ():
while front_is_blocked ():
turn-around()
while front_is_ clear():
move ()
next-tower()
-
def next tower ():
if right_is_dean ():
turn_right()
move()
turn_right()
for i in range (2):
turn_left()
—
else:
turn around ()
while front_is_dear():
def turn_right():
-
move()
-
name
main ()
for i in range (3):
turn_left()
_main_':",323,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    def turn_around():
        while front_is_blocked():
            turn_around()
        while front_is_clear():
            move()

    next_tower()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
        for i in range(2):
            turn_left()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",125,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    if front_is_blocked():
        turn_around()


def turn_around():
    while front_is_blocked():
        turn_around()
        while front_is_clear():
            move()
    next_tower()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
        for i in range(2):
            turn_left()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()
    move()


if __name__ == ""__main__"":
    main()
",153,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    turn_around()
    while front_is_clear():
        move()
    next_tower()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
        for i in range(2):
            turn_left()
    else:
        turn_around()
        while front_is_clear():
            move()
        turn_right()


def turn_around():
    for i in range(2):
        turn_left()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",204,"from karel. stanfordkard import
def main ()
while front. is clear () :
fill_tower()
def fill tower () :
while front - is - clean ():
put - beeper ()
move ()
put_beeper()
column_return() -
def columm_return(): -
while front_is_blocked() :
turn-around()
while front_is_clear()
move()
next_tower()
def turn around()
for i in range (2) :
turn-left()
def next tower() :
if right is-clean - ( ) :
turn -right()
move ()
turn_right()
else :
turn around()
while front_is_dear():
move()
def turn - right ():
for i in range (3) :
turn_left(c)
if - name == I main I :
main ()",238,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
    while front_is_clear():
        move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",8,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from kanel stanfordkard import *
det main () :
while front_is_clear ():
bill_tower ( )
det fill-tower ():
while front-is-clean ():
put-beeper ()
move ()
put_beeper ()
column_return ()
def column_return ():
while front_ is_blocked ():
turn-around ()
while front_is_clear () :
move ( )
next_tower ()
det turn-around ():
for i in range (2) :
turn-left ( )
det next_tower ():
if right_is_clean ():
turn-right ( )
move()
turn-right ()
else :
turn-around ()
while front-is-clear ():
move( )
def turn-right ():
for i in range (3):
turn_left ()
if
- name _
== '_ main
1
..
main ()",243,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        build_tower()


def build_tower():
    while front_is_clear():
        put_beeper()
        move()
        put_beeper()
        column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
    while front_is_clear():
        move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",22,"
from karel.stanfordkarel import *

def main():
while front_is_clear():
    build_tower()
    
def build_tower():
    while front_is_clear():
        put_beeper()
        move()
        put_beeper()
        column_return()

def column_return():
    while front_is_blocked():
        turn_around()
        while front_is_clear():
            move()
        next_tower()

def turn_around():
    for i in range(2):
        turn_left()

def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else :
        turn_around()
        while front_is_clear():
            move()

def turn_right():
    for i in range(3):
        turn_left()
        
if __name__ == '__main__':
    main()
",54,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        build_tower()


def build_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",6,"from karel.stanfordkarel import *
def main ():
while front_is_dear () :
fill_tower ()
def fill_tower ():
while front_is_dear ():
put-beeper ()
move ()
put_beeper ()
column_return ()
def colurn-return () :
while front_is_blocked ( ):
turn-around ()
while front_is_clear () :
move ()
next_tower ()
def turn_around () :
for \( i \) in range (2):
turn-left ()
def next_tower ( ) :
if right_is_dear ( ):
turn_right ()
move ()
turn_right ()
else:
turn_around( )
while front_is_dear ():
move ()
def turn_right () :
for \( i \) in range (3):
turn_left ()
if _ name \( ==1 \) _ main _ '
main ()",245,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",0,"from karel.stanfordkarel import *


def main():
    while front_is_clear():
        fill_tower()


def fill_tower():
    while front_is_clear():
        put_beeper()
        move()
    put_beeper()
    column_return()


def column_return():
    while front_is_blocked():
        turn_around()
    while front_is_clear():
        move()
    next_tower()


def turn_around():
    for i in range(2):
        turn_left()


def next_tower():
    if right_is_clear():
        turn_right()
        move()
        turn_right()
    else:
        turn_around()
        while front_is_clear():
            move()


def turn_right():
    for i in range(3):
        turn_left()


if __name__ == ""__main__"":
    main()
",0
"def filter_string_a(string):
      string.sort()
      filtered_string_list = [ ]
      for str in string:
             if str.startswith(""a""):
                    filtered_string_list.append(str)
       return filtered_string_list
input_string = [""apple"", ""banana"", ""avacado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)",1,"der fitters string - a (string);
sont ()
string.
filtered_string_list = [3
toru
1
in
string:
stru. start with (""a"");
stru
filtreried_rodring-lirt: append
returen filtered_string-lit
(stru)
imput_string = [""apple"", ""bunana"", ""avacad""
""cheveny"", ""apriest""""]
output = filtern-string- a (imput_string)
print (output)",131,"def filter_string_a(string):
    string
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cheery"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",38,"def filter_string_a(string_list):
    filtered_string_list = []
    for str in string_list:
        if str.startswith(""a""):
            filtered_string_list.append(str)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",46,"def filter_string_a(string_list):
    string_list.sort()
    filtered_string_list = []
    for stru in string_list:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",42,"def - a (string):
string. sort ()
filtered -string-list = -[I
for stru in string :
if stru startswith (""a""):
append (str))
return
input_ string z [ apple"" ""bunana"", ""avacado)
""chevry"", ""apricot""]
output fifter z string a (input-ntuing)
print (output)",151,"
def a(string):
    string.sort()
    filtered_string_list = [
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)]
    return filtered_string_list

input_string = [""apple"", ""banana"", ""avocado"", ""chevy"", ""apricot""]
output = a(input_string)
print(output)
",62,"def a(string):
    string.sort()
    filtered_string_list = [stru for stru in string if stru.startswith(""a"")]
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""chevy"", ""apricot""]
output = a(input_string)
print(output)
",119,"def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",30,"det filter-string-a (string) :
string. sort ()
filtered- string-list = []
foru stre in strung :
if stru. startswith (""a""):
filtered-string-lint: append
( stru)
returen filtered-string- list
input_string = \""apple"", ""bunana"", ""avacado
""cheving "" ""apricot""]
Output = filter-string-a (input_string)
print (output)",104,"def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""chewing"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",34,":
def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list

input_string = [""apple"", ""banana"", ""avocado"", ""chewing"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",35,"def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""chewing"", ""apricot""]
Output = filter_string_a(input_string)
print(Output)
",36,"def filteru-string-a (ntring):
string. sont ()
filtered-string_list \( =[] \)
for stre in atring:
if stru. Ptark with (""an):
fiterced-atring-lint. append (stru)
return filtered-rtring-lirst
imput_rting \( z \) ""apple"", ""bunana"", ""avacado"" ""cherry"" ""apricot"" pring (output)",146,"def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for str in string:
        if str.startswith(""a""):
            filtered_string_list.append(str)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avacado"", ""cherry"", ""apricot""]

print(input_string)
",58,"def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
print(filter_string_a(input_string))
",51,"def filter_string_a(string):
    string.sort()
    filtered_string_list = []
    for stru in string:
        if stru.startswith(""a""):
            filtered_string_list.append(stru)
    return filtered_string_list


input_string = [""apple"", ""banana"", ""avocado"", ""cherry"", ""apricot""]
output = filter_string_a(input_string)
print(output)
",30
"def main():
  while front_is_clear():
      move()
  if front_is_blocked():
      turn_around()
  move()
  turn_left()
  move()
  pick_beeper()
  turn_left()
  turn_left()
  while front_is_clear():
      move()
  if front_is_blocked():
      turn_around()
  move()
  turn_around()

    
def turn_around():
    for i in range(3)
        turn_left ()",1,"def main:
While front_is_clear();
move()
if front_is_blocked ().
turn-around ()
move ()
turn_left()
move ()
pick_beeper ()
turn - left().
turn_left()
while front is clear ():
Move ()
if front_is_ blocked ():
turn around ().
move()
turn
around ()
def turn around ():
turn- lieft
Left
for i in range (3)
()",117,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    turn_left()
    turn_left()
    for i in range(3):
        pass
",113,"def main():
    while front_is_clear():
        move()
        if front_is_blocked():
            turn_around()
            move()
            turn_left()
            move()
            pick_beeper()
            turn_left()
            turn_left()
        while front_is_clear():
            move()
        if front_is_blocked():
            turn_around()
            move()
            turn_around()


def turn_around():
    turn_left()
    turn_left()


for i in range(3):
    pass
",170,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()

    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    for i in range(2):
        turn_left()
",73,"def main :
While front is clearc):
move
if front _is_blocked ():
turn_around ()
move ( )
turn_left ()
move ()
pick- beeper()
turn - left )
turn - left()
while front is clear ( ):
move ( )
if front is - blocked ()
turn- around ()
movel )
turn around ()
def turn-around ():
for i in range (3)
life ( )",120,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    for i in range(3):
        lift()


main()
",82,"def main():
    while front_is_clear():
        move()
        if front_is_blocked():
            turn_around()
            move()
            turn_left()
            move()
            pick_beeper()
            turn_left()
            turn_left()
    while front_is_clear():
        move()
        if front_is_blocked():
            turn_around()
            move()
            turn_around()


def turn_around():
    for i in range(3):
        lift()
",125,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    for i in range(3):
        lift()
",77,"def main :
While front-is-clear():
move ( )
if front_is_blocked ().
turn-around ()
move ()
turn_left ( )
move ()
pick-beeper ()
turn- left ()
turn-left ()
while front_is_clear ()!
move ( )
if front_is _ blocked ( ).
turn - around ( )
move ()
turn around ()
def turn-around ():
for i in range (3)
left ()",112,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    for i in range(3):
        left()
",76,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    for i in range(3):
        left()
",76,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_left()
        move()
        pick_beeper()
        turn_left()
        turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
        move()
        turn_around()


def turn_around():
    for i in range(2):
        turn_left()
",72,"def main:
While front_is_clearc):
move ()
if front-is-blocked ():
tuin-around()
move ()
turn-left ()
move ()
pick-beeperc)
tuin-left()
tuin-left()
while front_is clear ():
move ()
if front-is-blocked ():
turn-around ()
move()
turn around ()
def turn-around ():
for in range (3)",114,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_left()
    move()
    pick_beeper()
    turn_left()
    turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_around()


def turn_around():
    for _ in range(3):
        turn_left()
",40,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_left()
    move()
    pick_beeper()
    turn_left()
    turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_around()


def turn_around():
    for _ in range(3):
        pass  # You need to put a valid sequence here
",79,"def main():
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_left()
    move()
    pick_beeper()
    turn_left()
    turn_left()
    while front_is_clear():
        move()
    if front_is_blocked():
        turn_around()
    move()
    turn_around()


def turn_around():
    for i in range(2):
        turn_left()
",40
"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return False
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",1,"-def is_leap-year (year);
if year % 4= = 0!
is yeare °6 100 = = 0:
1 year 1.400.
if
return. Trive
0:
ebbe:
return false
else:
else:
return false
return false
def main ():
yeare = int Cinput (""Enter a year: ""))
is_ leap - is_ leap year (year)
print (is-leap)
if name_
maino
==
11
main"":",185,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is - leap-year (year):
if year % 4 == O:
if year % 100 = O:
if year % 400 = = O:
return True
else:
return False
else:
return False
else:
return False
def main ():
year = int (input (""Enter a year: ""))
is- leap = is_ 1 eap-year (year)
print (is_ leap)
if 1 name = -"" main
"":
if
main()",153,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return False
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",0,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return False
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",0,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is-leap year (year):
if years % 4 == 0'
if year % 100= = 0:
year % 400 = = 0:
return True
else:
return False
else:
return False
else:
return False
def main ().
year = int (input (""Enter a year: "")
is- leap= is-leap- year (years)
print (is-leap)
if
name_ = ""_main_"":
main()",154,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return False
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",0,"def is-leap-year (year):
if yeare \( \% 4==0 \) :
if year \( \% 100=0 \) :
if year \( \% 400==0 \) :
return. True
else:
return False
else:
retur false
else:
ruturn False
def \( \operatorname{main}() \) :
yearc = int (input (""Enter a year: ""))
is teap = is leap-year (year)
print (is_leap)
if \( \operatorname{mame}_{-}=="" \) main "":
main()",202,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def main():
    year = int(input(""Enter a year: ""))
    is_leap = is_leap_year(year)
    print(is_leap)


if __name__ == ""__main__"":
    main()
",4
"def main():
    print("" problem - 5 "")
    print(""-----------------"")
    numb = int(input(""write an  number: ""))
    mak_list = [int(x) for x in str(numb)]

    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the number's digit: "", add_numb)


if __name__ == ""__main__"":
    main()
",1,"def main ():
print (""problem - 5
---"")
print (""---
numb = int (input (write an integer number:
mak_list = [int (x) for x in sts (numb)]
add-numb = 0
fon is in mak_list:
-5 "")
add_numb + = i
print (""Sum of the numbers:
digit
if_name__
main()
=
u
main__""
11
')
add_numb)",126,"def main():
    print(""problem - 5 ---"")
    num = int(input(""Write an integer number: ""))
    mak_list = [int(x) for x in str(num)]
    add_num = 0
    for i in mak_list:
        add_num += i
    print(""Sum of the numbers:"", add_num)


if __name__ == ""__main__"":
    main()
",51,"def main():
    print(""problem - 5 ---"")
    num = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(num)]
    add_num = 0
    for i in mak_list:
        add_num += i
    print(""Sum of the numbers: "", add_num)


if __name__ == ""__main__"":
    main()
",49,"def main():
    print(""Problem - 5"")
    print(""---"")
    num = int(input(""Write an integer number: ""))
    mak_list = [int(x) for x in str(num)]
    add_num = 0
    for i in mak_list:
        add_num += i
    print(""Sum of the numbers: "", add_num)


if __name__ == ""__main__"":
    main()
",38,"def main() :
print ("" ""problem -5 "")
"")
numb = int (input (write an integer number: ')
print (""
mak list = [ int (x) for x in str (numb)]
add-numb = 0
for is in mak_list :
add-numb + = i
print (""sum of the number's: "", add-numb)
digit
if name = = ""_ main__""
main()",116,"def main():
    print(""problem -5"")
    numb = int(input(""write an integer number: ""))
    print("""")
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""sum of the number's: "", add_numb)


if __name__ == ""__main__"":
    main()
",63,"def main():
    print(""problem -5 "")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",49,"def main():
    print(""problem -5"")
    numb = int(input(""Write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",50,"def main () :
print (""problem - 5 "")
print (""-
rumb = int (input ('write an integer number:
mak_list = [int (x) for x in str (numb)]
add-numb = 0
for is in mak-list :
add-numb +=i
print (""Sum of the number's:
"", add_numb)
digit
if_ name __ = =
-- main __:
main()",109,"def main():
    print(""Problem - 5 "")
    num = int(input(""Write an integer number: ""))
    mak_list = [int(x) for x in str(num)]
    add_num = 0
    for i in mak_list:
        add_num += i
    print(""Sum of the numbers: "", add_num)


if __name__ == ""__main__"":
    main()
",54,"def main():
    print(""Problem - 5 "")
    numb = int(input(""write an integer number: ""))
    make_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in make_list:
        add_numb += i
    print(""Sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",50,"def main():
    print(""problem - 5"")

    numb = int(input(""write an integer number: ""))
    make_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in make_list:
        add_numb += i
    print(""Sum of the number's digits: "", add_numb)


if __name__ == ""__main__"":
    main()
",43,"def main ():
print (""problem - 5 "")
print (""............"")
numb = int (input ('write an integer number: ')
mak_list \( =[ \) int \( (x) \) for \( x \) in rtr (numb) \( ] \)
add-numb \( =0 \)
fon is in mak-list:
add_numb \( +=i \)
print (""Sum of the numbers: "", \( a d d \)-numb)
If _ name _ \( == \) ""- main_.""
main()",142,"
def main():
		print(""problem - 5 "")
		print(""............"")
		numb = int(input('write an integer number: '))
		mak_list = [int(x) for x in str(numb)]
		add_numb = 0
		for i in mak_list:
				add_numb += i
		print(""Sum of the numbers: "", add_numb)
	if __name__ == ""__main__"":
		main()
",78,"def main():
    print(""problem - 5 "")
    print(""............"")
    numb = int(input(""write an integer number: ""))
    mak_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in mak_list:
        add_numb += i
    print(""Sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",33,"def main():
    print(""Problem - 5 "")
    print(""............"")
    numb = int(input(""Write an integer number: ""))
    make_list = [int(x) for x in str(numb)]
    add_numb = 0
    for i in make_list:
        add_numb += i
    print(""Sum of the numbers: "", add_numb)


if __name__ == ""__main__"":
    main()
",37